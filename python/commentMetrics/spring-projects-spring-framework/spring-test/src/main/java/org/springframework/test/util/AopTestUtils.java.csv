# id;timestamp;commentText;codeText;commentWords;codeWords
AopTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T getUltimateTargetObject(Object candidate);1431196348;Get the ultimate <em>target</em> object of the supplied {@code candidate}_object, unwrapping not only a top-level proxy but also any number of_nested proxies._<p>If the supplied {@code candidate} is a Spring_{@linkplain AopUtils#isAopProxy proxy}, the ultimate target of all_nested proxies will be returned_ otherwise, the {@code candidate}_will be returned <em>as is</em>.__@param candidate the instance to check (potentially a Spring AOP proxy)_@return the ultimate target object or the {@code candidate}_ never_{@code null}_@throws IllegalStateException if an error occurs while unwrapping a proxy_@see Advised#getTargetSource()_@see org.springframework.aop.framework.AopProxyUtils#ultimateTargetClass;@SuppressWarnings("unchecked")_	public static <T> T getUltimateTargetObject(Object candidate) {_		try {_			if (AopUtils.isAopProxy(candidate) && (candidate instanceof Advised)) {_				return (T) getUltimateTargetObject(((Advised) candidate).getTargetSource().getTarget())__			}_		}_		catch (Exception e) {_			throw new IllegalStateException("Failed to unwrap proxied object.", e)__		}__		_		return (T) candidate__	};get,the,ultimate,em,target,em,object,of,the,supplied,code,candidate,object,unwrapping,not,only,a,top,level,proxy,but,also,any,number,of,nested,proxies,p,if,the,supplied,code,candidate,is,a,spring,linkplain,aop,utils,is,aop,proxy,proxy,the,ultimate,target,of,all,nested,proxies,will,be,returned,otherwise,the,code,candidate,will,be,returned,em,as,is,em,param,candidate,the,instance,to,check,potentially,a,spring,aop,proxy,return,the,ultimate,target,object,or,the,code,candidate,never,code,null,throws,illegal,state,exception,if,an,error,occurs,while,unwrapping,a,proxy,see,advised,get,target,source,see,org,springframework,aop,framework,aop,proxy,utils,ultimate,target,class;suppress,warnings,unchecked,public,static,t,t,get,ultimate,target,object,object,candidate,try,if,aop,utils,is,aop,proxy,candidate,candidate,instanceof,advised,return,t,get,ultimate,target,object,advised,candidate,get,target,source,get,target,catch,exception,e,throw,new,illegal,state,exception,failed,to,unwrap,proxied,object,e,return,t,candidate
AopTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T getUltimateTargetObject(Object candidate);1431198160;Get the ultimate <em>target</em> object of the supplied {@code candidate}_object, unwrapping not only a top-level proxy but also any number of_nested proxies._<p>If the supplied {@code candidate} is a Spring_{@linkplain AopUtils#isAopProxy proxy}, the ultimate target of all_nested proxies will be returned_ otherwise, the {@code candidate}_will be returned <em>as is</em>.__@param candidate the instance to check (potentially a Spring AOP proxy)__never {@code null}_@return the ultimate target object or the {@code candidate}_ never_{@code null}_@throws IllegalStateException if an error occurs while unwrapping a proxy_@see Advised#getTargetSource()_@see org.springframework.aop.framework.AopProxyUtils#ultimateTargetClass;@SuppressWarnings("unchecked")_	public static <T> T getUltimateTargetObject(Object candidate) {_		Assert.notNull(candidate, "candidate must not be null")__		try {_			if (AopUtils.isAopProxy(candidate) && (candidate instanceof Advised)) {_				return (T) getUltimateTargetObject(((Advised) candidate).getTargetSource().getTarget())__			}_		}_		catch (Exception e) {_			throw new IllegalStateException("Failed to unwrap proxied object.", e)__		}_		return (T) candidate__	};get,the,ultimate,em,target,em,object,of,the,supplied,code,candidate,object,unwrapping,not,only,a,top,level,proxy,but,also,any,number,of,nested,proxies,p,if,the,supplied,code,candidate,is,a,spring,linkplain,aop,utils,is,aop,proxy,proxy,the,ultimate,target,of,all,nested,proxies,will,be,returned,otherwise,the,code,candidate,will,be,returned,em,as,is,em,param,candidate,the,instance,to,check,potentially,a,spring,aop,proxy,never,code,null,return,the,ultimate,target,object,or,the,code,candidate,never,code,null,throws,illegal,state,exception,if,an,error,occurs,while,unwrapping,a,proxy,see,advised,get,target,source,see,org,springframework,aop,framework,aop,proxy,utils,ultimate,target,class;suppress,warnings,unchecked,public,static,t,t,get,ultimate,target,object,object,candidate,assert,not,null,candidate,candidate,must,not,be,null,try,if,aop,utils,is,aop,proxy,candidate,candidate,instanceof,advised,return,t,get,ultimate,target,object,advised,candidate,get,target,source,get,target,catch,exception,e,throw,new,illegal,state,exception,failed,to,unwrap,proxied,object,e,return,t,candidate
AopTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T getUltimateTargetObject(Object candidate);1458149654;Get the ultimate <em>target</em> object of the supplied {@code candidate}_object, unwrapping not only a top-level proxy but also any number of_nested proxies._<p>If the supplied {@code candidate} is a Spring_{@linkplain AopUtils#isAopProxy proxy}, the ultimate target of all_nested proxies will be returned_ otherwise, the {@code candidate}_will be returned <em>as is</em>.__@param candidate the instance to check (potentially a Spring AOP proxy)__never {@code null}_@return the ultimate target object or the {@code candidate}_ never_{@code null}_@throws IllegalStateException if an error occurs while unwrapping a proxy_@see Advised#getTargetSource()_@see org.springframework.aop.framework.AopProxyUtils#ultimateTargetClass;@SuppressWarnings("unchecked")_	public static <T> T getUltimateTargetObject(Object candidate) {_		Assert.notNull(candidate, "candidate must not be null")__		try {_			if (AopUtils.isAopProxy(candidate) && (candidate instanceof Advised)) {_				return (T) getUltimateTargetObject(((Advised) candidate).getTargetSource().getTarget())__			}_		}_		catch (Exception e) {_			throw new IllegalStateException("Failed to unwrap proxied object.", e)__		}_		return (T) candidate__	};get,the,ultimate,em,target,em,object,of,the,supplied,code,candidate,object,unwrapping,not,only,a,top,level,proxy,but,also,any,number,of,nested,proxies,p,if,the,supplied,code,candidate,is,a,spring,linkplain,aop,utils,is,aop,proxy,proxy,the,ultimate,target,of,all,nested,proxies,will,be,returned,otherwise,the,code,candidate,will,be,returned,em,as,is,em,param,candidate,the,instance,to,check,potentially,a,spring,aop,proxy,never,code,null,return,the,ultimate,target,object,or,the,code,candidate,never,code,null,throws,illegal,state,exception,if,an,error,occurs,while,unwrapping,a,proxy,see,advised,get,target,source,see,org,springframework,aop,framework,aop,proxy,utils,ultimate,target,class;suppress,warnings,unchecked,public,static,t,t,get,ultimate,target,object,object,candidate,assert,not,null,candidate,candidate,must,not,be,null,try,if,aop,utils,is,aop,proxy,candidate,candidate,instanceof,advised,return,t,get,ultimate,target,object,advised,candidate,get,target,source,get,target,catch,exception,e,throw,new,illegal,state,exception,failed,to,unwrap,proxied,object,e,return,t,candidate
AopTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T getUltimateTargetObject(Object candidate);1470831642;Get the ultimate <em>target</em> object of the supplied {@code candidate}_object, unwrapping not only a top-level proxy but also any number of_nested proxies._<p>If the supplied {@code candidate} is a Spring_{@linkplain AopUtils#isAopProxy proxy}, the ultimate target of all_nested proxies will be returned_ otherwise, the {@code candidate}_will be returned <em>as is</em>._@param candidate the instance to check (potentially a Spring AOP proxy)__never {@code null}_@return the ultimate target object or the {@code candidate}_ never_{@code null}_@throws IllegalStateException if an error occurs while unwrapping a proxy_@see Advised#getTargetSource()_@see org.springframework.aop.framework.AopProxyUtils#ultimateTargetClass;@SuppressWarnings("unchecked")_	public static <T> T getUltimateTargetObject(Object candidate) {_		Assert.notNull(candidate, "candidate must not be null")__		try {_			if (AopUtils.isAopProxy(candidate) && (candidate instanceof Advised)) {_				return (T) getUltimateTargetObject(((Advised) candidate).getTargetSource().getTarget())__			}_		}_		catch (Exception ex) {_			throw new IllegalStateException("Failed to unwrap proxied object", ex)__		}_		return (T) candidate__	};get,the,ultimate,em,target,em,object,of,the,supplied,code,candidate,object,unwrapping,not,only,a,top,level,proxy,but,also,any,number,of,nested,proxies,p,if,the,supplied,code,candidate,is,a,spring,linkplain,aop,utils,is,aop,proxy,proxy,the,ultimate,target,of,all,nested,proxies,will,be,returned,otherwise,the,code,candidate,will,be,returned,em,as,is,em,param,candidate,the,instance,to,check,potentially,a,spring,aop,proxy,never,code,null,return,the,ultimate,target,object,or,the,code,candidate,never,code,null,throws,illegal,state,exception,if,an,error,occurs,while,unwrapping,a,proxy,see,advised,get,target,source,see,org,springframework,aop,framework,aop,proxy,utils,ultimate,target,class;suppress,warnings,unchecked,public,static,t,t,get,ultimate,target,object,object,candidate,assert,not,null,candidate,candidate,must,not,be,null,try,if,aop,utils,is,aop,proxy,candidate,candidate,instanceof,advised,return,t,get,ultimate,target,object,advised,candidate,get,target,source,get,target,catch,exception,ex,throw,new,illegal,state,exception,failed,to,unwrap,proxied,object,ex,return,t,candidate
AopTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T getUltimateTargetObject(Object candidate);1487178338;Get the ultimate <em>target</em> object of the supplied {@code candidate}_object, unwrapping not only a top-level proxy but also any number of_nested proxies._<p>If the supplied {@code candidate} is a Spring_{@linkplain AopUtils#isAopProxy proxy}, the ultimate target of all_nested proxies will be returned_ otherwise, the {@code candidate}_will be returned <em>as is</em>._@param candidate the instance to check (potentially a Spring AOP proxy__never {@code null})_@return the target object or the {@code candidate} (never {@code null})_@throws IllegalStateException if an error occurs while unwrapping a proxy_@see Advised#getTargetSource()_@see org.springframework.aop.framework.AopProxyUtils#ultimateTargetClass;@SuppressWarnings("unchecked")_	public static <T> T getUltimateTargetObject(Object candidate) {_		Assert.notNull(candidate, "Candidate must not be null")__		try {_			if (AopUtils.isAopProxy(candidate) && candidate instanceof Advised) {_				return (T) getUltimateTargetObject(((Advised) candidate).getTargetSource().getTarget())__			}_		}_		catch (Throwable ex) {_			throw new IllegalStateException("Failed to unwrap proxied object", ex)__		}_		return (T) candidate__	};get,the,ultimate,em,target,em,object,of,the,supplied,code,candidate,object,unwrapping,not,only,a,top,level,proxy,but,also,any,number,of,nested,proxies,p,if,the,supplied,code,candidate,is,a,spring,linkplain,aop,utils,is,aop,proxy,proxy,the,ultimate,target,of,all,nested,proxies,will,be,returned,otherwise,the,code,candidate,will,be,returned,em,as,is,em,param,candidate,the,instance,to,check,potentially,a,spring,aop,proxy,never,code,null,return,the,target,object,or,the,code,candidate,never,code,null,throws,illegal,state,exception,if,an,error,occurs,while,unwrapping,a,proxy,see,advised,get,target,source,see,org,springframework,aop,framework,aop,proxy,utils,ultimate,target,class;suppress,warnings,unchecked,public,static,t,t,get,ultimate,target,object,object,candidate,assert,not,null,candidate,candidate,must,not,be,null,try,if,aop,utils,is,aop,proxy,candidate,candidate,instanceof,advised,return,t,get,ultimate,target,object,advised,candidate,get,target,source,get,target,catch,throwable,ex,throw,new,illegal,state,exception,failed,to,unwrap,proxied,object,ex,return,t,candidate
AopTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T getUltimateTargetObject(Object candidate);1497300858;Get the ultimate <em>target</em> object of the supplied {@code candidate}_object, unwrapping not only a top-level proxy but also any number of_nested proxies._<p>If the supplied {@code candidate} is a Spring_{@linkplain AopUtils#isAopProxy proxy}, the ultimate target of all_nested proxies will be returned_ otherwise, the {@code candidate}_will be returned <em>as is</em>._@param candidate the instance to check (potentially a Spring AOP proxy__never {@code null})_@return the target object or the {@code candidate} (never {@code null})_@throws IllegalStateException if an error occurs while unwrapping a proxy_@see Advised#getTargetSource()_@see org.springframework.aop.framework.AopProxyUtils#ultimateTargetClass;@SuppressWarnings("unchecked")_	public static <T> T getUltimateTargetObject(Object candidate) {_		Assert.notNull(candidate, "Candidate must not be null")__		try {_			if (AopUtils.isAopProxy(candidate) && candidate instanceof Advised) {_				Object target = ((Advised) candidate).getTargetSource().getTarget()__				if (target != null) {_					return (T) getUltimateTargetObject(target)__				}_			}_		}_		catch (Throwable ex) {_			throw new IllegalStateException("Failed to unwrap proxied object", ex)__		}_		return (T) candidate__	};get,the,ultimate,em,target,em,object,of,the,supplied,code,candidate,object,unwrapping,not,only,a,top,level,proxy,but,also,any,number,of,nested,proxies,p,if,the,supplied,code,candidate,is,a,spring,linkplain,aop,utils,is,aop,proxy,proxy,the,ultimate,target,of,all,nested,proxies,will,be,returned,otherwise,the,code,candidate,will,be,returned,em,as,is,em,param,candidate,the,instance,to,check,potentially,a,spring,aop,proxy,never,code,null,return,the,target,object,or,the,code,candidate,never,code,null,throws,illegal,state,exception,if,an,error,occurs,while,unwrapping,a,proxy,see,advised,get,target,source,see,org,springframework,aop,framework,aop,proxy,utils,ultimate,target,class;suppress,warnings,unchecked,public,static,t,t,get,ultimate,target,object,object,candidate,assert,not,null,candidate,candidate,must,not,be,null,try,if,aop,utils,is,aop,proxy,candidate,candidate,instanceof,advised,object,target,advised,candidate,get,target,source,get,target,if,target,null,return,t,get,ultimate,target,object,target,catch,throwable,ex,throw,new,illegal,state,exception,failed,to,unwrap,proxied,object,ex,return,t,candidate
AopTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T getTargetObject(Object candidate);1431196348;Get the <em>target</em> object of the supplied {@code candidate} object._<p>If the supplied {@code candidate} is a Spring_{@linkplain AopUtils#isAopProxy proxy}, the target of the proxy will_be returned_ otherwise, the {@code candidate} will be returned_<em>as is</em>.__@param candidate the instance to check (potentially a Spring AOP proxy)_@return the target object or the {@code candidate}_ never {@code null}_@throws IllegalStateException if an error occurs while unwrapping a proxy_@see Advised#getTargetSource()_@see #getUltimateTargetObject;@SuppressWarnings("unchecked")_	public static <T> T getTargetObject(Object candidate) {_		try {_			if (AopUtils.isAopProxy(candidate) && (candidate instanceof Advised)) {_				return (T) ((Advised) candidate).getTargetSource().getTarget()__			}_		}_		catch (Exception e) {_			throw new IllegalStateException("Failed to unwrap proxied object.", e)__		}__		_		return (T) candidate__	};get,the,em,target,em,object,of,the,supplied,code,candidate,object,p,if,the,supplied,code,candidate,is,a,spring,linkplain,aop,utils,is,aop,proxy,proxy,the,target,of,the,proxy,will,be,returned,otherwise,the,code,candidate,will,be,returned,em,as,is,em,param,candidate,the,instance,to,check,potentially,a,spring,aop,proxy,return,the,target,object,or,the,code,candidate,never,code,null,throws,illegal,state,exception,if,an,error,occurs,while,unwrapping,a,proxy,see,advised,get,target,source,see,get,ultimate,target,object;suppress,warnings,unchecked,public,static,t,t,get,target,object,object,candidate,try,if,aop,utils,is,aop,proxy,candidate,candidate,instanceof,advised,return,t,advised,candidate,get,target,source,get,target,catch,exception,e,throw,new,illegal,state,exception,failed,to,unwrap,proxied,object,e,return,t,candidate
AopTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T getTargetObject(Object candidate);1431198160;Get the <em>target</em> object of the supplied {@code candidate} object._<p>If the supplied {@code candidate} is a Spring_{@linkplain AopUtils#isAopProxy proxy}, the target of the proxy will_be returned_ otherwise, the {@code candidate} will be returned_<em>as is</em>.__@param candidate the instance to check (potentially a Spring AOP proxy)__never {@code null}_@return the target object or the {@code candidate}_ never {@code null}_@throws IllegalStateException if an error occurs while unwrapping a proxy_@see Advised#getTargetSource()_@see #getUltimateTargetObject;@SuppressWarnings("unchecked")_	public static <T> T getTargetObject(Object candidate) {_		Assert.notNull(candidate, "candidate must not be null")__		try {_			if (AopUtils.isAopProxy(candidate) && (candidate instanceof Advised)) {_				return (T) ((Advised) candidate).getTargetSource().getTarget()__			}_		}_		catch (Exception e) {_			throw new IllegalStateException("Failed to unwrap proxied object.", e)__		}_		return (T) candidate__	};get,the,em,target,em,object,of,the,supplied,code,candidate,object,p,if,the,supplied,code,candidate,is,a,spring,linkplain,aop,utils,is,aop,proxy,proxy,the,target,of,the,proxy,will,be,returned,otherwise,the,code,candidate,will,be,returned,em,as,is,em,param,candidate,the,instance,to,check,potentially,a,spring,aop,proxy,never,code,null,return,the,target,object,or,the,code,candidate,never,code,null,throws,illegal,state,exception,if,an,error,occurs,while,unwrapping,a,proxy,see,advised,get,target,source,see,get,ultimate,target,object;suppress,warnings,unchecked,public,static,t,t,get,target,object,object,candidate,assert,not,null,candidate,candidate,must,not,be,null,try,if,aop,utils,is,aop,proxy,candidate,candidate,instanceof,advised,return,t,advised,candidate,get,target,source,get,target,catch,exception,e,throw,new,illegal,state,exception,failed,to,unwrap,proxied,object,e,return,t,candidate
AopTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T getTargetObject(Object candidate);1458149654;Get the <em>target</em> object of the supplied {@code candidate} object._<p>If the supplied {@code candidate} is a Spring_{@linkplain AopUtils#isAopProxy proxy}, the target of the proxy will_be returned_ otherwise, the {@code candidate} will be returned_<em>as is</em>.__@param candidate the instance to check (potentially a Spring AOP proxy)__never {@code null}_@return the target object or the {@code candidate}_ never {@code null}_@throws IllegalStateException if an error occurs while unwrapping a proxy_@see Advised#getTargetSource()_@see #getUltimateTargetObject;@SuppressWarnings("unchecked")_	public static <T> T getTargetObject(Object candidate) {_		Assert.notNull(candidate, "candidate must not be null")__		try {_			if (AopUtils.isAopProxy(candidate) && (candidate instanceof Advised)) {_				return (T) ((Advised) candidate).getTargetSource().getTarget()__			}_		}_		catch (Exception e) {_			throw new IllegalStateException("Failed to unwrap proxied object.", e)__		}_		return (T) candidate__	};get,the,em,target,em,object,of,the,supplied,code,candidate,object,p,if,the,supplied,code,candidate,is,a,spring,linkplain,aop,utils,is,aop,proxy,proxy,the,target,of,the,proxy,will,be,returned,otherwise,the,code,candidate,will,be,returned,em,as,is,em,param,candidate,the,instance,to,check,potentially,a,spring,aop,proxy,never,code,null,return,the,target,object,or,the,code,candidate,never,code,null,throws,illegal,state,exception,if,an,error,occurs,while,unwrapping,a,proxy,see,advised,get,target,source,see,get,ultimate,target,object;suppress,warnings,unchecked,public,static,t,t,get,target,object,object,candidate,assert,not,null,candidate,candidate,must,not,be,null,try,if,aop,utils,is,aop,proxy,candidate,candidate,instanceof,advised,return,t,advised,candidate,get,target,source,get,target,catch,exception,e,throw,new,illegal,state,exception,failed,to,unwrap,proxied,object,e,return,t,candidate
AopTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T getTargetObject(Object candidate);1470831642;Get the <em>target</em> object of the supplied {@code candidate} object._<p>If the supplied {@code candidate} is a Spring_{@linkplain AopUtils#isAopProxy proxy}, the target of the proxy will_be returned_ otherwise, the {@code candidate} will be returned_<em>as is</em>._@param candidate the instance to check (potentially a Spring AOP proxy)__never {@code null}_@return the target object or the {@code candidate}_ never {@code null}_@throws IllegalStateException if an error occurs while unwrapping a proxy_@see Advised#getTargetSource()_@see #getUltimateTargetObject;@SuppressWarnings("unchecked")_	public static <T> T getTargetObject(Object candidate) {_		Assert.notNull(candidate, "candidate must not be null")__		try {_			if (AopUtils.isAopProxy(candidate) && (candidate instanceof Advised)) {_				return (T) ((Advised) candidate).getTargetSource().getTarget()__			}_		}_		catch (Exception ex) {_			throw new IllegalStateException("Failed to unwrap proxied object", ex)__		}_		return (T) candidate__	};get,the,em,target,em,object,of,the,supplied,code,candidate,object,p,if,the,supplied,code,candidate,is,a,spring,linkplain,aop,utils,is,aop,proxy,proxy,the,target,of,the,proxy,will,be,returned,otherwise,the,code,candidate,will,be,returned,em,as,is,em,param,candidate,the,instance,to,check,potentially,a,spring,aop,proxy,never,code,null,return,the,target,object,or,the,code,candidate,never,code,null,throws,illegal,state,exception,if,an,error,occurs,while,unwrapping,a,proxy,see,advised,get,target,source,see,get,ultimate,target,object;suppress,warnings,unchecked,public,static,t,t,get,target,object,object,candidate,assert,not,null,candidate,candidate,must,not,be,null,try,if,aop,utils,is,aop,proxy,candidate,candidate,instanceof,advised,return,t,advised,candidate,get,target,source,get,target,catch,exception,ex,throw,new,illegal,state,exception,failed,to,unwrap,proxied,object,ex,return,t,candidate
AopTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T getTargetObject(Object candidate);1487178338;Get the <em>target</em> object of the supplied {@code candidate} object._<p>If the supplied {@code candidate} is a Spring_{@linkplain AopUtils#isAopProxy proxy}, the target of the proxy will_be returned_ otherwise, the {@code candidate} will be returned_<em>as is</em>._@param candidate the instance to check (potentially a Spring AOP proxy__never {@code null})_@return the target object or the {@code candidate} (never {@code null})_@throws IllegalStateException if an error occurs while unwrapping a proxy_@see Advised#getTargetSource()_@see #getUltimateTargetObject;@SuppressWarnings("unchecked")_	public static <T> T getTargetObject(Object candidate) {_		Assert.notNull(candidate, "Candidate must not be null")__		try {_			if (AopUtils.isAopProxy(candidate) && candidate instanceof Advised) {_				return (T) ((Advised) candidate).getTargetSource().getTarget()__			}_		}_		catch (Throwable ex) {_			throw new IllegalStateException("Failed to unwrap proxied object", ex)__		}_		return (T) candidate__	};get,the,em,target,em,object,of,the,supplied,code,candidate,object,p,if,the,supplied,code,candidate,is,a,spring,linkplain,aop,utils,is,aop,proxy,proxy,the,target,of,the,proxy,will,be,returned,otherwise,the,code,candidate,will,be,returned,em,as,is,em,param,candidate,the,instance,to,check,potentially,a,spring,aop,proxy,never,code,null,return,the,target,object,or,the,code,candidate,never,code,null,throws,illegal,state,exception,if,an,error,occurs,while,unwrapping,a,proxy,see,advised,get,target,source,see,get,ultimate,target,object;suppress,warnings,unchecked,public,static,t,t,get,target,object,object,candidate,assert,not,null,candidate,candidate,must,not,be,null,try,if,aop,utils,is,aop,proxy,candidate,candidate,instanceof,advised,return,t,advised,candidate,get,target,source,get,target,catch,throwable,ex,throw,new,illegal,state,exception,failed,to,unwrap,proxied,object,ex,return,t,candidate
AopTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T getTargetObject(Object candidate);1497300858;Get the <em>target</em> object of the supplied {@code candidate} object._<p>If the supplied {@code candidate} is a Spring_{@linkplain AopUtils#isAopProxy proxy}, the target of the proxy will_be returned_ otherwise, the {@code candidate} will be returned_<em>as is</em>._@param candidate the instance to check (potentially a Spring AOP proxy__never {@code null})_@return the target object or the {@code candidate} (never {@code null})_@throws IllegalStateException if an error occurs while unwrapping a proxy_@see Advised#getTargetSource()_@see #getUltimateTargetObject;@SuppressWarnings("unchecked")_	public static <T> T getTargetObject(Object candidate) {_		Assert.notNull(candidate, "Candidate must not be null")__		try {_			if (AopUtils.isAopProxy(candidate) && candidate instanceof Advised) {_				Object target = ((Advised) candidate).getTargetSource().getTarget()__				if (target != null) {_					return (T) target__				}_			}_		}_		catch (Throwable ex) {_			throw new IllegalStateException("Failed to unwrap proxied object", ex)__		}_		return (T) candidate__	};get,the,em,target,em,object,of,the,supplied,code,candidate,object,p,if,the,supplied,code,candidate,is,a,spring,linkplain,aop,utils,is,aop,proxy,proxy,the,target,of,the,proxy,will,be,returned,otherwise,the,code,candidate,will,be,returned,em,as,is,em,param,candidate,the,instance,to,check,potentially,a,spring,aop,proxy,never,code,null,return,the,target,object,or,the,code,candidate,never,code,null,throws,illegal,state,exception,if,an,error,occurs,while,unwrapping,a,proxy,see,advised,get,target,source,see,get,ultimate,target,object;suppress,warnings,unchecked,public,static,t,t,get,target,object,object,candidate,assert,not,null,candidate,candidate,must,not,be,null,try,if,aop,utils,is,aop,proxy,candidate,candidate,instanceof,advised,object,target,advised,candidate,get,target,source,get,target,if,target,null,return,t,target,catch,throwable,ex,throw,new,illegal,state,exception,failed,to,unwrap,proxied,object,ex,return,t,candidate
