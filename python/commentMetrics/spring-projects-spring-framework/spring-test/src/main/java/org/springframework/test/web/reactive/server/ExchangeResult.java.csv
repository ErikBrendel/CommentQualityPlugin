commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the method of the request.  */ ;/**  * Return the method of the request.  */ public HttpMethod getMethod() {     return this.request.getMethod(). }
true;public;0;3;/**  * Return the URI of the request.  */ ;/**  * Return the URI of the request.  */ public URI getUrl() {     return this.request.getURI(). }
true;public;0;4;/**  * Return the original URI template used to prepare the request, if any.  */ ;/**  * Return the original URI template used to prepare the request, if any.  */ @Nullable public String getUriTemplate() {     return this.uriTemplate. }
true;public;0;3;/**  * Return the request headers sent to the server.  */ ;/**  * Return the request headers sent to the server.  */ public HttpHeaders getRequestHeaders() {     return this.request.getHeaders(). }
true;public;0;4;/**  * Return the raw request body content written through the request.  * <p><strong>Note:</strong> If the request content has not been consumed  * for any reason yet, use of this method will trigger consumption.  * @throws IllegalStateException if the request body is not been fully written.  */ ;/**  * Return the raw request body content written through the request.  * <p><strong>Note:</strong> If the request content has not been consumed  * for any reason yet, use of this method will trigger consumption.  * @throws IllegalStateException if the request body is not been fully written.  */ @Nullable public byte[] getRequestBodyContent() {     return this.requestBody.block(this.timeout). }
true;public;0;3;/**  * Return the status of the executed request.  */ ;/**  * Return the status of the executed request.  */ public HttpStatus getStatus() {     return this.response.getStatusCode(). }
true;public;0;3;/**  * Return the response headers received from the server.  */ ;/**  * Return the response headers received from the server.  */ public HttpHeaders getResponseHeaders() {     return this.response.getHeaders(). }
true;public;0;3;/**  * Return response cookies received from the server.  */ ;/**  * Return response cookies received from the server.  */ public MultiValueMap<String, ResponseCookie> getResponseCookies() {     return this.response.getCookies(). }
true;public;0;4;/**  * Return the raw request body content written to the response.  * <p><strong>Note:</strong> If the response content has not been consumed  * yet, use of this method will trigger consumption.  * @throws IllegalStateException if the response is not been fully read.  */ ;/**  * Return the raw request body content written to the response.  * <p><strong>Note:</strong> If the response content has not been consumed  * yet, use of this method will trigger consumption.  * @throws IllegalStateException if the response is not been fully read.  */ @Nullable public byte[] getResponseBodyContent() {     return this.responseBody.block(this.timeout). }
true;public;1;8;/**  * Execute the given Runnable, catch any {@link AssertionError}, decorate  * with {@code AssertionError} containing diagnostic information about the  * request and response, and then re-throw.  */ ;/**  * Execute the given Runnable, catch any {@link AssertionError}, decorate  * with {@code AssertionError} containing diagnostic information about the  * request and response, and then re-throw.  */ public void assertWithDiagnostics(Runnable assertion) {     try {         assertion.run().     } catch (AssertionError ex) {         throw new AssertionError(ex.getMessage() + "\n" + this, ex).     } }
false;public;0;13;;@Override public String toString() {     return "\n" + "> " + getMethod() + " " + getUrl() + "\n" + "> " + formatHeaders(getRequestHeaders(), "\n> ") + "\n" + "\n" + formatBody(getRequestHeaders().getContentType(), this.requestBody) + "\n" + "\n" + "< " + getStatus() + " " + getStatusReason() + "\n" + "< " + formatHeaders(getResponseHeaders(), "\n< ") + "\n" + "\n" + formatBody(getResponseHeaders().getContentType(), this.responseBody) + "\n". }
false;private;0;3;;private String getStatusReason() {     return getStatus().getReasonPhrase(). }
false;private;2;5;;private String formatHeaders(HttpHeaders headers, String delimiter) {     return headers.entrySet().stream().map(entry -> entry.getKey() + ": " + entry.getValue()).collect(Collectors.joining(delimiter)). }
false;private;2;20;;@Nullable private String formatBody(@Nullable MediaType contentType, Mono<byte[]> body) {     return body.map(bytes -> {         if (contentType == null) {             return bytes.length + " bytes of content (unknown content-type).".         }         Charset charset = contentType.getCharset().         if (charset != null) {             return new String(bytes, charset).         }         if (PRINTABLE_MEDIA_TYPES.stream().anyMatch(contentType::isCompatibleWith)) {             return new String(bytes, StandardCharsets.UTF_8).         }         return bytes.length + " bytes of content.".     }).defaultIfEmpty("No content").onErrorResume(ex -> Mono.just("Failed to obtain content: " + ex.getMessage())).block(this.timeout). }
