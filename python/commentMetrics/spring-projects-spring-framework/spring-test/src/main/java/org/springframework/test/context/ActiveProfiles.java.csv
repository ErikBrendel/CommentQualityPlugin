# id;timestamp;commentText;codeText;commentWords;codeWords
ActiveProfiles -> boolean inheritProfiles() default true_;1328020251;Whether or not bean definition profiles from superclasses should be_<em>inherited</em>.__<p>The default value is <code>true</code>, which means that an annotated_class will <em>inherit</em> bean definition profiles defined by an_annotated superclass. Specifically, the bean definition profiles for an_annotated class will be appended to the list of bean definition profiles_defined by an annotated superclass. Thus, subclasses have the option of_<em>extending</em> the list of bean definition profiles.__<p>If <code>inheritProfiles</code> is set to <code>false</code>, the bean_definition profiles for the annotated class will <em>shadow</em> and_effectively replace any bean definition profiles defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the &quot_base&quot__bean definition profile_ beans defined in the &quot_extended&quot_ profile_will therefore not be loaded. In contrast, the {@code ApplicationContext}_for {@code ExtendedTest} will be loaded using the &quot_base&quot__<strong>and</strong> &quot_extended&quot_ bean definition profiles._<pre class="code">_&#064_ActiveProfiles(&quot_base&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_ActiveProfiles(&quot_extended&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__<p>Note: {@code @ActiveProfiles} can be used when loading an_{@code ApplicationContext} from path-based resource locations or_configuration classes._@see ContextConfiguration#locations_@see ContextConfiguration#classes_@see ContextConfiguration#inheritLocations;boolean inheritProfiles() default true_;whether,or,not,bean,definition,profiles,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,code,which,means,that,an,annotated,class,will,em,inherit,em,bean,definition,profiles,defined,by,an,annotated,superclass,specifically,the,bean,definition,profiles,for,an,annotated,class,will,be,appended,to,the,list,of,bean,definition,profiles,defined,by,an,annotated,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,bean,definition,profiles,p,if,code,inherit,profiles,code,is,set,to,code,false,code,the,bean,definition,profiles,for,the,annotated,class,will,em,shadow,em,and,effectively,replace,any,bean,definition,profiles,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,quot,base,quot,bean,definition,profile,beans,defined,in,the,quot,extended,quot,profile,will,therefore,not,be,loaded,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,quot,base,quot,strong,and,strong,quot,extended,quot,bean,definition,profiles,pre,class,code,064,active,profiles,quot,base,quot,064,context,configuration,public,class,base,test,064,active,profiles,quot,extended,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,p,note,code,active,profiles,can,be,used,when,loading,an,code,application,context,from,path,based,resource,locations,or,configuration,classes,see,context,configuration,locations,see,context,configuration,classes,see,context,configuration,inherit,locations;boolean,inherit,profiles,default,true
ActiveProfiles -> boolean inheritProfiles() default true_;1337278668;Whether or not bean definition profiles from superclasses should be_<em>inherited</em>.__<p>The default value is <code>true</code>, which means that a test_class will <em>inherit</em> bean definition profiles defined by a_test superclass. Specifically, the bean definition profiles for a test_class will be appended to the list of bean definition profiles_defined by a test superclass. Thus, subclasses have the option of_<em>extending</em> the list of bean definition profiles.__<p>If <code>inheritProfiles</code> is set to <code>false</code>, the bean_definition profiles for the test class will <em>shadow</em> and_effectively replace any bean definition profiles defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the &quot_base&quot__bean definition profile_ beans defined in the &quot_extended&quot_ profile_will therefore not be loaded. In contrast, the {@code ApplicationContext}_for {@code ExtendedTest} will be loaded using the &quot_base&quot__<strong>and</strong> &quot_extended&quot_ bean definition profiles._<pre class="code">_&#064_ActiveProfiles(&quot_base&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_ActiveProfiles(&quot_extended&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__<p>Note: {@code @ActiveProfiles} can be used when loading an_{@code ApplicationContext} from path-based resource locations or_annotated classes.__@see ContextConfiguration#locations_@see ContextConfiguration#classes_@see ContextConfiguration#inheritLocations;boolean inheritProfiles() default true_;whether,or,not,bean,definition,profiles,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,code,which,means,that,a,test,class,will,em,inherit,em,bean,definition,profiles,defined,by,a,test,superclass,specifically,the,bean,definition,profiles,for,a,test,class,will,be,appended,to,the,list,of,bean,definition,profiles,defined,by,a,test,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,bean,definition,profiles,p,if,code,inherit,profiles,code,is,set,to,code,false,code,the,bean,definition,profiles,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,bean,definition,profiles,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,quot,base,quot,bean,definition,profile,beans,defined,in,the,quot,extended,quot,profile,will,therefore,not,be,loaded,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,quot,base,quot,strong,and,strong,quot,extended,quot,bean,definition,profiles,pre,class,code,064,active,profiles,quot,base,quot,064,context,configuration,public,class,base,test,064,active,profiles,quot,extended,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,p,note,code,active,profiles,can,be,used,when,loading,an,code,application,context,from,path,based,resource,locations,or,annotated,classes,see,context,configuration,locations,see,context,configuration,classes,see,context,configuration,inherit,locations;boolean,inherit,profiles,default,true
ActiveProfiles -> boolean inheritProfiles() default true_;1356735495;Whether or not bean definition profiles from superclasses should be_<em>inherited</em>.__<p>The default value is {@code true}, which means that a test_class will <em>inherit</em> bean definition profiles defined by a_test superclass. Specifically, the bean definition profiles for a test_class will be appended to the list of bean definition profiles_defined by a test superclass. Thus, subclasses have the option of_<em>extending</em> the list of bean definition profiles.__<p>If {@code inheritProfiles} is set to {@code false}, the bean_definition profiles for the test class will <em>shadow</em> and_effectively replace any bean definition profiles defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the &quot_base&quot__bean definition profile_ beans defined in the &quot_extended&quot_ profile_will therefore not be loaded. In contrast, the {@code ApplicationContext}_for {@code ExtendedTest} will be loaded using the &quot_base&quot__<strong>and</strong> &quot_extended&quot_ bean definition profiles._<pre class="code">_&#064_ActiveProfiles(&quot_base&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_ActiveProfiles(&quot_extended&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__<p>Note: {@code @ActiveProfiles} can be used when loading an_{@code ApplicationContext} from path-based resource locations or_annotated classes.__@see ContextConfiguration#locations_@see ContextConfiguration#classes_@see ContextConfiguration#inheritLocations;boolean inheritProfiles() default true_;whether,or,not,bean,definition,profiles,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,bean,definition,profiles,defined,by,a,test,superclass,specifically,the,bean,definition,profiles,for,a,test,class,will,be,appended,to,the,list,of,bean,definition,profiles,defined,by,a,test,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,bean,definition,profiles,p,if,code,inherit,profiles,is,set,to,code,false,the,bean,definition,profiles,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,bean,definition,profiles,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,quot,base,quot,bean,definition,profile,beans,defined,in,the,quot,extended,quot,profile,will,therefore,not,be,loaded,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,quot,base,quot,strong,and,strong,quot,extended,quot,bean,definition,profiles,pre,class,code,064,active,profiles,quot,base,quot,064,context,configuration,public,class,base,test,064,active,profiles,quot,extended,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,p,note,code,active,profiles,can,be,used,when,loading,an,code,application,context,from,path,based,resource,locations,or,annotated,classes,see,context,configuration,locations,see,context,configuration,classes,see,context,configuration,inherit,locations;boolean,inherit,profiles,default,true
ActiveProfiles -> boolean inheritProfiles() default true_;1372363092;Whether or not bean definition profiles from superclasses should be_<em>inherited</em>.__<p>The default value is {@code true}, which means that a test_class will <em>inherit</em> bean definition profiles defined by a_test superclass. Specifically, the bean definition profiles for a test_class will be appended to the list of bean definition profiles_defined by a test superclass. Thus, subclasses have the option of_<em>extending</em> the list of bean definition profiles.__<p>If {@code inheritProfiles} is set to {@code false}, the bean_definition profiles for the test class will <em>shadow</em> and_effectively replace any bean definition profiles defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the &quot_base&quot__bean definition profile_ beans defined in the &quot_extended&quot_ profile_will therefore not be loaded. In contrast, the {@code ApplicationContext}_for {@code ExtendedTest} will be loaded using the &quot_base&quot__<strong>and</strong> &quot_extended&quot_ bean definition profiles._<pre class="code">_&#064_ActiveProfiles(&quot_base&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_ActiveProfiles(&quot_extended&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__<p>Note: {@code @ActiveProfiles} can be used when loading an_{@code ApplicationContext} from path-based resource locations or_annotated classes.__@see ContextConfiguration#locations_@see ContextConfiguration#classes_@see ContextConfiguration#inheritLocations;boolean inheritProfiles() default true_;whether,or,not,bean,definition,profiles,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,bean,definition,profiles,defined,by,a,test,superclass,specifically,the,bean,definition,profiles,for,a,test,class,will,be,appended,to,the,list,of,bean,definition,profiles,defined,by,a,test,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,bean,definition,profiles,p,if,code,inherit,profiles,is,set,to,code,false,the,bean,definition,profiles,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,bean,definition,profiles,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,quot,base,quot,bean,definition,profile,beans,defined,in,the,quot,extended,quot,profile,will,therefore,not,be,loaded,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,quot,base,quot,strong,and,strong,quot,extended,quot,bean,definition,profiles,pre,class,code,064,active,profiles,quot,base,quot,064,context,configuration,public,class,base,test,064,active,profiles,quot,extended,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,p,note,code,active,profiles,can,be,used,when,loading,an,code,application,context,from,path,based,resource,locations,or,annotated,classes,see,context,configuration,locations,see,context,configuration,classes,see,context,configuration,inherit,locations;boolean,inherit,profiles,default,true
ActiveProfiles -> boolean inheritProfiles() default true_;1386769390;Whether or not bean definition profiles from superclasses should be_<em>inherited</em>.__<p>The default value is {@code true}, which means that a test_class will <em>inherit</em> bean definition profiles defined by a_test superclass. Specifically, the bean definition profiles for a test_class will be appended to the list of bean definition profiles_defined by a test superclass. Thus, subclasses have the option of_<em>extending</em> the list of bean definition profiles.__<p>If {@code inheritProfiles} is set to {@code false}, the bean_definition profiles for the test class will <em>shadow</em> and_effectively replace any bean definition profiles defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the &quot_base&quot__bean definition profile_ beans defined in the &quot_extended&quot_ profile_will therefore not be loaded. In contrast, the {@code ApplicationContext}_for {@code ExtendedTest} will be loaded using the &quot_base&quot__<strong>and</strong> &quot_extended&quot_ bean definition profiles._<pre class="code">_&#064_ActiveProfiles(&quot_base&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_ActiveProfiles(&quot_extended&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__<p>Note: {@code @ActiveProfiles} can be used when loading an_{@code ApplicationContext} from path-based resource locations or_annotated classes.__@see ContextConfiguration#locations_@see ContextConfiguration#classes_@see ContextConfiguration#inheritLocations;boolean inheritProfiles() default true_;whether,or,not,bean,definition,profiles,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,bean,definition,profiles,defined,by,a,test,superclass,specifically,the,bean,definition,profiles,for,a,test,class,will,be,appended,to,the,list,of,bean,definition,profiles,defined,by,a,test,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,bean,definition,profiles,p,if,code,inherit,profiles,is,set,to,code,false,the,bean,definition,profiles,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,bean,definition,profiles,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,quot,base,quot,bean,definition,profile,beans,defined,in,the,quot,extended,quot,profile,will,therefore,not,be,loaded,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,quot,base,quot,strong,and,strong,quot,extended,quot,bean,definition,profiles,pre,class,code,064,active,profiles,quot,base,quot,064,context,configuration,public,class,base,test,064,active,profiles,quot,extended,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,p,note,code,active,profiles,can,be,used,when,loading,an,code,application,context,from,path,based,resource,locations,or,annotated,classes,see,context,configuration,locations,see,context,configuration,classes,see,context,configuration,inherit,locations;boolean,inherit,profiles,default,true
ActiveProfiles -> boolean inheritProfiles() default true_;1397082962;Whether or not bean definition profiles from superclasses should be_<em>inherited</em>.__<p>The default value is {@code true}, which means that a test_class will <em>inherit</em> bean definition profiles defined by a_test superclass. Specifically, the bean definition profiles for a test_class will be appended to the list of bean definition profiles_defined by a test superclass. Thus, subclasses have the option of_<em>extending</em> the list of bean definition profiles.__<p>If {@code inheritProfiles} is set to {@code false}, the bean_definition profiles for the test class will <em>shadow</em> and_effectively replace any bean definition profiles defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the &quot_base&quot__bean definition profile_ beans defined in the &quot_extended&quot_ profile_will therefore not be loaded. In contrast, the {@code ApplicationContext}_for {@code ExtendedTest} will be loaded using the &quot_base&quot__<strong>and</strong> &quot_extended&quot_ bean definition profiles._<pre class="code">_&#064_ActiveProfiles(&quot_base&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_ActiveProfiles(&quot_extended&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__<p>Note: {@code @ActiveProfiles} can be used when loading an_{@code ApplicationContext} from path-based resource locations or_annotated classes.__@see ContextConfiguration#locations_@see ContextConfiguration#classes_@see ContextConfiguration#inheritLocations;boolean inheritProfiles() default true_;whether,or,not,bean,definition,profiles,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,bean,definition,profiles,defined,by,a,test,superclass,specifically,the,bean,definition,profiles,for,a,test,class,will,be,appended,to,the,list,of,bean,definition,profiles,defined,by,a,test,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,bean,definition,profiles,p,if,code,inherit,profiles,is,set,to,code,false,the,bean,definition,profiles,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,bean,definition,profiles,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,quot,base,quot,bean,definition,profile,beans,defined,in,the,quot,extended,quot,profile,will,therefore,not,be,loaded,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,quot,base,quot,strong,and,strong,quot,extended,quot,bean,definition,profiles,pre,class,code,064,active,profiles,quot,base,quot,064,context,configuration,public,class,base,test,064,active,profiles,quot,extended,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,p,note,code,active,profiles,can,be,used,when,loading,an,code,application,context,from,path,based,resource,locations,or,annotated,classes,see,context,configuration,locations,see,context,configuration,classes,see,context,configuration,inherit,locations;boolean,inherit,profiles,default,true
ActiveProfiles -> boolean inheritProfiles() default true_;1432246071;Whether or not bean definition profiles from superclasses should be_<em>inherited</em>.__<p>The default value is {@code true}, which means that a test_class will <em>inherit</em> bean definition profiles defined by a_test superclass. Specifically, the bean definition profiles for a test_class will be appended to the list of bean definition profiles_defined by a test superclass. Thus, subclasses have the option of_<em>extending</em> the list of bean definition profiles.__<p>If {@code inheritProfiles} is set to {@code false}, the bean_definition profiles for the test class will <em>shadow</em> and_effectively replace any bean definition profiles defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the &quot_base&quot__bean definition profile_ beans defined in the &quot_extended&quot_ profile_will therefore not be loaded. In contrast, the {@code ApplicationContext}_for {@code ExtendedTest} will be loaded using the &quot_base&quot__<strong>and</strong> &quot_extended&quot_ bean definition profiles._<pre class="code">_&#064_ActiveProfiles(&quot_base&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_ActiveProfiles(&quot_extended&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__<p>Note: {@code @ActiveProfiles} can be used when loading an_{@code ApplicationContext} from path-based resource locations or_annotated classes.__@see ContextConfiguration#locations_@see ContextConfiguration#classes_@see ContextConfiguration#inheritLocations;boolean inheritProfiles() default true_;whether,or,not,bean,definition,profiles,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,bean,definition,profiles,defined,by,a,test,superclass,specifically,the,bean,definition,profiles,for,a,test,class,will,be,appended,to,the,list,of,bean,definition,profiles,defined,by,a,test,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,bean,definition,profiles,p,if,code,inherit,profiles,is,set,to,code,false,the,bean,definition,profiles,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,bean,definition,profiles,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,quot,base,quot,bean,definition,profile,beans,defined,in,the,quot,extended,quot,profile,will,therefore,not,be,loaded,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,quot,base,quot,strong,and,strong,quot,extended,quot,bean,definition,profiles,pre,class,code,064,active,profiles,quot,base,quot,064,context,configuration,public,class,base,test,064,active,profiles,quot,extended,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,p,note,code,active,profiles,can,be,used,when,loading,an,code,application,context,from,path,based,resource,locations,or,annotated,classes,see,context,configuration,locations,see,context,configuration,classes,see,context,configuration,inherit,locations;boolean,inherit,profiles,default,true
ActiveProfiles -> boolean inheritProfiles() default true_;1438176426;Whether or not bean definition profiles from superclasses should be_<em>inherited</em>.__<p>The default value is {@code true}, which means that a test_class will <em>inherit</em> bean definition profiles defined by a_test superclass. Specifically, the bean definition profiles for a test_class will be appended to the list of bean definition profiles_defined by a test superclass. Thus, subclasses have the option of_<em>extending</em> the list of bean definition profiles.__<p>If {@code inheritProfiles} is set to {@code false}, the bean_definition profiles for the test class will <em>shadow</em> and_effectively replace any bean definition profiles defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the &quot_base&quot__bean definition profile_ beans defined in the &quot_extended&quot_ profile_will therefore not be loaded. In contrast, the {@code ApplicationContext}_for {@code ExtendedTest} will be loaded using the &quot_base&quot__<strong>and</strong> &quot_extended&quot_ bean definition profiles._<pre class="code">_&#064_ActiveProfiles(&quot_base&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_ActiveProfiles(&quot_extended&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__<p>Note: {@code @ActiveProfiles} can be used when loading an_{@code ApplicationContext} from path-based resource locations or_annotated classes.__@see ContextConfiguration#locations_@see ContextConfiguration#classes_@see ContextConfiguration#inheritLocations;boolean inheritProfiles() default true_;whether,or,not,bean,definition,profiles,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,bean,definition,profiles,defined,by,a,test,superclass,specifically,the,bean,definition,profiles,for,a,test,class,will,be,appended,to,the,list,of,bean,definition,profiles,defined,by,a,test,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,bean,definition,profiles,p,if,code,inherit,profiles,is,set,to,code,false,the,bean,definition,profiles,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,bean,definition,profiles,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,quot,base,quot,bean,definition,profile,beans,defined,in,the,quot,extended,quot,profile,will,therefore,not,be,loaded,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,quot,base,quot,strong,and,strong,quot,extended,quot,bean,definition,profiles,pre,class,code,064,active,profiles,quot,base,quot,064,context,configuration,public,class,base,test,064,active,profiles,quot,extended,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,p,note,code,active,profiles,can,be,used,when,loading,an,code,application,context,from,path,based,resource,locations,or,annotated,classes,see,context,configuration,locations,see,context,configuration,classes,see,context,configuration,inherit,locations;boolean,inherit,profiles,default,true
ActiveProfiles -> boolean inheritProfiles() default true_;1456180001;Whether or not bean definition profiles from superclasses should be_<em>inherited</em>._<p>The default value is {@code true}, which means that a test_class will <em>inherit</em> bean definition profiles defined by a_test superclass. Specifically, the bean definition profiles for a test_class will be appended to the list of bean definition profiles_defined by a test superclass. Thus, subclasses have the option of_<em>extending</em> the list of bean definition profiles._<p>If {@code inheritProfiles} is set to {@code false}, the bean_definition profiles for the test class will <em>shadow</em> and_effectively replace any bean definition profiles defined by a superclass._<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the &quot_base&quot__bean definition profile_ beans defined in the &quot_extended&quot_ profile_will therefore not be loaded. In contrast, the {@code ApplicationContext}_for {@code ExtendedTest} will be loaded using the &quot_base&quot__<strong>and</strong> &quot_extended&quot_ bean definition profiles._<pre class="code">_&#064_ActiveProfiles(&quot_base&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_ActiveProfiles(&quot_extended&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>_<p>Note: {@code @ActiveProfiles} can be used when loading an_{@code ApplicationContext} from path-based resource locations or_annotated classes._@see ContextConfiguration#locations_@see ContextConfiguration#classes_@see ContextConfiguration#inheritLocations;boolean inheritProfiles() default true_;whether,or,not,bean,definition,profiles,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,bean,definition,profiles,defined,by,a,test,superclass,specifically,the,bean,definition,profiles,for,a,test,class,will,be,appended,to,the,list,of,bean,definition,profiles,defined,by,a,test,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,bean,definition,profiles,p,if,code,inherit,profiles,is,set,to,code,false,the,bean,definition,profiles,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,bean,definition,profiles,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,quot,base,quot,bean,definition,profile,beans,defined,in,the,quot,extended,quot,profile,will,therefore,not,be,loaded,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,quot,base,quot,strong,and,strong,quot,extended,quot,bean,definition,profiles,pre,class,code,064,active,profiles,quot,base,quot,064,context,configuration,public,class,base,test,064,active,profiles,quot,extended,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,p,note,code,active,profiles,can,be,used,when,loading,an,code,application,context,from,path,based,resource,locations,or,annotated,classes,see,context,configuration,locations,see,context,configuration,classes,see,context,configuration,inherit,locations;boolean,inherit,profiles,default,true
ActiveProfiles -> boolean inheritProfiles() default true_;1462470884;Whether or not bean definition profiles from superclasses should be_<em>inherited</em>._<p>The default value is {@code true}, which means that a test_class will <em>inherit</em> bean definition profiles defined by a_test superclass. Specifically, the bean definition profiles for a test_class will be appended to the list of bean definition profiles_defined by a test superclass. Thus, subclasses have the option of_<em>extending</em> the list of bean definition profiles._<p>If {@code inheritProfiles} is set to {@code false}, the bean_definition profiles for the test class will <em>shadow</em> and_effectively replace any bean definition profiles defined by a superclass._<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the &quot_base&quot__bean definition profile_ beans defined in the &quot_extended&quot_ profile_will therefore not be loaded. In contrast, the {@code ApplicationContext}_for {@code ExtendedTest} will be loaded using the &quot_base&quot__<strong>and</strong> &quot_extended&quot_ bean definition profiles._<pre class="code">_&#064_ActiveProfiles(&quot_base&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_ActiveProfiles(&quot_extended&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>_<p>Note: {@code @ActiveProfiles} can be used when loading an_{@code ApplicationContext} from path-based resource locations or_annotated classes._@see ContextConfiguration#locations_@see ContextConfiguration#classes_@see ContextConfiguration#inheritLocations;boolean inheritProfiles() default true_;whether,or,not,bean,definition,profiles,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,bean,definition,profiles,defined,by,a,test,superclass,specifically,the,bean,definition,profiles,for,a,test,class,will,be,appended,to,the,list,of,bean,definition,profiles,defined,by,a,test,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,bean,definition,profiles,p,if,code,inherit,profiles,is,set,to,code,false,the,bean,definition,profiles,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,bean,definition,profiles,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,quot,base,quot,bean,definition,profile,beans,defined,in,the,quot,extended,quot,profile,will,therefore,not,be,loaded,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,quot,base,quot,strong,and,strong,quot,extended,quot,bean,definition,profiles,pre,class,code,064,active,profiles,quot,base,quot,064,context,configuration,public,class,base,test,064,active,profiles,quot,extended,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,p,note,code,active,profiles,can,be,used,when,loading,an,code,application,context,from,path,based,resource,locations,or,annotated,classes,see,context,configuration,locations,see,context,configuration,classes,see,context,configuration,inherit,locations;boolean,inherit,profiles,default,true
ActiveProfiles -> String[] value() default {}_;1328020251;Alias for {@link #profiles}.__<p>This attribute may <strong>not</strong> be used in conjunction_with {@link #profiles}, but it may be used <em>instead</em> of_{@link #profiles}.;String[] value() default {}_;alias,for,link,profiles,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,profiles,but,it,may,be,used,em,instead,em,of,link,profiles;string,value,default
ActiveProfiles -> String[] value() default {}_;1337278668;Alias for {@link #profiles}.__<p>This attribute may <strong>not</strong> be used in conjunction_with {@link #profiles}, but it may be used <em>instead</em> of_{@link #profiles}.;String[] value() default {}_;alias,for,link,profiles,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,profiles,but,it,may,be,used,em,instead,em,of,link,profiles;string,value,default
ActiveProfiles -> String[] value() default {}_;1356735495;Alias for {@link #profiles}.__<p>This attribute may <strong>not</strong> be used in conjunction_with {@link #profiles}, but it may be used <em>instead</em> of_{@link #profiles}.;String[] value() default {}_;alias,for,link,profiles,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,profiles,but,it,may,be,used,em,instead,em,of,link,profiles;string,value,default
ActiveProfiles -> String[] value() default {}_;1372363092;Alias for {@link #profiles}.__<p>This attribute may <strong>not</strong> be used in conjunction_with {@link #profiles} or {@link #resolver}, but it may be used_<em>instead</em> of them.;String[] value() default {}_;alias,for,link,profiles,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,profiles,or,link,resolver,but,it,may,be,used,em,instead,em,of,them;string,value,default
ActiveProfiles -> String[] value() default {}_;1386769390;Alias for {@link #profiles}.__<p>This attribute may <strong>not</strong> be used in conjunction_with {@link #profiles} or {@link #resolver}, but it may be used_<em>instead</em> of them.;String[] value() default {}_;alias,for,link,profiles,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,profiles,or,link,resolver,but,it,may,be,used,em,instead,em,of,them;string,value,default
ActiveProfiles -> String[] value() default {}_;1397082962;Alias for {@link #profiles}.__<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #profiles}, but it may be used <em>instead</em> of {@link #profiles}.;String[] value() default {}_;alias,for,link,profiles,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,profiles,but,it,may,be,used,em,instead,em,of,link,profiles;string,value,default
ActiveProfiles -> String[] profiles() default {}_;1328020251;The bean definition profiles to activate.__<p>This attribute may <strong>not</strong> be used in conjunction_with {@link #value}, but it may be used <em>instead</em> of_{@link #value}.;String[] profiles() default {}_;the,bean,definition,profiles,to,activate,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,value,but,it,may,be,used,em,instead,em,of,link,value;string,profiles,default
ActiveProfiles -> String[] profiles() default {}_;1337278668;The bean definition profiles to activate.__<p>This attribute may <strong>not</strong> be used in conjunction_with {@link #value}, but it may be used <em>instead</em> of_{@link #value}.;String[] profiles() default {}_;the,bean,definition,profiles,to,activate,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,value,but,it,may,be,used,em,instead,em,of,link,value;string,profiles,default
ActiveProfiles -> String[] profiles() default {}_;1356735495;The bean definition profiles to activate.__<p>This attribute may <strong>not</strong> be used in conjunction_with {@link #value}, but it may be used <em>instead</em> of_{@link #value}.;String[] profiles() default {}_;the,bean,definition,profiles,to,activate,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,value,but,it,may,be,used,em,instead,em,of,link,value;string,profiles,default
ActiveProfiles -> String[] profiles() default {}_;1372363092;The bean definition profiles to activate.__<p>This attribute may <strong>not</strong> be used in conjunction_with {@link #value} or {@link #resolver}, but it may be used_<em>instead</em> of them.;String[] profiles() default {}_;the,bean,definition,profiles,to,activate,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,value,or,link,resolver,but,it,may,be,used,em,instead,em,of,them;string,profiles,default
ActiveProfiles -> String[] profiles() default {}_;1386769390;The bean definition profiles to activate.__<p>This attribute may <strong>not</strong> be used in conjunction_with {@link #value} or {@link #resolver}, but it may be used_<em>instead</em> of them.;String[] profiles() default {}_;the,bean,definition,profiles,to,activate,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,value,or,link,resolver,but,it,may,be,used,em,instead,em,of,them;string,profiles,default
ActiveProfiles -> String[] profiles() default {}_;1397082962;The bean definition profiles to activate.__<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #value}, but it may be used <em>instead</em> of {@link #value}.;String[] profiles() default {}_;the,bean,definition,profiles,to,activate,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,value,but,it,may,be,used,em,instead,em,of,link,value;string,profiles,default
ActiveProfiles -> Class<? extends ActiveProfilesResolver> resolver() default ActiveProfilesResolver.class_;1372363092;The type of {@link ActiveProfilesResolver} to use for resolving the active_bean definition profiles programmatically.__<p>This attribute may <strong>not</strong> be used in conjunction_with {@link #profiles} or {@link #value}, but it may be used <em>instead</em>_of them in order to resolve the active profiles programmatically.__@since 4.0_@see ActiveProfilesResolver;Class<? extends ActiveProfilesResolver> resolver() default ActiveProfilesResolver.class_;the,type,of,link,active,profiles,resolver,to,use,for,resolving,the,active,bean,definition,profiles,programmatically,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,profiles,or,link,value,but,it,may,be,used,em,instead,em,of,them,in,order,to,resolve,the,active,profiles,programmatically,since,4,0,see,active,profiles,resolver;class,extends,active,profiles,resolver,resolver,default,active,profiles,resolver,class
ActiveProfiles -> Class<? extends ActiveProfilesResolver> resolver() default ActiveProfilesResolver.class_;1386769390;The type of {@link ActiveProfilesResolver} to use for resolving the active_bean definition profiles programmatically.__<p>This attribute may <strong>not</strong> be used in conjunction_with {@link #profiles} or {@link #value}, but it may be used <em>instead</em>_of them in order to resolve the active profiles programmatically.__@since 4.0_@see ActiveProfilesResolver;Class<? extends ActiveProfilesResolver> resolver() default ActiveProfilesResolver.class_;the,type,of,link,active,profiles,resolver,to,use,for,resolving,the,active,bean,definition,profiles,programmatically,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,profiles,or,link,value,but,it,may,be,used,em,instead,em,of,them,in,order,to,resolve,the,active,profiles,programmatically,since,4,0,see,active,profiles,resolver;class,extends,active,profiles,resolver,resolver,default,active,profiles,resolver,class
ActiveProfiles -> Class<? extends ActiveProfilesResolver> resolver() default ActiveProfilesResolver.class_;1397082962;The type of {@link ActiveProfilesResolver} to use for resolving the active_bean definition profiles programmatically.__@since 4.0_@see ActiveProfilesResolver;Class<? extends ActiveProfilesResolver> resolver() default ActiveProfilesResolver.class_;the,type,of,link,active,profiles,resolver,to,use,for,resolving,the,active,bean,definition,profiles,programmatically,since,4,0,see,active,profiles,resolver;class,extends,active,profiles,resolver,resolver,default,active,profiles,resolver,class
ActiveProfiles -> Class<? extends ActiveProfilesResolver> resolver() default ActiveProfilesResolver.class_;1432246071;The type of {@link ActiveProfilesResolver} to use for resolving the active_bean definition profiles programmatically.__@since 4.0_@see ActiveProfilesResolver;Class<? extends ActiveProfilesResolver> resolver() default ActiveProfilesResolver.class_;the,type,of,link,active,profiles,resolver,to,use,for,resolving,the,active,bean,definition,profiles,programmatically,since,4,0,see,active,profiles,resolver;class,extends,active,profiles,resolver,resolver,default,active,profiles,resolver,class
ActiveProfiles -> Class<? extends ActiveProfilesResolver> resolver() default ActiveProfilesResolver.class_;1438176426;The type of {@link ActiveProfilesResolver} to use for resolving the active_bean definition profiles programmatically.__@since 4.0_@see ActiveProfilesResolver;Class<? extends ActiveProfilesResolver> resolver() default ActiveProfilesResolver.class_;the,type,of,link,active,profiles,resolver,to,use,for,resolving,the,active,bean,definition,profiles,programmatically,since,4,0,see,active,profiles,resolver;class,extends,active,profiles,resolver,resolver,default,active,profiles,resolver,class
ActiveProfiles -> Class<? extends ActiveProfilesResolver> resolver() default ActiveProfilesResolver.class_;1456180001;The type of {@link ActiveProfilesResolver} to use for resolving the active_bean definition profiles programmatically._@since 4.0_@see ActiveProfilesResolver;Class<? extends ActiveProfilesResolver> resolver() default ActiveProfilesResolver.class_;the,type,of,link,active,profiles,resolver,to,use,for,resolving,the,active,bean,definition,profiles,programmatically,since,4,0,see,active,profiles,resolver;class,extends,active,profiles,resolver,resolver,default,active,profiles,resolver,class
ActiveProfiles -> Class<? extends ActiveProfilesResolver> resolver() default ActiveProfilesResolver.class_;1462470884;The type of {@link ActiveProfilesResolver} to use for resolving the active_bean definition profiles programmatically._@since 4.0_@see ActiveProfilesResolver;Class<? extends ActiveProfilesResolver> resolver() default ActiveProfilesResolver.class_;the,type,of,link,active,profiles,resolver,to,use,for,resolving,the,active,bean,definition,profiles,programmatically,since,4,0,see,active,profiles,resolver;class,extends,active,profiles,resolver,resolver,default,active,profiles,resolver,class
ActiveProfiles -> @AliasFor("profiles") 	String[] value() default {}_;1438176426;Alias for {@link #profiles}.__<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #profiles}, but it may be used <em>instead</em> of {@link #profiles}.;@AliasFor("profiles")_	String[] value() default {}_;alias,for,link,profiles,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,profiles,but,it,may,be,used,em,instead,em,of,link,profiles;alias,for,profiles,string,value,default
ActiveProfiles -> @AliasFor("profiles") 	String[] value() default {}_;1456180001;Alias for {@link #profiles}._<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #profiles}, but it may be used <em>instead</em> of {@link #profiles}.;@AliasFor("profiles")_	String[] value() default {}_;alias,for,link,profiles,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,profiles,but,it,may,be,used,em,instead,em,of,link,profiles;alias,for,profiles,string,value,default
ActiveProfiles -> @AliasFor("profiles") 	String[] value() default {}_;1462470884;Alias for {@link #profiles}._<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #profiles}, but it may be used <em>instead</em> of {@link #profiles}.;@AliasFor("profiles")_	String[] value() default {}_;alias,for,link,profiles,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,profiles,but,it,may,be,used,em,instead,em,of,link,profiles;alias,for,profiles,string,value,default
ActiveProfiles -> @AliasFor("value") 	String[] profiles() default {}_;1438176426;The bean definition profiles to activate.__<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #value}, but it may be used <em>instead</em> of {@link #value}.;@AliasFor("value")_	String[] profiles() default {}_;the,bean,definition,profiles,to,activate,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,value,but,it,may,be,used,em,instead,em,of,link,value;alias,for,value,string,profiles,default
ActiveProfiles -> @AliasFor("value") 	String[] profiles() default {}_;1456180001;The bean definition profiles to activate._<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #value}, but it may be used <em>instead</em> of {@link #value}.;@AliasFor("value")_	String[] profiles() default {}_;the,bean,definition,profiles,to,activate,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,value,but,it,may,be,used,em,instead,em,of,link,value;alias,for,value,string,profiles,default
ActiveProfiles -> @AliasFor("value") 	String[] profiles() default {}_;1462470884;The bean definition profiles to activate._<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #value}, but it may be used <em>instead</em> of {@link #value}.;@AliasFor("value")_	String[] profiles() default {}_;the,bean,definition,profiles,to,activate,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,value,but,it,may,be,used,em,instead,em,of,link,value;alias,for,value,string,profiles,default
