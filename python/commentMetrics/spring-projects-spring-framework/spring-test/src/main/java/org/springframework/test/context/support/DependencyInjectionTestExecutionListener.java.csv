# id;timestamp;commentText;codeText;commentWords;codeWords
DependencyInjectionTestExecutionListener -> @Override 	public final int getOrder();1408048216;Returns {@code 2000}.;@Override_	public final int getOrder() {_		return 2000__	};returns,code,2000;override,public,final,int,get,order,return,2000
DependencyInjectionTestExecutionListener -> @Override 	public final int getOrder();1413848647;Returns {@code 2000}.;@Override_	public final int getOrder() {_		return 2000__	};returns,code,2000;override,public,final,int,get,order,return,2000
DependencyInjectionTestExecutionListener -> @Override 	public final int getOrder();1496955179;Returns {@code 2000}.;@Override_	public final int getOrder() {_		return 2000__	};returns,code,2000;override,public,final,int,get,order,return,2000
DependencyInjectionTestExecutionListener -> @Override 	public final int getOrder();1535064541;Returns {@code 2000}.;@Override_	public final int getOrder() {_		return 2000__	};returns,code,2000;override,public,final,int,get,order,return,2000
DependencyInjectionTestExecutionListener -> @Override 	public void prepareTestInstance(final TestContext testContext) throws Exception;1328020251;Performs dependency injection on the_{@link TestContext#getTestInstance() test instance} of the supplied_{@link TestContext test context} by_{@link AutowireCapableBeanFactory#autowireBeanProperties(Object, int, boolean) autowiring}_and_{@link AutowireCapableBeanFactory#initializeBean(Object, String) initializing}_the test instance via its own_{@link TestContext#getApplicationContext() application context} (without_checking dependencies)._<p>The {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} will be subsequently removed_from the test context, regardless of its value.;@Override_	public void prepareTestInstance(final TestContext testContext) throws Exception {_		if (logger.isDebugEnabled()) {_			logger.debug("Performing dependency injection for test context [" + testContext + "].")__		}_		injectDependencies(testContext)__	};performs,dependency,injection,on,the,link,test,context,get,test,instance,test,instance,of,the,supplied,link,test,context,test,context,by,link,autowire,capable,bean,factory,autowire,bean,properties,object,int,boolean,autowiring,and,link,autowire,capable,bean,factory,initialize,bean,object,string,initializing,the,test,instance,via,its,own,link,test,context,get,application,context,application,context,without,checking,dependencies,p,the,link,will,be,subsequently,removed,from,the,test,context,regardless,of,its,value;override,public,void,prepare,test,instance,final,test,context,test,context,throws,exception,if,logger,is,debug,enabled,logger,debug,performing,dependency,injection,for,test,context,test,context,inject,dependencies,test,context
DependencyInjectionTestExecutionListener -> @Override 	public void prepareTestInstance(final TestContext testContext) throws Exception;1356735495;Performs dependency injection on the_{@link TestContext#getTestInstance() test instance} of the supplied_{@link TestContext test context} by_{@link AutowireCapableBeanFactory#autowireBeanProperties(Object, int, boolean) autowiring}_and_{@link AutowireCapableBeanFactory#initializeBean(Object, String) initializing}_the test instance via its own_{@link TestContext#getApplicationContext() application context} (without_checking dependencies)._<p>The {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} will be subsequently removed_from the test context, regardless of its value.;@Override_	public void prepareTestInstance(final TestContext testContext) throws Exception {_		if (logger.isDebugEnabled()) {_			logger.debug("Performing dependency injection for test context [" + testContext + "].")__		}_		injectDependencies(testContext)__	};performs,dependency,injection,on,the,link,test,context,get,test,instance,test,instance,of,the,supplied,link,test,context,test,context,by,link,autowire,capable,bean,factory,autowire,bean,properties,object,int,boolean,autowiring,and,link,autowire,capable,bean,factory,initialize,bean,object,string,initializing,the,test,instance,via,its,own,link,test,context,get,application,context,application,context,without,checking,dependencies,p,the,link,will,be,subsequently,removed,from,the,test,context,regardless,of,its,value;override,public,void,prepare,test,instance,final,test,context,test,context,throws,exception,if,logger,is,debug,enabled,logger,debug,performing,dependency,injection,for,test,context,test,context,inject,dependencies,test,context
DependencyInjectionTestExecutionListener -> @Override 	public void prepareTestInstance(final TestContext testContext) throws Exception;1408048216;Performs dependency injection on the_{@link TestContext#getTestInstance() test instance} of the supplied_{@link TestContext test context} by_{@link AutowireCapableBeanFactory#autowireBeanProperties(Object, int, boolean) autowiring}_and_{@link AutowireCapableBeanFactory#initializeBean(Object, String) initializing}_the test instance via its own_{@link TestContext#getApplicationContext() application context} (without_checking dependencies)._<p>The {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} will be subsequently removed_from the test context, regardless of its value.;@Override_	public void prepareTestInstance(final TestContext testContext) throws Exception {_		if (logger.isDebugEnabled()) {_			logger.debug("Performing dependency injection for test context [" + testContext + "].")__		}_		injectDependencies(testContext)__	};performs,dependency,injection,on,the,link,test,context,get,test,instance,test,instance,of,the,supplied,link,test,context,test,context,by,link,autowire,capable,bean,factory,autowire,bean,properties,object,int,boolean,autowiring,and,link,autowire,capable,bean,factory,initialize,bean,object,string,initializing,the,test,instance,via,its,own,link,test,context,get,application,context,application,context,without,checking,dependencies,p,the,link,will,be,subsequently,removed,from,the,test,context,regardless,of,its,value;override,public,void,prepare,test,instance,final,test,context,test,context,throws,exception,if,logger,is,debug,enabled,logger,debug,performing,dependency,injection,for,test,context,test,context,inject,dependencies,test,context
DependencyInjectionTestExecutionListener -> @Override 	public void prepareTestInstance(final TestContext testContext) throws Exception;1413848647;Performs dependency injection on the_{@link TestContext#getTestInstance() test instance} of the supplied_{@link TestContext test context} by_{@link AutowireCapableBeanFactory#autowireBeanProperties(Object, int, boolean) autowiring}_and_{@link AutowireCapableBeanFactory#initializeBean(Object, String) initializing}_the test instance via its own_{@link TestContext#getApplicationContext() application context} (without_checking dependencies)._<p>The {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} will be subsequently removed_from the test context, regardless of its value.;@Override_	public void prepareTestInstance(final TestContext testContext) throws Exception {_		if (logger.isDebugEnabled()) {_			logger.debug("Performing dependency injection for test context [" + testContext + "].")__		}_		injectDependencies(testContext)__	};performs,dependency,injection,on,the,link,test,context,get,test,instance,test,instance,of,the,supplied,link,test,context,test,context,by,link,autowire,capable,bean,factory,autowire,bean,properties,object,int,boolean,autowiring,and,link,autowire,capable,bean,factory,initialize,bean,object,string,initializing,the,test,instance,via,its,own,link,test,context,get,application,context,application,context,without,checking,dependencies,p,the,link,will,be,subsequently,removed,from,the,test,context,regardless,of,its,value;override,public,void,prepare,test,instance,final,test,context,test,context,throws,exception,if,logger,is,debug,enabled,logger,debug,performing,dependency,injection,for,test,context,test,context,inject,dependencies,test,context
DependencyInjectionTestExecutionListener -> @Override 	public void prepareTestInstance(final TestContext testContext) throws Exception;1496955179;Performs dependency injection on the_{@link TestContext#getTestInstance() test instance} of the supplied_{@link TestContext test context} by_{@link AutowireCapableBeanFactory#autowireBeanProperties(Object, int, boolean) autowiring}_and_{@link AutowireCapableBeanFactory#initializeBean(Object, String) initializing}_the test instance via its own_{@link TestContext#getApplicationContext() application context} (without_checking dependencies)._<p>The {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} will be subsequently removed_from the test context, regardless of its value.;@Override_	public void prepareTestInstance(final TestContext testContext) throws Exception {_		if (logger.isDebugEnabled()) {_			logger.debug("Performing dependency injection for test context [" + testContext + "].")__		}_		injectDependencies(testContext)__	};performs,dependency,injection,on,the,link,test,context,get,test,instance,test,instance,of,the,supplied,link,test,context,test,context,by,link,autowire,capable,bean,factory,autowire,bean,properties,object,int,boolean,autowiring,and,link,autowire,capable,bean,factory,initialize,bean,object,string,initializing,the,test,instance,via,its,own,link,test,context,get,application,context,application,context,without,checking,dependencies,p,the,link,will,be,subsequently,removed,from,the,test,context,regardless,of,its,value;override,public,void,prepare,test,instance,final,test,context,test,context,throws,exception,if,logger,is,debug,enabled,logger,debug,performing,dependency,injection,for,test,context,test,context,inject,dependencies,test,context
DependencyInjectionTestExecutionListener -> protected void injectDependencies(final TestContext testContext) throws Exception;1328020251;Performs dependency injection and bean initialization for the supplied_{@link TestContext} as described in_{@link #prepareTestInstance(TestContext) prepareTestInstance()}._<p>The {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} will be subsequently removed_from the test context, regardless of its value._@param testContext the test context for which dependency injection should_be performed (never <code>null</code>)_@throws Exception allows any exception to propagate_@see #prepareTestInstance(TestContext)_@see #beforeTestMethod(TestContext);protected void injectDependencies(final TestContext testContext) throws Exception {_		Object bean = testContext.getTestInstance()__		AutowireCapableBeanFactory beanFactory = testContext.getApplicationContext().getAutowireCapableBeanFactory()__		beanFactory.autowireBeanProperties(bean, AutowireCapableBeanFactory.AUTOWIRE_NO, false)__		beanFactory.initializeBean(bean, testContext.getTestClass().getName())__		testContext.removeAttribute(REINJECT_DEPENDENCIES_ATTRIBUTE)__	};performs,dependency,injection,and,bean,initialization,for,the,supplied,link,test,context,as,described,in,link,prepare,test,instance,test,context,prepare,test,instance,p,the,link,will,be,subsequently,removed,from,the,test,context,regardless,of,its,value,param,test,context,the,test,context,for,which,dependency,injection,should,be,performed,never,code,null,code,throws,exception,allows,any,exception,to,propagate,see,prepare,test,instance,test,context,see,before,test,method,test,context;protected,void,inject,dependencies,final,test,context,test,context,throws,exception,object,bean,test,context,get,test,instance,autowire,capable,bean,factory,bean,factory,test,context,get,application,context,get,autowire,capable,bean,factory,bean,factory,autowire,bean,properties,bean,autowire,capable,bean,factory,false,bean,factory,initialize,bean,bean,test,context,get,test,class,get,name,test,context,remove,attribute
DependencyInjectionTestExecutionListener -> protected void injectDependencies(final TestContext testContext) throws Exception;1356735495;Performs dependency injection and bean initialization for the supplied_{@link TestContext} as described in_{@link #prepareTestInstance(TestContext) prepareTestInstance()}._<p>The {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} will be subsequently removed_from the test context, regardless of its value._@param testContext the test context for which dependency injection should_be performed (never {@code null})_@throws Exception allows any exception to propagate_@see #prepareTestInstance(TestContext)_@see #beforeTestMethod(TestContext);protected void injectDependencies(final TestContext testContext) throws Exception {_		Object bean = testContext.getTestInstance()__		AutowireCapableBeanFactory beanFactory = testContext.getApplicationContext().getAutowireCapableBeanFactory()__		beanFactory.autowireBeanProperties(bean, AutowireCapableBeanFactory.AUTOWIRE_NO, false)__		beanFactory.initializeBean(bean, testContext.getTestClass().getName())__		testContext.removeAttribute(REINJECT_DEPENDENCIES_ATTRIBUTE)__	};performs,dependency,injection,and,bean,initialization,for,the,supplied,link,test,context,as,described,in,link,prepare,test,instance,test,context,prepare,test,instance,p,the,link,will,be,subsequently,removed,from,the,test,context,regardless,of,its,value,param,test,context,the,test,context,for,which,dependency,injection,should,be,performed,never,code,null,throws,exception,allows,any,exception,to,propagate,see,prepare,test,instance,test,context,see,before,test,method,test,context;protected,void,inject,dependencies,final,test,context,test,context,throws,exception,object,bean,test,context,get,test,instance,autowire,capable,bean,factory,bean,factory,test,context,get,application,context,get,autowire,capable,bean,factory,bean,factory,autowire,bean,properties,bean,autowire,capable,bean,factory,false,bean,factory,initialize,bean,bean,test,context,get,test,class,get,name,test,context,remove,attribute
DependencyInjectionTestExecutionListener -> protected void injectDependencies(final TestContext testContext) throws Exception;1408048216;Performs dependency injection and bean initialization for the supplied_{@link TestContext} as described in_{@link #prepareTestInstance(TestContext) prepareTestInstance()}._<p>The {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} will be subsequently removed_from the test context, regardless of its value._@param testContext the test context for which dependency injection should_be performed (never {@code null})_@throws Exception allows any exception to propagate_@see #prepareTestInstance(TestContext)_@see #beforeTestMethod(TestContext);protected void injectDependencies(final TestContext testContext) throws Exception {_		Object bean = testContext.getTestInstance()__		AutowireCapableBeanFactory beanFactory = testContext.getApplicationContext().getAutowireCapableBeanFactory()__		beanFactory.autowireBeanProperties(bean, AutowireCapableBeanFactory.AUTOWIRE_NO, false)__		beanFactory.initializeBean(bean, testContext.getTestClass().getName())__		testContext.removeAttribute(REINJECT_DEPENDENCIES_ATTRIBUTE)__	};performs,dependency,injection,and,bean,initialization,for,the,supplied,link,test,context,as,described,in,link,prepare,test,instance,test,context,prepare,test,instance,p,the,link,will,be,subsequently,removed,from,the,test,context,regardless,of,its,value,param,test,context,the,test,context,for,which,dependency,injection,should,be,performed,never,code,null,throws,exception,allows,any,exception,to,propagate,see,prepare,test,instance,test,context,see,before,test,method,test,context;protected,void,inject,dependencies,final,test,context,test,context,throws,exception,object,bean,test,context,get,test,instance,autowire,capable,bean,factory,bean,factory,test,context,get,application,context,get,autowire,capable,bean,factory,bean,factory,autowire,bean,properties,bean,autowire,capable,bean,factory,false,bean,factory,initialize,bean,bean,test,context,get,test,class,get,name,test,context,remove,attribute
DependencyInjectionTestExecutionListener -> protected void injectDependencies(final TestContext testContext) throws Exception;1413848647;Performs dependency injection and bean initialization for the supplied_{@link TestContext} as described in_{@link #prepareTestInstance(TestContext) prepareTestInstance()}._<p>The {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} will be subsequently removed_from the test context, regardless of its value._@param testContext the test context for which dependency injection should_be performed (never {@code null})_@throws Exception allows any exception to propagate_@see #prepareTestInstance(TestContext)_@see #beforeTestMethod(TestContext);protected void injectDependencies(final TestContext testContext) throws Exception {_		Object bean = testContext.getTestInstance()__		AutowireCapableBeanFactory beanFactory = testContext.getApplicationContext().getAutowireCapableBeanFactory()__		beanFactory.autowireBeanProperties(bean, AutowireCapableBeanFactory.AUTOWIRE_NO, false)__		beanFactory.initializeBean(bean, testContext.getTestClass().getName())__		testContext.removeAttribute(REINJECT_DEPENDENCIES_ATTRIBUTE)__	};performs,dependency,injection,and,bean,initialization,for,the,supplied,link,test,context,as,described,in,link,prepare,test,instance,test,context,prepare,test,instance,p,the,link,will,be,subsequently,removed,from,the,test,context,regardless,of,its,value,param,test,context,the,test,context,for,which,dependency,injection,should,be,performed,never,code,null,throws,exception,allows,any,exception,to,propagate,see,prepare,test,instance,test,context,see,before,test,method,test,context;protected,void,inject,dependencies,final,test,context,test,context,throws,exception,object,bean,test,context,get,test,instance,autowire,capable,bean,factory,bean,factory,test,context,get,application,context,get,autowire,capable,bean,factory,bean,factory,autowire,bean,properties,bean,autowire,capable,bean,factory,false,bean,factory,initialize,bean,bean,test,context,get,test,class,get,name,test,context,remove,attribute
DependencyInjectionTestExecutionListener -> protected void injectDependencies(final TestContext testContext) throws Exception;1496955179;Performs dependency injection and bean initialization for the supplied_{@link TestContext} as described in_{@link #prepareTestInstance(TestContext) prepareTestInstance()}._<p>The {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} will be subsequently removed_from the test context, regardless of its value._@param testContext the test context for which dependency injection should_be performed (never {@code null})_@throws Exception allows any exception to propagate_@see #prepareTestInstance(TestContext)_@see #beforeTestMethod(TestContext);protected void injectDependencies(final TestContext testContext) throws Exception {_		Object bean = testContext.getTestInstance()__		AutowireCapableBeanFactory beanFactory = testContext.getApplicationContext().getAutowireCapableBeanFactory()__		beanFactory.autowireBeanProperties(bean, AutowireCapableBeanFactory.AUTOWIRE_NO, false)__		beanFactory.initializeBean(bean, testContext.getTestClass().getName())__		testContext.removeAttribute(REINJECT_DEPENDENCIES_ATTRIBUTE)__	};performs,dependency,injection,and,bean,initialization,for,the,supplied,link,test,context,as,described,in,link,prepare,test,instance,test,context,prepare,test,instance,p,the,link,will,be,subsequently,removed,from,the,test,context,regardless,of,its,value,param,test,context,the,test,context,for,which,dependency,injection,should,be,performed,never,code,null,throws,exception,allows,any,exception,to,propagate,see,prepare,test,instance,test,context,see,before,test,method,test,context;protected,void,inject,dependencies,final,test,context,test,context,throws,exception,object,bean,test,context,get,test,instance,autowire,capable,bean,factory,bean,factory,test,context,get,application,context,get,autowire,capable,bean,factory,bean,factory,autowire,bean,properties,bean,autowire,capable,bean,factory,false,bean,factory,initialize,bean,bean,test,context,get,test,class,get,name,test,context,remove,attribute
DependencyInjectionTestExecutionListener -> @Override 	public void beforeTestMethod(final TestContext testContext) throws Exception;1328020251;If the {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} in the supplied_{@link TestContext test context} has a value of {@link Boolean#TRUE},_this method will have the same effect as_{@link #prepareTestInstance(TestContext) prepareTestInstance()}__otherwise, this method will have no effect.;@Override_	public void beforeTestMethod(final TestContext testContext) throws Exception {_		if (Boolean.TRUE.equals(testContext.getAttribute(REINJECT_DEPENDENCIES_ATTRIBUTE))) {_			if (logger.isDebugEnabled()) {_				logger.debug("Reinjecting dependencies for test context [" + testContext + "].")__			}_			injectDependencies(testContext)__		}_	};if,the,link,in,the,supplied,link,test,context,test,context,has,a,value,of,link,boolean,true,this,method,will,have,the,same,effect,as,link,prepare,test,instance,test,context,prepare,test,instance,otherwise,this,method,will,have,no,effect;override,public,void,before,test,method,final,test,context,test,context,throws,exception,if,boolean,true,equals,test,context,get,attribute,if,logger,is,debug,enabled,logger,debug,reinjecting,dependencies,for,test,context,test,context,inject,dependencies,test,context
DependencyInjectionTestExecutionListener -> @Override 	public void beforeTestMethod(final TestContext testContext) throws Exception;1356735495;If the {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} in the supplied_{@link TestContext test context} has a value of {@link Boolean#TRUE},_this method will have the same effect as_{@link #prepareTestInstance(TestContext) prepareTestInstance()}__otherwise, this method will have no effect.;@Override_	public void beforeTestMethod(final TestContext testContext) throws Exception {_		if (Boolean.TRUE.equals(testContext.getAttribute(REINJECT_DEPENDENCIES_ATTRIBUTE))) {_			if (logger.isDebugEnabled()) {_				logger.debug("Reinjecting dependencies for test context [" + testContext + "].")__			}_			injectDependencies(testContext)__		}_	};if,the,link,in,the,supplied,link,test,context,test,context,has,a,value,of,link,boolean,true,this,method,will,have,the,same,effect,as,link,prepare,test,instance,test,context,prepare,test,instance,otherwise,this,method,will,have,no,effect;override,public,void,before,test,method,final,test,context,test,context,throws,exception,if,boolean,true,equals,test,context,get,attribute,if,logger,is,debug,enabled,logger,debug,reinjecting,dependencies,for,test,context,test,context,inject,dependencies,test,context
DependencyInjectionTestExecutionListener -> @Override 	public void beforeTestMethod(final TestContext testContext) throws Exception;1408048216;If the {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} in the supplied_{@link TestContext test context} has a value of {@link Boolean#TRUE},_this method will have the same effect as_{@link #prepareTestInstance(TestContext) prepareTestInstance()}__otherwise, this method will have no effect.;@Override_	public void beforeTestMethod(final TestContext testContext) throws Exception {_		if (Boolean.TRUE.equals(testContext.getAttribute(REINJECT_DEPENDENCIES_ATTRIBUTE))) {_			if (logger.isDebugEnabled()) {_				logger.debug("Reinjecting dependencies for test context [" + testContext + "].")__			}_			injectDependencies(testContext)__		}_	};if,the,link,in,the,supplied,link,test,context,test,context,has,a,value,of,link,boolean,true,this,method,will,have,the,same,effect,as,link,prepare,test,instance,test,context,prepare,test,instance,otherwise,this,method,will,have,no,effect;override,public,void,before,test,method,final,test,context,test,context,throws,exception,if,boolean,true,equals,test,context,get,attribute,if,logger,is,debug,enabled,logger,debug,reinjecting,dependencies,for,test,context,test,context,inject,dependencies,test,context
DependencyInjectionTestExecutionListener -> @Override 	public void beforeTestMethod(final TestContext testContext) throws Exception;1413848647;If the {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} in the supplied_{@link TestContext test context} has a value of {@link Boolean#TRUE},_this method will have the same effect as_{@link #prepareTestInstance(TestContext) prepareTestInstance()}__otherwise, this method will have no effect.;@Override_	public void beforeTestMethod(final TestContext testContext) throws Exception {_		if (Boolean.TRUE.equals(testContext.getAttribute(REINJECT_DEPENDENCIES_ATTRIBUTE))) {_			if (logger.isDebugEnabled()) {_				logger.debug("Reinjecting dependencies for test context [" + testContext + "].")__			}_			injectDependencies(testContext)__		}_	};if,the,link,in,the,supplied,link,test,context,test,context,has,a,value,of,link,boolean,true,this,method,will,have,the,same,effect,as,link,prepare,test,instance,test,context,prepare,test,instance,otherwise,this,method,will,have,no,effect;override,public,void,before,test,method,final,test,context,test,context,throws,exception,if,boolean,true,equals,test,context,get,attribute,if,logger,is,debug,enabled,logger,debug,reinjecting,dependencies,for,test,context,test,context,inject,dependencies,test,context
DependencyInjectionTestExecutionListener -> @Override 	public void beforeTestMethod(final TestContext testContext) throws Exception;1496955179;If the {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} in the supplied_{@link TestContext test context} has a value of {@link Boolean#TRUE},_this method will have the same effect as_{@link #prepareTestInstance(TestContext) prepareTestInstance()}__otherwise, this method will have no effect.;@Override_	public void beforeTestMethod(final TestContext testContext) throws Exception {_		if (Boolean.TRUE.equals(testContext.getAttribute(REINJECT_DEPENDENCIES_ATTRIBUTE))) {_			if (logger.isDebugEnabled()) {_				logger.debug("Reinjecting dependencies for test context [" + testContext + "].")__			}_			injectDependencies(testContext)__		}_	};if,the,link,in,the,supplied,link,test,context,test,context,has,a,value,of,link,boolean,true,this,method,will,have,the,same,effect,as,link,prepare,test,instance,test,context,prepare,test,instance,otherwise,this,method,will,have,no,effect;override,public,void,before,test,method,final,test,context,test,context,throws,exception,if,boolean,true,equals,test,context,get,attribute,if,logger,is,debug,enabled,logger,debug,reinjecting,dependencies,for,test,context,test,context,inject,dependencies,test,context
