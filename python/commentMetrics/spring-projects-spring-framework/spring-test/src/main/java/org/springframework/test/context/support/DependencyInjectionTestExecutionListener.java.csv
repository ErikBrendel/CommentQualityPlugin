commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;4;/**  * Returns {@code 2000}.  */ ;/**  * Returns {@code 2000}.  */ @Override public final int getOrder() {     return 2000. }
true;public;1;7;/**  * Performs dependency injection on the  * {@link TestContext#getTestInstance() test instance} of the supplied  * {@link TestContext test context} by  * {@link AutowireCapableBeanFactory#autowireBeanProperties(Object, int, boolean) autowiring}  * and  * {@link AutowireCapableBeanFactory#initializeBean(Object, String) initializing}  * the test instance via its own  * {@link TestContext#getApplicationContext() application context} (without  * checking dependencies).  * <p>The {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} will be subsequently removed  * from the test context, regardless of its value.  */ ;/**  * Performs dependency injection on the  * {@link TestContext#getTestInstance() test instance} of the supplied  * {@link TestContext test context} by  * {@link AutowireCapableBeanFactory#autowireBeanProperties(Object, int, boolean) autowiring}  * and  * {@link AutowireCapableBeanFactory#initializeBean(Object, String) initializing}  * the test instance via its own  * {@link TestContext#getApplicationContext() application context} (without  * checking dependencies).  * <p>The {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} will be subsequently removed  * from the test context, regardless of its value.  */ @Override public void prepareTestInstance(TestContext testContext) throws Exception {     if (logger.isDebugEnabled()) {         logger.debug("Performing dependency injection for test context [" + testContext + "].").     }     injectDependencies(testContext). }
true;public;1;9;/**  * If the {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} in the supplied  * {@link TestContext test context} has a value of {@link Boolean#TRUE},  * this method will have the same effect as  * {@link #prepareTestInstance(TestContext) prepareTestInstance()}.  * otherwise, this method will have no effect.  */ ;/**  * If the {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} in the supplied  * {@link TestContext test context} has a value of {@link Boolean#TRUE},  * this method will have the same effect as  * {@link #prepareTestInstance(TestContext) prepareTestInstance()}.  * otherwise, this method will have no effect.  */ @Override public void beforeTestMethod(TestContext testContext) throws Exception {     if (Boolean.TRUE.equals(testContext.getAttribute(REINJECT_DEPENDENCIES_ATTRIBUTE))) {         if (logger.isDebugEnabled()) {             logger.debug("Reinjecting dependencies for test context [" + testContext + "].").         }         injectDependencies(testContext).     } }
true;protected;1;8;/**  * Performs dependency injection and bean initialization for the supplied  * {@link TestContext} as described in  * {@link #prepareTestInstance(TestContext) prepareTestInstance()}.  * <p>The {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} will be subsequently removed  * from the test context, regardless of its value.  * @param testContext the test context for which dependency injection should  * be performed (never {@code null})  * @throws Exception allows any exception to propagate  * @see #prepareTestInstance(TestContext)  * @see #beforeTestMethod(TestContext)  */ ;/**  * Performs dependency injection and bean initialization for the supplied  * {@link TestContext} as described in  * {@link #prepareTestInstance(TestContext) prepareTestInstance()}.  * <p>The {@link #REINJECT_DEPENDENCIES_ATTRIBUTE} will be subsequently removed  * from the test context, regardless of its value.  * @param testContext the test context for which dependency injection should  * be performed (never {@code null})  * @throws Exception allows any exception to propagate  * @see #prepareTestInstance(TestContext)  * @see #beforeTestMethod(TestContext)  */ protected void injectDependencies(TestContext testContext) throws Exception {     Object bean = testContext.getTestInstance().     Class<?> clazz = testContext.getTestClass().     AutowireCapableBeanFactory beanFactory = testContext.getApplicationContext().getAutowireCapableBeanFactory().     beanFactory.autowireBeanProperties(bean, AutowireCapableBeanFactory.AUTOWIRE_NO, false).     beanFactory.initializeBean(bean, clazz.getName() + AutowireCapableBeanFactory.ORIGINAL_INSTANCE_SUFFIX).     testContext.removeAttribute(REINJECT_DEPENDENCIES_ATTRIBUTE). }
