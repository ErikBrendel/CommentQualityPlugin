commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Fails a test with the given message.  * @param message describes the reason for the failure  */ ;/**  * Fails a test with the given message.  * @param message describes the reason for the failure  */ public static void fail(String message) {     throw new AssertionError(message). }
true;public,static;3;3;/**  * Fails a test with the given message passing along expected and actual  * values to be added to the message.  * <p>For example given:  * <pre class="code">  * assertEquals("Response header [" + name + "]", actual, expected).  * </pre>  * <p>The resulting message is:  * <pre class="code">  * Response header [Accept] expected:&lt.application/json&gt. but was:&lt.text/plain&gt.  * </pre>  * @param message describes the value that failed the match  * @param expected expected value  * @param actual actual value  */ ;/**  * Fails a test with the given message passing along expected and actual  * values to be added to the message.  * <p>For example given:  * <pre class="code">  * assertEquals("Response header [" + name + "]", actual, expected).  * </pre>  * <p>The resulting message is:  * <pre class="code">  * Response header [Accept] expected:&lt.application/json&gt. but was:&lt.text/plain&gt.  * </pre>  * @param message describes the value that failed the match  * @param expected expected value  * @param actual actual value  */ public static void fail(String message, @Nullable Object expected, @Nullable Object actual) {     throw new AssertionError(message + " expected:<" + expected + "> but was:<" + actual + ">"). }
true;public,static;2;5;/**  * Assert the given condition is {@code true} and raise an  * {@link AssertionError} if it is not.  * @param message the message  * @param condition the condition to test for  */ ;/**  * Assert the given condition is {@code true} and raise an  * {@link AssertionError} if it is not.  * @param message the message  * @param condition the condition to test for  */ public static void assertTrue(String message, boolean condition) {     if (!condition) {         fail(message).     } }
true;public,static;3;5;/**  * Assert two objects are equal and raise an {@link AssertionError} if not.  * <p>For example:  * <pre class="code">  * assertEquals("Response header [" + name + "]", expected, actual).  * </pre>  * @param message describes the value being checked  * @param expected the expected value  * @param actual the actual value  */ ;/**  * Assert two objects are equal and raise an {@link AssertionError} if not.  * <p>For example:  * <pre class="code">  * assertEquals("Response header [" + name + "]", expected, actual).  * </pre>  * @param message describes the value being checked  * @param expected the expected value  * @param actual the actual value  */ public static void assertEquals(String message, @Nullable Object expected, @Nullable Object actual) {     if (!ObjectUtils.nullSafeEquals(expected, actual)) {         fail(message, ObjectUtils.nullSafeToString(expected), ObjectUtils.nullSafeToString(actual)).     } }
true;public,static;3;6;/**  * Assert two objects are not equal and raise an {@link AssertionError} otherwise.  * <p>For example:  * <pre class="code">  * assertNotEquals("Response header [" + name + "]", expected, actual).  * </pre>  * @param message describes the value being checked  * @param expected the expected value  * @param actual the actual value  */ ;/**  * Assert two objects are not equal and raise an {@link AssertionError} otherwise.  * <p>For example:  * <pre class="code">  * assertNotEquals("Response header [" + name + "]", expected, actual).  * </pre>  * @param message describes the value being checked  * @param expected the expected value  * @param actual the actual value  */ public static void assertNotEquals(String message, @Nullable Object expected, @Nullable Object actual) {     if (ObjectUtils.nullSafeEquals(expected, actual)) {         throw new AssertionError(message + " was not expected to be:" + "<" + ObjectUtils.nullSafeToString(actual) + ">").     } }
