commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the body as a UTF-8 String.  */ ;/**  * Set the body as a UTF-8 String.  */ public DefaultResponseCreator body(String content) {     this.content = content.getBytes(StandardCharsets.UTF_8).     return this. }
true;public;1;4;/**  * Set the body as a byte array.  */ ;/**  * Set the body as a byte array.  */ public DefaultResponseCreator body(byte[] content) {     this.content = content.     return this. }
true;public;1;4;/**  * Set the body as a {@link Resource}.  */ ;/**  * Set the body as a {@link Resource}.  */ public DefaultResponseCreator body(Resource resource) {     this.contentResource = resource.     return this. }
true;public;1;4;/**  * Set the {@code Content-Type} header.  */ ;/**  * Set the {@code Content-Type} header.  */ public DefaultResponseCreator contentType(MediaType mediaType) {     this.headers.setContentType(mediaType).     return this. }
true;public;1;4;/**  * Set the {@code Location} header.  */ ;/**  * Set the {@code Location} header.  */ public DefaultResponseCreator location(URI location) {     this.headers.setLocation(location).     return this. }
true;public;1;4;/**  * Copy all given headers.  */ ;/**  * Copy all given headers.  */ public DefaultResponseCreator headers(HttpHeaders headers) {     this.headers.putAll(headers).     return this. }
false;public;1;13;;@Override public ClientHttpResponse createResponse(@Nullable ClientHttpRequest request) throws IOException {     MockClientHttpResponse response.     if (this.contentResource != null) {         InputStream stream = this.contentResource.getInputStream().         response = new MockClientHttpResponse(stream, this.statusCode).     } else {         response = new MockClientHttpResponse(this.content, this.statusCode).     }     response.getHeaders().putAll(this.headers).     return response. }
