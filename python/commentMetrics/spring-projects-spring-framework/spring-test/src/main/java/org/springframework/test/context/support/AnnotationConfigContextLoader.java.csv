# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotationConfigContextLoader -> @Override 	protected void validateMergedContextConfiguration(MergedContextConfiguration mergedConfig);1396374528;Ensure that the supplied {@link MergedContextConfiguration} does not_contain {@link MergedContextConfiguration#getLocations() locations}._@since 4.0.4_@see AbstractGenericContextLoader#validateMergedContextConfiguration;@Override_	protected void validateMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		if (mergedConfig.hasLocations()) {_			String msg = String.format(_				"Test class [%s] has been configured with @ContextConfiguration's 'locations' (or 'value') attribute %s, "_						+ "but %s does not support resource locations.", mergedConfig.getTestClass().getName(),_				ObjectUtils.nullSafeToString(mergedConfig.getLocations()), getClass().getSimpleName())__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};ensure,that,the,supplied,link,merged,context,configuration,does,not,contain,link,merged,context,configuration,get,locations,locations,since,4,0,4,see,abstract,generic,context,loader,validate,merged,context,configuration;override,protected,void,validate,merged,context,configuration,merged,context,configuration,merged,config,if,merged,config,has,locations,string,msg,string,format,test,class,s,has,been,configured,with,context,configuration,s,locations,or,value,attribute,s,but,s,does,not,support,resource,locations,merged,config,get,test,class,get,name,object,utils,null,safe,to,string,merged,config,get,locations,get,class,get,simple,name,logger,error,msg,throw,new,illegal,state,exception,msg
AnnotationConfigContextLoader -> @Override 	protected void validateMergedContextConfiguration(MergedContextConfiguration mergedConfig);1406214559;Ensure that the supplied {@link MergedContextConfiguration} does not_contain {@link MergedContextConfiguration#getLocations() locations}._@since 4.0.4_@see AbstractGenericContextLoader#validateMergedContextConfiguration;@Override_	protected void validateMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		if (mergedConfig.hasLocations()) {_			String msg = String.format(_				"Test class [%s] has been configured with @ContextConfiguration's 'locations' (or 'value') attribute %s, "_						+ "but %s does not support resource locations.", mergedConfig.getTestClass().getName(),_				ObjectUtils.nullSafeToString(mergedConfig.getLocations()), getClass().getSimpleName())__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};ensure,that,the,supplied,link,merged,context,configuration,does,not,contain,link,merged,context,configuration,get,locations,locations,since,4,0,4,see,abstract,generic,context,loader,validate,merged,context,configuration;override,protected,void,validate,merged,context,configuration,merged,context,configuration,merged,config,if,merged,config,has,locations,string,msg,string,format,test,class,s,has,been,configured,with,context,configuration,s,locations,or,value,attribute,s,but,s,does,not,support,resource,locations,merged,config,get,test,class,get,name,object,utils,null,safe,to,string,merged,config,get,locations,get,class,get,simple,name,logger,error,msg,throw,new,illegal,state,exception,msg
AnnotationConfigContextLoader -> @Override 	protected void validateMergedContextConfiguration(MergedContextConfiguration mergedConfig);1413848647;Ensure that the supplied {@link MergedContextConfiguration} does not_contain {@link MergedContextConfiguration#getLocations() locations}._@since 4.0.4_@see AbstractGenericContextLoader#validateMergedContextConfiguration;@Override_	protected void validateMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		if (mergedConfig.hasLocations()) {_			String msg = String.format(_				"Test class [%s] has been configured with @ContextConfiguration's 'locations' (or 'value') attribute %s, "_						+ "but %s does not support resource locations.", mergedConfig.getTestClass().getName(),_				ObjectUtils.nullSafeToString(mergedConfig.getLocations()), getClass().getSimpleName())__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};ensure,that,the,supplied,link,merged,context,configuration,does,not,contain,link,merged,context,configuration,get,locations,locations,since,4,0,4,see,abstract,generic,context,loader,validate,merged,context,configuration;override,protected,void,validate,merged,context,configuration,merged,context,configuration,merged,config,if,merged,config,has,locations,string,msg,string,format,test,class,s,has,been,configured,with,context,configuration,s,locations,or,value,attribute,s,but,s,does,not,support,resource,locations,merged,config,get,test,class,get,name,object,utils,null,safe,to,string,merged,config,get,locations,get,class,get,simple,name,logger,error,msg,throw,new,illegal,state,exception,msg
AnnotationConfigContextLoader -> @Override 	protected void validateMergedContextConfiguration(MergedContextConfiguration mergedConfig);1496242568;Ensure that the supplied {@link MergedContextConfiguration} does not_contain {@link MergedContextConfiguration#getLocations() locations}._@since 4.0.4_@see AbstractGenericContextLoader#validateMergedContextConfiguration;@Override_	protected void validateMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		if (mergedConfig.hasLocations()) {_			String msg = String.format(_				"Test class [%s] has been configured with @ContextConfiguration's 'locations' (or 'value') attribute %s, "_						+ "but %s does not support resource locations.", mergedConfig.getTestClass().getName(),_				ObjectUtils.nullSafeToString(mergedConfig.getLocations()), getClass().getSimpleName())__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};ensure,that,the,supplied,link,merged,context,configuration,does,not,contain,link,merged,context,configuration,get,locations,locations,since,4,0,4,see,abstract,generic,context,loader,validate,merged,context,configuration;override,protected,void,validate,merged,context,configuration,merged,context,configuration,merged,config,if,merged,config,has,locations,string,msg,string,format,test,class,s,has,been,configured,with,context,configuration,s,locations,or,value,attribute,s,but,s,does,not,support,resource,locations,merged,config,get,test,class,get,name,object,utils,null,safe,to,string,merged,config,get,locations,get,class,get,simple,name,logger,error,msg,throw,new,illegal,state,exception,msg
AnnotationConfigContextLoader -> @Override 	protected void validateMergedContextConfiguration(MergedContextConfiguration mergedConfig);1496955179;Ensure that the supplied {@link MergedContextConfiguration} does not_contain {@link MergedContextConfiguration#getLocations() locations}._@since 4.0.4_@see AbstractGenericContextLoader#validateMergedContextConfiguration;@Override_	protected void validateMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		if (mergedConfig.hasLocations()) {_			String msg = String.format(_				"Test class [%s] has been configured with @ContextConfiguration's 'locations' (or 'value') attribute %s, "_						+ "but %s does not support resource locations.", mergedConfig.getTestClass().getName(),_				ObjectUtils.nullSafeToString(mergedConfig.getLocations()), getClass().getSimpleName())__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};ensure,that,the,supplied,link,merged,context,configuration,does,not,contain,link,merged,context,configuration,get,locations,locations,since,4,0,4,see,abstract,generic,context,loader,validate,merged,context,configuration;override,protected,void,validate,merged,context,configuration,merged,context,configuration,merged,config,if,merged,config,has,locations,string,msg,string,format,test,class,s,has,been,configured,with,context,configuration,s,locations,or,value,attribute,s,but,s,does,not,support,resource,locations,merged,config,get,test,class,get,name,object,utils,null,safe,to,string,merged,config,get,locations,get,class,get,simple,name,logger,error,msg,throw,new,illegal,state,exception,msg
AnnotationConfigContextLoader -> @Override 	protected void validateMergedContextConfiguration(MergedContextConfiguration mergedConfig);1516617801;Ensure that the supplied {@link MergedContextConfiguration} does not_contain {@link MergedContextConfiguration#getLocations() locations}._@since 4.0.4_@see AbstractGenericContextLoader#validateMergedContextConfiguration;@Override_	protected void validateMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		if (mergedConfig.hasLocations()) {_			String msg = String.format("Test class [%s] has been configured with @ContextConfiguration's 'locations' " +_							"(or 'value') attribute %s, but %s does not support resource locations.",_					mergedConfig.getTestClass().getName(), ObjectUtils.nullSafeToString(mergedConfig.getLocations()),_					getClass().getSimpleName())__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};ensure,that,the,supplied,link,merged,context,configuration,does,not,contain,link,merged,context,configuration,get,locations,locations,since,4,0,4,see,abstract,generic,context,loader,validate,merged,context,configuration;override,protected,void,validate,merged,context,configuration,merged,context,configuration,merged,config,if,merged,config,has,locations,string,msg,string,format,test,class,s,has,been,configured,with,context,configuration,s,locations,or,value,attribute,s,but,s,does,not,support,resource,locations,merged,config,get,test,class,get,name,object,utils,null,safe,to,string,merged,config,get,locations,get,class,get,simple,name,logger,error,msg,throw,new,illegal,state,exception,msg
AnnotationConfigContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1328020251;Detect the default configuration classes for the supplied test class._<p>The returned class array will contain all static inner classes of_the supplied class that meet the requirements for {@code @Configuration}_class implementations as specified in the documentation for_{@link Configuration @Configuration}._<p>The implementation of this method adheres to the contract defined in the_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader}_SPI. Specifically, this method uses introspection to detect default_configuration classes that comply with the constraints required of_{@code @Configuration} class implementations. If a potential candidate_configuration class does meet these requirements, this method will log a_warning, and the potential candidate class will be ignored._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never <code>null</code>;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		Assert.notNull(declaringClass, "Declaring class must not be null")___		List<Class<?>> configClasses = new ArrayList<Class<?>>()___		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {_			if (isDefaultConfigurationClassCandidate(candidate)) {_				configClasses.add(candidate)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Ignoring class [%s]_ it must be static, non-private, non-final, and annotated "_								+ "with @Configuration to be considered a default configuration class.",_						candidate.getName()))__				}_			}_		}__		if (configClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default configuration classes for test class [%s]: "_						+ "%s does not declare any static, non-private, non-final, inner classes "_						+ "annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))__			}_		}__		return configClasses.toArray(new Class<?>[configClasses.size()])__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,returned,class,array,will,contain,all,static,inner,classes,of,the,supplied,class,that,meet,the,requirements,for,code,configuration,class,implementations,as,specified,in,the,documentation,for,link,configuration,configuration,p,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,org,springframework,test,context,smart,context,loader,smart,context,loader,spi,specifically,this,method,uses,introspection,to,detect,default,configuration,classes,that,comply,with,the,constraints,required,of,code,configuration,class,implementations,if,a,potential,candidate,configuration,class,does,meet,these,requirements,this,method,will,log,a,warning,and,the,potential,candidate,class,will,be,ignored,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,code;protected,class,detect,default,configuration,classes,class,declaring,class,assert,not,null,declaring,class,declaring,class,must,not,be,null,list,class,config,classes,new,array,list,class,for,class,candidate,declaring,class,get,declared,classes,if,is,default,configuration,class,candidate,candidate,config,classes,add,candidate,else,if,logger,is,debug,enabled,logger,debug,string,format,ignoring,class,s,it,must,be,static,non,private,non,final,and,annotated,with,configuration,to,be,considered,a,default,configuration,class,candidate,get,name,if,config,classes,is,empty,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,configuration,classes,for,test,class,s,s,does,not,declare,any,static,non,private,non,final,inner,classes,annotated,with,configuration,declaring,class,get,name,declaring,class,get,simple,name,return,config,classes,to,array,new,class,config,classes,size
AnnotationConfigContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1335774711;Detect the default configuration classes for the supplied test class._<p>The returned class array will contain all static inner classes of_the supplied class that meet the requirements for {@code @Configuration}_class implementations as specified in the documentation for_{@link Configuration @Configuration}._<p>The implementation of this method adheres to the contract defined in the_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader}_SPI. Specifically, this method uses introspection to detect default_configuration classes that comply with the constraints required of_{@code @Configuration} class implementations. If a potential candidate_configuration class does meet these requirements, this method will log a_warning, and the potential candidate class will be ignored._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never <code>null</code>;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		Assert.notNull(declaringClass, "Declaring class must not be null")___		List<Class<?>> configClasses = new ArrayList<Class<?>>()___		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {_			if (isDefaultConfigurationClassCandidate(candidate)) {_				configClasses.add(candidate)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Ignoring class [%s]_ it must be static, non-private, non-final, and annotated "_								+ "with @Configuration to be considered a default configuration class.",_						candidate.getName()))__				}_			}_		}__		if (configClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default configuration classes for test class [%s]: "_						+ "%s does not declare any static, non-private, non-final, inner classes "_						+ "annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))__			}_		}__		return configClasses.toArray(new Class<?>[configClasses.size()])__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,returned,class,array,will,contain,all,static,inner,classes,of,the,supplied,class,that,meet,the,requirements,for,code,configuration,class,implementations,as,specified,in,the,documentation,for,link,configuration,configuration,p,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,org,springframework,test,context,smart,context,loader,smart,context,loader,spi,specifically,this,method,uses,introspection,to,detect,default,configuration,classes,that,comply,with,the,constraints,required,of,code,configuration,class,implementations,if,a,potential,candidate,configuration,class,does,meet,these,requirements,this,method,will,log,a,warning,and,the,potential,candidate,class,will,be,ignored,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,code;protected,class,detect,default,configuration,classes,class,declaring,class,assert,not,null,declaring,class,declaring,class,must,not,be,null,list,class,config,classes,new,array,list,class,for,class,candidate,declaring,class,get,declared,classes,if,is,default,configuration,class,candidate,candidate,config,classes,add,candidate,else,if,logger,is,debug,enabled,logger,debug,string,format,ignoring,class,s,it,must,be,static,non,private,non,final,and,annotated,with,configuration,to,be,considered,a,default,configuration,class,candidate,get,name,if,config,classes,is,empty,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,configuration,classes,for,test,class,s,s,does,not,declare,any,static,non,private,non,final,inner,classes,annotated,with,configuration,declaring,class,get,name,declaring,class,get,simple,name,return,config,classes,to,array,new,class,config,classes,size
AnnotationConfigContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1337278668;Detect the default configuration classes for the supplied test class.__<p>The returned class array will contain all static inner classes of_the supplied class that meet the requirements for {@code @Configuration}_class implementations as specified in the documentation for_{@link Configuration @Configuration}.__<p>The implementation of this method adheres to the contract defined in the_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader}_SPI. Specifically, this method uses introspection to detect default_configuration classes that comply with the constraints required of_{@code @Configuration} class implementations. If a potential candidate_configuration class does not meet these requirements, this method will log a_warning, and the potential candidate class will be ignored._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never <code>null</code>;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		Assert.notNull(declaringClass, "Declaring class must not be null")___		List<Class<?>> configClasses = new ArrayList<Class<?>>()___		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {_			if (isDefaultConfigurationClassCandidate(candidate)) {_				configClasses.add(candidate)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Ignoring class [%s]_ it must be static, non-private, non-final, and annotated "_								+ "with @Configuration to be considered a default configuration class.",_						candidate.getName()))__				}_			}_		}__		if (configClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default configuration classes for test class [%s]: "_						+ "%s does not declare any static, non-private, non-final, inner classes "_						+ "annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))__			}_		}__		return configClasses.toArray(new Class<?>[configClasses.size()])__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,returned,class,array,will,contain,all,static,inner,classes,of,the,supplied,class,that,meet,the,requirements,for,code,configuration,class,implementations,as,specified,in,the,documentation,for,link,configuration,configuration,p,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,org,springframework,test,context,smart,context,loader,smart,context,loader,spi,specifically,this,method,uses,introspection,to,detect,default,configuration,classes,that,comply,with,the,constraints,required,of,code,configuration,class,implementations,if,a,potential,candidate,configuration,class,does,not,meet,these,requirements,this,method,will,log,a,warning,and,the,potential,candidate,class,will,be,ignored,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,code;protected,class,detect,default,configuration,classes,class,declaring,class,assert,not,null,declaring,class,declaring,class,must,not,be,null,list,class,config,classes,new,array,list,class,for,class,candidate,declaring,class,get,declared,classes,if,is,default,configuration,class,candidate,candidate,config,classes,add,candidate,else,if,logger,is,debug,enabled,logger,debug,string,format,ignoring,class,s,it,must,be,static,non,private,non,final,and,annotated,with,configuration,to,be,considered,a,default,configuration,class,candidate,get,name,if,config,classes,is,empty,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,configuration,classes,for,test,class,s,s,does,not,declare,any,static,non,private,non,final,inner,classes,annotated,with,configuration,declaring,class,get,name,declaring,class,get,simple,name,return,config,classes,to,array,new,class,config,classes,size
AnnotationConfigContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1349648958;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never <code>null</code>_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,code,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1355313310;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never <code>null</code>_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,code,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1356735495;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1357119239;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1368482696;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1396374528;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1406214559;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1413848647;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1496242568;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1496955179;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1516617801;Detect the default configuration classes for the supplied test class._<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigContextLoader -> @Override 	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig);1328020251;Register {@link org.springframework.context.annotation.Configuration configuration classes}_in the supplied {@link GenericApplicationContext context} from the classes_in the supplied {@link MergedContextConfiguration}._<p>Each class must represent an annotated configuration class or component. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions._<p>Note that this method does not call {@link #createBeanDefinitionReader}_since <code>AnnotatedBeanDefinitionReader</code> is not an instance of_{@link BeanDefinitionReader}._@param context the context in which the configuration classes should be registered_@param mergedConfig the merged configuration from which the classes should be retrieved_@see AbstractGenericContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig) {_		Class<?>[] configClasses = mergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering configuration classes: " + ObjectUtils.nullSafeToString(configClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(configClasses)__	};register,link,org,springframework,context,annotation,configuration,configuration,classes,in,the,supplied,link,generic,application,context,context,from,the,classes,in,the,supplied,link,merged,context,configuration,p,each,class,must,represent,an,annotated,configuration,class,or,component,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,p,note,that,this,method,does,not,call,link,create,bean,definition,reader,since,code,annotated,bean,definition,reader,code,is,not,an,instance,of,link,bean,definition,reader,param,context,the,context,in,which,the,configuration,classes,should,be,registered,param,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,application,context,context,merged,context,configuration,merged,config,class,config,classes,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,configuration,classes,object,utils,null,safe,to,string,config,classes,new,annotated,bean,definition,reader,context,register,config,classes
AnnotationConfigContextLoader -> @Override 	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig);1335774711;Register {@link org.springframework.context.annotation.Configuration configuration classes}_in the supplied {@link GenericApplicationContext context} from the classes_in the supplied {@link MergedContextConfiguration}._<p>Each class must represent an annotated configuration class or component. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions._<p>Note that this method does not call {@link #createBeanDefinitionReader}_since <code>AnnotatedBeanDefinitionReader</code> is not an instance of_{@link BeanDefinitionReader}._@param context the context in which the configuration classes should be registered_@param mergedConfig the merged configuration from which the classes should be retrieved_@see AbstractGenericContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig) {_		Class<?>[] configClasses = mergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering configuration classes: " + ObjectUtils.nullSafeToString(configClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(configClasses)__	};register,link,org,springframework,context,annotation,configuration,configuration,classes,in,the,supplied,link,generic,application,context,context,from,the,classes,in,the,supplied,link,merged,context,configuration,p,each,class,must,represent,an,annotated,configuration,class,or,component,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,p,note,that,this,method,does,not,call,link,create,bean,definition,reader,since,code,annotated,bean,definition,reader,code,is,not,an,instance,of,link,bean,definition,reader,param,context,the,context,in,which,the,configuration,classes,should,be,registered,param,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,application,context,context,merged,context,configuration,merged,config,class,config,classes,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,configuration,classes,object,utils,null,safe,to,string,config,classes,new,annotated,bean,definition,reader,context,register,config,classes
AnnotationConfigContextLoader -> @Override 	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig);1337278668;Register classes in the supplied {@link GenericApplicationContext context}_from the classes in the supplied {@link MergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__<p>Note that this method does not call {@link #createBeanDefinitionReader()}_since <code>AnnotatedBeanDefinitionReader</code> is not an instance of_{@link BeanDefinitionReader}.__@param context the context in which the annotated classes should be registered_@param mergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig) {_		Class<?>[] annotatedClasses = mergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,link,generic,application,context,context,from,the,classes,in,the,supplied,link,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,p,note,that,this,method,does,not,call,link,create,bean,definition,reader,since,code,annotated,bean,definition,reader,code,is,not,an,instance,of,link,bean,definition,reader,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,application,context,context,merged,context,configuration,merged,config,class,annotated,classes,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigContextLoader -> @Override 	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig);1349648958;Register classes in the supplied {@link GenericApplicationContext context}_from the classes in the supplied {@link MergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__<p>Note that this method does not call {@link #createBeanDefinitionReader()}_since <code>AnnotatedBeanDefinitionReader</code> is not an instance of_{@link BeanDefinitionReader}.__@param context the context in which the annotated classes should be registered_@param mergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig) {_		Class<?>[] annotatedClasses = mergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,link,generic,application,context,context,from,the,classes,in,the,supplied,link,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,p,note,that,this,method,does,not,call,link,create,bean,definition,reader,since,code,annotated,bean,definition,reader,code,is,not,an,instance,of,link,bean,definition,reader,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,application,context,context,merged,context,configuration,merged,config,class,annotated,classes,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigContextLoader -> @Override 	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig);1355313310;Register classes in the supplied {@link GenericApplicationContext context}_from the classes in the supplied {@link MergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__<p>Note that this method does not call {@link #createBeanDefinitionReader}_since <code>AnnotatedBeanDefinitionReader</code> is not an instance of_{@link BeanDefinitionReader}.__@param context the context in which the annotated classes should be registered_@param mergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig) {_		Class<?>[] annotatedClasses = mergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,link,generic,application,context,context,from,the,classes,in,the,supplied,link,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,p,note,that,this,method,does,not,call,link,create,bean,definition,reader,since,code,annotated,bean,definition,reader,code,is,not,an,instance,of,link,bean,definition,reader,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,application,context,context,merged,context,configuration,merged,config,class,annotated,classes,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigContextLoader -> @Override 	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig);1356735495;Register classes in the supplied {@link GenericApplicationContext context}_from the classes in the supplied {@link MergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__<p>Note that this method does not call {@link #createBeanDefinitionReader}_since {@code AnnotatedBeanDefinitionReader} is not an instance of_{@link BeanDefinitionReader}.__@param context the context in which the annotated classes should be registered_@param mergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig) {_		Class<?>[] annotatedClasses = mergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,link,generic,application,context,context,from,the,classes,in,the,supplied,link,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,p,note,that,this,method,does,not,call,link,create,bean,definition,reader,since,code,annotated,bean,definition,reader,is,not,an,instance,of,link,bean,definition,reader,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,application,context,context,merged,context,configuration,merged,config,class,annotated,classes,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigContextLoader -> @Override 	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig);1357119239;Register classes in the supplied {@link GenericApplicationContext context}_from the classes in the supplied {@link MergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__<p>Note that this method does not call {@link #createBeanDefinitionReader}_since {@code AnnotatedBeanDefinitionReader} is not an instance of_{@link BeanDefinitionReader}.__@param context the context in which the annotated classes should be registered_@param mergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig) {_		Class<?>[] annotatedClasses = mergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,link,generic,application,context,context,from,the,classes,in,the,supplied,link,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,p,note,that,this,method,does,not,call,link,create,bean,definition,reader,since,code,annotated,bean,definition,reader,is,not,an,instance,of,link,bean,definition,reader,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,application,context,context,merged,context,configuration,merged,config,class,annotated,classes,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigContextLoader -> @Override 	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig);1368482696;Register classes in the supplied {@link GenericApplicationContext context}_from the classes in the supplied {@link MergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__<p>Note that this method does not call {@link #createBeanDefinitionReader}_since {@code AnnotatedBeanDefinitionReader} is not an instance of_{@link BeanDefinitionReader}.__@param context the context in which the annotated classes should be registered_@param mergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig) {_		Class<?>[] annotatedClasses = mergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,link,generic,application,context,context,from,the,classes,in,the,supplied,link,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,p,note,that,this,method,does,not,call,link,create,bean,definition,reader,since,code,annotated,bean,definition,reader,is,not,an,instance,of,link,bean,definition,reader,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,application,context,context,merged,context,configuration,merged,config,class,annotated,classes,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigContextLoader -> @Override 	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig);1396374528;Register classes in the supplied {@link GenericApplicationContext context}_from the classes in the supplied {@link MergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__<p>Note that this method does not call {@link #createBeanDefinitionReader}_since {@code AnnotatedBeanDefinitionReader} is not an instance of_{@link BeanDefinitionReader}.__@param context the context in which the annotated classes should be registered_@param mergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig) {_		Class<?>[] annotatedClasses = mergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,link,generic,application,context,context,from,the,classes,in,the,supplied,link,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,p,note,that,this,method,does,not,call,link,create,bean,definition,reader,since,code,annotated,bean,definition,reader,is,not,an,instance,of,link,bean,definition,reader,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,application,context,context,merged,context,configuration,merged,config,class,annotated,classes,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigContextLoader -> @Override 	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig);1406214559;Register classes in the supplied {@link GenericApplicationContext context}_from the classes in the supplied {@link MergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__<p>Note that this method does not call {@link #createBeanDefinitionReader}_since {@code AnnotatedBeanDefinitionReader} is not an instance of_{@link BeanDefinitionReader}.__@param context the context in which the annotated classes should be registered_@param mergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig) {_		Class<?>[] annotatedClasses = mergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,link,generic,application,context,context,from,the,classes,in,the,supplied,link,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,p,note,that,this,method,does,not,call,link,create,bean,definition,reader,since,code,annotated,bean,definition,reader,is,not,an,instance,of,link,bean,definition,reader,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,application,context,context,merged,context,configuration,merged,config,class,annotated,classes,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigContextLoader -> @Override 	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig);1413848647;Register classes in the supplied {@link GenericApplicationContext context}_from the classes in the supplied {@link MergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__<p>Note that this method does not call {@link #createBeanDefinitionReader}_since {@code AnnotatedBeanDefinitionReader} is not an instance of_{@link BeanDefinitionReader}.__@param context the context in which the annotated classes should be registered_@param mergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig) {_		Class<?>[] annotatedClasses = mergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,link,generic,application,context,context,from,the,classes,in,the,supplied,link,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,p,note,that,this,method,does,not,call,link,create,bean,definition,reader,since,code,annotated,bean,definition,reader,is,not,an,instance,of,link,bean,definition,reader,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,application,context,context,merged,context,configuration,merged,config,class,annotated,classes,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigContextLoader -> @Override 	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig);1496242568;Register classes in the supplied {@link GenericApplicationContext context}_from the classes in the supplied {@link MergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__<p>Note that this method does not call {@link #createBeanDefinitionReader}_since {@code AnnotatedBeanDefinitionReader} is not an instance of_{@link BeanDefinitionReader}.__@param context the context in which the annotated classes should be registered_@param mergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig) {_		Class<?>[] annotatedClasses = mergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,link,generic,application,context,context,from,the,classes,in,the,supplied,link,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,p,note,that,this,method,does,not,call,link,create,bean,definition,reader,since,code,annotated,bean,definition,reader,is,not,an,instance,of,link,bean,definition,reader,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,application,context,context,merged,context,configuration,merged,config,class,annotated,classes,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigContextLoader -> @Override 	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig);1496955179;Register classes in the supplied {@link GenericApplicationContext context}_from the classes in the supplied {@link MergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__<p>Note that this method does not call {@link #createBeanDefinitionReader}_since {@code AnnotatedBeanDefinitionReader} is not an instance of_{@link BeanDefinitionReader}.__@param context the context in which the annotated classes should be registered_@param mergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig) {_		Class<?>[] annotatedClasses = mergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,link,generic,application,context,context,from,the,classes,in,the,supplied,link,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,p,note,that,this,method,does,not,call,link,create,bean,definition,reader,since,code,annotated,bean,definition,reader,is,not,an,instance,of,link,bean,definition,reader,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,application,context,context,merged,context,configuration,merged,config,class,annotated,classes,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigContextLoader -> @Override 	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig);1516617801;Register classes in the supplied {@link GenericApplicationContext context}_from the classes in the supplied {@link MergedContextConfiguration}._<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions._<p>Note that this method does not call {@link #createBeanDefinitionReader}_since {@code AnnotatedBeanDefinitionReader} is not an instance of_{@link BeanDefinitionReader}._@param context the context in which the annotated classes should be registered_@param mergedConfig the merged configuration from which the classes should be retrieved_@see AbstractGenericContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig) {_		Class<?>[] annotatedClasses = mergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,link,generic,application,context,context,from,the,classes,in,the,supplied,link,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,p,note,that,this,method,does,not,call,link,create,bean,definition,reader,since,code,annotated,bean,definition,reader,is,not,an,instance,of,link,bean,definition,reader,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,application,context,context,merged,context,configuration,merged,config,class,annotated,classes,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1328020251;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported._@see AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1335774711;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported._@see AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1337278668;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1349648958;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1355313310;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1356735495;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1357119239;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1368482696;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1396374528;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1406214559;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1413848647;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1496242568;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1496955179;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1516617801;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported._@throws UnsupportedOperationException in this implementation_@see AbstractContextLoader#generateDefaultLocations;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_				"AnnotationConfigContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,throws,unsupported,operation,exception,in,this,implementation,see,abstract,context,loader,generate,default,locations;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigContextLoader -> private boolean isDefaultConfigurationClassCandidate(Class<?> clazz);1328020251;Determine if the supplied {@link Class} meets the criteria for being_considered a <em>default configuration class</em> candidate._<p>Specifically, such candidates:_<ul>_<li>must not be <code>null</code></li>_<li>must not be <code>private</code></li>_<li>must not be <code>final</code></li>_<li>must be <code>static</code></li>_<li>must be annotated with {@code @Configuration}</li>_</ul>_@param clazz the class to check_@return <code>true</code> if the supplied class meets the candidate criteria;private boolean isDefaultConfigurationClassCandidate(Class<?> clazz) {_		return clazz != null && isStaticNonPrivateAndNonFinal(clazz) && clazz.isAnnotationPresent(Configuration.class)__	};determine,if,the,supplied,link,class,meets,the,criteria,for,being,considered,a,em,default,configuration,class,em,candidate,p,specifically,such,candidates,ul,li,must,not,be,code,null,code,li,li,must,not,be,code,private,code,li,li,must,not,be,code,final,code,li,li,must,be,code,static,code,li,li,must,be,annotated,with,code,configuration,li,ul,param,clazz,the,class,to,check,return,code,true,code,if,the,supplied,class,meets,the,candidate,criteria;private,boolean,is,default,configuration,class,candidate,class,clazz,return,clazz,null,is,static,non,private,and,non,final,clazz,clazz,is,annotation,present,configuration,class
AnnotationConfigContextLoader -> private boolean isDefaultConfigurationClassCandidate(Class<?> clazz);1335774711;Determine if the supplied {@link Class} meets the criteria for being_considered a <em>default configuration class</em> candidate._<p>Specifically, such candidates:_<ul>_<li>must not be <code>null</code></li>_<li>must not be <code>private</code></li>_<li>must not be <code>final</code></li>_<li>must be <code>static</code></li>_<li>must be annotated with {@code @Configuration}</li>_</ul>_@param clazz the class to check_@return <code>true</code> if the supplied class meets the candidate criteria;private boolean isDefaultConfigurationClassCandidate(Class<?> clazz) {_		return clazz != null && isStaticNonPrivateAndNonFinal(clazz) && clazz.isAnnotationPresent(Configuration.class)__	};determine,if,the,supplied,link,class,meets,the,criteria,for,being,considered,a,em,default,configuration,class,em,candidate,p,specifically,such,candidates,ul,li,must,not,be,code,null,code,li,li,must,not,be,code,private,code,li,li,must,not,be,code,final,code,li,li,must,be,code,static,code,li,li,must,be,annotated,with,code,configuration,li,ul,param,clazz,the,class,to,check,return,code,true,code,if,the,supplied,class,meets,the,candidate,criteria;private,boolean,is,default,configuration,class,candidate,class,clazz,return,clazz,null,is,static,non,private,and,non,final,clazz,clazz,is,annotation,present,configuration,class
AnnotationConfigContextLoader -> private boolean isDefaultConfigurationClassCandidate(Class<?> clazz);1337278668;Determine if the supplied {@link Class} meets the criteria for being_considered a <em>default configuration class</em> candidate.__<p>Specifically, such candidates:__<ul>_<li>must not be <code>null</code></li>_<li>must not be <code>private</code></li>_<li>must not be <code>final</code></li>_<li>must be <code>static</code></li>_<li>must be annotated with {@code @Configuration}</li>_</ul>__@param clazz the class to check_@return <code>true</code> if the supplied class meets the candidate criteria;private boolean isDefaultConfigurationClassCandidate(Class<?> clazz) {_		return clazz != null && isStaticNonPrivateAndNonFinal(clazz) && clazz.isAnnotationPresent(Configuration.class)__	};determine,if,the,supplied,link,class,meets,the,criteria,for,being,considered,a,em,default,configuration,class,em,candidate,p,specifically,such,candidates,ul,li,must,not,be,code,null,code,li,li,must,not,be,code,private,code,li,li,must,not,be,code,final,code,li,li,must,be,code,static,code,li,li,must,be,annotated,with,code,configuration,li,ul,param,clazz,the,class,to,check,return,code,true,code,if,the,supplied,class,meets,the,candidate,criteria;private,boolean,is,default,configuration,class,candidate,class,clazz,return,clazz,null,is,static,non,private,and,non,final,clazz,clazz,is,annotation,present,configuration,class
AnnotationConfigContextLoader -> @Override 	protected String getResourceSuffix();1328020251;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported._@see AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigContextLoader -> @Override 	protected String getResourceSuffix();1335774711;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported._@see AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigContextLoader -> @Override 	protected String getResourceSuffix();1337278668;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigContextLoader -> @Override 	protected String getResourceSuffix();1349648958;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigContextLoader -> @Override 	protected String getResourceSuffix();1355313310;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigContextLoader -> @Override 	protected String getResourceSuffix();1356735495;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigContextLoader -> @Override 	protected String getResourceSuffix();1357119239;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigContextLoader -> @Override 	protected String getResourceSuffix();1368482696;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigContextLoader -> @Override 	protected String getResourceSuffix();1396374528;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigContextLoader -> @Override 	protected String getResourceSuffix();1406214559;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigContextLoader -> @Override 	protected String getResourceSuffix();1413848647;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigContextLoader -> @Override 	protected String getResourceSuffix();1496242568;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigContextLoader -> @Override 	protected String getResourceSuffix();1496955179;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigContextLoader -> @Override 	protected String getResourceSuffix();1516617801;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported._@throws UnsupportedOperationException in this implementation_@see AbstractContextLoader#getResourceSuffix;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_				"AnnotationConfigContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,throws,unsupported,operation,exception,in,this,implementation,see,abstract,context,loader,get,resource,suffix;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigContextLoader -> @Override 	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context);1328020251;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported._@see #loadBeanDefinitions_@see AbstractGenericContextLoader#createBeanDefinitionReader_@throws UnsupportedOperationException;@Override_	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the createBeanDefinitionReader(GenericApplicationContext) method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,load,bean,definitions,see,abstract,generic,context,loader,create,bean,definition,reader,throws,unsupported,operation,exception;override,protected,bean,definition,reader,create,bean,definition,reader,generic,application,context,context,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,create,bean,definition,reader,generic,application,context,method
AnnotationConfigContextLoader -> @Override 	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context);1335774711;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported._@see #loadBeanDefinitions_@see AbstractGenericContextLoader#createBeanDefinitionReader_@throws UnsupportedOperationException;@Override_	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the createBeanDefinitionReader(GenericApplicationContext) method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,load,bean,definitions,see,abstract,generic,context,loader,create,bean,definition,reader,throws,unsupported,operation,exception;override,protected,bean,definition,reader,create,bean,definition,reader,generic,application,context,context,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,create,bean,definition,reader,generic,application,context,method
AnnotationConfigContextLoader -> @Override 	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context);1337278668;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see #loadBeanDefinitions_@see AbstractGenericContextLoader#createBeanDefinitionReader_@throws UnsupportedOperationException;@Override_	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the createBeanDefinitionReader(GenericApplicationContext) method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,load,bean,definitions,see,abstract,generic,context,loader,create,bean,definition,reader,throws,unsupported,operation,exception;override,protected,bean,definition,reader,create,bean,definition,reader,generic,application,context,context,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,create,bean,definition,reader,generic,application,context,method
AnnotationConfigContextLoader -> @Override 	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context);1349648958;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see #loadBeanDefinitions_@see AbstractGenericContextLoader#createBeanDefinitionReader_@throws UnsupportedOperationException;@Override_	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the createBeanDefinitionReader(GenericApplicationContext) method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,load,bean,definitions,see,abstract,generic,context,loader,create,bean,definition,reader,throws,unsupported,operation,exception;override,protected,bean,definition,reader,create,bean,definition,reader,generic,application,context,context,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,create,bean,definition,reader,generic,application,context,method
AnnotationConfigContextLoader -> @Override 	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context);1355313310;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see #loadBeanDefinitions_@see AbstractGenericContextLoader#createBeanDefinitionReader_@throws UnsupportedOperationException;@Override_	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the createBeanDefinitionReader(GenericApplicationContext) method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,load,bean,definitions,see,abstract,generic,context,loader,create,bean,definition,reader,throws,unsupported,operation,exception;override,protected,bean,definition,reader,create,bean,definition,reader,generic,application,context,context,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,create,bean,definition,reader,generic,application,context,method
AnnotationConfigContextLoader -> @Override 	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context);1356735495;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see #loadBeanDefinitions_@see AbstractGenericContextLoader#createBeanDefinitionReader_@throws UnsupportedOperationException;@Override_	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the createBeanDefinitionReader(GenericApplicationContext) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,load,bean,definitions,see,abstract,generic,context,loader,create,bean,definition,reader,throws,unsupported,operation,exception;override,protected,bean,definition,reader,create,bean,definition,reader,generic,application,context,context,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,create,bean,definition,reader,generic,application,context,method
AnnotationConfigContextLoader -> @Override 	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context);1357119239;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see #loadBeanDefinitions_@see AbstractGenericContextLoader#createBeanDefinitionReader_@throws UnsupportedOperationException;@Override_	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the createBeanDefinitionReader(GenericApplicationContext) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,load,bean,definitions,see,abstract,generic,context,loader,create,bean,definition,reader,throws,unsupported,operation,exception;override,protected,bean,definition,reader,create,bean,definition,reader,generic,application,context,context,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,create,bean,definition,reader,generic,application,context,method
AnnotationConfigContextLoader -> @Override 	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context);1368482696;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see #loadBeanDefinitions_@see AbstractGenericContextLoader#createBeanDefinitionReader_@throws UnsupportedOperationException;@Override_	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the createBeanDefinitionReader(GenericApplicationContext) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,load,bean,definitions,see,abstract,generic,context,loader,create,bean,definition,reader,throws,unsupported,operation,exception;override,protected,bean,definition,reader,create,bean,definition,reader,generic,application,context,context,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,create,bean,definition,reader,generic,application,context,method
AnnotationConfigContextLoader -> @Override 	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context);1396374528;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see #loadBeanDefinitions_@see AbstractGenericContextLoader#createBeanDefinitionReader_@throws UnsupportedOperationException;@Override_	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the createBeanDefinitionReader(GenericApplicationContext) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,load,bean,definitions,see,abstract,generic,context,loader,create,bean,definition,reader,throws,unsupported,operation,exception;override,protected,bean,definition,reader,create,bean,definition,reader,generic,application,context,context,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,create,bean,definition,reader,generic,application,context,method
AnnotationConfigContextLoader -> @Override 	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context);1406214559;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see #loadBeanDefinitions_@see AbstractGenericContextLoader#createBeanDefinitionReader_@throws UnsupportedOperationException;@Override_	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the createBeanDefinitionReader(GenericApplicationContext) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,load,bean,definitions,see,abstract,generic,context,loader,create,bean,definition,reader,throws,unsupported,operation,exception;override,protected,bean,definition,reader,create,bean,definition,reader,generic,application,context,context,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,create,bean,definition,reader,generic,application,context,method
AnnotationConfigContextLoader -> @Override 	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context);1413848647;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see #loadBeanDefinitions_@see AbstractGenericContextLoader#createBeanDefinitionReader_@throws UnsupportedOperationException;@Override_	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the createBeanDefinitionReader(GenericApplicationContext) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,load,bean,definitions,see,abstract,generic,context,loader,create,bean,definition,reader,throws,unsupported,operation,exception;override,protected,bean,definition,reader,create,bean,definition,reader,generic,application,context,context,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,create,bean,definition,reader,generic,application,context,method
AnnotationConfigContextLoader -> @Override 	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context);1496242568;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see #loadBeanDefinitions_@see AbstractGenericContextLoader#createBeanDefinitionReader_@throws UnsupportedOperationException;@Override_	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the createBeanDefinitionReader(GenericApplicationContext) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,load,bean,definitions,see,abstract,generic,context,loader,create,bean,definition,reader,throws,unsupported,operation,exception;override,protected,bean,definition,reader,create,bean,definition,reader,generic,application,context,context,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,create,bean,definition,reader,generic,application,context,method
AnnotationConfigContextLoader -> @Override 	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context);1496955179;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see #loadBeanDefinitions_@see AbstractGenericContextLoader#createBeanDefinitionReader_@throws UnsupportedOperationException;@Override_	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the createBeanDefinitionReader(GenericApplicationContext) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,load,bean,definitions,see,abstract,generic,context,loader,create,bean,definition,reader,throws,unsupported,operation,exception;override,protected,bean,definition,reader,create,bean,definition,reader,generic,application,context,context,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,create,bean,definition,reader,generic,application,context,method
AnnotationConfigContextLoader -> @Override 	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context);1516617801;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported._@throws UnsupportedOperationException in this implementation_@see #loadBeanDefinitions_@see AbstractGenericContextLoader#createBeanDefinitionReader;@Override_	protected BeanDefinitionReader createBeanDefinitionReader(GenericApplicationContext context) {_		throw new UnsupportedOperationException(_				"AnnotationConfigContextLoader does not support the createBeanDefinitionReader(GenericApplicationContext) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,throws,unsupported,operation,exception,in,this,implementation,see,load,bean,definitions,see,abstract,generic,context,loader,create,bean,definition,reader;override,protected,bean,definition,reader,create,bean,definition,reader,generic,application,context,context,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,create,bean,definition,reader,generic,application,context,method
AnnotationConfigContextLoader -> public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1328020251;Process configuration classes in the supplied {@link ContextConfigurationAttributes}._<p>If the configuration classes are <code>null</code> or empty and_{@link #isGenerateDefaultLocations()} returns <code>true</code>, this_<code>SmartContextLoader</code> will attempt to {@link_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@link ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified._@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration()_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses();public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (ObjectUtils.isEmpty(configAttributes.getClasses()) && isGenerateDefaultLocations()) {_			Class<?>[] defaultConfigClasses = detectDefaultConfigurationClasses(configAttributes.getDeclaringClass())__			configAttributes.setClasses(defaultConfigClasses)__		}_	};process,configuration,classes,in,the,supplied,link,context,configuration,attributes,p,if,the,configuration,classes,are,code,null,code,or,empty,and,link,is,generate,default,locations,returns,code,true,code,this,code,smart,context,loader,code,will,attempt,to,link,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,link,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,see,is,generate,default,locations,see,detect,default,configuration,classes;public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,object,utils,is,empty,config,attributes,get,classes,is,generate,default,locations,class,default,config,classes,detect,default,configuration,classes,config,attributes,get,declaring,class,config,attributes,set,classes,default,config,classes
AnnotationConfigContextLoader -> public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1335774711;Process configuration classes in the supplied {@link ContextConfigurationAttributes}._<p>If the configuration classes are <code>null</code> or empty and_{@link #isGenerateDefaultLocations()} returns <code>true</code>, this_<code>SmartContextLoader</code> will attempt to {@link_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@link ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified._@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (ObjectUtils.isEmpty(configAttributes.getClasses()) && isGenerateDefaultLocations()) {_			Class<?>[] defaultConfigClasses = detectDefaultConfigurationClasses(configAttributes.getDeclaringClass())__			configAttributes.setClasses(defaultConfigClasses)__		}_	};process,configuration,classes,in,the,supplied,link,context,configuration,attributes,p,if,the,configuration,classes,are,code,null,code,or,empty,and,link,is,generate,default,locations,returns,code,true,code,this,code,smart,context,loader,code,will,attempt,to,link,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,link,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,object,utils,is,empty,config,attributes,get,classes,is,generate,default,locations,class,default,config,classes,detect,default,configuration,classes,config,attributes,get,declaring,class,config,attributes,set,classes,default,config,classes
AnnotationConfigContextLoader -> public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1337278668;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are <code>null</code> or empty and_{@link #isGenerateDefaultLocations()} returns <code>true</code>, this_<code>SmartContextLoader</code> will attempt to {@link_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@link ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (ObjectUtils.isEmpty(configAttributes.getClasses()) && isGenerateDefaultLocations()) {_			Class<?>[] defaultConfigClasses = detectDefaultConfigurationClasses(configAttributes.getDeclaringClass())__			configAttributes.setClasses(defaultConfigClasses)__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,code,or,empty,and,link,is,generate,default,locations,returns,code,true,code,this,code,smart,context,loader,code,will,attempt,to,link,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,link,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,object,utils,is,empty,config,attributes,get,classes,is,generate,default,locations,class,default,config,classes,detect,default,configuration,classes,config,attributes,get,declaring,class,config,attributes,set,classes,default,config,classes
AnnotationConfigContextLoader -> public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1349648958;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are <code>null</code> or empty and_{@link #isGenerateDefaultLocations()} returns <code>true</code>, this_<code>SmartContextLoader</code> will attempt to {@link_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@link ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (ObjectUtils.isEmpty(configAttributes.getClasses()) && isGenerateDefaultLocations()) {_			Class<?>[] defaultConfigClasses = detectDefaultConfigurationClasses(configAttributes.getDeclaringClass())__			configAttributes.setClasses(defaultConfigClasses)__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,code,or,empty,and,link,is,generate,default,locations,returns,code,true,code,this,code,smart,context,loader,code,will,attempt,to,link,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,link,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,object,utils,is,empty,config,attributes,get,classes,is,generate,default,locations,class,default,config,classes,detect,default,configuration,classes,config,attributes,get,declaring,class,config,attributes,set,classes,default,config,classes
AnnotationConfigContextLoader -> public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1355313310;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are <code>null</code> or empty and_{@link #isGenerateDefaultLocations()} returns <code>true</code>, this_<code>SmartContextLoader</code> will attempt to {@link_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@link ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (ObjectUtils.isEmpty(configAttributes.getClasses()) && isGenerateDefaultLocations()) {_			Class<?>[] defaultConfigClasses = detectDefaultConfigurationClasses(configAttributes.getDeclaringClass())__			configAttributes.setClasses(defaultConfigClasses)__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,code,or,empty,and,link,is,generate,default,locations,returns,code,true,code,this,code,smart,context,loader,code,will,attempt,to,link,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,link,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,object,utils,is,empty,config,attributes,get,classes,is,generate,default,locations,class,default,config,classes,detect,default,configuration,classes,config,attributes,get,declaring,class,config,attributes,set,classes,default,config,classes
AnnotationConfigContextLoader -> public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1357119239;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are {@code null} or empty and_{@link #isGenerateDefaultLocations()} returns {@code true}, this_{@code SmartContextLoader} will attempt to {@link_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@link ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (ObjectUtils.isEmpty(configAttributes.getClasses()) && isGenerateDefaultLocations()) {_			Class<?>[] defaultConfigClasses = detectDefaultConfigurationClasses(configAttributes.getDeclaringClass())__			configAttributes.setClasses(defaultConfigClasses)__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,or,empty,and,link,is,generate,default,locations,returns,code,true,this,code,smart,context,loader,will,attempt,to,link,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,link,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,object,utils,is,empty,config,attributes,get,classes,is,generate,default,locations,class,default,config,classes,detect,default,configuration,classes,config,attributes,get,declaring,class,config,attributes,set,classes,default,config,classes
AnnotationConfigContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1356735495;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are {@code null} or empty and_{@link #isGenerateDefaultLocations()} returns {@code true}, this_{@code SmartContextLoader} will attempt to {@link_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@link ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (ObjectUtils.isEmpty(configAttributes.getClasses()) && isGenerateDefaultLocations()) {_			Class<?>[] defaultConfigClasses = detectDefaultConfigurationClasses(configAttributes.getDeclaringClass())__			configAttributes.setClasses(defaultConfigClasses)__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,or,empty,and,link,is,generate,default,locations,returns,code,true,this,code,smart,context,loader,will,attempt,to,link,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,link,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,object,utils,is,empty,config,attributes,get,classes,is,generate,default,locations,class,default,config,classes,detect,default,configuration,classes,config,attributes,get,declaring,class,config,attributes,set,classes,default,config,classes
AnnotationConfigContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1368482696;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are {@code null} or empty and_{@link #isGenerateDefaultLocations()} returns {@code true}, this_{@code SmartContextLoader} will attempt to {@link_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@link ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (ObjectUtils.isEmpty(configAttributes.getClasses()) && isGenerateDefaultLocations()) {_			Class<?>[] defaultConfigClasses = detectDefaultConfigurationClasses(configAttributes.getDeclaringClass())__			configAttributes.setClasses(defaultConfigClasses)__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,or,empty,and,link,is,generate,default,locations,returns,code,true,this,code,smart,context,loader,will,attempt,to,link,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,link,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,object,utils,is,empty,config,attributes,get,classes,is,generate,default,locations,class,default,config,classes,detect,default,configuration,classes,config,attributes,get,declaring,class,config,attributes,set,classes,default,config,classes
AnnotationConfigContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1396374528;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are {@code null} or empty and_{@link #isGenerateDefaultLocations()} returns {@code true}, this_{@code SmartContextLoader} will attempt to {@link_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@link ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (!configAttributes.hasClasses() && isGenerateDefaultLocations()) {_			configAttributes.setClasses(detectDefaultConfigurationClasses(configAttributes.getDeclaringClass()))__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,or,empty,and,link,is,generate,default,locations,returns,code,true,this,code,smart,context,loader,will,attempt,to,link,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,link,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,config,attributes,has,classes,is,generate,default,locations,config,attributes,set,classes,detect,default,configuration,classes,config,attributes,get,declaring,class
AnnotationConfigContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1406214559;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are {@code null} or empty and_{@link #isGenerateDefaultLocations()} returns {@code true}, this_{@code SmartContextLoader} will attempt to {@link_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@link ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (!configAttributes.hasClasses() && isGenerateDefaultLocations()) {_			configAttributes.setClasses(detectDefaultConfigurationClasses(configAttributes.getDeclaringClass()))__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,or,empty,and,link,is,generate,default,locations,returns,code,true,this,code,smart,context,loader,will,attempt,to,link,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,link,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,config,attributes,has,classes,is,generate,default,locations,config,attributes,set,classes,detect,default,configuration,classes,config,attributes,get,declaring,class
AnnotationConfigContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1413848647;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are {@code null} or empty and_{@link #isGenerateDefaultLocations()} returns {@code true}, this_{@code SmartContextLoader} will attempt to {@link_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@link ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (!configAttributes.hasClasses() && isGenerateDefaultLocations()) {_			configAttributes.setClasses(detectDefaultConfigurationClasses(configAttributes.getDeclaringClass()))__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,or,empty,and,link,is,generate,default,locations,returns,code,true,this,code,smart,context,loader,will,attempt,to,link,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,link,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,config,attributes,has,classes,is,generate,default,locations,config,attributes,set,classes,detect,default,configuration,classes,config,attributes,get,declaring,class
AnnotationConfigContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1496955179;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are {@code null} or empty and_{@link #isGenerateDefaultLocations()} returns {@code true}, this_{@code SmartContextLoader} will attempt to {@link_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@link ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (!configAttributes.hasClasses() && isGenerateDefaultLocations()) {_			configAttributes.setClasses(detectDefaultConfigurationClasses(configAttributes.getDeclaringClass()))__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,or,empty,and,link,is,generate,default,locations,returns,code,true,this,code,smart,context,loader,will,attempt,to,link,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,link,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,config,attributes,has,classes,is,generate,default,locations,config,attributes,set,classes,detect,default,configuration,classes,config,attributes,get,declaring,class
AnnotationConfigContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1516617801;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}._<p>If the <em>annotated classes</em> are {@code null} or empty and_{@link #isGenerateDefaultLocations()} returns {@code true}, this_{@code SmartContextLoader} will attempt to {@link_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@link ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified._@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (!configAttributes.hasClasses() && isGenerateDefaultLocations()) {_			configAttributes.setClasses(detectDefaultConfigurationClasses(configAttributes.getDeclaringClass()))__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,or,empty,and,link,is,generate,default,locations,returns,code,true,this,code,smart,context,loader,will,attempt,to,link,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,link,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,config,attributes,has,classes,is,generate,default,locations,config,attributes,set,classes,detect,default,configuration,classes,config,attributes,get,declaring,class
AnnotationConfigContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1328020251;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported._@see AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1335774711;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported._@see AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1337278668;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1349648958;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1355313310;<code>AnnotationConfigContextLoader</code> should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,context,loader,code,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1356735495;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1357119239;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1368482696;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1396374528;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1406214559;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1413848647;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1496242568;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1496955179;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1516617801;{@code AnnotationConfigContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported._@throws UnsupportedOperationException in this implementation_@see AbstractContextLoader#modifyLocations;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_				"AnnotationConfigContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,throws,unsupported,operation,exception,in,this,implementation,see,abstract,context,loader,modify,locations;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,context,loader,does,not,support,the,modify,locations,class,string,method
