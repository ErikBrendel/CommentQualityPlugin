commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the {@code min} boundary of the expected count range.  */ ;/**  * Return the {@code min} boundary of the expected count range.  */ public int getMinCount() {     return this.minCount. }
true;public;0;3;/**  * Return the {@code max} boundary of the expected count range.  */ ;/**  * Return the {@code max} boundary of the expected count range.  */ public int getMaxCount() {     return this.maxCount. }
true;public,static;0;3;/**  * Exactly once.  */ ;/**  * Exactly once.  */ public static ExpectedCount once() {     return new ExpectedCount(1, 1). }
true;public,static;0;3;/**  * Exactly twice.  */ ;/**  * Exactly twice.  */ public static ExpectedCount twice() {     return new ExpectedCount(2, 2). }
true;public,static;0;3;/**  * Many times (range of 1..Integer.MAX_VALUE).  */ ;/**  * Many times (range of 1..Integer.MAX_VALUE).  */ public static ExpectedCount manyTimes() {     return new ExpectedCount(1, Integer.MAX_VALUE). }
true;public,static;1;4;/**  * Exactly N times.  */ ;/**  * Exactly N times.  */ public static ExpectedCount times(int count) {     Assert.isTrue(count >= 1, "'count' must be >= 1").     return new ExpectedCount(count, count). }
true;public,static;1;4;/**  * At least {@code min} number of times.  */ ;/**  * At least {@code min} number of times.  */ public static ExpectedCount min(int min) {     Assert.isTrue(min >= 1, "'min' must be >= 1").     return new ExpectedCount(min, Integer.MAX_VALUE). }
true;public,static;1;4;/**  * At most {@code max} number of times.  */ ;/**  * At most {@code max} number of times.  */ public static ExpectedCount max(int max) {     Assert.isTrue(max >= 1, "'max' must be >= 1").     return new ExpectedCount(1, max). }
true;public,static;0;3;/**  * No calls expected at all, i.e. min=0 and max=0.  * @since 4.3.6  */ ;/**  * No calls expected at all, i.e. min=0 and max=0.  * @since 4.3.6  */ public static ExpectedCount never() {     return new ExpectedCount(0, 0). }
true;public,static;2;3;/**  * Between {@code min} and {@code max} number of times.  */ ;/**  * Between {@code min} and {@code max} number of times.  */ public static ExpectedCount between(int min, int max) {     return new ExpectedCount(min, max). }
