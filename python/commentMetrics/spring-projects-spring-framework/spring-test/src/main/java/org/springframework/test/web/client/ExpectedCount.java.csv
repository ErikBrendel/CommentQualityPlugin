# id;timestamp;commentText;codeText;commentWords;codeWords
ExpectedCount -> public int getMinCount();1456288439;Return the {@code min} boundary of the expected count range.;public int getMinCount() {_		return this.minCount__	};return,the,code,min,boundary,of,the,expected,count,range;public,int,get,min,count,return,this,min,count
ExpectedCount -> public int getMinCount();1465306936;Return the {@code min} boundary of the expected count range.;public int getMinCount() {_		return this.minCount__	};return,the,code,min,boundary,of,the,expected,count,range;public,int,get,min,count,return,this,min,count
ExpectedCount -> public int getMinCount();1480714077;Return the {@code min} boundary of the expected count range.;public int getMinCount() {_		return this.minCount__	};return,the,code,min,boundary,of,the,expected,count,range;public,int,get,min,count,return,this,min,count
ExpectedCount -> public int getMinCount();1484950333;Return the {@code min} boundary of the expected count range.;public int getMinCount() {_		return this.minCount__	};return,the,code,min,boundary,of,the,expected,count,range;public,int,get,min,count,return,this,min,count
ExpectedCount -> public int getMinCount();1530174524;Return the {@code min} boundary of the expected count range.;public int getMinCount() {_		return this.minCount__	};return,the,code,min,boundary,of,the,expected,count,range;public,int,get,min,count,return,this,min,count
ExpectedCount -> public static ExpectedCount once();1456288439;Exactly once.;public static ExpectedCount once() {_		return new ExpectedCount(1, 1)__	};exactly,once;public,static,expected,count,once,return,new,expected,count,1,1
ExpectedCount -> public static ExpectedCount once();1465306936;Exactly once.;public static ExpectedCount once() {_		return new ExpectedCount(1, 1)__	};exactly,once;public,static,expected,count,once,return,new,expected,count,1,1
ExpectedCount -> public static ExpectedCount once();1480714077;Exactly once.;public static ExpectedCount once() {_		return new ExpectedCount(1, 1)__	};exactly,once;public,static,expected,count,once,return,new,expected,count,1,1
ExpectedCount -> public static ExpectedCount once();1484950333;Exactly once.;public static ExpectedCount once() {_		return new ExpectedCount(1, 1)__	};exactly,once;public,static,expected,count,once,return,new,expected,count,1,1
ExpectedCount -> public static ExpectedCount once();1530174524;Exactly once.;public static ExpectedCount once() {_		return new ExpectedCount(1, 1)__	};exactly,once;public,static,expected,count,once,return,new,expected,count,1,1
ExpectedCount -> public static ExpectedCount twice();1480714077;Exactly twice.;public static ExpectedCount twice() {_		return new ExpectedCount(2, 2)__	};exactly,twice;public,static,expected,count,twice,return,new,expected,count,2,2
ExpectedCount -> public static ExpectedCount twice();1484950333;Exactly twice.;public static ExpectedCount twice() {_		return new ExpectedCount(2, 2)__	};exactly,twice;public,static,expected,count,twice,return,new,expected,count,2,2
ExpectedCount -> public static ExpectedCount twice();1530174524;Exactly twice.;public static ExpectedCount twice() {_		return new ExpectedCount(2, 2)__	};exactly,twice;public,static,expected,count,twice,return,new,expected,count,2,2
ExpectedCount -> public static ExpectedCount never();1484950333;No calls expected at all, i.e. min=0 and max=0._@since 4.3.6;public static ExpectedCount never() {_		return new ExpectedCount(0, 0)__	};no,calls,expected,at,all,i,e,min,0,and,max,0,since,4,3,6;public,static,expected,count,never,return,new,expected,count,0,0
ExpectedCount -> public static ExpectedCount never();1530174524;No calls expected at all, i.e. min=0 and max=0._@since 4.3.6;public static ExpectedCount never() {_		return new ExpectedCount(0, 0)__	};no,calls,expected,at,all,i,e,min,0,and,max,0,since,4,3,6;public,static,expected,count,never,return,new,expected,count,0,0
ExpectedCount -> private ExpectedCount(int minCount, int maxCount);1456288439;Private constructor._See static factory methods in this class.;private ExpectedCount(int minCount, int maxCount) {_		Assert.isTrue(minCount >= 1, "minCount >= 0 is required")__		Assert.isTrue(maxCount >= minCount, "maxCount >= minCount is required")__		this.minCount = minCount__		this.maxCount = maxCount__	};private,constructor,see,static,factory,methods,in,this,class;private,expected,count,int,min,count,int,max,count,assert,is,true,min,count,1,min,count,0,is,required,assert,is,true,max,count,min,count,max,count,min,count,is,required,this,min,count,min,count,this,max,count,max,count
ExpectedCount -> private ExpectedCount(int minCount, int maxCount);1465306936;Private constructor._See static factory methods in this class.;private ExpectedCount(int minCount, int maxCount) {_		Assert.isTrue(minCount >= 1, "minCount >= 0 is required")__		Assert.isTrue(maxCount >= minCount, "maxCount >= minCount is required")__		this.minCount = minCount__		this.maxCount = maxCount__	};private,constructor,see,static,factory,methods,in,this,class;private,expected,count,int,min,count,int,max,count,assert,is,true,min,count,1,min,count,0,is,required,assert,is,true,max,count,min,count,max,count,min,count,is,required,this,min,count,min,count,this,max,count,max,count
ExpectedCount -> private ExpectedCount(int minCount, int maxCount);1480714077;Private constructor._See static factory methods in this class.;private ExpectedCount(int minCount, int maxCount) {_		Assert.isTrue(minCount >= 1, "minCount >= 0 is required")__		Assert.isTrue(maxCount >= minCount, "maxCount >= minCount is required")__		this.minCount = minCount__		this.maxCount = maxCount__	};private,constructor,see,static,factory,methods,in,this,class;private,expected,count,int,min,count,int,max,count,assert,is,true,min,count,1,min,count,0,is,required,assert,is,true,max,count,min,count,max,count,min,count,is,required,this,min,count,min,count,this,max,count,max,count
ExpectedCount -> private ExpectedCount(int minCount, int maxCount);1484950333;Private constructor._See static factory methods in this class.;private ExpectedCount(int minCount, int maxCount) {_		Assert.isTrue(minCount >= 0, "minCount >= 0 is required")__		Assert.isTrue(maxCount >= minCount, "maxCount >= minCount is required")__		this.minCount = minCount__		this.maxCount = maxCount__	};private,constructor,see,static,factory,methods,in,this,class;private,expected,count,int,min,count,int,max,count,assert,is,true,min,count,0,min,count,0,is,required,assert,is,true,max,count,min,count,max,count,min,count,is,required,this,min,count,min,count,this,max,count,max,count
ExpectedCount -> private ExpectedCount(int minCount, int maxCount);1530174524;Private constructor._See static factory methods in this class.;private ExpectedCount(int minCount, int maxCount) {_		Assert.isTrue(minCount >= 0, "minCount >= 0 is required")__		Assert.isTrue(maxCount >= minCount, "maxCount >= minCount is required")__		this.minCount = minCount__		this.maxCount = maxCount__	};private,constructor,see,static,factory,methods,in,this,class;private,expected,count,int,min,count,int,max,count,assert,is,true,min,count,0,min,count,0,is,required,assert,is,true,max,count,min,count,max,count,min,count,is,required,this,min,count,min,count,this,max,count,max,count
ExpectedCount -> public static ExpectedCount manyTimes();1456288439;Many times (range of 1..Integer.MAX_VALUE).;public static ExpectedCount manyTimes() {_		return new ExpectedCount(1, Integer.MAX_VALUE)__	};many,times,range,of,1,integer;public,static,expected,count,many,times,return,new,expected,count,1,integer
ExpectedCount -> public static ExpectedCount manyTimes();1465306936;Many times (range of 1..Integer.MAX_VALUE).;public static ExpectedCount manyTimes() {_		return new ExpectedCount(1, Integer.MAX_VALUE)__	};many,times,range,of,1,integer;public,static,expected,count,many,times,return,new,expected,count,1,integer
ExpectedCount -> public static ExpectedCount manyTimes();1480714077;Many times (range of 1..Integer.MAX_VALUE).;public static ExpectedCount manyTimes() {_		return new ExpectedCount(1, Integer.MAX_VALUE)__	};many,times,range,of,1,integer;public,static,expected,count,many,times,return,new,expected,count,1,integer
ExpectedCount -> public static ExpectedCount manyTimes();1484950333;Many times (range of 1..Integer.MAX_VALUE).;public static ExpectedCount manyTimes() {_		return new ExpectedCount(1, Integer.MAX_VALUE)__	};many,times,range,of,1,integer;public,static,expected,count,many,times,return,new,expected,count,1,integer
ExpectedCount -> public static ExpectedCount manyTimes();1530174524;Many times (range of 1..Integer.MAX_VALUE).;public static ExpectedCount manyTimes() {_		return new ExpectedCount(1, Integer.MAX_VALUE)__	};many,times,range,of,1,integer;public,static,expected,count,many,times,return,new,expected,count,1,integer
ExpectedCount -> public static ExpectedCount min(int min);1456288439;At least {@code min} number of times.;public static ExpectedCount min(int min) {_		Assert.isTrue(min >= 1, "'min' must be >= 1")__		return new ExpectedCount(min, Integer.MAX_VALUE)__	};at,least,code,min,number,of,times;public,static,expected,count,min,int,min,assert,is,true,min,1,min,must,be,1,return,new,expected,count,min,integer
ExpectedCount -> public static ExpectedCount min(int min);1465306936;At least {@code min} number of times.;public static ExpectedCount min(int min) {_		Assert.isTrue(min >= 1, "'min' must be >= 1")__		return new ExpectedCount(min, Integer.MAX_VALUE)__	};at,least,code,min,number,of,times;public,static,expected,count,min,int,min,assert,is,true,min,1,min,must,be,1,return,new,expected,count,min,integer
ExpectedCount -> public static ExpectedCount min(int min);1480714077;At least {@code min} number of times.;public static ExpectedCount min(int min) {_		Assert.isTrue(min >= 1, "'min' must be >= 1")__		return new ExpectedCount(min, Integer.MAX_VALUE)__	};at,least,code,min,number,of,times;public,static,expected,count,min,int,min,assert,is,true,min,1,min,must,be,1,return,new,expected,count,min,integer
ExpectedCount -> public static ExpectedCount min(int min);1484950333;At least {@code min} number of times.;public static ExpectedCount min(int min) {_		Assert.isTrue(min >= 1, "'min' must be >= 1")__		return new ExpectedCount(min, Integer.MAX_VALUE)__	};at,least,code,min,number,of,times;public,static,expected,count,min,int,min,assert,is,true,min,1,min,must,be,1,return,new,expected,count,min,integer
ExpectedCount -> public static ExpectedCount min(int min);1530174524;At least {@code min} number of times.;public static ExpectedCount min(int min) {_		Assert.isTrue(min >= 1, "'min' must be >= 1")__		return new ExpectedCount(min, Integer.MAX_VALUE)__	};at,least,code,min,number,of,times;public,static,expected,count,min,int,min,assert,is,true,min,1,min,must,be,1,return,new,expected,count,min,integer
ExpectedCount -> public int getMaxCount();1456288439;Return the {@code max} boundary of the expected count range.;public int getMaxCount() {_		return this.maxCount__	};return,the,code,max,boundary,of,the,expected,count,range;public,int,get,max,count,return,this,max,count
ExpectedCount -> public int getMaxCount();1465306936;Return the {@code max} boundary of the expected count range.;public int getMaxCount() {_		return this.maxCount__	};return,the,code,max,boundary,of,the,expected,count,range;public,int,get,max,count,return,this,max,count
ExpectedCount -> public int getMaxCount();1480714077;Return the {@code max} boundary of the expected count range.;public int getMaxCount() {_		return this.maxCount__	};return,the,code,max,boundary,of,the,expected,count,range;public,int,get,max,count,return,this,max,count
ExpectedCount -> public int getMaxCount();1484950333;Return the {@code max} boundary of the expected count range.;public int getMaxCount() {_		return this.maxCount__	};return,the,code,max,boundary,of,the,expected,count,range;public,int,get,max,count,return,this,max,count
ExpectedCount -> public int getMaxCount();1530174524;Return the {@code max} boundary of the expected count range.;public int getMaxCount() {_		return this.maxCount__	};return,the,code,max,boundary,of,the,expected,count,range;public,int,get,max,count,return,this,max,count
ExpectedCount -> public static ExpectedCount max(int max);1456288439;At most {@code max} number of times.;public static ExpectedCount max(int max) {_		Assert.isTrue(max >= 1, "'max' must be >= 1")__		return new ExpectedCount(1, max)__	};at,most,code,max,number,of,times;public,static,expected,count,max,int,max,assert,is,true,max,1,max,must,be,1,return,new,expected,count,1,max
ExpectedCount -> public static ExpectedCount max(int max);1465306936;At most {@code max} number of times.;public static ExpectedCount max(int max) {_		Assert.isTrue(max >= 1, "'max' must be >= 1")__		return new ExpectedCount(1, max)__	};at,most,code,max,number,of,times;public,static,expected,count,max,int,max,assert,is,true,max,1,max,must,be,1,return,new,expected,count,1,max
ExpectedCount -> public static ExpectedCount max(int max);1480714077;At most {@code max} number of times.;public static ExpectedCount max(int max) {_		Assert.isTrue(max >= 1, "'max' must be >= 1")__		return new ExpectedCount(1, max)__	};at,most,code,max,number,of,times;public,static,expected,count,max,int,max,assert,is,true,max,1,max,must,be,1,return,new,expected,count,1,max
ExpectedCount -> public static ExpectedCount max(int max);1484950333;At most {@code max} number of times.;public static ExpectedCount max(int max) {_		Assert.isTrue(max >= 1, "'max' must be >= 1")__		return new ExpectedCount(1, max)__	};at,most,code,max,number,of,times;public,static,expected,count,max,int,max,assert,is,true,max,1,max,must,be,1,return,new,expected,count,1,max
ExpectedCount -> public static ExpectedCount max(int max);1530174524;At most {@code max} number of times.;public static ExpectedCount max(int max) {_		Assert.isTrue(max >= 1, "'max' must be >= 1")__		return new ExpectedCount(1, max)__	};at,most,code,max,number,of,times;public,static,expected,count,max,int,max,assert,is,true,max,1,max,must,be,1,return,new,expected,count,1,max
ExpectedCount -> public static ExpectedCount times(int count);1456288439;Exactly N times.;public static ExpectedCount times(int count) {_		Assert.isTrue(count >= 1, "'count' must be >= 1")__		return new ExpectedCount(count, count)__	};exactly,n,times;public,static,expected,count,times,int,count,assert,is,true,count,1,count,must,be,1,return,new,expected,count,count,count
ExpectedCount -> public static ExpectedCount times(int count);1465306936;Exactly N times.;public static ExpectedCount times(int count) {_		Assert.isTrue(count >= 1, "'count' must be >= 1")__		return new ExpectedCount(count, count)__	};exactly,n,times;public,static,expected,count,times,int,count,assert,is,true,count,1,count,must,be,1,return,new,expected,count,count,count
ExpectedCount -> public static ExpectedCount times(int count);1480714077;Exactly N times.;public static ExpectedCount times(int count) {_		Assert.isTrue(count >= 1, "'count' must be >= 1")__		return new ExpectedCount(count, count)__	};exactly,n,times;public,static,expected,count,times,int,count,assert,is,true,count,1,count,must,be,1,return,new,expected,count,count,count
ExpectedCount -> public static ExpectedCount times(int count);1484950333;Exactly N times.;public static ExpectedCount times(int count) {_		Assert.isTrue(count >= 1, "'count' must be >= 1")__		return new ExpectedCount(count, count)__	};exactly,n,times;public,static,expected,count,times,int,count,assert,is,true,count,1,count,must,be,1,return,new,expected,count,count,count
ExpectedCount -> public static ExpectedCount times(int count);1530174524;Exactly N times.;public static ExpectedCount times(int count) {_		Assert.isTrue(count >= 1, "'count' must be >= 1")__		return new ExpectedCount(count, count)__	};exactly,n,times;public,static,expected,count,times,int,count,assert,is,true,count,1,count,must,be,1,return,new,expected,count,count,count
ExpectedCount -> public static ExpectedCount between(int min, int max);1456288439;Between {@code min} and {@code max} number of times.;public static ExpectedCount between(int min, int max) {_		return new ExpectedCount(min, max)__	};between,code,min,and,code,max,number,of,times;public,static,expected,count,between,int,min,int,max,return,new,expected,count,min,max
ExpectedCount -> public static ExpectedCount between(int min, int max);1465306936;Between {@code min} and {@code max} number of times.;public static ExpectedCount between(int min, int max) {_		return new ExpectedCount(min, max)__	};between,code,min,and,code,max,number,of,times;public,static,expected,count,between,int,min,int,max,return,new,expected,count,min,max
ExpectedCount -> public static ExpectedCount between(int min, int max);1480714077;Between {@code min} and {@code max} number of times.;public static ExpectedCount between(int min, int max) {_		return new ExpectedCount(min, max)__	};between,code,min,and,code,max,number,of,times;public,static,expected,count,between,int,min,int,max,return,new,expected,count,min,max
ExpectedCount -> public static ExpectedCount between(int min, int max);1484950333;Between {@code min} and {@code max} number of times.;public static ExpectedCount between(int min, int max) {_		return new ExpectedCount(min, max)__	};between,code,min,and,code,max,number,of,times;public,static,expected,count,between,int,min,int,max,return,new,expected,count,min,max
ExpectedCount -> public static ExpectedCount between(int min, int max);1530174524;Between {@code min} and {@code max} number of times.;public static ExpectedCount between(int min, int max) {_		return new ExpectedCount(min, max)__	};between,code,min,and,code,max,number,of,times;public,static,expected,count,between,int,min,int,max,return,new,expected,count,min,max
