# id;timestamp;commentText;codeText;commentWords;codeWords
RunAfterTestClassCallbacks -> public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager);1328020251;Constructs a new <code>RunAfterTestClassCallbacks</code> statement.__@param next the next <code>Statement</code> in the execution chain_@param testContextManager the TestContextManager upon which to call_<code>afterTestClass()</code>;public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		this.next = next__		this.testContextManager = testContextManager__	};constructs,a,new,code,run,after,test,class,callbacks,code,statement,param,next,the,next,code,statement,code,in,the,execution,chain,param,test,context,manager,the,test,context,manager,upon,which,to,call,code,after,test,class,code;public,run,after,test,class,callbacks,statement,next,test,context,manager,test,context,manager,this,next,next,this,test,context,manager,test,context,manager
RunAfterTestClassCallbacks -> public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager);1356735495;Constructs a new {@code RunAfterTestClassCallbacks} statement.__@param next the next {@code Statement} in the execution chain_@param testContextManager the TestContextManager upon which to call_{@code afterTestClass()};public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		this.next = next__		this.testContextManager = testContextManager__	};constructs,a,new,code,run,after,test,class,callbacks,statement,param,next,the,next,code,statement,in,the,execution,chain,param,test,context,manager,the,test,context,manager,upon,which,to,call,code,after,test,class;public,run,after,test,class,callbacks,statement,next,test,context,manager,test,context,manager,this,next,next,this,test,context,manager,test,context,manager
RunAfterTestClassCallbacks -> public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager);1385412762;Constructs a new {@code RunAfterTestClassCallbacks} statement.__@param next the next {@code Statement} in the execution chain_@param testContextManager the TestContextManager upon which to call_{@code afterTestClass()};public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		this.next = next__		this.testContextManager = testContextManager__	};constructs,a,new,code,run,after,test,class,callbacks,statement,param,next,the,next,code,statement,in,the,execution,chain,param,test,context,manager,the,test,context,manager,upon,which,to,call,code,after,test,class;public,run,after,test,class,callbacks,statement,next,test,context,manager,test,context,manager,this,next,next,this,test,context,manager,test,context,manager
RunAfterTestClassCallbacks -> public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager);1385501137;Constructs a new {@code RunAfterTestClassCallbacks} statement.__@param next the next {@code Statement} in the execution chain_@param testContextManager the TestContextManager upon which to call_{@code afterTestClass()};public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		this.next = next__		this.testContextManager = testContextManager__	};constructs,a,new,code,run,after,test,class,callbacks,statement,param,next,the,next,code,statement,in,the,execution,chain,param,test,context,manager,the,test,context,manager,upon,which,to,call,code,after,test,class;public,run,after,test,class,callbacks,statement,next,test,context,manager,test,context,manager,this,next,next,this,test,context,manager,test,context,manager
RunAfterTestClassCallbacks -> public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager);1403683825;Constructs a new {@code RunAfterTestClassCallbacks} statement.__@param next the next {@code Statement} in the execution chain_@param testContextManager the TestContextManager upon which to call_{@code afterTestClass()};public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		this.next = next__		this.testContextManager = testContextManager__	};constructs,a,new,code,run,after,test,class,callbacks,statement,param,next,the,next,code,statement,in,the,execution,chain,param,test,context,manager,the,test,context,manager,upon,which,to,call,code,after,test,class;public,run,after,test,class,callbacks,statement,next,test,context,manager,test,context,manager,this,next,next,this,test,context,manager,test,context,manager
RunAfterTestClassCallbacks -> public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager);1413848647;Constructs a new {@code RunAfterTestClassCallbacks} statement.__@param next the next {@code Statement} in the execution chain_@param testContextManager the TestContextManager upon which to call_{@code afterTestClass()};public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		this.next = next__		this.testContextManager = testContextManager__	};constructs,a,new,code,run,after,test,class,callbacks,statement,param,next,the,next,code,statement,in,the,execution,chain,param,test,context,manager,the,test,context,manager,upon,which,to,call,code,after,test,class;public,run,after,test,class,callbacks,statement,next,test,context,manager,test,context,manager,this,next,next,this,test,context,manager,test,context,manager
RunAfterTestClassCallbacks -> public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager);1431344362;Construct a new {@code RunAfterTestClassCallbacks} statement.__@param next the next {@code Statement} in the execution chain_@param testContextManager the TestContextManager upon which to call_{@code afterTestClass()};public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		this.next = next__		this.testContextManager = testContextManager__	};construct,a,new,code,run,after,test,class,callbacks,statement,param,next,the,next,code,statement,in,the,execution,chain,param,test,context,manager,the,test,context,manager,upon,which,to,call,code,after,test,class;public,run,after,test,class,callbacks,statement,next,test,context,manager,test,context,manager,this,next,next,this,test,context,manager,test,context,manager
RunAfterTestClassCallbacks -> public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager);1431801000;Construct a new {@code RunAfterTestClassCallbacks} statement.__@param next the next {@code Statement} in the execution chain_@param testContextManager the TestContextManager upon which to call_{@code afterTestClass()};public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		this.next = next__		this.testContextManager = testContextManager__	};construct,a,new,code,run,after,test,class,callbacks,statement,param,next,the,next,code,statement,in,the,execution,chain,param,test,context,manager,the,test,context,manager,upon,which,to,call,code,after,test,class;public,run,after,test,class,callbacks,statement,next,test,context,manager,test,context,manager,this,next,next,this,test,context,manager,test,context,manager
RunAfterTestClassCallbacks -> public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager);1443471070;Construct a new {@code RunAfterTestClassCallbacks} statement._@param next the next {@code Statement} in the execution chain_@param testContextManager the TestContextManager upon which to call_{@code afterTestClass()};public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		this.next = next__		this.testContextManager = testContextManager__	};construct,a,new,code,run,after,test,class,callbacks,statement,param,next,the,next,code,statement,in,the,execution,chain,param,test,context,manager,the,test,context,manager,upon,which,to,call,code,after,test,class;public,run,after,test,class,callbacks,statement,next,test,context,manager,test,context,manager,this,next,next,this,test,context,manager,test,context,manager
RunAfterTestClassCallbacks -> public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager);1450547039;Construct a new {@code RunAfterTestClassCallbacks} statement._@param next the next {@code Statement} in the execution chain_@param testContextManager the TestContextManager upon which to call_{@code afterTestClass()};public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		this.next = next__		this.testContextManager = testContextManager__	};construct,a,new,code,run,after,test,class,callbacks,statement,param,next,the,next,code,statement,in,the,execution,chain,param,test,context,manager,the,test,context,manager,upon,which,to,call,code,after,test,class;public,run,after,test,class,callbacks,statement,next,test,context,manager,test,context,manager,this,next,next,this,test,context,manager,test,context,manager
RunAfterTestClassCallbacks -> public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager);1467730834;Construct a new {@code RunAfterTestClassCallbacks} statement._@param next the next {@code Statement} in the execution chain_@param testContextManager the TestContextManager upon which to call_{@code afterTestClass()};public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		this.next = next__		this.testContextManager = testContextManager__	};construct,a,new,code,run,after,test,class,callbacks,statement,param,next,the,next,code,statement,in,the,execution,chain,param,test,context,manager,the,test,context,manager,upon,which,to,call,code,after,test,class;public,run,after,test,class,callbacks,statement,next,test,context,manager,test,context,manager,this,next,next,this,test,context,manager,test,context,manager
RunAfterTestClassCallbacks -> @Override 	public void evaluate() throws Throwable;1328020251;Invokes the next {@link Statement} in the execution chain (typically an_instance of {@link org.junit.internal.runners.statements.RunAfters_RunAfters}), catching any exceptions thrown, and then calls_{@link TestContextManager#afterTestClass()}. If the call to_<code>afterTestClass()</code> throws an exception, it will also be_tracked. Multiple exceptions will be combined into a_{@link MultipleFailureException}.;@Override_	public void evaluate() throws Throwable {_		List<Throwable> errors = new ArrayList<Throwable>()__		try {_			this.next.evaluate()__		}_		catch (Throwable e) {_			errors.add(e)__		}__		try {_			this.testContextManager.afterTestClass()__		}_		catch (Exception e) {_			errors.add(e)__		}__		if (errors.isEmpty()) {_			return__		}_		if (errors.size() == 1) {_			throw errors.get(0)__		}_		throw new MultipleFailureException(errors)__	};invokes,the,next,link,statement,in,the,execution,chain,typically,an,instance,of,link,org,junit,internal,runners,statements,run,afters,run,afters,catching,any,exceptions,thrown,and,then,calls,link,test,context,manager,after,test,class,if,the,call,to,code,after,test,class,code,throws,an,exception,it,will,also,be,tracked,multiple,exceptions,will,be,combined,into,a,link,multiple,failure,exception;override,public,void,evaluate,throws,throwable,list,throwable,errors,new,array,list,throwable,try,this,next,evaluate,catch,throwable,e,errors,add,e,try,this,test,context,manager,after,test,class,catch,exception,e,errors,add,e,if,errors,is,empty,return,if,errors,size,1,throw,errors,get,0,throw,new,multiple,failure,exception,errors
RunAfterTestClassCallbacks -> @Override 	public void evaluate() throws Throwable;1356735495;Invokes the next {@link Statement} in the execution chain (typically an_instance of {@link org.junit.internal.runners.statements.RunAfters_RunAfters}), catching any exceptions thrown, and then calls_{@link TestContextManager#afterTestClass()}. If the call to_{@code afterTestClass()} throws an exception, it will also be_tracked. Multiple exceptions will be combined into a_{@link MultipleFailureException}.;@Override_	public void evaluate() throws Throwable {_		List<Throwable> errors = new ArrayList<Throwable>()__		try {_			this.next.evaluate()__		}_		catch (Throwable e) {_			errors.add(e)__		}__		try {_			this.testContextManager.afterTestClass()__		}_		catch (Exception e) {_			errors.add(e)__		}__		if (errors.isEmpty()) {_			return__		}_		if (errors.size() == 1) {_			throw errors.get(0)__		}_		throw new MultipleFailureException(errors)__	};invokes,the,next,link,statement,in,the,execution,chain,typically,an,instance,of,link,org,junit,internal,runners,statements,run,afters,run,afters,catching,any,exceptions,thrown,and,then,calls,link,test,context,manager,after,test,class,if,the,call,to,code,after,test,class,throws,an,exception,it,will,also,be,tracked,multiple,exceptions,will,be,combined,into,a,link,multiple,failure,exception;override,public,void,evaluate,throws,throwable,list,throwable,errors,new,array,list,throwable,try,this,next,evaluate,catch,throwable,e,errors,add,e,try,this,test,context,manager,after,test,class,catch,exception,e,errors,add,e,if,errors,is,empty,return,if,errors,size,1,throw,errors,get,0,throw,new,multiple,failure,exception,errors
RunAfterTestClassCallbacks -> @Override 	public void evaluate() throws Throwable;1385412762;Invokes the next {@link Statement} in the execution chain (typically an_instance of {@link org.junit.internal.runners.statements.RunAfters_RunAfters}), catching any exceptions thrown, and then calls_{@link TestContextManager#afterTestClass()}. If the call to_{@code afterTestClass()} throws an exception, it will also be_tracked. Multiple exceptions will be combined into a_{@link MultipleFailureException}.;@Override_	public void evaluate() throws Throwable {_		List<Throwable> errors = new ArrayList<Throwable>()__		try {_			this.next.evaluate()__		}_		catch (Throwable e) {_			errors.add(e)__		}__		try {_			this.testContextManager.afterTestClass()__		}_		catch (Exception e) {_			errors.add(e)__		}__		if (errors.isEmpty()) {_			return__		}_		if (errors.size() == 1) {_			throw errors.get(0)__		}_		throw new org.junit.internal.runners.model.MultipleFailureException(errors)__	};invokes,the,next,link,statement,in,the,execution,chain,typically,an,instance,of,link,org,junit,internal,runners,statements,run,afters,run,afters,catching,any,exceptions,thrown,and,then,calls,link,test,context,manager,after,test,class,if,the,call,to,code,after,test,class,throws,an,exception,it,will,also,be,tracked,multiple,exceptions,will,be,combined,into,a,link,multiple,failure,exception;override,public,void,evaluate,throws,throwable,list,throwable,errors,new,array,list,throwable,try,this,next,evaluate,catch,throwable,e,errors,add,e,try,this,test,context,manager,after,test,class,catch,exception,e,errors,add,e,if,errors,is,empty,return,if,errors,size,1,throw,errors,get,0,throw,new,org,junit,internal,runners,model,multiple,failure,exception,errors
RunAfterTestClassCallbacks -> @Override 	public void evaluate() throws Throwable;1385501137;Invokes the next {@link Statement} in the execution chain (typically an_instance of {@link org.junit.internal.runners.statements.RunAfters_RunAfters}), catching any exceptions thrown, and then calls_{@link TestContextManager#afterTestClass()}. If the call to_{@code afterTestClass()} throws an exception, it will also be_tracked. Multiple exceptions will be combined into a_{@link MultipleFailureException}.;@Override_	public void evaluate() throws Throwable {_		List<Throwable> errors = new ArrayList<Throwable>()__		try {_			this.next.evaluate()__		}_		catch (Throwable e) {_			errors.add(e)__		}__		try {_			this.testContextManager.afterTestClass()__		}_		catch (Exception e) {_			errors.add(e)__		}__		if (errors.isEmpty()) {_			return__		}_		if (errors.size() == 1) {_			throw errors.get(0)__		}_		throw new org.junit.internal.runners.model.MultipleFailureException(errors)__	};invokes,the,next,link,statement,in,the,execution,chain,typically,an,instance,of,link,org,junit,internal,runners,statements,run,afters,run,afters,catching,any,exceptions,thrown,and,then,calls,link,test,context,manager,after,test,class,if,the,call,to,code,after,test,class,throws,an,exception,it,will,also,be,tracked,multiple,exceptions,will,be,combined,into,a,link,multiple,failure,exception;override,public,void,evaluate,throws,throwable,list,throwable,errors,new,array,list,throwable,try,this,next,evaluate,catch,throwable,e,errors,add,e,try,this,test,context,manager,after,test,class,catch,exception,e,errors,add,e,if,errors,is,empty,return,if,errors,size,1,throw,errors,get,0,throw,new,org,junit,internal,runners,model,multiple,failure,exception,errors
RunAfterTestClassCallbacks -> @Override 	public void evaluate() throws Throwable;1403683825;Invokes the next {@link Statement} in the execution chain (typically an instance of_{@link org.junit.internal.runners.statements.RunAfters RunAfters}), catching any_exceptions thrown, and then calls {@link TestContextManager#afterTestClass()}. If_the call to {@code afterTestClass()} throws an exception, it will also be tracked._Multiple exceptions will be combined into a {@link MultipleFailureException}.;@Override_	public void evaluate() throws Throwable {_		List<Throwable> errors = new ArrayList<Throwable>()__		try {_			this.next.evaluate()__		}_		catch (Throwable e) {_			errors.add(e)__		}__		try {_			this.testContextManager.afterTestClass()__		}_		catch (Exception e) {_			errors.add(e)__		}__		if (errors.isEmpty()) {_			return__		}_		if (errors.size() == 1) {_			throw errors.get(0)__		}_		throw new MultipleFailureException(errors)__	};invokes,the,next,link,statement,in,the,execution,chain,typically,an,instance,of,link,org,junit,internal,runners,statements,run,afters,run,afters,catching,any,exceptions,thrown,and,then,calls,link,test,context,manager,after,test,class,if,the,call,to,code,after,test,class,throws,an,exception,it,will,also,be,tracked,multiple,exceptions,will,be,combined,into,a,link,multiple,failure,exception;override,public,void,evaluate,throws,throwable,list,throwable,errors,new,array,list,throwable,try,this,next,evaluate,catch,throwable,e,errors,add,e,try,this,test,context,manager,after,test,class,catch,exception,e,errors,add,e,if,errors,is,empty,return,if,errors,size,1,throw,errors,get,0,throw,new,multiple,failure,exception,errors
RunAfterTestClassCallbacks -> @Override 	public void evaluate() throws Throwable;1413848647;Invokes the next {@link Statement} in the execution chain (typically an instance of_{@link org.junit.internal.runners.statements.RunAfters RunAfters}), catching any_exceptions thrown, and then calls {@link TestContextManager#afterTestClass()}. If_the call to {@code afterTestClass()} throws an exception, it will also be tracked._Multiple exceptions will be combined into a {@link MultipleFailureException}.;@Override_	public void evaluate() throws Throwable {_		List<Throwable> errors = new ArrayList<Throwable>()__		try {_			this.next.evaluate()__		}_		catch (Throwable e) {_			errors.add(e)__		}__		try {_			this.testContextManager.afterTestClass()__		}_		catch (Exception e) {_			errors.add(e)__		}__		if (errors.isEmpty()) {_			return__		}_		if (errors.size() == 1) {_			throw errors.get(0)__		}_		throw new MultipleFailureException(errors)__	};invokes,the,next,link,statement,in,the,execution,chain,typically,an,instance,of,link,org,junit,internal,runners,statements,run,afters,run,afters,catching,any,exceptions,thrown,and,then,calls,link,test,context,manager,after,test,class,if,the,call,to,code,after,test,class,throws,an,exception,it,will,also,be,tracked,multiple,exceptions,will,be,combined,into,a,link,multiple,failure,exception;override,public,void,evaluate,throws,throwable,list,throwable,errors,new,array,list,throwable,try,this,next,evaluate,catch,throwable,e,errors,add,e,try,this,test,context,manager,after,test,class,catch,exception,e,errors,add,e,if,errors,is,empty,return,if,errors,size,1,throw,errors,get,0,throw,new,multiple,failure,exception,errors
RunAfterTestClassCallbacks -> @Override 	public void evaluate() throws Throwable;1431344362;Evaluate the next {@link Statement} in the execution chain (typically an instance of_{@link org.junit.internal.runners.statements.RunAfters RunAfters}), catching any_exceptions thrown, and then invoke {@link TestContextManager#afterTestClass()}._<p>If the invocation of {@code afterTestClass()} throws an exception, it will also_be tracked. Multiple exceptions will be combined into a {@link MultipleFailureException}.;@Override_	public void evaluate() throws Throwable {_		List<Throwable> errors = new ArrayList<Throwable>()__		try {_			this.next.evaluate()__		}_		catch (Throwable e) {_			errors.add(e)__		}__		try {_			this.testContextManager.afterTestClass()__		}_		catch (Exception e) {_			errors.add(e)__		}__		if (errors.isEmpty()) {_			return__		}_		if (errors.size() == 1) {_			throw errors.get(0)__		}_		throw new MultipleFailureException(errors)__	};evaluate,the,next,link,statement,in,the,execution,chain,typically,an,instance,of,link,org,junit,internal,runners,statements,run,afters,run,afters,catching,any,exceptions,thrown,and,then,invoke,link,test,context,manager,after,test,class,p,if,the,invocation,of,code,after,test,class,throws,an,exception,it,will,also,be,tracked,multiple,exceptions,will,be,combined,into,a,link,multiple,failure,exception;override,public,void,evaluate,throws,throwable,list,throwable,errors,new,array,list,throwable,try,this,next,evaluate,catch,throwable,e,errors,add,e,try,this,test,context,manager,after,test,class,catch,exception,e,errors,add,e,if,errors,is,empty,return,if,errors,size,1,throw,errors,get,0,throw,new,multiple,failure,exception,errors
RunAfterTestClassCallbacks -> @Override 	public void evaluate() throws Throwable;1431801000;Evaluate the next {@link Statement} in the execution chain (typically an instance of_{@link org.junit.internal.runners.statements.RunAfters RunAfters}), catching any_exceptions thrown, and then invoke {@link TestContextManager#afterTestClass()}._<p>If the invocation of {@code afterTestClass()} throws an exception, it will also_be tracked. Multiple exceptions will be combined into a {@link MultipleFailureException}.;@Override_	public void evaluate() throws Throwable {_		List<Throwable> errors = new ArrayList<Throwable>()__		try {_			this.next.evaluate()__		}_		catch (Throwable e) {_			errors.add(e)__		}__		try {_			this.testContextManager.afterTestClass()__		}_		catch (Exception e) {_			errors.add(e)__		}__		if (errors.isEmpty()) {_			return__		}_		if (errors.size() == 1) {_			throw errors.get(0)__		}_		throw new MultipleFailureException(errors)__	};evaluate,the,next,link,statement,in,the,execution,chain,typically,an,instance,of,link,org,junit,internal,runners,statements,run,afters,run,afters,catching,any,exceptions,thrown,and,then,invoke,link,test,context,manager,after,test,class,p,if,the,invocation,of,code,after,test,class,throws,an,exception,it,will,also,be,tracked,multiple,exceptions,will,be,combined,into,a,link,multiple,failure,exception;override,public,void,evaluate,throws,throwable,list,throwable,errors,new,array,list,throwable,try,this,next,evaluate,catch,throwable,e,errors,add,e,try,this,test,context,manager,after,test,class,catch,exception,e,errors,add,e,if,errors,is,empty,return,if,errors,size,1,throw,errors,get,0,throw,new,multiple,failure,exception,errors
RunAfterTestClassCallbacks -> @Override 	public void evaluate() throws Throwable;1443471070;Evaluate the next {@link Statement} in the execution chain (typically an instance of_{@link org.junit.internal.runners.statements.RunAfters RunAfters}), catching any_exceptions thrown, and then invoke {@link TestContextManager#afterTestClass()}._<p>If the invocation of {@code afterTestClass()} throws an exception, it will also_be tracked. Multiple exceptions will be combined into a {@link MultipleFailureException}.;@Override_	public void evaluate() throws Throwable {_		List<Throwable> errors = new ArrayList<Throwable>()__		try {_			this.next.evaluate()__		}_		catch (Throwable ex) {_			errors.add(ex)__		}__		try {_			this.testContextManager.afterTestClass()__		}_		catch (Throwable ex) {_			errors.add(ex)__		}__		if (errors.isEmpty()) {_			return__		}_		if (errors.size() == 1) {_			throw errors.get(0)__		}_		throw new MultipleFailureException(errors)__	};evaluate,the,next,link,statement,in,the,execution,chain,typically,an,instance,of,link,org,junit,internal,runners,statements,run,afters,run,afters,catching,any,exceptions,thrown,and,then,invoke,link,test,context,manager,after,test,class,p,if,the,invocation,of,code,after,test,class,throws,an,exception,it,will,also,be,tracked,multiple,exceptions,will,be,combined,into,a,link,multiple,failure,exception;override,public,void,evaluate,throws,throwable,list,throwable,errors,new,array,list,throwable,try,this,next,evaluate,catch,throwable,ex,errors,add,ex,try,this,test,context,manager,after,test,class,catch,throwable,ex,errors,add,ex,if,errors,is,empty,return,if,errors,size,1,throw,errors,get,0,throw,new,multiple,failure,exception,errors
RunAfterTestClassCallbacks -> @Override 	public void evaluate() throws Throwable;1450547039;Evaluate the next {@link Statement} in the execution chain (typically an instance of_{@link org.junit.internal.runners.statements.RunAfters RunAfters}), catching any_exceptions thrown, and then invoke {@link TestContextManager#afterTestClass()}._<p>If the invocation of {@code afterTestClass()} throws an exception, it will also_be tracked. Multiple exceptions will be combined into a {@link MultipleFailureException}.;@Override_	public void evaluate() throws Throwable {_		List<Throwable> errors = new ArrayList<Throwable>()__		try {_			this.next.evaluate()__		}_		catch (Throwable ex) {_			errors.add(ex)__		}__		try {_			this.testContextManager.afterTestClass()__		}_		catch (Throwable ex) {_			errors.add(ex)__		}__		MultipleFailureException.assertEmpty(errors)__	};evaluate,the,next,link,statement,in,the,execution,chain,typically,an,instance,of,link,org,junit,internal,runners,statements,run,afters,run,afters,catching,any,exceptions,thrown,and,then,invoke,link,test,context,manager,after,test,class,p,if,the,invocation,of,code,after,test,class,throws,an,exception,it,will,also,be,tracked,multiple,exceptions,will,be,combined,into,a,link,multiple,failure,exception;override,public,void,evaluate,throws,throwable,list,throwable,errors,new,array,list,throwable,try,this,next,evaluate,catch,throwable,ex,errors,add,ex,try,this,test,context,manager,after,test,class,catch,throwable,ex,errors,add,ex,multiple,failure,exception,assert,empty,errors
RunAfterTestClassCallbacks -> @Override 	public void evaluate() throws Throwable;1467730834;Evaluate the next {@link Statement} in the execution chain (typically an instance of_{@link org.junit.internal.runners.statements.RunAfters RunAfters}), catching any_exceptions thrown, and then invoke {@link TestContextManager#afterTestClass()}._<p>If the invocation of {@code afterTestClass()} throws an exception, it will also_be tracked. Multiple exceptions will be combined into a {@link MultipleFailureException}.;@Override_	public void evaluate() throws Throwable {_		List<Throwable> errors = new ArrayList<>()__		try {_			this.next.evaluate()__		}_		catch (Throwable ex) {_			errors.add(ex)__		}__		try {_			this.testContextManager.afterTestClass()__		}_		catch (Throwable ex) {_			errors.add(ex)__		}__		MultipleFailureException.assertEmpty(errors)__	};evaluate,the,next,link,statement,in,the,execution,chain,typically,an,instance,of,link,org,junit,internal,runners,statements,run,afters,run,afters,catching,any,exceptions,thrown,and,then,invoke,link,test,context,manager,after,test,class,p,if,the,invocation,of,code,after,test,class,throws,an,exception,it,will,also,be,tracked,multiple,exceptions,will,be,combined,into,a,link,multiple,failure,exception;override,public,void,evaluate,throws,throwable,list,throwable,errors,new,array,list,try,this,next,evaluate,catch,throwable,ex,errors,add,ex,try,this,test,context,manager,after,test,class,catch,throwable,ex,errors,add,ex,multiple,failure,exception,assert,empty,errors
