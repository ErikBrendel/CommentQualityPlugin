commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * Set the context path to use.  * <p>If the supplied value is {@code null} or empty, the first path  * segment of the request URL is assumed to be the context path.  * <p>Default is {@code ""}.  * @param contextPath the context path to use  * @return this builder for further customization  */ ;/**  * Set the context path to use.  * <p>If the supplied value is {@code null} or empty, the first path  * segment of the request URL is assumed to be the context path.  * <p>Default is {@code ""}.  * @param contextPath the context path to use  * @return this builder for further customization  */ @SuppressWarnings("unchecked") public T contextPath(String contextPath) {     this.contextPath = contextPath.     return (T) this. }
true;public;0;5;/**  * Specify that {@link MockMvc} should always be used regardless of  * what the request looks like.  * @return this builder for further customization  */ ;/**  * Specify that {@link MockMvc} should always be used regardless of  * what the request looks like.  * @return this builder for further customization  */ @SuppressWarnings("unchecked") public T alwaysUseMockMvc() {     this.alwaysUseMockMvc = true.     return (T) this. }
true;public;1;7;/**  * Add additional {@link WebRequestMatcher} instances that will ensure  * that {@link MockMvc} is used to process the request, if such a matcher  * matches against the web request.  * @param matchers additional {@code WebRequestMatcher} instances  * @return this builder for further customization  */ ;/**  * Add additional {@link WebRequestMatcher} instances that will ensure  * that {@link MockMvc} is used to process the request, if such a matcher  * matches against the web request.  * @param matchers additional {@code WebRequestMatcher} instances  * @return this builder for further customization  */ @SuppressWarnings("unchecked") public T useMockMvc(WebRequestMatcher... matchers) {     for (WebRequestMatcher matcher : matchers) {         this.requestMatchers.add(matcher).     }     return (T) this. }
true;public;1;5;/**  * Add additional {@link WebRequestMatcher} instances that return {@code true}  * if a supplied host matches &mdash. for example, {@code "example.com"} or  * {@code "example.com:8080"}.  * @param hosts additional hosts that ensure {@code MockMvc} gets invoked  * @return this builder for further customization  */ ;/**  * Add additional {@link WebRequestMatcher} instances that return {@code true}  * if a supplied host matches &mdash. for example, {@code "example.com"} or  * {@code "example.com:8080"}.  * @param hosts additional hosts that ensure {@code MockMvc} gets invoked  * @return this builder for further customization  */ @SuppressWarnings("unchecked") public T useMockMvcForHosts(String... hosts) {     this.requestMatchers.add(new HostRequestMatcher(hosts)).     return (T) this. }
true;protected,final;1;4;/**  * Create a new {@link WebConnection} that will use a {@link MockMvc}  * instance if one of the specified {@link WebRequestMatcher} instances  * matches.  * @param webClient the WebClient to use if none of the specified  * {@code WebRequestMatcher} instances matches (never {@code null})  * @return a new {@code WebConnection} that will use a {@code MockMvc}  * instance if one of the specified {@code WebRequestMatcher} matches  * @since 4.3  * @see #alwaysUseMockMvc()  * @see #useMockMvc(WebRequestMatcher...)  * @see #useMockMvcForHosts(String...)  */ ;/**  * Create a new {@link WebConnection} that will use a {@link MockMvc}  * instance if one of the specified {@link WebRequestMatcher} instances  * matches.  * @param webClient the WebClient to use if none of the specified  * {@code WebRequestMatcher} instances matches (never {@code null})  * @return a new {@code WebConnection} that will use a {@code MockMvc}  * instance if one of the specified {@code WebRequestMatcher} matches  * @since 4.3  * @see #alwaysUseMockMvc()  * @see #useMockMvc(WebRequestMatcher...)  * @see #useMockMvcForHosts(String...)  */ protected final WebConnection createConnection(WebClient webClient) {     Assert.notNull(webClient, "WebClient must not be null").     return createConnection(webClient, webClient.getWebConnection()). }
false;private;2;11;;private WebConnection createConnection(WebClient webClient, WebConnection defaultConnection) {     WebConnection connection = new MockMvcWebConnection(this.mockMvc, webClient, this.contextPath).     if (this.alwaysUseMockMvc) {         return connection.     }     List<DelegateWebConnection> delegates = new ArrayList<>(this.requestMatchers.size()).     for (WebRequestMatcher matcher : this.requestMatchers) {         delegates.add(new DelegateWebConnection(matcher, connection)).     }     return new DelegatingWebConnection(defaultConnection, delegates). }
