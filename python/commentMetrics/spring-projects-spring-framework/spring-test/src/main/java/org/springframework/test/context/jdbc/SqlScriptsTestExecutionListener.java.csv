# id;timestamp;commentText;codeText;commentWords;codeWords
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1403267603;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestMethod(), SqlGroup.class,_			Sql.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestClass(), SqlGroup.class,_				Sql.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,method,sql,group,class,sql,class,if,sql,annotations,is,empty,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,class,sql,group,class,sql,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1405524203;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestMethod(), SqlGroup.class,_			Sql.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestClass(), SqlGroup.class,_				Sql.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,method,sql,group,class,sql,class,if,sql,annotations,is,empty,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,class,sql,group,class,sql,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1405527406;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestMethod(), SqlGroup.class,_			Sql.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestClass(), SqlGroup.class,_				Sql.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,method,sql,group,class,sql,class,if,sql,annotations,is,empty,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,class,sql,group,class,sql,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1405527589;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestMethod(), SqlGroup.class,_			Sql.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestClass(), SqlGroup.class,_				Sql.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,method,sql,group,class,sql,class,if,sql,annotations,is,empty,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,class,sql,group,class,sql,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1405645143;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestMethod(), SqlGroup.class,_			Sql.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestClass(), SqlGroup.class,_				Sql.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,method,sql,group,class,sql,class,if,sql,annotations,is,empty,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,class,sql,group,class,sql,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1405886611;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestMethod(), SqlGroup.class,_			Sql.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestClass(), SqlGroup.class,_				Sql.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,method,sql,group,class,sql,class,if,sql,annotations,is,empty,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,class,sql,group,class,sql,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1406218418;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestMethod(), SqlGroup.class,_			Sql.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestClass(), SqlGroup.class,_				Sql.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,method,sql,group,class,sql,class,if,sql,annotations,is,empty,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,class,sql,group,class,sql,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1408048216;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestMethod(), SqlGroup.class,_			Sql.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestClass(), SqlGroup.class,_				Sql.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,method,sql,group,class,sql,class,if,sql,annotations,is,empty,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,class,sql,group,class,sql,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1409498224;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestMethod(), SqlGroup.class,_			Sql.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestClass(), SqlGroup.class,_				Sql.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,method,sql,group,class,sql,class,if,sql,annotations,is,empty,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,class,sql,group,class,sql,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1413848647;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestMethod(), SqlGroup.class,_			Sql.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestClass(), SqlGroup.class,_				Sql.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,method,sql,group,class,sql,class,if,sql,annotations,is,empty,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,class,sql,group,class,sql,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1432246071;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestMethod(), SqlGroup.class,_			Sql.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotationUtils.getRepeatableAnnotation(testContext.getTestClass(), SqlGroup.class,_				Sql.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,method,sql,group,class,sql,class,if,sql,annotations,is,empty,sql,annotations,annotation,utils,get,repeatable,annotation,test,context,get,test,class,sql,group,class,sql,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1434756099;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotationUtils.getRepeatableAnnotations(testContext.getTestMethod(), SqlGroup.class,_			Sql.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotationUtils.getRepeatableAnnotations(testContext.getTestClass(), SqlGroup.class,_				Sql.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotation,utils,get,repeatable,annotations,test,context,get,test,method,sql,group,class,sql,class,if,sql,annotations,is,empty,sql,annotations,annotation,utils,get,repeatable,annotations,test,context,get,test,class,sql,group,class,sql,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1434757546;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotationUtils.getRepeatableAnnotations(testContext.getTestMethod(), Sql.class,_			SqlGroup.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotationUtils.getRepeatableAnnotations(testContext.getTestClass(), Sql.class,_				SqlGroup.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotation,utils,get,repeatable,annotations,test,context,get,test,method,sql,class,sql,group,class,if,sql,annotations,is,empty,sql,annotations,annotation,utils,get,repeatable,annotations,test,context,get,test,class,sql,class,sql,group,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1435085100;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotationUtils.getRepeatableAnnotations(testContext.getTestMethod(), Sql.class,_			SqlGroup.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotationUtils.getRepeatableAnnotations(testContext.getTestClass(), Sql.class,_				SqlGroup.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotation,utils,get,repeatable,annotations,test,context,get,test,method,sql,class,sql,group,class,if,sql,annotations,is,empty,sql,annotations,annotation,utils,get,repeatable,annotations,test,context,get,test,class,sql,class,sql,group,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1458863502;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(testContext.getTestMethod(), Sql.class,_			SqlGroup.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(testContext.getTestClass(), Sql.class,_				SqlGroup.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotated,element,utils,get,merged,repeatable,annotations,test,context,get,test,method,sql,class,sql,group,class,if,sql,annotations,is,empty,sql,annotations,annotated,element,utils,get,merged,repeatable,annotations,test,context,get,test,class,sql,class,sql,group,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1459798201;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(testContext.getTestMethod(), Sql.class,_			SqlGroup.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(testContext.getTestClass(), Sql.class,_				SqlGroup.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotated,element,utils,get,merged,repeatable,annotations,test,context,get,test,method,sql,class,sql,group,class,if,sql,annotations,is,empty,sql,annotations,annotated,element,utils,get,merged,repeatable,annotations,test,context,get,test,class,sql,class,sql,group,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1467992320;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(testContext.getTestMethod(), Sql.class,_			SqlGroup.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(testContext.getTestClass(), Sql.class,_				SqlGroup.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotated,element,utils,get,merged,repeatable,annotations,test,context,get,test,method,sql,class,sql,group,class,if,sql,annotations,is,empty,sql,annotations,annotated,element,utils,get,merged,repeatable,annotations,test,context,get,test,class,sql,class,sql,group,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1468334463;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(testContext.getTestMethod(), Sql.class,_			SqlGroup.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(testContext.getTestClass(), Sql.class,_				SqlGroup.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotated,element,utils,get,merged,repeatable,annotations,test,context,get,test,method,sql,class,sql,group,class,if,sql,annotations,is,empty,sql,annotations,annotated,element,utils,get,merged,repeatable,annotations,test,context,get,test,class,sql,class,sql,group,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1470831642;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(testContext.getTestMethod(), Sql.class,_			SqlGroup.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(testContext.getTestClass(), Sql.class,_				SqlGroup.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotated,element,utils,get,merged,repeatable,annotations,test,context,get,test,method,sql,class,sql,group,class,if,sql,annotations,is,empty,sql,annotations,annotated,element,utils,get,merged,repeatable,annotations,test,context,get,test,class,sql,class,sql,group,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1470840141;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(_				testContext.getTestMethod(), Sql.class, SqlGroup.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(_					testContext.getTestClass(), Sql.class, SqlGroup.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotated,element,utils,get,merged,repeatable,annotations,test,context,get,test,method,sql,class,sql,group,class,if,sql,annotations,is,empty,sql,annotations,annotated,element,utils,get,merged,repeatable,annotations,test,context,get,test,class,sql,class,sql,group,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1506097334;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(_				testContext.getTestMethod(), Sql.class, SqlGroup.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(_					testContext.getTestClass(), Sql.class, SqlGroup.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotated,element,utils,get,merged,repeatable,annotations,test,context,get,test,method,sql,class,sql,group,class,if,sql,annotations,is,empty,sql,annotations,annotated,element,utils,get,merged,repeatable,annotations,test,context,get,test,class,sql,class,sql,group,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception;1519295386;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} and {@link ExecutionPhase}.;private void executeSqlScripts(TestContext testContext, ExecutionPhase executionPhase) throws Exception {_		boolean classLevel = false___		Set<Sql> sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(_				testContext.getTestMethod(), Sql.class, SqlGroup.class)__		if (sqlAnnotations.isEmpty()) {_			sqlAnnotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(_					testContext.getTestClass(), Sql.class, SqlGroup.class)__			if (!sqlAnnotations.isEmpty()) {_				classLevel = true__			}_		}__		for (Sql sql : sqlAnnotations) {_			executeSqlScripts(sql, executionPhase, testContext, classLevel)__		}_	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,and,link,execution,phase;private,void,execute,sql,scripts,test,context,test,context,execution,phase,execution,phase,throws,exception,boolean,class,level,false,set,sql,sql,annotations,annotated,element,utils,get,merged,repeatable,annotations,test,context,get,test,method,sql,class,sql,group,class,if,sql,annotations,is,empty,sql,annotations,annotated,element,utils,get,merged,repeatable,annotations,test,context,get,test,class,sql,class,sql,group,class,if,sql,annotations,is,empty,class,level,true,for,sql,sql,sql,annotations,execute,sql,scripts,sql,execution,phase,test,context,class,level
SqlScriptsTestExecutionListener -> @SuppressWarnings("serial") 	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1403267603;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the_{@link Sql#requireNewTransaction requireNewTransaction}_flag.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;@SuppressWarnings("serial")_	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", sql,_				executionPhase, testContext))__		}__		if (executionPhase != sql.executionPhase()) {_			return__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(sql.encoding())__		populator.setSeparator(sql.separator())__		populator.setCommentPrefix(sql.commentPrefix())__		populator.setBlockCommentStartDelimiter(sql.blockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(sql.blockCommentEndDelimiter())__		populator.setContinueOnError(sql.continueOnError())__		populator.setIgnoreFailedDrops(sql.ignoreFailedDrops())___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		populator.setScripts(TestContextResourceUtils.convertToResources(testContext.getApplicationContext(), scripts))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scripts))__		}__		final DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, sql.dataSource())__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, sql.transactionManager())___		int propagation = sql.requireNewTransaction() ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_				: TransactionDefinition.PROPAGATION_REQUIRED___		TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_			testContext, new DefaultTransactionAttribute(propagation))___		new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() {__			@Override_			public void doInTransactionWithoutResult(TransactionStatus status) {_				populator.execute(dataSource)__			}__		})__	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,link,sql,require,new,transaction,require,new,transaction,flag,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;suppress,warnings,serial,private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,sql,execution,phase,test,context,if,execution,phase,sql,execution,phase,return,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,sql,encoding,populator,set,separator,sql,separator,populator,set,comment,prefix,sql,comment,prefix,populator,set,block,comment,start,delimiter,sql,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,sql,block,comment,end,delimiter,populator,set,continue,on,error,sql,continue,on,error,populator,set,ignore,failed,drops,sql,ignore,failed,drops,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,populator,set,scripts,test,context,resource,utils,convert,to,resources,test,context,get,application,context,scripts,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,scripts,final,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,sql,data,source,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,sql,transaction,manager,int,propagation,sql,require,new,transaction,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,new,transaction,callback,without,result,override,public,void,do,in,transaction,without,result,transaction,status,status,populator,execute,data,source
SqlScriptsTestExecutionListener -> @SuppressWarnings("serial") 	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1405524203;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the_{@link Sql#requireNewTransaction requireNewTransaction}_flag.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;@SuppressWarnings("serial")_	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		populator.setScripts(TestContextResourceUtils.convertToResources(testContext.getApplicationContext(), scripts))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scripts))__		}__		final DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext,_			mergedSqlConfig.getDataSource())__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, mergedSqlConfig.getTransactionManager())___		int propagation = (mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED) ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_				: TransactionDefinition.PROPAGATION_REQUIRED___		TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_			testContext, new DefaultTransactionAttribute(propagation))___		new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() {__			@Override_			public void doInTransactionWithoutResult(TransactionStatus status) {_				populator.execute(dataSource)__			}__		})__	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,link,sql,require,new,transaction,require,new,transaction,flag,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;suppress,warnings,serial,private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,populator,set,scripts,test,context,resource,utils,convert,to,resources,test,context,get,application,context,scripts,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,scripts,final,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,merged,sql,config,get,data,source,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,merged,sql,config,get,transaction,manager,int,propagation,merged,sql,config,get,transaction,mode,transaction,mode,isolated,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,new,transaction,callback,without,result,override,public,void,do,in,transaction,without,result,transaction,status,status,populator,execute,data,source
SqlScriptsTestExecutionListener -> @SuppressWarnings("serial") 	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1405527406;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the_{@link Sql#requireNewTransaction requireNewTransaction}_flag.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;@SuppressWarnings("serial")_	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		populator.setScripts(TestContextResourceUtils.convertToResources(testContext.getApplicationContext(), scripts))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scripts))__		}__		final DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext,_			mergedSqlConfig.getDataSource())__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, mergedSqlConfig.getTransactionManager())___		int propagation = (mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED) ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_				: TransactionDefinition.PROPAGATION_REQUIRED___		TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_			testContext, new DefaultTransactionAttribute(propagation))___		new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() {__			@Override_			public void doInTransactionWithoutResult(TransactionStatus status) {_				populator.execute(dataSource)__			}__		})__	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,link,sql,require,new,transaction,require,new,transaction,flag,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;suppress,warnings,serial,private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,populator,set,scripts,test,context,resource,utils,convert,to,resources,test,context,get,application,context,scripts,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,scripts,final,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,merged,sql,config,get,data,source,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,merged,sql,config,get,transaction,manager,int,propagation,merged,sql,config,get,transaction,mode,transaction,mode,isolated,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,new,transaction,callback,without,result,override,public,void,do,in,transaction,without,result,transaction,status,status,populator,execute,data,source
SqlScriptsTestExecutionListener -> @SuppressWarnings("serial") 	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1405527589;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;@SuppressWarnings("serial")_	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		populator.setScripts(TestContextResourceUtils.convertToResources(testContext.getApplicationContext(), scripts))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scripts))__		}__		final DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext,_			mergedSqlConfig.getDataSource())__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, mergedSqlConfig.getTransactionManager())___		int propagation = (mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED) ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_				: TransactionDefinition.PROPAGATION_REQUIRED___		TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_			testContext, new DefaultTransactionAttribute(propagation))___		new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() {__			@Override_			public void doInTransactionWithoutResult(TransactionStatus status) {_				populator.execute(dataSource)__			}__		})__	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;suppress,warnings,serial,private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,populator,set,scripts,test,context,resource,utils,convert,to,resources,test,context,get,application,context,scripts,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,scripts,final,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,merged,sql,config,get,data,source,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,merged,sql,config,get,transaction,manager,int,propagation,merged,sql,config,get,transaction,mode,transaction,mode,isolated,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,new,transaction,callback,without,result,override,public,void,do,in,transaction,without,result,transaction,status,status,populator,execute,data,source
SqlScriptsTestExecutionListener -> @SuppressWarnings("serial") 	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1405645143;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;@SuppressWarnings("serial")_	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		populator.setScripts(TestContextResourceUtils.convertToResources(testContext.getApplicationContext(), scripts))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scripts))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, tmName)__		final boolean newTxRequired = mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED___		if (transactionManager == null) {_			if (newTxRequired) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "cannot execute SQL scripts using Transaction Mode "_						+ "[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))__			}__			if (dataSource == null) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "supply at least a DataSource or PlatformTransactionManager.", testContext))__			}__			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)___			_			if ((dataSource != null) && (dataSourceFromTxMgr != null) && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "the configured DataSource [%s] (named '%s') is not the one associated "_						+ "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_					dsName, transactionManager.getClass().getName(), tmName))__			}__			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				if (dataSource == null) {_					throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_							+ "could not obtain DataSource from transaction manager [%s] (named '%s').", testContext,_						transactionManager.getClass().getName(), tmName))__				}_			}__			final DataSource finalDataSource = dataSource__			int propagation = newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_					: TransactionDefinition.PROPAGATION_REQUIRED___			TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_				testContext, new DefaultTransactionAttribute(propagation))___			new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() {__				@Override_				public void doInTransactionWithoutResult(TransactionStatus status) {_					populator.execute(finalDataSource)__				}_			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;suppress,warnings,serial,private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,populator,set,scripts,test,context,resource,utils,convert,to,resources,test,context,get,application,context,scripts,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,scripts,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,final,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,transaction,manager,null,if,new,tx,required,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,transaction,manager,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,transaction,manager,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,transaction,manager,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,new,transaction,callback,without,result,override,public,void,do,in,transaction,without,result,transaction,status,status,populator,execute,final,data,source
SqlScriptsTestExecutionListener -> @SuppressWarnings("serial") 	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1405886611;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;@SuppressWarnings("serial")_	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		populator.setScripts(TestContextResourceUtils.convertToResources(testContext.getApplicationContext(), scripts))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scripts))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, tmName)__		final boolean newTxRequired = mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED___		if (transactionManager == null) {_			if (newTxRequired) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "cannot execute SQL scripts using Transaction Mode "_						+ "[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))__			}__			if (dataSource == null) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "supply at least a DataSource or PlatformTransactionManager.", testContext))__			}__			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)___			_			if ((dataSource != null) && (dataSourceFromTxMgr != null) && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "the configured DataSource [%s] (named '%s') is not the one associated "_						+ "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_					dsName, transactionManager.getClass().getName(), tmName))__			}__			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				if (dataSource == null) {_					throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_							+ "could not obtain DataSource from transaction manager [%s] (named '%s').", testContext,_						transactionManager.getClass().getName(), tmName))__				}_			}__			final DataSource finalDataSource = dataSource__			int propagation = newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_					: TransactionDefinition.PROPAGATION_REQUIRED___			TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_				testContext, new DefaultTransactionAttribute(propagation))___			new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() {__				@Override_				public void doInTransactionWithoutResult(TransactionStatus status) {_					populator.execute(finalDataSource)__				}_			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;suppress,warnings,serial,private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,populator,set,scripts,test,context,resource,utils,convert,to,resources,test,context,get,application,context,scripts,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,scripts,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,final,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,transaction,manager,null,if,new,tx,required,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,transaction,manager,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,transaction,manager,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,transaction,manager,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,new,transaction,callback,without,result,override,public,void,do,in,transaction,without,result,transaction,status,status,populator,execute,final,data,source
SqlScriptsTestExecutionListener -> @SuppressWarnings("serial") 	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1406218418;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;@SuppressWarnings("serial")_	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		populator.setScripts(TestContextResourceUtils.convertToResources(testContext.getApplicationContext(), scripts))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scripts))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, tmName)__		final boolean newTxRequired = mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED___		if (transactionManager == null) {_			if (newTxRequired) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "cannot execute SQL scripts using Transaction Mode "_						+ "[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))__			}__			if (dataSource == null) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "supply at least a DataSource or PlatformTransactionManager.", testContext))__			}__			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)___			_			if ((dataSource != null) && (dataSourceFromTxMgr != null) && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "the configured DataSource [%s] (named '%s') is not the one associated "_						+ "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_					dsName, transactionManager.getClass().getName(), tmName))__			}__			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				if (dataSource == null) {_					throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_							+ "could not obtain DataSource from transaction manager [%s] (named '%s').", testContext,_						transactionManager.getClass().getName(), tmName))__				}_			}__			final DataSource finalDataSource = dataSource__			int propagation = newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_					: TransactionDefinition.PROPAGATION_REQUIRED___			TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_				testContext, new DefaultTransactionAttribute(propagation))___			new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() {__				@Override_				public void doInTransactionWithoutResult(TransactionStatus status) {_					populator.execute(finalDataSource)__				}_			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;suppress,warnings,serial,private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,populator,set,scripts,test,context,resource,utils,convert,to,resources,test,context,get,application,context,scripts,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,scripts,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,final,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,transaction,manager,null,if,new,tx,required,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,transaction,manager,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,transaction,manager,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,transaction,manager,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,new,transaction,callback,without,result,override,public,void,do,in,transaction,without,result,transaction,status,status,populator,execute,final,data,source
SqlScriptsTestExecutionListener -> @SuppressWarnings("serial") 	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1408048216;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;@SuppressWarnings("serial")_	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		populator.setScripts(TestContextResourceUtils.convertToResources(testContext.getApplicationContext(), scripts))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scripts))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, tmName)__		final boolean newTxRequired = mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED___		if (transactionManager == null) {_			if (newTxRequired) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "cannot execute SQL scripts using Transaction Mode "_						+ "[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))__			}__			if (dataSource == null) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "supply at least a DataSource or PlatformTransactionManager.", testContext))__			}__			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)___			_			if ((dataSource != null) && (dataSourceFromTxMgr != null) && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "the configured DataSource [%s] (named '%s') is not the one associated "_						+ "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_					dsName, transactionManager.getClass().getName(), tmName))__			}__			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				if (dataSource == null) {_					throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_							+ "could not obtain DataSource from transaction manager [%s] (named '%s').", testContext,_						transactionManager.getClass().getName(), tmName))__				}_			}__			final DataSource finalDataSource = dataSource__			int propagation = newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_					: TransactionDefinition.PROPAGATION_REQUIRED___			TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_				testContext, new DefaultTransactionAttribute(propagation))___			new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() {__				@Override_				public void doInTransactionWithoutResult(TransactionStatus status) {_					populator.execute(finalDataSource)__				}_			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;suppress,warnings,serial,private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,populator,set,scripts,test,context,resource,utils,convert,to,resources,test,context,get,application,context,scripts,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,scripts,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,final,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,transaction,manager,null,if,new,tx,required,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,transaction,manager,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,transaction,manager,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,transaction,manager,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,new,transaction,callback,without,result,override,public,void,do,in,transaction,without,result,transaction,status,status,populator,execute,final,data,source
SqlScriptsTestExecutionListener -> @SuppressWarnings("serial") 	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1409498224;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;@SuppressWarnings("serial")_	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		populator.setScripts(TestContextResourceUtils.convertToResources(testContext.getApplicationContext(), scripts))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scripts))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, tmName)__		final boolean newTxRequired = mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED___		if (transactionManager == null) {_			if (newTxRequired) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "cannot execute SQL scripts using Transaction Mode "_						+ "[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))__			}__			if (dataSource == null) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "supply at least a DataSource or PlatformTransactionManager.", testContext))__			}__			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)___			_			if ((dataSource != null) && (dataSourceFromTxMgr != null) && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "the configured DataSource [%s] (named '%s') is not the one associated "_						+ "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_					dsName, transactionManager.getClass().getName(), tmName))__			}__			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				if (dataSource == null) {_					throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_							+ "could not obtain DataSource from transaction manager [%s] (named '%s').", testContext,_						transactionManager.getClass().getName(), tmName))__				}_			}__			final DataSource finalDataSource = dataSource__			int propagation = newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_					: TransactionDefinition.PROPAGATION_REQUIRED___			TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_				testContext, new DefaultTransactionAttribute(propagation))___			new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() {__				@Override_				public void doInTransactionWithoutResult(TransactionStatus status) {_					populator.execute(finalDataSource)__				}_			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;suppress,warnings,serial,private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,populator,set,scripts,test,context,resource,utils,convert,to,resources,test,context,get,application,context,scripts,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,scripts,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,final,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,transaction,manager,null,if,new,tx,required,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,transaction,manager,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,transaction,manager,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,transaction,manager,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,new,transaction,callback,without,result,override,public,void,do,in,transaction,without,result,transaction,status,status,populator,execute,final,data,source
SqlScriptsTestExecutionListener -> @SuppressWarnings("serial") 	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1413848647;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;@SuppressWarnings("serial")_	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		populator.setScripts(TestContextResourceUtils.convertToResources(testContext.getApplicationContext(), scripts))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scripts))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, tmName)__		final boolean newTxRequired = mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED___		if (transactionManager == null) {_			if (newTxRequired) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "cannot execute SQL scripts using Transaction Mode "_						+ "[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))__			}__			if (dataSource == null) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "supply at least a DataSource or PlatformTransactionManager.", testContext))__			}__			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)___			_			if ((dataSource != null) && (dataSourceFromTxMgr != null) && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "the configured DataSource [%s] (named '%s') is not the one associated "_						+ "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_					dsName, transactionManager.getClass().getName(), tmName))__			}__			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				if (dataSource == null) {_					throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_							+ "could not obtain DataSource from transaction manager [%s] (named '%s').", testContext,_						transactionManager.getClass().getName(), tmName))__				}_			}__			final DataSource finalDataSource = dataSource__			int propagation = newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_					: TransactionDefinition.PROPAGATION_REQUIRED___			TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_				testContext, new DefaultTransactionAttribute(propagation))___			new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() {__				@Override_				public void doInTransactionWithoutResult(TransactionStatus status) {_					populator.execute(finalDataSource)__				}_			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;suppress,warnings,serial,private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,populator,set,scripts,test,context,resource,utils,convert,to,resources,test,context,get,application,context,scripts,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,scripts,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,final,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,transaction,manager,null,if,new,tx,required,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,transaction,manager,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,transaction,manager,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,transaction,manager,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,new,transaction,callback,without,result,override,public,void,do,in,transaction,without,result,transaction,status,status,populator,execute,final,data,source
SqlScriptsTestExecutionListener -> @SuppressWarnings("serial") 	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1432246071;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;@SuppressWarnings("serial")_	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		populator.setScripts(TestContextResourceUtils.convertToResources(testContext.getApplicationContext(), scripts))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scripts))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, tmName)__		final boolean newTxRequired = mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED___		if (transactionManager == null) {_			if (newTxRequired) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "cannot execute SQL scripts using Transaction Mode "_						+ "[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))__			}__			if (dataSource == null) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "supply at least a DataSource or PlatformTransactionManager.", testContext))__			}__			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)___			_			if ((dataSource != null) && (dataSourceFromTxMgr != null) && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "the configured DataSource [%s] (named '%s') is not the one associated "_						+ "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_					dsName, transactionManager.getClass().getName(), tmName))__			}__			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				if (dataSource == null) {_					throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_							+ "could not obtain DataSource from transaction manager [%s] (named '%s').", testContext,_						transactionManager.getClass().getName(), tmName))__				}_			}__			final DataSource finalDataSource = dataSource__			int propagation = newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_					: TransactionDefinition.PROPAGATION_REQUIRED___			TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_				testContext, new DefaultTransactionAttribute(propagation))___			new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() {__				@Override_				public void doInTransactionWithoutResult(TransactionStatus status) {_					populator.execute(finalDataSource)__				}_			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;suppress,warnings,serial,private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,populator,set,scripts,test,context,resource,utils,convert,to,resources,test,context,get,application,context,scripts,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,scripts,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,final,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,transaction,manager,null,if,new,tx,required,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,transaction,manager,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,transaction,manager,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,transaction,manager,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,new,transaction,callback,without,result,override,public,void,do,in,transaction,without,result,transaction,status,status,populator,execute,final,data,source
SqlScriptsTestExecutionListener -> @SuppressWarnings("serial") 	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1434756099;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;@SuppressWarnings("serial")_	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		populator.setScripts(TestContextResourceUtils.convertToResources(testContext.getApplicationContext(), scripts))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scripts))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, tmName)__		final boolean newTxRequired = mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED___		if (transactionManager == null) {_			if (newTxRequired) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "cannot execute SQL scripts using Transaction Mode "_						+ "[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))__			}__			if (dataSource == null) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "supply at least a DataSource or PlatformTransactionManager.", testContext))__			}__			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)___			_			if ((dataSource != null) && (dataSourceFromTxMgr != null) && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "the configured DataSource [%s] (named '%s') is not the one associated "_						+ "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_					dsName, transactionManager.getClass().getName(), tmName))__			}__			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				if (dataSource == null) {_					throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_							+ "could not obtain DataSource from transaction manager [%s] (named '%s').", testContext,_						transactionManager.getClass().getName(), tmName))__				}_			}__			final DataSource finalDataSource = dataSource__			int propagation = newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_					: TransactionDefinition.PROPAGATION_REQUIRED___			TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_				testContext, new DefaultTransactionAttribute(propagation))___			new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() {__				@Override_				public void doInTransactionWithoutResult(TransactionStatus status) {_					populator.execute(finalDataSource)__				}_			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;suppress,warnings,serial,private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,populator,set,scripts,test,context,resource,utils,convert,to,resources,test,context,get,application,context,scripts,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,scripts,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,final,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,transaction,manager,null,if,new,tx,required,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,transaction,manager,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,transaction,manager,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,transaction,manager,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,new,transaction,callback,without,result,override,public,void,do,in,transaction,without,result,transaction,status,status,populator,execute,final,data,source
SqlScriptsTestExecutionListener -> @SuppressWarnings("serial") 	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1434757546;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;@SuppressWarnings("serial")_	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		populator.setScripts(TestContextResourceUtils.convertToResources(testContext.getApplicationContext(), scripts))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scripts))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, tmName)__		final boolean newTxRequired = mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED___		if (transactionManager == null) {_			if (newTxRequired) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "cannot execute SQL scripts using Transaction Mode "_						+ "[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))__			}__			if (dataSource == null) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "supply at least a DataSource or PlatformTransactionManager.", testContext))__			}__			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)___			_			if ((dataSource != null) && (dataSourceFromTxMgr != null) && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "the configured DataSource [%s] (named '%s') is not the one associated "_						+ "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_					dsName, transactionManager.getClass().getName(), tmName))__			}__			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				if (dataSource == null) {_					throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_							+ "could not obtain DataSource from transaction manager [%s] (named '%s').", testContext,_						transactionManager.getClass().getName(), tmName))__				}_			}__			final DataSource finalDataSource = dataSource__			int propagation = newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_					: TransactionDefinition.PROPAGATION_REQUIRED___			TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_				testContext, new DefaultTransactionAttribute(propagation))___			new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() {__				@Override_				public void doInTransactionWithoutResult(TransactionStatus status) {_					populator.execute(finalDataSource)__				}_			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;suppress,warnings,serial,private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,populator,set,scripts,test,context,resource,utils,convert,to,resources,test,context,get,application,context,scripts,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,scripts,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,final,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,transaction,manager,null,if,new,tx,required,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,transaction,manager,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,transaction,manager,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,transaction,manager,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,new,transaction,callback,without,result,override,public,void,do,in,transaction,without,result,transaction,status,status,populator,execute,final,data,source
SqlScriptsTestExecutionListener -> @SuppressWarnings("serial") 	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1435085100;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;@SuppressWarnings("serial")_	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		List<Resource> scriptResources = TestContextResourceUtils.convertToResourceList(_			testContext.getApplicationContext(), scripts)___		for (String statement : sql.statements()) {_			if (StringUtils.hasText(statement)) {_				statement = statement.trim()__				scriptResources.add(new ByteArrayResource(statement.getBytes(), "from inlined SQL statement: " + statement))__			}_		}__		populator.setScripts(scriptResources.toArray(new Resource[scriptResources.size()]))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scriptResources))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, tmName)__		final boolean newTxRequired = mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED___		if (transactionManager == null) {_			if (newTxRequired) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "cannot execute SQL scripts using Transaction Mode "_						+ "[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))__			}__			if (dataSource == null) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "supply at least a DataSource or PlatformTransactionManager.", testContext))__			}__			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)___			_			if ((dataSource != null) && (dataSourceFromTxMgr != null) && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "the configured DataSource [%s] (named '%s') is not the one associated "_						+ "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_					dsName, transactionManager.getClass().getName(), tmName))__			}__			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				if (dataSource == null) {_					throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_							+ "could not obtain DataSource from transaction manager [%s] (named '%s').", testContext,_						transactionManager.getClass().getName(), tmName))__				}_			}__			final DataSource finalDataSource = dataSource__			int propagation = newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_					: TransactionDefinition.PROPAGATION_REQUIRED___			TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_				testContext, new DefaultTransactionAttribute(propagation))___			new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() {__				@Override_				public void doInTransactionWithoutResult(TransactionStatus status) {_					populator.execute(finalDataSource)__				}_			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;suppress,warnings,serial,private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,list,resource,script,resources,test,context,resource,utils,convert,to,resource,list,test,context,get,application,context,scripts,for,string,statement,sql,statements,if,string,utils,has,text,statement,statement,statement,trim,script,resources,add,new,byte,array,resource,statement,get,bytes,from,inlined,sql,statement,statement,populator,set,scripts,script,resources,to,array,new,resource,script,resources,size,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,script,resources,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,final,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,transaction,manager,null,if,new,tx,required,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,transaction,manager,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,transaction,manager,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,transaction,manager,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,new,transaction,callback,without,result,override,public,void,do,in,transaction,without,result,transaction,status,status,populator,execute,final,data,source
SqlScriptsTestExecutionListener -> @SuppressWarnings("serial") 	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1458863502;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;@SuppressWarnings("serial")_	private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		List<Resource> scriptResources = TestContextResourceUtils.convertToResourceList(_			testContext.getApplicationContext(), scripts)___		for (String statement : sql.statements()) {_			if (StringUtils.hasText(statement)) {_				statement = statement.trim()__				scriptResources.add(new ByteArrayResource(statement.getBytes(), "from inlined SQL statement: " + statement))__			}_		}__		populator.setScripts(scriptResources.toArray(new Resource[scriptResources.size()]))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scriptResources))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, tmName)__		final boolean newTxRequired = mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED___		if (transactionManager == null) {_			if (newTxRequired) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "cannot execute SQL scripts using Transaction Mode "_						+ "[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))__			}__			if (dataSource == null) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "supply at least a DataSource or PlatformTransactionManager.", testContext))__			}__			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)___			_			if ((dataSource != null) && (dataSourceFromTxMgr != null) && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "the configured DataSource [%s] (named '%s') is not the one associated "_						+ "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_					dsName, transactionManager.getClass().getName(), tmName))__			}__			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				if (dataSource == null) {_					throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_							+ "could not obtain DataSource from transaction manager [%s] (named '%s').", testContext,_						transactionManager.getClass().getName(), tmName))__				}_			}__			final DataSource finalDataSource = dataSource__			int propagation = newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_					: TransactionDefinition.PROPAGATION_REQUIRED___			TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_				testContext, new DefaultTransactionAttribute(propagation))___			new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() {__				@Override_				public void doInTransactionWithoutResult(TransactionStatus status) {_					populator.execute(finalDataSource)__				}_			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;suppress,warnings,serial,private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,list,resource,script,resources,test,context,resource,utils,convert,to,resource,list,test,context,get,application,context,scripts,for,string,statement,sql,statements,if,string,utils,has,text,statement,statement,statement,trim,script,resources,add,new,byte,array,resource,statement,get,bytes,from,inlined,sql,statement,statement,populator,set,scripts,script,resources,to,array,new,resource,script,resources,size,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,script,resources,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,final,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,transaction,manager,null,if,new,tx,required,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,transaction,manager,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,transaction,manager,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,transaction,manager,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,new,transaction,callback,without,result,override,public,void,do,in,transaction,without,result,transaction,status,status,populator,execute,final,data,source
SqlScriptsTestExecutionListener -> @Override 	public final int getOrder();1408048216;Returns {@code 5000}.;@Override_	public final int getOrder() {_		return 5000__	};returns,code,5000;override,public,final,int,get,order,return,5000
SqlScriptsTestExecutionListener -> @Override 	public final int getOrder();1409498224;Returns {@code 5000}.;@Override_	public final int getOrder() {_		return 5000__	};returns,code,5000;override,public,final,int,get,order,return,5000
SqlScriptsTestExecutionListener -> @Override 	public final int getOrder();1413848647;Returns {@code 5000}.;@Override_	public final int getOrder() {_		return 5000__	};returns,code,5000;override,public,final,int,get,order,return,5000
SqlScriptsTestExecutionListener -> @Override 	public final int getOrder();1432246071;Returns {@code 5000}.;@Override_	public final int getOrder() {_		return 5000__	};returns,code,5000;override,public,final,int,get,order,return,5000
SqlScriptsTestExecutionListener -> @Override 	public final int getOrder();1434756099;Returns {@code 5000}.;@Override_	public final int getOrder() {_		return 5000__	};returns,code,5000;override,public,final,int,get,order,return,5000
SqlScriptsTestExecutionListener -> @Override 	public final int getOrder();1434757546;Returns {@code 5000}.;@Override_	public final int getOrder() {_		return 5000__	};returns,code,5000;override,public,final,int,get,order,return,5000
SqlScriptsTestExecutionListener -> @Override 	public final int getOrder();1435085100;Returns {@code 5000}.;@Override_	public final int getOrder() {_		return 5000__	};returns,code,5000;override,public,final,int,get,order,return,5000
SqlScriptsTestExecutionListener -> @Override 	public final int getOrder();1458863502;Returns {@code 5000}.;@Override_	public final int getOrder() {_		return 5000__	};returns,code,5000;override,public,final,int,get,order,return,5000
SqlScriptsTestExecutionListener -> @Override 	public final int getOrder();1459798201;Returns {@code 5000}.;@Override_	public final int getOrder() {_		return 5000__	};returns,code,5000;override,public,final,int,get,order,return,5000
SqlScriptsTestExecutionListener -> @Override 	public final int getOrder();1467992320;Returns {@code 5000}.;@Override_	public final int getOrder() {_		return 5000__	};returns,code,5000;override,public,final,int,get,order,return,5000
SqlScriptsTestExecutionListener -> @Override 	public final int getOrder();1468334463;Returns {@code 5000}.;@Override_	public final int getOrder() {_		return 5000__	};returns,code,5000;override,public,final,int,get,order,return,5000
SqlScriptsTestExecutionListener -> @Override 	public final int getOrder();1470831642;Returns {@code 5000}.;@Override_	public final int getOrder() {_		return 5000__	};returns,code,5000;override,public,final,int,get,order,return,5000
SqlScriptsTestExecutionListener -> @Override 	public final int getOrder();1470840141;Returns {@code 5000}.;@Override_	public final int getOrder() {_		return 5000__	};returns,code,5000;override,public,final,int,get,order,return,5000
SqlScriptsTestExecutionListener -> @Override 	public final int getOrder();1506097334;Returns {@code 5000}.;@Override_	public final int getOrder() {_		return 5000__	};returns,code,5000;override,public,final,int,get,order,return,5000
SqlScriptsTestExecutionListener -> @Override 	public final int getOrder();1519295386;Returns {@code 5000}.;@Override_	public final int getOrder() {_		return 5000__	};returns,code,5000;override,public,final,int,get,order,return,5000
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1403267603;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1405524203;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1405527406;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1405527589;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1405645143;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1405886611;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1406218418;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1408048216;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1409498224;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1413848647;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1432246071;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1434756099;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1434757546;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1435085100;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare statements or scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,statements,or,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1458863502;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare statements or scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,statements,or,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1459798201;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare statements or scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,statements,or,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1467992320;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare statements or scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,statements,or,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1468334463;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: "_					+ "%s does not exist. Either declare statements or scripts via @Sql or make the "_					+ "default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,statements,or,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1470831642;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath,_					elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: " +_					"%s does not exist. Either declare statements or scripts via @Sql or make the " +_					"default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,statements,or,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1470840141;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]",_						prefixedResourcePath, elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: " +_					"%s does not exist. Either declare statements or scripts via @Sql or make the " +_					"default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,statements,or,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1506097334;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]",_						prefixedResourcePath, elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: " +_					"%s does not exist. Either declare statements or scripts via @Sql or make the " +_					"default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,statements,or,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private String detectDefaultScript(TestContext testContext, boolean classLevel);1519295386;Detect a default SQL script by implementing the algorithm defined in_{@link Sql#scripts}.;private String detectDefaultScript(TestContext testContext, boolean classLevel) {_		Class<?> clazz = testContext.getTestClass()__		Method method = testContext.getTestMethod()__		String elementType = (classLevel ? "class" : "method")__		String elementName = (classLevel ? clazz.getName() : method.toString())___		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName())__		if (!classLevel) {_			resourcePath += "." + method.getName()__		}_		resourcePath += ".sql"___		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]",_						prefixedResourcePath, elementType, elementName))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default SQL script for test %s [%s]: " +_					"%s does not exist. Either declare statements or scripts via @Sql or make the " +_					"default SQL script available.", elementType, elementName, classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,sql,script,by,implementing,the,algorithm,defined,in,link,sql,scripts;private,string,detect,default,script,test,context,test,context,boolean,class,level,class,clazz,test,context,get,test,class,method,method,test,context,get,test,method,string,element,type,class,level,class,method,string,element,name,class,level,clazz,get,name,method,to,string,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,if,class,level,resource,path,method,get,name,resource,path,sql,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,sql,script,s,for,test,s,s,prefixed,resource,path,element,type,element,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,sql,script,for,test,s,s,s,does,not,exist,either,declare,statements,or,scripts,via,sql,or,make,the,default,sql,script,available,element,type,element,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
SqlScriptsTestExecutionListener -> private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1459798201;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		List<Resource> scriptResources = TestContextResourceUtils.convertToResourceList(_			testContext.getApplicationContext(), scripts)___		for (String statement : sql.statements()) {_			if (StringUtils.hasText(statement)) {_				statement = statement.trim()__				scriptResources.add(new ByteArrayResource(statement.getBytes(), "from inlined SQL statement: " + statement))__			}_		}__		populator.setScripts(scriptResources.toArray(new Resource[scriptResources.size()]))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scriptResources))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, tmName)__		final boolean newTxRequired = mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED___		if (transactionManager == null) {_			if (newTxRequired) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "cannot execute SQL scripts using Transaction Mode "_						+ "[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))__			}__			if (dataSource == null) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "supply at least a DataSource or PlatformTransactionManager.", testContext))__			}__			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)___			_			if ((dataSource != null) && (dataSourceFromTxMgr != null) && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "the configured DataSource [%s] (named '%s') is not the one associated "_						+ "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_					dsName, transactionManager.getClass().getName(), tmName))__			}__			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				if (dataSource == null) {_					throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_							+ "could not obtain DataSource from transaction manager [%s] (named '%s').", testContext,_						transactionManager.getClass().getName(), tmName))__				}_			}__			final DataSource finalDataSource = dataSource__			int propagation = newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_					: TransactionDefinition.PROPAGATION_REQUIRED___			TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_				testContext, new DefaultTransactionAttribute(propagation))___			new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() {__				@Override_				public void doInTransactionWithoutResult(TransactionStatus status) {_					populator.execute(finalDataSource)__				}_			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,list,resource,script,resources,test,context,resource,utils,convert,to,resource,list,test,context,get,application,context,scripts,for,string,statement,sql,statements,if,string,utils,has,text,statement,statement,statement,trim,script,resources,add,new,byte,array,resource,statement,get,bytes,from,inlined,sql,statement,statement,populator,set,scripts,script,resources,to,array,new,resource,script,resources,size,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,script,resources,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,final,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,transaction,manager,null,if,new,tx,required,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,transaction,manager,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,transaction,manager,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,transaction,manager,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,new,transaction,callback,without,result,override,public,void,do,in,transaction,without,result,transaction,status,status,populator,execute,final,data,source
SqlScriptsTestExecutionListener -> private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1467992320;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		List<Resource> scriptResources = TestContextResourceUtils.convertToResourceList(_			testContext.getApplicationContext(), scripts)___		for (String statement : sql.statements()) {_			if (StringUtils.hasText(statement)) {_				statement = statement.trim()__				scriptResources.add(new ByteArrayResource(statement.getBytes(), "from inlined SQL statement: " + statement))__			}_		}__		populator.setScripts(scriptResources.toArray(new Resource[scriptResources.size()]))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scriptResources))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, tmName)__		final boolean newTxRequired = mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED___		if (transactionManager == null) {_			if (newTxRequired) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "cannot execute SQL scripts using Transaction Mode "_						+ "[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))__			}__			if (dataSource == null) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "supply at least a DataSource or PlatformTransactionManager.", testContext))__			}__			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)___			_			if ((dataSource != null) && (dataSourceFromTxMgr != null) && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "the configured DataSource [%s] (named '%s') is not the one associated "_						+ "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_					dsName, transactionManager.getClass().getName(), tmName))__			}__			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				if (dataSource == null) {_					throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_							+ "could not obtain DataSource from transaction manager [%s] (named '%s').", testContext,_						transactionManager.getClass().getName(), tmName))__				}_			}__			final DataSource finalDataSource = dataSource__			int propagation = newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_					: TransactionDefinition.PROPAGATION_REQUIRED___			TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_				testContext, new DefaultTransactionAttribute(propagation))___			new TransactionTemplate(transactionManager, transactionAttribute).execute(status -> {_				populator.execute(finalDataSource)__				return null__			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,list,resource,script,resources,test,context,resource,utils,convert,to,resource,list,test,context,get,application,context,scripts,for,string,statement,sql,statements,if,string,utils,has,text,statement,statement,statement,trim,script,resources,add,new,byte,array,resource,statement,get,bytes,from,inlined,sql,statement,statement,populator,set,scripts,script,resources,to,array,new,resource,script,resources,size,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,script,resources,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,final,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,transaction,manager,null,if,new,tx,required,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,transaction,manager,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,transaction,manager,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,if,data,source,null,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,transaction,manager,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,status,populator,execute,final,data,source,return,null
SqlScriptsTestExecutionListener -> private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1468334463;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		List<Resource> scriptResources = TestContextResourceUtils.convertToResourceList(_			testContext.getApplicationContext(), scripts)___		for (String statement : sql.statements()) {_			if (StringUtils.hasText(statement)) {_				statement = statement.trim()__				scriptResources.add(new ByteArrayResource(statement.getBytes(), "from inlined SQL statement: " + statement))__			}_		}__		populator.setScripts(scriptResources.toArray(new Resource[scriptResources.size()]))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scriptResources))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, tmName)__		final boolean newTxRequired = mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED___		if (transactionManager == null) {_			Assert.state(!newTxRequired, () -> String.format("Failed to execute SQL scripts for test context %s: " +_					"cannot execute SQL scripts using Transaction Mode " +_					"[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))___			Assert.state(dataSource != null, () -> String.format("Failed to execute SQL scripts for test context %s: " +_					"supply at least a DataSource or PlatformTransactionManager.", testContext))___			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)___			_			if ((dataSource != null) && (dataSourceFromTxMgr != null) && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: "_						+ "the configured DataSource [%s] (named '%s') is not the one associated "_						+ "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_					dsName, transactionManager.getClass().getName(), tmName))__			}__			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				Assert.state(dataSource != null, () -> String.format("Failed to execute SQL scripts for test context %s: " +_						"could not obtain DataSource from transaction manager [%s] (named '%s').", testContext,_						transactionManager.getClass().getName(), tmName))__			}__			final DataSource finalDataSource = dataSource__			int propagation = newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW_					: TransactionDefinition.PROPAGATION_REQUIRED___			TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_				testContext, new DefaultTransactionAttribute(propagation))___			new TransactionTemplate(transactionManager, transactionAttribute).execute(status -> {_				populator.execute(finalDataSource)__				return null__			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,list,resource,script,resources,test,context,resource,utils,convert,to,resource,list,test,context,get,application,context,scripts,for,string,statement,sql,statements,if,string,utils,has,text,statement,statement,statement,trim,script,resources,add,new,byte,array,resource,statement,get,bytes,from,inlined,sql,statement,statement,populator,set,scripts,script,resources,to,array,new,resource,script,resources,size,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,script,resources,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,final,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,transaction,manager,null,assert,state,new,tx,required,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,assert,state,data,source,null,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,transaction,manager,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,transaction,manager,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,assert,state,data,source,null,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,transaction,manager,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,status,populator,execute,final,data,source,return,null
SqlScriptsTestExecutionListener -> private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1470831642;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}.__<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}.__@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the_class level;private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {_		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig,_				executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		List<Resource> scriptResources = TestContextResourceUtils.convertToResourceList(_			testContext.getApplicationContext(), scripts)___		for (String statement : sql.statements()) {_			if (StringUtils.hasText(statement)) {_				statement = statement.trim()__				scriptResources.add(new ByteArrayResource(statement.getBytes(), "from inlined SQL statement: " + statement))__			}_		}__		populator.setScripts(scriptResources.toArray(new Resource[scriptResources.size()]))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scriptResources))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(_			testContext, tmName)__		final boolean newTxRequired = mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED___		if (transactionManager == null) {_			Assert.state(!newTxRequired, () -> String.format("Failed to execute SQL scripts for test context %s: " +_					"cannot execute SQL scripts using Transaction Mode " +_					"[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))___			Assert.state(dataSource != null, () -> String.format("Failed to execute SQL scripts for test context %s: " +_					"supply at least a DataSource or PlatformTransactionManager.", testContext))___			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)___			_			if (dataSource != null && dataSourceFromTxMgr != null && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: " +_						"the configured DataSource [%s] (named '%s') is not the one associated with " +_						"transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_					dsName, transactionManager.getClass().getName(), tmName))__			}__			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				Assert.state(dataSource != null, () -> String.format("Failed to execute SQL scripts for test context %s: " +_						"could not obtain DataSource from transaction manager [%s] (named '%s').", testContext,_						transactionManager.getClass().getName(), tmName))__			}__			final DataSource finalDataSource = dataSource__			int propagation = (newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW :_					TransactionDefinition.PROPAGATION_REQUIRED)___			TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(_				testContext, new DefaultTransactionAttribute(propagation))___			new TransactionTemplate(transactionManager, transactionAttribute).execute(status -> {_				populator.execute(finalDataSource)__				return null__			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,list,resource,script,resources,test,context,resource,utils,convert,to,resource,list,test,context,get,application,context,scripts,for,string,statement,sql,statements,if,string,utils,has,text,statement,statement,statement,trim,script,resources,add,new,byte,array,resource,statement,get,bytes,from,inlined,sql,statement,statement,populator,set,scripts,script,resources,to,array,new,resource,script,resources,size,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,script,resources,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,final,platform,transaction,manager,transaction,manager,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,final,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,transaction,manager,null,assert,state,new,tx,required,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,assert,state,data,source,null,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,transaction,manager,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,transaction,manager,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,assert,state,data,source,null,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,transaction,manager,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,transaction,attribute,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,transaction,manager,transaction,attribute,execute,status,populator,execute,final,data,source,return,null
SqlScriptsTestExecutionListener -> private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1470840141;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}._<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}._@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the class level;private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {__		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.",_					mergedSqlConfig, executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		List<Resource> scriptResources = TestContextResourceUtils.convertToResourceList(_				testContext.getApplicationContext(), scripts)__		for (String stmt : sql.statements()) {_			if (StringUtils.hasText(stmt)) {_				stmt = stmt.trim()__				scriptResources.add(new ByteArrayResource(stmt.getBytes(), "from inlined SQL statement: " + stmt))__			}_		}_		populator.setScripts(scriptResources.toArray(new Resource[scriptResources.size()]))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scriptResources))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		PlatformTransactionManager txMgr = TestContextTransactionUtils.retrieveTransactionManager(testContext, tmName)__		boolean newTxRequired = (mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED)___		if (txMgr == null) {_			Assert.state(!newTxRequired, () -> String.format("Failed to execute SQL scripts for test context %s: " +_					"cannot execute SQL scripts using Transaction Mode " +_					"[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))__			Assert.state(dataSource != null, () -> String.format("Failed to execute SQL scripts for test context %s: " +_					"supply at least a DataSource or PlatformTransactionManager.", testContext))__			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(txMgr)__			_			if (dataSource != null && dataSourceFromTxMgr != null && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: " +_						"the configured DataSource [%s] (named '%s') is not the one associated with " +_						"transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_						dsName, txMgr.getClass().getName(), tmName))__			}_			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				Assert.state(dataSource != null, () -> String.format("Failed to execute SQL scripts for " +_						"test context %s: could not obtain DataSource from transaction manager [%s] (named '%s').",_						testContext, txMgr.getClass().getName(), tmName))__			}_			final DataSource finalDataSource = dataSource__			int propagation = (newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW :_					TransactionDefinition.PROPAGATION_REQUIRED)__			TransactionAttribute txAttr = TestContextTransactionUtils.createDelegatingTransactionAttribute(_					testContext, new DefaultTransactionAttribute(propagation))__			new TransactionTemplate(txMgr, txAttr).execute(status -> {_				populator.execute(finalDataSource)__				return null__			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,list,resource,script,resources,test,context,resource,utils,convert,to,resource,list,test,context,get,application,context,scripts,for,string,stmt,sql,statements,if,string,utils,has,text,stmt,stmt,stmt,trim,script,resources,add,new,byte,array,resource,stmt,get,bytes,from,inlined,sql,statement,stmt,populator,set,scripts,script,resources,to,array,new,resource,script,resources,size,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,script,resources,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,platform,transaction,manager,tx,mgr,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,tx,mgr,null,assert,state,new,tx,required,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,assert,state,data,source,null,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,tx,mgr,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,tx,mgr,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,assert,state,data,source,null,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,tx,mgr,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,tx,attr,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,tx,mgr,tx,attr,execute,status,populator,execute,final,data,source,return,null
SqlScriptsTestExecutionListener -> private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1506097334;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}._<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}._@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the class level;private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {__		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.",_					mergedSqlConfig, executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		List<Resource> scriptResources = TestContextResourceUtils.convertToResourceList(_				testContext.getApplicationContext(), scripts)__		for (String stmt : sql.statements()) {_			if (StringUtils.hasText(stmt)) {_				stmt = stmt.trim()__				scriptResources.add(new ByteArrayResource(stmt.getBytes(), "from inlined SQL statement: " + stmt))__			}_		}_		populator.setScripts(scriptResources.toArray(new Resource[scriptResources.size()]))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scriptResources))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		PlatformTransactionManager txMgr = TestContextTransactionUtils.retrieveTransactionManager(testContext, tmName)__		boolean newTxRequired = (mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED)___		if (txMgr == null) {_			Assert.state(!newTxRequired, () -> String.format("Failed to execute SQL scripts for test context %s: " +_					"cannot execute SQL scripts using Transaction Mode " +_					"[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))__			Assert.state(dataSource != null, () -> String.format("Failed to execute SQL scripts for test context %s: " +_					"supply at least a DataSource or PlatformTransactionManager.", testContext))__			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(txMgr)__			_			if (dataSource != null && dataSourceFromTxMgr != null && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: " +_						"the configured DataSource [%s] (named '%s') is not the one associated with " +_						"transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_						dsName, txMgr.getClass().getName(), tmName))__			}_			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				Assert.state(dataSource != null, () -> String.format("Failed to execute SQL scripts for " +_						"test context %s: could not obtain DataSource from transaction manager [%s] (named '%s').",_						testContext, txMgr.getClass().getName(), tmName))__			}_			final DataSource finalDataSource = dataSource__			int propagation = (newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW :_					TransactionDefinition.PROPAGATION_REQUIRED)__			TransactionAttribute txAttr = TestContextTransactionUtils.createDelegatingTransactionAttribute(_					testContext, new DefaultTransactionAttribute(propagation))__			new TransactionTemplate(txMgr, txAttr).execute(status -> {_				populator.execute(finalDataSource)__				return null__			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,list,resource,script,resources,test,context,resource,utils,convert,to,resource,list,test,context,get,application,context,scripts,for,string,stmt,sql,statements,if,string,utils,has,text,stmt,stmt,stmt,trim,script,resources,add,new,byte,array,resource,stmt,get,bytes,from,inlined,sql,statement,stmt,populator,set,scripts,script,resources,to,array,new,resource,script,resources,size,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,script,resources,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,platform,transaction,manager,tx,mgr,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,tx,mgr,null,assert,state,new,tx,required,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,assert,state,data,source,null,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,tx,mgr,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,tx,mgr,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,assert,state,data,source,null,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,tx,mgr,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,tx,attr,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,tx,mgr,tx,attr,execute,status,populator,execute,final,data,source,return,null
SqlScriptsTestExecutionListener -> private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) 			throws Exception;1519295386;Execute the SQL scripts configured via the supplied {@link Sql @Sql}_annotation for the given {@link ExecutionPhase} and {@link TestContext}._<p>Special care must be taken in order to properly support the configured_{@link SqlConfig#transactionMode}._@param sql the {@code @Sql} annotation to parse_@param executionPhase the current execution phase_@param testContext the current {@code TestContext}_@param classLevel {@code true} if {@link Sql @Sql} was declared at the class level;private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel)_			throws Exception {__		if (executionPhase != sql.executionPhase()) {_			return__		}__		MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.",_					mergedSqlConfig, executionPhase, testContext))__		}__		final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()__		populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())__		populator.setSeparator(mergedSqlConfig.getSeparator())__		populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())__		populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())__		populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())__		populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)__		populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)___		String[] scripts = getScripts(sql, testContext, classLevel)__		scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)__		List<Resource> scriptResources = TestContextResourceUtils.convertToResourceList(_				testContext.getApplicationContext(), scripts)__		for (String stmt : sql.statements()) {_			if (StringUtils.hasText(stmt)) {_				stmt = stmt.trim()__				scriptResources.add(new ByteArrayResource(stmt.getBytes(), "from inlined SQL statement: " + stmt))__			}_		}_		populator.setScripts(scriptResources.toArray(new Resource[0]))__		if (logger.isDebugEnabled()) {_			logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scriptResources))__		}__		String dsName = mergedSqlConfig.getDataSource()__		String tmName = mergedSqlConfig.getTransactionManager()__		DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)__		PlatformTransactionManager txMgr = TestContextTransactionUtils.retrieveTransactionManager(testContext, tmName)__		boolean newTxRequired = (mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED)___		if (txMgr == null) {_			Assert.state(!newTxRequired, () -> String.format("Failed to execute SQL scripts for test context %s: " +_					"cannot execute SQL scripts using Transaction Mode " +_					"[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))__			Assert.state(dataSource != null, () -> String.format("Failed to execute SQL scripts for test context %s: " +_					"supply at least a DataSource or PlatformTransactionManager.", testContext))__			_			populator.execute(dataSource)__		}_		else {_			DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(txMgr)__			_			if (dataSource != null && dataSourceFromTxMgr != null && !dataSource.equals(dataSourceFromTxMgr)) {_				throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: " +_						"the configured DataSource [%s] (named '%s') is not the one associated with " +_						"transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(),_						dsName, txMgr.getClass().getName(), tmName))__			}_			if (dataSource == null) {_				dataSource = dataSourceFromTxMgr__				Assert.state(dataSource != null, () -> String.format("Failed to execute SQL scripts for " +_						"test context %s: could not obtain DataSource from transaction manager [%s] (named '%s').",_						testContext, txMgr.getClass().getName(), tmName))__			}_			final DataSource finalDataSource = dataSource__			int propagation = (newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW :_					TransactionDefinition.PROPAGATION_REQUIRED)__			TransactionAttribute txAttr = TestContextTransactionUtils.createDelegatingTransactionAttribute(_					testContext, new DefaultTransactionAttribute(propagation))__			new TransactionTemplate(txMgr, txAttr).execute(status -> {_				populator.execute(finalDataSource)__				return null__			})__		}_	};execute,the,sql,scripts,configured,via,the,supplied,link,sql,sql,annotation,for,the,given,link,execution,phase,and,link,test,context,p,special,care,must,be,taken,in,order,to,properly,support,the,configured,link,sql,config,transaction,mode,param,sql,the,code,sql,annotation,to,parse,param,execution,phase,the,current,execution,phase,param,test,context,the,current,code,test,context,param,class,level,code,true,if,link,sql,sql,was,declared,at,the,class,level;private,void,execute,sql,scripts,sql,sql,execution,phase,execution,phase,test,context,test,context,boolean,class,level,throws,exception,if,execution,phase,sql,execution,phase,return,merged,sql,config,merged,sql,config,new,merged,sql,config,sql,config,test,context,get,test,class,if,logger,is,debug,enabled,logger,debug,string,format,processing,s,for,execution,phase,s,and,test,context,s,merged,sql,config,execution,phase,test,context,final,resource,database,populator,populator,new,resource,database,populator,populator,set,sql,script,encoding,merged,sql,config,get,encoding,populator,set,separator,merged,sql,config,get,separator,populator,set,comment,prefix,merged,sql,config,get,comment,prefix,populator,set,block,comment,start,delimiter,merged,sql,config,get,block,comment,start,delimiter,populator,set,block,comment,end,delimiter,merged,sql,config,get,block,comment,end,delimiter,populator,set,continue,on,error,merged,sql,config,get,error,mode,error,mode,populator,set,ignore,failed,drops,merged,sql,config,get,error,mode,error,mode,string,scripts,get,scripts,sql,test,context,class,level,scripts,test,context,resource,utils,convert,to,classpath,resource,paths,test,context,get,test,class,scripts,list,resource,script,resources,test,context,resource,utils,convert,to,resource,list,test,context,get,application,context,scripts,for,string,stmt,sql,statements,if,string,utils,has,text,stmt,stmt,stmt,trim,script,resources,add,new,byte,array,resource,stmt,get,bytes,from,inlined,sql,statement,stmt,populator,set,scripts,script,resources,to,array,new,resource,0,if,logger,is,debug,enabled,logger,debug,executing,sql,scripts,object,utils,null,safe,to,string,script,resources,string,ds,name,merged,sql,config,get,data,source,string,tm,name,merged,sql,config,get,transaction,manager,data,source,data,source,test,context,transaction,utils,retrieve,data,source,test,context,ds,name,platform,transaction,manager,tx,mgr,test,context,transaction,utils,retrieve,transaction,manager,test,context,tm,name,boolean,new,tx,required,merged,sql,config,get,transaction,mode,transaction,mode,isolated,if,tx,mgr,null,assert,state,new,tx,required,string,format,failed,to,execute,sql,scripts,for,test,context,s,cannot,execute,sql,scripts,using,transaction,mode,s,without,a,platform,transaction,manager,test,context,transaction,mode,isolated,assert,state,data,source,null,string,format,failed,to,execute,sql,scripts,for,test,context,s,supply,at,least,a,data,source,or,platform,transaction,manager,test,context,populator,execute,data,source,else,data,source,data,source,from,tx,mgr,get,data,source,from,transaction,manager,tx,mgr,if,data,source,null,data,source,from,tx,mgr,null,data,source,equals,data,source,from,tx,mgr,throw,new,illegal,state,exception,string,format,failed,to,execute,sql,scripts,for,test,context,s,the,configured,data,source,s,named,s,is,not,the,one,associated,with,transaction,manager,s,named,s,test,context,data,source,get,class,get,name,ds,name,tx,mgr,get,class,get,name,tm,name,if,data,source,null,data,source,data,source,from,tx,mgr,assert,state,data,source,null,string,format,failed,to,execute,sql,scripts,for,test,context,s,could,not,obtain,data,source,from,transaction,manager,s,named,s,test,context,tx,mgr,get,class,get,name,tm,name,final,data,source,final,data,source,data,source,int,propagation,new,tx,required,transaction,definition,transaction,definition,transaction,attribute,tx,attr,test,context,transaction,utils,create,delegating,transaction,attribute,test,context,new,default,transaction,attribute,propagation,new,transaction,template,tx,mgr,tx,attr,execute,status,populator,execute,final,data,source,return,null
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1403267603;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1405524203;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1405527406;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1405527589;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1405645143;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1405886611;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1406218418;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1408048216;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1409498224;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1413848647;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1432246071;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1434756099;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1434757546;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1435085100;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1458863502;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1459798201;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1467992320;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1468334463;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1470831642;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1470840141;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1506097334;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1519295386;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>before</em> the current test method.;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.BEFORE_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,before,em,the,current,test,method;override,public,void,before,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1403267603;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1405524203;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1405527406;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1405527589;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1405645143;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1405886611;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1406218418;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1408048216;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1409498224;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1413848647;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1432246071;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1434756099;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1434757546;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1435085100;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1458863502;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1459798201;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1467992320;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1468334463;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1470831642;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1470840141;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1506097334;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
SqlScriptsTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1519295386;Execute SQL scripts configured via {@link Sql @Sql} for the supplied_{@link TestContext} <em>after</em> the current test method.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		executeSqlScripts(testContext, ExecutionPhase.AFTER_TEST_METHOD)__	};execute,sql,scripts,configured,via,link,sql,sql,for,the,supplied,link,test,context,em,after,em,the,current,test,method;override,public,void,after,test,method,test,context,test,context,throws,exception,execute,sql,scripts,test,context,execution,phase
