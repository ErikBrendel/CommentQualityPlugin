commented;modifiers;parameterAmount;loc;comment;code
false;private;1;19;;private void addUrlPattern(String urlPattern) {     Assert.notNull(urlPattern, "Found null URL Pattern").     if (urlPattern.startsWith(EXTENSION_MAPPING_PATTERN)) {         this.endsWithMatches.add(urlPattern.substring(1, urlPattern.length())).     } else if (urlPattern.equals(PATH_MAPPING_PATTERN)) {         this.startsWithMatches.add("").     } else if (urlPattern.endsWith(PATH_MAPPING_PATTERN)) {         this.startsWithMatches.add(urlPattern.substring(0, urlPattern.length() - 1)).         this.exactMatches.add(urlPattern.substring(0, urlPattern.length() - 2)).     } else {         if ("".equals(urlPattern)) {             urlPattern = "/".         }         this.exactMatches.add(urlPattern).     } }
false;public;3;14;;@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {     HttpServletRequest httpRequest = (HttpServletRequest) request.     String requestPath = urlPathHelper.getPathWithinApplication(httpRequest).     if (matches(requestPath)) {         this.delegate.doFilter(request, response, filterChain).     } else {         filterChain.doFilter(request, response).     } }
false;private;1;21;;private boolean matches(String requestPath) {     for (String pattern : this.exactMatches) {         if (pattern.equals(requestPath)) {             return true.         }     }     if (!requestPath.startsWith("/")) {         return false.     }     for (String pattern : this.endsWithMatches) {         if (requestPath.endsWith(pattern)) {             return true.         }     }     for (String pattern : this.startsWithMatches) {         if (requestPath.startsWith(pattern)) {             return true.         }     }     return false. }
false;public;1;4;;@Override public void init(FilterConfig filterConfig) throws ServletException {     this.delegate.init(filterConfig). }
false;public;0;4;;@Override public void destroy() {     this.delegate.destroy(). }
