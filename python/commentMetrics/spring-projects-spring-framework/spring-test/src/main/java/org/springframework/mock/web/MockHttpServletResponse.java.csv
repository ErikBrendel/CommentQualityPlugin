commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether {@link #getOutputStream()} access is allowed.  * <p>Default is {@code true}.  */ ;// --------------------------------------------------------------------- // ServletResponse interface // --------------------------------------------------------------------- /**  * Set whether {@link #getOutputStream()} access is allowed.  * <p>Default is {@code true}.  */ public void setOutputStreamAccessAllowed(boolean outputStreamAccessAllowed) {     this.outputStreamAccessAllowed = outputStreamAccessAllowed. }
true;public;0;3;/**  * Return whether {@link #getOutputStream()} access is allowed.  */ ;/**  * Return whether {@link #getOutputStream()} access is allowed.  */ public boolean isOutputStreamAccessAllowed() {     return this.outputStreamAccessAllowed. }
true;public;1;3;/**  * Set whether {@link #getWriter()} access is allowed.  * <p>Default is {@code true}.  */ ;/**  * Set whether {@link #getWriter()} access is allowed.  * <p>Default is {@code true}.  */ public void setWriterAccessAllowed(boolean writerAccessAllowed) {     this.writerAccessAllowed = writerAccessAllowed. }
true;public;0;3;/**  * Return whether {@link #getOutputStream()} access is allowed.  */ ;/**  * Return whether {@link #getOutputStream()} access is allowed.  */ public boolean isWriterAccessAllowed() {     return this.writerAccessAllowed. }
true;public;0;3;/**  * Return whether the character encoding has been set.  * <p>If {@code false}, {@link #getCharacterEncoding()} will return a default encoding value.  */ ;/**  * Return whether the character encoding has been set.  * <p>If {@code false}, {@link #getCharacterEncoding()} will return a default encoding value.  */ public boolean isCharset() {     return this.charset. }
false;public;1;6;;@Override public void setCharacterEncoding(String characterEncoding) {     this.characterEncoding = characterEncoding.     this.charset = true.     updateContentTypeHeader(). }
false;private;0;9;;private void updateContentTypeHeader() {     if (this.contentType != null) {         String value = this.contentType.         if (this.charset && !this.contentType.toLowerCase().contains(CHARSET_PREFIX)) {             value = value + '.' + CHARSET_PREFIX + this.characterEncoding.         }         doAddHeaderValue(HttpHeaders.CONTENT_TYPE, value, true).     } }
false;public;0;5;;@Override @Nullable public String getCharacterEncoding() {     return this.characterEncoding. }
false;public;0;5;;@Override public ServletOutputStream getOutputStream() {     Assert.state(this.outputStreamAccessAllowed, "OutputStream access not allowed").     return this.outputStream. }
false;public;0;11;;@Override public PrintWriter getWriter() throws UnsupportedEncodingException {     Assert.state(this.writerAccessAllowed, "Writer access not allowed").     if (this.writer == null) {         Writer targetWriter = (this.characterEncoding != null ? new OutputStreamWriter(this.content, this.characterEncoding) : new OutputStreamWriter(this.content)).         this.writer = new ResponsePrintWriter(targetWriter).     }     return this.writer. }
false;public;0;3;;public byte[] getContentAsByteArray() {     return this.content.toByteArray(). }
false;public;0;4;;public String getContentAsString() throws UnsupportedEncodingException {     return (this.characterEncoding != null ? this.content.toString(this.characterEncoding) : this.content.toString()). }
false;public;1;5;;@Override public void setContentLength(int contentLength) {     this.contentLength = contentLength.     doAddHeaderValue(HttpHeaders.CONTENT_LENGTH, contentLength, true). }
false;public;0;3;;public int getContentLength() {     return (int) this.contentLength. }
false;public;1;5;;@Override public void setContentLengthLong(long contentLength) {     this.contentLength = contentLength.     doAddHeaderValue(HttpHeaders.CONTENT_LENGTH, contentLength, true). }
false;public;0;3;;public long getContentLengthLong() {     return this.contentLength. }
false;public;1;22;;@Override public void setContentType(@Nullable String contentType) {     this.contentType = contentType.     if (contentType != null) {         try {             MediaType mediaType = MediaType.parseMediaType(contentType).             if (mediaType.getCharset() != null) {                 this.characterEncoding = mediaType.getCharset().name().                 this.charset = true.             }         } catch (Exception ex) {             // Try to get charset value anyway             int charsetIndex = contentType.toLowerCase().indexOf(CHARSET_PREFIX).             if (charsetIndex != -1) {                 this.characterEncoding = contentType.substring(charsetIndex + CHARSET_PREFIX.length()).                 this.charset = true.             }         }         updateContentTypeHeader().     } }
false;public;0;5;;@Override @Nullable public String getContentType() {     return this.contentType. }
false;public;1;4;;@Override public void setBufferSize(int bufferSize) {     this.bufferSize = bufferSize. }
false;public;0;4;;@Override public int getBufferSize() {     return this.bufferSize. }
false;public;0;4;;@Override public void flushBuffer() {     setCommitted(true). }
false;public;0;5;;@Override public void resetBuffer() {     Assert.state(!isCommitted(), "Cannot reset buffer - response is already committed").     this.content.reset(). }
false;private;0;6;;private void setCommittedIfBufferSizeExceeded() {     int bufSize = getBufferSize().     if (bufSize > 0 && this.content.size() > bufSize) {         setCommitted(true).     } }
false;public;1;3;;public void setCommitted(boolean committed) {     this.committed = committed. }
false;public;0;4;;@Override public boolean isCommitted() {     return this.committed. }
false;public;0;12;;@Override public void reset() {     resetBuffer().     this.characterEncoding = null.     this.contentLength = 0.     this.contentType = null.     this.locale = Locale.getDefault().     this.cookies.clear().     this.headers.clear().     this.status = HttpServletResponse.SC_OK.     this.errorMessage = null. }
false;public;1;5;;@Override public void setLocale(Locale locale) {     this.locale = locale.     doAddHeaderValue(HttpHeaders.CONTENT_LANGUAGE, locale.toLanguageTag(), true). }
false;public;0;4;;@Override public Locale getLocale() {     return this.locale. }
false;public;1;6;;// --------------------------------------------------------------------- // HttpServletResponse interface // --------------------------------------------------------------------- @Override public void addCookie(Cookie cookie) {     Assert.notNull(cookie, "Cookie must not be null").     this.cookies.add(cookie).     doAddHeaderValue(HttpHeaders.SET_COOKIE, getCookieHeader(cookie), false). }
false;private;1;32;;private String getCookieHeader(Cookie cookie) {     StringBuilder buf = new StringBuilder().     buf.append(cookie.getName()).append('=').append(cookie.getValue() == null ? "" : cookie.getValue()).     if (StringUtils.hasText(cookie.getPath())) {         buf.append(". Path=").append(cookie.getPath()).     }     if (StringUtils.hasText(cookie.getDomain())) {         buf.append(". Domain=").append(cookie.getDomain()).     }     int maxAge = cookie.getMaxAge().     if (maxAge >= 0) {         buf.append(". Max-Age=").append(maxAge).         buf.append(". Expires=").         HttpHeaders headers = new HttpHeaders().         headers.setExpires(maxAge > 0 ? System.currentTimeMillis() + 1000L * maxAge : 0).         buf.append(headers.getFirst(HttpHeaders.EXPIRES)).     }     if (cookie.getSecure()) {         buf.append(". Secure").     }     if (cookie.isHttpOnly()) {         buf.append(". HttpOnly").     }     if (cookie instanceof MockCookie) {         MockCookie mockCookie = (MockCookie) cookie.         if (StringUtils.hasText(mockCookie.getSameSite())) {             buf.append(". SameSite=").append(mockCookie.getSameSite()).         }     }     return buf.toString(). }
false;public;0;3;;public Cookie[] getCookies() {     return this.cookies.toArray(new Cookie[0]). }
false;public;1;10;;@Nullable public Cookie getCookie(String name) {     Assert.notNull(name, "Cookie name must not be null").     for (Cookie cookie : this.cookies) {         if (name.equals(cookie.getName())) {             return cookie.         }     }     return null. }
false;public;1;4;;@Override public boolean containsHeader(String name) {     return (HeaderValueHolder.getByName(this.headers, name) != null). }
true;public;0;4;/**  * Return the names of all specified headers as a Set of Strings.  * <p>As of Servlet 3.0, this method is also defined HttpServletResponse.  * @return the {@code Set} of header name {@code Strings}, or an empty {@code Set} if none  */ ;/**  * Return the names of all specified headers as a Set of Strings.  * <p>As of Servlet 3.0, this method is also defined HttpServletResponse.  * @return the {@code Set} of header name {@code Strings}, or an empty {@code Set} if none  */ @Override public Collection<String> getHeaderNames() {     return this.headers.keySet(). }
true;public;1;6;/**  * Return the primary value for the given header as a String, if any.  * Will return the first value in case of multiple values.  * <p>As of Servlet 3.0, this method is also defined in HttpServletResponse.  * As of Spring 3.1, it returns a stringified value for Servlet 3.0 compatibility.  * Consider using {@link #getHeaderValue(String)} for raw Object access.  * @param name the name of the header  * @return the associated header value, or {@code null} if none  */ ;/**  * Return the primary value for the given header as a String, if any.  * Will return the first value in case of multiple values.  * <p>As of Servlet 3.0, this method is also defined in HttpServletResponse.  * As of Spring 3.1, it returns a stringified value for Servlet 3.0 compatibility.  * Consider using {@link #getHeaderValue(String)} for raw Object access.  * @param name the name of the header  * @return the associated header value, or {@code null} if none  */ @Override @Nullable public String getHeader(String name) {     HeaderValueHolder header = HeaderValueHolder.getByName(this.headers, name).     return (header != null ? header.getStringValue() : null). }
true;public;1;10;/**  * Return all values for the given header as a List of Strings.  * <p>As of Servlet 3.0, this method is also defined in HttpServletResponse.  * As of Spring 3.1, it returns a List of stringified values for Servlet 3.0 compatibility.  * Consider using {@link #getHeaderValues(String)} for raw Object access.  * @param name the name of the header  * @return the associated header values, or an empty List if none  */ ;/**  * Return all values for the given header as a List of Strings.  * <p>As of Servlet 3.0, this method is also defined in HttpServletResponse.  * As of Spring 3.1, it returns a List of stringified values for Servlet 3.0 compatibility.  * Consider using {@link #getHeaderValues(String)} for raw Object access.  * @param name the name of the header  * @return the associated header values, or an empty List if none  */ @Override public List<String> getHeaders(String name) {     HeaderValueHolder header = HeaderValueHolder.getByName(this.headers, name).     if (header != null) {         return header.getStringValues().     } else {         return Collections.emptyList().     } }
true;public;1;5;/**  * Return the primary value for the given header, if any.  * <p>Will return the first value in case of multiple values.  * @param name the name of the header  * @return the associated header value, or {@code null} if none  */ ;/**  * Return the primary value for the given header, if any.  * <p>Will return the first value in case of multiple values.  * @param name the name of the header  * @return the associated header value, or {@code null} if none  */ @Nullable public Object getHeaderValue(String name) {     HeaderValueHolder header = HeaderValueHolder.getByName(this.headers, name).     return (header != null ? header.getValue() : null). }
true;public;1;9;/**  * Return all values for the given header as a List of value objects.  * @param name the name of the header  * @return the associated header values, or an empty List if none  */ ;/**  * Return all values for the given header as a List of value objects.  * @param name the name of the header  * @return the associated header values, or an empty List if none  */ public List<Object> getHeaderValues(String name) {     HeaderValueHolder header = HeaderValueHolder.getByName(this.headers, name).     if (header != null) {         return header.getValues().     } else {         return Collections.emptyList().     } }
true;public;1;4;/**  * The default implementation returns the given URL String as-is.  * <p>Can be overridden in subclasses, appending a session id or the like.  */ ;/**  * The default implementation returns the given URL String as-is.  * <p>Can be overridden in subclasses, appending a session id or the like.  */ @Override public String encodeURL(String url) {     return url. }
true;public;1;4;/**  * The default implementation delegates to {@link #encodeURL},  * returning the given URL String as-is.  * <p>Can be overridden in subclasses, appending a session id or the like  * in a redirect-specific fashion. For general URL encoding rules,  * override the common {@link #encodeURL} method instead, applying  * to redirect URLs as well as to general URLs.  */ ;/**  * The default implementation delegates to {@link #encodeURL},  * returning the given URL String as-is.  * <p>Can be overridden in subclasses, appending a session id or the like  * in a redirect-specific fashion. For general URL encoding rules,  * override the common {@link #encodeURL} method instead, applying  * to redirect URLs as well as to general URLs.  */ @Override public String encodeRedirectURL(String url) {     return encodeURL(url). }
false;public;1;5;;@Override @Deprecated public String encodeUrl(String url) {     return encodeURL(url). }
false;public;1;5;;@Override @Deprecated public String encodeRedirectUrl(String url) {     return encodeRedirectURL(url). }
false;public;2;7;;@Override public void sendError(int status, String errorMessage) throws IOException {     Assert.state(!isCommitted(), "Cannot set error status - response is already committed").     this.status = status.     this.errorMessage = errorMessage.     setCommitted(true). }
false;public;1;6;;@Override public void sendError(int status) throws IOException {     Assert.state(!isCommitted(), "Cannot set error status - response is already committed").     this.status = status.     setCommitted(true). }
false;public;1;8;;@Override public void sendRedirect(String url) throws IOException {     Assert.state(!isCommitted(), "Cannot send redirect - response is already committed").     Assert.notNull(url, "Redirect URL must not be null").     setHeader(HttpHeaders.LOCATION, url).     setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY).     setCommitted(true). }
false;public;0;4;;@Nullable public String getRedirectedUrl() {     return getHeader(HttpHeaders.LOCATION). }
false;public;2;4;;@Override public void setDateHeader(String name, long value) {     setHeaderValue(name, formatDate(value)). }
false;public;2;4;;@Override public void addDateHeader(String name, long value) {     addHeaderValue(name, formatDate(value)). }
false;public;1;13;;public long getDateHeader(String name) {     String headerValue = getHeader(name).     if (headerValue == null) {         return -1.     }     try {         return newDateFormat().parse(getHeader(name)).getTime().     } catch (ParseException ex) {         throw new IllegalArgumentException("Value for header '" + name + "' is not a valid Date: " + headerValue).     } }
false;private;1;3;;private String formatDate(long date) {     return newDateFormat().format(new Date(date)). }
false;private;0;5;;private DateFormat newDateFormat() {     SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT, Locale.US).     dateFormat.setTimeZone(GMT).     return dateFormat. }
false;public;2;4;;@Override public void setHeader(String name, String value) {     setHeaderValue(name, value). }
false;public;2;4;;@Override public void addHeader(String name, String value) {     addHeaderValue(name, value). }
false;public;2;4;;@Override public void setIntHeader(String name, int value) {     setHeaderValue(name, value). }
false;public;2;4;;@Override public void addIntHeader(String name, int value) {     addHeaderValue(name, value). }
false;private;2;6;;private void setHeaderValue(String name, Object value) {     if (setSpecialHeader(name, value)) {         return.     }     doAddHeaderValue(name, value, true). }
false;private;2;6;;private void addHeaderValue(String name, Object value) {     if (setSpecialHeader(name, value)) {         return.     }     doAddHeaderValue(name, value, false). }
false;private;2;26;;private boolean setSpecialHeader(String name, Object value) {     if (HttpHeaders.CONTENT_TYPE.equalsIgnoreCase(name)) {         setContentType(value.toString()).         return true.     } else if (HttpHeaders.CONTENT_LENGTH.equalsIgnoreCase(name)) {         setContentLength(value instanceof Number ? ((Number) value).intValue() : Integer.parseInt(value.toString())).         return true.     } else if (HttpHeaders.CONTENT_LANGUAGE.equalsIgnoreCase(name)) {         HttpHeaders headers = new HttpHeaders().         headers.add(HttpHeaders.CONTENT_LANGUAGE, value.toString()).         Locale language = headers.getContentLanguage().         setLocale(language != null ? language : Locale.getDefault()).         return true.     } else if (HttpHeaders.SET_COOKIE.equalsIgnoreCase(name)) {         MockCookie cookie = MockCookie.parse(value.toString()).         addCookie(cookie).         return true.     } else {         return false.     } }
false;private;3;14;;private void doAddHeaderValue(String name, Object value, boolean replace) {     HeaderValueHolder header = HeaderValueHolder.getByName(this.headers, name).     Assert.notNull(value, "Header value must not be null").     if (header == null) {         header = new HeaderValueHolder().         this.headers.put(name, header).     }     if (replace) {         header.setValue(value).     } else {         header.addValue(value).     } }
false;public;1;6;;@Override public void setStatus(int status) {     if (!this.isCommitted()) {         this.status = status.     } }
false;public;2;8;;@Override @Deprecated public void setStatus(int status, String errorMessage) {     if (!this.isCommitted()) {         this.status = status.         this.errorMessage = errorMessage.     } }
false;public;0;4;;@Override public int getStatus() {     return this.status. }
false;public;0;4;;@Nullable public String getErrorMessage() {     return this.errorMessage. }
false;public;1;3;;// --------------------------------------------------------------------- // Methods for MockRequestDispatcher // --------------------------------------------------------------------- public void setForwardedUrl(@Nullable String forwardedUrl) {     this.forwardedUrl = forwardedUrl. }
false;public;0;4;;@Nullable public String getForwardedUrl() {     return this.forwardedUrl. }
false;public;1;6;;public void setIncludedUrl(@Nullable String includedUrl) {     this.includedUrls.clear().     if (includedUrl != null) {         this.includedUrls.add(includedUrl).     } }
false;public;0;7;;@Nullable public String getIncludedUrl() {     int count = this.includedUrls.size().     Assert.state(count <= 1, () -> "More than 1 URL included - check getIncludedUrls instead: " + this.includedUrls).     return (count == 1 ? this.includedUrls.get(0) : null). }
false;public;1;4;;public void addIncludedUrl(String includedUrl) {     Assert.notNull(includedUrl, "Included URL must not be null").     this.includedUrls.add(includedUrl). }
false;public;0;3;;public List<String> getIncludedUrls() {     return this.includedUrls. }
false;public;1;6;;@Override public void write(int b) throws IOException {     super.write(b).     super.flush().     setCommittedIfBufferSizeExceeded(). }
false;public;0;5;;@Override public void flush() throws IOException {     super.flush().     setCommitted(true). }
false;public;3;6;;@Override public void write(char[] buf, int off, int len) {     super.write(buf, off, len).     super.flush().     setCommittedIfBufferSizeExceeded(). }
false;public;3;6;;@Override public void write(String s, int off, int len) {     super.write(s, off, len).     super.flush().     setCommittedIfBufferSizeExceeded(). }
false;public;1;6;;@Override public void write(int c) {     super.write(c).     super.flush().     setCommittedIfBufferSizeExceeded(). }
false;public;0;5;;@Override public void flush() {     super.flush().     setCommitted(true). }
false;public;0;6;;@Override public void close() {     super.flush().     super.close().     setCommitted(true). }
