commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set up an expectation for a single HTTP request. The returned  * {@link ResponseActions} can be used to set up further expectations as  * well as to define the response.  * <p>This method may be invoked any number times before starting to make  * request through the underlying {@code RestTemplate} in order to set up  * all expected requests.  * @param matcher request matcher  * @return a representation of the expectation  */ ;/**  * Set up an expectation for a single HTTP request. The returned  * {@link ResponseActions} can be used to set up further expectations as  * well as to define the response.  * <p>This method may be invoked any number times before starting to make  * request through the underlying {@code RestTemplate} in order to set up  * all expected requests.  * @param matcher request matcher  * @return a representation of the expectation  */ public ResponseActions expect(RequestMatcher matcher) {     return expect(ExpectedCount.once(), matcher). }
true;public;2;3;/**  * An alternative to {@link #expect(RequestMatcher)} that also indicates how  * many times the request is expected to be executed.  * <p>When request expectations have an expected count greater than one, only  * the first execution is expected to match the order of declaration. Subsequent  * request executions may be inserted anywhere thereafter.  * @param count the expected count  * @param matcher request matcher  * @return a representation of the expectation  * @since 4.3  */ ;/**  * An alternative to {@link #expect(RequestMatcher)} that also indicates how  * many times the request is expected to be executed.  * <p>When request expectations have an expected count greater than one, only  * the first execution is expected to match the order of declaration. Subsequent  * request executions may be inserted anywhere thereafter.  * @param count the expected count  * @param matcher request matcher  * @return a representation of the expectation  * @since 4.3  */ public ResponseActions expect(ExpectedCount count, RequestMatcher matcher) {     return this.expectationManager.expectRequest(count, matcher). }
true;public;0;3;/**  * Verify that all expected requests set up via  * {@link #expect(RequestMatcher)} were indeed performed.  * @throws AssertionError when some expectations were not met  */ ;/**  * Verify that all expected requests set up via  * {@link #expect(RequestMatcher)} were indeed performed.  * @throws AssertionError when some expectations were not met  */ public void verify() {     this.expectationManager.verify(). }
true;public;0;3;/**  * Reset the internal state removing all expectations and recorded requests.  */ ;/**  * Reset the internal state removing all expectations and recorded requests.  */ public void reset() {     this.expectationManager.reset(). }
true;public,static;1;3;/**  * Return a builder for a {@code MockRestServiceServer} that should be used  * to reply to the given {@code RestTemplate}.  * @since 4.3  */ ;/**  * Return a builder for a {@code MockRestServiceServer} that should be used  * to reply to the given {@code RestTemplate}.  * @since 4.3  */ public static MockRestServiceServerBuilder bindTo(RestTemplate restTemplate) {     return new DefaultBuilder(restTemplate). }
true;public,static;1;4;/**  * Return a builder for a {@code MockRestServiceServer} that should be used  * to reply to the given {@code AsyncRestTemplate}.  * @since 4.3  * @deprecated see deprecation notice on  * {@link org.springframework.web.client.AsyncRestTemplate} itself  */ ;/**  * Return a builder for a {@code MockRestServiceServer} that should be used  * to reply to the given {@code AsyncRestTemplate}.  * @since 4.3  * @deprecated see deprecation notice on  * {@link org.springframework.web.client.AsyncRestTemplate} itself  */ @Deprecated public static MockRestServiceServerBuilder bindTo(org.springframework.web.client.AsyncRestTemplate asyncRestTemplate) {     return new DefaultBuilder(asyncRestTemplate). }
true;public,static;1;4;/**  * Return a builder for a {@code MockRestServiceServer} that should be used  * to reply to the given {@code RestGatewaySupport}.  * @since 4.3  */ ;/**  * Return a builder for a {@code MockRestServiceServer} that should be used  * to reply to the given {@code RestGatewaySupport}.  * @since 4.3  */ public static MockRestServiceServerBuilder bindTo(RestGatewaySupport restGateway) {     Assert.notNull(restGateway, "'gatewaySupport' must not be null").     return new DefaultBuilder(restGateway.getRestTemplate()). }
true;public,static;1;3;/**  * A shortcut for {@code bindTo(restTemplate).build()}.  * @param restTemplate the RestTemplate to set up for mock testing  * @return the mock server  */ ;/**  * A shortcut for {@code bindTo(restTemplate).build()}.  * @param restTemplate the RestTemplate to set up for mock testing  * @return the mock server  */ public static MockRestServiceServer createServer(RestTemplate restTemplate) {     return bindTo(restTemplate).build(). }
true;public,static;1;4;/**  * A shortcut for {@code bindTo(asyncRestTemplate).build()}.  * @param asyncRestTemplate the AsyncRestTemplate to set up for mock testing  * @return the created mock server  * @deprecated see deprecation notice on  * {@link org.springframework.web.client.AsyncRestTemplate} itself  */ ;/**  * A shortcut for {@code bindTo(asyncRestTemplate).build()}.  * @param asyncRestTemplate the AsyncRestTemplate to set up for mock testing  * @return the created mock server  * @deprecated see deprecation notice on  * {@link org.springframework.web.client.AsyncRestTemplate} itself  */ @Deprecated public static MockRestServiceServer createServer(org.springframework.web.client.AsyncRestTemplate asyncRestTemplate) {     return bindTo(asyncRestTemplate).build(). }
true;public,static;1;3;/**  * A shortcut for {@code bindTo(restGateway).build()}.  * @param restGateway the REST gateway to set up for mock testing  * @return the created mock server  */ ;/**  * A shortcut for {@code bindTo(restGateway).build()}.  * @param restGateway the REST gateway to set up for mock testing  * @return the created mock server  */ public static MockRestServiceServer createServer(RestGatewaySupport restGateway) {     return bindTo(restGateway).build(). }
true;;1;1;/**  * Whether to allow expected requests to be executed in any order not  * necessarily matching the order of declaration.  * <p>Effectively a shortcut for:<br>  * {@code builder.build(new UnorderedRequestExpectationManager)}.  * <p>By default this is set to {@code false}  * @param ignoreExpectOrder whether to ignore the order of expectations  */ ;/**  * Whether to allow expected requests to be executed in any order not  * necessarily matching the order of declaration.  * <p>Effectively a shortcut for:<br>  * {@code builder.build(new UnorderedRequestExpectationManager)}.  * <p>By default this is set to {@code false}  * @param ignoreExpectOrder whether to ignore the order of expectations  */ MockRestServiceServerBuilder ignoreExpectOrder(boolean ignoreExpectOrder).
true;;0;1;/**  * Use the {@link BufferingClientHttpRequestFactory} wrapper to buffer  * the input and output streams, and for example, allow multiple reads  * of the response body.  * @since 5.0.5  */ ;/**  * Use the {@link BufferingClientHttpRequestFactory} wrapper to buffer  * the input and output streams, and for example, allow multiple reads  * of the response body.  * @since 5.0.5  */ MockRestServiceServerBuilder bufferContent().
true;;0;1;/**  * Build the {@code MockRestServiceServer} and set up the underlying  * {@code RestTemplate} or {@code AsyncRestTemplate} with a  * {@link ClientHttpRequestFactory} that creates mock requests.  */ ;/**  * Build the {@code MockRestServiceServer} and set up the underlying  * {@code RestTemplate} or {@code AsyncRestTemplate} with a  * {@link ClientHttpRequestFactory} that creates mock requests.  */ MockRestServiceServer build().
true;;1;1;/**  * An overloaded build alternative that accepts a custom  * {@link RequestExpectationManager}.  */ ;/**  * An overloaded build alternative that accepts a custom  * {@link RequestExpectationManager}.  */ MockRestServiceServer build(RequestExpectationManager manager).
false;public;1;5;;@Override public MockRestServiceServerBuilder ignoreExpectOrder(boolean ignoreExpectOrder) {     this.ignoreExpectOrder = ignoreExpectOrder.     return this. }
false;public;0;5;;@Override public MockRestServiceServerBuilder bufferContent() {     this.bufferContent = true.     return this. }
false;public;0;9;;@Override public MockRestServiceServer build() {     if (this.ignoreExpectOrder) {         return build(new UnorderedRequestExpectationManager()).     } else {         return build(new SimpleRequestExpectationManager()).     } }
false;public;1;17;;@Override public MockRestServiceServer build(RequestExpectationManager manager) {     MockRestServiceServer server = new MockRestServiceServer(manager).     MockClientHttpRequestFactory factory = server.new MockClientHttpRequestFactory().     if (this.restTemplate != null) {         if (this.bufferContent) {             this.restTemplate.setRequestFactory(new BufferingClientHttpRequestFactory(factory)).         } else {             this.restTemplate.setRequestFactory(factory).         }     }     if (this.asyncRestTemplate != null) {         this.asyncRestTemplate.setAsyncRequestFactory(factory).     }     return server. }
false;public;2;4;;@Override public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) {     return createRequestInternal(uri, httpMethod). }
false;public;2;4;;@Override public org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) {     return createRequestInternal(uri, httpMethod). }
false;protected;0;6;;@Override protected ClientHttpResponse executeInternal() throws IOException {     ClientHttpResponse response = expectationManager.validateRequest(this).     setResponse(response).     return response. }
false;private;2;14;;private org.springframework.mock.http.client.MockAsyncClientHttpRequest createRequestInternal(URI uri, HttpMethod method) {     Assert.notNull(uri, "'uri' must not be null").     Assert.notNull(method, "'httpMethod' must not be null").     return new org.springframework.mock.http.client.MockAsyncClientHttpRequest(method, uri) {          @Override         protected ClientHttpResponse executeInternal() throws IOException {             ClientHttpResponse response = expectationManager.validateRequest(this).             setResponse(response).             return response.         }     }. }
