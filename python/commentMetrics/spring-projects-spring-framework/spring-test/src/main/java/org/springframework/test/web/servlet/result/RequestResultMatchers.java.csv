commented;modifiers;parameterAmount;loc;comment;code
true;public;0;6;/**  * Assert whether asynchronous processing started, usually as a result of a  * controller method returning {@link Callable} or {@link DeferredResult}.  * <p>The test will await the completion of a {@code Callable} so that  * {@link #asyncResult(Matcher)} can be used to assert the resulting value.  * Neither a {@code Callable} nor a {@code DeferredResult} will complete  * processing all the way since a {@link MockHttpServletRequest} does not  * perform asynchronous dispatches.  */ ;/**  * Assert whether asynchronous processing started, usually as a result of a  * controller method returning {@link Callable} or {@link DeferredResult}.  * <p>The test will await the completion of a {@code Callable} so that  * {@link #asyncResult(Matcher)} can be used to assert the resulting value.  * Neither a {@code Callable} nor a {@code DeferredResult} will complete  * processing all the way since a {@link MockHttpServletRequest} does not  * perform asynchronous dispatches.  */ public ResultMatcher asyncStarted() {     return result -> {         HttpServletRequest request = result.getRequest().         assertAsyncStarted(request).     }. }
true;public;0;6;/**  * Assert that asynchronous processing was not started.  * @see #asyncStarted()  */ ;/**  * Assert that asynchronous processing was not started.  * @see #asyncStarted()  */ public ResultMatcher asyncNotStarted() {     return result -> {         HttpServletRequest request = result.getRequest().         assertEquals("Async started", false, request.isAsyncStarted()).     }. }
true;public;1;8;/**  * Assert the result from asynchronous processing with the given matcher.  * <p>This method can be used when a controller method returns {@link Callable}  * or {@link WebAsyncTask}.  */ ;/**  * Assert the result from asynchronous processing with the given matcher.  * <p>This method can be used when a controller method returns {@link Callable}  * or {@link WebAsyncTask}.  */ @SuppressWarnings("unchecked") public <T> ResultMatcher asyncResult(final Matcher<T> matcher) {     return result -> {         HttpServletRequest request = result.getRequest().         assertAsyncStarted(request).         assertThat("Async result", (T) result.getAsyncResult(), matcher).     }. }
true;public;1;7;/**  * Assert the result from asynchronous processing.  * <p>This method can be used when a controller method returns {@link Callable}  * or {@link WebAsyncTask}. The value matched is the value returned from the  * {@code Callable} or the exception raised.  */ ;/**  * Assert the result from asynchronous processing.  * <p>This method can be used when a controller method returns {@link Callable}  * or {@link WebAsyncTask}. The value matched is the value returned from the  * {@code Callable} or the exception raised.  */ public <T> ResultMatcher asyncResult(final Object expectedResult) {     return result -> {         HttpServletRequest request = result.getRequest().         assertAsyncStarted(request).         assertEquals("Async result", expectedResult, result.getAsyncResult()).     }. }
true;public;2;7;/**  * Assert a request attribute value with the given Hamcrest {@link Matcher}.  */ ;/**  * Assert a request attribute value with the given Hamcrest {@link Matcher}.  */ @SuppressWarnings("unchecked") public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {     return result -> {         T value = (T) result.getRequest().getAttribute(name).         assertThat("Request attribute '" + name + "'", value, matcher).     }. }
true;public;2;4;/**  * Assert a request attribute value.  */ ;/**  * Assert a request attribute value.  */ public <T> ResultMatcher attribute(final String name, final Object expectedValue) {     return result -> assertEquals("Request attribute '" + name + "'", expectedValue, result.getRequest().getAttribute(name)). }
true;public;2;9;/**  * Assert a session attribute value with the given Hamcrest {@link Matcher}.  */ ;/**  * Assert a session attribute value with the given Hamcrest {@link Matcher}.  */ @SuppressWarnings("unchecked") public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher) {     return result -> {         HttpSession session = result.getRequest().getSession().         Assert.state(session != null, "No HttpSession").         T value = (T) session.getAttribute(name).         assertThat("Session attribute '" + name + "'", value, matcher).     }. }
true;public;2;7;/**  * Assert a session attribute value.  */ ;/**  * Assert a session attribute value.  */ public <T> ResultMatcher sessionAttribute(final String name, final Object value) {     return result -> {         HttpSession session = result.getRequest().getSession().         Assert.state(session != null, "No HttpSession").         assertEquals("Session attribute '" + name + "'", value, session.getAttribute(name)).     }. }
false;private,static;1;3;;private static void assertAsyncStarted(HttpServletRequest request) {     assertEquals("Async started", true, request.isAsyncStarted()). }
