# id;timestamp;commentText;codeText;commentWords;codeWords
RequestResultMatchers -> public <T> ResultMatcher asyncResult(final Object expectedResult);1383669853;Assert the result from asynchronous processing._This method can be used when a controller method returns {@link Callable}_or {@link WebAsyncTask}. The value matched is the value returned from the_{@code Callable} or the exception raised.;public <T> ResultMatcher asyncResult(final Object expectedResult) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", true, request.isAsyncStarted())__				assertEquals("Async result", expectedResult, result.getAsyncResult())__			}_		}__	};assert,the,result,from,asynchronous,processing,this,method,can,be,used,when,a,controller,method,returns,link,callable,or,link,web,async,task,the,value,matched,is,the,value,returned,from,the,code,callable,or,the,exception,raised;public,t,result,matcher,async,result,final,object,expected,result,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,true,request,is,async,started,assert,equals,async,result,expected,result,result,get,async,result
RequestResultMatchers -> public <T> ResultMatcher asyncResult(final Object expectedResult);1413848647;Assert the result from asynchronous processing._This method can be used when a controller method returns {@link Callable}_or {@link WebAsyncTask}. The value matched is the value returned from the_{@code Callable} or the exception raised.;public <T> ResultMatcher asyncResult(final Object expectedResult) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", true, request.isAsyncStarted())__				assertEquals("Async result", expectedResult, result.getAsyncResult())__			}_		}__	};assert,the,result,from,asynchronous,processing,this,method,can,be,used,when,a,controller,method,returns,link,callable,or,link,web,async,task,the,value,matched,is,the,value,returned,from,the,code,callable,or,the,exception,raised;public,t,result,matcher,async,result,final,object,expected,result,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,true,request,is,async,started,assert,equals,async,result,expected,result,result,get,async,result
RequestResultMatchers -> public <T> ResultMatcher asyncResult(final Object expectedResult);1427238287;Assert the result from asynchronous processing._This method can be used when a controller method returns {@link Callable}_or {@link WebAsyncTask}. The value matched is the value returned from the_{@code Callable} or the exception raised.;public <T> ResultMatcher asyncResult(final Object expectedResult) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", true, request.isAsyncStarted())__				assertEquals("Async result", expectedResult, result.getAsyncResult())__			}_		}__	};assert,the,result,from,asynchronous,processing,this,method,can,be,used,when,a,controller,method,returns,link,callable,or,link,web,async,task,the,value,matched,is,the,value,returned,from,the,code,callable,or,the,exception,raised;public,t,result,matcher,async,result,final,object,expected,result,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,true,request,is,async,started,assert,equals,async,result,expected,result,result,get,async,result
RequestResultMatchers -> public <T> ResultMatcher asyncResult(final Object expectedResult);1437424890;Assert the result from asynchronous processing._This method can be used when a controller method returns {@link Callable}_or {@link WebAsyncTask}. The value matched is the value returned from the_{@code Callable} or the exception raised.;public <T> ResultMatcher asyncResult(final Object expectedResult) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", true, request.isAsyncStarted())__				assertEquals("Async result", expectedResult, result.getAsyncResult())__			}_		}__	};assert,the,result,from,asynchronous,processing,this,method,can,be,used,when,a,controller,method,returns,link,callable,or,link,web,async,task,the,value,matched,is,the,value,returned,from,the,code,callable,or,the,exception,raised;public,t,result,matcher,async,result,final,object,expected,result,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,true,request,is,async,started,assert,equals,async,result,expected,result,result,get,async,result
RequestResultMatchers -> public <T> ResultMatcher asyncResult(final Object expectedResult);1437576373;Assert the result from asynchronous processing._<p>This method can be used when a controller method returns {@link Callable}_or {@link WebAsyncTask}. The value matched is the value returned from the_{@code Callable} or the exception raised.;public <T> ResultMatcher asyncResult(final Object expectedResult) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertAsyncStarted(request)__				assertEquals("Async result", expectedResult, result.getAsyncResult())__			}_		}__	};assert,the,result,from,asynchronous,processing,p,this,method,can,be,used,when,a,controller,method,returns,link,callable,or,link,web,async,task,the,value,matched,is,the,value,returned,from,the,code,callable,or,the,exception,raised;public,t,result,matcher,async,result,final,object,expected,result,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,async,started,request,assert,equals,async,result,expected,result,result,get,async,result
RequestResultMatchers -> public <T> ResultMatcher asyncResult(final Object expectedResult);1437576988;Assert the result from asynchronous processing._<p>This method can be used when a controller method returns {@link Callable}_or {@link WebAsyncTask}. The value matched is the value returned from the_{@code Callable} or the exception raised.;public <T> ResultMatcher asyncResult(final Object expectedResult) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertAsyncStarted(request)__				assertEquals("Async result", expectedResult, result.getAsyncResult())__			}_		}__	};assert,the,result,from,asynchronous,processing,p,this,method,can,be,used,when,a,controller,method,returns,link,callable,or,link,web,async,task,the,value,matched,is,the,value,returned,from,the,code,callable,or,the,exception,raised;public,t,result,matcher,async,result,final,object,expected,result,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,async,started,request,assert,equals,async,result,expected,result,result,get,async,result
RequestResultMatchers -> public <T> ResultMatcher asyncResult(final Object expectedResult);1493235170;Assert the result from asynchronous processing._<p>This method can be used when a controller method returns {@link Callable}_or {@link WebAsyncTask}. The value matched is the value returned from the_{@code Callable} or the exception raised.;public <T> ResultMatcher asyncResult(final Object expectedResult) {_		return result -> {_			HttpServletRequest request = result.getRequest()__			assertAsyncStarted(request)__			assertEquals("Async result", expectedResult, result.getAsyncResult())__		}__	};assert,the,result,from,asynchronous,processing,p,this,method,can,be,used,when,a,controller,method,returns,link,callable,or,link,web,async,task,the,value,matched,is,the,value,returned,from,the,code,callable,or,the,exception,raised;public,t,result,matcher,async,result,final,object,expected,result,return,result,http,servlet,request,request,result,get,request,assert,async,started,request,assert,equals,async,result,expected,result,result,get,async,result
RequestResultMatchers -> public <T> ResultMatcher asyncResult(final Object expectedResult);1496955179;Assert the result from asynchronous processing._<p>This method can be used when a controller method returns {@link Callable}_or {@link WebAsyncTask}. The value matched is the value returned from the_{@code Callable} or the exception raised.;public <T> ResultMatcher asyncResult(final Object expectedResult) {_		return result -> {_			HttpServletRequest request = result.getRequest()__			assertAsyncStarted(request)__			assertEquals("Async result", expectedResult, result.getAsyncResult())__		}__	};assert,the,result,from,asynchronous,processing,p,this,method,can,be,used,when,a,controller,method,returns,link,callable,or,link,web,async,task,the,value,matched,is,the,value,returned,from,the,code,callable,or,the,exception,raised;public,t,result,matcher,async,result,final,object,expected,result,return,result,http,servlet,request,request,result,get,request,assert,async,started,request,assert,equals,async,result,expected,result,result,get,async,result
RequestResultMatchers -> public <T> ResultMatcher asyncResult(final Object expectedResult);1499023719;Assert the result from asynchronous processing._<p>This method can be used when a controller method returns {@link Callable}_or {@link WebAsyncTask}. The value matched is the value returned from the_{@code Callable} or the exception raised.;public <T> ResultMatcher asyncResult(final Object expectedResult) {_		return result -> {_			HttpServletRequest request = result.getRequest()__			assertAsyncStarted(request)__			assertEquals("Async result", expectedResult, result.getAsyncResult())__		}__	};assert,the,result,from,asynchronous,processing,p,this,method,can,be,used,when,a,controller,method,returns,link,callable,or,link,web,async,task,the,value,matched,is,the,value,returned,from,the,code,callable,or,the,exception,raised;public,t,result,matcher,async,result,final,object,expected,result,return,result,http,servlet,request,request,result,get,request,assert,async,started,request,assert,equals,async,result,expected,result,result,get,async,result
RequestResultMatchers -> public <T> ResultMatcher asyncResult(final Object expectedResult);1530174524;Assert the result from asynchronous processing._<p>This method can be used when a controller method returns {@link Callable}_or {@link WebAsyncTask}. The value matched is the value returned from the_{@code Callable} or the exception raised.;public <T> ResultMatcher asyncResult(final Object expectedResult) {_		return result -> {_			HttpServletRequest request = result.getRequest()__			assertAsyncStarted(request)__			assertEquals("Async result", expectedResult, result.getAsyncResult())__		}__	};assert,the,result,from,asynchronous,processing,p,this,method,can,be,used,when,a,controller,method,returns,link,callable,or,link,web,async,task,the,value,matched,is,the,value,returned,from,the,code,callable,or,the,exception,raised;public,t,result,matcher,async,result,final,object,expected,result,return,result,http,servlet,request,request,result,get,request,assert,async,started,request,assert,equals,async,result,expected,result,result,get,async,result
RequestResultMatchers -> public ResultMatcher asyncNotStarted();1383669853;Assert that asynchronous processing was not start._@see #asyncStarted();public ResultMatcher asyncNotStarted() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", false, request.isAsyncStarted())__			}_		}__	};assert,that,asynchronous,processing,was,not,start,see,async,started;public,result,matcher,async,not,started,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,false,request,is,async,started
RequestResultMatchers -> public ResultMatcher asyncNotStarted();1413848647;Assert that asynchronous processing was not start._@see #asyncStarted();public ResultMatcher asyncNotStarted() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", false, request.isAsyncStarted())__			}_		}__	};assert,that,asynchronous,processing,was,not,start,see,async,started;public,result,matcher,async,not,started,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,false,request,is,async,started
RequestResultMatchers -> public ResultMatcher asyncNotStarted();1427238287;Assert that asynchronous processing was not start._@see #asyncStarted();public ResultMatcher asyncNotStarted() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", false, request.isAsyncStarted())__			}_		}__	};assert,that,asynchronous,processing,was,not,start,see,async,started;public,result,matcher,async,not,started,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,false,request,is,async,started
RequestResultMatchers -> public ResultMatcher asyncNotStarted();1437424890;Assert that asynchronous processing was not start._@see #asyncStarted();public ResultMatcher asyncNotStarted() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", false, request.isAsyncStarted())__			}_		}__	};assert,that,asynchronous,processing,was,not,start,see,async,started;public,result,matcher,async,not,started,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,false,request,is,async,started
RequestResultMatchers -> public ResultMatcher asyncNotStarted();1437576373;Assert that asynchronous processing was not started._@see #asyncStarted();public ResultMatcher asyncNotStarted() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", false, request.isAsyncStarted())__			}_		}__	};assert,that,asynchronous,processing,was,not,started,see,async,started;public,result,matcher,async,not,started,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,false,request,is,async,started
RequestResultMatchers -> public ResultMatcher asyncNotStarted();1437576988;Assert that asynchronous processing was not started._@see #asyncStarted();public ResultMatcher asyncNotStarted() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", false, request.isAsyncStarted())__			}_		}__	};assert,that,asynchronous,processing,was,not,started,see,async,started;public,result,matcher,async,not,started,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,false,request,is,async,started
RequestResultMatchers -> public ResultMatcher asyncNotStarted();1493235170;Assert that asynchronous processing was not started._@see #asyncStarted();public ResultMatcher asyncNotStarted() {_		return result -> {_			HttpServletRequest request = result.getRequest()__			assertEquals("Async started", false, request.isAsyncStarted())__		}__	};assert,that,asynchronous,processing,was,not,started,see,async,started;public,result,matcher,async,not,started,return,result,http,servlet,request,request,result,get,request,assert,equals,async,started,false,request,is,async,started
RequestResultMatchers -> public ResultMatcher asyncNotStarted();1496955179;Assert that asynchronous processing was not started._@see #asyncStarted();public ResultMatcher asyncNotStarted() {_		return result -> {_			HttpServletRequest request = result.getRequest()__			assertEquals("Async started", false, request.isAsyncStarted())__		}__	};assert,that,asynchronous,processing,was,not,started,see,async,started;public,result,matcher,async,not,started,return,result,http,servlet,request,request,result,get,request,assert,equals,async,started,false,request,is,async,started
RequestResultMatchers -> public ResultMatcher asyncNotStarted();1499023719;Assert that asynchronous processing was not started._@see #asyncStarted();public ResultMatcher asyncNotStarted() {_		return result -> {_			HttpServletRequest request = result.getRequest()__			assertEquals("Async started", false, request.isAsyncStarted())__		}__	};assert,that,asynchronous,processing,was,not,started,see,async,started;public,result,matcher,async,not,started,return,result,http,servlet,request,request,result,get,request,assert,equals,async,started,false,request,is,async,started
RequestResultMatchers -> public ResultMatcher asyncNotStarted();1530174524;Assert that asynchronous processing was not started._@see #asyncStarted();public ResultMatcher asyncNotStarted() {_		return result -> {_			HttpServletRequest request = result.getRequest()__			assertEquals("Async started", false, request.isAsyncStarted())__		}__	};assert,that,asynchronous,processing,was,not,started,see,async,started;public,result,matcher,async,not,started,return,result,http,servlet,request,request,result,get,request,assert,equals,async,started,false,request,is,async,started
RequestResultMatchers -> public ResultMatcher asyncStarted();1383669853;Assert a request attribute value with the given Hamcrest {@link Matcher}._Whether asynchronous processing started, usually as a result of a_controller method returning {@link Callable} or {@link DeferredResult}._The test will await the completion of a {@code Callable} so that_{@link #asyncResult(Matcher)} can be used to assert the resulting value._Neither a {@code Callable} nor a {@code DeferredResult} will complete_processing all the way since a {@link MockHttpServletRequest} does not_perform asynchronous dispatches.;public ResultMatcher asyncStarted() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", true, request.isAsyncStarted())__			}_		}__	};assert,a,request,attribute,value,with,the,given,hamcrest,link,matcher,whether,asynchronous,processing,started,usually,as,a,result,of,a,controller,method,returning,link,callable,or,link,deferred,result,the,test,will,await,the,completion,of,a,code,callable,so,that,link,async,result,matcher,can,be,used,to,assert,the,resulting,value,neither,a,code,callable,nor,a,code,deferred,result,will,complete,processing,all,the,way,since,a,link,mock,http,servlet,request,does,not,perform,asynchronous,dispatches;public,result,matcher,async,started,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,true,request,is,async,started
RequestResultMatchers -> public ResultMatcher asyncStarted();1413848647;Assert a request attribute value with the given Hamcrest {@link Matcher}._Whether asynchronous processing started, usually as a result of a_controller method returning {@link Callable} or {@link DeferredResult}._The test will await the completion of a {@code Callable} so that_{@link #asyncResult(Matcher)} can be used to assert the resulting value._Neither a {@code Callable} nor a {@code DeferredResult} will complete_processing all the way since a {@link MockHttpServletRequest} does not_perform asynchronous dispatches.;public ResultMatcher asyncStarted() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", true, request.isAsyncStarted())__			}_		}__	};assert,a,request,attribute,value,with,the,given,hamcrest,link,matcher,whether,asynchronous,processing,started,usually,as,a,result,of,a,controller,method,returning,link,callable,or,link,deferred,result,the,test,will,await,the,completion,of,a,code,callable,so,that,link,async,result,matcher,can,be,used,to,assert,the,resulting,value,neither,a,code,callable,nor,a,code,deferred,result,will,complete,processing,all,the,way,since,a,link,mock,http,servlet,request,does,not,perform,asynchronous,dispatches;public,result,matcher,async,started,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,true,request,is,async,started
RequestResultMatchers -> public ResultMatcher asyncStarted();1427238287;Assert a request attribute value with the given Hamcrest {@link Matcher}._Whether asynchronous processing started, usually as a result of a_controller method returning {@link Callable} or {@link DeferredResult}._The test will await the completion of a {@code Callable} so that_{@link #asyncResult(Matcher)} can be used to assert the resulting value._Neither a {@code Callable} nor a {@code DeferredResult} will complete_processing all the way since a {@link MockHttpServletRequest} does not_perform asynchronous dispatches.;public ResultMatcher asyncStarted() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", true, request.isAsyncStarted())__			}_		}__	};assert,a,request,attribute,value,with,the,given,hamcrest,link,matcher,whether,asynchronous,processing,started,usually,as,a,result,of,a,controller,method,returning,link,callable,or,link,deferred,result,the,test,will,await,the,completion,of,a,code,callable,so,that,link,async,result,matcher,can,be,used,to,assert,the,resulting,value,neither,a,code,callable,nor,a,code,deferred,result,will,complete,processing,all,the,way,since,a,link,mock,http,servlet,request,does,not,perform,asynchronous,dispatches;public,result,matcher,async,started,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,true,request,is,async,started
RequestResultMatchers -> public ResultMatcher asyncStarted();1437424890;Assert a request attribute value with the given Hamcrest {@link Matcher}._Whether asynchronous processing started, usually as a result of a_controller method returning {@link Callable} or {@link DeferredResult}._The test will await the completion of a {@code Callable} so that_{@link #asyncResult(Matcher)} can be used to assert the resulting value._Neither a {@code Callable} nor a {@code DeferredResult} will complete_processing all the way since a {@link MockHttpServletRequest} does not_perform asynchronous dispatches.;public ResultMatcher asyncStarted() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", true, request.isAsyncStarted())__			}_		}__	};assert,a,request,attribute,value,with,the,given,hamcrest,link,matcher,whether,asynchronous,processing,started,usually,as,a,result,of,a,controller,method,returning,link,callable,or,link,deferred,result,the,test,will,await,the,completion,of,a,code,callable,so,that,link,async,result,matcher,can,be,used,to,assert,the,resulting,value,neither,a,code,callable,nor,a,code,deferred,result,will,complete,processing,all,the,way,since,a,link,mock,http,servlet,request,does,not,perform,asynchronous,dispatches;public,result,matcher,async,started,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,true,request,is,async,started
RequestResultMatchers -> public ResultMatcher asyncStarted();1437576373;Assert whether asynchronous processing started, usually as a result of a_controller method returning {@link Callable} or {@link DeferredResult}._<p>The test will await the completion of a {@code Callable} so that_{@link #asyncResult(Matcher)} can be used to assert the resulting value._Neither a {@code Callable} nor a {@code DeferredResult} will complete_processing all the way since a {@link MockHttpServletRequest} does not_perform asynchronous dispatches.;public ResultMatcher asyncStarted() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertAsyncStarted(request)__			}_		}__	};assert,whether,asynchronous,processing,started,usually,as,a,result,of,a,controller,method,returning,link,callable,or,link,deferred,result,p,the,test,will,await,the,completion,of,a,code,callable,so,that,link,async,result,matcher,can,be,used,to,assert,the,resulting,value,neither,a,code,callable,nor,a,code,deferred,result,will,complete,processing,all,the,way,since,a,link,mock,http,servlet,request,does,not,perform,asynchronous,dispatches;public,result,matcher,async,started,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,async,started,request
RequestResultMatchers -> public ResultMatcher asyncStarted();1437576988;Assert whether asynchronous processing started, usually as a result of a_controller method returning {@link Callable} or {@link DeferredResult}._<p>The test will await the completion of a {@code Callable} so that_{@link #asyncResult(Matcher)} can be used to assert the resulting value._Neither a {@code Callable} nor a {@code DeferredResult} will complete_processing all the way since a {@link MockHttpServletRequest} does not_perform asynchronous dispatches.;public ResultMatcher asyncStarted() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertAsyncStarted(request)__			}_		}__	};assert,whether,asynchronous,processing,started,usually,as,a,result,of,a,controller,method,returning,link,callable,or,link,deferred,result,p,the,test,will,await,the,completion,of,a,code,callable,so,that,link,async,result,matcher,can,be,used,to,assert,the,resulting,value,neither,a,code,callable,nor,a,code,deferred,result,will,complete,processing,all,the,way,since,a,link,mock,http,servlet,request,does,not,perform,asynchronous,dispatches;public,result,matcher,async,started,return,new,result,matcher,override,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,async,started,request
RequestResultMatchers -> public ResultMatcher asyncStarted();1493235170;Assert whether asynchronous processing started, usually as a result of a_controller method returning {@link Callable} or {@link DeferredResult}._<p>The test will await the completion of a {@code Callable} so that_{@link #asyncResult(Matcher)} can be used to assert the resulting value._Neither a {@code Callable} nor a {@code DeferredResult} will complete_processing all the way since a {@link MockHttpServletRequest} does not_perform asynchronous dispatches.;public ResultMatcher asyncStarted() {_		return result -> {_			HttpServletRequest request = result.getRequest()__			assertAsyncStarted(request)__		}__	};assert,whether,asynchronous,processing,started,usually,as,a,result,of,a,controller,method,returning,link,callable,or,link,deferred,result,p,the,test,will,await,the,completion,of,a,code,callable,so,that,link,async,result,matcher,can,be,used,to,assert,the,resulting,value,neither,a,code,callable,nor,a,code,deferred,result,will,complete,processing,all,the,way,since,a,link,mock,http,servlet,request,does,not,perform,asynchronous,dispatches;public,result,matcher,async,started,return,result,http,servlet,request,request,result,get,request,assert,async,started,request
RequestResultMatchers -> public ResultMatcher asyncStarted();1496955179;Assert whether asynchronous processing started, usually as a result of a_controller method returning {@link Callable} or {@link DeferredResult}._<p>The test will await the completion of a {@code Callable} so that_{@link #asyncResult(Matcher)} can be used to assert the resulting value._Neither a {@code Callable} nor a {@code DeferredResult} will complete_processing all the way since a {@link MockHttpServletRequest} does not_perform asynchronous dispatches.;public ResultMatcher asyncStarted() {_		return result -> {_			HttpServletRequest request = result.getRequest()__			assertAsyncStarted(request)__		}__	};assert,whether,asynchronous,processing,started,usually,as,a,result,of,a,controller,method,returning,link,callable,or,link,deferred,result,p,the,test,will,await,the,completion,of,a,code,callable,so,that,link,async,result,matcher,can,be,used,to,assert,the,resulting,value,neither,a,code,callable,nor,a,code,deferred,result,will,complete,processing,all,the,way,since,a,link,mock,http,servlet,request,does,not,perform,asynchronous,dispatches;public,result,matcher,async,started,return,result,http,servlet,request,request,result,get,request,assert,async,started,request
RequestResultMatchers -> public ResultMatcher asyncStarted();1499023719;Assert whether asynchronous processing started, usually as a result of a_controller method returning {@link Callable} or {@link DeferredResult}._<p>The test will await the completion of a {@code Callable} so that_{@link #asyncResult(Matcher)} can be used to assert the resulting value._Neither a {@code Callable} nor a {@code DeferredResult} will complete_processing all the way since a {@link MockHttpServletRequest} does not_perform asynchronous dispatches.;public ResultMatcher asyncStarted() {_		return result -> {_			HttpServletRequest request = result.getRequest()__			assertAsyncStarted(request)__		}__	};assert,whether,asynchronous,processing,started,usually,as,a,result,of,a,controller,method,returning,link,callable,or,link,deferred,result,p,the,test,will,await,the,completion,of,a,code,callable,so,that,link,async,result,matcher,can,be,used,to,assert,the,resulting,value,neither,a,code,callable,nor,a,code,deferred,result,will,complete,processing,all,the,way,since,a,link,mock,http,servlet,request,does,not,perform,asynchronous,dispatches;public,result,matcher,async,started,return,result,http,servlet,request,request,result,get,request,assert,async,started,request
RequestResultMatchers -> public ResultMatcher asyncStarted();1530174524;Assert whether asynchronous processing started, usually as a result of a_controller method returning {@link Callable} or {@link DeferredResult}._<p>The test will await the completion of a {@code Callable} so that_{@link #asyncResult(Matcher)} can be used to assert the resulting value._Neither a {@code Callable} nor a {@code DeferredResult} will complete_processing all the way since a {@link MockHttpServletRequest} does not_perform asynchronous dispatches.;public ResultMatcher asyncStarted() {_		return result -> {_			HttpServletRequest request = result.getRequest()__			assertAsyncStarted(request)__		}__	};assert,whether,asynchronous,processing,started,usually,as,a,result,of,a,controller,method,returning,link,callable,or,link,deferred,result,p,the,test,will,await,the,completion,of,a,code,callable,so,that,link,async,result,matcher,can,be,used,to,assert,the,resulting,value,neither,a,code,callable,nor,a,code,deferred,result,will,complete,processing,all,the,way,since,a,link,mock,http,servlet,request,does,not,perform,asynchronous,dispatches;public,result,matcher,async,started,return,result,http,servlet,request,request,result,get,request,assert,async,started,request
RequestResultMatchers -> public <T> ResultMatcher sessionAttribute(final String name, final Object value);1383669853;Assert a session attribute value..;public <T> ResultMatcher sessionAttribute(final String name, final Object value) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				assertEquals("Request attribute", value, result.getRequest().getSession().getAttribute(name))__			}_		}__	};assert,a,session,attribute,value;public,t,result,matcher,session,attribute,final,string,name,final,object,value,return,new,result,matcher,override,public,void,match,mvc,result,result,assert,equals,request,attribute,value,result,get,request,get,session,get,attribute,name
RequestResultMatchers -> public <T> ResultMatcher sessionAttribute(final String name, final Object value);1413848647;Assert a session attribute value..;public <T> ResultMatcher sessionAttribute(final String name, final Object value) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				assertEquals("Request attribute", value, result.getRequest().getSession().getAttribute(name))__			}_		}__	};assert,a,session,attribute,value;public,t,result,matcher,session,attribute,final,string,name,final,object,value,return,new,result,matcher,override,public,void,match,mvc,result,result,assert,equals,request,attribute,value,result,get,request,get,session,get,attribute,name
RequestResultMatchers -> public <T> ResultMatcher sessionAttribute(final String name, final Object value);1427238287;Assert a session attribute value..;public <T> ResultMatcher sessionAttribute(final String name, final Object value) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				assertEquals("Request attribute", value, result.getRequest().getSession().getAttribute(name))__			}_		}__	};assert,a,session,attribute,value;public,t,result,matcher,session,attribute,final,string,name,final,object,value,return,new,result,matcher,override,public,void,match,mvc,result,result,assert,equals,request,attribute,value,result,get,request,get,session,get,attribute,name
RequestResultMatchers -> public <T> ResultMatcher sessionAttribute(final String name, final Object value);1437424890;Assert a session attribute value..;public <T> ResultMatcher sessionAttribute(final String name, final Object value) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				assertEquals("Request attribute", value, result.getRequest().getSession().getAttribute(name))__			}_		}__	};assert,a,session,attribute,value;public,t,result,matcher,session,attribute,final,string,name,final,object,value,return,new,result,matcher,override,public,void,match,mvc,result,result,assert,equals,request,attribute,value,result,get,request,get,session,get,attribute,name
RequestResultMatchers -> public <T> ResultMatcher sessionAttribute(final String name, final Object value);1437576373;Assert a session attribute value.;public <T> ResultMatcher sessionAttribute(final String name, final Object value) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				assertEquals("Session attribute", value, result.getRequest().getSession().getAttribute(name))__			}_		}__	};assert,a,session,attribute,value;public,t,result,matcher,session,attribute,final,string,name,final,object,value,return,new,result,matcher,override,public,void,match,mvc,result,result,assert,equals,session,attribute,value,result,get,request,get,session,get,attribute,name
RequestResultMatchers -> public <T> ResultMatcher sessionAttribute(final String name, final Object value);1437576988;Assert a session attribute value.;public <T> ResultMatcher sessionAttribute(final String name, final Object value) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				assertEquals("Session attribute '" + name + "'", value, result.getRequest().getSession().getAttribute(name))__			}_		}__	};assert,a,session,attribute,value;public,t,result,matcher,session,attribute,final,string,name,final,object,value,return,new,result,matcher,override,public,void,match,mvc,result,result,assert,equals,session,attribute,name,value,result,get,request,get,session,get,attribute,name
RequestResultMatchers -> public <T> ResultMatcher sessionAttribute(final String name, final Object value);1499023719;Assert a session attribute value.;public <T> ResultMatcher sessionAttribute(final String name, final Object value) {_		return result -> {_			HttpSession session = result.getRequest().getSession()__			Assert.state(session != null, "No HttpSession")__			assertEquals("Session attribute '" + name + "'", value, session.getAttribute(name))__		}__	};assert,a,session,attribute,value;public,t,result,matcher,session,attribute,final,string,name,final,object,value,return,result,http,session,session,result,get,request,get,session,assert,state,session,null,no,http,session,assert,equals,session,attribute,name,value,session,get,attribute,name
RequestResultMatchers -> public <T> ResultMatcher sessionAttribute(final String name, final Object value);1530174524;Assert a session attribute value.;public <T> ResultMatcher sessionAttribute(final String name, final Object value) {_		return result -> {_			HttpSession session = result.getRequest().getSession()__			Assert.state(session != null, "No HttpSession")__			assertEquals("Session attribute '" + name + "'", value, session.getAttribute(name))__		}__	};assert,a,session,attribute,value;public,t,result,matcher,session,attribute,final,string,name,final,object,value,return,result,http,session,session,result,get,request,get,session,assert,state,session,null,no,http,session,assert,equals,session,attribute,name,value,session,get,attribute,name
RequestResultMatchers -> protected RequestResultMatchers();1383669853;Protected constructor._Use {@link MockMvcResultMatchers#request()}.;protected RequestResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,request;protected,request,result,matchers
RequestResultMatchers -> protected RequestResultMatchers();1413848647;Protected constructor._Use {@link MockMvcResultMatchers#request()}.;protected RequestResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,request;protected,request,result,matchers
RequestResultMatchers -> protected RequestResultMatchers();1427238287;Protected constructor._Use {@link MockMvcResultMatchers#request()}.;protected RequestResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,request;protected,request,result,matchers
RequestResultMatchers -> protected RequestResultMatchers();1437424890;Protected constructor._Use {@link MockMvcResultMatchers#request()}.;protected RequestResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,request;protected,request,result,matchers
RequestResultMatchers -> protected RequestResultMatchers();1437576373;Protected constructor._<p>Use {@link MockMvcResultMatchers#request()}.;protected RequestResultMatchers() {_	};protected,constructor,p,use,link,mock,mvc,result,matchers,request;protected,request,result,matchers
RequestResultMatchers -> protected RequestResultMatchers();1437576988;Protected constructor._<p>Use {@link MockMvcResultMatchers#request()}.;protected RequestResultMatchers() {_	};protected,constructor,p,use,link,mock,mvc,result,matchers,request;protected,request,result,matchers
RequestResultMatchers -> protected RequestResultMatchers();1493235170;Protected constructor._<p>Use {@link MockMvcResultMatchers#request()}.;protected RequestResultMatchers() {_	};protected,constructor,p,use,link,mock,mvc,result,matchers,request;protected,request,result,matchers
RequestResultMatchers -> protected RequestResultMatchers();1496955179;Protected constructor._<p>Use {@link MockMvcResultMatchers#request()}.;protected RequestResultMatchers() {_	};protected,constructor,p,use,link,mock,mvc,result,matchers,request;protected,request,result,matchers
RequestResultMatchers -> protected RequestResultMatchers();1499023719;Protected constructor._<p>Use {@link MockMvcResultMatchers#request()}.;protected RequestResultMatchers() {_	};protected,constructor,p,use,link,mock,mvc,result,matchers,request;protected,request,result,matchers
RequestResultMatchers -> protected RequestResultMatchers();1530174524;Protected constructor._<p>Use {@link MockMvcResultMatchers#request()}.;protected RequestResultMatchers() {_	};protected,constructor,p,use,link,mock,mvc,result,matchers,request;protected,request,result,matchers
RequestResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher sessionAttribute(final String name, final Object value);1493235170;Assert a session attribute value.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher sessionAttribute(final String name, final Object value) {_		return result ->_				assertEquals("Session attribute '" + name + "'", value, result.getRequest().getSession().getAttribute(name))__	};assert,a,session,attribute,value;suppress,warnings,unchecked,public,t,result,matcher,session,attribute,final,string,name,final,object,value,return,result,assert,equals,session,attribute,name,value,result,get,request,get,session,get,attribute,name
RequestResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher sessionAttribute(final String name, final Object value);1496955179;Assert a session attribute value.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher sessionAttribute(final String name, final Object value) {_		return result -> {_			HttpSession session = result.getRequest().getSession()__			Assert.state(session != null, "No HttpSession")__			assertEquals("Session attribute '" + name + "'", value, session.getAttribute(name))__		}__	};assert,a,session,attribute,value;suppress,warnings,unchecked,public,t,result,matcher,session,attribute,final,string,name,final,object,value,return,result,http,session,session,result,get,request,get,session,assert,state,session,null,no,http,session,assert,equals,session,attribute,name,value,session,get,attribute,name
RequestResultMatchers -> public <T> ResultMatcher attribute(final String name, final Object expectedValue);1383669853;Assert a request attribute value.;public <T> ResultMatcher attribute(final String name, final Object expectedValue) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				assertEquals("Request attribute", expectedValue, result.getRequest().getAttribute(name))__			}_		}__	};assert,a,request,attribute,value;public,t,result,matcher,attribute,final,string,name,final,object,expected,value,return,new,result,matcher,override,public,void,match,mvc,result,result,assert,equals,request,attribute,expected,value,result,get,request,get,attribute,name
RequestResultMatchers -> public <T> ResultMatcher attribute(final String name, final Object expectedValue);1413848647;Assert a request attribute value.;public <T> ResultMatcher attribute(final String name, final Object expectedValue) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				assertEquals("Request attribute", expectedValue, result.getRequest().getAttribute(name))__			}_		}__	};assert,a,request,attribute,value;public,t,result,matcher,attribute,final,string,name,final,object,expected,value,return,new,result,matcher,override,public,void,match,mvc,result,result,assert,equals,request,attribute,expected,value,result,get,request,get,attribute,name
RequestResultMatchers -> public <T> ResultMatcher attribute(final String name, final Object expectedValue);1427238287;Assert a request attribute value.;public <T> ResultMatcher attribute(final String name, final Object expectedValue) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				assertEquals("Request attribute", expectedValue, result.getRequest().getAttribute(name))__			}_		}__	};assert,a,request,attribute,value;public,t,result,matcher,attribute,final,string,name,final,object,expected,value,return,new,result,matcher,override,public,void,match,mvc,result,result,assert,equals,request,attribute,expected,value,result,get,request,get,attribute,name
RequestResultMatchers -> public <T> ResultMatcher attribute(final String name, final Object expectedValue);1437424890;Assert a request attribute value.;public <T> ResultMatcher attribute(final String name, final Object expectedValue) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				assertEquals("Request attribute", expectedValue, result.getRequest().getAttribute(name))__			}_		}__	};assert,a,request,attribute,value;public,t,result,matcher,attribute,final,string,name,final,object,expected,value,return,new,result,matcher,override,public,void,match,mvc,result,result,assert,equals,request,attribute,expected,value,result,get,request,get,attribute,name
RequestResultMatchers -> public <T> ResultMatcher attribute(final String name, final Object expectedValue);1437576373;Assert a request attribute value.;public <T> ResultMatcher attribute(final String name, final Object expectedValue) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				assertEquals("Request attribute", expectedValue, result.getRequest().getAttribute(name))__			}_		}__	};assert,a,request,attribute,value;public,t,result,matcher,attribute,final,string,name,final,object,expected,value,return,new,result,matcher,override,public,void,match,mvc,result,result,assert,equals,request,attribute,expected,value,result,get,request,get,attribute,name
RequestResultMatchers -> public <T> ResultMatcher attribute(final String name, final Object expectedValue);1437576988;Assert a request attribute value.;public <T> ResultMatcher attribute(final String name, final Object expectedValue) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				assertEquals("Request attribute '" + name + "'", expectedValue, result.getRequest().getAttribute(name))__			}_		}__	};assert,a,request,attribute,value;public,t,result,matcher,attribute,final,string,name,final,object,expected,value,return,new,result,matcher,override,public,void,match,mvc,result,result,assert,equals,request,attribute,name,expected,value,result,get,request,get,attribute,name
RequestResultMatchers -> public <T> ResultMatcher attribute(final String name, final Object expectedValue);1493235170;Assert a request attribute value.;public <T> ResultMatcher attribute(final String name, final Object expectedValue) {_		return result ->_				assertEquals("Request attribute '" + name + "'", expectedValue, result.getRequest().getAttribute(name))__	};assert,a,request,attribute,value;public,t,result,matcher,attribute,final,string,name,final,object,expected,value,return,result,assert,equals,request,attribute,name,expected,value,result,get,request,get,attribute,name
RequestResultMatchers -> public <T> ResultMatcher attribute(final String name, final Object expectedValue);1496955179;Assert a request attribute value.;public <T> ResultMatcher attribute(final String name, final Object expectedValue) {_		return result ->_				assertEquals("Request attribute '" + name + "'", expectedValue, result.getRequest().getAttribute(name))__	};assert,a,request,attribute,value;public,t,result,matcher,attribute,final,string,name,final,object,expected,value,return,result,assert,equals,request,attribute,name,expected,value,result,get,request,get,attribute,name
RequestResultMatchers -> public <T> ResultMatcher attribute(final String name, final Object expectedValue);1499023719;Assert a request attribute value.;public <T> ResultMatcher attribute(final String name, final Object expectedValue) {_		return result ->_				assertEquals("Request attribute '" + name + "'", expectedValue, result.getRequest().getAttribute(name))__	};assert,a,request,attribute,value;public,t,result,matcher,attribute,final,string,name,final,object,expected,value,return,result,assert,equals,request,attribute,name,expected,value,result,get,request,get,attribute,name
RequestResultMatchers -> public <T> ResultMatcher attribute(final String name, final Object expectedValue);1530174524;Assert a request attribute value.;public <T> ResultMatcher attribute(final String name, final Object expectedValue) {_		return result ->_				assertEquals("Request attribute '" + name + "'", expectedValue, result.getRequest().getAttribute(name))__	};assert,a,request,attribute,value;public,t,result,matcher,attribute,final,string,name,final,object,expected,value,return,result,assert,equals,request,attribute,name,expected,value,result,get,request,get,attribute,name
RequestResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1493235170;Assert a request attribute value with the given Hamcrest {@link Matcher}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return result -> {_			T value = (T) result.getRequest().getAttribute(name)__			assertThat("Request attribute '" + name + "'", value, matcher)__		}__	};assert,a,request,attribute,value,with,the,given,hamcrest,link,matcher;suppress,warnings,unchecked,public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,result,t,value,t,result,get,request,get,attribute,name,assert,that,request,attribute,name,value,matcher
RequestResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1496955179;Assert a request attribute value with the given Hamcrest {@link Matcher}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return result -> {_			T value = (T) result.getRequest().getAttribute(name)__			assertThat("Request attribute '" + name + "'", value, matcher)__		}__	};assert,a,request,attribute,value,with,the,given,hamcrest,link,matcher;suppress,warnings,unchecked,public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,result,t,value,t,result,get,request,get,attribute,name,assert,that,request,attribute,name,value,matcher
RequestResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1499023719;Assert a request attribute value with the given Hamcrest {@link Matcher}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return result -> {_			T value = (T) result.getRequest().getAttribute(name)__			assertThat("Request attribute '" + name + "'", value, matcher)__		}__	};assert,a,request,attribute,value,with,the,given,hamcrest,link,matcher;suppress,warnings,unchecked,public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,result,t,value,t,result,get,request,get,attribute,name,assert,that,request,attribute,name,value,matcher
RequestResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1530174524;Assert a request attribute value with the given Hamcrest {@link Matcher}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return result -> {_			T value = (T) result.getRequest().getAttribute(name)__			assertThat("Request attribute '" + name + "'", value, matcher)__		}__	};assert,a,request,attribute,value,with,the,given,hamcrest,link,matcher;suppress,warnings,unchecked,public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,result,t,value,t,result,get,request,get,attribute,name,assert,that,request,attribute,name,value,matcher
RequestResultMatchers -> public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1383669853;Assert a request attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				T value = (T) result.getRequest().getAttribute(name)__				assertThat("Request attribute", value, matcher)__			}_		}__	};assert,a,request,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,t,value,t,result,get,request,get,attribute,name,assert,that,request,attribute,value,matcher
RequestResultMatchers -> public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1413848647;Assert a request attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				T value = (T) result.getRequest().getAttribute(name)__				assertThat("Request attribute", value, matcher)__			}_		}__	};assert,a,request,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,t,value,t,result,get,request,get,attribute,name,assert,that,request,attribute,value,matcher
RequestResultMatchers -> public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1427238287;Assert a request attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				T value = (T) result.getRequest().getAttribute(name)__				assertThat("Request attribute", value, matcher)__			}_		}__	};assert,a,request,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,t,value,t,result,get,request,get,attribute,name,assert,that,request,attribute,value,matcher
RequestResultMatchers -> public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1437424890;Assert a request attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				T value = (T) result.getRequest().getAttribute(name)__				assertThat("Request attribute", value, matcher)__			}_		}__	};assert,a,request,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,t,value,t,result,get,request,get,attribute,name,assert,that,request,attribute,value,matcher
RequestResultMatchers -> public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1437576373;Assert a request attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				T value = (T) result.getRequest().getAttribute(name)__				assertThat("Request attribute", value, matcher)__			}_		}__	};assert,a,request,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,t,value,t,result,get,request,get,attribute,name,assert,that,request,attribute,value,matcher
RequestResultMatchers -> public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1437576988;Assert a request attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				T value = (T) result.getRequest().getAttribute(name)__				assertThat("Request attribute '" + name + "'", value, matcher)__			}_		}__	};assert,a,request,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,t,value,t,result,get,request,get,attribute,name,assert,that,request,attribute,name,value,matcher
RequestResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher asyncResult(final Matcher<T> matcher);1493235170;Assert the result from asynchronous processing with the given matcher._<p>This method can be used when a controller method returns {@link Callable}_or {@link WebAsyncTask}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher asyncResult(final Matcher<T> matcher) {_		return result -> {_			HttpServletRequest request = result.getRequest()__			assertAsyncStarted(request)__			assertThat("Async result", (T) result.getAsyncResult(), matcher)__		}__	};assert,the,result,from,asynchronous,processing,with,the,given,matcher,p,this,method,can,be,used,when,a,controller,method,returns,link,callable,or,link,web,async,task;suppress,warnings,unchecked,public,t,result,matcher,async,result,final,matcher,t,matcher,return,result,http,servlet,request,request,result,get,request,assert,async,started,request,assert,that,async,result,t,result,get,async,result,matcher
RequestResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher asyncResult(final Matcher<T> matcher);1496955179;Assert the result from asynchronous processing with the given matcher._<p>This method can be used when a controller method returns {@link Callable}_or {@link WebAsyncTask}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher asyncResult(final Matcher<T> matcher) {_		return result -> {_			HttpServletRequest request = result.getRequest()__			assertAsyncStarted(request)__			assertThat("Async result", (T) result.getAsyncResult(), matcher)__		}__	};assert,the,result,from,asynchronous,processing,with,the,given,matcher,p,this,method,can,be,used,when,a,controller,method,returns,link,callable,or,link,web,async,task;suppress,warnings,unchecked,public,t,result,matcher,async,result,final,matcher,t,matcher,return,result,http,servlet,request,request,result,get,request,assert,async,started,request,assert,that,async,result,t,result,get,async,result,matcher
RequestResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher asyncResult(final Matcher<T> matcher);1499023719;Assert the result from asynchronous processing with the given matcher._<p>This method can be used when a controller method returns {@link Callable}_or {@link WebAsyncTask}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher asyncResult(final Matcher<T> matcher) {_		return result -> {_			HttpServletRequest request = result.getRequest()__			assertAsyncStarted(request)__			assertThat("Async result", (T) result.getAsyncResult(), matcher)__		}__	};assert,the,result,from,asynchronous,processing,with,the,given,matcher,p,this,method,can,be,used,when,a,controller,method,returns,link,callable,or,link,web,async,task;suppress,warnings,unchecked,public,t,result,matcher,async,result,final,matcher,t,matcher,return,result,http,servlet,request,request,result,get,request,assert,async,started,request,assert,that,async,result,t,result,get,async,result,matcher
RequestResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher asyncResult(final Matcher<T> matcher);1530174524;Assert the result from asynchronous processing with the given matcher._<p>This method can be used when a controller method returns {@link Callable}_or {@link WebAsyncTask}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher asyncResult(final Matcher<T> matcher) {_		return result -> {_			HttpServletRequest request = result.getRequest()__			assertAsyncStarted(request)__			assertThat("Async result", (T) result.getAsyncResult(), matcher)__		}__	};assert,the,result,from,asynchronous,processing,with,the,given,matcher,p,this,method,can,be,used,when,a,controller,method,returns,link,callable,or,link,web,async,task;suppress,warnings,unchecked,public,t,result,matcher,async,result,final,matcher,t,matcher,return,result,http,servlet,request,request,result,get,request,assert,async,started,request,assert,that,async,result,t,result,get,async,result,matcher
RequestResultMatchers -> public <T> ResultMatcher asyncResult(final Matcher<T> matcher);1383669853;Assert the result from asynchronous processing with the given matcher.;public <T> ResultMatcher asyncResult(final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", true, request.isAsyncStarted())__				assertThat("Async result", (T) result.getAsyncResult(), matcher)__			}_		}__	};assert,the,result,from,asynchronous,processing,with,the,given,matcher;public,t,result,matcher,async,result,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,true,request,is,async,started,assert,that,async,result,t,result,get,async,result,matcher
RequestResultMatchers -> public <T> ResultMatcher asyncResult(final Matcher<T> matcher);1413848647;Assert the result from asynchronous processing with the given matcher.;public <T> ResultMatcher asyncResult(final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", true, request.isAsyncStarted())__				assertThat("Async result", (T) result.getAsyncResult(), matcher)__			}_		}__	};assert,the,result,from,asynchronous,processing,with,the,given,matcher;public,t,result,matcher,async,result,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,true,request,is,async,started,assert,that,async,result,t,result,get,async,result,matcher
RequestResultMatchers -> public <T> ResultMatcher asyncResult(final Matcher<T> matcher);1427238287;Assert the result from asynchronous processing with the given matcher.;public <T> ResultMatcher asyncResult(final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", true, request.isAsyncStarted())__				assertThat("Async result", (T) result.getAsyncResult(), matcher)__			}_		}__	};assert,the,result,from,asynchronous,processing,with,the,given,matcher;public,t,result,matcher,async,result,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,true,request,is,async,started,assert,that,async,result,t,result,get,async,result,matcher
RequestResultMatchers -> public <T> ResultMatcher asyncResult(final Matcher<T> matcher);1437424890;Assert the result from asynchronous processing with the given matcher.;public <T> ResultMatcher asyncResult(final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertEquals("Async started", true, request.isAsyncStarted())__				assertThat("Async result", (T) result.getAsyncResult(), matcher)__			}_		}__	};assert,the,result,from,asynchronous,processing,with,the,given,matcher;public,t,result,matcher,async,result,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,equals,async,started,true,request,is,async,started,assert,that,async,result,t,result,get,async,result,matcher
RequestResultMatchers -> public <T> ResultMatcher asyncResult(final Matcher<T> matcher);1437576373;Assert the result from asynchronous processing with the given matcher._<p>This method can be used when a controller method returns {@link Callable}_or {@link WebAsyncTask}.;public <T> ResultMatcher asyncResult(final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertAsyncStarted(request)__				assertThat("Async result", (T) result.getAsyncResult(), matcher)__			}_		}__	};assert,the,result,from,asynchronous,processing,with,the,given,matcher,p,this,method,can,be,used,when,a,controller,method,returns,link,callable,or,link,web,async,task;public,t,result,matcher,async,result,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,async,started,request,assert,that,async,result,t,result,get,async,result,matcher
RequestResultMatchers -> public <T> ResultMatcher asyncResult(final Matcher<T> matcher);1437576988;Assert the result from asynchronous processing with the given matcher._<p>This method can be used when a controller method returns {@link Callable}_or {@link WebAsyncTask}.;public <T> ResultMatcher asyncResult(final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				HttpServletRequest request = result.getRequest()__				assertAsyncStarted(request)__				assertThat("Async result", (T) result.getAsyncResult(), matcher)__			}_		}__	};assert,the,result,from,asynchronous,processing,with,the,given,matcher,p,this,method,can,be,used,when,a,controller,method,returns,link,callable,or,link,web,async,task;public,t,result,matcher,async,result,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,http,servlet,request,request,result,get,request,assert,async,started,request,assert,that,async,result,t,result,get,async,result,matcher
RequestResultMatchers -> public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher);1383669853;Assert a session attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				T value = (T) result.getRequest().getSession().getAttribute(name)__				assertThat("Request attribute", value, matcher)__			}_		}__	};assert,a,session,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,session,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,t,value,t,result,get,request,get,session,get,attribute,name,assert,that,request,attribute,value,matcher
RequestResultMatchers -> public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher);1413848647;Assert a session attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				T value = (T) result.getRequest().getSession().getAttribute(name)__				assertThat("Request attribute", value, matcher)__			}_		}__	};assert,a,session,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,session,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,t,value,t,result,get,request,get,session,get,attribute,name,assert,that,request,attribute,value,matcher
RequestResultMatchers -> public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher);1427238287;Assert a session attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				T value = (T) result.getRequest().getSession().getAttribute(name)__				assertThat("Request attribute", value, matcher)__			}_		}__	};assert,a,session,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,session,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,t,value,t,result,get,request,get,session,get,attribute,name,assert,that,request,attribute,value,matcher
RequestResultMatchers -> public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher);1437424890;Assert a session attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				T value = (T) result.getRequest().getSession().getAttribute(name)__				assertThat("Request attribute", value, matcher)__			}_		}__	};assert,a,session,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,session,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,t,value,t,result,get,request,get,session,get,attribute,name,assert,that,request,attribute,value,matcher
RequestResultMatchers -> public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher);1437576373;Assert a session attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				T value = (T) result.getRequest().getSession().getAttribute(name)__				assertThat("Session attribute", value, matcher)__			}_		}__	};assert,a,session,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,session,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,t,value,t,result,get,request,get,session,get,attribute,name,assert,that,session,attribute,value,matcher
RequestResultMatchers -> public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher);1437576988;Assert a session attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) {_				T value = (T) result.getRequest().getSession().getAttribute(name)__				assertThat("Session attribute '" + name + "'", value, matcher)__			}_		}__	};assert,a,session,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,session,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,t,value,t,result,get,request,get,session,get,attribute,name,assert,that,session,attribute,name,value,matcher
RequestResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher);1493235170;Assert a session attribute value with the given Hamcrest {@link Matcher}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher) {_		return result -> {_			T value = (T) result.getRequest().getSession().getAttribute(name)__			assertThat("Session attribute '" + name + "'", value, matcher)__		}__	};assert,a,session,attribute,value,with,the,given,hamcrest,link,matcher;suppress,warnings,unchecked,public,t,result,matcher,session,attribute,final,string,name,final,matcher,t,matcher,return,result,t,value,t,result,get,request,get,session,get,attribute,name,assert,that,session,attribute,name,value,matcher
RequestResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher);1496955179;Assert a session attribute value with the given Hamcrest {@link Matcher}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher) {_		return result -> {_			HttpSession session = result.getRequest().getSession()__			Assert.state(session != null, "No HttpSession")__			T value = (T) session.getAttribute(name)__			assertThat("Session attribute '" + name + "'", value, matcher)__		}__	};assert,a,session,attribute,value,with,the,given,hamcrest,link,matcher;suppress,warnings,unchecked,public,t,result,matcher,session,attribute,final,string,name,final,matcher,t,matcher,return,result,http,session,session,result,get,request,get,session,assert,state,session,null,no,http,session,t,value,t,session,get,attribute,name,assert,that,session,attribute,name,value,matcher
RequestResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher);1499023719;Assert a session attribute value with the given Hamcrest {@link Matcher}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher) {_		return result -> {_			HttpSession session = result.getRequest().getSession()__			Assert.state(session != null, "No HttpSession")__			T value = (T) session.getAttribute(name)__			assertThat("Session attribute '" + name + "'", value, matcher)__		}__	};assert,a,session,attribute,value,with,the,given,hamcrest,link,matcher;suppress,warnings,unchecked,public,t,result,matcher,session,attribute,final,string,name,final,matcher,t,matcher,return,result,http,session,session,result,get,request,get,session,assert,state,session,null,no,http,session,t,value,t,session,get,attribute,name,assert,that,session,attribute,name,value,matcher
RequestResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher);1530174524;Assert a session attribute value with the given Hamcrest {@link Matcher}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher sessionAttribute(final String name, final Matcher<T> matcher) {_		return result -> {_			HttpSession session = result.getRequest().getSession()__			Assert.state(session != null, "No HttpSession")__			T value = (T) session.getAttribute(name)__			assertThat("Session attribute '" + name + "'", value, matcher)__		}__	};assert,a,session,attribute,value,with,the,given,hamcrest,link,matcher;suppress,warnings,unchecked,public,t,result,matcher,session,attribute,final,string,name,final,matcher,t,matcher,return,result,http,session,session,result,get,request,get,session,assert,state,session,null,no,http,session,t,value,t,session,get,attribute,name,assert,that,session,attribute,name,value,matcher
