# id;timestamp;commentText;codeText;commentWords;codeWords
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter... filters);1496955179;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter... filters) {_		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "Filters cannot be null")__		Assert.noNullElements(filters, "Filters cannot contain null values")__		this.servlet = servlet__		this.filters = filters__		this.servletContext = servlet.getServletContext()__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,get,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter... filters);1498780456;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter... filters) {_		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "Filters cannot be null")__		Assert.noNullElements(filters, "Filters cannot contain null values")__		this.servlet = servlet__		this.filters = filters__		this.servletContext = servlet.getServletContext()__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,get,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter... filters);1506097334;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter... filters) {_		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "Filters cannot be null")__		Assert.noNullElements(filters, "Filters cannot contain null values")__		this.servlet = servlet__		this.filters = filters__		this.servletContext = servlet.getServletContext()__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,get,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter... filters);1508273855;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter... filters) {_		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "Filters cannot be null")__		Assert.noNullElements(filters, "Filters cannot contain null values")__		this.servlet = servlet__		this.filters = filters__		this.servletContext = servlet.getServletContext()__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,get,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter... filters);1518260959;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter... filters) {_		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "Filters cannot be null")__		Assert.noNullElements(filters, "Filters cannot contain null values")__		this.servlet = servlet__		this.filters = filters__		this.servletContext = servlet.getServletContext()__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,get,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter... filters);1520529117;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter... filters) {_		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "Filters cannot be null")__		Assert.noNullElements(filters, "Filters cannot contain null values")__		this.servlet = servlet__		this.filters = filters__		this.servletContext = servlet.getServletContext()__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,get,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter... filters);1522359202;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter... filters) {_		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "Filters cannot be null")__		Assert.noNullElements(filters, "Filters cannot contain null values")__		this.servlet = servlet__		this.filters = filters__		this.servletContext = servlet.getServletContext()__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,get,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter... filters);1522511361;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter... filters) {_		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "Filters cannot be null")__		Assert.noNullElements(filters, "Filters cannot contain null values")___		this.servlet = servlet__		this.filters = filters__		this.servletContext = servlet.getServletContext()__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,get,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter... filters);1528735375;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter... filters) {_		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "Filters cannot be null")__		Assert.noNullElements(filters, "Filters cannot contain null values")___		this.servlet = servlet__		this.filters = filters__		this.servletContext = servlet.getServletContext()__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,get,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter... filters);1529005570;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter... filters) {_		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "Filters cannot be null")__		Assert.noNullElements(filters, "Filters cannot contain null values")___		this.servlet = servlet__		this.filters = filters__		this.servletContext = servlet.getServletContext()__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,get,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter... filters);1532520962;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter... filters) {_		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "Filters cannot be null")__		Assert.noNullElements(filters, "Filters cannot contain null values")___		this.servlet = servlet__		this.filters = filters__		this.servletContext = servlet.getServletContext()__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,get,servlet,context
MockMvc -> void setDefaultRequest(RequestBuilder requestBuilder);1383669853;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(RequestBuilder requestBuilder);1406050882;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(RequestBuilder requestBuilder);1413848647;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(RequestBuilder requestBuilder);1436538905;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(RequestBuilder requestBuilder);1437424889;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(RequestBuilder requestBuilder);1438105487;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(RequestBuilder requestBuilder);1446127967;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(RequestBuilder requestBuilder);1447634656;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(RequestBuilder requestBuilder);1467730834;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(RequestBuilder requestBuilder);1496955179;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(RequestBuilder requestBuilder);1498780456;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1383669853;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "resultHandlers is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handlers,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1406050882;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "resultHandlers is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handlers,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1413848647;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "resultHandlers is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handlers,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1436538905;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "resultHandlers is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handlers,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1437424889;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "resultHandlers is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handlers,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1438105487;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "resultHandlers is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handlers,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1446127967;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "resultHandlers is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handlers,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1447634656;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "resultHandlers is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handlers,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1467730834;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "resultHandlers is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handlers,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1496955179;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "resultHandlers is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handlers,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1498780456;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "resultHandlers is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handlers,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1506097334;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "ResultHandler List is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handler,list,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1508273855;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "ResultHandler List is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handler,list,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1518260959;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "ResultHandler List is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handler,list,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1520529117;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "ResultHandler List is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handler,list,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1522359202;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "ResultHandler List is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handler,list,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1522511361;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "ResultHandler List is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handler,list,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1528735375;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "ResultHandler List is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handler,list,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1529005570;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "ResultHandler List is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handler,list,is,required,this,default,result,handlers,result,handlers
MockMvc -> void setGlobalResultHandlers(List<ResultHandler> resultHandlers);1532520962;General actions to apply after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysDo(ResultHandler);void setGlobalResultHandlers(List<ResultHandler> resultHandlers) {_		Assert.notNull(resultHandlers, "ResultHandler List is required")__		this.defaultResultHandlers = resultHandlers__	};general,actions,to,apply,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,do,result,handler;void,set,global,result,handlers,list,result,handler,result,handlers,assert,not,null,result,handlers,result,handler,list,is,required,this,default,result,handlers,result,handlers
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext);1383669853;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext) {__		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "filters cannot be null")__		Assert.noNullElements(filters, "filters cannot contain null values")__		Assert.notNull(servletContext, "A ServletContext is required")___		this.servlet = servlet__		this.filters = filters__		this.servletContext = servletContext__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,servlet,context,servlet,context,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,assert,not,null,servlet,context,a,servlet,context,is,required,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext);1406050882;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext) {__		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "filters cannot be null")__		Assert.noNullElements(filters, "filters cannot contain null values")__		Assert.notNull(servletContext, "A ServletContext is required")___		this.servlet = servlet__		this.filters = filters__		this.servletContext = servletContext__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,servlet,context,servlet,context,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,assert,not,null,servlet,context,a,servlet,context,is,required,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext);1413848647;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext) {__		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "filters cannot be null")__		Assert.noNullElements(filters, "filters cannot contain null values")__		Assert.notNull(servletContext, "A ServletContext is required")___		this.servlet = servlet__		this.filters = filters__		this.servletContext = servletContext__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,servlet,context,servlet,context,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,assert,not,null,servlet,context,a,servlet,context,is,required,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext);1436538905;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext) {__		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "filters cannot be null")__		Assert.noNullElements(filters, "filters cannot contain null values")__		Assert.notNull(servletContext, "A ServletContext is required")___		this.servlet = servlet__		this.filters = filters__		this.servletContext = servletContext__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,servlet,context,servlet,context,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,assert,not,null,servlet,context,a,servlet,context,is,required,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext);1437424889;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext) {__		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "filters cannot be null")__		Assert.noNullElements(filters, "filters cannot contain null values")__		Assert.notNull(servletContext, "A ServletContext is required")___		this.servlet = servlet__		this.filters = filters__		this.servletContext = servletContext__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,servlet,context,servlet,context,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,assert,not,null,servlet,context,a,servlet,context,is,required,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext);1438105487;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext) {__		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "filters cannot be null")__		Assert.noNullElements(filters, "filters cannot contain null values")__		Assert.notNull(servletContext, "A ServletContext is required")___		this.servlet = servlet__		this.filters = filters__		this.servletContext = servletContext__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,servlet,context,servlet,context,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,assert,not,null,servlet,context,a,servlet,context,is,required,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext);1446127967;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext) {__		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "filters cannot be null")__		Assert.noNullElements(filters, "filters cannot contain null values")__		Assert.notNull(servletContext, "A ServletContext is required")___		this.servlet = servlet__		this.filters = filters__		this.servletContext = servletContext__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,servlet,context,servlet,context,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,assert,not,null,servlet,context,a,servlet,context,is,required,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext);1447634656;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext) {__		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "filters cannot be null")__		Assert.noNullElements(filters, "filters cannot contain null values")__		Assert.notNull(servletContext, "A ServletContext is required")___		this.servlet = servlet__		this.filters = filters__		this.servletContext = servletContext__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,servlet,context,servlet,context,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,assert,not,null,servlet,context,a,servlet,context,is,required,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,context
MockMvc -> MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext);1467730834;Private constructor, not for direct instantiation._@see org.springframework.test.web.servlet.setup.MockMvcBuilders;MockMvc(TestDispatcherServlet servlet, Filter[] filters, ServletContext servletContext) {__		Assert.notNull(servlet, "DispatcherServlet is required")__		Assert.notNull(filters, "filters cannot be null")__		Assert.noNullElements(filters, "filters cannot contain null values")__		Assert.notNull(servletContext, "A ServletContext is required")___		this.servlet = servlet__		this.filters = filters__		this.servletContext = servletContext__	};private,constructor,not,for,direct,instantiation,see,org,springframework,test,web,servlet,setup,mock,mvc,builders;mock,mvc,test,dispatcher,servlet,servlet,filter,filters,servlet,context,servlet,context,assert,not,null,servlet,dispatcher,servlet,is,required,assert,not,null,filters,filters,cannot,be,null,assert,no,null,elements,filters,filters,cannot,contain,null,values,assert,not,null,servlet,context,a,servlet,context,is,required,this,servlet,servlet,this,filters,filters,this,servlet,context,servlet,context
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1383669853;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "resultMatchers is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matchers,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1406050882;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "resultMatchers is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matchers,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1413848647;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "resultMatchers is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matchers,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1436538905;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "resultMatchers is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matchers,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1437424889;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "resultMatchers is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matchers,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1438105487;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "resultMatchers is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matchers,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1446127967;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "resultMatchers is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matchers,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1447634656;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "resultMatchers is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matchers,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1467730834;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "resultMatchers is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matchers,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1496955179;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "resultMatchers is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matchers,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1498780456;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "resultMatchers is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matchers,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1506097334;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "ResultMatcher List is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matcher,list,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1508273855;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "ResultMatcher List is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matcher,list,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1518260959;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "ResultMatcher List is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matcher,list,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1520529117;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "ResultMatcher List is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matcher,list,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1522359202;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "ResultMatcher List is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matcher,list,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1522511361;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "ResultMatcher List is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matcher,list,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1528735375;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "ResultMatcher List is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matcher,list,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1529005570;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "ResultMatcher List is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matcher,list,is,required,this,default,result,matchers,result,matchers
MockMvc -> void setGlobalResultMatchers(List<ResultMatcher> resultMatchers);1532520962;Expectations to assert after every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#alwaysExpect(ResultMatcher);void setGlobalResultMatchers(List<ResultMatcher> resultMatchers) {_		Assert.notNull(resultMatchers, "ResultMatcher List is required")__		this.defaultResultMatchers = resultMatchers__	};expectations,to,assert,after,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,always,expect,result,matcher;void,set,global,result,matchers,list,result,matcher,result,matchers,assert,not,null,result,matchers,result,matcher,list,is,required,this,default,result,matchers,result,matchers
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1383669853;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result.__@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}__@return an instance of {@link ResultActions}_ never {@code null}__@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {__		if (this.defaultRequestBuilder != null) {_			if (requestBuilder instanceof Mergeable) {_				requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__			}_		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)__		MockHttpServletResponse response = new MockHttpServletResponse()___		final MvcResult mvcResult = new DefaultMvcResult(request, response)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, response)___		applyDefaultResultActions(mvcResult)___		return new ResultActions() {__			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}__			@Override_			public ResultActions andDo(ResultHandler printer) throws Exception {_				printer.handle(mvcResult)__				return this__			}__			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,if,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,mock,http,servlet,response,response,new,mock,http,servlet,response,final,mvc,result,mvc,result,new,default,mvc,result,request,response,request,set,attribute,mvc,result,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,response,apply,default,result,actions,mvc,result,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,printer,throws,exception,printer,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1406050882;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result.__@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}__@return an instance of {@link ResultActions}_ never {@code null}__@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {__		if (this.defaultRequestBuilder != null) {_			if (requestBuilder instanceof Mergeable) {_				requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__			}_		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)__		MockHttpServletResponse response = new MockHttpServletResponse()___		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, response)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, response)___		applyDefaultResultActions(mvcResult)___		return new ResultActions() {__			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}__			@Override_			public ResultActions andDo(ResultHandler printer) throws Exception {_				printer.handle(mvcResult)__				return this__			}__			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,if,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,mock,http,servlet,response,response,new,mock,http,servlet,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,response,request,set,attribute,mvc,result,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,response,apply,default,result,actions,mvc,result,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,printer,throws,exception,printer,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1413848647;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result.__@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}__@return an instance of {@link ResultActions}_ never {@code null}__@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {__		if (this.defaultRequestBuilder != null) {_			if (requestBuilder instanceof Mergeable) {_				requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__			}_		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)__		MockHttpServletResponse response = new MockHttpServletResponse()___		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, response)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, response)___		applyDefaultResultActions(mvcResult)___		return new ResultActions() {__			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}__			@Override_			public ResultActions andDo(ResultHandler printer) throws Exception {_				printer.handle(mvcResult)__				return this__			}__			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,if,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,mock,http,servlet,response,response,new,mock,http,servlet,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,response,request,set,attribute,mvc,result,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,response,apply,default,result,actions,mvc,result,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,printer,throws,exception,printer,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1436538905;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result.__@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}__@return an instance of {@link ResultActions}_ never {@code null}__@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {__		if (this.defaultRequestBuilder != null) {_			if (requestBuilder instanceof Mergeable) {_				requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__			}_		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)__		MockHttpServletResponse response = new MockHttpServletResponse()___		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, response)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		_		_		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, response))___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, response)___		applyDefaultResultActions(mvcResult)___		return new ResultActions() {__			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}__			@Override_			public ResultActions andDo(ResultHandler printer) throws Exception {_				printer.handle(mvcResult)__				return this__			}__			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,if,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,mock,http,servlet,response,response,new,mock,http,servlet,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,response,request,set,attribute,mvc,result,request,context,holder,set,request,attributes,new,servlet,request,attributes,request,response,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,response,apply,default,result,actions,mvc,result,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,printer,throws,exception,printer,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1437424889;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result.__@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}__@return an instance of {@link ResultActions}_ never {@code null}__@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {__		if (this.defaultRequestBuilder != null) {_			if (requestBuilder instanceof Mergeable) {_				requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__			}_		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)__		MockHttpServletResponse response = new MockHttpServletResponse()___		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, response)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		_		_		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes()__		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, response))___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, response)___		applyDefaultResultActions(mvcResult)___		RequestContextHolder.setRequestAttributes(previousAttributes)___		return new ResultActions() {__			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}__			@Override_			public ResultActions andDo(ResultHandler printer) throws Exception {_				printer.handle(mvcResult)__				return this__			}__			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,if,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,mock,http,servlet,response,response,new,mock,http,servlet,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,response,request,set,attribute,mvc,result,request,attributes,previous,attributes,request,context,holder,get,request,attributes,request,context,holder,set,request,attributes,new,servlet,request,attributes,request,response,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,response,apply,default,result,actions,mvc,result,request,context,holder,set,request,attributes,previous,attributes,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,printer,throws,exception,printer,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1438105487;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result.__@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}__@return an instance of {@link ResultActions}_ never {@code null}__@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {__		if (this.defaultRequestBuilder != null) {_			if (requestBuilder instanceof Mergeable) {_				requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__			}_		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)__		MockHttpServletResponse response = new MockHttpServletResponse()___		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, response)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		_		_		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes()__		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, response))___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, response)___		applyDefaultResultActions(mvcResult)___		RequestContextHolder.setRequestAttributes(previousAttributes)___		return new ResultActions() {__			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}__			@Override_			public ResultActions andDo(ResultHandler printer) throws Exception {_				printer.handle(mvcResult)__				return this__			}__			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,if,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,mock,http,servlet,response,response,new,mock,http,servlet,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,response,request,set,attribute,mvc,result,request,attributes,previous,attributes,request,context,holder,get,request,attributes,request,context,holder,set,request,attributes,new,servlet,request,attributes,request,response,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,response,apply,default,result,actions,mvc,result,request,context,holder,set,request,attributes,previous,attributes,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,printer,throws,exception,printer,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1446127967;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result.__@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}__@return an instance of {@link ResultActions}_ never {@code null}__@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {__		if (this.defaultRequestBuilder != null) {_			if (requestBuilder instanceof Mergeable) {_				requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__			}_		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)__		MockHttpServletResponse response = new MockHttpServletResponse()___		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, response)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes()__		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, response))___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, response)___		if (DispatcherType.ASYNC.equals(request.getDispatcherType()) &&_				request.getAsyncContext() != null & !request.isAsyncStarted()) {__			request.getAsyncContext().complete()__		}__		applyDefaultResultActions(mvcResult)___		RequestContextHolder.setRequestAttributes(previousAttributes)___		return new ResultActions() {__			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}__			@Override_			public ResultActions andDo(ResultHandler printer) throws Exception {_				printer.handle(mvcResult)__				return this__			}__			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,if,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,mock,http,servlet,response,response,new,mock,http,servlet,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,response,request,set,attribute,mvc,result,request,attributes,previous,attributes,request,context,holder,get,request,attributes,request,context,holder,set,request,attributes,new,servlet,request,attributes,request,response,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,response,if,dispatcher,type,async,equals,request,get,dispatcher,type,request,get,async,context,null,request,is,async,started,request,get,async,context,complete,apply,default,result,actions,mvc,result,request,context,holder,set,request,attributes,previous,attributes,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,printer,throws,exception,printer,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1447634656;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result.__@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}__@return an instance of {@link ResultActions}_ never {@code null}__@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {__		if (this.defaultRequestBuilder != null) {_			if (requestBuilder instanceof Mergeable) {_				requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__			}_		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)__		MockHttpServletResponse response = new MockHttpServletResponse()___		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, response)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes()__		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, response))___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, response)___		if (DispatcherType.ASYNC.equals(request.getDispatcherType()) &&_				request.getAsyncContext() != null & !request.isAsyncStarted()) {__			request.getAsyncContext().complete()__		}__		applyDefaultResultActions(mvcResult)___		RequestContextHolder.setRequestAttributes(previousAttributes)___		return new ResultActions() {__			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}__			@Override_			public ResultActions andDo(ResultHandler handler) throws Exception {_				handler.handle(mvcResult)__				return this__			}__			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,if,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,mock,http,servlet,response,response,new,mock,http,servlet,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,response,request,set,attribute,mvc,result,request,attributes,previous,attributes,request,context,holder,get,request,attributes,request,context,holder,set,request,attributes,new,servlet,request,attributes,request,response,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,response,if,dispatcher,type,async,equals,request,get,dispatcher,type,request,get,async,context,null,request,is,async,started,request,get,async,context,complete,apply,default,result,actions,mvc,result,request,context,holder,set,request,attributes,previous,attributes,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,handler,throws,exception,handler,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1467730834;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result.__@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}__@return an instance of {@link ResultActions}_ never {@code null}__@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {__		if (this.defaultRequestBuilder != null) {_			if (requestBuilder instanceof Mergeable) {_				requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__			}_		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)__		MockHttpServletResponse response = new MockHttpServletResponse()___		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, response)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes()__		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, response))___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, response)___		if (DispatcherType.ASYNC.equals(request.getDispatcherType()) &&_				request.getAsyncContext() != null & !request.isAsyncStarted()) {__			request.getAsyncContext().complete()__		}__		applyDefaultResultActions(mvcResult)___		RequestContextHolder.setRequestAttributes(previousAttributes)___		return new ResultActions() {__			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}__			@Override_			public ResultActions andDo(ResultHandler handler) throws Exception {_				handler.handle(mvcResult)__				return this__			}__			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,if,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,mock,http,servlet,response,response,new,mock,http,servlet,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,response,request,set,attribute,mvc,result,request,attributes,previous,attributes,request,context,holder,get,request,attributes,request,context,holder,set,request,attributes,new,servlet,request,attributes,request,response,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,response,if,dispatcher,type,async,equals,request,get,dispatcher,type,request,get,async,context,null,request,is,async,started,request,get,async,context,complete,apply,default,result,actions,mvc,result,request,context,holder,set,request,attributes,previous,attributes,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,handler,throws,exception,handler,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1496955179;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result._@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}_@return an instance of {@link ResultActions}_ never {@code null}_@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {_		if (this.defaultRequestBuilder != null) {_			if (requestBuilder instanceof Mergeable) {_				requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__			}_		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)__		MockHttpServletResponse response = new MockHttpServletResponse()___		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, response)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes()__		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, response))___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, response)___		if (DispatcherType.ASYNC.equals(request.getDispatcherType()) &&_				request.getAsyncContext() != null & !request.isAsyncStarted()) {_			request.getAsyncContext().complete()__		}__		applyDefaultResultActions(mvcResult)__		RequestContextHolder.setRequestAttributes(previousAttributes)___		return new ResultActions() {_			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}_			@Override_			public ResultActions andDo(ResultHandler handler) throws Exception {_				handler.handle(mvcResult)__				return this__			}_			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,if,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,mock,http,servlet,response,response,new,mock,http,servlet,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,response,request,set,attribute,mvc,result,request,attributes,previous,attributes,request,context,holder,get,request,attributes,request,context,holder,set,request,attributes,new,servlet,request,attributes,request,response,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,response,if,dispatcher,type,async,equals,request,get,dispatcher,type,request,get,async,context,null,request,is,async,started,request,get,async,context,complete,apply,default,result,actions,mvc,result,request,context,holder,set,request,attributes,previous,attributes,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,handler,throws,exception,handler,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1498780456;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result._@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}_@return an instance of {@link ResultActions}_ never {@code null}_@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {_		if (this.defaultRequestBuilder != null) {_			if (requestBuilder instanceof Mergeable) {_				requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__			}_		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)__		MockHttpServletResponse response = new MockHttpServletResponse()___		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, response)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes()__		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, response))___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, response)___		if (DispatcherType.ASYNC.equals(request.getDispatcherType()) &&_				request.getAsyncContext() != null & !request.isAsyncStarted()) {_			request.getAsyncContext().complete()__		}__		applyDefaultResultActions(mvcResult)__		RequestContextHolder.setRequestAttributes(previousAttributes)___		return new ResultActions() {_			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}_			@Override_			public ResultActions andDo(ResultHandler handler) throws Exception {_				handler.handle(mvcResult)__				return this__			}_			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,if,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,mock,http,servlet,response,response,new,mock,http,servlet,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,response,request,set,attribute,mvc,result,request,attributes,previous,attributes,request,context,holder,get,request,attributes,request,context,holder,set,request,attributes,new,servlet,request,attributes,request,response,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,response,if,dispatcher,type,async,equals,request,get,dispatcher,type,request,get,async,context,null,request,is,async,started,request,get,async,context,complete,apply,default,result,actions,mvc,result,request,context,holder,set,request,attributes,previous,attributes,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,handler,throws,exception,handler,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1506097334;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result._@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}_@return an instance of {@link ResultActions}_ never {@code null}_@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {_		if (this.defaultRequestBuilder != null) {_			if (requestBuilder instanceof Mergeable) {_				requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__			}_		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)__		MockHttpServletResponse response = new MockHttpServletResponse()___		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, response)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes()__		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, response))___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, response)___		if (DispatcherType.ASYNC.equals(request.getDispatcherType()) &&_				request.getAsyncContext() != null & !request.isAsyncStarted()) {_			request.getAsyncContext().complete()__		}__		applyDefaultResultActions(mvcResult)__		RequestContextHolder.setRequestAttributes(previousAttributes)___		return new ResultActions() {_			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}_			@Override_			public ResultActions andDo(ResultHandler handler) throws Exception {_				handler.handle(mvcResult)__				return this__			}_			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,if,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,mock,http,servlet,response,response,new,mock,http,servlet,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,response,request,set,attribute,mvc,result,request,attributes,previous,attributes,request,context,holder,get,request,attributes,request,context,holder,set,request,attributes,new,servlet,request,attributes,request,response,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,response,if,dispatcher,type,async,equals,request,get,dispatcher,type,request,get,async,context,null,request,is,async,started,request,get,async,context,complete,apply,default,result,actions,mvc,result,request,context,holder,set,request,attributes,previous,attributes,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,handler,throws,exception,handler,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1508273855;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result._@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}_@return an instance of {@link ResultActions}_ never {@code null}_@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {_		if (this.defaultRequestBuilder != null) {_			if (requestBuilder instanceof Mergeable) {_				requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__			}_		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)___		AsyncContext asyncContext = request.getAsyncContext()__		MockHttpServletResponse mockResponse__		HttpServletResponse servletResponse__		if (asyncContext != null) {_			servletResponse = (HttpServletResponse) asyncContext.getResponse()__			mockResponse = unwrapResponseIfNecessary(servletResponse)__		}_		else {_			mockResponse = new MockHttpServletResponse()__			servletResponse = mockResponse__		}__		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, mockResponse)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes()__		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, servletResponse))___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, servletResponse)___		if (DispatcherType.ASYNC.equals(request.getDispatcherType()) &&_				asyncContext != null & !request.isAsyncStarted()) {_			asyncContext.complete()__		}__		applyDefaultResultActions(mvcResult)__		RequestContextHolder.setRequestAttributes(previousAttributes)___		return new ResultActions() {_			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}_			@Override_			public ResultActions andDo(ResultHandler handler) throws Exception {_				handler.handle(mvcResult)__				return this__			}_			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,if,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,async,context,async,context,request,get,async,context,mock,http,servlet,response,mock,response,http,servlet,response,servlet,response,if,async,context,null,servlet,response,http,servlet,response,async,context,get,response,mock,response,unwrap,response,if,necessary,servlet,response,else,mock,response,new,mock,http,servlet,response,servlet,response,mock,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,mock,response,request,set,attribute,mvc,result,request,attributes,previous,attributes,request,context,holder,get,request,attributes,request,context,holder,set,request,attributes,new,servlet,request,attributes,request,servlet,response,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,servlet,response,if,dispatcher,type,async,equals,request,get,dispatcher,type,async,context,null,request,is,async,started,async,context,complete,apply,default,result,actions,mvc,result,request,context,holder,set,request,attributes,previous,attributes,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,handler,throws,exception,handler,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1518260959;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result._@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}_@return an instance of {@link ResultActions}_ never {@code null}_@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {_		if (this.defaultRequestBuilder != null) {_			if (requestBuilder instanceof Mergeable) {_				requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__			}_		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)___		AsyncContext asyncContext = request.getAsyncContext()__		MockHttpServletResponse mockResponse__		HttpServletResponse servletResponse__		if (asyncContext != null) {_			servletResponse = (HttpServletResponse) asyncContext.getResponse()__			mockResponse = unwrapResponseIfNecessary(servletResponse)__		}_		else {_			mockResponse = new MockHttpServletResponse()__			servletResponse = mockResponse__		}__		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, mockResponse)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes()__		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, servletResponse))___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, servletResponse)___		if (DispatcherType.ASYNC.equals(request.getDispatcherType()) &&_				asyncContext != null & !request.isAsyncStarted()) {_			asyncContext.complete()__		}__		applyDefaultResultActions(mvcResult)__		RequestContextHolder.setRequestAttributes(previousAttributes)___		return new ResultActions() {_			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}_			@Override_			public ResultActions andDo(ResultHandler handler) throws Exception {_				handler.handle(mvcResult)__				return this__			}_			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,if,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,async,context,async,context,request,get,async,context,mock,http,servlet,response,mock,response,http,servlet,response,servlet,response,if,async,context,null,servlet,response,http,servlet,response,async,context,get,response,mock,response,unwrap,response,if,necessary,servlet,response,else,mock,response,new,mock,http,servlet,response,servlet,response,mock,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,mock,response,request,set,attribute,mvc,result,request,attributes,previous,attributes,request,context,holder,get,request,attributes,request,context,holder,set,request,attributes,new,servlet,request,attributes,request,servlet,response,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,servlet,response,if,dispatcher,type,async,equals,request,get,dispatcher,type,async,context,null,request,is,async,started,async,context,complete,apply,default,result,actions,mvc,result,request,context,holder,set,request,attributes,previous,attributes,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,handler,throws,exception,handler,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1520529117;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result._@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}_@return an instance of {@link ResultActions} (never {@code null})_@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {_		if (this.defaultRequestBuilder != null && requestBuilder instanceof Mergeable) {_			requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)___		AsyncContext asyncContext = request.getAsyncContext()__		MockHttpServletResponse mockResponse__		HttpServletResponse servletResponse__		if (asyncContext != null) {_			servletResponse = (HttpServletResponse) asyncContext.getResponse()__			mockResponse = unwrapResponseIfNecessary(servletResponse)__		}_		else {_			mockResponse = new MockHttpServletResponse()__			servletResponse = mockResponse__		}__		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, mockResponse)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes()__		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, servletResponse))___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, servletResponse)___		if (DispatcherType.ASYNC.equals(request.getDispatcherType()) &&_				asyncContext != null & !request.isAsyncStarted()) {_			asyncContext.complete()__		}__		applyDefaultResultActions(mvcResult)__		RequestContextHolder.setRequestAttributes(previousAttributes)___		return new ResultActions() {_			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}_			@Override_			public ResultActions andDo(ResultHandler handler) throws Exception {_				handler.handle(mvcResult)__				return this__			}_			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,async,context,async,context,request,get,async,context,mock,http,servlet,response,mock,response,http,servlet,response,servlet,response,if,async,context,null,servlet,response,http,servlet,response,async,context,get,response,mock,response,unwrap,response,if,necessary,servlet,response,else,mock,response,new,mock,http,servlet,response,servlet,response,mock,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,mock,response,request,set,attribute,mvc,result,request,attributes,previous,attributes,request,context,holder,get,request,attributes,request,context,holder,set,request,attributes,new,servlet,request,attributes,request,servlet,response,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,servlet,response,if,dispatcher,type,async,equals,request,get,dispatcher,type,async,context,null,request,is,async,started,async,context,complete,apply,default,result,actions,mvc,result,request,context,holder,set,request,attributes,previous,attributes,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,handler,throws,exception,handler,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1522359202;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result._@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}_@return an instance of {@link ResultActions} (never {@code null})_@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {_		if (this.defaultRequestBuilder != null && requestBuilder instanceof Mergeable) {_			requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)___		AsyncContext asyncContext = request.getAsyncContext()__		MockHttpServletResponse mockResponse__		HttpServletResponse servletResponse__		if (asyncContext != null) {_			servletResponse = (HttpServletResponse) asyncContext.getResponse()__			mockResponse = unwrapResponseIfNecessary(servletResponse)__		}_		else {_			mockResponse = new MockHttpServletResponse()__			servletResponse = mockResponse__		}__		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, mockResponse)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes()__		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, servletResponse))___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, servletResponse)___		if (DispatcherType.ASYNC.equals(request.getDispatcherType()) &&_				asyncContext != null && !request.isAsyncStarted()) {_			asyncContext.complete()__		}__		applyDefaultResultActions(mvcResult)__		RequestContextHolder.setRequestAttributes(previousAttributes)___		return new ResultActions() {_			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}_			@Override_			public ResultActions andDo(ResultHandler handler) throws Exception {_				handler.handle(mvcResult)__				return this__			}_			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,async,context,async,context,request,get,async,context,mock,http,servlet,response,mock,response,http,servlet,response,servlet,response,if,async,context,null,servlet,response,http,servlet,response,async,context,get,response,mock,response,unwrap,response,if,necessary,servlet,response,else,mock,response,new,mock,http,servlet,response,servlet,response,mock,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,mock,response,request,set,attribute,mvc,result,request,attributes,previous,attributes,request,context,holder,get,request,attributes,request,context,holder,set,request,attributes,new,servlet,request,attributes,request,servlet,response,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,servlet,response,if,dispatcher,type,async,equals,request,get,dispatcher,type,async,context,null,request,is,async,started,async,context,complete,apply,default,result,actions,mvc,result,request,context,holder,set,request,attributes,previous,attributes,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,handler,throws,exception,handler,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1522511361;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result._@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}_@return an instance of {@link ResultActions} (never {@code null})_@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {_		if (this.defaultRequestBuilder != null && requestBuilder instanceof Mergeable) {_			requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)___		AsyncContext asyncContext = request.getAsyncContext()__		MockHttpServletResponse mockResponse__		HttpServletResponse servletResponse__		if (asyncContext != null) {_			servletResponse = (HttpServletResponse) asyncContext.getResponse()__			mockResponse = unwrapResponseIfNecessary(servletResponse)__		}_		else {_			mockResponse = new MockHttpServletResponse()__			servletResponse = mockResponse__		}__		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, mockResponse)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes()__		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, servletResponse))___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, servletResponse)___		if (DispatcherType.ASYNC.equals(request.getDispatcherType()) &&_				asyncContext != null && !request.isAsyncStarted()) {_			asyncContext.complete()__		}__		applyDefaultResultActions(mvcResult)__		RequestContextHolder.setRequestAttributes(previousAttributes)___		return new ResultActions() {_			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}_			@Override_			public ResultActions andDo(ResultHandler handler) throws Exception {_				handler.handle(mvcResult)__				return this__			}_			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,async,context,async,context,request,get,async,context,mock,http,servlet,response,mock,response,http,servlet,response,servlet,response,if,async,context,null,servlet,response,http,servlet,response,async,context,get,response,mock,response,unwrap,response,if,necessary,servlet,response,else,mock,response,new,mock,http,servlet,response,servlet,response,mock,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,mock,response,request,set,attribute,mvc,result,request,attributes,previous,attributes,request,context,holder,get,request,attributes,request,context,holder,set,request,attributes,new,servlet,request,attributes,request,servlet,response,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,servlet,response,if,dispatcher,type,async,equals,request,get,dispatcher,type,async,context,null,request,is,async,started,async,context,complete,apply,default,result,actions,mvc,result,request,context,holder,set,request,attributes,previous,attributes,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,handler,throws,exception,handler,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1528735375;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result._@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}_@return an instance of {@link ResultActions} (never {@code null})_@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {_		if (this.defaultRequestBuilder != null && requestBuilder instanceof Mergeable) {_			requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)___		AsyncContext asyncContext = request.getAsyncContext()__		MockHttpServletResponse mockResponse__		HttpServletResponse servletResponse__		if (asyncContext != null) {_			servletResponse = (HttpServletResponse) asyncContext.getResponse()__			mockResponse = unwrapResponseIfNecessary(servletResponse)__		}_		else {_			mockResponse = new MockHttpServletResponse()__			servletResponse = mockResponse__		}__		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, mockResponse)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes()__		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, servletResponse))___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, servletResponse)___		if (DispatcherType.ASYNC.equals(request.getDispatcherType()) &&_				asyncContext != null && !request.isAsyncStarted()) {_			asyncContext.complete()__		}__		applyDefaultResultActions(mvcResult)__		RequestContextHolder.setRequestAttributes(previousAttributes)___		return new ResultActions() {_			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}_			@Override_			public ResultActions andDo(ResultHandler handler) throws Exception {_				handler.handle(mvcResult)__				return this__			}_			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,async,context,async,context,request,get,async,context,mock,http,servlet,response,mock,response,http,servlet,response,servlet,response,if,async,context,null,servlet,response,http,servlet,response,async,context,get,response,mock,response,unwrap,response,if,necessary,servlet,response,else,mock,response,new,mock,http,servlet,response,servlet,response,mock,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,mock,response,request,set,attribute,mvc,result,request,attributes,previous,attributes,request,context,holder,get,request,attributes,request,context,holder,set,request,attributes,new,servlet,request,attributes,request,servlet,response,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,servlet,response,if,dispatcher,type,async,equals,request,get,dispatcher,type,async,context,null,request,is,async,started,async,context,complete,apply,default,result,actions,mvc,result,request,context,holder,set,request,attributes,previous,attributes,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,handler,throws,exception,handler,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1529005570;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result._@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}_@return an instance of {@link ResultActions} (never {@code null})_@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {_		if (this.defaultRequestBuilder != null && requestBuilder instanceof Mergeable) {_			requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)___		AsyncContext asyncContext = request.getAsyncContext()__		MockHttpServletResponse mockResponse__		HttpServletResponse servletResponse__		if (asyncContext != null) {_			servletResponse = (HttpServletResponse) asyncContext.getResponse()__			mockResponse = unwrapResponseIfNecessary(servletResponse)__		}_		else {_			mockResponse = new MockHttpServletResponse()__			servletResponse = mockResponse__		}__		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, mockResponse)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes()__		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, servletResponse))___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, servletResponse)___		if (DispatcherType.ASYNC.equals(request.getDispatcherType()) &&_				asyncContext != null && !request.isAsyncStarted()) {_			asyncContext.complete()__		}__		applyDefaultResultActions(mvcResult)__		RequestContextHolder.setRequestAttributes(previousAttributes)___		return new ResultActions() {_			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}_			@Override_			public ResultActions andDo(ResultHandler handler) throws Exception {_				handler.handle(mvcResult)__				return this__			}_			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,async,context,async,context,request,get,async,context,mock,http,servlet,response,mock,response,http,servlet,response,servlet,response,if,async,context,null,servlet,response,http,servlet,response,async,context,get,response,mock,response,unwrap,response,if,necessary,servlet,response,else,mock,response,new,mock,http,servlet,response,servlet,response,mock,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,mock,response,request,set,attribute,mvc,result,request,attributes,previous,attributes,request,context,holder,get,request,attributes,request,context,holder,set,request,attributes,new,servlet,request,attributes,request,servlet,response,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,servlet,response,if,dispatcher,type,async,equals,request,get,dispatcher,type,async,context,null,request,is,async,started,async,context,complete,apply,default,result,actions,mvc,result,request,context,holder,set,request,attributes,previous,attributes,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,handler,throws,exception,handler,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> public ResultActions perform(RequestBuilder requestBuilder) throws Exception;1532520962;Perform a request and return a type that allows chaining further_actions, such as asserting expectations, on the result._@param requestBuilder used to prepare the request to execute__see static factory methods in_{@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}_@return an instance of {@link ResultActions} (never {@code null})_@see org.springframework.test.web.servlet.request.MockMvcRequestBuilders_@see org.springframework.test.web.servlet.result.MockMvcResultMatchers;public ResultActions perform(RequestBuilder requestBuilder) throws Exception {_		if (this.defaultRequestBuilder != null && requestBuilder instanceof Mergeable) {_			requestBuilder = (RequestBuilder) ((Mergeable) requestBuilder).merge(this.defaultRequestBuilder)__		}__		MockHttpServletRequest request = requestBuilder.buildRequest(this.servletContext)___		AsyncContext asyncContext = request.getAsyncContext()__		MockHttpServletResponse mockResponse__		HttpServletResponse servletResponse__		if (asyncContext != null) {_			servletResponse = (HttpServletResponse) asyncContext.getResponse()__			mockResponse = unwrapResponseIfNecessary(servletResponse)__		}_		else {_			mockResponse = new MockHttpServletResponse()__			servletResponse = mockResponse__		}__		if (requestBuilder instanceof SmartRequestBuilder) {_			request = ((SmartRequestBuilder) requestBuilder).postProcessRequest(request)__		}__		final MvcResult mvcResult = new DefaultMvcResult(request, mockResponse)__		request.setAttribute(MVC_RESULT_ATTRIBUTE, mvcResult)___		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes()__		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, servletResponse))___		MockFilterChain filterChain = new MockFilterChain(this.servlet, this.filters)__		filterChain.doFilter(request, servletResponse)___		if (DispatcherType.ASYNC.equals(request.getDispatcherType()) &&_				asyncContext != null && !request.isAsyncStarted()) {_			asyncContext.complete()__		}__		applyDefaultResultActions(mvcResult)__		RequestContextHolder.setRequestAttributes(previousAttributes)___		return new ResultActions() {_			@Override_			public ResultActions andExpect(ResultMatcher matcher) throws Exception {_				matcher.match(mvcResult)__				return this__			}_			@Override_			public ResultActions andDo(ResultHandler handler) throws Exception {_				handler.handle(mvcResult)__				return this__			}_			@Override_			public MvcResult andReturn() {_				return mvcResult__			}_		}__	};perform,a,request,and,return,a,type,that,allows,chaining,further,actions,such,as,asserting,expectations,on,the,result,param,request,builder,used,to,prepare,the,request,to,execute,see,static,factory,methods,in,link,org,springframework,test,web,servlet,request,mock,mvc,request,builders,return,an,instance,of,link,result,actions,never,code,null,see,org,springframework,test,web,servlet,request,mock,mvc,request,builders,see,org,springframework,test,web,servlet,result,mock,mvc,result,matchers;public,result,actions,perform,request,builder,request,builder,throws,exception,if,this,default,request,builder,null,request,builder,instanceof,mergeable,request,builder,request,builder,mergeable,request,builder,merge,this,default,request,builder,mock,http,servlet,request,request,request,builder,build,request,this,servlet,context,async,context,async,context,request,get,async,context,mock,http,servlet,response,mock,response,http,servlet,response,servlet,response,if,async,context,null,servlet,response,http,servlet,response,async,context,get,response,mock,response,unwrap,response,if,necessary,servlet,response,else,mock,response,new,mock,http,servlet,response,servlet,response,mock,response,if,request,builder,instanceof,smart,request,builder,request,smart,request,builder,request,builder,post,process,request,request,final,mvc,result,mvc,result,new,default,mvc,result,request,mock,response,request,set,attribute,mvc,result,request,attributes,previous,attributes,request,context,holder,get,request,attributes,request,context,holder,set,request,attributes,new,servlet,request,attributes,request,servlet,response,mock,filter,chain,filter,chain,new,mock,filter,chain,this,servlet,this,filters,filter,chain,do,filter,request,servlet,response,if,dispatcher,type,async,equals,request,get,dispatcher,type,async,context,null,request,is,async,started,async,context,complete,apply,default,result,actions,mvc,result,request,context,holder,set,request,attributes,previous,attributes,return,new,result,actions,override,public,result,actions,and,expect,result,matcher,matcher,throws,exception,matcher,match,mvc,result,return,this,override,public,result,actions,and,do,result,handler,handler,throws,exception,handler,handle,mvc,result,return,this,override,public,mvc,result,and,return,return,mvc,result
MockMvc -> void setDefaultRequest(@Nullable RequestBuilder requestBuilder);1506097334;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(@Nullable RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,nullable,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(@Nullable RequestBuilder requestBuilder);1508273855;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(@Nullable RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,nullable,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(@Nullable RequestBuilder requestBuilder);1518260959;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(@Nullable RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,nullable,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(@Nullable RequestBuilder requestBuilder);1520529117;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(@Nullable RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,nullable,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(@Nullable RequestBuilder requestBuilder);1522359202;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(@Nullable RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,nullable,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(@Nullable RequestBuilder requestBuilder);1522511361;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(@Nullable RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,nullable,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(@Nullable RequestBuilder requestBuilder);1528735375;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(@Nullable RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,nullable,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(@Nullable RequestBuilder requestBuilder);1529005570;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(@Nullable RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,nullable,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> void setDefaultRequest(@Nullable RequestBuilder requestBuilder);1532520962;A default request builder merged into every performed request._@see org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder#defaultRequest(RequestBuilder);void setDefaultRequest(@Nullable RequestBuilder requestBuilder) {_		this.defaultRequestBuilder = requestBuilder__	};a,default,request,builder,merged,into,every,performed,request,see,org,springframework,test,web,servlet,setup,default,mock,mvc,builder,default,request,request,builder;void,set,default,request,nullable,request,builder,request,builder,this,default,request,builder,request,builder
MockMvc -> public DispatcherServlet getDispatcherServlet();1528735375;Return the underlying {@link DispatcherServlet} instance that this_{@code MockMvc} was initialized with._<p>This is intended for use in custom request processing scenario where_a request handling component happens to delegate to the_{@code DispatcherServlet} at runtime and therefore needs to be injected_with it._<p>For most processing scenarios, simply use {@link MockMvc#perform}, or_if you need to configure the {@code DispatcherServlet}, provide a_{@link DispatcherServletCustomizer} to the {@code MockMvcBuilder}._@since 5.1;public DispatcherServlet getDispatcherServlet() {_		return this.servlet__	};return,the,underlying,link,dispatcher,servlet,instance,that,this,code,mock,mvc,was,initialized,with,p,this,is,intended,for,use,in,custom,request,processing,scenario,where,a,request,handling,component,happens,to,delegate,to,the,code,dispatcher,servlet,at,runtime,and,therefore,needs,to,be,injected,with,it,p,for,most,processing,scenarios,simply,use,link,mock,mvc,perform,or,if,you,need,to,configure,the,code,dispatcher,servlet,provide,a,link,dispatcher,servlet,customizer,to,the,code,mock,mvc,builder,since,5,1;public,dispatcher,servlet,get,dispatcher,servlet,return,this,servlet
MockMvc -> public DispatcherServlet getDispatcherServlet();1529005570;Return the underlying {@link DispatcherServlet} instance that this_{@code MockMvc} was initialized with._<p>This is intended for use in custom request processing scenario where_a request handling component happens to delegate to the_{@code DispatcherServlet} at runtime and therefore needs to be injected_with it._<p>For most processing scenarios, simply use {@link MockMvc#perform}, or_if you need to configure the {@code DispatcherServlet}, provide a_{@link DispatcherServletCustomizer} to the {@code MockMvcBuilder}._@since 5.1;public DispatcherServlet getDispatcherServlet() {_		return this.servlet__	};return,the,underlying,link,dispatcher,servlet,instance,that,this,code,mock,mvc,was,initialized,with,p,this,is,intended,for,use,in,custom,request,processing,scenario,where,a,request,handling,component,happens,to,delegate,to,the,code,dispatcher,servlet,at,runtime,and,therefore,needs,to,be,injected,with,it,p,for,most,processing,scenarios,simply,use,link,mock,mvc,perform,or,if,you,need,to,configure,the,code,dispatcher,servlet,provide,a,link,dispatcher,servlet,customizer,to,the,code,mock,mvc,builder,since,5,1;public,dispatcher,servlet,get,dispatcher,servlet,return,this,servlet
MockMvc -> public DispatcherServlet getDispatcherServlet();1532520962;Return the underlying {@link DispatcherServlet} instance that this_{@code MockMvc} was initialized with._<p>This is intended for use in custom request processing scenario where a_request handling component happens to delegate to the {@code DispatcherServlet}_at runtime and therefore needs to be injected with it._<p>For most processing scenarios, simply use {@link MockMvc#perform},_or if you need to configure the {@code DispatcherServlet}, provide a_{@link DispatcherServletCustomizer} to the {@code MockMvcBuilder}._@since 5.1;public DispatcherServlet getDispatcherServlet() {_		return this.servlet__	};return,the,underlying,link,dispatcher,servlet,instance,that,this,code,mock,mvc,was,initialized,with,p,this,is,intended,for,use,in,custom,request,processing,scenario,where,a,request,handling,component,happens,to,delegate,to,the,code,dispatcher,servlet,at,runtime,and,therefore,needs,to,be,injected,with,it,p,for,most,processing,scenarios,simply,use,link,mock,mvc,perform,or,if,you,need,to,configure,the,code,dispatcher,servlet,provide,a,link,dispatcher,servlet,customizer,to,the,code,mock,mvc,builder,since,5,1;public,dispatcher,servlet,get,dispatcher,servlet,return,this,servlet
