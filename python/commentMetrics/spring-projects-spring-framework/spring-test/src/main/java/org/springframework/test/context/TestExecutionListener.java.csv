commented;modifiers;parameterAmount;loc;comment;code
true;default;1;2;/**  * Pre-processes a test class <em>before</em> execution of all tests within  * the class.  * <p>This method should be called immediately before framework-specific  * <em>before class</em> lifecycle callbacks.  * <p>The default implementation is <em>empty</em>. Can be overridden by  * concrete classes as necessary.  * @param testContext the test context for the test. never {@code null}  * @throws Exception allows any exception to propagate  * @since 3.0  */ ;/**  * Pre-processes a test class <em>before</em> execution of all tests within  * the class.  * <p>This method should be called immediately before framework-specific  * <em>before class</em> lifecycle callbacks.  * <p>The default implementation is <em>empty</em>. Can be overridden by  * concrete classes as necessary.  * @param testContext the test context for the test. never {@code null}  * @throws Exception allows any exception to propagate  * @since 3.0  */ default void beforeTestClass(TestContext testContext) throws Exception { }
true;default;1;2;/**  * Prepares the {@link Object test instance} of the supplied  * {@link TestContext test context}, for example by injecting dependencies.  * <p>This method should be called immediately after instantiation of the test  * instance but prior to any framework-specific lifecycle callbacks.  * <p>The default implementation is <em>empty</em>. Can be overridden by  * concrete classes as necessary.  * @param testContext the test context for the test. never {@code null}  * @throws Exception allows any exception to propagate  */ ;/**  * Prepares the {@link Object test instance} of the supplied  * {@link TestContext test context}, for example by injecting dependencies.  * <p>This method should be called immediately after instantiation of the test  * instance but prior to any framework-specific lifecycle callbacks.  * <p>The default implementation is <em>empty</em>. Can be overridden by  * concrete classes as necessary.  * @param testContext the test context for the test. never {@code null}  * @throws Exception allows any exception to propagate  */ default void prepareTestInstance(TestContext testContext) throws Exception { }
true;default;1;2;/**  * Pre-processes a test <em>before</em> execution of <em>before</em>  * lifecycle callbacks of the underlying test framework &mdash. for example,  * by setting up test fixtures.  * <p>This method <strong>must</strong> be called immediately prior to  * framework-specific <em>before</em> lifecycle callbacks. For historical  * reasons, this method is named {@code beforeTestMethod}. Since the  * introduction of {@link #beforeTestExecution}, a more suitable name for  * this method might be something like {@code beforeTestSetUp} or  * {@code beforeEach}. however, it is unfortunately impossible to rename  * this method due to backward compatibility concerns.  * <p>The default implementation is <em>empty</em>. Can be overridden by  * concrete classes as necessary.  * @param testContext the test context in which the test method will be  * executed. never {@code null}  * @throws Exception allows any exception to propagate  * @see #afterTestMethod  * @see #beforeTestExecution  * @see #afterTestExecution  */ ;/**  * Pre-processes a test <em>before</em> execution of <em>before</em>  * lifecycle callbacks of the underlying test framework &mdash. for example,  * by setting up test fixtures.  * <p>This method <strong>must</strong> be called immediately prior to  * framework-specific <em>before</em> lifecycle callbacks. For historical  * reasons, this method is named {@code beforeTestMethod}. Since the  * introduction of {@link #beforeTestExecution}, a more suitable name for  * this method might be something like {@code beforeTestSetUp} or  * {@code beforeEach}. however, it is unfortunately impossible to rename  * this method due to backward compatibility concerns.  * <p>The default implementation is <em>empty</em>. Can be overridden by  * concrete classes as necessary.  * @param testContext the test context in which the test method will be  * executed. never {@code null}  * @throws Exception allows any exception to propagate  * @see #afterTestMethod  * @see #beforeTestExecution  * @see #afterTestExecution  */ default void beforeTestMethod(TestContext testContext) throws Exception { }
true;default;1;2;/**  * Pre-processes a test <em>immediately before</em> execution of the  * {@link java.lang.reflect.Method test method} in the supplied  * {@link TestContext test context} &mdash. for example, for timing  * or logging purposes.  * <p>This method <strong>must</strong> be called after framework-specific  * <em>before</em> lifecycle callbacks.  * <p>The default implementation is <em>empty</em>. Can be overridden by  * concrete classes as necessary.  * @param testContext the test context in which the test method will be  * executed. never {@code null}  * @throws Exception allows any exception to propagate  * @since 5.0  * @see #beforeTestMethod  * @see #afterTestMethod  * @see #afterTestExecution  */ ;/**  * Pre-processes a test <em>immediately before</em> execution of the  * {@link java.lang.reflect.Method test method} in the supplied  * {@link TestContext test context} &mdash. for example, for timing  * or logging purposes.  * <p>This method <strong>must</strong> be called after framework-specific  * <em>before</em> lifecycle callbacks.  * <p>The default implementation is <em>empty</em>. Can be overridden by  * concrete classes as necessary.  * @param testContext the test context in which the test method will be  * executed. never {@code null}  * @throws Exception allows any exception to propagate  * @since 5.0  * @see #beforeTestMethod  * @see #afterTestMethod  * @see #afterTestExecution  */ default void beforeTestExecution(TestContext testContext) throws Exception { }
true;default;1;2;/**  * Post-processes a test <em>immediately after</em> execution of the  * {@link java.lang.reflect.Method test method} in the supplied  * {@link TestContext test context} &mdash. for example, for timing  * or logging purposes.  * <p>This method <strong>must</strong> be called before framework-specific  * <em>after</em> lifecycle callbacks.  * <p>The default implementation is <em>empty</em>. Can be overridden by  * concrete classes as necessary.  * @param testContext the test context in which the test method will be  * executed. never {@code null}  * @throws Exception allows any exception to propagate  * @since 5.0  * @see #beforeTestMethod  * @see #afterTestMethod  * @see #beforeTestExecution  */ ;/**  * Post-processes a test <em>immediately after</em> execution of the  * {@link java.lang.reflect.Method test method} in the supplied  * {@link TestContext test context} &mdash. for example, for timing  * or logging purposes.  * <p>This method <strong>must</strong> be called before framework-specific  * <em>after</em> lifecycle callbacks.  * <p>The default implementation is <em>empty</em>. Can be overridden by  * concrete classes as necessary.  * @param testContext the test context in which the test method will be  * executed. never {@code null}  * @throws Exception allows any exception to propagate  * @since 5.0  * @see #beforeTestMethod  * @see #afterTestMethod  * @see #beforeTestExecution  */ default void afterTestExecution(TestContext testContext) throws Exception { }
true;default;1;2;/**  * Post-processes a test <em>after</em> execution of <em>after</em>  * lifecycle callbacks of the underlying test framework &mdash. for example,  * by tearing down test fixtures.  * <p>This method <strong>must</strong> be called immediately after  * framework-specific <em>after</em> lifecycle callbacks. For historical  * reasons, this method is named {@code afterTestMethod}. Since the  * introduction of {@link #afterTestExecution}, a more suitable name for  * this method might be something like {@code afterTestTearDown} or  * {@code afterEach}. however, it is unfortunately impossible to rename  * this method due to backward compatibility concerns.  * <p>The default implementation is <em>empty</em>. Can be overridden by  * concrete classes as necessary.  * @param testContext the test context in which the test method was  * executed. never {@code null}  * @throws Exception allows any exception to propagate  * @see #beforeTestMethod  * @see #beforeTestExecution  * @see #afterTestExecution  */ ;/**  * Post-processes a test <em>after</em> execution of <em>after</em>  * lifecycle callbacks of the underlying test framework &mdash. for example,  * by tearing down test fixtures.  * <p>This method <strong>must</strong> be called immediately after  * framework-specific <em>after</em> lifecycle callbacks. For historical  * reasons, this method is named {@code afterTestMethod}. Since the  * introduction of {@link #afterTestExecution}, a more suitable name for  * this method might be something like {@code afterTestTearDown} or  * {@code afterEach}. however, it is unfortunately impossible to rename  * this method due to backward compatibility concerns.  * <p>The default implementation is <em>empty</em>. Can be overridden by  * concrete classes as necessary.  * @param testContext the test context in which the test method was  * executed. never {@code null}  * @throws Exception allows any exception to propagate  * @see #beforeTestMethod  * @see #beforeTestExecution  * @see #afterTestExecution  */ default void afterTestMethod(TestContext testContext) throws Exception { }
true;default;1;2;/**  * Post-processes a test class <em>after</em> execution of all tests within  * the class.  * <p>This method should be called immediately after framework-specific  * <em>after class</em> lifecycle callbacks.  * <p>The default implementation is <em>empty</em>. Can be overridden by  * concrete classes as necessary.  * @param testContext the test context for the test. never {@code null}  * @throws Exception allows any exception to propagate  * @since 3.0  */ ;/**  * Post-processes a test class <em>after</em> execution of all tests within  * the class.  * <p>This method should be called immediately after framework-specific  * <em>after class</em> lifecycle callbacks.  * <p>The default implementation is <em>empty</em>. Can be overridden by  * concrete classes as necessary.  * @param testContext the test context for the test. never {@code null}  * @throws Exception allows any exception to propagate  * @since 3.0  */ default void afterTestClass(TestContext testContext) throws Exception { }
