commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;3;/**  * Create a {@link MockHttpServletRequestBuilder} for a GET request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  */ ;/**  * Create a {@link MockHttpServletRequestBuilder} for a GET request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  */ public static MockHttpServletRequestBuilder get(String urlTemplate, Object... uriVars) {     return new MockHttpServletRequestBuilder(HttpMethod.GET, urlTemplate, uriVars). }
true;public,static;1;3;/**  * Create a {@link MockHttpServletRequestBuilder} for a GET request.  * @param uri the URL  * @since 4.0.3  */ ;/**  * Create a {@link MockHttpServletRequestBuilder} for a GET request.  * @param uri the URL  * @since 4.0.3  */ public static MockHttpServletRequestBuilder get(URI uri) {     return new MockHttpServletRequestBuilder(HttpMethod.GET, uri). }
true;public,static;2;3;/**  * Create a {@link MockHttpServletRequestBuilder} for a POST request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  */ ;/**  * Create a {@link MockHttpServletRequestBuilder} for a POST request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  */ public static MockHttpServletRequestBuilder post(String urlTemplate, Object... uriVars) {     return new MockHttpServletRequestBuilder(HttpMethod.POST, urlTemplate, uriVars). }
true;public,static;1;3;/**  * Create a {@link MockHttpServletRequestBuilder} for a POST request.  * @param uri the URL  * @since 4.0.3  */ ;/**  * Create a {@link MockHttpServletRequestBuilder} for a POST request.  * @param uri the URL  * @since 4.0.3  */ public static MockHttpServletRequestBuilder post(URI uri) {     return new MockHttpServletRequestBuilder(HttpMethod.POST, uri). }
true;public,static;2;3;/**  * Create a {@link MockHttpServletRequestBuilder} for a PUT request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  */ ;/**  * Create a {@link MockHttpServletRequestBuilder} for a PUT request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  */ public static MockHttpServletRequestBuilder put(String urlTemplate, Object... uriVars) {     return new MockHttpServletRequestBuilder(HttpMethod.PUT, urlTemplate, uriVars). }
true;public,static;1;3;/**  * Create a {@link MockHttpServletRequestBuilder} for a PUT request.  * @param uri the URL  * @since 4.0.3  */ ;/**  * Create a {@link MockHttpServletRequestBuilder} for a PUT request.  * @param uri the URL  * @since 4.0.3  */ public static MockHttpServletRequestBuilder put(URI uri) {     return new MockHttpServletRequestBuilder(HttpMethod.PUT, uri). }
true;public,static;2;3;/**  * Create a {@link MockHttpServletRequestBuilder} for a PATCH request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  */ ;/**  * Create a {@link MockHttpServletRequestBuilder} for a PATCH request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  */ public static MockHttpServletRequestBuilder patch(String urlTemplate, Object... uriVars) {     return new MockHttpServletRequestBuilder(HttpMethod.PATCH, urlTemplate, uriVars). }
true;public,static;1;3;/**  * Create a {@link MockHttpServletRequestBuilder} for a PATCH request.  * @param uri the URL  * @since 4.0.3  */ ;/**  * Create a {@link MockHttpServletRequestBuilder} for a PATCH request.  * @param uri the URL  * @since 4.0.3  */ public static MockHttpServletRequestBuilder patch(URI uri) {     return new MockHttpServletRequestBuilder(HttpMethod.PATCH, uri). }
true;public,static;2;3;/**  * Create a {@link MockHttpServletRequestBuilder} for a DELETE request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  */ ;/**  * Create a {@link MockHttpServletRequestBuilder} for a DELETE request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  */ public static MockHttpServletRequestBuilder delete(String urlTemplate, Object... uriVars) {     return new MockHttpServletRequestBuilder(HttpMethod.DELETE, urlTemplate, uriVars). }
true;public,static;1;3;/**  * Create a {@link MockHttpServletRequestBuilder} for a DELETE request.  * @param uri the URL  * @since 4.0.3  */ ;/**  * Create a {@link MockHttpServletRequestBuilder} for a DELETE request.  * @param uri the URL  * @since 4.0.3  */ public static MockHttpServletRequestBuilder delete(URI uri) {     return new MockHttpServletRequestBuilder(HttpMethod.DELETE, uri). }
true;public,static;2;3;/**  * Create a {@link MockHttpServletRequestBuilder} for an OPTIONS request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  */ ;/**  * Create a {@link MockHttpServletRequestBuilder} for an OPTIONS request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  */ public static MockHttpServletRequestBuilder options(String urlTemplate, Object... uriVars) {     return new MockHttpServletRequestBuilder(HttpMethod.OPTIONS, urlTemplate, uriVars). }
true;public,static;1;3;/**  * Create a {@link MockHttpServletRequestBuilder} for an OPTIONS request.  * @param uri the URL  * @since 4.0.3  */ ;/**  * Create a {@link MockHttpServletRequestBuilder} for an OPTIONS request.  * @param uri the URL  * @since 4.0.3  */ public static MockHttpServletRequestBuilder options(URI uri) {     return new MockHttpServletRequestBuilder(HttpMethod.OPTIONS, uri). }
true;public,static;2;3;/**  * Create a {@link MockHttpServletRequestBuilder} for a HEAD request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @since 4.1  */ ;/**  * Create a {@link MockHttpServletRequestBuilder} for a HEAD request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @since 4.1  */ public static MockHttpServletRequestBuilder head(String urlTemplate, Object... uriVars) {     return new MockHttpServletRequestBuilder(HttpMethod.HEAD, urlTemplate, uriVars). }
true;public,static;1;3;/**  * Create a {@link MockHttpServletRequestBuilder} for a HEAD request.  * @param uri the URL  * @since 4.1  */ ;/**  * Create a {@link MockHttpServletRequestBuilder} for a HEAD request.  * @param uri the URL  * @since 4.1  */ public static MockHttpServletRequestBuilder head(URI uri) {     return new MockHttpServletRequestBuilder(HttpMethod.HEAD, uri). }
true;public,static;3;3;/**  * Create a {@link MockHttpServletRequestBuilder} for a request with the given HTTP method.  * @param method the HTTP method (GET, POST, etc)  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  */ ;/**  * Create a {@link MockHttpServletRequestBuilder} for a request with the given HTTP method.  * @param method the HTTP method (GET, POST, etc)  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  */ public static MockHttpServletRequestBuilder request(HttpMethod method, String urlTemplate, Object... uriVars) {     return new MockHttpServletRequestBuilder(method, urlTemplate, uriVars). }
true;public,static;2;3;/**  * Create a {@link MockHttpServletRequestBuilder} for a request with the given HTTP method.  * @param httpMethod the HTTP method (GET, POST, etc)  * @param uri the URL  * @since 4.0.3  */ ;/**  * Create a {@link MockHttpServletRequestBuilder} for a request with the given HTTP method.  * @param httpMethod the HTTP method (GET, POST, etc)  * @param uri the URL  * @since 4.0.3  */ public static MockHttpServletRequestBuilder request(HttpMethod httpMethod, URI uri) {     return new MockHttpServletRequestBuilder(httpMethod, uri). }
true;public,static;2;3;/**  * Alternative factory method that allows for custom HTTP verbs (e.g. WebDAV).  * @param httpMethod the HTTP method  * @param uri the URL  * @since 4.3  */ ;/**  * Alternative factory method that allows for custom HTTP verbs (e.g. WebDAV).  * @param httpMethod the HTTP method  * @param uri the URL  * @since 4.3  */ public static MockHttpServletRequestBuilder request(String httpMethod, URI uri) {     return new MockHttpServletRequestBuilder(httpMethod, uri). }
true;public,static;2;3;/**  * Create a {@link MockMultipartHttpServletRequestBuilder} for a multipart request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @since 5.0  */ ;/**  * Create a {@link MockMultipartHttpServletRequestBuilder} for a multipart request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @since 5.0  */ public static MockMultipartHttpServletRequestBuilder multipart(String urlTemplate, Object... uriVars) {     return new MockMultipartHttpServletRequestBuilder(urlTemplate, uriVars). }
true;public,static;1;3;/**  * Create a {@link MockMultipartHttpServletRequestBuilder} for a multipart request.  * @param uri the URL  * @since 5.0  */ ;/**  * Create a {@link MockMultipartHttpServletRequestBuilder} for a multipart request.  * @param uri the URL  * @since 5.0  */ public static MockMultipartHttpServletRequestBuilder multipart(URI uri) {     return new MockMultipartHttpServletRequestBuilder(uri). }
true;public,static;2;4;/**  * Create a {@link MockMultipartHttpServletRequestBuilder} for a multipart request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @deprecated in favor of {@link #multipart(String, Object...)}  */ ;/**  * Create a {@link MockMultipartHttpServletRequestBuilder} for a multipart request.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @deprecated in favor of {@link #multipart(String, Object...)}  */ @Deprecated public static MockMultipartHttpServletRequestBuilder fileUpload(String urlTemplate, Object... uriVars) {     return new MockMultipartHttpServletRequestBuilder(urlTemplate, uriVars). }
true;public,static;1;4;/**  * Create a {@link MockMultipartHttpServletRequestBuilder} for a multipart request.  * @param uri the URL  * @since 4.0.3  * @deprecated in favor of {@link #multipart(URI)}  */ ;/**  * Create a {@link MockMultipartHttpServletRequestBuilder} for a multipart request.  * @param uri the URL  * @since 4.0.3  * @deprecated in favor of {@link #multipart(URI)}  */ @Deprecated public static MockMultipartHttpServletRequestBuilder fileUpload(URI uri) {     return new MockMultipartHttpServletRequestBuilder(uri). }
true;public,static;1;12;/**  *  Create a {@link RequestBuilder} for an async dispatch from the  *  {@link MvcResult} of the request that started async processing.  *  <p>Usage involves performing a request that starts async processing first:  *  <pre class="code">  *  MvcResult mvcResult = this.mockMvc.perform(get("/1"))  * 	.andExpect(request().asyncStarted())  * 	.andReturn().  *   </pre>  *  <p>And then performing the async dispatch re-using the {@code MvcResult}:  *  <pre class="code">  *  this.mockMvc.perform(asyncDispatch(mvcResult))  *  	.andExpect(status().isOk())  *  	.andExpect(content().contentType(MediaType.APPLICATION_JSON))  *  	.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}")).  *  </pre>  *  @param mvcResult the result from the request that started async processing  */ ;/**  *  Create a {@link RequestBuilder} for an async dispatch from the  *  {@link MvcResult} of the request that started async processing.  *  <p>Usage involves performing a request that starts async processing first:  *  <pre class="code">  *  MvcResult mvcResult = this.mockMvc.perform(get("/1"))  * 	.andExpect(request().asyncStarted())  * 	.andReturn().  *   </pre>  *  <p>And then performing the async dispatch re-using the {@code MvcResult}:  *  <pre class="code">  *  this.mockMvc.perform(asyncDispatch(mvcResult))  *  	.andExpect(status().isOk())  *  	.andExpect(content().contentType(MediaType.APPLICATION_JSON))  *  	.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}")).  *  </pre>  *  @param mvcResult the result from the request that started async processing  */ public static RequestBuilder asyncDispatch(final MvcResult mvcResult) {     // There must be an async result before dispatching     mvcResult.getAsyncResult().     return servletContext -> {         MockHttpServletRequest request = mvcResult.getRequest().         request.setDispatcherType(DispatcherType.ASYNC).         request.setAsyncStarted(false).         return request.     }. }
