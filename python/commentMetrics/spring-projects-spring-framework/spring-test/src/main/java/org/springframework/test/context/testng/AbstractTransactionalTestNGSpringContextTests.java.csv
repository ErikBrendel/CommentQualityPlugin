commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the {@code DataSource}, typically provided via Dependency Injection.  * <p>This method also instantiates the {@link #jdbcTemplate} instance variable.  */ ;/**  * Set the {@code DataSource}, typically provided via Dependency Injection.  * <p>This method also instantiates the {@link #jdbcTemplate} instance variable.  */ @Autowired public void setDataSource(DataSource dataSource) {     this.jdbcTemplate.setDataSource(dataSource). }
true;public;1;3;/**  * Specify the encoding for SQL scripts, if different from the platform encoding.  * @see #executeSqlScript  */ ;/**  * Specify the encoding for SQL scripts, if different from the platform encoding.  * @see #executeSqlScript  */ public void setSqlScriptEncoding(String sqlScriptEncoding) {     this.sqlScriptEncoding = sqlScriptEncoding. }
true;protected;1;3;/**  * Convenience method for counting the rows in the given table.  * @param tableName table name to count rows in  * @return the number of rows in the table  * @see JdbcTestUtils#countRowsInTable  */ ;/**  * Convenience method for counting the rows in the given table.  * @param tableName table name to count rows in  * @return the number of rows in the table  * @see JdbcTestUtils#countRowsInTable  */ protected int countRowsInTable(String tableName) {     return JdbcTestUtils.countRowsInTable(this.jdbcTemplate, tableName). }
true;protected;2;3;/**  * Convenience method for counting the rows in the given table, using the  * provided {@code WHERE} clause.  * <p>See the Javadoc for {@link JdbcTestUtils#countRowsInTableWhere} for details.  * @param tableName the name of the table to count rows in  * @param whereClause the {@code WHERE} clause to append to the query  * @return the number of rows in the table that match the provided  * {@code WHERE} clause  * @since 3.2  * @see JdbcTestUtils#countRowsInTableWhere  */ ;/**  * Convenience method for counting the rows in the given table, using the  * provided {@code WHERE} clause.  * <p>See the Javadoc for {@link JdbcTestUtils#countRowsInTableWhere} for details.  * @param tableName the name of the table to count rows in  * @param whereClause the {@code WHERE} clause to append to the query  * @return the number of rows in the table that match the provided  * {@code WHERE} clause  * @since 3.2  * @see JdbcTestUtils#countRowsInTableWhere  */ protected int countRowsInTableWhere(String tableName, String whereClause) {     return JdbcTestUtils.countRowsInTableWhere(this.jdbcTemplate, tableName, whereClause). }
true;protected;1;3;/**  * Convenience method for deleting all rows from the specified tables.  * <p>Use with caution outside of a transaction!  * @param names the names of the tables from which to delete  * @return the total number of rows deleted from all specified tables  * @see JdbcTestUtils#deleteFromTables  */ ;/**  * Convenience method for deleting all rows from the specified tables.  * <p>Use with caution outside of a transaction!  * @param names the names of the tables from which to delete  * @return the total number of rows deleted from all specified tables  * @see JdbcTestUtils#deleteFromTables  */ protected int deleteFromTables(String... names) {     return JdbcTestUtils.deleteFromTables(this.jdbcTemplate, names). }
true;protected;3;3;/**  * Convenience method for deleting all rows from the given table, using the  * provided {@code WHERE} clause.  * <p>Use with caution outside of a transaction!  * <p>See the Javadoc for {@link JdbcTestUtils#deleteFromTableWhere} for details.  * @param tableName the name of the table to delete rows from  * @param whereClause the {@code WHERE} clause to append to the query  * @param args arguments to bind to the query (leaving it to the {@code  * PreparedStatement} to guess the corresponding SQL type). may also contain  * {@link org.springframework.jdbc.core.SqlParameterValue SqlParameterValue}  * objects which indicate not only the argument value but also the SQL type  * and optionally the scale.  * @return the number of rows deleted from the table  * @since 4.0  * @see JdbcTestUtils#deleteFromTableWhere  */ ;/**  * Convenience method for deleting all rows from the given table, using the  * provided {@code WHERE} clause.  * <p>Use with caution outside of a transaction!  * <p>See the Javadoc for {@link JdbcTestUtils#deleteFromTableWhere} for details.  * @param tableName the name of the table to delete rows from  * @param whereClause the {@code WHERE} clause to append to the query  * @param args arguments to bind to the query (leaving it to the {@code  * PreparedStatement} to guess the corresponding SQL type). may also contain  * {@link org.springframework.jdbc.core.SqlParameterValue SqlParameterValue}  * objects which indicate not only the argument value but also the SQL type  * and optionally the scale.  * @return the number of rows deleted from the table  * @since 4.0  * @see JdbcTestUtils#deleteFromTableWhere  */ protected int deleteFromTableWhere(String tableName, String whereClause, Object... args) {     return JdbcTestUtils.deleteFromTableWhere(this.jdbcTemplate, tableName, whereClause, args). }
true;protected;1;3;/**  * Convenience method for dropping all of the specified tables.  * <p>Use with caution outside of a transaction!  * @param names the names of the tables to drop  * @since 3.2  * @see JdbcTestUtils#dropTables  */ ;/**  * Convenience method for dropping all of the specified tables.  * <p>Use with caution outside of a transaction!  * @param names the names of the tables to drop  * @since 3.2  * @see JdbcTestUtils#dropTables  */ protected void dropTables(String... names) {     JdbcTestUtils.dropTables(this.jdbcTemplate, names). }
true;protected;2;7;/**  * Execute the given SQL script.  * <p>Use with caution outside of a transaction!  * <p>The script will normally be loaded by classpath.  * <p><b>Do not use this method to execute DDL if you expect rollback.</b>  * @param sqlResourcePath the Spring resource path for the SQL script  * @param continueOnError whether or not to continue without throwing an  * exception in the event of an error  * @throws DataAccessException if there is an error executing a statement  * @see ResourceDatabasePopulator  * @see #setSqlScriptEncoding  */ ;/**  * Execute the given SQL script.  * <p>Use with caution outside of a transaction!  * <p>The script will normally be loaded by classpath.  * <p><b>Do not use this method to execute DDL if you expect rollback.</b>  * @param sqlResourcePath the Spring resource path for the SQL script  * @param continueOnError whether or not to continue without throwing an  * exception in the event of an error  * @throws DataAccessException if there is an error executing a statement  * @see ResourceDatabasePopulator  * @see #setSqlScriptEncoding  */ protected void executeSqlScript(String sqlResourcePath, boolean continueOnError) throws DataAccessException {     DataSource ds = this.jdbcTemplate.getDataSource().     Assert.state(ds != null, "No DataSource set").     Assert.state(this.applicationContext != null, "No ApplicationContext available").     Resource resource = this.applicationContext.getResource(sqlResourcePath).     new ResourceDatabasePopulator(continueOnError, false, this.sqlScriptEncoding, resource).execute(ds). }
