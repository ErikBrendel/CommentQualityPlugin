# id;timestamp;commentText;codeText;commentWords;codeWords
JsonExpectationsHelper -> public void assertJsonNotEqual(String expected, String actual, boolean strict) throws Exception;1446134737;Parse the expected and actual strings as JSON and assert the two_are "not similar" - i.e. they contain different attribute-value pairs_regardless of formatting.__<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>__@param expected the expected JSON content_@param actual the actual JSON content_@param strict enables strict checking_@since 4.2;public void assertJsonNotEqual(String expected, String actual, boolean strict) throws Exception {_		JSONAssert.assertNotEquals(expected, actual, strict)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,not,similar,i,e,they,contain,different,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,param,expected,the,expected,json,content,param,actual,the,actual,json,content,param,strict,enables,strict,checking,since,4,2;public,void,assert,json,not,equal,string,expected,string,actual,boolean,strict,throws,exception,jsonassert,assert,not,equals,expected,actual,strict
JsonExpectationsHelper -> public void assertJsonNotEqual(String expected, String actual, boolean strict) throws Exception;1496955179;Parse the expected and actual strings as JSON and assert the two_are "not similar" - i.e. they contain different attribute-value pairs_regardless of formatting._<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>_@param expected the expected JSON content_@param actual the actual JSON content_@param strict enables strict checking_@since 4.2;public void assertJsonNotEqual(String expected, String actual, boolean strict) throws Exception {_		JSONAssert.assertNotEquals(expected, actual, strict)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,not,similar,i,e,they,contain,different,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,param,expected,the,expected,json,content,param,actual,the,actual,json,content,param,strict,enables,strict,checking,since,4,2;public,void,assert,json,not,equal,string,expected,string,actual,boolean,strict,throws,exception,jsonassert,assert,not,equals,expected,actual,strict
JsonExpectationsHelper -> public void assertJsonNotEqual(String expected, String actual, boolean strict) throws Exception;1530174524;Parse the expected and actual strings as JSON and assert the two_are "not similar" - i.e. they contain different attribute-value pairs_regardless of formatting._<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>_@param expected the expected JSON content_@param actual the actual JSON content_@param strict enables strict checking_@since 4.2;public void assertJsonNotEqual(String expected, String actual, boolean strict) throws Exception {_		JSONAssert.assertNotEquals(expected, actual, strict)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,not,similar,i,e,they,contain,different,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,param,expected,the,expected,json,content,param,actual,the,actual,json,content,param,strict,enables,strict,checking,since,4,2;public,void,assert,json,not,equal,string,expected,string,actual,boolean,strict,throws,exception,jsonassert,assert,not,equals,expected,actual,strict
JsonExpectationsHelper -> public void assertJsonEqual(String expected, String actual, boolean strict) throws Exception;1446134737;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting.__<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>__@param expected the expected JSON content_@param actual the actual JSON content_@param strict enables strict checking_@since 4.2;public void assertJsonEqual(String expected, String actual, boolean strict) throws Exception {_		JSONAssert.assertEquals(expected, actual, strict)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,param,expected,the,expected,json,content,param,actual,the,actual,json,content,param,strict,enables,strict,checking,since,4,2;public,void,assert,json,equal,string,expected,string,actual,boolean,strict,throws,exception,jsonassert,assert,equals,expected,actual,strict
JsonExpectationsHelper -> public void assertJsonEqual(String expected, String actual, boolean strict) throws Exception;1496955179;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting._<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>_@param expected the expected JSON content_@param actual the actual JSON content_@param strict enables strict checking_@since 4.2;public void assertJsonEqual(String expected, String actual, boolean strict) throws Exception {_		JSONAssert.assertEquals(expected, actual, strict)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,param,expected,the,expected,json,content,param,actual,the,actual,json,content,param,strict,enables,strict,checking,since,4,2;public,void,assert,json,equal,string,expected,string,actual,boolean,strict,throws,exception,jsonassert,assert,equals,expected,actual,strict
JsonExpectationsHelper -> public void assertJsonEqual(String expected, String actual, boolean strict) throws Exception;1530174524;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting._<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>_@param expected the expected JSON content_@param actual the actual JSON content_@param strict enables strict checking_@since 4.2;public void assertJsonEqual(String expected, String actual, boolean strict) throws Exception {_		JSONAssert.assertEquals(expected, actual, strict)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,param,expected,the,expected,json,content,param,actual,the,actual,json,content,param,strict,enables,strict,checking,since,4,2;public,void,assert,json,equal,string,expected,string,actual,boolean,strict,throws,exception,jsonassert,assert,equals,expected,actual,strict
JsonExpectationsHelper -> public void assertJsonNotEqual(String expected, String actual) throws Exception;1404269222;Parse the expected and actual strings as JSON and assert the two_are "not similar" - i.e. they contain different attribute-value pairs_regardless of order and formatting.__@param expected the expected JSON content_@param actual the actual JSON content_@since 4.1;public void assertJsonNotEqual(String expected, String actual) throws Exception {_		JSONAssert.assertNotEquals(expected, actual, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,not,similar,i,e,they,contain,different,attribute,value,pairs,regardless,of,order,and,formatting,param,expected,the,expected,json,content,param,actual,the,actual,json,content,since,4,1;public,void,assert,json,not,equal,string,expected,string,actual,throws,exception,jsonassert,assert,not,equals,expected,actual,false
JsonExpectationsHelper -> public void assertJsonNotEqual(String expected, String actual) throws Exception;1446134737;Parse the expected and actual strings as JSON and assert the two_are "not similar" - i.e. they contain different attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict_array ordering).__@param expected the expected JSON content_@param actual the actual JSON content_@since 4.1_@see #assertJsonNotEqual(String, String, boolean);public void assertJsonNotEqual(String expected, String actual) throws Exception {_		assertJsonNotEqual(expected, actual, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,not,similar,i,e,they,contain,different,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,param,expected,the,expected,json,content,param,actual,the,actual,json,content,since,4,1,see,assert,json,not,equal,string,string,boolean;public,void,assert,json,not,equal,string,expected,string,actual,throws,exception,assert,json,not,equal,expected,actual,false
JsonExpectationsHelper -> public void assertJsonNotEqual(String expected, String actual) throws Exception;1496955179;Parse the expected and actual strings as JSON and assert the two_are "not similar" - i.e. they contain different attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict_array ordering)._@param expected the expected JSON content_@param actual the actual JSON content_@since 4.1_@see #assertJsonNotEqual(String, String, boolean);public void assertJsonNotEqual(String expected, String actual) throws Exception {_		assertJsonNotEqual(expected, actual, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,not,similar,i,e,they,contain,different,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,param,expected,the,expected,json,content,param,actual,the,actual,json,content,since,4,1,see,assert,json,not,equal,string,string,boolean;public,void,assert,json,not,equal,string,expected,string,actual,throws,exception,assert,json,not,equal,expected,actual,false
JsonExpectationsHelper -> public void assertJsonNotEqual(String expected, String actual) throws Exception;1530174524;Parse the expected and actual strings as JSON and assert the two_are "not similar" - i.e. they contain different attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict_array ordering)._@param expected the expected JSON content_@param actual the actual JSON content_@since 4.1_@see #assertJsonNotEqual(String, String, boolean);public void assertJsonNotEqual(String expected, String actual) throws Exception {_		assertJsonNotEqual(expected, actual, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,not,similar,i,e,they,contain,different,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,param,expected,the,expected,json,content,param,actual,the,actual,json,content,since,4,1,see,assert,json,not,equal,string,string,boolean;public,void,assert,json,not,equal,string,expected,string,actual,throws,exception,assert,json,not,equal,expected,actual,false
JsonExpectationsHelper -> public void assertJsonEqual(String expected, String actual) throws Exception;1404269222;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of order and formatting.__@param expected the expected JSON content_@param actual the actual JSON content_@since 4.1;public void assertJsonEqual(String expected, String actual) throws Exception {_		JSONAssert.assertEquals(expected, actual, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,order,and,formatting,param,expected,the,expected,json,content,param,actual,the,actual,json,content,since,4,1;public,void,assert,json,equal,string,expected,string,actual,throws,exception,jsonassert,assert,equals,expected,actual,false
JsonExpectationsHelper -> public void assertJsonEqual(String expected, String actual) throws Exception;1446134737;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict_array ordering).__@param expected the expected JSON content_@param actual the actual JSON content_@since 4.1_@see #assertJsonEqual(String, String, boolean);public void assertJsonEqual(String expected, String actual) throws Exception {_		assertJsonEqual(expected, actual, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,param,expected,the,expected,json,content,param,actual,the,actual,json,content,since,4,1,see,assert,json,equal,string,string,boolean;public,void,assert,json,equal,string,expected,string,actual,throws,exception,assert,json,equal,expected,actual,false
JsonExpectationsHelper -> public void assertJsonEqual(String expected, String actual) throws Exception;1496955179;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict_array ordering)._@param expected the expected JSON content_@param actual the actual JSON content_@since 4.1_@see #assertJsonEqual(String, String, boolean);public void assertJsonEqual(String expected, String actual) throws Exception {_		assertJsonEqual(expected, actual, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,param,expected,the,expected,json,content,param,actual,the,actual,json,content,since,4,1,see,assert,json,equal,string,string,boolean;public,void,assert,json,equal,string,expected,string,actual,throws,exception,assert,json,equal,expected,actual,false
JsonExpectationsHelper -> public void assertJsonEqual(String expected, String actual) throws Exception;1530174524;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict_array ordering)._@param expected the expected JSON content_@param actual the actual JSON content_@since 4.1_@see #assertJsonEqual(String, String, boolean);public void assertJsonEqual(String expected, String actual) throws Exception {_		assertJsonEqual(expected, actual, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,param,expected,the,expected,json,content,param,actual,the,actual,json,content,since,4,1,see,assert,json,equal,string,string,boolean;public,void,assert,json,equal,string,expected,string,actual,throws,exception,assert,json,equal,expected,actual,false
