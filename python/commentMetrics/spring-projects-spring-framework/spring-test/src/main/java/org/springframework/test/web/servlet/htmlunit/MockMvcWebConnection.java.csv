commented;modifiers;parameterAmount;loc;comment;code
true;static;1;7;/**  * Validate the supplied {@code contextPath}.  * <p>If the value is not {@code null}, it must conform to  * {@link javax.servlet.http.HttpServletRequest#getContextPath()} which  * states that it can be an empty string and otherwise must start with  * a "/" character and not end with a "/" character.  * @param contextPath the path to validate  */ ;/**  * Validate the supplied {@code contextPath}.  * <p>If the value is not {@code null}, it must conform to  * {@link javax.servlet.http.HttpServletRequest#getContextPath()} which  * states that it can be an empty string and otherwise must start with  * a "/" character and not end with a "/" character.  * @param contextPath the path to validate  */ static void validateContextPath(@Nullable String contextPath) {     if (contextPath == null || "".equals(contextPath)) {         return.     }     Assert.isTrue(contextPath.startsWith("/"), () -> "contextPath '" + contextPath + "' must start with '/'.").     Assert.isTrue(!contextPath.endsWith("/"), () -> "contextPath '" + contextPath + "' must not end with '/'."). }
false;public;1;4;;public void setWebClient(WebClient webClient) {     Assert.notNull(webClient, "WebClient must not be null").     this.webClient = webClient. }
false;public;1;16;;public WebResponse getResponse(WebRequest webRequest) throws IOException {     long startTime = System.currentTimeMillis().     HtmlUnitRequestBuilder requestBuilder = new HtmlUnitRequestBuilder(this.sessions, this.webClient, webRequest).     requestBuilder.setContextPath(this.contextPath).     MockHttpServletResponse httpServletResponse = getResponse(requestBuilder).     String forwardedUrl = httpServletResponse.getForwardedUrl().     while (forwardedUrl != null) {         requestBuilder.setForwardPostProcessor(new ForwardRequestPostProcessor(forwardedUrl)).         httpServletResponse = getResponse(requestBuilder).         forwardedUrl = httpServletResponse.getForwardedUrl().     }     storeCookies(webRequest, httpServletResponse.getCookies()).     return new MockWebResponseBuilder(startTime, webRequest, httpServletResponse).build(). }
false;private;1;11;;private MockHttpServletResponse getResponse(RequestBuilder requestBuilder) throws IOException {     ResultActions resultActions.     try {         resultActions = this.mockMvc.perform(requestBuilder).     } catch (Exception ex) {         throw new IOException(ex).     }     return resultActions.andReturn().getResponse(). }
false;private;2;17;;private void storeCookies(WebRequest webRequest, javax.servlet.http.Cookie[] cookies) {     Date now = new Date().     CookieManager cookieManager = this.webClient.getCookieManager().     for (javax.servlet.http.Cookie cookie : cookies) {         if (cookie.getDomain() == null) {             cookie.setDomain(webRequest.getUrl().getHost()).         }         Cookie toManage = createCookie(cookie).         Date expires = toManage.getExpires().         if (expires == null || expires.after(now)) {             cookieManager.addCookie(toManage).         } else {             cookieManager.removeCookie(toManage).         }     } }
false;private,static;1;16;;private static com.gargoylesoftware.htmlunit.util.Cookie createCookie(javax.servlet.http.Cookie cookie) {     Date expires = null.     if (cookie.getMaxAge() > -1) {         expires = new Date(System.currentTimeMillis() + cookie.getMaxAge() * 1000).     }     BasicClientCookie result = new BasicClientCookie(cookie.getName(), cookie.getValue()).     result.setDomain(cookie.getDomain()).     result.setComment(cookie.getComment()).     result.setExpiryDate(expires).     result.setPath(cookie.getPath()).     result.setSecure(cookie.getSecure()).     if (cookie.isHttpOnly()) {         result.setAttribute("httponly", "true").     }     return new com.gargoylesoftware.htmlunit.util.Cookie(result). }
false;public;0;3;;@Override public void close() { }
