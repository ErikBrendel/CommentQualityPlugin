# id;timestamp;commentText;codeText;commentWords;codeWords
MockMvcWebConnection -> static void validateContextPath(@Nullable String contextPath);1495868221;Validate the supplied {@code contextPath}._<p>If the value is not {@code null}, it must conform to_{@link javax.servlet.http.HttpServletRequest#getContextPath()} which_states that it can be an empty string and otherwise must start with_a "/" character and not end with a "/" character._@param contextPath the path to validate;static void validateContextPath(@Nullable String contextPath) {_		if (contextPath == null || "".equals(contextPath)) {_			return__		}_		Assert.isTrue(contextPath.startsWith("/"), () -> "contextPath '" + contextPath + "' must start with '/'.")__		Assert.isTrue(!contextPath.endsWith("/"), () -> "contextPath '" + contextPath + "' must not end with '/'.")__	};validate,the,supplied,code,context,path,p,if,the,value,is,not,code,null,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,context,path,the,path,to,validate;static,void,validate,context,path,nullable,string,context,path,if,context,path,null,equals,context,path,return,assert,is,true,context,path,starts,with,context,path,context,path,must,start,with,assert,is,true,context,path,ends,with,context,path,context,path,must,not,end,with
MockMvcWebConnection -> static void validateContextPath(@Nullable String contextPath);1496955179;Validate the supplied {@code contextPath}._<p>If the value is not {@code null}, it must conform to_{@link javax.servlet.http.HttpServletRequest#getContextPath()} which_states that it can be an empty string and otherwise must start with_a "/" character and not end with a "/" character._@param contextPath the path to validate;static void validateContextPath(@Nullable String contextPath) {_		if (contextPath == null || "".equals(contextPath)) {_			return__		}_		Assert.isTrue(contextPath.startsWith("/"), () -> "contextPath '" + contextPath + "' must start with '/'.")__		Assert.isTrue(!contextPath.endsWith("/"), () -> "contextPath '" + contextPath + "' must not end with '/'.")__	};validate,the,supplied,code,context,path,p,if,the,value,is,not,code,null,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,context,path,the,path,to,validate;static,void,validate,context,path,nullable,string,context,path,if,context,path,null,equals,context,path,return,assert,is,true,context,path,starts,with,context,path,context,path,must,start,with,assert,is,true,context,path,ends,with,context,path,context,path,must,not,end,with
MockMvcWebConnection -> static void validateContextPath(@Nullable String contextPath);1498780456;Validate the supplied {@code contextPath}._<p>If the value is not {@code null}, it must conform to_{@link javax.servlet.http.HttpServletRequest#getContextPath()} which_states that it can be an empty string and otherwise must start with_a "/" character and not end with a "/" character._@param contextPath the path to validate;static void validateContextPath(@Nullable String contextPath) {_		if (contextPath == null || "".equals(contextPath)) {_			return__		}_		Assert.isTrue(contextPath.startsWith("/"), () -> "contextPath '" + contextPath + "' must start with '/'.")__		Assert.isTrue(!contextPath.endsWith("/"), () -> "contextPath '" + contextPath + "' must not end with '/'.")__	};validate,the,supplied,code,context,path,p,if,the,value,is,not,code,null,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,context,path,the,path,to,validate;static,void,validate,context,path,nullable,string,context,path,if,context,path,null,equals,context,path,return,assert,is,true,context,path,starts,with,context,path,context,path,must,start,with,assert,is,true,context,path,ends,with,context,path,context,path,must,not,end,with
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient);1458316915;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient the {@link WebClient} to use. never {@code null};public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient) {_		this(mockMvc, webClient, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,this,mock,mvc,web,client
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient);1458499074;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient the {@link WebClient} to use. never {@code null};public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient) {_		this(mockMvc, webClient, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,this,mock,mvc,web,client
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient);1460400578;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient the {@link WebClient} to use. never {@code null};public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient) {_		this(mockMvc, webClient, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,this,mock,mvc,web,client
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient);1464713837;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient the {@link WebClient} to use. never {@code null};public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient) {_		this(mockMvc, webClient, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,this,mock,mvc,web,client
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient);1467726769;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient the {@link WebClient} to use. never {@code null};public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient) {_		this(mockMvc, webClient, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,this,mock,mvc,web,client
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient);1467730834;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient the {@link WebClient} to use. never {@code null};public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient) {_		this(mockMvc, webClient, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,this,mock,mvc,web,client
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient);1468334463;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient the {@link WebClient} to use. never {@code null};public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient) {_		this(mockMvc, webClient, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,this,mock,mvc,web,client
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient);1491860231;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient the {@link WebClient} to use. never {@code null};public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient) {_		this(mockMvc, webClient, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,this,mock,mvc,web,client
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient);1495868221;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient the {@link WebClient} to use. never {@code null};public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient) {_		this(mockMvc, webClient, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,this,mock,mvc,web,client
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient);1496955179;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient the {@link WebClient} to use. never {@code null};public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient) {_		this(mockMvc, webClient, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,this,mock,mvc,web,client
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient);1498780456;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient the {@link WebClient} to use. never {@code null};public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient) {_		this(mockMvc, webClient, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,this,mock,mvc,web,client
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc);1437991650;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null};public MockMvcWebConnection(MockMvc mockMvc) {_		this(mockMvc, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null;public,mock,mvc,web,connection,mock,mvc,mock,mvc,this,mock,mvc
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc);1437995214;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null};public MockMvcWebConnection(MockMvc mockMvc) {_		this(mockMvc, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null;public,mock,mvc,web,connection,mock,mvc,mock,mvc,this,mock,mvc
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc);1447511562;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null};public MockMvcWebConnection(MockMvc mockMvc) {_		this(mockMvc, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null;public,mock,mvc,web,connection,mock,mvc,mock,mvc,this,mock,mvc
MockMvcWebConnection -> @Deprecated 	public MockMvcWebConnection(MockMvc mockMvc);1458316915;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@deprecated Use {@link #MockMvcWebConnection(MockMvc, WebClient)};@Deprecated_	public MockMvcWebConnection(MockMvc mockMvc) {_		this(mockMvc, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,deprecated,use,link,mock,mvc,web,connection,mock,mvc,web,client;deprecated,public,mock,mvc,web,connection,mock,mvc,mock,mvc,this,mock,mvc
MockMvcWebConnection -> @Deprecated 	public MockMvcWebConnection(MockMvc mockMvc);1458499074;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@deprecated Use {@link #MockMvcWebConnection(MockMvc, WebClient)};@Deprecated_	public MockMvcWebConnection(MockMvc mockMvc) {_		this(mockMvc, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,deprecated,use,link,mock,mvc,web,connection,mock,mvc,web,client;deprecated,public,mock,mvc,web,connection,mock,mvc,mock,mvc,this,mock,mvc
MockMvcWebConnection -> @Deprecated 	public MockMvcWebConnection(MockMvc mockMvc);1460400578;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@deprecated Use {@link #MockMvcWebConnection(MockMvc, WebClient)};@Deprecated_	public MockMvcWebConnection(MockMvc mockMvc) {_		this(mockMvc, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,deprecated,use,link,mock,mvc,web,connection,mock,mvc,web,client;deprecated,public,mock,mvc,web,connection,mock,mvc,mock,mvc,this,mock,mvc
MockMvcWebConnection -> @Deprecated 	public MockMvcWebConnection(MockMvc mockMvc);1464713837;Create a new instance that assumes the context path of the application_is {@code ""} (i.e., the root context)._<p>For example, the URL {@code http://localhost/test/this} would use_{@code ""} as the context path._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@deprecated Use {@link #MockMvcWebConnection(MockMvc, WebClient)};@Deprecated_	public MockMvcWebConnection(MockMvc mockMvc) {_		this(mockMvc, "")__	};create,a,new,instance,that,assumes,the,context,path,of,the,application,is,code,i,e,the,root,context,p,for,example,the,url,code,http,localhost,test,this,would,use,code,as,the,context,path,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,deprecated,use,link,mock,mvc,web,connection,mock,mvc,web,client;deprecated,public,mock,mvc,web,connection,mock,mvc,mock,mvc,this,mock,mvc
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, String contextPath);1437991650;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param contextPath the contextPath to use;public MockMvcWebConnection(MockMvc mockMvc, String contextPath) {_		Assert.notNull(mockMvc, "mockMvc must not be null")__		validateContextPath(contextPath)___		this.webClient = new WebClient()__		this.mockMvc = mockMvc__		this.contextPath = contextPath__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,context,path,the,context,path,to,use;public,mock,mvc,web,connection,mock,mvc,mock,mvc,string,context,path,assert,not,null,mock,mvc,mock,mvc,must,not,be,null,validate,context,path,context,path,this,web,client,new,web,client,this,mock,mvc,mock,mvc,this,context,path,context,path
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, String contextPath);1437995214;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param contextPath the contextPath to use;public MockMvcWebConnection(MockMvc mockMvc, String contextPath) {_		Assert.notNull(mockMvc, "mockMvc must not be null")__		validateContextPath(contextPath)___		this.webClient = new WebClient()__		this.mockMvc = mockMvc__		this.contextPath = contextPath__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,context,path,the,context,path,to,use;public,mock,mvc,web,connection,mock,mvc,mock,mvc,string,context,path,assert,not,null,mock,mvc,mock,mvc,must,not,be,null,validate,context,path,context,path,this,web,client,new,web,client,this,mock,mvc,mock,mvc,this,context,path,context,path
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, String contextPath);1447511562;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param contextPath the contextPath to use;public MockMvcWebConnection(MockMvc mockMvc, String contextPath) {_		Assert.notNull(mockMvc, "MockMvc must not be null")__		validateContextPath(contextPath)___		this.webClient = new WebClient()__		this.mockMvc = mockMvc__		this.contextPath = contextPath__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,context,path,the,context,path,to,use;public,mock,mvc,web,connection,mock,mvc,mock,mvc,string,context,path,assert,not,null,mock,mvc,mock,mvc,must,not,be,null,validate,context,path,context,path,this,web,client,new,web,client,this,mock,mvc,mock,mvc,this,context,path,context,path
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath);1458316915;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient  the {@link WebClient} to use. never {@code null}_@param contextPath the contextPath to use;public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath) {_		Assert.notNull(mockMvc, "MockMvc must not be null")__		Assert.notNull(webClient, "WebClient must not be null")__		validateContextPath(contextPath)___		this.webClient = webClient__		this.mockMvc = mockMvc__		this.contextPath = contextPath__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null,param,context,path,the,context,path,to,use;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,string,context,path,assert,not,null,mock,mvc,mock,mvc,must,not,be,null,assert,not,null,web,client,web,client,must,not,be,null,validate,context,path,context,path,this,web,client,web,client,this,mock,mvc,mock,mvc,this,context,path,context,path
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath);1458499074;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient  the {@link WebClient} to use. never {@code null}_@param contextPath the contextPath to use;public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath) {_		Assert.notNull(mockMvc, "MockMvc must not be null")__		Assert.notNull(webClient, "WebClient must not be null")__		validateContextPath(contextPath)___		this.webClient = webClient__		this.mockMvc = mockMvc__		this.contextPath = contextPath__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null,param,context,path,the,context,path,to,use;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,string,context,path,assert,not,null,mock,mvc,mock,mvc,must,not,be,null,assert,not,null,web,client,web,client,must,not,be,null,validate,context,path,context,path,this,web,client,web,client,this,mock,mvc,mock,mvc,this,context,path,context,path
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath);1460400578;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient  the {@link WebClient} to use. never {@code null}_@param contextPath the contextPath to use;public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath) {_		Assert.notNull(mockMvc, "MockMvc must not be null")__		Assert.notNull(webClient, "WebClient must not be null")__		validateContextPath(contextPath)___		this.webClient = webClient__		this.mockMvc = mockMvc__		this.contextPath = contextPath__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null,param,context,path,the,context,path,to,use;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,string,context,path,assert,not,null,mock,mvc,mock,mvc,must,not,be,null,assert,not,null,web,client,web,client,must,not,be,null,validate,context,path,context,path,this,web,client,web,client,this,mock,mvc,mock,mvc,this,context,path,context,path
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath);1464713837;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient  the {@link WebClient} to use. never {@code null}_@param contextPath the contextPath to use;public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath) {_		Assert.notNull(mockMvc, "MockMvc must not be null")__		Assert.notNull(webClient, "WebClient must not be null")__		validateContextPath(contextPath)___		this.webClient = webClient__		this.mockMvc = mockMvc__		this.contextPath = contextPath__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null,param,context,path,the,context,path,to,use;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,string,context,path,assert,not,null,mock,mvc,mock,mvc,must,not,be,null,assert,not,null,web,client,web,client,must,not,be,null,validate,context,path,context,path,this,web,client,web,client,this,mock,mvc,mock,mvc,this,context,path,context,path
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath);1467726769;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient  the {@link WebClient} to use. never {@code null}_@param contextPath the contextPath to use;public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath) {_		Assert.notNull(mockMvc, "MockMvc must not be null")__		Assert.notNull(webClient, "WebClient must not be null")__		validateContextPath(contextPath)___		this.webClient = webClient__		this.mockMvc = mockMvc__		this.contextPath = contextPath__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null,param,context,path,the,context,path,to,use;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,string,context,path,assert,not,null,mock,mvc,mock,mvc,must,not,be,null,assert,not,null,web,client,web,client,must,not,be,null,validate,context,path,context,path,this,web,client,web,client,this,mock,mvc,mock,mvc,this,context,path,context,path
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath);1467730834;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient  the {@link WebClient} to use. never {@code null}_@param contextPath the contextPath to use;public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath) {_		Assert.notNull(mockMvc, "MockMvc must not be null")__		Assert.notNull(webClient, "WebClient must not be null")__		validateContextPath(contextPath)___		this.webClient = webClient__		this.mockMvc = mockMvc__		this.contextPath = contextPath__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null,param,context,path,the,context,path,to,use;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,string,context,path,assert,not,null,mock,mvc,mock,mvc,must,not,be,null,assert,not,null,web,client,web,client,must,not,be,null,validate,context,path,context,path,this,web,client,web,client,this,mock,mvc,mock,mvc,this,context,path,context,path
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath);1468334463;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient  the {@link WebClient} to use. never {@code null}_@param contextPath the contextPath to use;public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath) {_		Assert.notNull(mockMvc, "MockMvc must not be null")__		Assert.notNull(webClient, "WebClient must not be null")__		validateContextPath(contextPath)___		this.webClient = webClient__		this.mockMvc = mockMvc__		this.contextPath = contextPath__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null,param,context,path,the,context,path,to,use;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,string,context,path,assert,not,null,mock,mvc,mock,mvc,must,not,be,null,assert,not,null,web,client,web,client,must,not,be,null,validate,context,path,context,path,this,web,client,web,client,this,mock,mvc,mock,mvc,this,context,path,context,path
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath);1491860231;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient  the {@link WebClient} to use. never {@code null}_@param contextPath the contextPath to use;public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath) {_		Assert.notNull(mockMvc, "MockMvc must not be null")__		Assert.notNull(webClient, "WebClient must not be null")__		validateContextPath(contextPath)___		this.webClient = webClient__		this.mockMvc = mockMvc__		this.contextPath = contextPath__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null,param,context,path,the,context,path,to,use;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,string,context,path,assert,not,null,mock,mvc,mock,mvc,must,not,be,null,assert,not,null,web,client,web,client,must,not,be,null,validate,context,path,context,path,this,web,client,web,client,this,mock,mvc,mock,mvc,this,context,path,context,path
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath);1498780456;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use (never {@code null})_@param webClient the {@link WebClient} to use (never {@code null})_@param contextPath the contextPath to use;public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath) {_		Assert.notNull(mockMvc, "MockMvc must not be null")__		Assert.notNull(webClient, "WebClient must not be null")__		validateContextPath(contextPath)___		this.webClient = webClient__		this.mockMvc = mockMvc__		this.contextPath = contextPath__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null,param,context,path,the,context,path,to,use;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,string,context,path,assert,not,null,mock,mvc,mock,mvc,must,not,be,null,assert,not,null,web,client,web,client,must,not,be,null,validate,context,path,context,path,this,web,client,web,client,this,mock,mvc,mock,mvc,this,context,path,context,path
MockMvcWebConnection -> static void validateContextPath(String contextPath);1437991650;Validate the supplied {@code contextPath}._<p>If the value is not {@code null}, it must conform to_{@link javax.servlet.http.HttpServletRequest#getContextPath()} which_states that it can be an empty string and otherwise must start with_a "/" character and not end with a "/" character._@param contextPath the path to validate;static void validateContextPath(String contextPath) {_		if (contextPath == null || "".equals(contextPath)) {_			return__		}_		if (!contextPath.startsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must start with '/'.")__		}_		if (contextPath.endsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must not end with '/'.")__		}_	};validate,the,supplied,code,context,path,p,if,the,value,is,not,code,null,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,context,path,the,path,to,validate;static,void,validate,context,path,string,context,path,if,context,path,null,equals,context,path,return,if,context,path,starts,with,throw,new,illegal,argument,exception,context,path,context,path,must,start,with,if,context,path,ends,with,throw,new,illegal,argument,exception,context,path,context,path,must,not,end,with
MockMvcWebConnection -> static void validateContextPath(String contextPath);1437995214;Validate the supplied {@code contextPath}._<p>If the value is not {@code null}, it must conform to_{@link javax.servlet.http.HttpServletRequest#getContextPath()} which_states that it can be an empty string and otherwise must start with_a "/" character and not end with a "/" character._@param contextPath the path to validate;static void validateContextPath(String contextPath) {_		if (contextPath == null || "".equals(contextPath)) {_			return__		}_		if (!contextPath.startsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must start with '/'.")__		}_		if (contextPath.endsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must not end with '/'.")__		}_	};validate,the,supplied,code,context,path,p,if,the,value,is,not,code,null,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,context,path,the,path,to,validate;static,void,validate,context,path,string,context,path,if,context,path,null,equals,context,path,return,if,context,path,starts,with,throw,new,illegal,argument,exception,context,path,context,path,must,start,with,if,context,path,ends,with,throw,new,illegal,argument,exception,context,path,context,path,must,not,end,with
MockMvcWebConnection -> static void validateContextPath(String contextPath);1447511562;Validate the supplied {@code contextPath}._<p>If the value is not {@code null}, it must conform to_{@link javax.servlet.http.HttpServletRequest#getContextPath()} which_states that it can be an empty string and otherwise must start with_a "/" character and not end with a "/" character._@param contextPath the path to validate;static void validateContextPath(String contextPath) {_		if (contextPath == null || "".equals(contextPath)) {_			return__		}_		if (!contextPath.startsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must start with '/'.")__		}_		if (contextPath.endsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must not end with '/'.")__		}_	};validate,the,supplied,code,context,path,p,if,the,value,is,not,code,null,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,context,path,the,path,to,validate;static,void,validate,context,path,string,context,path,if,context,path,null,equals,context,path,return,if,context,path,starts,with,throw,new,illegal,argument,exception,context,path,context,path,must,start,with,if,context,path,ends,with,throw,new,illegal,argument,exception,context,path,context,path,must,not,end,with
MockMvcWebConnection -> static void validateContextPath(String contextPath);1458316915;Validate the supplied {@code contextPath}._<p>If the value is not {@code null}, it must conform to_{@link javax.servlet.http.HttpServletRequest#getContextPath()} which_states that it can be an empty string and otherwise must start with_a "/" character and not end with a "/" character._@param contextPath the path to validate;static void validateContextPath(String contextPath) {_		if (contextPath == null || "".equals(contextPath)) {_			return__		}_		if (!contextPath.startsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must start with '/'.")__		}_		if (contextPath.endsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must not end with '/'.")__		}_	};validate,the,supplied,code,context,path,p,if,the,value,is,not,code,null,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,context,path,the,path,to,validate;static,void,validate,context,path,string,context,path,if,context,path,null,equals,context,path,return,if,context,path,starts,with,throw,new,illegal,argument,exception,context,path,context,path,must,start,with,if,context,path,ends,with,throw,new,illegal,argument,exception,context,path,context,path,must,not,end,with
MockMvcWebConnection -> static void validateContextPath(String contextPath);1458499074;Validate the supplied {@code contextPath}._<p>If the value is not {@code null}, it must conform to_{@link javax.servlet.http.HttpServletRequest#getContextPath()} which_states that it can be an empty string and otherwise must start with_a "/" character and not end with a "/" character._@param contextPath the path to validate;static void validateContextPath(String contextPath) {_		if (contextPath == null || "".equals(contextPath)) {_			return__		}_		if (!contextPath.startsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must start with '/'.")__		}_		if (contextPath.endsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must not end with '/'.")__		}_	};validate,the,supplied,code,context,path,p,if,the,value,is,not,code,null,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,context,path,the,path,to,validate;static,void,validate,context,path,string,context,path,if,context,path,null,equals,context,path,return,if,context,path,starts,with,throw,new,illegal,argument,exception,context,path,context,path,must,start,with,if,context,path,ends,with,throw,new,illegal,argument,exception,context,path,context,path,must,not,end,with
MockMvcWebConnection -> static void validateContextPath(String contextPath);1460400578;Validate the supplied {@code contextPath}._<p>If the value is not {@code null}, it must conform to_{@link javax.servlet.http.HttpServletRequest#getContextPath()} which_states that it can be an empty string and otherwise must start with_a "/" character and not end with a "/" character._@param contextPath the path to validate;static void validateContextPath(String contextPath) {_		if (contextPath == null || "".equals(contextPath)) {_			return__		}_		if (!contextPath.startsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must start with '/'.")__		}_		if (contextPath.endsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must not end with '/'.")__		}_	};validate,the,supplied,code,context,path,p,if,the,value,is,not,code,null,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,context,path,the,path,to,validate;static,void,validate,context,path,string,context,path,if,context,path,null,equals,context,path,return,if,context,path,starts,with,throw,new,illegal,argument,exception,context,path,context,path,must,start,with,if,context,path,ends,with,throw,new,illegal,argument,exception,context,path,context,path,must,not,end,with
MockMvcWebConnection -> static void validateContextPath(String contextPath);1464713837;Validate the supplied {@code contextPath}._<p>If the value is not {@code null}, it must conform to_{@link javax.servlet.http.HttpServletRequest#getContextPath()} which_states that it can be an empty string and otherwise must start with_a "/" character and not end with a "/" character._@param contextPath the path to validate;static void validateContextPath(String contextPath) {_		if (contextPath == null || "".equals(contextPath)) {_			return__		}_		if (!contextPath.startsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must start with '/'.")__		}_		if (contextPath.endsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must not end with '/'.")__		}_	};validate,the,supplied,code,context,path,p,if,the,value,is,not,code,null,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,context,path,the,path,to,validate;static,void,validate,context,path,string,context,path,if,context,path,null,equals,context,path,return,if,context,path,starts,with,throw,new,illegal,argument,exception,context,path,context,path,must,start,with,if,context,path,ends,with,throw,new,illegal,argument,exception,context,path,context,path,must,not,end,with
MockMvcWebConnection -> static void validateContextPath(String contextPath);1467726769;Validate the supplied {@code contextPath}._<p>If the value is not {@code null}, it must conform to_{@link javax.servlet.http.HttpServletRequest#getContextPath()} which_states that it can be an empty string and otherwise must start with_a "/" character and not end with a "/" character._@param contextPath the path to validate;static void validateContextPath(String contextPath) {_		if (contextPath == null || "".equals(contextPath)) {_			return__		}_		if (!contextPath.startsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must start with '/'.")__		}_		if (contextPath.endsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must not end with '/'.")__		}_	};validate,the,supplied,code,context,path,p,if,the,value,is,not,code,null,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,context,path,the,path,to,validate;static,void,validate,context,path,string,context,path,if,context,path,null,equals,context,path,return,if,context,path,starts,with,throw,new,illegal,argument,exception,context,path,context,path,must,start,with,if,context,path,ends,with,throw,new,illegal,argument,exception,context,path,context,path,must,not,end,with
MockMvcWebConnection -> static void validateContextPath(String contextPath);1467730834;Validate the supplied {@code contextPath}._<p>If the value is not {@code null}, it must conform to_{@link javax.servlet.http.HttpServletRequest#getContextPath()} which_states that it can be an empty string and otherwise must start with_a "/" character and not end with a "/" character._@param contextPath the path to validate;static void validateContextPath(String contextPath) {_		if (contextPath == null || "".equals(contextPath)) {_			return__		}_		if (!contextPath.startsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must start with '/'.")__		}_		if (contextPath.endsWith("/")) {_			throw new IllegalArgumentException("contextPath '" + contextPath + "' must not end with '/'.")__		}_	};validate,the,supplied,code,context,path,p,if,the,value,is,not,code,null,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,context,path,the,path,to,validate;static,void,validate,context,path,string,context,path,if,context,path,null,equals,context,path,return,if,context,path,starts,with,throw,new,illegal,argument,exception,context,path,context,path,must,start,with,if,context,path,ends,with,throw,new,illegal,argument,exception,context,path,context,path,must,not,end,with
MockMvcWebConnection -> static void validateContextPath(String contextPath);1468334463;Validate the supplied {@code contextPath}._<p>If the value is not {@code null}, it must conform to_{@link javax.servlet.http.HttpServletRequest#getContextPath()} which_states that it can be an empty string and otherwise must start with_a "/" character and not end with a "/" character._@param contextPath the path to validate;static void validateContextPath(String contextPath) {_		if (contextPath == null || "".equals(contextPath)) {_			return__		}_		Assert.isTrue(contextPath.startsWith("/"), () -> "contextPath '" + contextPath + "' must start with '/'.")__		Assert.isTrue(!contextPath.endsWith("/"), () -> "contextPath '" + contextPath + "' must not end with '/'.")__	};validate,the,supplied,code,context,path,p,if,the,value,is,not,code,null,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,context,path,the,path,to,validate;static,void,validate,context,path,string,context,path,if,context,path,null,equals,context,path,return,assert,is,true,context,path,starts,with,context,path,context,path,must,start,with,assert,is,true,context,path,ends,with,context,path,context,path,must,not,end,with
MockMvcWebConnection -> static void validateContextPath(String contextPath);1491860231;Validate the supplied {@code contextPath}._<p>If the value is not {@code null}, it must conform to_{@link javax.servlet.http.HttpServletRequest#getContextPath()} which_states that it can be an empty string and otherwise must start with_a "/" character and not end with a "/" character._@param contextPath the path to validate;static void validateContextPath(String contextPath) {_		if (contextPath == null || "".equals(contextPath)) {_			return__		}_		Assert.isTrue(contextPath.startsWith("/"), () -> "contextPath '" + contextPath + "' must start with '/'.")__		Assert.isTrue(!contextPath.endsWith("/"), () -> "contextPath '" + contextPath + "' must not end with '/'.")__	};validate,the,supplied,code,context,path,p,if,the,value,is,not,code,null,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,context,path,the,path,to,validate;static,void,validate,context,path,string,context,path,if,context,path,null,equals,context,path,return,assert,is,true,context,path,starts,with,context,path,context,path,must,start,with,assert,is,true,context,path,ends,with,context,path,context,path,must,not,end,with
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, @Nullable String contextPath);1495868221;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient  the {@link WebClient} to use. never {@code null}_@param contextPath the contextPath to use;public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, @Nullable String contextPath) {_		Assert.notNull(mockMvc, "MockMvc must not be null")__		Assert.notNull(webClient, "WebClient must not be null")__		validateContextPath(contextPath)___		this.webClient = webClient__		this.mockMvc = mockMvc__		this.contextPath = contextPath__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null,param,context,path,the,context,path,to,use;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,nullable,string,context,path,assert,not,null,mock,mvc,mock,mvc,must,not,be,null,assert,not,null,web,client,web,client,must,not,be,null,validate,context,path,context,path,this,web,client,web,client,this,mock,mvc,mock,mvc,this,context,path,context,path
MockMvcWebConnection -> public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, @Nullable String contextPath);1496955179;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param webClient  the {@link WebClient} to use. never {@code null}_@param contextPath the contextPath to use;public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, @Nullable String contextPath) {_		Assert.notNull(mockMvc, "MockMvc must not be null")__		Assert.notNull(webClient, "WebClient must not be null")__		validateContextPath(contextPath)___		this.webClient = webClient__		this.mockMvc = mockMvc__		this.contextPath = contextPath__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,web,client,the,link,web,client,to,use,never,code,null,param,context,path,the,context,path,to,use;public,mock,mvc,web,connection,mock,mvc,mock,mvc,web,client,web,client,nullable,string,context,path,assert,not,null,mock,mvc,mock,mvc,must,not,be,null,assert,not,null,web,client,web,client,must,not,be,null,validate,context,path,context,path,this,web,client,web,client,this,mock,mvc,mock,mvc,this,context,path,context,path
MockMvcWebConnection -> @Deprecated 	public MockMvcWebConnection(MockMvc mockMvc, String contextPath);1458316915;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param contextPath the contextPath to use_@deprecated use {@link #MockMvcWebConnection(MockMvc, WebClient, String)};@Deprecated_	public MockMvcWebConnection(MockMvc mockMvc, String contextPath) {_		this(mockMvc, new WebClient(), contextPath)__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,context,path,the,context,path,to,use,deprecated,use,link,mock,mvc,web,connection,mock,mvc,web,client,string;deprecated,public,mock,mvc,web,connection,mock,mvc,mock,mvc,string,context,path,this,mock,mvc,new,web,client,context,path
MockMvcWebConnection -> @Deprecated 	public MockMvcWebConnection(MockMvc mockMvc, String contextPath);1458499074;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param contextPath the contextPath to use_@deprecated use {@link #MockMvcWebConnection(MockMvc, WebClient, String)};@Deprecated_	public MockMvcWebConnection(MockMvc mockMvc, String contextPath) {_		this(mockMvc, new WebClient(), contextPath)__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,context,path,the,context,path,to,use,deprecated,use,link,mock,mvc,web,connection,mock,mvc,web,client,string;deprecated,public,mock,mvc,web,connection,mock,mvc,mock,mvc,string,context,path,this,mock,mvc,new,web,client,context,path
MockMvcWebConnection -> @Deprecated 	public MockMvcWebConnection(MockMvc mockMvc, String contextPath);1460400578;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param contextPath the contextPath to use_@deprecated use {@link #MockMvcWebConnection(MockMvc, WebClient, String)};@Deprecated_	public MockMvcWebConnection(MockMvc mockMvc, String contextPath) {_		this(mockMvc, new WebClient(), contextPath)__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,context,path,the,context,path,to,use,deprecated,use,link,mock,mvc,web,connection,mock,mvc,web,client,string;deprecated,public,mock,mvc,web,connection,mock,mvc,mock,mvc,string,context,path,this,mock,mvc,new,web,client,context,path
MockMvcWebConnection -> @Deprecated 	public MockMvcWebConnection(MockMvc mockMvc, String contextPath);1464713837;Create a new instance with the specified context path._<p>The path may be {@code null} in which case the first path segment_of the URL is turned into the contextPath. Otherwise it must conform_to {@link javax.servlet.http.HttpServletRequest#getContextPath()}_which states that it can be an empty string and otherwise must start_with a "/" character and not end with a "/" character._@param mockMvc the {@code MockMvc} instance to use_ never {@code null}_@param contextPath the contextPath to use_@deprecated use {@link #MockMvcWebConnection(MockMvc, WebClient, String)};@Deprecated_	public MockMvcWebConnection(MockMvc mockMvc, String contextPath) {_		this(mockMvc, new WebClient(), contextPath)__	};create,a,new,instance,with,the,specified,context,path,p,the,path,may,be,code,null,in,which,case,the,first,path,segment,of,the,url,is,turned,into,the,context,path,otherwise,it,must,conform,to,link,javax,servlet,http,http,servlet,request,get,context,path,which,states,that,it,can,be,an,empty,string,and,otherwise,must,start,with,a,character,and,not,end,with,a,character,param,mock,mvc,the,code,mock,mvc,instance,to,use,never,code,null,param,context,path,the,context,path,to,use,deprecated,use,link,mock,mvc,web,connection,mock,mvc,web,client,string;deprecated,public,mock,mvc,web,connection,mock,mvc,mock,mvc,string,context,path,this,mock,mvc,new,web,client,context,path
