# id;timestamp;commentText;codeText;commentWords;codeWords
DirtiesContextTestExecutionListener -> @Deprecated 	protected void dirtyContext(TestContext testContext);1363208506;Marks the {@linkplain ApplicationContext application context} of the supplied_{@linkplain TestContext test context} as_{@linkplain TestContext#markApplicationContextDirty() dirty}, and sets the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context to {@code true}._@param testContext the test context whose application context should_marked as dirty_@deprecated as of Spring 3.2.2, use {@link #dirtyContext(TestContext, HierarchyMode)} instead.;@Deprecated_	protected void dirtyContext(TestContext testContext) {_		testContext.markApplicationContextDirty()__		testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE)__	};marks,the,linkplain,application,context,application,context,of,the,supplied,linkplain,test,context,test,context,as,linkplain,test,context,mark,application,context,dirty,dirty,and,sets,the,link,dependency,injection,test,execution,listener,in,the,test,context,to,code,true,param,test,context,the,test,context,whose,application,context,should,marked,as,dirty,deprecated,as,of,spring,3,2,2,use,link,dirty,context,test,context,hierarchy,mode,instead;deprecated,protected,void,dirty,context,test,context,test,context,test,context,mark,application,context,dirty,test,context,set,attribute,dependency,injection,test,execution,listener,boolean,true
DirtiesContextTestExecutionListener -> @Deprecated 	protected void dirtyContext(TestContext testContext);1367954761;Marks the {@linkplain ApplicationContext application context} of the supplied_{@linkplain TestContext test context} as_{@linkplain TestContext#markApplicationContextDirty() dirty}, and sets the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE}_in the test context to {@code true}._@param testContext the test context whose application context should_marked as dirty_@deprecated as of Spring 3.2.2, use {@link #dirtyContext(TestContext, HierarchyMode)} instead.;@Deprecated_	protected void dirtyContext(TestContext testContext) {_		testContext.markApplicationContextDirty()__		testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE)__	};marks,the,linkplain,application,context,application,context,of,the,supplied,linkplain,test,context,test,context,as,linkplain,test,context,mark,application,context,dirty,dirty,and,sets,the,link,dependency,injection,test,execution,listener,in,the,test,context,to,code,true,param,test,context,the,test,context,whose,application,context,should,marked,as,dirty,deprecated,as,of,spring,3,2,2,use,link,dirty,context,test,context,hierarchy,mode,instead;deprecated,protected,void,dirty,context,test,context,test,context,test,context,mark,application,context,dirty,test,context,set,attribute,dependency,injection,test,execution,listener,boolean,true
DirtiesContextTestExecutionListener -> @Override 	public final int getOrder();1408048216;Returns {@code 3000}.;@Override_	public final int getOrder() {_		return 3000__	};returns,code,3000;override,public,final,int,get,order,return,3000
DirtiesContextTestExecutionListener -> @Override 	public final int getOrder();1413848647;Returns {@code 3000}.;@Override_	public final int getOrder() {_		return 3000__	};returns,code,3000;override,public,final,int,get,order,return,3000
DirtiesContextTestExecutionListener -> @Override 	public final int getOrder();1427056400;Returns {@code 3000}.;@Override_	public final int getOrder() {_		return 3000__	};returns,code,3000;override,public,final,int,get,order,return,3000
DirtiesContextTestExecutionListener -> @Override 	public final int getOrder();1431568199;Returns {@code 3000}.;@Override_	public final int getOrder() {_		return 3000__	};returns,code,3000;override,public,final,int,get,order,return,3000
DirtiesContextTestExecutionListener -> @Override 	public final int getOrder();1432856630;Returns {@code 3000}.;@Override_	public final int getOrder() {_		return 3000__	};returns,code,3000;override,public,final,int,get,order,return,3000
DirtiesContextTestExecutionListener -> @Override 	public final int getOrder();1434234880;Returns {@code 3000}.;@Override_	public final int getOrder() {_		return 3000__	};returns,code,3000;override,public,final,int,get,order,return,3000
DirtiesContextTestExecutionListener -> @Override 	public final int getOrder();1435776912;Returns {@code 3000}.;@Override_	public final int getOrder() {_		return 3000__	};returns,code,3000;override,public,final,int,get,order,return,3000
DirtiesContextTestExecutionListener -> @Override 	public final int getOrder();1530174524;Returns {@code 3000}.;@Override_	public final int getOrder() {_		return 3000__	};returns,code,3000;override,public,final,int,get,order,return,3000
DirtiesContextTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1328020251;If the current test method of the supplied {@link TestContext test_context} is annotated with {@link DirtiesContext &#064_DirtiesContext},_or if the test class is annotated with {@link DirtiesContext_&#064_DirtiesContext} and the {@link DirtiesContext#classMode() class_mode} is set to {@link ClassMode#AFTER_EACH_TEST_METHOD_AFTER_EACH_TEST_METHOD}, the {@link ApplicationContext application_context} of the test context will be_{@link TestContext#markApplicationContextDirty() marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_<code>true</code>.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")__		Method testMethod = testContext.getTestMethod()__		Assert.notNull(testMethod, "The test method of the supplied TestContext must not be null")___		final Class<DirtiesContext> annotationType = DirtiesContext.class___		boolean methodDirtiesContext = testMethod.isAnnotationPresent(annotationType)__		boolean classDirtiesContext = testClass.isAnnotationPresent(annotationType)__		DirtiesContext classDirtiesContextAnnotation = testClass.getAnnotation(annotationType)__		ClassMode classMode = classDirtiesContext ? classDirtiesContextAnnotation.classMode() : null___		if (logger.isDebugEnabled()) {_			logger.debug("After test method: context [" + testContext + "], class dirties context ["_					+ classDirtiesContext + "], class mode [" + classMode + "], method dirties context ["_					+ methodDirtiesContext + "].")__		}__		if (methodDirtiesContext || (classDirtiesContext && classMode == ClassMode.AFTER_EACH_TEST_METHOD)) {_			dirtyContext(testContext)__		}_	};if,the,current,test,method,of,the,supplied,link,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,or,if,the,test,class,is,annotated,with,link,dirties,context,064,dirties,context,and,the,link,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,link,application,context,application,context,of,the,test,context,will,be,link,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true,code;override,public,void,after,test,method,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,method,test,method,test,context,get,test,method,assert,not,null,test,method,the,test,method,of,the,supplied,test,context,must,not,be,null,final,class,dirties,context,annotation,type,dirties,context,class,boolean,method,dirties,context,test,method,is,annotation,present,annotation,type,boolean,class,dirties,context,test,class,is,annotation,present,annotation,type,dirties,context,class,dirties,context,annotation,test,class,get,annotation,annotation,type,class,mode,class,mode,class,dirties,context,class,dirties,context,annotation,class,mode,null,if,logger,is,debug,enabled,logger,debug,after,test,method,context,test,context,class,dirties,context,class,dirties,context,class,mode,class,mode,method,dirties,context,method,dirties,context,if,method,dirties,context,class,dirties,context,class,mode,class,mode,dirty,context,test,context
DirtiesContextTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1337278668;If the current test method of the supplied {@link TestContext test_context} is annotated with {@link DirtiesContext &#064_DirtiesContext},_or if the test class is annotated with {@link DirtiesContext_&#064_DirtiesContext} and the {@link DirtiesContext#classMode() class_mode} is set to {@link ClassMode#AFTER_EACH_TEST_METHOD_AFTER_EACH_TEST_METHOD}, the {@link ApplicationContext application_context} of the test context will be_{@link TestContext#markApplicationContextDirty() marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_<code>true</code>.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")__		Method testMethod = testContext.getTestMethod()__		Assert.notNull(testMethod, "The test method of the supplied TestContext must not be null")___		final Class<DirtiesContext> annotationType = DirtiesContext.class___		boolean methodDirtiesContext = testMethod.isAnnotationPresent(annotationType)__		boolean classDirtiesContext = testClass.isAnnotationPresent(annotationType)__		DirtiesContext classDirtiesContextAnnotation = testClass.getAnnotation(annotationType)__		ClassMode classMode = classDirtiesContext ? classDirtiesContextAnnotation.classMode() : null___		if (logger.isDebugEnabled()) {_			logger.debug("After test method: context [" + testContext + "], class dirties context ["_					+ classDirtiesContext + "], class mode [" + classMode + "], method dirties context ["_					+ methodDirtiesContext + "].")__		}__		if (methodDirtiesContext || (classDirtiesContext && classMode == ClassMode.AFTER_EACH_TEST_METHOD)) {_			dirtyContext(testContext)__		}_	};if,the,current,test,method,of,the,supplied,link,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,or,if,the,test,class,is,annotated,with,link,dirties,context,064,dirties,context,and,the,link,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,link,application,context,application,context,of,the,test,context,will,be,link,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true,code;override,public,void,after,test,method,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,method,test,method,test,context,get,test,method,assert,not,null,test,method,the,test,method,of,the,supplied,test,context,must,not,be,null,final,class,dirties,context,annotation,type,dirties,context,class,boolean,method,dirties,context,test,method,is,annotation,present,annotation,type,boolean,class,dirties,context,test,class,is,annotation,present,annotation,type,dirties,context,class,dirties,context,annotation,test,class,get,annotation,annotation,type,class,mode,class,mode,class,dirties,context,class,dirties,context,annotation,class,mode,null,if,logger,is,debug,enabled,logger,debug,after,test,method,context,test,context,class,dirties,context,class,dirties,context,class,mode,class,mode,method,dirties,context,method,dirties,context,if,method,dirties,context,class,dirties,context,class,mode,class,mode,dirty,context,test,context
DirtiesContextTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1356735495;If the current test method of the supplied {@link TestContext test_context} is annotated with {@link DirtiesContext &#064_DirtiesContext},_or if the test class is annotated with {@link DirtiesContext_&#064_DirtiesContext} and the {@link DirtiesContext#classMode() class_mode} is set to {@link ClassMode#AFTER_EACH_TEST_METHOD_AFTER_EACH_TEST_METHOD}, the {@link ApplicationContext application_context} of the test context will be_{@link TestContext#markApplicationContextDirty() marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")__		Method testMethod = testContext.getTestMethod()__		Assert.notNull(testMethod, "The test method of the supplied TestContext must not be null")___		final Class<DirtiesContext> annotationType = DirtiesContext.class___		boolean methodDirtiesContext = testMethod.isAnnotationPresent(annotationType)__		boolean classDirtiesContext = testClass.isAnnotationPresent(annotationType)__		DirtiesContext classDirtiesContextAnnotation = testClass.getAnnotation(annotationType)__		ClassMode classMode = classDirtiesContext ? classDirtiesContextAnnotation.classMode() : null___		if (logger.isDebugEnabled()) {_			logger.debug("After test method: context [" + testContext + "], class dirties context ["_					+ classDirtiesContext + "], class mode [" + classMode + "], method dirties context ["_					+ methodDirtiesContext + "].")__		}__		if (methodDirtiesContext || (classDirtiesContext && classMode == ClassMode.AFTER_EACH_TEST_METHOD)) {_			dirtyContext(testContext)__		}_	};if,the,current,test,method,of,the,supplied,link,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,or,if,the,test,class,is,annotated,with,link,dirties,context,064,dirties,context,and,the,link,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,link,application,context,application,context,of,the,test,context,will,be,link,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,method,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,method,test,method,test,context,get,test,method,assert,not,null,test,method,the,test,method,of,the,supplied,test,context,must,not,be,null,final,class,dirties,context,annotation,type,dirties,context,class,boolean,method,dirties,context,test,method,is,annotation,present,annotation,type,boolean,class,dirties,context,test,class,is,annotation,present,annotation,type,dirties,context,class,dirties,context,annotation,test,class,get,annotation,annotation,type,class,mode,class,mode,class,dirties,context,class,dirties,context,annotation,class,mode,null,if,logger,is,debug,enabled,logger,debug,after,test,method,context,test,context,class,dirties,context,class,dirties,context,class,mode,class,mode,method,dirties,context,method,dirties,context,if,method,dirties,context,class,dirties,context,class,mode,class,mode,dirty,context,test,context
DirtiesContextTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1363208506;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@link DirtiesContext &#064_DirtiesContext},_or if the test class is annotated with {@link DirtiesContext_&#064_DirtiesContext} and the {@linkplain DirtiesContext#classMode() class_mode} is set to {@link ClassMode#AFTER_EACH_TEST_METHOD_AFTER_EACH_TEST_METHOD}, the {@linkplain ApplicationContext application_context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty() marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")__		Method testMethod = testContext.getTestMethod()__		Assert.notNull(testMethod, "The test method of the supplied TestContext must not be null")___		final Class<DirtiesContext> annotationType = DirtiesContext.class___		boolean methodDirtiesContext = testMethod.isAnnotationPresent(annotationType)__		boolean classDirtiesContext = testClass.isAnnotationPresent(annotationType)__		DirtiesContext classDirtiesContextAnnotation = testClass.getAnnotation(annotationType)__		ClassMode classMode = classDirtiesContext ? classDirtiesContextAnnotation.classMode() : null___		if (logger.isDebugEnabled()) {_			logger.debug("After test method: context [" + testContext + "], class dirties context ["_					+ classDirtiesContext + "], class mode [" + classMode + "], method dirties context ["_					+ methodDirtiesContext + "].")__		}__		if (methodDirtiesContext || (classDirtiesContext && classMode == ClassMode.AFTER_EACH_TEST_METHOD)) {_			HierarchyMode hierarchyMode = methodDirtiesContext ? testMethod.getAnnotation(annotationType).hierarchyMode()_					: classDirtiesContextAnnotation.hierarchyMode()__			dirtyContext(testContext, hierarchyMode)__		}_	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,or,if,the,test,class,is,annotated,with,link,dirties,context,064,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,method,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,method,test,method,test,context,get,test,method,assert,not,null,test,method,the,test,method,of,the,supplied,test,context,must,not,be,null,final,class,dirties,context,annotation,type,dirties,context,class,boolean,method,dirties,context,test,method,is,annotation,present,annotation,type,boolean,class,dirties,context,test,class,is,annotation,present,annotation,type,dirties,context,class,dirties,context,annotation,test,class,get,annotation,annotation,type,class,mode,class,mode,class,dirties,context,class,dirties,context,annotation,class,mode,null,if,logger,is,debug,enabled,logger,debug,after,test,method,context,test,context,class,dirties,context,class,dirties,context,class,mode,class,mode,method,dirties,context,method,dirties,context,if,method,dirties,context,class,dirties,context,class,mode,class,mode,hierarchy,mode,hierarchy,mode,method,dirties,context,test,method,get,annotation,annotation,type,hierarchy,mode,class,dirties,context,annotation,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1367954761;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@link DirtiesContext &#064_DirtiesContext},_or if the test class is annotated with {@link DirtiesContext_&#064_DirtiesContext} and the {@linkplain DirtiesContext#classMode() class_mode} is set to {@link ClassMode#AFTER_EACH_TEST_METHOD_AFTER_EACH_TEST_METHOD}, the {@linkplain ApplicationContext application_context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty() marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE}_in the test context will be set to {@code true}.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")__		Method testMethod = testContext.getTestMethod()__		Assert.notNull(testMethod, "The test method of the supplied TestContext must not be null")___		final Class<DirtiesContext> annotationType = DirtiesContext.class___		boolean methodDirtiesContext = testMethod.isAnnotationPresent(annotationType)__		boolean classDirtiesContext = testClass.isAnnotationPresent(annotationType)__		DirtiesContext classDirtiesContextAnnotation = testClass.getAnnotation(annotationType)__		ClassMode classMode = classDirtiesContext ? classDirtiesContextAnnotation.classMode() : null___		if (logger.isDebugEnabled()) {_			logger.debug("After test method: context [" + testContext + "], class dirties context ["_					+ classDirtiesContext + "], class mode [" + classMode + "], method dirties context ["_					+ methodDirtiesContext + "].")__		}__		if (methodDirtiesContext || (classDirtiesContext && classMode == ClassMode.AFTER_EACH_TEST_METHOD)) {_			HierarchyMode hierarchyMode = methodDirtiesContext ? testMethod.getAnnotation(annotationType).hierarchyMode()_					: classDirtiesContextAnnotation.hierarchyMode()__			dirtyContext(testContext, hierarchyMode)__		}_	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,or,if,the,test,class,is,annotated,with,link,dirties,context,064,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,method,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,method,test,method,test,context,get,test,method,assert,not,null,test,method,the,test,method,of,the,supplied,test,context,must,not,be,null,final,class,dirties,context,annotation,type,dirties,context,class,boolean,method,dirties,context,test,method,is,annotation,present,annotation,type,boolean,class,dirties,context,test,class,is,annotation,present,annotation,type,dirties,context,class,dirties,context,annotation,test,class,get,annotation,annotation,type,class,mode,class,mode,class,dirties,context,class,dirties,context,annotation,class,mode,null,if,logger,is,debug,enabled,logger,debug,after,test,method,context,test,context,class,dirties,context,class,dirties,context,class,mode,class,mode,method,dirties,context,method,dirties,context,if,method,dirties,context,class,dirties,context,class,mode,class,mode,hierarchy,mode,hierarchy,mode,method,dirties,context,test,method,get,annotation,annotation,type,hierarchy,mode,class,dirties,context,annotation,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1382815212;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@link DirtiesContext &#064_DirtiesContext},_or if the test class is annotated with {@link DirtiesContext_&#064_DirtiesContext} and the {@linkplain DirtiesContext#classMode() class_mode} is set to {@link ClassMode#AFTER_EACH_TEST_METHOD_AFTER_EACH_TEST_METHOD}, the {@linkplain ApplicationContext application_context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty() marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE}_in the test context will be set to {@code true}.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")__		Method testMethod = testContext.getTestMethod()__		Assert.notNull(testMethod, "The test method of the supplied TestContext must not be null")___		final Class<DirtiesContext> annotationType = DirtiesContext.class___		boolean methodDirtiesContext = testMethod.isAnnotationPresent(annotationType)__		boolean classDirtiesContext = testClass.isAnnotationPresent(annotationType)__		DirtiesContext classDirtiesContextAnnotation = testClass.getAnnotation(annotationType)__		ClassMode classMode = classDirtiesContext ? classDirtiesContextAnnotation.classMode() : null___		if (logger.isDebugEnabled()) {_			logger.debug("After test method: context [" + testContext + "], class dirties context ["_					+ classDirtiesContext + "], class mode [" + classMode + "], method dirties context ["_					+ methodDirtiesContext + "].")__		}__		if (methodDirtiesContext || (classDirtiesContext && classMode == ClassMode.AFTER_EACH_TEST_METHOD)) {_			HierarchyMode hierarchyMode = methodDirtiesContext ? testMethod.getAnnotation(annotationType).hierarchyMode()_					: classDirtiesContextAnnotation.hierarchyMode()__			dirtyContext(testContext, hierarchyMode)__		}_	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,or,if,the,test,class,is,annotated,with,link,dirties,context,064,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,method,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,method,test,method,test,context,get,test,method,assert,not,null,test,method,the,test,method,of,the,supplied,test,context,must,not,be,null,final,class,dirties,context,annotation,type,dirties,context,class,boolean,method,dirties,context,test,method,is,annotation,present,annotation,type,boolean,class,dirties,context,test,class,is,annotation,present,annotation,type,dirties,context,class,dirties,context,annotation,test,class,get,annotation,annotation,type,class,mode,class,mode,class,dirties,context,class,dirties,context,annotation,class,mode,null,if,logger,is,debug,enabled,logger,debug,after,test,method,context,test,context,class,dirties,context,class,dirties,context,class,mode,class,mode,method,dirties,context,method,dirties,context,if,method,dirties,context,class,dirties,context,class,mode,class,mode,hierarchy,mode,hierarchy,mode,method,dirties,context,test,method,get,annotation,annotation,type,hierarchy,mode,class,dirties,context,annotation,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1382920864;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@link DirtiesContext &#064_DirtiesContext},_or if the test class is annotated with {@link DirtiesContext_&#064_DirtiesContext} and the {@linkplain DirtiesContext#classMode() class_mode} is set to {@link ClassMode#AFTER_EACH_TEST_METHOD_AFTER_EACH_TEST_METHOD}, the {@linkplain ApplicationContext application_context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty() marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE}_in the test context will be set to {@code true}.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")__		Method testMethod = testContext.getTestMethod()__		Assert.notNull(testMethod, "The test method of the supplied TestContext must not be null")___		final Class<DirtiesContext> annotationType = DirtiesContext.class___		DirtiesContext methodDirtiesContextAnnotation = findAnnotation(testMethod, annotationType)__		boolean methodDirtiesContext = methodDirtiesContextAnnotation != null___		DirtiesContext classDirtiesContextAnnotation = findAnnotation(testClass, annotationType)__		boolean classDirtiesContext = classDirtiesContextAnnotation != null__		ClassMode classMode = classDirtiesContext ? classDirtiesContextAnnotation.classMode() : null___		if (logger.isDebugEnabled()) {_			logger.debug("After test method: context [" + testContext + "], class dirties context ["_					+ classDirtiesContext + "], class mode [" + classMode + "], method dirties context ["_					+ methodDirtiesContext + "].")__		}__		if (methodDirtiesContext || (classMode == ClassMode.AFTER_EACH_TEST_METHOD)) {_			HierarchyMode hierarchyMode = methodDirtiesContext ? methodDirtiesContextAnnotation.hierarchyMode()_					: classDirtiesContextAnnotation.hierarchyMode()__			dirtyContext(testContext, hierarchyMode)__		}_	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,or,if,the,test,class,is,annotated,with,link,dirties,context,064,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,method,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,method,test,method,test,context,get,test,method,assert,not,null,test,method,the,test,method,of,the,supplied,test,context,must,not,be,null,final,class,dirties,context,annotation,type,dirties,context,class,dirties,context,method,dirties,context,annotation,find,annotation,test,method,annotation,type,boolean,method,dirties,context,method,dirties,context,annotation,null,dirties,context,class,dirties,context,annotation,find,annotation,test,class,annotation,type,boolean,class,dirties,context,class,dirties,context,annotation,null,class,mode,class,mode,class,dirties,context,class,dirties,context,annotation,class,mode,null,if,logger,is,debug,enabled,logger,debug,after,test,method,context,test,context,class,dirties,context,class,dirties,context,class,mode,class,mode,method,dirties,context,method,dirties,context,if,method,dirties,context,class,mode,class,mode,hierarchy,mode,hierarchy,mode,method,dirties,context,method,dirties,context,annotation,hierarchy,mode,class,dirties,context,annotation,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1385499540;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@link DirtiesContext &#064_DirtiesContext},_or if the test class is annotated with {@link DirtiesContext_&#064_DirtiesContext} and the {@linkplain DirtiesContext#classMode() class_mode} is set to {@link ClassMode#AFTER_EACH_TEST_METHOD_AFTER_EACH_TEST_METHOD}, the {@linkplain ApplicationContext application_context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty() marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE}_in the test context will be set to {@code true}.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")__		Method testMethod = testContext.getTestMethod()__		Assert.notNull(testMethod, "The test method of the supplied TestContext must not be null")___		final String annotationType = DirtiesContext.class.getName()__		AnnotationAttributes methodAnnAttrs = AnnotatedElementUtils.getAnnotationAttributes(testMethod, annotationType)__		AnnotationAttributes classAnnAttrs = AnnotatedElementUtils.getAnnotationAttributes(testClass, annotationType)__		boolean methodDirtiesContext = methodAnnAttrs != null__		boolean classDirtiesContext = classAnnAttrs != null__		ClassMode classMode = classDirtiesContext ? classAnnAttrs.<ClassMode> getEnum("classMode") : null___		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_				"After test method: context %s, class dirties context [%s], class mode [%s], method dirties context [%s].",_				testContext, classDirtiesContext, classMode, methodDirtiesContext))__		}__		if (methodDirtiesContext || (classMode == AFTER_EACH_TEST_METHOD)) {_			HierarchyMode hierarchyMode = methodDirtiesContext ? methodAnnAttrs.<HierarchyMode> getEnum("hierarchyMode")_					: classAnnAttrs.<HierarchyMode> getEnum("hierarchyMode")__			dirtyContext(testContext, hierarchyMode)__		}_	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,or,if,the,test,class,is,annotated,with,link,dirties,context,064,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,method,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,method,test,method,test,context,get,test,method,assert,not,null,test,method,the,test,method,of,the,supplied,test,context,must,not,be,null,final,string,annotation,type,dirties,context,class,get,name,annotation,attributes,method,ann,attrs,annotated,element,utils,get,annotation,attributes,test,method,annotation,type,annotation,attributes,class,ann,attrs,annotated,element,utils,get,annotation,attributes,test,class,annotation,type,boolean,method,dirties,context,method,ann,attrs,null,boolean,class,dirties,context,class,ann,attrs,null,class,mode,class,mode,class,dirties,context,class,ann,attrs,class,mode,get,enum,class,mode,null,if,logger,is,debug,enabled,logger,debug,string,format,after,test,method,context,s,class,dirties,context,s,class,mode,s,method,dirties,context,s,test,context,class,dirties,context,class,mode,method,dirties,context,if,method,dirties,context,class,mode,hierarchy,mode,hierarchy,mode,method,dirties,context,method,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,class,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1385501137;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@link DirtiesContext &#064_DirtiesContext},_or if the test class is annotated with {@link DirtiesContext_&#064_DirtiesContext} and the {@linkplain DirtiesContext#classMode() class_mode} is set to {@link ClassMode#AFTER_EACH_TEST_METHOD_AFTER_EACH_TEST_METHOD}, the {@linkplain ApplicationContext application_context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE}_in the test context will be set to {@code true}.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")__		Method testMethod = testContext.getTestMethod()__		Assert.notNull(testMethod, "The test method of the supplied TestContext must not be null")___		final String annotationType = DirtiesContext.class.getName()__		AnnotationAttributes methodAnnAttrs = AnnotatedElementUtils.getAnnotationAttributes(testMethod, annotationType)__		AnnotationAttributes classAnnAttrs = AnnotatedElementUtils.getAnnotationAttributes(testClass, annotationType)__		boolean methodDirtiesContext = methodAnnAttrs != null__		boolean classDirtiesContext = classAnnAttrs != null__		ClassMode classMode = classDirtiesContext ? classAnnAttrs.<ClassMode> getEnum("classMode") : null___		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_				"After test method: context %s, class dirties context [%s], class mode [%s], method dirties context [%s].",_				testContext, classDirtiesContext, classMode, methodDirtiesContext))__		}__		if (methodDirtiesContext || (classMode == AFTER_EACH_TEST_METHOD)) {_			HierarchyMode hierarchyMode = methodDirtiesContext ? methodAnnAttrs.<HierarchyMode> getEnum("hierarchyMode")_					: classAnnAttrs.<HierarchyMode> getEnum("hierarchyMode")__			dirtyContext(testContext, hierarchyMode)__		}_	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,or,if,the,test,class,is,annotated,with,link,dirties,context,064,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,method,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,method,test,method,test,context,get,test,method,assert,not,null,test,method,the,test,method,of,the,supplied,test,context,must,not,be,null,final,string,annotation,type,dirties,context,class,get,name,annotation,attributes,method,ann,attrs,annotated,element,utils,get,annotation,attributes,test,method,annotation,type,annotation,attributes,class,ann,attrs,annotated,element,utils,get,annotation,attributes,test,class,annotation,type,boolean,method,dirties,context,method,ann,attrs,null,boolean,class,dirties,context,class,ann,attrs,null,class,mode,class,mode,class,dirties,context,class,ann,attrs,class,mode,get,enum,class,mode,null,if,logger,is,debug,enabled,logger,debug,string,format,after,test,method,context,s,class,dirties,context,s,class,mode,s,method,dirties,context,s,test,context,class,dirties,context,class,mode,method,dirties,context,if,method,dirties,context,class,mode,hierarchy,mode,hierarchy,mode,method,dirties,context,method,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,class,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1408048216;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@link DirtiesContext &#064_DirtiesContext},_or if the test class is annotated with {@link DirtiesContext_&#064_DirtiesContext} and the {@linkplain DirtiesContext#classMode() class_mode} is set to {@link ClassMode#AFTER_EACH_TEST_METHOD_AFTER_EACH_TEST_METHOD}, the {@linkplain ApplicationContext application_context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE}_in the test context will be set to {@code true}.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")__		Method testMethod = testContext.getTestMethod()__		Assert.notNull(testMethod, "The test method of the supplied TestContext must not be null")___		final String annotationType = DirtiesContext.class.getName()__		AnnotationAttributes methodAnnAttrs = AnnotatedElementUtils.getAnnotationAttributes(testMethod, annotationType)__		AnnotationAttributes classAnnAttrs = AnnotatedElementUtils.getAnnotationAttributes(testClass, annotationType)__		boolean methodDirtiesContext = methodAnnAttrs != null__		boolean classDirtiesContext = classAnnAttrs != null__		ClassMode classMode = classDirtiesContext ? classAnnAttrs.<ClassMode> getEnum("classMode") : null___		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_				"After test method: context %s, class dirties context [%s], class mode [%s], method dirties context [%s].",_				testContext, classDirtiesContext, classMode, methodDirtiesContext))__		}__		if (methodDirtiesContext || (classMode == AFTER_EACH_TEST_METHOD)) {_			HierarchyMode hierarchyMode = methodDirtiesContext ? methodAnnAttrs.<HierarchyMode> getEnum("hierarchyMode")_					: classAnnAttrs.<HierarchyMode> getEnum("hierarchyMode")__			dirtyContext(testContext, hierarchyMode)__		}_	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,or,if,the,test,class,is,annotated,with,link,dirties,context,064,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,method,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,method,test,method,test,context,get,test,method,assert,not,null,test,method,the,test,method,of,the,supplied,test,context,must,not,be,null,final,string,annotation,type,dirties,context,class,get,name,annotation,attributes,method,ann,attrs,annotated,element,utils,get,annotation,attributes,test,method,annotation,type,annotation,attributes,class,ann,attrs,annotated,element,utils,get,annotation,attributes,test,class,annotation,type,boolean,method,dirties,context,method,ann,attrs,null,boolean,class,dirties,context,class,ann,attrs,null,class,mode,class,mode,class,dirties,context,class,ann,attrs,class,mode,get,enum,class,mode,null,if,logger,is,debug,enabled,logger,debug,string,format,after,test,method,context,s,class,dirties,context,s,class,mode,s,method,dirties,context,s,test,context,class,dirties,context,class,mode,method,dirties,context,if,method,dirties,context,class,mode,hierarchy,mode,hierarchy,mode,method,dirties,context,method,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,class,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1413848647;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@link DirtiesContext &#064_DirtiesContext},_or if the test class is annotated with {@link DirtiesContext_&#064_DirtiesContext} and the {@linkplain DirtiesContext#classMode() class_mode} is set to {@link ClassMode#AFTER_EACH_TEST_METHOD_AFTER_EACH_TEST_METHOD}, the {@linkplain ApplicationContext application_context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE}_in the test context will be set to {@code true}.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")__		Method testMethod = testContext.getTestMethod()__		Assert.notNull(testMethod, "The test method of the supplied TestContext must not be null")___		final String annotationType = DirtiesContext.class.getName()__		AnnotationAttributes methodAnnAttrs = AnnotatedElementUtils.getAnnotationAttributes(testMethod, annotationType)__		AnnotationAttributes classAnnAttrs = AnnotatedElementUtils.getAnnotationAttributes(testClass, annotationType)__		boolean methodDirtiesContext = methodAnnAttrs != null__		boolean classDirtiesContext = classAnnAttrs != null__		ClassMode classMode = classDirtiesContext ? classAnnAttrs.<ClassMode> getEnum("classMode") : null___		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_				"After test method: context %s, class dirties context [%s], class mode [%s], method dirties context [%s].",_				testContext, classDirtiesContext, classMode, methodDirtiesContext))__		}__		if (methodDirtiesContext || (classMode == AFTER_EACH_TEST_METHOD)) {_			HierarchyMode hierarchyMode = methodDirtiesContext ? methodAnnAttrs.<HierarchyMode> getEnum("hierarchyMode")_					: classAnnAttrs.<HierarchyMode> getEnum("hierarchyMode")__			dirtyContext(testContext, hierarchyMode)__		}_	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,or,if,the,test,class,is,annotated,with,link,dirties,context,064,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,method,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,method,test,method,test,context,get,test,method,assert,not,null,test,method,the,test,method,of,the,supplied,test,context,must,not,be,null,final,string,annotation,type,dirties,context,class,get,name,annotation,attributes,method,ann,attrs,annotated,element,utils,get,annotation,attributes,test,method,annotation,type,annotation,attributes,class,ann,attrs,annotated,element,utils,get,annotation,attributes,test,class,annotation,type,boolean,method,dirties,context,method,ann,attrs,null,boolean,class,dirties,context,class,ann,attrs,null,class,mode,class,mode,class,dirties,context,class,ann,attrs,class,mode,get,enum,class,mode,null,if,logger,is,debug,enabled,logger,debug,string,format,after,test,method,context,s,class,dirties,context,s,class,mode,s,method,dirties,context,s,test,context,class,dirties,context,class,mode,method,dirties,context,if,method,dirties,context,class,mode,hierarchy,mode,hierarchy,mode,method,dirties,context,method,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,class,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1427056400;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#methodMode() method mode} is set to {@link_MethodMode#AFTER_METHOD AFTER_METHOD}, or if the test class is_annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#AFTER_EACH_TEST_METHOD AFTER_EACH_TEST_METHOD}, the_{@linkplain ApplicationContext application context} of the test context_will be {@linkplain TestContext#markApplicationContextDirty marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to {@code true}.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		beforeOrAfterTestMethod(testContext, "After", AFTER_METHOD, AFTER_EACH_TEST_METHOD)__	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,method,mode,method,mode,is,set,to,link,method,mode,or,if,the,test,class,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,method,test,context,test,context,throws,exception,before,or,after,test,method,test,context,after
DirtiesContextTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1431568199;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#methodMode() method mode} is set to {@link_MethodMode#AFTER_METHOD AFTER_METHOD}, or if the test class is_annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#AFTER_EACH_TEST_METHOD AFTER_EACH_TEST_METHOD}, the_{@linkplain ApplicationContext application context} of the test context_will be {@linkplain TestContext#markApplicationContextDirty marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to {@code true}.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		beforeOrAfterTestMethod(testContext, "After", AFTER_METHOD, AFTER_EACH_TEST_METHOD)__	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,method,mode,method,mode,is,set,to,link,method,mode,or,if,the,test,class,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,method,test,context,test,context,throws,exception,before,or,after,test,method,test,context,after
DirtiesContextTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1432856630;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#methodMode() method mode} is set to {@link_MethodMode#AFTER_METHOD AFTER_METHOD}, or if the test class is_annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#AFTER_EACH_TEST_METHOD AFTER_EACH_TEST_METHOD}, the_{@linkplain ApplicationContext application context} of the test context_will be {@linkplain TestContext#markApplicationContextDirty marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to {@code true}.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		beforeOrAfterTestMethod(testContext, "After", AFTER_METHOD, AFTER_EACH_TEST_METHOD)__	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,method,mode,method,mode,is,set,to,link,method,mode,or,if,the,test,class,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,method,test,context,test,context,throws,exception,before,or,after,test,method,test,context,after
DirtiesContextTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1434234880;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#methodMode() method mode} is set to {@link_MethodMode#AFTER_METHOD AFTER_METHOD}, or if the test class is_annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#AFTER_EACH_TEST_METHOD AFTER_EACH_TEST_METHOD}, the_{@linkplain ApplicationContext application context} of the test context_will be {@linkplain TestContext#markApplicationContextDirty marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to {@code true}.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		beforeOrAfterTestMethod(testContext, "After", AFTER_METHOD, AFTER_EACH_TEST_METHOD)__	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,method,mode,method,mode,is,set,to,link,method,mode,or,if,the,test,class,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,method,test,context,test,context,throws,exception,before,or,after,test,method,test,context,after
DirtiesContextTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1435776912;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#methodMode() method mode} is set to {@link_MethodMode#AFTER_METHOD AFTER_METHOD}, or if the test class is_annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#AFTER_EACH_TEST_METHOD AFTER_EACH_TEST_METHOD}, the_{@linkplain ApplicationContext application context} of the test context_will be {@linkplain TestContext#markApplicationContextDirty marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to {@code true}.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		beforeOrAfterTestMethod(testContext, AFTER_METHOD, AFTER_EACH_TEST_METHOD)__	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,method,mode,method,mode,is,set,to,link,method,mode,or,if,the,test,class,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,method,test,context,test,context,throws,exception,before,or,after,test,method,test,context
DirtiesContextTestExecutionListener -> @Override 	public void afterTestMethod(TestContext testContext) throws Exception;1530174524;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#methodMode() method mode} is set to {@link_MethodMode#AFTER_METHOD AFTER_METHOD}, or if the test class is_annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#AFTER_EACH_TEST_METHOD AFTER_EACH_TEST_METHOD}, the_{@linkplain ApplicationContext application context} of the test context_will be {@linkplain TestContext#markApplicationContextDirty marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to {@code true}.;@Override_	public void afterTestMethod(TestContext testContext) throws Exception {_		beforeOrAfterTestMethod(testContext, AFTER_METHOD, AFTER_EACH_TEST_METHOD)__	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,method,mode,method,mode,is,set,to,link,method,mode,or,if,the,test,class,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,method,test,context,test,context,throws,exception,before,or,after,test,method,test,context
DirtiesContextTestExecutionListener -> protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode);1363208506;Marks the {@linkplain ApplicationContext application context} of the supplied_{@linkplain TestContext test context} as {@linkplain_TestContext#markApplicationContextDirty(HierarchyMode) dirty} and sets the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context to {@code true}._@param testContext the test context whose application context should_marked as dirty_@param hierarchyMode the context cache clearing mode to be applied if the_context is part of a hierarchy_ may be {@code null}_@since 3.2.2;protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode) {_		testContext.markApplicationContextDirty(hierarchyMode)__		testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE)__	};marks,the,linkplain,application,context,application,context,of,the,supplied,linkplain,test,context,test,context,as,linkplain,test,context,mark,application,context,dirty,hierarchy,mode,dirty,and,sets,the,link,dependency,injection,test,execution,listener,in,the,test,context,to,code,true,param,test,context,the,test,context,whose,application,context,should,marked,as,dirty,param,hierarchy,mode,the,context,cache,clearing,mode,to,be,applied,if,the,context,is,part,of,a,hierarchy,may,be,code,null,since,3,2,2;protected,void,dirty,context,test,context,test,context,hierarchy,mode,hierarchy,mode,test,context,mark,application,context,dirty,hierarchy,mode,test,context,set,attribute,dependency,injection,test,execution,listener,boolean,true
DirtiesContextTestExecutionListener -> protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode);1367954761;Marks the {@linkplain ApplicationContext application context} of the supplied_{@linkplain TestContext test context} as_{@linkplain TestContext#markApplicationContextDirty(DirtiesContext.HierarchyMode) dirty}_and sets {@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE}_in the test context to {@code true}._@param testContext the test context whose application context should_marked as dirty_@param hierarchyMode the context cache clearing mode to be applied if the_context is part of a hierarchy_ may be {@code null}_@since 3.2.2;protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode) {_		testContext.markApplicationContextDirty(hierarchyMode)__		testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE)__	};marks,the,linkplain,application,context,application,context,of,the,supplied,linkplain,test,context,test,context,as,linkplain,test,context,mark,application,context,dirty,dirties,context,hierarchy,mode,dirty,and,sets,link,dependency,injection,test,execution,listener,in,the,test,context,to,code,true,param,test,context,the,test,context,whose,application,context,should,marked,as,dirty,param,hierarchy,mode,the,context,cache,clearing,mode,to,be,applied,if,the,context,is,part,of,a,hierarchy,may,be,code,null,since,3,2,2;protected,void,dirty,context,test,context,test,context,hierarchy,mode,hierarchy,mode,test,context,mark,application,context,dirty,hierarchy,mode,test,context,set,attribute,dependency,injection,test,execution,listener,boolean,true
DirtiesContextTestExecutionListener -> protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode);1382815212;Marks the {@linkplain ApplicationContext application context} of the supplied_{@linkplain TestContext test context} as_{@linkplain TestContext#markApplicationContextDirty(DirtiesContext.HierarchyMode) dirty}_and sets {@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE}_in the test context to {@code true}._@param testContext the test context whose application context should_marked as dirty_@param hierarchyMode the context cache clearing mode to be applied if the_context is part of a hierarchy_ may be {@code null}_@since 3.2.2;protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode) {_		testContext.markApplicationContextDirty(hierarchyMode)__		testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE)__	};marks,the,linkplain,application,context,application,context,of,the,supplied,linkplain,test,context,test,context,as,linkplain,test,context,mark,application,context,dirty,dirties,context,hierarchy,mode,dirty,and,sets,link,dependency,injection,test,execution,listener,in,the,test,context,to,code,true,param,test,context,the,test,context,whose,application,context,should,marked,as,dirty,param,hierarchy,mode,the,context,cache,clearing,mode,to,be,applied,if,the,context,is,part,of,a,hierarchy,may,be,code,null,since,3,2,2;protected,void,dirty,context,test,context,test,context,hierarchy,mode,hierarchy,mode,test,context,mark,application,context,dirty,hierarchy,mode,test,context,set,attribute,dependency,injection,test,execution,listener,boolean,true
DirtiesContextTestExecutionListener -> protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode);1382920864;Marks the {@linkplain ApplicationContext application context} of the supplied_{@linkplain TestContext test context} as_{@linkplain TestContext#markApplicationContextDirty(DirtiesContext.HierarchyMode) dirty}_and sets {@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE}_in the test context to {@code true}._@param testContext the test context whose application context should_marked as dirty_@param hierarchyMode the context cache clearing mode to be applied if the_context is part of a hierarchy_ may be {@code null}_@since 3.2.2;protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode) {_		testContext.markApplicationContextDirty(hierarchyMode)__		testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE)__	};marks,the,linkplain,application,context,application,context,of,the,supplied,linkplain,test,context,test,context,as,linkplain,test,context,mark,application,context,dirty,dirties,context,hierarchy,mode,dirty,and,sets,link,dependency,injection,test,execution,listener,in,the,test,context,to,code,true,param,test,context,the,test,context,whose,application,context,should,marked,as,dirty,param,hierarchy,mode,the,context,cache,clearing,mode,to,be,applied,if,the,context,is,part,of,a,hierarchy,may,be,code,null,since,3,2,2;protected,void,dirty,context,test,context,test,context,hierarchy,mode,hierarchy,mode,test,context,mark,application,context,dirty,hierarchy,mode,test,context,set,attribute,dependency,injection,test,execution,listener,boolean,true
DirtiesContextTestExecutionListener -> protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode);1385499540;Marks the {@linkplain ApplicationContext application context} of the supplied_{@linkplain TestContext test context} as_{@linkplain TestContext#markApplicationContextDirty(DirtiesContext.HierarchyMode) dirty}_and sets {@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE}_in the test context to {@code true}._@param testContext the test context whose application context should_marked as dirty_@param hierarchyMode the context cache clearing mode to be applied if the_context is part of a hierarchy_ may be {@code null}_@since 3.2.2;protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode) {_		testContext.markApplicationContextDirty(hierarchyMode)__		testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE)__	};marks,the,linkplain,application,context,application,context,of,the,supplied,linkplain,test,context,test,context,as,linkplain,test,context,mark,application,context,dirty,dirties,context,hierarchy,mode,dirty,and,sets,link,dependency,injection,test,execution,listener,in,the,test,context,to,code,true,param,test,context,the,test,context,whose,application,context,should,marked,as,dirty,param,hierarchy,mode,the,context,cache,clearing,mode,to,be,applied,if,the,context,is,part,of,a,hierarchy,may,be,code,null,since,3,2,2;protected,void,dirty,context,test,context,test,context,hierarchy,mode,hierarchy,mode,test,context,mark,application,context,dirty,hierarchy,mode,test,context,set,attribute,dependency,injection,test,execution,listener,boolean,true
DirtiesContextTestExecutionListener -> protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode);1385501137;Marks the {@linkplain ApplicationContext application context} of the supplied_{@linkplain TestContext test context} as_{@linkplain TestContext#markApplicationContextDirty(DirtiesContext.HierarchyMode) dirty}_and sets {@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE}_in the test context to {@code true}._@param testContext the test context whose application context should_marked as dirty_@param hierarchyMode the context cache clearing mode to be applied if the_context is part of a hierarchy_ may be {@code null}_@since 3.2.2;protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode) {_		testContext.markApplicationContextDirty(hierarchyMode)__		testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE)__	};marks,the,linkplain,application,context,application,context,of,the,supplied,linkplain,test,context,test,context,as,linkplain,test,context,mark,application,context,dirty,dirties,context,hierarchy,mode,dirty,and,sets,link,dependency,injection,test,execution,listener,in,the,test,context,to,code,true,param,test,context,the,test,context,whose,application,context,should,marked,as,dirty,param,hierarchy,mode,the,context,cache,clearing,mode,to,be,applied,if,the,context,is,part,of,a,hierarchy,may,be,code,null,since,3,2,2;protected,void,dirty,context,test,context,test,context,hierarchy,mode,hierarchy,mode,test,context,mark,application,context,dirty,hierarchy,mode,test,context,set,attribute,dependency,injection,test,execution,listener,boolean,true
DirtiesContextTestExecutionListener -> protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode);1408048216;Marks the {@linkplain ApplicationContext application context} of the supplied_{@linkplain TestContext test context} as_{@linkplain TestContext#markApplicationContextDirty(DirtiesContext.HierarchyMode) dirty}_and sets {@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE}_in the test context to {@code true}._@param testContext the test context whose application context should_marked as dirty_@param hierarchyMode the context cache clearing mode to be applied if the_context is part of a hierarchy_ may be {@code null}_@since 3.2.2;protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode) {_		testContext.markApplicationContextDirty(hierarchyMode)__		testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE)__	};marks,the,linkplain,application,context,application,context,of,the,supplied,linkplain,test,context,test,context,as,linkplain,test,context,mark,application,context,dirty,dirties,context,hierarchy,mode,dirty,and,sets,link,dependency,injection,test,execution,listener,in,the,test,context,to,code,true,param,test,context,the,test,context,whose,application,context,should,marked,as,dirty,param,hierarchy,mode,the,context,cache,clearing,mode,to,be,applied,if,the,context,is,part,of,a,hierarchy,may,be,code,null,since,3,2,2;protected,void,dirty,context,test,context,test,context,hierarchy,mode,hierarchy,mode,test,context,mark,application,context,dirty,hierarchy,mode,test,context,set,attribute,dependency,injection,test,execution,listener,boolean,true
DirtiesContextTestExecutionListener -> protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode);1413848647;Marks the {@linkplain ApplicationContext application context} of the supplied_{@linkplain TestContext test context} as_{@linkplain TestContext#markApplicationContextDirty(DirtiesContext.HierarchyMode) dirty}_and sets {@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE}_in the test context to {@code true}._@param testContext the test context whose application context should_marked as dirty_@param hierarchyMode the context cache clearing mode to be applied if the_context is part of a hierarchy_ may be {@code null}_@since 3.2.2;protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode) {_		testContext.markApplicationContextDirty(hierarchyMode)__		testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE)__	};marks,the,linkplain,application,context,application,context,of,the,supplied,linkplain,test,context,test,context,as,linkplain,test,context,mark,application,context,dirty,dirties,context,hierarchy,mode,dirty,and,sets,link,dependency,injection,test,execution,listener,in,the,test,context,to,code,true,param,test,context,the,test,context,whose,application,context,should,marked,as,dirty,param,hierarchy,mode,the,context,cache,clearing,mode,to,be,applied,if,the,context,is,part,of,a,hierarchy,may,be,code,null,since,3,2,2;protected,void,dirty,context,test,context,test,context,hierarchy,mode,hierarchy,mode,test,context,mark,application,context,dirty,hierarchy,mode,test,context,set,attribute,dependency,injection,test,execution,listener,boolean,true
DirtiesContextTestExecutionListener -> protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode);1427056400;Marks the {@linkplain ApplicationContext application context} of the supplied_{@linkplain TestContext test context} as_{@linkplain TestContext#markApplicationContextDirty(DirtiesContext.HierarchyMode) dirty}_and sets {@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context to {@code true}._@param testContext the test context whose application context should_marked as dirty_@param hierarchyMode the context cache clearing mode to be applied if the_context is part of a hierarchy_ may be {@code null}_@since 3.2.2;protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode) {_		testContext.markApplicationContextDirty(hierarchyMode)__		testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE)__	};marks,the,linkplain,application,context,application,context,of,the,supplied,linkplain,test,context,test,context,as,linkplain,test,context,mark,application,context,dirty,dirties,context,hierarchy,mode,dirty,and,sets,link,dependency,injection,test,execution,listener,in,the,test,context,to,code,true,param,test,context,the,test,context,whose,application,context,should,marked,as,dirty,param,hierarchy,mode,the,context,cache,clearing,mode,to,be,applied,if,the,context,is,part,of,a,hierarchy,may,be,code,null,since,3,2,2;protected,void,dirty,context,test,context,test,context,hierarchy,mode,hierarchy,mode,test,context,mark,application,context,dirty,hierarchy,mode,test,context,set,attribute,dependency,injection,test,execution,listener,boolean,true
DirtiesContextTestExecutionListener -> protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode);1431568199;Marks the {@linkplain ApplicationContext application context} of the supplied_{@linkplain TestContext test context} as_{@linkplain TestContext#markApplicationContextDirty(DirtiesContext.HierarchyMode) dirty}_and sets {@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context to {@code true}._@param testContext the test context whose application context should_marked as dirty_@param hierarchyMode the context cache clearing mode to be applied if the_context is part of a hierarchy_ may be {@code null}_@since 3.2.2;protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode) {_		testContext.markApplicationContextDirty(hierarchyMode)__		testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE)__	};marks,the,linkplain,application,context,application,context,of,the,supplied,linkplain,test,context,test,context,as,linkplain,test,context,mark,application,context,dirty,dirties,context,hierarchy,mode,dirty,and,sets,link,dependency,injection,test,execution,listener,in,the,test,context,to,code,true,param,test,context,the,test,context,whose,application,context,should,marked,as,dirty,param,hierarchy,mode,the,context,cache,clearing,mode,to,be,applied,if,the,context,is,part,of,a,hierarchy,may,be,code,null,since,3,2,2;protected,void,dirty,context,test,context,test,context,hierarchy,mode,hierarchy,mode,test,context,mark,application,context,dirty,hierarchy,mode,test,context,set,attribute,dependency,injection,test,execution,listener,boolean,true
DirtiesContextTestExecutionListener -> protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode);1432856630;Marks the {@linkplain ApplicationContext application context} of the supplied_{@linkplain TestContext test context} as_{@linkplain TestContext#markApplicationContextDirty(DirtiesContext.HierarchyMode) dirty}_and sets {@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context to {@code true}._@param testContext the test context whose application context should_marked as dirty_@param hierarchyMode the context cache clearing mode to be applied if the_context is part of a hierarchy_ may be {@code null}_@since 3.2.2;protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode) {_		testContext.markApplicationContextDirty(hierarchyMode)__		testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE)__	};marks,the,linkplain,application,context,application,context,of,the,supplied,linkplain,test,context,test,context,as,linkplain,test,context,mark,application,context,dirty,dirties,context,hierarchy,mode,dirty,and,sets,link,dependency,injection,test,execution,listener,in,the,test,context,to,code,true,param,test,context,the,test,context,whose,application,context,should,marked,as,dirty,param,hierarchy,mode,the,context,cache,clearing,mode,to,be,applied,if,the,context,is,part,of,a,hierarchy,may,be,code,null,since,3,2,2;protected,void,dirty,context,test,context,test,context,hierarchy,mode,hierarchy,mode,test,context,mark,application,context,dirty,hierarchy,mode,test,context,set,attribute,dependency,injection,test,execution,listener,boolean,true
DirtiesContextTestExecutionListener -> protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode);1434234880;Marks the {@linkplain ApplicationContext application context} of the supplied_{@linkplain TestContext test context} as_{@linkplain TestContext#markApplicationContextDirty(DirtiesContext.HierarchyMode) dirty}_and sets {@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context to {@code true}._@param testContext the test context whose application context should_marked as dirty_@param hierarchyMode the context cache clearing mode to be applied if the_context is part of a hierarchy_ may be {@code null}_@since 3.2.2;protected void dirtyContext(TestContext testContext, HierarchyMode hierarchyMode) {_		testContext.markApplicationContextDirty(hierarchyMode)__		testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE)__	};marks,the,linkplain,application,context,application,context,of,the,supplied,linkplain,test,context,test,context,as,linkplain,test,context,mark,application,context,dirty,dirties,context,hierarchy,mode,dirty,and,sets,link,dependency,injection,test,execution,listener,in,the,test,context,to,code,true,param,test,context,the,test,context,whose,application,context,should,marked,as,dirty,param,hierarchy,mode,the,context,cache,clearing,mode,to,be,applied,if,the,context,is,part,of,a,hierarchy,may,be,code,null,since,3,2,2;protected,void,dirty,context,test,context,test,context,hierarchy,mode,hierarchy,mode,test,context,mark,application,context,dirty,hierarchy,mode,test,context,set,attribute,dependency,injection,test,execution,listener,boolean,true
DirtiesContextTestExecutionListener -> @Override 	public void beforeTestClass(TestContext testContext) throws Exception;1427056400;If the test class of the supplied {@linkplain TestContext test context}_is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#BEFORE_CLASS BEFORE_CLASS}, the {@linkplain ApplicationContext_application context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty marked as dirty}, and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void beforeTestClass(TestContext testContext) throws Exception {_		beforeOrAfterTestClass(testContext, "Before", BEFORE_CLASS)__	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,before,test,class,test,context,test,context,throws,exception,before,or,after,test,class,test,context,before
DirtiesContextTestExecutionListener -> @Override 	public void beforeTestClass(TestContext testContext) throws Exception;1431568199;If the test class of the supplied {@linkplain TestContext test context}_is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#BEFORE_CLASS BEFORE_CLASS}, the {@linkplain ApplicationContext_application context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty marked as dirty}, and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void beforeTestClass(TestContext testContext) throws Exception {_		beforeOrAfterTestClass(testContext, "Before", BEFORE_CLASS)__	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,before,test,class,test,context,test,context,throws,exception,before,or,after,test,class,test,context,before
DirtiesContextTestExecutionListener -> @Override 	public void beforeTestClass(TestContext testContext) throws Exception;1432856630;If the test class of the supplied {@linkplain TestContext test context}_is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#BEFORE_CLASS BEFORE_CLASS}, the {@linkplain ApplicationContext_application context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty marked as dirty}, and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void beforeTestClass(TestContext testContext) throws Exception {_		beforeOrAfterTestClass(testContext, "Before", BEFORE_CLASS)__	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,before,test,class,test,context,test,context,throws,exception,before,or,after,test,class,test,context,before
DirtiesContextTestExecutionListener -> @Override 	public void beforeTestClass(TestContext testContext) throws Exception;1434234880;If the test class of the supplied {@linkplain TestContext test context}_is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#BEFORE_CLASS BEFORE_CLASS}, the {@linkplain ApplicationContext_application context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty marked as dirty}, and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void beforeTestClass(TestContext testContext) throws Exception {_		beforeOrAfterTestClass(testContext, "Before", BEFORE_CLASS)__	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,before,test,class,test,context,test,context,throws,exception,before,or,after,test,class,test,context,before
DirtiesContextTestExecutionListener -> protected void dirtyContext(TestContext testContext);1328020251;Marks the {@link ApplicationContext application context} of the supplied_{@link TestContext test context} as_{@link TestContext#markApplicationContextDirty() dirty}, and sets the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context to <code>true</code>;protected void dirtyContext(TestContext testContext) {_		testContext.markApplicationContextDirty()__		testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE)__	};marks,the,link,application,context,application,context,of,the,supplied,link,test,context,test,context,as,link,test,context,mark,application,context,dirty,dirty,and,sets,the,link,dependency,injection,test,execution,listener,in,the,test,context,to,code,true,code;protected,void,dirty,context,test,context,test,context,test,context,mark,application,context,dirty,test,context,set,attribute,dependency,injection,test,execution,listener,boolean,true
DirtiesContextTestExecutionListener -> protected void dirtyContext(TestContext testContext);1337278668;Marks the {@link ApplicationContext application context} of the supplied_{@link TestContext test context} as_{@link TestContext#markApplicationContextDirty() dirty}, and sets the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context to <code>true</code>.;protected void dirtyContext(TestContext testContext) {_		testContext.markApplicationContextDirty()__		testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE)__	};marks,the,link,application,context,application,context,of,the,supplied,link,test,context,test,context,as,link,test,context,mark,application,context,dirty,dirty,and,sets,the,link,dependency,injection,test,execution,listener,in,the,test,context,to,code,true,code;protected,void,dirty,context,test,context,test,context,test,context,mark,application,context,dirty,test,context,set,attribute,dependency,injection,test,execution,listener,boolean,true
DirtiesContextTestExecutionListener -> protected void dirtyContext(TestContext testContext);1356735495;Marks the {@link ApplicationContext application context} of the supplied_{@link TestContext test context} as_{@link TestContext#markApplicationContextDirty() dirty}, and sets the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context to {@code true}.;protected void dirtyContext(TestContext testContext) {_		testContext.markApplicationContextDirty()__		testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE)__	};marks,the,link,application,context,application,context,of,the,supplied,link,test,context,test,context,as,link,test,context,mark,application,context,dirty,dirty,and,sets,the,link,dependency,injection,test,execution,listener,in,the,test,context,to,code,true;protected,void,dirty,context,test,context,test,context,test,context,mark,application,context,dirty,test,context,set,attribute,dependency,injection,test,execution,listener,boolean,true
DirtiesContextTestExecutionListener -> private void beforeOrAfterTestMethod(TestContext testContext, String phase, MethodMode requiredMethodMode, 			ClassMode requiredClassMode) throws Exception;1427056400;Perform the actual work for {@link #beforeTestMethod} and {@link #afterTestMethod}._@since 4.2;private void beforeOrAfterTestMethod(TestContext testContext, String phase, MethodMode requiredMethodMode,_			ClassMode requiredClassMode) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")__		Method testMethod = testContext.getTestMethod()__		Assert.notNull(testMethod, "The test method of the supplied TestContext must not be null")___		final String annotationType = DirtiesContext.class.getName()__		AnnotationAttributes methodAnnAttrs = AnnotatedElementUtils.getAnnotationAttributes(testMethod, annotationType)__		AnnotationAttributes classAnnAttrs = AnnotatedElementUtils.getAnnotationAttributes(testClass, annotationType)__		boolean methodAnnotated = methodAnnAttrs != null__		boolean classAnnotated = classAnnAttrs != null__		MethodMode methodMode = methodAnnotated ? methodAnnAttrs.<MethodMode> getEnum("methodMode") : null__		ClassMode classMode = classAnnotated ? classAnnAttrs.<ClassMode> getEnum("classMode") : null___		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_				"%s test method: context %s, class annotated with @DirtiesContext [%s] with mode [%s], method annotated with @DirtiesContext [%s] with mode [%s].",_				phase, testContext, classAnnotated, classMode, methodAnnotated, methodMode))__		}__		if ((methodMode == requiredMethodMode) || (classMode == requiredClassMode)) {_			HierarchyMode hierarchyMode = methodAnnotated ? methodAnnAttrs.<HierarchyMode> getEnum("hierarchyMode")_					: classAnnAttrs.<HierarchyMode> getEnum("hierarchyMode")__			dirtyContext(testContext, hierarchyMode)__		}_	};perform,the,actual,work,for,link,before,test,method,and,link,after,test,method,since,4,2;private,void,before,or,after,test,method,test,context,test,context,string,phase,method,mode,required,method,mode,class,mode,required,class,mode,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,method,test,method,test,context,get,test,method,assert,not,null,test,method,the,test,method,of,the,supplied,test,context,must,not,be,null,final,string,annotation,type,dirties,context,class,get,name,annotation,attributes,method,ann,attrs,annotated,element,utils,get,annotation,attributes,test,method,annotation,type,annotation,attributes,class,ann,attrs,annotated,element,utils,get,annotation,attributes,test,class,annotation,type,boolean,method,annotated,method,ann,attrs,null,boolean,class,annotated,class,ann,attrs,null,method,mode,method,mode,method,annotated,method,ann,attrs,method,mode,get,enum,method,mode,null,class,mode,class,mode,class,annotated,class,ann,attrs,class,mode,get,enum,class,mode,null,if,logger,is,debug,enabled,logger,debug,string,format,s,test,method,context,s,class,annotated,with,dirties,context,s,with,mode,s,method,annotated,with,dirties,context,s,with,mode,s,phase,test,context,class,annotated,class,mode,method,annotated,method,mode,if,method,mode,required,method,mode,class,mode,required,class,mode,hierarchy,mode,hierarchy,mode,method,annotated,method,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,class,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> private void beforeOrAfterTestMethod(TestContext testContext, String phase, MethodMode requiredMethodMode, 			ClassMode requiredClassMode) throws Exception;1431568199;Perform the actual work for {@link #beforeTestMethod} and {@link #afterTestMethod}._@since 4.2;private void beforeOrAfterTestMethod(TestContext testContext, String phase, MethodMode requiredMethodMode,_			ClassMode requiredClassMode) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")__		Method testMethod = testContext.getTestMethod()__		Assert.notNull(testMethod, "The test method of the supplied TestContext must not be null")___		final String annotationType = DirtiesContext.class.getName()__		AnnotationAttributes methodAnnAttrs = AnnotatedElementUtils.findAnnotationAttributes(testMethod, annotationType)__		AnnotationAttributes classAnnAttrs = AnnotatedElementUtils.findAnnotationAttributes(testClass, annotationType)__		boolean methodAnnotated = methodAnnAttrs != null__		boolean classAnnotated = classAnnAttrs != null__		MethodMode methodMode = methodAnnotated ? methodAnnAttrs.<MethodMode> getEnum("methodMode") : null__		ClassMode classMode = classAnnotated ? classAnnAttrs.<ClassMode> getEnum("classMode") : null___		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_				"%s test method: context %s, class annotated with @DirtiesContext [%s] with mode [%s], method annotated with @DirtiesContext [%s] with mode [%s].",_				phase, testContext, classAnnotated, classMode, methodAnnotated, methodMode))__		}__		if ((methodMode == requiredMethodMode) || (classMode == requiredClassMode)) {_			HierarchyMode hierarchyMode = methodAnnotated ? methodAnnAttrs.<HierarchyMode> getEnum("hierarchyMode")_					: classAnnAttrs.<HierarchyMode> getEnum("hierarchyMode")__			dirtyContext(testContext, hierarchyMode)__		}_	};perform,the,actual,work,for,link,before,test,method,and,link,after,test,method,since,4,2;private,void,before,or,after,test,method,test,context,test,context,string,phase,method,mode,required,method,mode,class,mode,required,class,mode,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,method,test,method,test,context,get,test,method,assert,not,null,test,method,the,test,method,of,the,supplied,test,context,must,not,be,null,final,string,annotation,type,dirties,context,class,get,name,annotation,attributes,method,ann,attrs,annotated,element,utils,find,annotation,attributes,test,method,annotation,type,annotation,attributes,class,ann,attrs,annotated,element,utils,find,annotation,attributes,test,class,annotation,type,boolean,method,annotated,method,ann,attrs,null,boolean,class,annotated,class,ann,attrs,null,method,mode,method,mode,method,annotated,method,ann,attrs,method,mode,get,enum,method,mode,null,class,mode,class,mode,class,annotated,class,ann,attrs,class,mode,get,enum,class,mode,null,if,logger,is,debug,enabled,logger,debug,string,format,s,test,method,context,s,class,annotated,with,dirties,context,s,with,mode,s,method,annotated,with,dirties,context,s,with,mode,s,phase,test,context,class,annotated,class,mode,method,annotated,method,mode,if,method,mode,required,method,mode,class,mode,required,class,mode,hierarchy,mode,hierarchy,mode,method,annotated,method,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,class,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> private void beforeOrAfterTestMethod(TestContext testContext, String phase, MethodMode requiredMethodMode, 			ClassMode requiredClassMode) throws Exception;1432856630;Perform the actual work for {@link #beforeTestMethod} and {@link #afterTestMethod}._@since 4.2;private void beforeOrAfterTestMethod(TestContext testContext, String phase, MethodMode requiredMethodMode,_			ClassMode requiredClassMode) throws Exception {__		Class<?> testClass = testContext.getTestClass()__		Method testMethod = testContext.getTestMethod()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")__		Assert.notNull(testMethod, "The test method of the supplied TestContext must not be null")___		DirtiesContext methodAnn = AnnotatedElementUtils.findAnnotation(testMethod, DirtiesContext.class)__		DirtiesContext classAnn = AnnotatedElementUtils.findAnnotation(testClass, DirtiesContext.class)__		boolean methodAnnotated = (methodAnn != null)__		boolean classAnnotated = (classAnn != null)__		MethodMode methodMode = (methodAnnotated ? methodAnn.methodMode() : null)__		ClassMode classMode = (classAnnotated ? classAnn.classMode() : null)___		if (logger.isDebugEnabled()) {_			logger.debug(String.format("%s test method: context %s, class annotated with @DirtiesContext [%s] "_					+ "with mode [%s], method annotated with @DirtiesContext [%s] with mode [%s].", phase, testContext,_				classAnnotated, classMode, methodAnnotated, methodMode))__		}__		if ((methodMode == requiredMethodMode) || (classMode == requiredClassMode)) {_			HierarchyMode hierarchyMode = (methodAnnotated ? methodAnn.hierarchyMode() : classAnn.hierarchyMode())__			dirtyContext(testContext, hierarchyMode)__		}_	};perform,the,actual,work,for,link,before,test,method,and,link,after,test,method,since,4,2;private,void,before,or,after,test,method,test,context,test,context,string,phase,method,mode,required,method,mode,class,mode,required,class,mode,throws,exception,class,test,class,test,context,get,test,class,method,test,method,test,context,get,test,method,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,assert,not,null,test,method,the,test,method,of,the,supplied,test,context,must,not,be,null,dirties,context,method,ann,annotated,element,utils,find,annotation,test,method,dirties,context,class,dirties,context,class,ann,annotated,element,utils,find,annotation,test,class,dirties,context,class,boolean,method,annotated,method,ann,null,boolean,class,annotated,class,ann,null,method,mode,method,mode,method,annotated,method,ann,method,mode,null,class,mode,class,mode,class,annotated,class,ann,class,mode,null,if,logger,is,debug,enabled,logger,debug,string,format,s,test,method,context,s,class,annotated,with,dirties,context,s,with,mode,s,method,annotated,with,dirties,context,s,with,mode,s,phase,test,context,class,annotated,class,mode,method,annotated,method,mode,if,method,mode,required,method,mode,class,mode,required,class,mode,hierarchy,mode,hierarchy,mode,method,annotated,method,ann,hierarchy,mode,class,ann,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> private void beforeOrAfterTestMethod(TestContext testContext, String phase, MethodMode requiredMethodMode, 			ClassMode requiredClassMode) throws Exception;1434234880;Perform the actual work for {@link #beforeTestMethod} and {@link #afterTestMethod}._@since 4.2;private void beforeOrAfterTestMethod(TestContext testContext, String phase, MethodMode requiredMethodMode,_			ClassMode requiredClassMode) throws Exception {__		Class<?> testClass = testContext.getTestClass()__		Method testMethod = testContext.getTestMethod()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")__		Assert.notNull(testMethod, "The test method of the supplied TestContext must not be null")___		DirtiesContext methodAnn = AnnotatedElementUtils.findMergedAnnotation(testMethod, DirtiesContext.class)__		DirtiesContext classAnn = AnnotatedElementUtils.findMergedAnnotation(testClass, DirtiesContext.class)__		boolean methodAnnotated = (methodAnn != null)__		boolean classAnnotated = (classAnn != null)__		MethodMode methodMode = (methodAnnotated ? methodAnn.methodMode() : null)__		ClassMode classMode = (classAnnotated ? classAnn.classMode() : null)___		if (logger.isDebugEnabled()) {_			logger.debug(String.format("%s test method: context %s, class annotated with @DirtiesContext [%s] "_					+ "with mode [%s], method annotated with @DirtiesContext [%s] with mode [%s].", phase, testContext,_				classAnnotated, classMode, methodAnnotated, methodMode))__		}__		if ((methodMode == requiredMethodMode) || (classMode == requiredClassMode)) {_			HierarchyMode hierarchyMode = (methodAnnotated ? methodAnn.hierarchyMode() : classAnn.hierarchyMode())__			dirtyContext(testContext, hierarchyMode)__		}_	};perform,the,actual,work,for,link,before,test,method,and,link,after,test,method,since,4,2;private,void,before,or,after,test,method,test,context,test,context,string,phase,method,mode,required,method,mode,class,mode,required,class,mode,throws,exception,class,test,class,test,context,get,test,class,method,test,method,test,context,get,test,method,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,assert,not,null,test,method,the,test,method,of,the,supplied,test,context,must,not,be,null,dirties,context,method,ann,annotated,element,utils,find,merged,annotation,test,method,dirties,context,class,dirties,context,class,ann,annotated,element,utils,find,merged,annotation,test,class,dirties,context,class,boolean,method,annotated,method,ann,null,boolean,class,annotated,class,ann,null,method,mode,method,mode,method,annotated,method,ann,method,mode,null,class,mode,class,mode,class,annotated,class,ann,class,mode,null,if,logger,is,debug,enabled,logger,debug,string,format,s,test,method,context,s,class,annotated,with,dirties,context,s,with,mode,s,method,annotated,with,dirties,context,s,with,mode,s,phase,test,context,class,annotated,class,mode,method,annotated,method,mode,if,method,mode,required,method,mode,class,mode,required,class,mode,hierarchy,mode,hierarchy,mode,method,annotated,method,ann,hierarchy,mode,class,ann,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> private void beforeOrAfterTestClass(TestContext testContext, String phase, ClassMode requiredClassMode) 			throws Exception;1427056400;Perform the actual work for {@link #beforeTestClass} and {@link #afterTestClass}._@since 4.2;private void beforeOrAfterTestClass(TestContext testContext, String phase, ClassMode requiredClassMode)_			throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")___		final String annotationType = DirtiesContext.class.getName()__		AnnotationAttributes classAnnAttrs = AnnotatedElementUtils.getAnnotationAttributes(testClass, annotationType)__		boolean classAnnotated = classAnnAttrs != null__		ClassMode classMode = classAnnotated ? classAnnAttrs.<ClassMode> getEnum("classMode") : null___		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_				"%s test class: context %s, class annotated with @DirtiesContext [%s] with mode [%s].", phase,_				testContext, classAnnotated, classMode))__		}__		if (classMode == requiredClassMode) {_			HierarchyMode hierarchyMode = classAnnAttrs.<HierarchyMode> getEnum("hierarchyMode")__			dirtyContext(testContext, hierarchyMode)__		}_	};perform,the,actual,work,for,link,before,test,class,and,link,after,test,class,since,4,2;private,void,before,or,after,test,class,test,context,test,context,string,phase,class,mode,required,class,mode,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,final,string,annotation,type,dirties,context,class,get,name,annotation,attributes,class,ann,attrs,annotated,element,utils,get,annotation,attributes,test,class,annotation,type,boolean,class,annotated,class,ann,attrs,null,class,mode,class,mode,class,annotated,class,ann,attrs,class,mode,get,enum,class,mode,null,if,logger,is,debug,enabled,logger,debug,string,format,s,test,class,context,s,class,annotated,with,dirties,context,s,with,mode,s,phase,test,context,class,annotated,class,mode,if,class,mode,required,class,mode,hierarchy,mode,hierarchy,mode,class,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> private void beforeOrAfterTestClass(TestContext testContext, String phase, ClassMode requiredClassMode) 			throws Exception;1431568199;Perform the actual work for {@link #beforeTestClass} and {@link #afterTestClass}._@since 4.2;private void beforeOrAfterTestClass(TestContext testContext, String phase, ClassMode requiredClassMode)_			throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")___		final String annotationType = DirtiesContext.class.getName()__		AnnotationAttributes classAnnAttrs = AnnotatedElementUtils.findAnnotationAttributes(testClass, annotationType)__		boolean classAnnotated = classAnnAttrs != null__		ClassMode classMode = classAnnotated ? classAnnAttrs.<ClassMode> getEnum("classMode") : null___		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_				"%s test class: context %s, class annotated with @DirtiesContext [%s] with mode [%s].", phase,_				testContext, classAnnotated, classMode))__		}__		if (classMode == requiredClassMode) {_			HierarchyMode hierarchyMode = classAnnAttrs.<HierarchyMode> getEnum("hierarchyMode")__			dirtyContext(testContext, hierarchyMode)__		}_	};perform,the,actual,work,for,link,before,test,class,and,link,after,test,class,since,4,2;private,void,before,or,after,test,class,test,context,test,context,string,phase,class,mode,required,class,mode,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,final,string,annotation,type,dirties,context,class,get,name,annotation,attributes,class,ann,attrs,annotated,element,utils,find,annotation,attributes,test,class,annotation,type,boolean,class,annotated,class,ann,attrs,null,class,mode,class,mode,class,annotated,class,ann,attrs,class,mode,get,enum,class,mode,null,if,logger,is,debug,enabled,logger,debug,string,format,s,test,class,context,s,class,annotated,with,dirties,context,s,with,mode,s,phase,test,context,class,annotated,class,mode,if,class,mode,required,class,mode,hierarchy,mode,hierarchy,mode,class,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> private void beforeOrAfterTestClass(TestContext testContext, String phase, ClassMode requiredClassMode) 			throws Exception;1432856630;Perform the actual work for {@link #beforeTestClass} and {@link #afterTestClass}._@since 4.2;private void beforeOrAfterTestClass(TestContext testContext, String phase, ClassMode requiredClassMode)_			throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")___		DirtiesContext dirtiesContext = AnnotatedElementUtils.findAnnotation(testClass, DirtiesContext.class)__		boolean classAnnotated = (dirtiesContext != null)__		ClassMode classMode = (classAnnotated ? dirtiesContext.classMode() : null)___		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_				"%s test class: context %s, class annotated with @DirtiesContext [%s] with mode [%s].", phase,_				testContext, classAnnotated, classMode))__		}__		if (classMode == requiredClassMode) {_			dirtyContext(testContext, dirtiesContext.hierarchyMode())__		}_	};perform,the,actual,work,for,link,before,test,class,and,link,after,test,class,since,4,2;private,void,before,or,after,test,class,test,context,test,context,string,phase,class,mode,required,class,mode,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,dirties,context,dirties,context,annotated,element,utils,find,annotation,test,class,dirties,context,class,boolean,class,annotated,dirties,context,null,class,mode,class,mode,class,annotated,dirties,context,class,mode,null,if,logger,is,debug,enabled,logger,debug,string,format,s,test,class,context,s,class,annotated,with,dirties,context,s,with,mode,s,phase,test,context,class,annotated,class,mode,if,class,mode,required,class,mode,dirty,context,test,context,dirties,context,hierarchy,mode
DirtiesContextTestExecutionListener -> private void beforeOrAfterTestClass(TestContext testContext, String phase, ClassMode requiredClassMode) 			throws Exception;1434234880;Perform the actual work for {@link #beforeTestClass} and {@link #afterTestClass}._@since 4.2;private void beforeOrAfterTestClass(TestContext testContext, String phase, ClassMode requiredClassMode)_			throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")___		DirtiesContext dirtiesContext = AnnotatedElementUtils.findMergedAnnotation(testClass, DirtiesContext.class)__		boolean classAnnotated = (dirtiesContext != null)__		ClassMode classMode = (classAnnotated ? dirtiesContext.classMode() : null)___		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_				"%s test class: context %s, class annotated with @DirtiesContext [%s] with mode [%s].", phase,_				testContext, classAnnotated, classMode))__		}__		if (classMode == requiredClassMode) {_			dirtyContext(testContext, dirtiesContext.hierarchyMode())__		}_	};perform,the,actual,work,for,link,before,test,class,and,link,after,test,class,since,4,2;private,void,before,or,after,test,class,test,context,test,context,string,phase,class,mode,required,class,mode,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,dirties,context,dirties,context,annotated,element,utils,find,merged,annotation,test,class,dirties,context,class,boolean,class,annotated,dirties,context,null,class,mode,class,mode,class,annotated,dirties,context,class,mode,null,if,logger,is,debug,enabled,logger,debug,string,format,s,test,class,context,s,class,annotated,with,dirties,context,s,with,mode,s,phase,test,context,class,annotated,class,mode,if,class,mode,required,class,mode,dirty,context,test,context,dirties,context,hierarchy,mode
DirtiesContextTestExecutionListener -> @Override 	public void afterTestClass(TestContext testContext) throws Exception;1328020251;If the test class of the supplied {@link TestContext test context} is_annotated with {@link DirtiesContext &#064_DirtiesContext}, the_{@link ApplicationContext application context} of the test context will_be {@link TestContext#markApplicationContextDirty() marked as dirty} ,_and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_<code>true</code>.;@Override_	public void afterTestClass(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")___		boolean dirtiesContext = testClass.isAnnotationPresent(DirtiesContext.class)__		if (logger.isDebugEnabled()) {_			logger.debug("After test class: context [" + testContext + "], dirtiesContext [" + dirtiesContext + "].")__		}_		if (dirtiesContext) {_			dirtyContext(testContext)__		}_	};if,the,test,class,of,the,supplied,link,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,the,link,application,context,application,context,of,the,test,context,will,be,link,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true,code;override,public,void,after,test,class,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,boolean,dirties,context,test,class,is,annotation,present,dirties,context,class,if,logger,is,debug,enabled,logger,debug,after,test,class,context,test,context,dirties,context,dirties,context,if,dirties,context,dirty,context,test,context
DirtiesContextTestExecutionListener -> @Override 	public void afterTestClass(TestContext testContext) throws Exception;1337278668;If the test class of the supplied {@link TestContext test context} is_annotated with {@link DirtiesContext &#064_DirtiesContext}, the_{@link ApplicationContext application context} of the test context will_be {@link TestContext#markApplicationContextDirty() marked as dirty} ,_and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_<code>true</code>.;@Override_	public void afterTestClass(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")___		boolean dirtiesContext = testClass.isAnnotationPresent(DirtiesContext.class)__		if (logger.isDebugEnabled()) {_			logger.debug("After test class: context [" + testContext + "], dirtiesContext [" + dirtiesContext + "].")__		}_		if (dirtiesContext) {_			dirtyContext(testContext)__		}_	};if,the,test,class,of,the,supplied,link,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,the,link,application,context,application,context,of,the,test,context,will,be,link,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true,code;override,public,void,after,test,class,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,boolean,dirties,context,test,class,is,annotation,present,dirties,context,class,if,logger,is,debug,enabled,logger,debug,after,test,class,context,test,context,dirties,context,dirties,context,if,dirties,context,dirty,context,test,context
DirtiesContextTestExecutionListener -> @Override 	public void afterTestClass(TestContext testContext) throws Exception;1356735495;If the test class of the supplied {@link TestContext test context} is_annotated with {@link DirtiesContext &#064_DirtiesContext}, the_{@link ApplicationContext application context} of the test context will_be {@link TestContext#markApplicationContextDirty() marked as dirty} ,_and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void afterTestClass(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")___		boolean dirtiesContext = testClass.isAnnotationPresent(DirtiesContext.class)__		if (logger.isDebugEnabled()) {_			logger.debug("After test class: context [" + testContext + "], dirtiesContext [" + dirtiesContext + "].")__		}_		if (dirtiesContext) {_			dirtyContext(testContext)__		}_	};if,the,test,class,of,the,supplied,link,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,the,link,application,context,application,context,of,the,test,context,will,be,link,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,class,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,boolean,dirties,context,test,class,is,annotation,present,dirties,context,class,if,logger,is,debug,enabled,logger,debug,after,test,class,context,test,context,dirties,context,dirties,context,if,dirties,context,dirty,context,test,context
DirtiesContextTestExecutionListener -> @Override 	public void afterTestClass(TestContext testContext) throws Exception;1363208506;If the test class of the supplied {@linkplain TestContext test context} is_annotated with {@link DirtiesContext &#064_DirtiesContext}, the_{@linkplain ApplicationContext application context} of the test context will_be {@linkplain TestContext#markApplicationContextDirty() marked as dirty} ,_and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void afterTestClass(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")___		final Class<DirtiesContext> annotationType = DirtiesContext.class___		boolean dirtiesContext = testClass.isAnnotationPresent(annotationType)__		if (logger.isDebugEnabled()) {_			logger.debug("After test class: context [" + testContext + "], dirtiesContext [" + dirtiesContext + "].")__		}_		if (dirtiesContext) {_			HierarchyMode hierarchyMode = testClass.getAnnotation(annotationType).hierarchyMode()__			dirtyContext(testContext, hierarchyMode)__		}_	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,class,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,final,class,dirties,context,annotation,type,dirties,context,class,boolean,dirties,context,test,class,is,annotation,present,annotation,type,if,logger,is,debug,enabled,logger,debug,after,test,class,context,test,context,dirties,context,dirties,context,if,dirties,context,hierarchy,mode,hierarchy,mode,test,class,get,annotation,annotation,type,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> @Override 	public void afterTestClass(TestContext testContext) throws Exception;1367954761;If the test class of the supplied {@linkplain TestContext test context} is_annotated with {@link DirtiesContext &#064_DirtiesContext}, the_{@linkplain ApplicationContext application context} of the test context will_be {@linkplain TestContext#markApplicationContextDirty() marked as dirty} ,_and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void afterTestClass(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")___		final Class<DirtiesContext> annotationType = DirtiesContext.class___		boolean dirtiesContext = testClass.isAnnotationPresent(annotationType)__		if (logger.isDebugEnabled()) {_			logger.debug("After test class: context [" + testContext + "], dirtiesContext [" + dirtiesContext + "].")__		}_		if (dirtiesContext) {_			HierarchyMode hierarchyMode = testClass.getAnnotation(annotationType).hierarchyMode()__			dirtyContext(testContext, hierarchyMode)__		}_	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,class,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,final,class,dirties,context,annotation,type,dirties,context,class,boolean,dirties,context,test,class,is,annotation,present,annotation,type,if,logger,is,debug,enabled,logger,debug,after,test,class,context,test,context,dirties,context,dirties,context,if,dirties,context,hierarchy,mode,hierarchy,mode,test,class,get,annotation,annotation,type,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> @Override 	public void afterTestClass(TestContext testContext) throws Exception;1382815212;If the test class of the supplied {@linkplain TestContext test context} is_annotated with {@link DirtiesContext &#064_DirtiesContext}, the_{@linkplain ApplicationContext application context} of the test context will_be {@linkplain TestContext#markApplicationContextDirty() marked as dirty} ,_and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void afterTestClass(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")___		final Class<DirtiesContext> annotationType = DirtiesContext.class___		boolean dirtiesContext = testClass.isAnnotationPresent(annotationType)__		if (logger.isDebugEnabled()) {_			logger.debug("After test class: context [" + testContext + "], dirtiesContext [" + dirtiesContext + "].")__		}_		if (dirtiesContext) {_			HierarchyMode hierarchyMode = testClass.getAnnotation(annotationType).hierarchyMode()__			dirtyContext(testContext, hierarchyMode)__		}_	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,class,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,final,class,dirties,context,annotation,type,dirties,context,class,boolean,dirties,context,test,class,is,annotation,present,annotation,type,if,logger,is,debug,enabled,logger,debug,after,test,class,context,test,context,dirties,context,dirties,context,if,dirties,context,hierarchy,mode,hierarchy,mode,test,class,get,annotation,annotation,type,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> @Override 	public void afterTestClass(TestContext testContext) throws Exception;1382920864;If the test class of the supplied {@linkplain TestContext test context} is_annotated with {@link DirtiesContext &#064_DirtiesContext}, the_{@linkplain ApplicationContext application context} of the test context will_be {@linkplain TestContext#markApplicationContextDirty() marked as dirty} ,_and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void afterTestClass(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")___		final Class<DirtiesContext> annotationType = DirtiesContext.class___		DirtiesContext dirtiesContextAnnotation = findAnnotation(testClass, annotationType)__		boolean dirtiesContext = dirtiesContextAnnotation != null__		if (logger.isDebugEnabled()) {_			logger.debug("After test class: context [" + testContext + "], dirtiesContext [" + dirtiesContext + "].")__		}_		if (dirtiesContext) {_			HierarchyMode hierarchyMode = dirtiesContextAnnotation.hierarchyMode()__			dirtyContext(testContext, hierarchyMode)__		}_	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,class,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,final,class,dirties,context,annotation,type,dirties,context,class,dirties,context,dirties,context,annotation,find,annotation,test,class,annotation,type,boolean,dirties,context,dirties,context,annotation,null,if,logger,is,debug,enabled,logger,debug,after,test,class,context,test,context,dirties,context,dirties,context,if,dirties,context,hierarchy,mode,hierarchy,mode,dirties,context,annotation,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> @Override 	public void afterTestClass(TestContext testContext) throws Exception;1385499540;If the test class of the supplied {@linkplain TestContext test context} is_annotated with {@link DirtiesContext &#064_DirtiesContext}, the_{@linkplain ApplicationContext application context} of the test context will_be {@linkplain TestContext#markApplicationContextDirty() marked as dirty},_and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void afterTestClass(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")___		final String annotationType = DirtiesContext.class.getName()__		AnnotationAttributes annAttrs = AnnotatedElementUtils.getAnnotationAttributes(testClass, annotationType)__		boolean dirtiesContext = annAttrs != null___		if (logger.isDebugEnabled()) {_			logger.debug(String.format("After test class: context %s, dirtiesContext [%s].", testContext,_				dirtiesContext))__		}_		if (dirtiesContext) {_			HierarchyMode hierarchyMode = annAttrs.<HierarchyMode> getEnum("hierarchyMode")__			dirtyContext(testContext, hierarchyMode)__		}_	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,class,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,final,string,annotation,type,dirties,context,class,get,name,annotation,attributes,ann,attrs,annotated,element,utils,get,annotation,attributes,test,class,annotation,type,boolean,dirties,context,ann,attrs,null,if,logger,is,debug,enabled,logger,debug,string,format,after,test,class,context,s,dirties,context,s,test,context,dirties,context,if,dirties,context,hierarchy,mode,hierarchy,mode,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> @Override 	public void afterTestClass(TestContext testContext) throws Exception;1385501137;If the test class of the supplied {@linkplain TestContext test context} is_annotated with {@link DirtiesContext &#064_DirtiesContext}, the_{@linkplain ApplicationContext application context} of the test context will_be {@linkplain TestContext#markApplicationContextDirty marked as dirty},_and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void afterTestClass(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")___		final String annotationType = DirtiesContext.class.getName()__		AnnotationAttributes annAttrs = AnnotatedElementUtils.getAnnotationAttributes(testClass, annotationType)__		boolean dirtiesContext = annAttrs != null___		if (logger.isDebugEnabled()) {_			logger.debug(String.format("After test class: context %s, dirtiesContext [%s].", testContext,_				dirtiesContext))__		}_		if (dirtiesContext) {_			HierarchyMode hierarchyMode = annAttrs.<HierarchyMode> getEnum("hierarchyMode")__			dirtyContext(testContext, hierarchyMode)__		}_	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,class,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,final,string,annotation,type,dirties,context,class,get,name,annotation,attributes,ann,attrs,annotated,element,utils,get,annotation,attributes,test,class,annotation,type,boolean,dirties,context,ann,attrs,null,if,logger,is,debug,enabled,logger,debug,string,format,after,test,class,context,s,dirties,context,s,test,context,dirties,context,if,dirties,context,hierarchy,mode,hierarchy,mode,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> @Override 	public void afterTestClass(TestContext testContext) throws Exception;1408048216;If the test class of the supplied {@linkplain TestContext test context} is_annotated with {@link DirtiesContext &#064_DirtiesContext}, the_{@linkplain ApplicationContext application context} of the test context will_be {@linkplain TestContext#markApplicationContextDirty marked as dirty},_and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void afterTestClass(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")___		final String annotationType = DirtiesContext.class.getName()__		AnnotationAttributes annAttrs = AnnotatedElementUtils.getAnnotationAttributes(testClass, annotationType)__		boolean dirtiesContext = annAttrs != null___		if (logger.isDebugEnabled()) {_			logger.debug(String.format("After test class: context %s, dirtiesContext [%s].", testContext,_				dirtiesContext))__		}_		if (dirtiesContext) {_			HierarchyMode hierarchyMode = annAttrs.<HierarchyMode> getEnum("hierarchyMode")__			dirtyContext(testContext, hierarchyMode)__		}_	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,class,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,final,string,annotation,type,dirties,context,class,get,name,annotation,attributes,ann,attrs,annotated,element,utils,get,annotation,attributes,test,class,annotation,type,boolean,dirties,context,ann,attrs,null,if,logger,is,debug,enabled,logger,debug,string,format,after,test,class,context,s,dirties,context,s,test,context,dirties,context,if,dirties,context,hierarchy,mode,hierarchy,mode,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> @Override 	public void afterTestClass(TestContext testContext) throws Exception;1413848647;If the test class of the supplied {@linkplain TestContext test context} is_annotated with {@link DirtiesContext &#064_DirtiesContext}, the_{@linkplain ApplicationContext application context} of the test context will_be {@linkplain TestContext#markApplicationContextDirty marked as dirty},_and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void afterTestClass(TestContext testContext) throws Exception {_		Class<?> testClass = testContext.getTestClass()__		Assert.notNull(testClass, "The test class of the supplied TestContext must not be null")___		final String annotationType = DirtiesContext.class.getName()__		AnnotationAttributes annAttrs = AnnotatedElementUtils.getAnnotationAttributes(testClass, annotationType)__		boolean dirtiesContext = annAttrs != null___		if (logger.isDebugEnabled()) {_			logger.debug(String.format("After test class: context %s, dirtiesContext [%s].", testContext,_				dirtiesContext))__		}_		if (dirtiesContext) {_			HierarchyMode hierarchyMode = annAttrs.<HierarchyMode> getEnum("hierarchyMode")__			dirtyContext(testContext, hierarchyMode)__		}_	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,link,dirties,context,064,dirties,context,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,class,test,context,test,context,throws,exception,class,test,class,test,context,get,test,class,assert,not,null,test,class,the,test,class,of,the,supplied,test,context,must,not,be,null,final,string,annotation,type,dirties,context,class,get,name,annotation,attributes,ann,attrs,annotated,element,utils,get,annotation,attributes,test,class,annotation,type,boolean,dirties,context,ann,attrs,null,if,logger,is,debug,enabled,logger,debug,string,format,after,test,class,context,s,dirties,context,s,test,context,dirties,context,if,dirties,context,hierarchy,mode,hierarchy,mode,ann,attrs,hierarchy,mode,get,enum,hierarchy,mode,dirty,context,test,context,hierarchy,mode
DirtiesContextTestExecutionListener -> @Override 	public void afterTestClass(TestContext testContext) throws Exception;1427056400;If the test class of the supplied {@linkplain TestContext test context}_is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#AFTER_CLASS AFTER_CLASS}, the {@linkplain ApplicationContext_application context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty marked as dirty}, and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void afterTestClass(TestContext testContext) throws Exception {_		beforeOrAfterTestClass(testContext, "After", AFTER_CLASS)__	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,class,test,context,test,context,throws,exception,before,or,after,test,class,test,context,after
DirtiesContextTestExecutionListener -> @Override 	public void afterTestClass(TestContext testContext) throws Exception;1431568199;If the test class of the supplied {@linkplain TestContext test context}_is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#AFTER_CLASS AFTER_CLASS}, the {@linkplain ApplicationContext_application context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty marked as dirty}, and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void afterTestClass(TestContext testContext) throws Exception {_		beforeOrAfterTestClass(testContext, "After", AFTER_CLASS)__	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,class,test,context,test,context,throws,exception,before,or,after,test,class,test,context,after
DirtiesContextTestExecutionListener -> @Override 	public void afterTestClass(TestContext testContext) throws Exception;1432856630;If the test class of the supplied {@linkplain TestContext test context}_is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#AFTER_CLASS AFTER_CLASS}, the {@linkplain ApplicationContext_application context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty marked as dirty}, and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void afterTestClass(TestContext testContext) throws Exception {_		beforeOrAfterTestClass(testContext, "After", AFTER_CLASS)__	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,class,test,context,test,context,throws,exception,before,or,after,test,class,test,context,after
DirtiesContextTestExecutionListener -> @Override 	public void afterTestClass(TestContext testContext) throws Exception;1434234880;If the test class of the supplied {@linkplain TestContext test context}_is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#AFTER_CLASS AFTER_CLASS}, the {@linkplain ApplicationContext_application context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty marked as dirty}, and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void afterTestClass(TestContext testContext) throws Exception {_		beforeOrAfterTestClass(testContext, "After", AFTER_CLASS)__	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,class,test,context,test,context,throws,exception,before,or,after,test,class,test,context,after
DirtiesContextTestExecutionListener -> @Override 	public void afterTestClass(TestContext testContext) throws Exception;1435776912;If the test class of the supplied {@linkplain TestContext test context}_is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#AFTER_CLASS AFTER_CLASS}, the {@linkplain ApplicationContext_application context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty marked as dirty}, and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void afterTestClass(TestContext testContext) throws Exception {_		beforeOrAfterTestClass(testContext, AFTER_CLASS)__	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,class,test,context,test,context,throws,exception,before,or,after,test,class,test,context
DirtiesContextTestExecutionListener -> @Override 	public void afterTestClass(TestContext testContext) throws Exception;1530174524;If the test class of the supplied {@linkplain TestContext test context}_is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#AFTER_CLASS AFTER_CLASS}, the {@linkplain ApplicationContext_application context} of the test context will be_{@linkplain TestContext#markApplicationContextDirty marked as dirty}, and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to_{@code true}.;@Override_	public void afterTestClass(TestContext testContext) throws Exception {_		beforeOrAfterTestClass(testContext, AFTER_CLASS)__	};if,the,test,class,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true;override,public,void,after,test,class,test,context,test,context,throws,exception,before,or,after,test,class,test,context
DirtiesContextTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1427056400;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#methodMode() method mode} is set to {@link_MethodMode#BEFORE_METHOD BEFORE_METHOD}, or if the test class is_annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#BEFORE_EACH_TEST_METHOD BEFORE_EACH_TEST_METHOD}, the_{@linkplain ApplicationContext application context} of the test context_will be {@linkplain TestContext#markApplicationContextDirty marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to {@code true}._@since 4.2;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		beforeOrAfterTestMethod(testContext, "Before", BEFORE_METHOD, BEFORE_EACH_TEST_METHOD)__	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,method,mode,method,mode,is,set,to,link,method,mode,or,if,the,test,class,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true,since,4,2;override,public,void,before,test,method,test,context,test,context,throws,exception,before,or,after,test,method,test,context,before
DirtiesContextTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1431568199;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#methodMode() method mode} is set to {@link_MethodMode#BEFORE_METHOD BEFORE_METHOD}, or if the test class is_annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#BEFORE_EACH_TEST_METHOD BEFORE_EACH_TEST_METHOD}, the_{@linkplain ApplicationContext application context} of the test context_will be {@linkplain TestContext#markApplicationContextDirty marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to {@code true}._@since 4.2;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		beforeOrAfterTestMethod(testContext, "Before", BEFORE_METHOD, BEFORE_EACH_TEST_METHOD)__	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,method,mode,method,mode,is,set,to,link,method,mode,or,if,the,test,class,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true,since,4,2;override,public,void,before,test,method,test,context,test,context,throws,exception,before,or,after,test,method,test,context,before
DirtiesContextTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1432856630;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#methodMode() method mode} is set to {@link_MethodMode#BEFORE_METHOD BEFORE_METHOD}, or if the test class is_annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#BEFORE_EACH_TEST_METHOD BEFORE_EACH_TEST_METHOD}, the_{@linkplain ApplicationContext application context} of the test context_will be {@linkplain TestContext#markApplicationContextDirty marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to {@code true}._@since 4.2;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		beforeOrAfterTestMethod(testContext, "Before", BEFORE_METHOD, BEFORE_EACH_TEST_METHOD)__	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,method,mode,method,mode,is,set,to,link,method,mode,or,if,the,test,class,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true,since,4,2;override,public,void,before,test,method,test,context,test,context,throws,exception,before,or,after,test,method,test,context,before
DirtiesContextTestExecutionListener -> @Override 	public void beforeTestMethod(TestContext testContext) throws Exception;1434234880;If the current test method of the supplied {@linkplain TestContext test_context} is annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#methodMode() method mode} is set to {@link_MethodMode#BEFORE_METHOD BEFORE_METHOD}, or if the test class is_annotated with {@code @DirtiesContext} and the {@linkplain_DirtiesContext#classMode() class mode} is set to {@link_ClassMode#BEFORE_EACH_TEST_METHOD BEFORE_EACH_TEST_METHOD}, the_{@linkplain ApplicationContext application context} of the test context_will be {@linkplain TestContext#markApplicationContextDirty marked as dirty} and the_{@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE_REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context will be set to {@code true}._@since 4.2;@Override_	public void beforeTestMethod(TestContext testContext) throws Exception {_		beforeOrAfterTestMethod(testContext, "Before", BEFORE_METHOD, BEFORE_EACH_TEST_METHOD)__	};if,the,current,test,method,of,the,supplied,linkplain,test,context,test,context,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,method,mode,method,mode,is,set,to,link,method,mode,or,if,the,test,class,is,annotated,with,code,dirties,context,and,the,linkplain,dirties,context,class,mode,class,mode,is,set,to,link,class,mode,the,linkplain,application,context,application,context,of,the,test,context,will,be,linkplain,test,context,mark,application,context,dirty,marked,as,dirty,and,the,link,dependency,injection,test,execution,listener,in,the,test,context,will,be,set,to,code,true,since,4,2;override,public,void,before,test,method,test,context,test,context,throws,exception,before,or,after,test,method,test,context,before
