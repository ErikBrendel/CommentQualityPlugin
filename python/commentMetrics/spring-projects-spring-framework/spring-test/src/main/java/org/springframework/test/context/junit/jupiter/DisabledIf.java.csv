# id;timestamp;commentText;codeText;commentWords;codeWords
DisabledIf -> @AliasFor("value") 	String expression() default ""_;1472411819;The expression that will be evaluated to determine if the annotated test_class or test method is <em>disabled</em>.__<p>If the expression evaluates to {@link Boolean#TRUE} or a {@link String}_equal to {@code "true"} (ignoring case), the test will be disabled.__<p>Expressions can be any of the following.__<ul>_<li>Spring Expression Language (SpEL) expression &mdash_ for example:_<pre style="code">@DisabledIf("#{systemProperties['os.name'].toLowerCase().contains('mac')}")</pre>_<li>Placeholder for a property available in the Spring_{@link org.springframework.core.env.Environment Environment} &mdash_ for example:_<pre style="code">@DisabledIf("${smoke.tests.enabled}")</pre>_<li>Text literal &mdash_ for example:_<pre style="code">@DisabledIf("true")</pre>_</ul>__<p>Note, however, that a <em>text literal</em> which is not the result of_dynamic resolution of a property placeholder is of zero practical value_since {@code @DisabledIf("true")} is equivalent to {@code @Disabled}_and {@code @DisabledIf("false")} is logically meaningless.__@see #reason_@see #value;@AliasFor("value")_	String expression() default ""_;the,expression,that,will,be,evaluated,to,determine,if,the,annotated,test,class,or,test,method,is,em,disabled,em,p,if,the,expression,evaluates,to,link,boolean,true,or,a,link,string,equal,to,code,true,ignoring,case,the,test,will,be,disabled,p,expressions,can,be,any,of,the,following,ul,li,spring,expression,language,sp,el,expression,mdash,for,example,pre,style,code,disabled,if,system,properties,os,name,to,lower,case,contains,mac,pre,li,placeholder,for,a,property,available,in,the,spring,link,org,springframework,core,env,environment,environment,mdash,for,example,pre,style,code,disabled,if,smoke,tests,enabled,pre,li,text,literal,mdash,for,example,pre,style,code,disabled,if,true,pre,ul,p,note,however,that,a,em,text,literal,em,which,is,not,the,result,of,dynamic,resolution,of,a,property,placeholder,is,of,zero,practical,value,since,code,disabled,if,true,is,equivalent,to,code,disabled,and,code,disabled,if,false,is,logically,meaningless,see,reason,see,value;alias,for,value,string,expression,default
DisabledIf -> @AliasFor("value") 	String expression() default ""_;1472652718;The expression that will be evaluated to determine if the annotated test_class or test method is <em>disabled</em>.__<p>If the expression evaluates to {@link Boolean#TRUE} or a {@link String}_equal to {@code "true"} (ignoring case), the test will be disabled.__<p>Expressions can be any of the following.__<ul>_<li>Spring Expression Language (SpEL) expression &mdash_ for example:_<pre style="code">@DisabledIf("#{systemProperties['os.name'].toLowerCase().contains('mac')}")</pre>_<li>Placeholder for a property available in the Spring_{@link org.springframework.core.env.Environment Environment} &mdash_ for example:_<pre style="code">@DisabledIf("${smoke.tests.enabled}")</pre>_<li>Text literal &mdash_ for example:_<pre style="code">@DisabledIf("true")</pre>_</ul>__<p>Note, however, that a <em>text literal</em> which is not the result of_dynamic resolution of a property placeholder is of zero practical value_since {@code @DisabledIf("true")} is equivalent to {@code @Disabled}_and {@code @DisabledIf("false")} is logically meaningless.__@see #reason_@see #value;@AliasFor("value")_	String expression() default ""_;the,expression,that,will,be,evaluated,to,determine,if,the,annotated,test,class,or,test,method,is,em,disabled,em,p,if,the,expression,evaluates,to,link,boolean,true,or,a,link,string,equal,to,code,true,ignoring,case,the,test,will,be,disabled,p,expressions,can,be,any,of,the,following,ul,li,spring,expression,language,sp,el,expression,mdash,for,example,pre,style,code,disabled,if,system,properties,os,name,to,lower,case,contains,mac,pre,li,placeholder,for,a,property,available,in,the,spring,link,org,springframework,core,env,environment,environment,mdash,for,example,pre,style,code,disabled,if,smoke,tests,enabled,pre,li,text,literal,mdash,for,example,pre,style,code,disabled,if,true,pre,ul,p,note,however,that,a,em,text,literal,em,which,is,not,the,result,of,dynamic,resolution,of,a,property,placeholder,is,of,zero,practical,value,since,code,disabled,if,true,is,equivalent,to,code,disabled,and,code,disabled,if,false,is,logically,meaningless,see,reason,see,value;alias,for,value,string,expression,default
DisabledIf -> @AliasFor("value") 	String expression() default ""_;1477579952;The expression that will be evaluated to determine if the annotated test_class or test method is <em>disabled</em>.__<p>If the expression evaluates to {@link Boolean#TRUE} or a {@link String}_equal to {@code "true"} (ignoring case), the test will be disabled.__<p>Expressions can be any of the following.__<ul>_<li>Spring Expression Language (SpEL) expression &mdash_ for example:_<pre style="code">@DisabledIf("#{systemProperties['os.name'].toLowerCase().contains('mac')}")</pre>_<li>Placeholder for a property available in the Spring_{@link org.springframework.core.env.Environment Environment} &mdash_ for example:_<pre style="code">@DisabledIf("${smoke.tests.enabled}")</pre>_<li>Text literal &mdash_ for example:_<pre style="code">@DisabledIf("true")</pre>_</ul>__<p>Note, however, that a <em>text literal</em> which is not the result of_dynamic resolution of a property placeholder is of zero practical value_since {@code @DisabledIf("true")} is equivalent to {@code @Disabled}_and {@code @DisabledIf("false")} is logically meaningless.__@see #reason_@see #loadContext_@see #value;@AliasFor("value")_	String expression() default ""_;the,expression,that,will,be,evaluated,to,determine,if,the,annotated,test,class,or,test,method,is,em,disabled,em,p,if,the,expression,evaluates,to,link,boolean,true,or,a,link,string,equal,to,code,true,ignoring,case,the,test,will,be,disabled,p,expressions,can,be,any,of,the,following,ul,li,spring,expression,language,sp,el,expression,mdash,for,example,pre,style,code,disabled,if,system,properties,os,name,to,lower,case,contains,mac,pre,li,placeholder,for,a,property,available,in,the,spring,link,org,springframework,core,env,environment,environment,mdash,for,example,pre,style,code,disabled,if,smoke,tests,enabled,pre,li,text,literal,mdash,for,example,pre,style,code,disabled,if,true,pre,ul,p,note,however,that,a,em,text,literal,em,which,is,not,the,result,of,dynamic,resolution,of,a,property,placeholder,is,of,zero,practical,value,since,code,disabled,if,true,is,equivalent,to,code,disabled,and,code,disabled,if,false,is,logically,meaningless,see,reason,see,load,context,see,value;alias,for,value,string,expression,default
DisabledIf -> @AliasFor("value") 	String expression() default ""_;1506522330;The expression that will be evaluated to determine if the annotated test_class or test method is <em>disabled</em>.__<p>If the expression evaluates to {@link Boolean#TRUE} or a {@link String}_equal to {@code "true"} (ignoring case), the test will be disabled.__<p>Expressions can be any of the following.__<ul>_<li>Spring Expression Language (SpEL) expression &mdash_ for example:_<pre style="code">@DisabledIf("#{systemProperties['os.name'].toLowerCase().contains('mac')}")</pre>_<li>Placeholder for a property available in the Spring_{@link org.springframework.core.env.Environment Environment} &mdash_ for example:_<pre style="code">@DisabledIf("${smoke.tests.disabled}")</pre>_<li>Text literal &mdash_ for example:_<pre style="code">@DisabledIf("true")</pre>_</ul>__<p>Note, however, that a <em>text literal</em> which is not the result of_dynamic resolution of a property placeholder is of zero practical value_since {@code @DisabledIf("true")} is equivalent to {@code @Disabled}_and {@code @DisabledIf("false")} is logically meaningless.__@see #reason_@see #loadContext_@see #value;@AliasFor("value")_	String expression() default ""_;the,expression,that,will,be,evaluated,to,determine,if,the,annotated,test,class,or,test,method,is,em,disabled,em,p,if,the,expression,evaluates,to,link,boolean,true,or,a,link,string,equal,to,code,true,ignoring,case,the,test,will,be,disabled,p,expressions,can,be,any,of,the,following,ul,li,spring,expression,language,sp,el,expression,mdash,for,example,pre,style,code,disabled,if,system,properties,os,name,to,lower,case,contains,mac,pre,li,placeholder,for,a,property,available,in,the,spring,link,org,springframework,core,env,environment,environment,mdash,for,example,pre,style,code,disabled,if,smoke,tests,disabled,pre,li,text,literal,mdash,for,example,pre,style,code,disabled,if,true,pre,ul,p,note,however,that,a,em,text,literal,em,which,is,not,the,result,of,dynamic,resolution,of,a,property,placeholder,is,of,zero,practical,value,since,code,disabled,if,true,is,equivalent,to,code,disabled,and,code,disabled,if,false,is,logically,meaningless,see,reason,see,load,context,see,value;alias,for,value,string,expression,default
DisabledIf -> boolean loadContext() default false_;1477579952;Whether the {@code ApplicationContext} associated with the current test_should be eagerly loaded in order to evaluate the {@link #expression}.__<p>Defaults to {@code false} so that test application contexts are not_eagerly loaded unnecessarily. If an expression is based solely on system_properties or environment variables or does not interact with beans in_the test's application context, there is no need to load the context_prematurely since doing so would be a waste of time if the test ends up_being disabled.__@see #expression;boolean loadContext() default false_;whether,the,code,application,context,associated,with,the,current,test,should,be,eagerly,loaded,in,order,to,evaluate,the,link,expression,p,defaults,to,code,false,so,that,test,application,contexts,are,not,eagerly,loaded,unnecessarily,if,an,expression,is,based,solely,on,system,properties,or,environment,variables,or,does,not,interact,with,beans,in,the,test,s,application,context,there,is,no,need,to,load,the,context,prematurely,since,doing,so,would,be,a,waste,of,time,if,the,test,ends,up,being,disabled,see,expression;boolean,load,context,default,false
DisabledIf -> boolean loadContext() default false_;1506522330;Whether the {@code ApplicationContext} associated with the current test_should be eagerly loaded in order to evaluate the {@link #expression}.__<p>Defaults to {@code false} so that test application contexts are not_eagerly loaded unnecessarily. If an expression is based solely on system_properties or environment variables or does not interact with beans in_the test's application context, there is no need to load the context_prematurely since doing so would be a waste of time if the test ends up_being disabled.__@see #expression;boolean loadContext() default false_;whether,the,code,application,context,associated,with,the,current,test,should,be,eagerly,loaded,in,order,to,evaluate,the,link,expression,p,defaults,to,code,false,so,that,test,application,contexts,are,not,eagerly,loaded,unnecessarily,if,an,expression,is,based,solely,on,system,properties,or,environment,variables,or,does,not,interact,with,beans,in,the,test,s,application,context,there,is,no,need,to,load,the,context,prematurely,since,doing,so,would,be,a,waste,of,time,if,the,test,ends,up,being,disabled,see,expression;boolean,load,context,default,false
DisabledIf -> String reason() default ""_;1472411819;The reason this test is disabled.__@see #expression;String reason() default ""_;the,reason,this,test,is,disabled,see,expression;string,reason,default
DisabledIf -> String reason() default ""_;1472652718;The reason this test is disabled.__@see #expression;String reason() default ""_;the,reason,this,test,is,disabled,see,expression;string,reason,default
DisabledIf -> String reason() default ""_;1477579952;The reason this test is disabled.__@see #expression;String reason() default ""_;the,reason,this,test,is,disabled,see,expression;string,reason,default
DisabledIf -> String reason() default ""_;1506522330;The reason this test is disabled.__@see #expression;String reason() default ""_;the,reason,this,test,is,disabled,see,expression;string,reason,default
DisabledIf -> @AliasFor("expression") 	String value() default ""_;1472411819;Alias for {@link #expression}_ only intended to be used if an_explicit {@link #reason} is not provided.__@see #expression;@AliasFor("expression")_	String value() default ""_;alias,for,link,expression,only,intended,to,be,used,if,an,explicit,link,reason,is,not,provided,see,expression;alias,for,expression,string,value,default
DisabledIf -> @AliasFor("expression") 	String value() default ""_;1472652718;Alias for {@link #expression}_ only intended to be used if an_explicit {@link #reason} is not provided.__@see #expression;@AliasFor("expression")_	String value() default ""_;alias,for,link,expression,only,intended,to,be,used,if,an,explicit,link,reason,is,not,provided,see,expression;alias,for,expression,string,value,default
DisabledIf -> @AliasFor("expression") 	String value() default ""_;1477579952;Alias for {@link #expression}_ only intended to be used if {@link #reason}_and {@link #loadContext} are not specified.__@see #expression;@AliasFor("expression")_	String value() default ""_;alias,for,link,expression,only,intended,to,be,used,if,link,reason,and,link,load,context,are,not,specified,see,expression;alias,for,expression,string,value,default
DisabledIf -> @AliasFor("expression") 	String value() default ""_;1506522330;Alias for {@link #expression}_ only intended to be used if {@link #reason}_and {@link #loadContext} are not specified.__@see #expression;@AliasFor("expression")_	String value() default ""_;alias,for,link,expression,only,intended,to,be,used,if,link,reason,and,link,load,context,are,not,specified,see,expression;alias,for,expression,string,value,default
