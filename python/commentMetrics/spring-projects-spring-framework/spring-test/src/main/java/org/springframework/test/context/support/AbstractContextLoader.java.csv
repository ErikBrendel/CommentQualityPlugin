# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractContextLoader -> public final String[] processLocations(Class<?> clazz, String... locations);1328020251;If the supplied <code>locations</code> are <code>null</code> or_<em>empty</em> and {@link #isGenerateDefaultLocations()} returns_<code>true</code>, default locations will be_{@link #generateDefaultLocations(Class) generated} for the specified_{@link Class class} and the configured_{@link #getResourceSuffix() resource suffix}_ otherwise, the supplied_<code>locations</code> will be {@link #modifyLocations modified} if_necessary and returned._@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be <code>null</code> or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations()_@see #modifyLocations()_@see org.springframework.test.context.ContextLoader#processLocations()_@see #processContextConfiguration();public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ? generateDefaultLocations(clazz)_				: modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,code,are,code,null,code,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,code,default,locations,will,be,link,generate,default,locations,class,generated,for,the,specified,link,class,class,and,the,configured,link,get,resource,suffix,resource,suffix,otherwise,the,supplied,code,locations,code,will,be,link,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,code,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,see,modify,locations,see,org,springframework,test,context,context,loader,process,locations,see,process,context,configuration;public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> public final String[] processLocations(Class<?> clazz, String... locations);1335774711;If the supplied <code>locations</code> are <code>null</code> or_<em>empty</em> and {@link #isGenerateDefaultLocations()} returns_<code>true</code>, default locations will be_{@link #generateDefaultLocations(Class) generated} for the specified_{@link Class class} and the configured_{@link #getResourceSuffix() resource suffix}_ otherwise, the supplied_<code>locations</code> will be {@link #modifyLocations modified} if_necessary and returned._@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be <code>null</code> or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ? generateDefaultLocations(clazz)_				: modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,code,are,code,null,code,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,code,default,locations,will,be,link,generate,default,locations,class,generated,for,the,specified,link,class,class,and,the,configured,link,get,resource,suffix,resource,suffix,otherwise,the,supplied,code,locations,code,will,be,link,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,code,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> public final String[] processLocations(Class<?> clazz, String... locations);1337278668;If the supplied <code>locations</code> are <code>null</code> or_<em>empty</em> and {@link #isGenerateDefaultLocations()} returns_<code>true</code>, default locations will be_{@link #generateDefaultLocations(Class) generated} for the specified_{@link Class class} and the configured_{@link #getResourceSuffix() resource suffix}_ otherwise, the supplied_<code>locations</code> will be {@link #modifyLocations modified} if_necessary and returned.__@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be <code>null</code> or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ? generateDefaultLocations(clazz)_				: modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,code,are,code,null,code,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,code,default,locations,will,be,link,generate,default,locations,class,generated,for,the,specified,link,class,class,and,the,configured,link,get,resource,suffix,resource,suffix,otherwise,the,supplied,code,locations,code,will,be,link,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,code,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> public final String[] processLocations(Class<?> clazz, String... locations);1349648958;If the supplied <code>locations</code> are <code>null</code> or_<em>empty</em> and {@link #isGenerateDefaultLocations()} returns_<code>true</code>, default locations will be_{@link #generateDefaultLocations(Class) generated} for the specified_{@link Class class} and the configured_{@link #getResourceSuffix() resource suffix}_ otherwise, the supplied_<code>locations</code> will be {@link #modifyLocations modified} if_necessary and returned.__@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be <code>null</code> or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ? generateDefaultLocations(clazz)_				: modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,code,are,code,null,code,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,code,default,locations,will,be,link,generate,default,locations,class,generated,for,the,specified,link,class,class,and,the,configured,link,get,resource,suffix,resource,suffix,otherwise,the,supplied,code,locations,code,will,be,link,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,code,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> public final String[] processLocations(Class<?> clazz, String... locations);1357119239;If the supplied {@code locations} are {@code null} or_<em>empty</em> and {@link #isGenerateDefaultLocations()} returns_{@code true}, default locations will be_{@link #generateDefaultLocations(Class) generated} for the specified_{@link Class class} and the configured_{@link #getResourceSuffix() resource suffix}_ otherwise, the supplied_{@code locations} will be {@link #modifyLocations modified} if_necessary and returned.__@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ? generateDefaultLocations(clazz)_				: modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,for,the,specified,link,class,class,and,the,configured,link,get,resource,suffix,resource,suffix,otherwise,the,supplied,code,locations,will,be,link,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> public final String[] processLocations(Class<?> clazz, String... locations);1362408075;If the supplied {@code locations} are {@code null} or_<em>empty</em> and {@link #isGenerateDefaultLocations()} returns_{@code true}, default locations will be_{@link #generateDefaultLocations(Class) generated} for the specified_{@link Class class} and the configured_{@link #getResourceSuffix() resource suffix}_ otherwise, the supplied_{@code locations} will be {@link #modifyLocations modified} if_necessary and returned.__@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ? generateDefaultLocations(clazz)_				: modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,for,the,specified,link,class,class,and,the,configured,link,get,resource,suffix,resource,suffix,otherwise,the,supplied,code,locations,will,be,link,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1328020251;Generate the default classpath resource locations array based on the_supplied class._<p>For example, if the supplied class is <code>com.example.MyTest</code>,_the generated locations will contain a single string with a value of_&quot_classpath:/com/example/MyTest<code>&lt_suffix&gt_</code>&quot_,_where <code>&lt_suffix&gt_</code> is the value of the_{@link #getResourceSuffix() resource suffix} string._<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array._<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy._@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffix();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		String suffix = getResourceSuffix()__		Assert.hasText(suffix, "Resource suffix must not be empty")__		String resourcePath = SLASH + ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath, clazz)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default resource location \"%s\" for test class [%s].",_					prefixedResourcePath, clazz.getName()))__			}_			return new String[] { prefixedResourcePath }__		}__		_		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: "_					+ "%s does not exist.", clazz.getName(), classPathResource))__		}_		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,code,the,generated,locations,will,contain,a,single,string,with,a,value,of,quot,classpath,com,example,my,test,code,lt,suffix,gt,code,quot,where,code,lt,suffix,gt,code,is,the,value,of,the,link,get,resource,suffix,resource,suffix,string,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffix;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffix,get,resource,suffix,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,slash,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,clazz,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1335774711;Generate the default classpath resource locations array based on the_supplied class._<p>For example, if the supplied class is <code>com.example.MyTest</code>,_the generated locations will contain a single string with a value of_&quot_classpath:/com/example/MyTest<code>&lt_suffix&gt_</code>&quot_,_where <code>&lt_suffix&gt_</code> is the value of the_{@link #getResourceSuffix() resource suffix} string._<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array._<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy._@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffix();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		String suffix = getResourceSuffix()__		Assert.hasText(suffix, "Resource suffix must not be empty")__		String resourcePath = SLASH + ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath, clazz)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default resource location \"%s\" for test class [%s].",_					prefixedResourcePath, clazz.getName()))__			}_			return new String[] { prefixedResourcePath }__		}__		_		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: "_					+ "%s does not exist.", clazz.getName(), classPathResource))__		}_		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,code,the,generated,locations,will,contain,a,single,string,with,a,value,of,quot,classpath,com,example,my,test,code,lt,suffix,gt,code,quot,where,code,lt,suffix,gt,code,is,the,value,of,the,link,get,resource,suffix,resource,suffix,string,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffix;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffix,get,resource,suffix,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,slash,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,clazz,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1337278668;Generate the default classpath resource locations array based on the_supplied class.__<p>For example, if the supplied class is <code>com.example.MyTest</code>,_the generated locations will contain a single string with a value of_&quot_classpath:/com/example/MyTest<code>&lt_suffix&gt_</code>&quot_,_where <code>&lt_suffix&gt_</code> is the value of the_{@link #getResourceSuffix() resource suffix} string.__<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array.__<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy.__@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffix();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		String suffix = getResourceSuffix()__		Assert.hasText(suffix, "Resource suffix must not be empty")__		String resourcePath = SLASH + ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath, clazz)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default resource location \"%s\" for test class [%s].",_					prefixedResourcePath, clazz.getName()))__			}_			return new String[] { prefixedResourcePath }__		}__		_		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: "_					+ "%s does not exist.", clazz.getName(), classPathResource))__		}_		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,code,the,generated,locations,will,contain,a,single,string,with,a,value,of,quot,classpath,com,example,my,test,code,lt,suffix,gt,code,quot,where,code,lt,suffix,gt,code,is,the,value,of,the,link,get,resource,suffix,resource,suffix,string,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffix;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffix,get,resource,suffix,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,slash,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,clazz,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1349648958;Generate the default classpath resource locations array based on the_supplied class.__<p>For example, if the supplied class is <code>com.example.MyTest</code>,_the generated locations will contain a single string with a value of_&quot_classpath:/com/example/MyTest<code>&lt_suffix&gt_</code>&quot_,_where <code>&lt_suffix&gt_</code> is the value of the_{@link #getResourceSuffix() resource suffix} string.__<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array.__<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy.__@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffix();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		String suffix = getResourceSuffix()__		Assert.hasText(suffix, "Resource suffix must not be empty")__		String resourcePath = SLASH + ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath, clazz)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default resource location \"%s\" for test class [%s].",_					prefixedResourcePath, clazz.getName()))__			}_			return new String[] { prefixedResourcePath }__		}__		_		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: "_					+ "%s does not exist.", clazz.getName(), classPathResource))__		}_		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,code,the,generated,locations,will,contain,a,single,string,with,a,value,of,quot,classpath,com,example,my,test,code,lt,suffix,gt,code,quot,where,code,lt,suffix,gt,code,is,the,value,of,the,link,get,resource,suffix,resource,suffix,string,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffix;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffix,get,resource,suffix,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,slash,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,clazz,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1356735495;Generate the default classpath resource locations array based on the_supplied class.__<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_&quot_classpath:/com/example/MyTest{@code &lt_suffix&gt_}&quot_,_where {@code &lt_suffix&gt_} is the value of the_{@link #getResourceSuffix() resource suffix} string.__<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array.__<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy.__@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffix();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		String suffix = getResourceSuffix()__		Assert.hasText(suffix, "Resource suffix must not be empty")__		String resourcePath = SLASH + ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath, clazz)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default resource location \"%s\" for test class [%s].",_					prefixedResourcePath, clazz.getName()))__			}_			return new String[] { prefixedResourcePath }__		}__		_		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: "_					+ "%s does not exist.", clazz.getName(), classPathResource))__		}_		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,quot,classpath,com,example,my,test,code,lt,suffix,gt,quot,where,code,lt,suffix,gt,is,the,value,of,the,link,get,resource,suffix,resource,suffix,string,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffix;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffix,get,resource,suffix,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,slash,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,clazz,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1357119239;Generate the default classpath resource locations array based on the_supplied class.__<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_&quot_classpath:/com/example/MyTest{@code &lt_suffix&gt_}&quot_,_where {@code &lt_suffix&gt_} is the value of the_{@link #getResourceSuffix() resource suffix} string.__<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array.__<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy.__@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffix();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		String suffix = getResourceSuffix()__		Assert.hasText(suffix, "Resource suffix must not be empty")__		String resourcePath = SLASH + ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath, clazz)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default resource location \"%s\" for test class [%s].",_					prefixedResourcePath, clazz.getName()))__			}_			return new String[] { prefixedResourcePath }__		}__		_		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: "_					+ "%s does not exist.", clazz.getName(), classPathResource))__		}_		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,quot,classpath,com,example,my,test,code,lt,suffix,gt,quot,where,code,lt,suffix,gt,is,the,value,of,the,link,get,resource,suffix,resource,suffix,string,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffix;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffix,get,resource,suffix,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,slash,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,clazz,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1362408075;Generate the default classpath resource locations array based on the_supplied class.__<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_&quot_classpath:/com/example/MyTest{@code <suffix>}&quot_,_where {@code <suffix>} is the value of the_{@link #getResourceSuffix() resource suffix} string.__<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array.__<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy.__@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffix();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		String suffix = getResourceSuffix()__		Assert.hasText(suffix, "Resource suffix must not be empty")__		String resourcePath = SLASH + ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath, clazz)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default resource location \"%s\" for test class [%s].",_					prefixedResourcePath, clazz.getName()))__			}_			return new String[] { prefixedResourcePath }__		}__		_		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: "_					+ "%s does not exist.", clazz.getName(), classPathResource))__		}_		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,quot,classpath,com,example,my,test,code,suffix,quot,where,code,suffix,is,the,value,of,the,link,get,resource,suffix,resource,suffix,string,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffix;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffix,get,resource,suffix,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,slash,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,clazz,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1368482696;Generate the default classpath resource locations array based on the_supplied class.__<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_&quot_classpath:/com/example/MyTest{@code <suffix>}&quot_,_where {@code <suffix>} is the value of the_{@link #getResourceSuffix() resource suffix} string.__<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array.__<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy.__@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffix();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		String suffix = getResourceSuffix()__		Assert.hasText(suffix, "Resource suffix must not be empty")__		String resourcePath = SLASH + ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath, clazz)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default resource location \"%s\" for test class [%s].",_					prefixedResourcePath, clazz.getName()))__			}_			return new String[] { prefixedResourcePath }__		}__		_		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: "_					+ "%s does not exist.", clazz.getName(), classPathResource))__		}_		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,quot,classpath,com,example,my,test,code,suffix,quot,where,code,suffix,is,the,value,of,the,link,get,resource,suffix,resource,suffix,string,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffix;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffix,get,resource,suffix,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,slash,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,clazz,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1384955459;Generate the default classpath resource locations array based on the_supplied class.__<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_&quot_classpath:/com/example/MyTest{@code <suffix>}&quot_,_where {@code <suffix>} is the value of the_{@link #getResourceSuffix() resource suffix} string.__<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array.__<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy.__@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffix();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		String suffix = getResourceSuffix()__		Assert.hasText(suffix, "Resource suffix must not be empty")__		String resourcePath = SLASH + ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath, clazz)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default resource location \"%s\" for test class [%s].",_					prefixedResourcePath, clazz.getName()))__			}_			return new String[] { prefixedResourcePath }__		}__		_		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: "_					+ "%s does not exist.", clazz.getName(), classPathResource))__		}_		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,quot,classpath,com,example,my,test,code,suffix,quot,where,code,suffix,is,the,value,of,the,link,get,resource,suffix,resource,suffix,string,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffix;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffix,get,resource,suffix,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,slash,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,clazz,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1389822826;Generate the default classpath resource locations array based on the_supplied class._<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_&quot_classpath:/com/example/MyTest{@code <suffix>}&quot_,_where {@code <suffix>} is the value of the_{@link #getResourceSuffix() resource suffix} string._<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array._<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy._@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffix();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		String suffix = getResourceSuffix()__		Assert.hasText(suffix, "Resource suffix must not be empty")__		String resourcePath = SLASH + ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath, clazz)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",_						prefixedResourcePath, clazz.getName()))__			}_			return new String[] {prefixedResourcePath}__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default resource locations for test class [%s]: " +_						"%s does not exist", clazz.getName(), classPathResource))__			}_			return EMPTY_STRING_ARRAY__		}_	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,quot,classpath,com,example,my,test,code,suffix,quot,where,code,suffix,is,the,value,of,the,link,get,resource,suffix,resource,suffix,string,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffix;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffix,get,resource,suffix,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,slash,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,clazz,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,else,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1401991965;Generate the default classpath resource locations array based on the_supplied class._<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_&quot_classpath:com/example/MyTest{@code <suffix>}&quot_,_where {@code <suffix>} is the value of the_{@link #getResourceSuffix() resource suffix} string._<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array._<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy._@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffix();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		String suffix = getResourceSuffix()__		Assert.hasText(suffix, "Resource suffix must not be empty")__		String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",_					prefixedResourcePath, clazz.getName()))__			}_			return new String[] { prefixedResourcePath }__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default resource locations for test class [%s]: "_						+ "%s does not exist", clazz.getName(), classPathResource))__			}_			return EMPTY_STRING_ARRAY__		}_	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,quot,classpath,com,example,my,test,code,suffix,quot,where,code,suffix,is,the,value,of,the,link,get,resource,suffix,resource,suffix,string,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffix;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffix,get,resource,suffix,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,else,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1406214559;Generate the default classpath resource locations array based on the_supplied class.__<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_{@code "classpath:com/example/MyTest<suffix>"}, where {@code <suffix>}_is the value of the first configured_{@linkplain #getResourceSuffixes() resource suffix} for which the_generated location actually exists in the classpath.__<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array.__<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy.__@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffixes();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")___		String[] suffixes = getResourceSuffixes()__		for (String suffix : suffixes) {_			Assert.hasText(suffix, "Resource suffix must not be empty")__			String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__			String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__			ClassPathResource classPathResource = new ClassPathResource(resourcePath)___			if (classPathResource.exists()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",_						prefixedResourcePath, clazz.getName()))__				}_				return new String[] { prefixedResourcePath }__			}_			else if (logger.isDebugEnabled()) {_				logger.debug(String.format("Did not detect default resource location for test class [%s]: "_						+ "%s does not exist", clazz.getName(), classPathResource))__			}_		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: "_					+ "no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)))__		}__		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,code,classpath,com,example,my,test,suffix,where,code,suffix,is,the,value,of,the,first,configured,linkplain,get,resource,suffixes,resource,suffix,for,which,the,generated,location,actually,exists,in,the,classpath,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffixes;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffixes,get,resource,suffixes,for,string,suffix,suffixes,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,else,if,logger,is,debug,enabled,logger,debug,string,format,did,not,detect,default,resource,location,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,no,resource,found,for,suffixes,s,clazz,get,name,object,utils,null,safe,to,string,suffixes,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1407967503;Generate the default classpath resource locations array based on the_supplied class.__<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_{@code "classpath:com/example/MyTest<suffix>"}, where {@code <suffix>}_is the value of the first configured_{@linkplain #getResourceSuffixes() resource suffix} for which the_generated location actually exists in the classpath.__<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array.__<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy.__@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffixes();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")___		String[] suffixes = getResourceSuffixes()__		for (String suffix : suffixes) {_			Assert.hasText(suffix, "Resource suffix must not be empty")__			String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__			String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__			ClassPathResource classPathResource = new ClassPathResource(resourcePath)___			if (classPathResource.exists()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",_						prefixedResourcePath, clazz.getName()))__				}_				return new String[] { prefixedResourcePath }__			}_			else if (logger.isDebugEnabled()) {_				logger.debug(String.format("Did not detect default resource location for test class [%s]: "_						+ "%s does not exist", clazz.getName(), classPathResource))__			}_		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: "_					+ "no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)))__		}__		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,code,classpath,com,example,my,test,suffix,where,code,suffix,is,the,value,of,the,first,configured,linkplain,get,resource,suffixes,resource,suffix,for,which,the,generated,location,actually,exists,in,the,classpath,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffixes;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffixes,get,resource,suffixes,for,string,suffix,suffixes,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,else,if,logger,is,debug,enabled,logger,debug,string,format,did,not,detect,default,resource,location,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,no,resource,found,for,suffixes,s,clazz,get,name,object,utils,null,safe,to,string,suffixes,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1413848647;Generate the default classpath resource locations array based on the_supplied class.__<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_{@code "classpath:com/example/MyTest<suffix>"}, where {@code <suffix>}_is the value of the first configured_{@linkplain #getResourceSuffixes() resource suffix} for which the_generated location actually exists in the classpath.__<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array.__<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy.__@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffixes();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")___		String[] suffixes = getResourceSuffixes()__		for (String suffix : suffixes) {_			Assert.hasText(suffix, "Resource suffix must not be empty")__			String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__			String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__			ClassPathResource classPathResource = new ClassPathResource(resourcePath)___			if (classPathResource.exists()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",_						prefixedResourcePath, clazz.getName()))__				}_				return new String[] { prefixedResourcePath }__			}_			else if (logger.isDebugEnabled()) {_				logger.debug(String.format("Did not detect default resource location for test class [%s]: "_						+ "%s does not exist", clazz.getName(), classPathResource))__			}_		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: "_					+ "no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)))__		}__		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,code,classpath,com,example,my,test,suffix,where,code,suffix,is,the,value,of,the,first,configured,linkplain,get,resource,suffixes,resource,suffix,for,which,the,generated,location,actually,exists,in,the,classpath,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffixes;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffixes,get,resource,suffixes,for,string,suffix,suffixes,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,else,if,logger,is,debug,enabled,logger,debug,string,format,did,not,detect,default,resource,location,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,no,resource,found,for,suffixes,s,clazz,get,name,object,utils,null,safe,to,string,suffixes,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1424114809;Generate the default classpath resource locations array based on the_supplied class.__<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_{@code "classpath:com/example/MyTest<suffix>"}, where {@code <suffix>}_is the value of the first configured_{@linkplain #getResourceSuffixes() resource suffix} for which the_generated location actually exists in the classpath.__<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array.__<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy.__@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffixes();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")___		String[] suffixes = getResourceSuffixes()__		for (String suffix : suffixes) {_			Assert.hasText(suffix, "Resource suffix must not be empty")__			String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__			String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__			ClassPathResource classPathResource = new ClassPathResource(resourcePath)___			if (classPathResource.exists()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",_						prefixedResourcePath, clazz.getName()))__				}_				return new String[] { prefixedResourcePath }__			}_			else if (logger.isDebugEnabled()) {_				logger.debug(String.format("Did not detect default resource location for test class [%s]: "_						+ "%s does not exist", clazz.getName(), classPathResource))__			}_		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: "_					+ "no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)))__		}__		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,code,classpath,com,example,my,test,suffix,where,code,suffix,is,the,value,of,the,first,configured,linkplain,get,resource,suffixes,resource,suffix,for,which,the,generated,location,actually,exists,in,the,classpath,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffixes;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffixes,get,resource,suffixes,for,string,suffix,suffixes,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,else,if,logger,is,debug,enabled,logger,debug,string,format,did,not,detect,default,resource,location,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,no,resource,found,for,suffixes,s,clazz,get,name,object,utils,null,safe,to,string,suffixes,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1424138964;Generate the default classpath resource locations array based on the_supplied class.__<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_{@code "classpath:com/example/MyTest<suffix>"}, where {@code <suffix>}_is the value of the first configured_{@linkplain #getResourceSuffixes() resource suffix} for which the_generated location actually exists in the classpath.__<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array.__<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy.__@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffixes();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")___		String[] suffixes = getResourceSuffixes()__		for (String suffix : suffixes) {_			Assert.hasText(suffix, "Resource suffix must not be empty")__			String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__			String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__			ClassPathResource classPathResource = new ClassPathResource(resourcePath)___			if (classPathResource.exists()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",_						prefixedResourcePath, clazz.getName()))__				}_				return new String[] { prefixedResourcePath }__			}_			else if (logger.isDebugEnabled()) {_				logger.debug(String.format("Did not detect default resource location for test class [%s]: "_						+ "%s does not exist", clazz.getName(), classPathResource))__			}_		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: "_					+ "no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)))__		}__		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,code,classpath,com,example,my,test,suffix,where,code,suffix,is,the,value,of,the,first,configured,linkplain,get,resource,suffixes,resource,suffix,for,which,the,generated,location,actually,exists,in,the,classpath,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffixes;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffixes,get,resource,suffixes,for,string,suffix,suffixes,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,else,if,logger,is,debug,enabled,logger,debug,string,format,did,not,detect,default,resource,location,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,no,resource,found,for,suffixes,s,clazz,get,name,object,utils,null,safe,to,string,suffixes,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1456332614;Generate the default classpath resource locations array based on the_supplied class._<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_{@code "classpath:com/example/MyTest<suffix>"}, where {@code <suffix>}_is the value of the first configured_{@linkplain #getResourceSuffixes() resource suffix} for which the_generated location actually exists in the classpath._<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array._<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy._@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffixes();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")___		String[] suffixes = getResourceSuffixes()__		for (String suffix : suffixes) {_			Assert.hasText(suffix, "Resource suffix must not be empty")__			String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__			String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__			ClassPathResource classPathResource = new ClassPathResource(resourcePath)__			if (classPathResource.exists()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",_							prefixedResourcePath, clazz.getName()))__				}_				return new String[] {prefixedResourcePath}__			}_			else if (logger.isDebugEnabled()) {_				logger.debug(String.format("Did not detect default resource location for test class [%s]: " +_						"%s does not exist", clazz.getName(), classPathResource))__			}_		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: " +_					"no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)))__		}__		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,code,classpath,com,example,my,test,suffix,where,code,suffix,is,the,value,of,the,first,configured,linkplain,get,resource,suffixes,resource,suffix,for,which,the,generated,location,actually,exists,in,the,classpath,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffixes;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffixes,get,resource,suffixes,for,string,suffix,suffixes,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,else,if,logger,is,debug,enabled,logger,debug,string,format,did,not,detect,default,resource,location,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,no,resource,found,for,suffixes,s,clazz,get,name,object,utils,null,safe,to,string,suffixes,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1457447255;Generate the default classpath resource locations array based on the_supplied class._<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_{@code "classpath:com/example/MyTest<suffix>"}, where {@code <suffix>}_is the value of the first configured_{@linkplain #getResourceSuffixes() resource suffix} for which the_generated location actually exists in the classpath._<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array._<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy._@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffixes();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")___		String[] suffixes = getResourceSuffixes()__		for (String suffix : suffixes) {_			Assert.hasText(suffix, "Resource suffix must not be empty")__			String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__			String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__			ClassPathResource classPathResource = new ClassPathResource(resourcePath)__			if (classPathResource.exists()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",_							prefixedResourcePath, clazz.getName()))__				}_				return new String[] {prefixedResourcePath}__			}_			else if (logger.isDebugEnabled()) {_				logger.debug(String.format("Did not detect default resource location for test class [%s]: " +_						"%s does not exist", clazz.getName(), classPathResource))__			}_		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: " +_					"no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)))__		}__		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,code,classpath,com,example,my,test,suffix,where,code,suffix,is,the,value,of,the,first,configured,linkplain,get,resource,suffixes,resource,suffix,for,which,the,generated,location,actually,exists,in,the,classpath,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffixes;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffixes,get,resource,suffixes,for,string,suffix,suffixes,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,else,if,logger,is,debug,enabled,logger,debug,string,format,did,not,detect,default,resource,location,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,no,resource,found,for,suffixes,s,clazz,get,name,object,utils,null,safe,to,string,suffixes,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1457727806;Generate the default classpath resource locations array based on the_supplied class._<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_{@code "classpath:com/example/MyTest<suffix>"}, where {@code <suffix>}_is the value of the first configured_{@linkplain #getResourceSuffixes() resource suffix} for which the_generated location actually exists in the classpath._<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array._<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy._@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffixes();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")___		String[] suffixes = getResourceSuffixes()__		for (String suffix : suffixes) {_			Assert.hasText(suffix, "Resource suffix must not be empty")__			String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__			String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__			ClassPathResource classPathResource = new ClassPathResource(resourcePath)__			if (classPathResource.exists()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",_							prefixedResourcePath, clazz.getName()))__				}_				return new String[] {prefixedResourcePath}__			}_			else if (logger.isDebugEnabled()) {_				logger.debug(String.format("Did not detect default resource location for test class [%s]: " +_						"%s does not exist", clazz.getName(), classPathResource))__			}_		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: " +_					"no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)))__		}__		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,code,classpath,com,example,my,test,suffix,where,code,suffix,is,the,value,of,the,first,configured,linkplain,get,resource,suffixes,resource,suffix,for,which,the,generated,location,actually,exists,in,the,classpath,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffixes;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffixes,get,resource,suffixes,for,string,suffix,suffixes,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,else,if,logger,is,debug,enabled,logger,debug,string,format,did,not,detect,default,resource,location,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,no,resource,found,for,suffixes,s,clazz,get,name,object,utils,null,safe,to,string,suffixes,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1467730834;Generate the default classpath resource locations array based on the_supplied class._<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_{@code "classpath:com/example/MyTest<suffix>"}, where {@code <suffix>}_is the value of the first configured_{@linkplain #getResourceSuffixes() resource suffix} for which the_generated location actually exists in the classpath._<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array._<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy._@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffixes();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")___		String[] suffixes = getResourceSuffixes()__		for (String suffix : suffixes) {_			Assert.hasText(suffix, "Resource suffix must not be empty")__			String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__			String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__			ClassPathResource classPathResource = new ClassPathResource(resourcePath)__			if (classPathResource.exists()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",_							prefixedResourcePath, clazz.getName()))__				}_				return new String[] {prefixedResourcePath}__			}_			else if (logger.isDebugEnabled()) {_				logger.debug(String.format("Did not detect default resource location for test class [%s]: " +_						"%s does not exist", clazz.getName(), classPathResource))__			}_		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: " +_					"no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)))__		}__		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,code,classpath,com,example,my,test,suffix,where,code,suffix,is,the,value,of,the,first,configured,linkplain,get,resource,suffixes,resource,suffix,for,which,the,generated,location,actually,exists,in,the,classpath,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffixes;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffixes,get,resource,suffixes,for,string,suffix,suffixes,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,else,if,logger,is,debug,enabled,logger,debug,string,format,did,not,detect,default,resource,location,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,no,resource,found,for,suffixes,s,clazz,get,name,object,utils,null,safe,to,string,suffixes,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1495868221;Generate the default classpath resource locations array based on the_supplied class._<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_{@code "classpath:com/example/MyTest<suffix>"}, where {@code <suffix>}_is the value of the first configured_{@linkplain #getResourceSuffixes() resource suffix} for which the_generated location actually exists in the classpath._<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array._<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy._@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffixes();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")___		String[] suffixes = getResourceSuffixes()__		for (String suffix : suffixes) {_			Assert.hasText(suffix, "Resource suffix must not be empty")__			String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__			String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__			ClassPathResource classPathResource = new ClassPathResource(resourcePath)__			if (classPathResource.exists()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",_							prefixedResourcePath, clazz.getName()))__				}_				return new String[] {prefixedResourcePath}__			}_			else if (logger.isDebugEnabled()) {_				logger.debug(String.format("Did not detect default resource location for test class [%s]: " +_						"%s does not exist", clazz.getName(), classPathResource))__			}_		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: " +_					"no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)))__		}__		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,code,classpath,com,example,my,test,suffix,where,code,suffix,is,the,value,of,the,first,configured,linkplain,get,resource,suffixes,resource,suffix,for,which,the,generated,location,actually,exists,in,the,classpath,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffixes;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffixes,get,resource,suffixes,for,string,suffix,suffixes,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,else,if,logger,is,debug,enabled,logger,debug,string,format,did,not,detect,default,resource,location,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,no,resource,found,for,suffixes,s,clazz,get,name,object,utils,null,safe,to,string,suffixes,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1496242568;Generate the default classpath resource locations array based on the_supplied class._<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_{@code "classpath:com/example/MyTest<suffix>"}, where {@code <suffix>}_is the value of the first configured_{@linkplain #getResourceSuffixes() resource suffix} for which the_generated location actually exists in the classpath._<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array._<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy._@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffixes();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")___		String[] suffixes = getResourceSuffixes()__		for (String suffix : suffixes) {_			Assert.hasText(suffix, "Resource suffix must not be empty")__			String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__			String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__			ClassPathResource classPathResource = new ClassPathResource(resourcePath)__			if (classPathResource.exists()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",_							prefixedResourcePath, clazz.getName()))__				}_				return new String[] {prefixedResourcePath}__			}_			else if (logger.isDebugEnabled()) {_				logger.debug(String.format("Did not detect default resource location for test class [%s]: " +_						"%s does not exist", clazz.getName(), classPathResource))__			}_		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: " +_					"no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)))__		}__		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,code,classpath,com,example,my,test,suffix,where,code,suffix,is,the,value,of,the,first,configured,linkplain,get,resource,suffixes,resource,suffix,for,which,the,generated,location,actually,exists,in,the,classpath,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffixes;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffixes,get,resource,suffixes,for,string,suffix,suffixes,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,else,if,logger,is,debug,enabled,logger,debug,string,format,did,not,detect,default,resource,location,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,no,resource,found,for,suffixes,s,clazz,get,name,object,utils,null,safe,to,string,suffixes,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1496955179;Generate the default classpath resource locations array based on the_supplied class._<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_{@code "classpath:com/example/MyTest<suffix>"}, where {@code <suffix>}_is the value of the first configured_{@linkplain #getResourceSuffixes() resource suffix} for which the_generated location actually exists in the classpath._<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array._<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy._@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffixes();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")___		String[] suffixes = getResourceSuffixes()__		for (String suffix : suffixes) {_			Assert.hasText(suffix, "Resource suffix must not be empty")__			String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__			String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__			ClassPathResource classPathResource = new ClassPathResource(resourcePath)__			if (classPathResource.exists()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",_							prefixedResourcePath, clazz.getName()))__				}_				return new String[] {prefixedResourcePath}__			}_			else if (logger.isDebugEnabled()) {_				logger.debug(String.format("Did not detect default resource location for test class [%s]: " +_						"%s does not exist", clazz.getName(), classPathResource))__			}_		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: " +_					"no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)))__		}__		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,code,classpath,com,example,my,test,suffix,where,code,suffix,is,the,value,of,the,first,configured,linkplain,get,resource,suffixes,resource,suffix,for,which,the,generated,location,actually,exists,in,the,classpath,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffixes;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffixes,get,resource,suffixes,for,string,suffix,suffixes,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,else,if,logger,is,debug,enabled,logger,debug,string,format,did,not,detect,default,resource,location,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,no,resource,found,for,suffixes,s,clazz,get,name,object,utils,null,safe,to,string,suffixes,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1497341594;Generate the default classpath resource locations array based on the_supplied class._<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_{@code "classpath:com/example/MyTest<suffix>"}, where {@code <suffix>}_is the value of the first configured_{@linkplain #getResourceSuffixes() resource suffix} for which the_generated location actually exists in the classpath._<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array._<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy._@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffixes();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")___		String[] suffixes = getResourceSuffixes()__		for (String suffix : suffixes) {_			Assert.hasText(suffix, "Resource suffix must not be empty")__			String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__			String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__			ClassPathResource classPathResource = new ClassPathResource(resourcePath)__			if (classPathResource.exists()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",_							prefixedResourcePath, clazz.getName()))__				}_				return new String[] {prefixedResourcePath}__			}_			else if (logger.isDebugEnabled()) {_				logger.debug(String.format("Did not detect default resource location for test class [%s]: " +_						"%s does not exist", clazz.getName(), classPathResource))__			}_		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: " +_					"no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)))__		}__		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,code,classpath,com,example,my,test,suffix,where,code,suffix,is,the,value,of,the,first,configured,linkplain,get,resource,suffixes,resource,suffix,for,which,the,generated,location,actually,exists,in,the,classpath,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffixes;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffixes,get,resource,suffixes,for,string,suffix,suffixes,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,else,if,logger,is,debug,enabled,logger,debug,string,format,did,not,detect,default,resource,location,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,no,resource,found,for,suffixes,s,clazz,get,name,object,utils,null,safe,to,string,suffixes,return
AbstractContextLoader -> protected String[] generateDefaultLocations(Class<?> clazz);1516617801;Generate the default classpath resource locations array based on the_supplied class._<p>For example, if the supplied class is {@code com.example.MyTest},_the generated locations will contain a single string with a value of_{@code "classpath:com/example/MyTest<suffix>"}, where {@code <suffix>}_is the value of the first configured_{@linkplain #getResourceSuffixes() resource suffix} for which the_generated location actually exists in the classpath._<p>As of Spring 3.1, the implementation of this method adheres to the_contract defined in the {@link SmartContextLoader} SPI. Specifically,_this method will <em>preemptively</em> verify that the generated default_location actually exists. If it does not exist, this method will log a_warning and return an empty array._<p>Subclasses can override this method to implement a different_<em>default location generation</em> strategy._@param clazz the class for which the default locations are to be generated_@return an array of default application context resource locations_@since 2.5_@see #getResourceSuffixes();protected String[] generateDefaultLocations(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")___		String[] suffixes = getResourceSuffixes()__		for (String suffix : suffixes) {_			Assert.hasText(suffix, "Resource suffix must not be empty")__			String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix__			String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__			ClassPathResource classPathResource = new ClassPathResource(resourcePath)__			if (classPathResource.exists()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",_							prefixedResourcePath, clazz.getName()))__				}_				return new String[] {prefixedResourcePath}__			}_			else if (logger.isDebugEnabled()) {_				logger.debug(String.format("Did not detect default resource location for test class [%s]: " +_						"%s does not exist", clazz.getName(), classPathResource))__			}_		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Could not detect default resource locations for test class [%s]: " +_					"no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)))__		}__		return EMPTY_STRING_ARRAY__	};generate,the,default,classpath,resource,locations,array,based,on,the,supplied,class,p,for,example,if,the,supplied,class,is,code,com,example,my,test,the,generated,locations,will,contain,a,single,string,with,a,value,of,code,classpath,com,example,my,test,suffix,where,code,suffix,is,the,value,of,the,first,configured,linkplain,get,resource,suffixes,resource,suffix,for,which,the,generated,location,actually,exists,in,the,classpath,p,as,of,spring,3,1,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,smart,context,loader,spi,specifically,this,method,will,em,preemptively,em,verify,that,the,generated,default,location,actually,exists,if,it,does,not,exist,this,method,will,log,a,warning,and,return,an,empty,array,p,subclasses,can,override,this,method,to,implement,a,different,em,default,location,generation,em,strategy,param,clazz,the,class,for,which,the,default,locations,are,to,be,generated,return,an,array,of,default,application,context,resource,locations,since,2,5,see,get,resource,suffixes;protected,string,generate,default,locations,class,clazz,assert,not,null,clazz,class,must,not,be,null,string,suffixes,get,resource,suffixes,for,string,suffix,suffixes,assert,has,text,suffix,resource,suffix,must,not,be,empty,string,resource,path,class,utils,convert,class,name,to,resource,path,clazz,get,name,suffix,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,resource,location,s,for,test,class,s,prefixed,resource,path,clazz,get,name,return,new,string,prefixed,resource,path,else,if,logger,is,debug,enabled,logger,debug,string,format,did,not,detect,default,resource,location,for,test,class,s,s,does,not,exist,clazz,get,name,class,path,resource,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,resource,locations,for,test,class,s,no,resource,found,for,suffixes,s,clazz,get,name,object,utils,null,safe,to,string,suffixes,return
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, @Nullable String... locations);1495868221;If the supplied {@code locations} are {@code null} or <em>empty</em>_and {@link #isGenerateDefaultLocations()} returns {@code true},_default locations will be {@link #generateDefaultLocations(Class)_generated} (i.e., detected) for the specified {@link Class class}_and the configured {@linkplain #getResourceSuffixes() resource suffixes}__otherwise, the supplied {@code locations} will be_{@linkplain #modifyLocations modified} if necessary and returned._@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, @Nullable String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ?_				generateDefaultLocations(clazz) : modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,i,e,detected,for,the,specified,link,class,class,and,the,configured,linkplain,get,resource,suffixes,resource,suffixes,otherwise,the,supplied,code,locations,will,be,linkplain,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,nullable,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, @Nullable String... locations);1496242568;If the supplied {@code locations} are {@code null} or <em>empty</em>_and {@link #isGenerateDefaultLocations()} returns {@code true},_default locations will be {@link #generateDefaultLocations(Class)_generated} (i.e., detected) for the specified {@link Class class}_and the configured {@linkplain #getResourceSuffixes() resource suffixes}__otherwise, the supplied {@code locations} will be_{@linkplain #modifyLocations modified} if necessary and returned._@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, @Nullable String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ?_				generateDefaultLocations(clazz) : modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,i,e,detected,for,the,specified,link,class,class,and,the,configured,linkplain,get,resource,suffixes,resource,suffixes,otherwise,the,supplied,code,locations,will,be,linkplain,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,nullable,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1328020251;Get the suffix to append to {@link ApplicationContext} resource_locations when generating default locations._<p>Must be implemented by subclasses._@return the resource suffix_ should not be <code>null</code> or empty_@since 2.5_@see #generateDefaultLocations();protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,generating,default,locations,p,must,be,implemented,by,subclasses,return,the,resource,suffix,should,not,be,code,null,code,or,empty,since,2,5,see,generate,default,locations;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1335774711;Get the suffix to append to {@link ApplicationContext} resource_locations when generating default locations._<p>Must be implemented by subclasses._@return the resource suffix_ should not be <code>null</code> or empty_@since 2.5_@see #generateDefaultLocations(Class);protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,generating,default,locations,p,must,be,implemented,by,subclasses,return,the,resource,suffix,should,not,be,code,null,code,or,empty,since,2,5,see,generate,default,locations,class;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1337278668;Get the suffix to append to {@link ApplicationContext} resource locations_when generating default locations.__<p>Must be implemented by subclasses.__@return the resource suffix_ should not be <code>null</code> or empty_@since 2.5_@see #generateDefaultLocations(Class);protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,generating,default,locations,p,must,be,implemented,by,subclasses,return,the,resource,suffix,should,not,be,code,null,code,or,empty,since,2,5,see,generate,default,locations,class;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1349648958;Get the suffix to append to {@link ApplicationContext} resource locations_when generating default locations.__<p>Must be implemented by subclasses.__@return the resource suffix_ should not be <code>null</code> or empty_@since 2.5_@see #generateDefaultLocations(Class);protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,generating,default,locations,p,must,be,implemented,by,subclasses,return,the,resource,suffix,should,not,be,code,null,code,or,empty,since,2,5,see,generate,default,locations,class;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1356735495;Get the suffix to append to {@link ApplicationContext} resource locations_when generating default locations.__<p>Must be implemented by subclasses.__@return the resource suffix_ should not be {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class);protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,generating,default,locations,p,must,be,implemented,by,subclasses,return,the,resource,suffix,should,not,be,code,null,or,empty,since,2,5,see,generate,default,locations,class;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1357119239;Get the suffix to append to {@link ApplicationContext} resource locations_when generating default locations.__<p>Must be implemented by subclasses.__@return the resource suffix_ should not be {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class);protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,generating,default,locations,p,must,be,implemented,by,subclasses,return,the,resource,suffix,should,not,be,code,null,or,empty,since,2,5,see,generate,default,locations,class;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1362408075;Get the suffix to append to {@link ApplicationContext} resource locations_when generating default locations.__<p>Must be implemented by subclasses.__@return the resource suffix_ should not be {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class);protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,generating,default,locations,p,must,be,implemented,by,subclasses,return,the,resource,suffix,should,not,be,code,null,or,empty,since,2,5,see,generate,default,locations,class;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1368482696;Get the suffix to append to {@link ApplicationContext} resource locations_when generating default locations.__<p>Must be implemented by subclasses.__@return the resource suffix_ should not be {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class);protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,generating,default,locations,p,must,be,implemented,by,subclasses,return,the,resource,suffix,should,not,be,code,null,or,empty,since,2,5,see,generate,default,locations,class;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1384955459;Get the suffix to append to {@link ApplicationContext} resource locations_when generating default locations.__<p>Must be implemented by subclasses.__@return the resource suffix_ should not be {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class);protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,generating,default,locations,p,must,be,implemented,by,subclasses,return,the,resource,suffix,should,not,be,code,null,or,empty,since,2,5,see,generate,default,locations,class;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1389822826;Get the suffix to append to {@link ApplicationContext} resource locations_when generating default locations._<p>Must be implemented by subclasses._@return the resource suffix_ should not be {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class);protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,generating,default,locations,p,must,be,implemented,by,subclasses,return,the,resource,suffix,should,not,be,code,null,or,empty,since,2,5,see,generate,default,locations,class;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1401991965;Get the suffix to append to {@link ApplicationContext} resource locations_when generating default locations._<p>Must be implemented by subclasses._@return the resource suffix_ should not be {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class);protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,generating,default,locations,p,must,be,implemented,by,subclasses,return,the,resource,suffix,should,not,be,code,null,or,empty,since,2,5,see,generate,default,locations,class;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1406214559;Get the suffix to append to {@link ApplicationContext} resource_locations when detecting default locations.__<p>Subclasses must provide an implementation of this method that_returns a single suffix. Alternatively subclasses may provide a_<em>no-op</em> implementation of this method and override_{@link #getResourceSuffixes()} in order to provide multiple custom_suffixes.__@return the resource suffix_ never {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class)_@see #getResourceSuffixes();protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,subclasses,must,provide,an,implementation,of,this,method,that,returns,a,single,suffix,alternatively,subclasses,may,provide,a,em,no,op,em,implementation,of,this,method,and,override,link,get,resource,suffixes,in,order,to,provide,multiple,custom,suffixes,return,the,resource,suffix,never,code,null,or,empty,since,2,5,see,generate,default,locations,class,see,get,resource,suffixes;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1407967503;Get the suffix to append to {@link ApplicationContext} resource_locations when detecting default locations.__<p>Subclasses must provide an implementation of this method that_returns a single suffix. Alternatively subclasses may provide a_<em>no-op</em> implementation of this method and override_{@link #getResourceSuffixes()} in order to provide multiple custom_suffixes.__@return the resource suffix_ never {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class)_@see #getResourceSuffixes();protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,subclasses,must,provide,an,implementation,of,this,method,that,returns,a,single,suffix,alternatively,subclasses,may,provide,a,em,no,op,em,implementation,of,this,method,and,override,link,get,resource,suffixes,in,order,to,provide,multiple,custom,suffixes,return,the,resource,suffix,never,code,null,or,empty,since,2,5,see,generate,default,locations,class,see,get,resource,suffixes;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1413848647;Get the suffix to append to {@link ApplicationContext} resource_locations when detecting default locations.__<p>Subclasses must provide an implementation of this method that_returns a single suffix. Alternatively subclasses may provide a_<em>no-op</em> implementation of this method and override_{@link #getResourceSuffixes()} in order to provide multiple custom_suffixes.__@return the resource suffix_ never {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class)_@see #getResourceSuffixes();protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,subclasses,must,provide,an,implementation,of,this,method,that,returns,a,single,suffix,alternatively,subclasses,may,provide,a,em,no,op,em,implementation,of,this,method,and,override,link,get,resource,suffixes,in,order,to,provide,multiple,custom,suffixes,return,the,resource,suffix,never,code,null,or,empty,since,2,5,see,generate,default,locations,class,see,get,resource,suffixes;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1424114809;Get the suffix to append to {@link ApplicationContext} resource_locations when detecting default locations.__<p>Subclasses must provide an implementation of this method that_returns a single suffix. Alternatively subclasses may provide a_<em>no-op</em> implementation of this method and override_{@link #getResourceSuffixes()} in order to provide multiple custom_suffixes.__@return the resource suffix_ never {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class)_@see #getResourceSuffixes();protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,subclasses,must,provide,an,implementation,of,this,method,that,returns,a,single,suffix,alternatively,subclasses,may,provide,a,em,no,op,em,implementation,of,this,method,and,override,link,get,resource,suffixes,in,order,to,provide,multiple,custom,suffixes,return,the,resource,suffix,never,code,null,or,empty,since,2,5,see,generate,default,locations,class,see,get,resource,suffixes;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1424138964;Get the suffix to append to {@link ApplicationContext} resource_locations when detecting default locations.__<p>Subclasses must provide an implementation of this method that_returns a single suffix. Alternatively subclasses may provide a_<em>no-op</em> implementation of this method and override_{@link #getResourceSuffixes()} in order to provide multiple custom_suffixes.__@return the resource suffix_ never {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class)_@see #getResourceSuffixes();protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,subclasses,must,provide,an,implementation,of,this,method,that,returns,a,single,suffix,alternatively,subclasses,may,provide,a,em,no,op,em,implementation,of,this,method,and,override,link,get,resource,suffixes,in,order,to,provide,multiple,custom,suffixes,return,the,resource,suffix,never,code,null,or,empty,since,2,5,see,generate,default,locations,class,see,get,resource,suffixes;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1456332614;Get the suffix to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>Subclasses must provide an implementation of this method that returns_a single suffix. Alternatively subclasses may provide a  <em>no-op</em>_implementation of this method and override {@link #getResourceSuffixes()}_in order to provide multiple custom suffixes._@return the resource suffix_ never {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class)_@see #getResourceSuffixes();protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,subclasses,must,provide,an,implementation,of,this,method,that,returns,a,single,suffix,alternatively,subclasses,may,provide,a,em,no,op,em,implementation,of,this,method,and,override,link,get,resource,suffixes,in,order,to,provide,multiple,custom,suffixes,return,the,resource,suffix,never,code,null,or,empty,since,2,5,see,generate,default,locations,class,see,get,resource,suffixes;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1457447255;Get the suffix to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>Subclasses must provide an implementation of this method that returns_a single suffix. Alternatively subclasses may provide a  <em>no-op</em>_implementation of this method and override {@link #getResourceSuffixes()}_in order to provide multiple custom suffixes._@return the resource suffix_ never {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class)_@see #getResourceSuffixes();protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,subclasses,must,provide,an,implementation,of,this,method,that,returns,a,single,suffix,alternatively,subclasses,may,provide,a,em,no,op,em,implementation,of,this,method,and,override,link,get,resource,suffixes,in,order,to,provide,multiple,custom,suffixes,return,the,resource,suffix,never,code,null,or,empty,since,2,5,see,generate,default,locations,class,see,get,resource,suffixes;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1457727806;Get the suffix to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>Subclasses must provide an implementation of this method that returns_a single suffix. Alternatively subclasses may provide a  <em>no-op</em>_implementation of this method and override {@link #getResourceSuffixes()}_in order to provide multiple custom suffixes._@return the resource suffix_ never {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class)_@see #getResourceSuffixes();protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,subclasses,must,provide,an,implementation,of,this,method,that,returns,a,single,suffix,alternatively,subclasses,may,provide,a,em,no,op,em,implementation,of,this,method,and,override,link,get,resource,suffixes,in,order,to,provide,multiple,custom,suffixes,return,the,resource,suffix,never,code,null,or,empty,since,2,5,see,generate,default,locations,class,see,get,resource,suffixes;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1467730834;Get the suffix to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>Subclasses must provide an implementation of this method that returns_a single suffix. Alternatively subclasses may provide a  <em>no-op</em>_implementation of this method and override {@link #getResourceSuffixes()}_in order to provide multiple custom suffixes._@return the resource suffix_ never {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class)_@see #getResourceSuffixes();protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,subclasses,must,provide,an,implementation,of,this,method,that,returns,a,single,suffix,alternatively,subclasses,may,provide,a,em,no,op,em,implementation,of,this,method,and,override,link,get,resource,suffixes,in,order,to,provide,multiple,custom,suffixes,return,the,resource,suffix,never,code,null,or,empty,since,2,5,see,generate,default,locations,class,see,get,resource,suffixes;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1495868221;Get the suffix to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>Subclasses must provide an implementation of this method that returns_a single suffix. Alternatively subclasses may provide a  <em>no-op</em>_implementation of this method and override {@link #getResourceSuffixes()}_in order to provide multiple custom suffixes._@return the resource suffix_ never {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class)_@see #getResourceSuffixes();protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,subclasses,must,provide,an,implementation,of,this,method,that,returns,a,single,suffix,alternatively,subclasses,may,provide,a,em,no,op,em,implementation,of,this,method,and,override,link,get,resource,suffixes,in,order,to,provide,multiple,custom,suffixes,return,the,resource,suffix,never,code,null,or,empty,since,2,5,see,generate,default,locations,class,see,get,resource,suffixes;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1496242568;Get the suffix to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>Subclasses must provide an implementation of this method that returns_a single suffix. Alternatively subclasses may provide a  <em>no-op</em>_implementation of this method and override {@link #getResourceSuffixes()}_in order to provide multiple custom suffixes._@return the resource suffix_ never {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class)_@see #getResourceSuffixes();protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,subclasses,must,provide,an,implementation,of,this,method,that,returns,a,single,suffix,alternatively,subclasses,may,provide,a,em,no,op,em,implementation,of,this,method,and,override,link,get,resource,suffixes,in,order,to,provide,multiple,custom,suffixes,return,the,resource,suffix,never,code,null,or,empty,since,2,5,see,generate,default,locations,class,see,get,resource,suffixes;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1496955179;Get the suffix to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>Subclasses must provide an implementation of this method that returns_a single suffix. Alternatively subclasses may provide a  <em>no-op</em>_implementation of this method and override {@link #getResourceSuffixes()}_in order to provide multiple custom suffixes._@return the resource suffix_ never {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class)_@see #getResourceSuffixes();protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,subclasses,must,provide,an,implementation,of,this,method,that,returns,a,single,suffix,alternatively,subclasses,may,provide,a,em,no,op,em,implementation,of,this,method,and,override,link,get,resource,suffixes,in,order,to,provide,multiple,custom,suffixes,return,the,resource,suffix,never,code,null,or,empty,since,2,5,see,generate,default,locations,class,see,get,resource,suffixes;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1497341594;Get the suffix to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>Subclasses must provide an implementation of this method that returns_a single suffix. Alternatively subclasses may provide a  <em>no-op</em>_implementation of this method and override {@link #getResourceSuffixes()}_in order to provide multiple custom suffixes._@return the resource suffix_ never {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class)_@see #getResourceSuffixes();protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,subclasses,must,provide,an,implementation,of,this,method,that,returns,a,single,suffix,alternatively,subclasses,may,provide,a,em,no,op,em,implementation,of,this,method,and,override,link,get,resource,suffixes,in,order,to,provide,multiple,custom,suffixes,return,the,resource,suffix,never,code,null,or,empty,since,2,5,see,generate,default,locations,class,see,get,resource,suffixes;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected abstract String getResourceSuffix()_;1516617801;Get the suffix to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>Subclasses must provide an implementation of this method that returns_a single suffix. Alternatively subclasses may provide a  <em>no-op</em>_implementation of this method and override {@link #getResourceSuffixes()}_in order to provide multiple custom suffixes._@return the resource suffix_ never {@code null} or empty_@since 2.5_@see #generateDefaultLocations(Class)_@see #getResourceSuffixes();protected abstract String getResourceSuffix()_;get,the,suffix,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,subclasses,must,provide,an,implementation,of,this,method,that,returns,a,single,suffix,alternatively,subclasses,may,provide,a,em,no,op,em,implementation,of,this,method,and,override,link,get,resource,suffixes,in,order,to,provide,multiple,custom,suffixes,return,the,resource,suffix,never,code,null,or,empty,since,2,5,see,generate,default,locations,class,see,get,resource,suffixes;protected,abstract,string,get,resource,suffix
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1328020251;Determine whether or not <em>default</em> resource locations should be_generated if the <code>locations</code> provided to_{@link #processLocations()} are <code>null</code> or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the <code>classes</code> present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration()} are <code>null</code> or empty._<p>Can be overridden by subclasses to change the default behavior._@return always <code>true</code> by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,code,provided,to,link,process,locations,are,code,null,code,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,code,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,are,code,null,code,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,code,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1335774711;Determine whether or not <em>default</em> resource locations should be_generated if the <code>locations</code> provided to_{@link #processLocations(Class, String...)} are <code>null</code> or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the <code>classes</code> present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are <code>null</code> or empty._<p>Can be overridden by subclasses to change the default behavior._@return always <code>true</code> by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,code,provided,to,link,process,locations,class,string,are,code,null,code,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,code,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,code,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,code,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1337278668;Determine whether or not <em>default</em> resource locations should be_generated if the <code>locations</code> provided to_{@link #processLocations(Class, String...)} are <code>null</code> or empty.__<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the <code>classes</code> present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are <code>null</code> or empty.__<p>Can be overridden by subclasses to change the default behavior.__@return always <code>true</code> by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,code,provided,to,link,process,locations,class,string,are,code,null,code,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,code,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,code,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,code,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1349648958;Determine whether or not <em>default</em> resource locations should be_generated if the <code>locations</code> provided to_{@link #processLocations(Class, String...)} are <code>null</code> or empty.__<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the <code>classes</code> present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are <code>null</code> or empty.__<p>Can be overridden by subclasses to change the default behavior.__@return always <code>true</code> by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,code,provided,to,link,process,locations,class,string,are,code,null,code,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,code,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,code,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,code,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1356735495;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty.__<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty.__<p>Can be overridden by subclasses to change the default behavior.__@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1357119239;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty.__<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty.__<p>Can be overridden by subclasses to change the default behavior.__@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1362408075;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty.__<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty.__<p>Can be overridden by subclasses to change the default behavior.__@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1368482696;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty.__<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty.__<p>Can be overridden by subclasses to change the default behavior.__@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1384955459;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty.__<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty.__<p>Can be overridden by subclasses to change the default behavior.__@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1389822826;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty._<p>Can be overridden by subclasses to change the default behavior._@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1401991965;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty._<p>Can be overridden by subclasses to change the default behavior._@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1406214559;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty._<p>Can be overridden by subclasses to change the default behavior._@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1407967503;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty._<p>Can be overridden by subclasses to change the default behavior._@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1413848647;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty._<p>Can be overridden by subclasses to change the default behavior._@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1424114809;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty._<p>Can be overridden by subclasses to change the default behavior._@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1424138964;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty._<p>Can be overridden by subclasses to change the default behavior._@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1456332614;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty._<p>Can be overridden by subclasses to change the default behavior._@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1457447255;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty._<p>Can be overridden by subclasses to change the default behavior._@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1457727806;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty._<p>Can be overridden by subclasses to change the default behavior._@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1467730834;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty._<p>Can be overridden by subclasses to change the default behavior._@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1495868221;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty._<p>Can be overridden by subclasses to change the default behavior._@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1496242568;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty._<p>Can be overridden by subclasses to change the default behavior._@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1496955179;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty._<p>Can be overridden by subclasses to change the default behavior._@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1497341594;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty._<p>Can be overridden by subclasses to change the default behavior._@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> protected boolean isGenerateDefaultLocations();1516617801;Determine whether or not <em>default</em> resource locations should be_generated if the {@code locations} provided to_{@link #processLocations(Class, String...)} are {@code null} or empty._<p>As of Spring 3.1, the semantics of this method have been overloaded_to include detection of either default resource locations or default_configuration classes. Consequently, this method can also be used to_determine whether or not <em>default</em> configuration classes should be_detected if the {@code classes} present in the_{@link ContextConfigurationAttributes configuration attributes} supplied_to {@link #processContextConfiguration(ContextConfigurationAttributes)}_are {@code null} or empty._<p>Can be overridden by subclasses to change the default behavior._@return always {@code true} by default_@since 2.5;protected boolean isGenerateDefaultLocations() {_		return true__	};determine,whether,or,not,em,default,em,resource,locations,should,be,generated,if,the,code,locations,provided,to,link,process,locations,class,string,are,code,null,or,empty,p,as,of,spring,3,1,the,semantics,of,this,method,have,been,overloaded,to,include,detection,of,either,default,resource,locations,or,default,configuration,classes,consequently,this,method,can,also,be,used,to,determine,whether,or,not,em,default,em,configuration,classes,should,be,detected,if,the,code,classes,present,in,the,link,context,configuration,attributes,configuration,attributes,supplied,to,link,process,context,configuration,context,configuration,attributes,are,code,null,or,empty,p,can,be,overridden,by,subclasses,to,change,the,default,behavior,return,always,code,true,by,default,since,2,5;protected,boolean,is,generate,default,locations,return,true
AbstractContextLoader -> public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1328020251;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations()},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes._<p>Can be overridden in subclasses &mdash_ for example, to process_configuration classes instead of resource locations._@since 3.1_@see #processLocations();public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(),_			configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,configuration,classes,instead,of,resource,locations,since,3,1,see,process,locations;public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1335774711;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes._<p>Can be overridden in subclasses &mdash_ for example, to process_configuration classes instead of resource locations._@since 3.1_@see #processLocations(Class, String...);public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(),_			configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,configuration,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1337278668;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes.__<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations.__@since 3.1_@see #processLocations(Class, String...);public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(),_			configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1349648958;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes.__<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations.__@since 3.1_@see #processLocations(Class, String...);public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(),_			configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1357119239;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes.__<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations.__@since 3.1_@see #processLocations(Class, String...);public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(),_			configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1362408075;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes.__<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations.__@since 3.1_@see #processLocations(Class, String...);public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(),_			configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1328020251;Generate a modified version of the supplied locations array and return it._<p>A plain path &mdash_ for example, &quot_context.xml&quot_ &mdash_ will_be treated as a classpath resource that is relative to the package in which_the specified class is defined. A path starting with a slash is treated_as an absolute classpath location, for example:_&quot_/org/springframework/whatever/foo.xml&quot_. A path which_references a URL (e.g., a path prefixed with_{@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link ResourceUtils#FILE_URL_PREFIX file:}, <code>http:</code>,_etc.) will be added to the results unchanged._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		String[] modifiedLocations = new String[locations.length]__		for (int i = 0_ i < locations.length_ i++) {_			String path = locations[i]__			if (path.startsWith(SLASH)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path__			}_			else if (!ResourcePatternUtils.isUrl(path)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH_						+ StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path)__			}_			else {_				modifiedLocations[i] = StringUtils.cleanPath(path)__			}_		}_		return modifiedLocations__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,a,plain,path,mdash,for,example,quot,context,xml,quot,mdash,will,be,treated,as,a,classpath,resource,that,is,relative,to,the,package,in,which,the,specified,class,is,defined,a,path,starting,with,a,slash,is,treated,as,an,absolute,classpath,location,for,example,quot,org,springframework,whatever,foo,xml,quot,a,path,which,references,a,url,e,g,a,path,prefixed,with,link,resource,utils,classpath,link,resource,utils,file,code,http,code,etc,will,be,added,to,the,results,unchanged,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,string,modified,locations,new,string,locations,length,for,int,i,0,i,locations,length,i,string,path,locations,i,if,path,starts,with,slash,modified,locations,i,resource,utils,path,else,if,resource,pattern,utils,is,url,path,modified,locations,i,resource,utils,slash,string,utils,clean,path,class,utils,class,package,as,resource,path,clazz,slash,path,else,modified,locations,i,string,utils,clean,path,path,return,modified,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1335774711;Generate a modified version of the supplied locations array and return it._<p>A plain path &mdash_ for example, &quot_context.xml&quot_ &mdash_ will_be treated as a classpath resource that is relative to the package in which_the specified class is defined. A path starting with a slash is treated_as an absolute classpath location, for example:_&quot_/org/springframework/whatever/foo.xml&quot_. A path which_references a URL (e.g., a path prefixed with_{@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link ResourceUtils#FILE_URL_PREFIX file:}, <code>http:</code>,_etc.) will be added to the results unchanged._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		String[] modifiedLocations = new String[locations.length]__		for (int i = 0_ i < locations.length_ i++) {_			String path = locations[i]__			if (path.startsWith(SLASH)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path__			}_			else if (!ResourcePatternUtils.isUrl(path)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH_						+ StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path)__			}_			else {_				modifiedLocations[i] = StringUtils.cleanPath(path)__			}_		}_		return modifiedLocations__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,a,plain,path,mdash,for,example,quot,context,xml,quot,mdash,will,be,treated,as,a,classpath,resource,that,is,relative,to,the,package,in,which,the,specified,class,is,defined,a,path,starting,with,a,slash,is,treated,as,an,absolute,classpath,location,for,example,quot,org,springframework,whatever,foo,xml,quot,a,path,which,references,a,url,e,g,a,path,prefixed,with,link,resource,utils,classpath,link,resource,utils,file,code,http,code,etc,will,be,added,to,the,results,unchanged,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,string,modified,locations,new,string,locations,length,for,int,i,0,i,locations,length,i,string,path,locations,i,if,path,starts,with,slash,modified,locations,i,resource,utils,path,else,if,resource,pattern,utils,is,url,path,modified,locations,i,resource,utils,slash,string,utils,clean,path,class,utils,class,package,as,resource,path,clazz,slash,path,else,modified,locations,i,string,utils,clean,path,path,return,modified,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1337278668;Generate a modified version of the supplied locations array and return it.__<p>A plain path &mdash_ for example, &quot_context.xml&quot_ &mdash_ will_be treated as a classpath resource that is relative to the package in which_the specified class is defined. A path starting with a slash is treated_as an absolute classpath location, for example:_&quot_/org/springframework/whatever/foo.xml&quot_. A path which_references a URL (e.g., a path prefixed with_{@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link ResourceUtils#FILE_URL_PREFIX file:}, <code>http:</code>,_etc.) will be added to the results unchanged.__<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy.__@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		String[] modifiedLocations = new String[locations.length]__		for (int i = 0_ i < locations.length_ i++) {_			String path = locations[i]__			if (path.startsWith(SLASH)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path__			}_			else if (!ResourcePatternUtils.isUrl(path)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH_						+ StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path)__			}_			else {_				modifiedLocations[i] = StringUtils.cleanPath(path)__			}_		}_		return modifiedLocations__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,a,plain,path,mdash,for,example,quot,context,xml,quot,mdash,will,be,treated,as,a,classpath,resource,that,is,relative,to,the,package,in,which,the,specified,class,is,defined,a,path,starting,with,a,slash,is,treated,as,an,absolute,classpath,location,for,example,quot,org,springframework,whatever,foo,xml,quot,a,path,which,references,a,url,e,g,a,path,prefixed,with,link,resource,utils,classpath,link,resource,utils,file,code,http,code,etc,will,be,added,to,the,results,unchanged,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,string,modified,locations,new,string,locations,length,for,int,i,0,i,locations,length,i,string,path,locations,i,if,path,starts,with,slash,modified,locations,i,resource,utils,path,else,if,resource,pattern,utils,is,url,path,modified,locations,i,resource,utils,slash,string,utils,clean,path,class,utils,class,package,as,resource,path,clazz,slash,path,else,modified,locations,i,string,utils,clean,path,path,return,modified,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1349648958;Generate a modified version of the supplied locations array and return it.__<p>A plain path &mdash_ for example, &quot_context.xml&quot_ &mdash_ will_be treated as a classpath resource that is relative to the package in which_the specified class is defined. A path starting with a slash is treated_as an absolute classpath location, for example:_&quot_/org/springframework/whatever/foo.xml&quot_. A path which_references a URL (e.g., a path prefixed with_{@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link ResourceUtils#FILE_URL_PREFIX file:}, <code>http:</code>,_etc.) will be added to the results unchanged.__<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy.__@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		String[] modifiedLocations = new String[locations.length]__		for (int i = 0_ i < locations.length_ i++) {_			String path = locations[i]__			if (path.startsWith(SLASH)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path__			} else if (!ResourcePatternUtils.isUrl(path)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH_						+ StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path)__			} else {_				modifiedLocations[i] = StringUtils.cleanPath(path)__			}_		}_		return modifiedLocations__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,a,plain,path,mdash,for,example,quot,context,xml,quot,mdash,will,be,treated,as,a,classpath,resource,that,is,relative,to,the,package,in,which,the,specified,class,is,defined,a,path,starting,with,a,slash,is,treated,as,an,absolute,classpath,location,for,example,quot,org,springframework,whatever,foo,xml,quot,a,path,which,references,a,url,e,g,a,path,prefixed,with,link,resource,utils,classpath,link,resource,utils,file,code,http,code,etc,will,be,added,to,the,results,unchanged,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,string,modified,locations,new,string,locations,length,for,int,i,0,i,locations,length,i,string,path,locations,i,if,path,starts,with,slash,modified,locations,i,resource,utils,path,else,if,resource,pattern,utils,is,url,path,modified,locations,i,resource,utils,slash,string,utils,clean,path,class,utils,class,package,as,resource,path,clazz,slash,path,else,modified,locations,i,string,utils,clean,path,path,return,modified,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1356735495;Generate a modified version of the supplied locations array and return it.__<p>A plain path &mdash_ for example, &quot_context.xml&quot_ &mdash_ will_be treated as a classpath resource that is relative to the package in which_the specified class is defined. A path starting with a slash is treated_as an absolute classpath location, for example:_&quot_/org/springframework/whatever/foo.xml&quot_. A path which_references a URL (e.g., a path prefixed with_{@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link ResourceUtils#FILE_URL_PREFIX file:}, {@code http:},_etc.) will be added to the results unchanged.__<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy.__@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		String[] modifiedLocations = new String[locations.length]__		for (int i = 0_ i < locations.length_ i++) {_			String path = locations[i]__			if (path.startsWith(SLASH)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path__			} else if (!ResourcePatternUtils.isUrl(path)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH_						+ StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path)__			} else {_				modifiedLocations[i] = StringUtils.cleanPath(path)__			}_		}_		return modifiedLocations__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,a,plain,path,mdash,for,example,quot,context,xml,quot,mdash,will,be,treated,as,a,classpath,resource,that,is,relative,to,the,package,in,which,the,specified,class,is,defined,a,path,starting,with,a,slash,is,treated,as,an,absolute,classpath,location,for,example,quot,org,springframework,whatever,foo,xml,quot,a,path,which,references,a,url,e,g,a,path,prefixed,with,link,resource,utils,classpath,link,resource,utils,file,code,http,etc,will,be,added,to,the,results,unchanged,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,string,modified,locations,new,string,locations,length,for,int,i,0,i,locations,length,i,string,path,locations,i,if,path,starts,with,slash,modified,locations,i,resource,utils,path,else,if,resource,pattern,utils,is,url,path,modified,locations,i,resource,utils,slash,string,utils,clean,path,class,utils,class,package,as,resource,path,clazz,slash,path,else,modified,locations,i,string,utils,clean,path,path,return,modified,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1357119239;Generate a modified version of the supplied locations array and return it.__<p>A plain path &mdash_ for example, &quot_context.xml&quot_ &mdash_ will_be treated as a classpath resource that is relative to the package in which_the specified class is defined. A path starting with a slash is treated_as an absolute classpath location, for example:_&quot_/org/springframework/whatever/foo.xml&quot_. A path which_references a URL (e.g., a path prefixed with_{@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link ResourceUtils#FILE_URL_PREFIX file:}, {@code http:},_etc.) will be added to the results unchanged.__<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy.__@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		String[] modifiedLocations = new String[locations.length]__		for (int i = 0_ i < locations.length_ i++) {_			String path = locations[i]__			if (path.startsWith(SLASH)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path__			} else if (!ResourcePatternUtils.isUrl(path)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH_						+ StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path)__			} else {_				modifiedLocations[i] = StringUtils.cleanPath(path)__			}_		}_		return modifiedLocations__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,a,plain,path,mdash,for,example,quot,context,xml,quot,mdash,will,be,treated,as,a,classpath,resource,that,is,relative,to,the,package,in,which,the,specified,class,is,defined,a,path,starting,with,a,slash,is,treated,as,an,absolute,classpath,location,for,example,quot,org,springframework,whatever,foo,xml,quot,a,path,which,references,a,url,e,g,a,path,prefixed,with,link,resource,utils,classpath,link,resource,utils,file,code,http,etc,will,be,added,to,the,results,unchanged,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,string,modified,locations,new,string,locations,length,for,int,i,0,i,locations,length,i,string,path,locations,i,if,path,starts,with,slash,modified,locations,i,resource,utils,path,else,if,resource,pattern,utils,is,url,path,modified,locations,i,resource,utils,slash,string,utils,clean,path,class,utils,class,package,as,resource,path,clazz,slash,path,else,modified,locations,i,string,utils,clean,path,path,return,modified,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1362408075;Generate a modified version of the supplied locations array and return it.__<p>A plain path &mdash_ for example, &quot_context.xml&quot_ &mdash_ will_be treated as a classpath resource that is relative to the package in which_the specified class is defined. A path starting with a slash is treated_as an absolute classpath location, for example:_&quot_/org/springframework/whatever/foo.xml&quot_. A path which_references a URL (e.g., a path prefixed with_{@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link ResourceUtils#FILE_URL_PREFIX file:}, {@code http:},_etc.) will be added to the results unchanged.__<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy.__@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		String[] modifiedLocations = new String[locations.length]__		for (int i = 0_ i < locations.length_ i++) {_			String path = locations[i]__			if (path.startsWith(SLASH)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path__			} else if (!ResourcePatternUtils.isUrl(path)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH_						+ StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path)__			} else {_				modifiedLocations[i] = StringUtils.cleanPath(path)__			}_		}_		return modifiedLocations__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,a,plain,path,mdash,for,example,quot,context,xml,quot,mdash,will,be,treated,as,a,classpath,resource,that,is,relative,to,the,package,in,which,the,specified,class,is,defined,a,path,starting,with,a,slash,is,treated,as,an,absolute,classpath,location,for,example,quot,org,springframework,whatever,foo,xml,quot,a,path,which,references,a,url,e,g,a,path,prefixed,with,link,resource,utils,classpath,link,resource,utils,file,code,http,etc,will,be,added,to,the,results,unchanged,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,string,modified,locations,new,string,locations,length,for,int,i,0,i,locations,length,i,string,path,locations,i,if,path,starts,with,slash,modified,locations,i,resource,utils,path,else,if,resource,pattern,utils,is,url,path,modified,locations,i,resource,utils,slash,string,utils,clean,path,class,utils,class,package,as,resource,path,clazz,slash,path,else,modified,locations,i,string,utils,clean,path,path,return,modified,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1368482696;Generate a modified version of the supplied locations array and return it.__<p>A plain path &mdash_ for example, &quot_context.xml&quot_ &mdash_ will_be treated as a classpath resource that is relative to the package in which_the specified class is defined. A path starting with a slash is treated_as an absolute classpath location, for example:_&quot_/org/springframework/whatever/foo.xml&quot_. A path which_references a URL (e.g., a path prefixed with_{@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link ResourceUtils#FILE_URL_PREFIX file:}, {@code http:},_etc.) will be added to the results unchanged.__<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy.__@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		String[] modifiedLocations = new String[locations.length]__		for (int i = 0_ i < locations.length_ i++) {_			String path = locations[i]__			if (path.startsWith(SLASH)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path__			} else if (!ResourcePatternUtils.isUrl(path)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH_						+ StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path)__			} else {_				modifiedLocations[i] = StringUtils.cleanPath(path)__			}_		}_		return modifiedLocations__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,a,plain,path,mdash,for,example,quot,context,xml,quot,mdash,will,be,treated,as,a,classpath,resource,that,is,relative,to,the,package,in,which,the,specified,class,is,defined,a,path,starting,with,a,slash,is,treated,as,an,absolute,classpath,location,for,example,quot,org,springframework,whatever,foo,xml,quot,a,path,which,references,a,url,e,g,a,path,prefixed,with,link,resource,utils,classpath,link,resource,utils,file,code,http,etc,will,be,added,to,the,results,unchanged,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,string,modified,locations,new,string,locations,length,for,int,i,0,i,locations,length,i,string,path,locations,i,if,path,starts,with,slash,modified,locations,i,resource,utils,path,else,if,resource,pattern,utils,is,url,path,modified,locations,i,resource,utils,slash,string,utils,clean,path,class,utils,class,package,as,resource,path,clazz,slash,path,else,modified,locations,i,string,utils,clean,path,path,return,modified,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1384955459;Generate a modified version of the supplied locations array and return it.__<p>A plain path &mdash_ for example, &quot_context.xml&quot_ &mdash_ will_be treated as a classpath resource that is relative to the package in which_the specified class is defined. A path starting with a slash is treated_as an absolute classpath location, for example:_&quot_/org/springframework/whatever/foo.xml&quot_. A path which_references a URL (e.g., a path prefixed with_{@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link ResourceUtils#FILE_URL_PREFIX file:}, {@code http:},_etc.) will be added to the results unchanged.__<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy.__@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		String[] modifiedLocations = new String[locations.length]__		for (int i = 0_ i < locations.length_ i++) {_			String path = locations[i]__			if (path.startsWith(SLASH)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path__			} else if (!ResourcePatternUtils.isUrl(path)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH_						+ StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path)__			} else {_				modifiedLocations[i] = StringUtils.cleanPath(path)__			}_		}_		return modifiedLocations__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,a,plain,path,mdash,for,example,quot,context,xml,quot,mdash,will,be,treated,as,a,classpath,resource,that,is,relative,to,the,package,in,which,the,specified,class,is,defined,a,path,starting,with,a,slash,is,treated,as,an,absolute,classpath,location,for,example,quot,org,springframework,whatever,foo,xml,quot,a,path,which,references,a,url,e,g,a,path,prefixed,with,link,resource,utils,classpath,link,resource,utils,file,code,http,etc,will,be,added,to,the,results,unchanged,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,string,modified,locations,new,string,locations,length,for,int,i,0,i,locations,length,i,string,path,locations,i,if,path,starts,with,slash,modified,locations,i,resource,utils,path,else,if,resource,pattern,utils,is,url,path,modified,locations,i,resource,utils,slash,string,utils,clean,path,class,utils,class,package,as,resource,path,clazz,slash,path,else,modified,locations,i,string,utils,clean,path,path,return,modified,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1389822826;Generate a modified version of the supplied locations array and return it._<p>A plain path &mdash_ for example, &quot_context.xml&quot_ &mdash_ will_be treated as a classpath resource that is relative to the package in which_the specified class is defined. A path starting with a slash is treated_as an absolute classpath location, for example:_&quot_/org/springframework/whatever/foo.xml&quot_. A path which_references a URL (e.g., a path prefixed with_{@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link ResourceUtils#FILE_URL_PREFIX file:}, {@code http:},_etc.) will be added to the results unchanged._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		String[] modifiedLocations = new String[locations.length]__		for (int i = 0_ i < locations.length_ i++) {_			String path = locations[i]__			if (path.startsWith(SLASH)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path__			}_			else if (!ResourcePatternUtils.isUrl(path)) {_				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH +_						StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path)__			}_			else {_				modifiedLocations[i] = StringUtils.cleanPath(path)__			}_		}_		return modifiedLocations__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,a,plain,path,mdash,for,example,quot,context,xml,quot,mdash,will,be,treated,as,a,classpath,resource,that,is,relative,to,the,package,in,which,the,specified,class,is,defined,a,path,starting,with,a,slash,is,treated,as,an,absolute,classpath,location,for,example,quot,org,springframework,whatever,foo,xml,quot,a,path,which,references,a,url,e,g,a,path,prefixed,with,link,resource,utils,classpath,link,resource,utils,file,code,http,etc,will,be,added,to,the,results,unchanged,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,string,modified,locations,new,string,locations,length,for,int,i,0,i,locations,length,i,string,path,locations,i,if,path,starts,with,slash,modified,locations,i,resource,utils,path,else,if,resource,pattern,utils,is,url,path,modified,locations,i,resource,utils,slash,string,utils,clean,path,class,utils,class,package,as,resource,path,clazz,slash,path,else,modified,locations,i,string,utils,clean,path,path,return,modified,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1401991965;Generate a modified version of the supplied locations array and return it._<p>The default implementation simply delegates to_{@link TestContextResourceUtils#convertToClasspathResourcePaths}._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		return TestContextResourceUtils.convertToClasspathResourcePaths(clazz, locations)__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,the,default,implementation,simply,delegates,to,link,test,context,resource,utils,convert,to,classpath,resource,paths,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,return,test,context,resource,utils,convert,to,classpath,resource,paths,clazz,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1406214559;Generate a modified version of the supplied locations array and return it._<p>The default implementation simply delegates to_{@link TestContextResourceUtils#convertToClasspathResourcePaths}._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		return TestContextResourceUtils.convertToClasspathResourcePaths(clazz, locations)__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,the,default,implementation,simply,delegates,to,link,test,context,resource,utils,convert,to,classpath,resource,paths,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,return,test,context,resource,utils,convert,to,classpath,resource,paths,clazz,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1407967503;Generate a modified version of the supplied locations array and return it._<p>The default implementation simply delegates to_{@link TestContextResourceUtils#convertToClasspathResourcePaths}._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		return TestContextResourceUtils.convertToClasspathResourcePaths(clazz, locations)__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,the,default,implementation,simply,delegates,to,link,test,context,resource,utils,convert,to,classpath,resource,paths,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,return,test,context,resource,utils,convert,to,classpath,resource,paths,clazz,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1413848647;Generate a modified version of the supplied locations array and return it._<p>The default implementation simply delegates to_{@link TestContextResourceUtils#convertToClasspathResourcePaths}._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		return TestContextResourceUtils.convertToClasspathResourcePaths(clazz, locations)__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,the,default,implementation,simply,delegates,to,link,test,context,resource,utils,convert,to,classpath,resource,paths,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,return,test,context,resource,utils,convert,to,classpath,resource,paths,clazz,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1424114809;Generate a modified version of the supplied locations array and return it._<p>The default implementation simply delegates to_{@link TestContextResourceUtils#convertToClasspathResourcePaths}._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		return TestContextResourceUtils.convertToClasspathResourcePaths(clazz, locations)__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,the,default,implementation,simply,delegates,to,link,test,context,resource,utils,convert,to,classpath,resource,paths,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,return,test,context,resource,utils,convert,to,classpath,resource,paths,clazz,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1424138964;Generate a modified version of the supplied locations array and return it._<p>The default implementation simply delegates to_{@link TestContextResourceUtils#convertToClasspathResourcePaths}._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		return TestContextResourceUtils.convertToClasspathResourcePaths(clazz, locations)__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,the,default,implementation,simply,delegates,to,link,test,context,resource,utils,convert,to,classpath,resource,paths,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,return,test,context,resource,utils,convert,to,classpath,resource,paths,clazz,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1456332614;Generate a modified version of the supplied locations array and return it._<p>The default implementation simply delegates to_{@link TestContextResourceUtils#convertToClasspathResourcePaths}._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		return TestContextResourceUtils.convertToClasspathResourcePaths(clazz, locations)__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,the,default,implementation,simply,delegates,to,link,test,context,resource,utils,convert,to,classpath,resource,paths,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,return,test,context,resource,utils,convert,to,classpath,resource,paths,clazz,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1457447255;Generate a modified version of the supplied locations array and return it._<p>The default implementation simply delegates to_{@link TestContextResourceUtils#convertToClasspathResourcePaths}._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		return TestContextResourceUtils.convertToClasspathResourcePaths(clazz, locations)__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,the,default,implementation,simply,delegates,to,link,test,context,resource,utils,convert,to,classpath,resource,paths,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,return,test,context,resource,utils,convert,to,classpath,resource,paths,clazz,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1457727806;Generate a modified version of the supplied locations array and return it._<p>The default implementation simply delegates to_{@link TestContextResourceUtils#convertToClasspathResourcePaths}._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		return TestContextResourceUtils.convertToClasspathResourcePaths(clazz, locations)__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,the,default,implementation,simply,delegates,to,link,test,context,resource,utils,convert,to,classpath,resource,paths,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,return,test,context,resource,utils,convert,to,classpath,resource,paths,clazz,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1467730834;Generate a modified version of the supplied locations array and return it._<p>The default implementation simply delegates to_{@link TestContextResourceUtils#convertToClasspathResourcePaths}._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		return TestContextResourceUtils.convertToClasspathResourcePaths(clazz, locations)__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,the,default,implementation,simply,delegates,to,link,test,context,resource,utils,convert,to,classpath,resource,paths,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,return,test,context,resource,utils,convert,to,classpath,resource,paths,clazz,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1495868221;Generate a modified version of the supplied locations array and return it._<p>The default implementation simply delegates to_{@link TestContextResourceUtils#convertToClasspathResourcePaths}._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		return TestContextResourceUtils.convertToClasspathResourcePaths(clazz, locations)__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,the,default,implementation,simply,delegates,to,link,test,context,resource,utils,convert,to,classpath,resource,paths,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,return,test,context,resource,utils,convert,to,classpath,resource,paths,clazz,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1496242568;Generate a modified version of the supplied locations array and return it._<p>The default implementation simply delegates to_{@link TestContextResourceUtils#convertToClasspathResourcePaths}._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		return TestContextResourceUtils.convertToClasspathResourcePaths(clazz, locations)__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,the,default,implementation,simply,delegates,to,link,test,context,resource,utils,convert,to,classpath,resource,paths,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,return,test,context,resource,utils,convert,to,classpath,resource,paths,clazz,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1496955179;Generate a modified version of the supplied locations array and return it._<p>The default implementation simply delegates to_{@link TestContextResourceUtils#convertToClasspathResourcePaths}._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		return TestContextResourceUtils.convertToClasspathResourcePaths(clazz, locations)__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,the,default,implementation,simply,delegates,to,link,test,context,resource,utils,convert,to,classpath,resource,paths,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,return,test,context,resource,utils,convert,to,classpath,resource,paths,clazz,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1497341594;Generate a modified version of the supplied locations array and return it._<p>The default implementation simply delegates to_{@link TestContextResourceUtils#convertToClasspathResourcePaths}._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		return TestContextResourceUtils.convertToClasspathResourcePaths(clazz, locations)__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,the,default,implementation,simply,delegates,to,link,test,context,resource,utils,convert,to,classpath,resource,paths,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,return,test,context,resource,utils,convert,to,classpath,resource,paths,clazz,locations
AbstractContextLoader -> protected String[] modifyLocations(Class<?> clazz, String... locations);1516617801;Generate a modified version of the supplied locations array and return it._<p>The default implementation simply delegates to_{@link TestContextResourceUtils#convertToClasspathResourcePaths}._<p>Subclasses can override this method to implement a different_<em>location modification</em> strategy._@param clazz the class with which the locations are associated_@param locations the resource locations to be modified_@return an array of modified application context resource locations_@since 2.5;protected String[] modifyLocations(Class<?> clazz, String... locations) {_		return TestContextResourceUtils.convertToClasspathResourcePaths(clazz, locations)__	};generate,a,modified,version,of,the,supplied,locations,array,and,return,it,p,the,default,implementation,simply,delegates,to,link,test,context,resource,utils,convert,to,classpath,resource,paths,p,subclasses,can,override,this,method,to,implement,a,different,em,location,modification,em,strategy,param,clazz,the,class,with,which,the,locations,are,associated,param,locations,the,resource,locations,to,be,modified,return,an,array,of,modified,application,context,resource,locations,since,2,5;protected,string,modify,locations,class,clazz,string,locations,return,test,context,resource,utils,convert,to,classpath,resource,paths,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1356735495;If the supplied {@code locations} are {@code null} or_<em>empty</em> and {@link #isGenerateDefaultLocations()} returns_{@code true}, default locations will be_{@link #generateDefaultLocations(Class) generated} for the specified_{@link Class class} and the configured_{@link #getResourceSuffix() resource suffix}_ otherwise, the supplied_{@code locations} will be {@link #modifyLocations modified} if_necessary and returned.__@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ? generateDefaultLocations(clazz)_				: modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,for,the,specified,link,class,class,and,the,configured,link,get,resource,suffix,resource,suffix,otherwise,the,supplied,code,locations,will,be,link,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1368482696;If the supplied {@code locations} are {@code null} or_<em>empty</em> and {@link #isGenerateDefaultLocations()} returns_{@code true}, default locations will be_{@link #generateDefaultLocations(Class) generated} for the specified_{@link Class class} and the configured_{@link #getResourceSuffix() resource suffix}_ otherwise, the supplied_{@code locations} will be {@link #modifyLocations modified} if_necessary and returned.__@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ? generateDefaultLocations(clazz)_				: modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,for,the,specified,link,class,class,and,the,configured,link,get,resource,suffix,resource,suffix,otherwise,the,supplied,code,locations,will,be,link,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1384955459;If the supplied {@code locations} are {@code null} or_<em>empty</em> and {@link #isGenerateDefaultLocations()} returns_{@code true}, default locations will be_{@link #generateDefaultLocations(Class) generated} for the specified_{@link Class class} and the configured_{@link #getResourceSuffix() resource suffix}_ otherwise, the supplied_{@code locations} will be {@link #modifyLocations modified} if_necessary and returned.__@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ? generateDefaultLocations(clazz)_				: modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,for,the,specified,link,class,class,and,the,configured,link,get,resource,suffix,resource,suffix,otherwise,the,supplied,code,locations,will,be,link,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1389822826;If the supplied {@code locations} are {@code null} or_<em>empty</em> and {@link #isGenerateDefaultLocations()} returns_{@code true}, default locations will be_{@link #generateDefaultLocations(Class) generated} for the specified_{@link Class class} and the configured_{@link #getResourceSuffix() resource suffix}_ otherwise, the supplied_{@code locations} will be {@link #modifyLocations modified} if_necessary and returned._@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ?_				generateDefaultLocations(clazz) : modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,for,the,specified,link,class,class,and,the,configured,link,get,resource,suffix,resource,suffix,otherwise,the,supplied,code,locations,will,be,link,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1401991965;If the supplied {@code locations} are {@code null} or_<em>empty</em> and {@link #isGenerateDefaultLocations()} returns_{@code true}, default locations will be_{@link #generateDefaultLocations(Class) generated} for the specified_{@link Class class} and the configured_{@link #getResourceSuffix() resource suffix}_ otherwise, the supplied_{@code locations} will be {@link #modifyLocations modified} if_necessary and returned._@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ? generateDefaultLocations(clazz)_				: modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,for,the,specified,link,class,class,and,the,configured,link,get,resource,suffix,resource,suffix,otherwise,the,supplied,code,locations,will,be,link,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1406214559;If the supplied {@code locations} are {@code null} or <em>empty</em>_and {@link #isGenerateDefaultLocations()} returns {@code true},_default locations will be {@link #generateDefaultLocations(Class)_generated} (i.e., detected) for the specified {@link Class class}_and the configured {@linkplain #getResourceSuffixes() resource suffixes}__otherwise, the supplied {@code locations} will be_{@linkplain #modifyLocations modified} if necessary and returned.__@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ? generateDefaultLocations(clazz)_				: modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,i,e,detected,for,the,specified,link,class,class,and,the,configured,linkplain,get,resource,suffixes,resource,suffixes,otherwise,the,supplied,code,locations,will,be,linkplain,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1407967503;If the supplied {@code locations} are {@code null} or <em>empty</em>_and {@link #isGenerateDefaultLocations()} returns {@code true},_default locations will be {@link #generateDefaultLocations(Class)_generated} (i.e., detected) for the specified {@link Class class}_and the configured {@linkplain #getResourceSuffixes() resource suffixes}__otherwise, the supplied {@code locations} will be_{@linkplain #modifyLocations modified} if necessary and returned.__@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ? generateDefaultLocations(clazz)_				: modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,i,e,detected,for,the,specified,link,class,class,and,the,configured,linkplain,get,resource,suffixes,resource,suffixes,otherwise,the,supplied,code,locations,will,be,linkplain,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1413848647;If the supplied {@code locations} are {@code null} or <em>empty</em>_and {@link #isGenerateDefaultLocations()} returns {@code true},_default locations will be {@link #generateDefaultLocations(Class)_generated} (i.e., detected) for the specified {@link Class class}_and the configured {@linkplain #getResourceSuffixes() resource suffixes}__otherwise, the supplied {@code locations} will be_{@linkplain #modifyLocations modified} if necessary and returned.__@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ? generateDefaultLocations(clazz)_				: modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,i,e,detected,for,the,specified,link,class,class,and,the,configured,linkplain,get,resource,suffixes,resource,suffixes,otherwise,the,supplied,code,locations,will,be,linkplain,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1424114809;If the supplied {@code locations} are {@code null} or <em>empty</em>_and {@link #isGenerateDefaultLocations()} returns {@code true},_default locations will be {@link #generateDefaultLocations(Class)_generated} (i.e., detected) for the specified {@link Class class}_and the configured {@linkplain #getResourceSuffixes() resource suffixes}__otherwise, the supplied {@code locations} will be_{@linkplain #modifyLocations modified} if necessary and returned.__@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ? generateDefaultLocations(clazz)_				: modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,i,e,detected,for,the,specified,link,class,class,and,the,configured,linkplain,get,resource,suffixes,resource,suffixes,otherwise,the,supplied,code,locations,will,be,linkplain,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1424138964;If the supplied {@code locations} are {@code null} or <em>empty</em>_and {@link #isGenerateDefaultLocations()} returns {@code true},_default locations will be {@link #generateDefaultLocations(Class)_generated} (i.e., detected) for the specified {@link Class class}_and the configured {@linkplain #getResourceSuffixes() resource suffixes}__otherwise, the supplied {@code locations} will be_{@linkplain #modifyLocations modified} if necessary and returned.__@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ? generateDefaultLocations(clazz)_				: modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,i,e,detected,for,the,specified,link,class,class,and,the,configured,linkplain,get,resource,suffixes,resource,suffixes,otherwise,the,supplied,code,locations,will,be,linkplain,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1456332614;If the supplied {@code locations} are {@code null} or <em>empty</em>_and {@link #isGenerateDefaultLocations()} returns {@code true},_default locations will be {@link #generateDefaultLocations(Class)_generated} (i.e., detected) for the specified {@link Class class}_and the configured {@linkplain #getResourceSuffixes() resource suffixes}__otherwise, the supplied {@code locations} will be_{@linkplain #modifyLocations modified} if necessary and returned._@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ?_				generateDefaultLocations(clazz) : modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,i,e,detected,for,the,specified,link,class,class,and,the,configured,linkplain,get,resource,suffixes,resource,suffixes,otherwise,the,supplied,code,locations,will,be,linkplain,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1457447255;If the supplied {@code locations} are {@code null} or <em>empty</em>_and {@link #isGenerateDefaultLocations()} returns {@code true},_default locations will be {@link #generateDefaultLocations(Class)_generated} (i.e., detected) for the specified {@link Class class}_and the configured {@linkplain #getResourceSuffixes() resource suffixes}__otherwise, the supplied {@code locations} will be_{@linkplain #modifyLocations modified} if necessary and returned._@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ?_				generateDefaultLocations(clazz) : modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,i,e,detected,for,the,specified,link,class,class,and,the,configured,linkplain,get,resource,suffixes,resource,suffixes,otherwise,the,supplied,code,locations,will,be,linkplain,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1457727806;If the supplied {@code locations} are {@code null} or <em>empty</em>_and {@link #isGenerateDefaultLocations()} returns {@code true},_default locations will be {@link #generateDefaultLocations(Class)_generated} (i.e., detected) for the specified {@link Class class}_and the configured {@linkplain #getResourceSuffixes() resource suffixes}__otherwise, the supplied {@code locations} will be_{@linkplain #modifyLocations modified} if necessary and returned._@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ?_				generateDefaultLocations(clazz) : modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,i,e,detected,for,the,specified,link,class,class,and,the,configured,linkplain,get,resource,suffixes,resource,suffixes,otherwise,the,supplied,code,locations,will,be,linkplain,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1467730834;If the supplied {@code locations} are {@code null} or <em>empty</em>_and {@link #isGenerateDefaultLocations()} returns {@code true},_default locations will be {@link #generateDefaultLocations(Class)_generated} (i.e., detected) for the specified {@link Class class}_and the configured {@linkplain #getResourceSuffixes() resource suffixes}__otherwise, the supplied {@code locations} will be_{@linkplain #modifyLocations modified} if necessary and returned._@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ?_				generateDefaultLocations(clazz) : modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,i,e,detected,for,the,specified,link,class,class,and,the,configured,linkplain,get,resource,suffixes,resource,suffixes,otherwise,the,supplied,code,locations,will,be,linkplain,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1496955179;If the supplied {@code locations} are {@code null} or <em>empty</em>_and {@link #isGenerateDefaultLocations()} returns {@code true},_default locations will be {@link #generateDefaultLocations(Class)_generated} (i.e., detected) for the specified {@link Class class}_and the configured {@linkplain #getResourceSuffixes() resource suffixes}__otherwise, the supplied {@code locations} will be_{@linkplain #modifyLocations modified} if necessary and returned._@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ?_				generateDefaultLocations(clazz) : modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,i,e,detected,for,the,specified,link,class,class,and,the,configured,linkplain,get,resource,suffixes,resource,suffixes,otherwise,the,supplied,code,locations,will,be,linkplain,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1497341594;If the supplied {@code locations} are {@code null} or <em>empty</em>_and {@link #isGenerateDefaultLocations()} returns {@code true},_default locations will be {@link #generateDefaultLocations(Class)_generated} (i.e., detected) for the specified {@link Class class}_and the configured {@linkplain #getResourceSuffixes() resource suffixes}__otherwise, the supplied {@code locations} will be_{@linkplain #modifyLocations modified} if necessary and returned._@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ?_				generateDefaultLocations(clazz) : modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,i,e,detected,for,the,specified,link,class,class,and,the,configured,linkplain,get,resource,suffixes,resource,suffixes,otherwise,the,supplied,code,locations,will,be,linkplain,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1516617801;If the supplied {@code locations} are {@code null} or <em>empty</em>_and {@link #isGenerateDefaultLocations()} returns {@code true},_default locations will be {@link #generateDefaultLocations(Class)_generated} (i.e., detected) for the specified {@link Class class}_and the configured {@linkplain #getResourceSuffixes() resource suffixes}__otherwise, the supplied {@code locations} will be_{@linkplain #modifyLocations modified} if necessary and returned._@param clazz the class with which the locations are associated: to be_used when generating default locations_@param locations the unmodified locations to use for loading the_application context (can be {@code null} or empty)_@return a processed array of application context resource locations_@since 2.5_@see #isGenerateDefaultLocations()_@see #generateDefaultLocations(Class)_@see #modifyLocations(Class, String...)_@see org.springframework.test.context.ContextLoader#processLocations(Class, String...)_@see #processContextConfiguration(ContextConfigurationAttributes);@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ?_				generateDefaultLocations(clazz) : modifyLocations(clazz, locations)__	};if,the,supplied,code,locations,are,code,null,or,em,empty,em,and,link,is,generate,default,locations,returns,code,true,default,locations,will,be,link,generate,default,locations,class,generated,i,e,detected,for,the,specified,link,class,class,and,the,configured,linkplain,get,resource,suffixes,resource,suffixes,otherwise,the,supplied,code,locations,will,be,linkplain,modify,locations,modified,if,necessary,and,returned,param,clazz,the,class,with,which,the,locations,are,associated,to,be,used,when,generating,default,locations,param,locations,the,unmodified,locations,to,use,for,loading,the,application,context,can,be,code,null,or,empty,return,a,processed,array,of,application,context,resource,locations,since,2,5,see,is,generate,default,locations,see,generate,default,locations,class,see,modify,locations,class,string,see,org,springframework,test,context,context,loader,process,locations,class,string,see,process,context,configuration,context,configuration,attributes;override,public,final,string,process,locations,class,clazz,string,locations,return,object,utils,is,empty,locations,is,generate,default,locations,generate,default,locations,clazz,modify,locations,clazz,locations
AbstractContextLoader -> private void addResourcePropertySourcesToEnvironment(ConfigurableApplicationContext context, 			MergedContextConfiguration mergedConfig);1407967503;@since 4.1;private void addResourcePropertySourcesToEnvironment(ConfigurableApplicationContext context,_			MergedContextConfiguration mergedConfig) {_		try {_			ConfigurableEnvironment environment = context.getEnvironment()__			String[] locations = mergedConfig.getPropertySourceLocations()__			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = context.getResource(resolvedLocation)__				ResourcePropertySource ps = new ResourcePropertySource(resource)__				environment.getPropertySources().addFirst(ps)__			}_		}_		catch (IOException e) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", e)__		}_	};since,4,1;private,void,add,resource,property,sources,to,environment,configurable,application,context,context,merged,context,configuration,merged,config,try,configurable,environment,environment,context,get,environment,string,locations,merged,config,get,property,source,locations,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,context,get,resource,resolved,location,resource,property,source,ps,new,resource,property,source,resource,environment,get,property,sources,add,first,ps,catch,ioexception,e,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,e
AbstractContextLoader -> private void addResourcePropertySourcesToEnvironment(ConfigurableApplicationContext context, 			MergedContextConfiguration mergedConfig);1413848647;@since 4.1;private void addResourcePropertySourcesToEnvironment(ConfigurableApplicationContext context,_			MergedContextConfiguration mergedConfig) {_		try {_			ConfigurableEnvironment environment = context.getEnvironment()__			String[] locations = mergedConfig.getPropertySourceLocations()__			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = context.getResource(resolvedLocation)__				ResourcePropertySource ps = new ResourcePropertySource(resource)__				environment.getPropertySources().addFirst(ps)__			}_		}_		catch (IOException e) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", e)__		}_	};since,4,1;private,void,add,resource,property,sources,to,environment,configurable,application,context,context,merged,context,configuration,merged,config,try,configurable,environment,environment,context,get,environment,string,locations,merged,config,get,property,source,locations,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,context,get,resource,resolved,location,resource,property,source,ps,new,resource,property,source,resource,environment,get,property,sources,add,first,ps,catch,ioexception,e,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,e
AbstractContextLoader -> protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1407967503;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read._<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the_context.</li>_<li>Adds {@link PropertySource PropertySources} for all_{@linkplain MergedContextConfiguration#getPropertySourceLocations()_resource locations} and_{@linkplain MergedContextConfiguration#getPropertySourceProperties()_inlined properties} from the supplied {@code MergedContextConfiguration}_to the {@code Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and instantiates and_{@linkplain ApplicationContextInitializer#initialize invokes} each with the_given application context.</li>_<ul>_<li>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or annotated with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.</li>_</ul>_</ul>_@param context the newly created application context_@param mergedConfig the merged context configuration_@since 3.2_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId;protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__		addResourcePropertySourcesToEnvironment(context, mergedConfig)__		addInlinedPropertiesToEnvironment(context, mergedConfig)__		invokeApplicationContextInitializers(context, mergedConfig)__	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,adds,link,property,source,property,sources,for,all,linkplain,merged,context,configuration,get,property,source,locations,resource,locations,and,linkplain,merged,context,configuration,get,property,source,properties,inlined,properties,from,the,supplied,code,merged,context,configuration,to,the,code,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,instantiates,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,li,ul,li,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,annotated,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,li,ul,ul,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,3,2,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id;protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,add,resource,property,sources,to,environment,context,merged,config,add,inlined,properties,to,environment,context,merged,config,invoke,application,context,initializers,context,merged,config
AbstractContextLoader -> protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1413848647;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read._<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the_context.</li>_<li>Adds {@link PropertySource PropertySources} for all_{@linkplain MergedContextConfiguration#getPropertySourceLocations()_resource locations} and_{@linkplain MergedContextConfiguration#getPropertySourceProperties()_inlined properties} from the supplied {@code MergedContextConfiguration}_to the {@code Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and instantiates and_{@linkplain ApplicationContextInitializer#initialize invokes} each with the_given application context.</li>_<ul>_<li>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or annotated with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.</li>_</ul>_</ul>_@param context the newly created application context_@param mergedConfig the merged context configuration_@since 3.2_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId;protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__		addResourcePropertySourcesToEnvironment(context, mergedConfig)__		addInlinedPropertiesToEnvironment(context, mergedConfig)__		invokeApplicationContextInitializers(context, mergedConfig)__	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,adds,link,property,source,property,sources,for,all,linkplain,merged,context,configuration,get,property,source,locations,resource,locations,and,linkplain,merged,context,configuration,get,property,source,properties,inlined,properties,from,the,supplied,code,merged,context,configuration,to,the,code,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,instantiates,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,li,ul,li,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,annotated,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,li,ul,ul,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,3,2,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id;protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,add,resource,property,sources,to,environment,context,merged,config,add,inlined,properties,to,environment,context,merged,config,invoke,application,context,initializers,context,merged,config
AbstractContextLoader -> protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1424114809;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read._<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the_context.</li>_<li>Adds {@link PropertySource PropertySources} for all_{@linkplain MergedContextConfiguration#getPropertySourceLocations()_resource locations} and_{@linkplain MergedContextConfiguration#getPropertySourceProperties()_inlined properties} from the supplied {@code MergedContextConfiguration}_to the {@code Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and instantiates and_{@linkplain ApplicationContextInitializer#initialize invokes} each with the_given application context.</li>_<ul>_<li>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or annotated with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.</li>_</ul>_</ul>_@param context the newly created application context_@param mergedConfig the merged context configuration_@since 3.2_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId;protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__		TestPropertySourceUtils.addResourcePropertySourcesToEnvironment(context, mergedConfig.getPropertySourceLocations())__		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, mergedConfig.getPropertySourceProperties())__		invokeApplicationContextInitializers(context, mergedConfig)__	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,adds,link,property,source,property,sources,for,all,linkplain,merged,context,configuration,get,property,source,locations,resource,locations,and,linkplain,merged,context,configuration,get,property,source,properties,inlined,properties,from,the,supplied,code,merged,context,configuration,to,the,code,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,instantiates,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,li,ul,li,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,annotated,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,li,ul,ul,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,3,2,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id;protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,test,property,source,utils,add,resource,property,sources,to,environment,context,merged,config,get,property,source,locations,test,property,source,utils,add,inlined,properties,to,environment,context,merged,config,get,property,source,properties,invoke,application,context,initializers,context,merged,config
AbstractContextLoader -> protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1424138964;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read._<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the_context.</li>_<li>Adds {@link PropertySource PropertySources} for all_{@linkplain MergedContextConfiguration#getPropertySourceLocations()_resource locations} and_{@linkplain MergedContextConfiguration#getPropertySourceProperties()_inlined properties} from the supplied {@code MergedContextConfiguration}_to the {@code Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and instantiates and_{@linkplain ApplicationContextInitializer#initialize invokes} each with the_given application context.</li>_<ul>_<li>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or annotated with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.</li>_</ul>_</ul>_@param context the newly created application context_@param mergedConfig the merged context configuration_@since 3.2_@see TestPropertySourceUtils#addPropertiesFilesToEnvironment_@see TestPropertySourceUtils#addInlinedPropertiesToEnvironment_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId;protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__		TestPropertySourceUtils.addPropertiesFilesToEnvironment(context, mergedConfig.getPropertySourceLocations())__		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, mergedConfig.getPropertySourceProperties())__		invokeApplicationContextInitializers(context, mergedConfig)__	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,adds,link,property,source,property,sources,for,all,linkplain,merged,context,configuration,get,property,source,locations,resource,locations,and,linkplain,merged,context,configuration,get,property,source,properties,inlined,properties,from,the,supplied,code,merged,context,configuration,to,the,code,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,instantiates,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,li,ul,li,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,annotated,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,li,ul,ul,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,3,2,see,test,property,source,utils,add,properties,files,to,environment,see,test,property,source,utils,add,inlined,properties,to,environment,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id;protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,test,property,source,utils,add,properties,files,to,environment,context,merged,config,get,property,source,locations,test,property,source,utils,add,inlined,properties,to,environment,context,merged,config,get,property,source,properties,invoke,application,context,initializers,context,merged,config
AbstractContextLoader -> protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1456332614;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read._<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the_context.</li>_<li>Adds {@link PropertySource PropertySources} for all_{@linkplain MergedContextConfiguration#getPropertySourceLocations()_resource locations} and_{@linkplain MergedContextConfiguration#getPropertySourceProperties()_inlined properties} from the supplied {@code MergedContextConfiguration}_to the {@code Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and instantiates and_{@linkplain ApplicationContextInitializer#initialize invokes} each with the_given application context.</li>_<ul>_<li>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or annotated with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.</li>_</ul>_</ul>_@param context the newly created application context_@param mergedConfig the merged context configuration_@since 3.2_@see TestPropertySourceUtils#addPropertiesFilesToEnvironment_@see TestPropertySourceUtils#addInlinedPropertiesToEnvironment_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId;protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__		TestPropertySourceUtils.addPropertiesFilesToEnvironment(context, mergedConfig.getPropertySourceLocations())__		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, mergedConfig.getPropertySourceProperties())__		invokeApplicationContextInitializers(context, mergedConfig)__	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,adds,link,property,source,property,sources,for,all,linkplain,merged,context,configuration,get,property,source,locations,resource,locations,and,linkplain,merged,context,configuration,get,property,source,properties,inlined,properties,from,the,supplied,code,merged,context,configuration,to,the,code,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,instantiates,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,li,ul,li,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,annotated,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,li,ul,ul,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,3,2,see,test,property,source,utils,add,properties,files,to,environment,see,test,property,source,utils,add,inlined,properties,to,environment,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id;protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,test,property,source,utils,add,properties,files,to,environment,context,merged,config,get,property,source,locations,test,property,source,utils,add,inlined,properties,to,environment,context,merged,config,get,property,source,properties,invoke,application,context,initializers,context,merged,config
AbstractContextLoader -> protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1457447255;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read._<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the_context.</li>_<li>Adds {@link PropertySource PropertySources} for all_{@linkplain MergedContextConfiguration#getPropertySourceLocations()_resource locations} and_{@linkplain MergedContextConfiguration#getPropertySourceProperties()_inlined properties} from the supplied {@code MergedContextConfiguration}_to the {@code Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and instantiates and_{@linkplain ApplicationContextInitializer#initialize invokes} each with the_given application context._<ul>_<li>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or annotated with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.</li>_</ul>_</li>_</ul>_@param context the newly created application context_@param mergedConfig the merged context configuration_@since 3.2_@see TestPropertySourceUtils#addPropertiesFilesToEnvironment_@see TestPropertySourceUtils#addInlinedPropertiesToEnvironment_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId;protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__		TestPropertySourceUtils.addPropertiesFilesToEnvironment(context, mergedConfig.getPropertySourceLocations())__		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, mergedConfig.getPropertySourceProperties())__		invokeApplicationContextInitializers(context, mergedConfig)__	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,adds,link,property,source,property,sources,for,all,linkplain,merged,context,configuration,get,property,source,locations,resource,locations,and,linkplain,merged,context,configuration,get,property,source,properties,inlined,properties,from,the,supplied,code,merged,context,configuration,to,the,code,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,instantiates,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,ul,li,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,annotated,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,li,ul,li,ul,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,3,2,see,test,property,source,utils,add,properties,files,to,environment,see,test,property,source,utils,add,inlined,properties,to,environment,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id;protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,test,property,source,utils,add,properties,files,to,environment,context,merged,config,get,property,source,locations,test,property,source,utils,add,inlined,properties,to,environment,context,merged,config,get,property,source,properties,invoke,application,context,initializers,context,merged,config
AbstractContextLoader -> protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1457727806;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read._<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the_context.</li>_<li>Adds {@link PropertySource PropertySources} for all_{@linkplain MergedContextConfiguration#getPropertySourceLocations()_resource locations} and_{@linkplain MergedContextConfiguration#getPropertySourceProperties()_inlined properties} from the supplied {@code MergedContextConfiguration}_to the {@code Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and instantiates and_{@linkplain ApplicationContextInitializer#initialize invokes} each with the_given application context._<ul>_<li>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or annotated with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.</li>_</ul>_</li>_</ul>_@param context the newly created application context_@param mergedConfig the merged context configuration_@since 3.2_@see TestPropertySourceUtils#addPropertiesFilesToEnvironment_@see TestPropertySourceUtils#addInlinedPropertiesToEnvironment_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId;protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__		TestPropertySourceUtils.addPropertiesFilesToEnvironment(context, mergedConfig.getPropertySourceLocations())__		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, mergedConfig.getPropertySourceProperties())__		invokeApplicationContextInitializers(context, mergedConfig)__	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,adds,link,property,source,property,sources,for,all,linkplain,merged,context,configuration,get,property,source,locations,resource,locations,and,linkplain,merged,context,configuration,get,property,source,properties,inlined,properties,from,the,supplied,code,merged,context,configuration,to,the,code,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,instantiates,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,ul,li,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,annotated,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,li,ul,li,ul,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,3,2,see,test,property,source,utils,add,properties,files,to,environment,see,test,property,source,utils,add,inlined,properties,to,environment,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id;protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,test,property,source,utils,add,properties,files,to,environment,context,merged,config,get,property,source,locations,test,property,source,utils,add,inlined,properties,to,environment,context,merged,config,get,property,source,properties,invoke,application,context,initializers,context,merged,config
AbstractContextLoader -> protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1467730834;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read._<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the_context.</li>_<li>Adds {@link PropertySource PropertySources} for all_{@linkplain MergedContextConfiguration#getPropertySourceLocations()_resource locations} and_{@linkplain MergedContextConfiguration#getPropertySourceProperties()_inlined properties} from the supplied {@code MergedContextConfiguration}_to the {@code Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and instantiates and_{@linkplain ApplicationContextInitializer#initialize invokes} each with the_given application context._<ul>_<li>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or annotated with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.</li>_</ul>_</li>_</ul>_@param context the newly created application context_@param mergedConfig the merged context configuration_@since 3.2_@see TestPropertySourceUtils#addPropertiesFilesToEnvironment_@see TestPropertySourceUtils#addInlinedPropertiesToEnvironment_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId;protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__		TestPropertySourceUtils.addPropertiesFilesToEnvironment(context, mergedConfig.getPropertySourceLocations())__		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, mergedConfig.getPropertySourceProperties())__		invokeApplicationContextInitializers(context, mergedConfig)__	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,adds,link,property,source,property,sources,for,all,linkplain,merged,context,configuration,get,property,source,locations,resource,locations,and,linkplain,merged,context,configuration,get,property,source,properties,inlined,properties,from,the,supplied,code,merged,context,configuration,to,the,code,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,instantiates,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,ul,li,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,annotated,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,li,ul,li,ul,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,3,2,see,test,property,source,utils,add,properties,files,to,environment,see,test,property,source,utils,add,inlined,properties,to,environment,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id;protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,test,property,source,utils,add,properties,files,to,environment,context,merged,config,get,property,source,locations,test,property,source,utils,add,inlined,properties,to,environment,context,merged,config,get,property,source,properties,invoke,application,context,initializers,context,merged,config
AbstractContextLoader -> protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1495868221;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read._<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the_context.</li>_<li>Adds {@link PropertySource PropertySources} for all_{@linkplain MergedContextConfiguration#getPropertySourceLocations()_resource locations} and_{@linkplain MergedContextConfiguration#getPropertySourceProperties()_inlined properties} from the supplied {@code MergedContextConfiguration}_to the {@code Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and instantiates and_{@linkplain ApplicationContextInitializer#initialize invokes} each with the_given application context._<ul>_<li>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or annotated with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.</li>_</ul>_</li>_</ul>_@param context the newly created application context_@param mergedConfig the merged context configuration_@since 3.2_@see TestPropertySourceUtils#addPropertiesFilesToEnvironment_@see TestPropertySourceUtils#addInlinedPropertiesToEnvironment_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId;protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__		TestPropertySourceUtils.addPropertiesFilesToEnvironment(context, mergedConfig.getPropertySourceLocations())__		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, mergedConfig.getPropertySourceProperties())__		invokeApplicationContextInitializers(context, mergedConfig)__	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,adds,link,property,source,property,sources,for,all,linkplain,merged,context,configuration,get,property,source,locations,resource,locations,and,linkplain,merged,context,configuration,get,property,source,properties,inlined,properties,from,the,supplied,code,merged,context,configuration,to,the,code,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,instantiates,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,ul,li,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,annotated,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,li,ul,li,ul,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,3,2,see,test,property,source,utils,add,properties,files,to,environment,see,test,property,source,utils,add,inlined,properties,to,environment,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id;protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,test,property,source,utils,add,properties,files,to,environment,context,merged,config,get,property,source,locations,test,property,source,utils,add,inlined,properties,to,environment,context,merged,config,get,property,source,properties,invoke,application,context,initializers,context,merged,config
AbstractContextLoader -> protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1496242568;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read._<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the_context.</li>_<li>Adds {@link PropertySource PropertySources} for all_{@linkplain MergedContextConfiguration#getPropertySourceLocations()_resource locations} and_{@linkplain MergedContextConfiguration#getPropertySourceProperties()_inlined properties} from the supplied {@code MergedContextConfiguration}_to the {@code Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and instantiates and_{@linkplain ApplicationContextInitializer#initialize invokes} each with the_given application context._<ul>_<li>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or annotated with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.</li>_</ul>_</li>_</ul>_@param context the newly created application context_@param mergedConfig the merged context configuration_@since 3.2_@see TestPropertySourceUtils#addPropertiesFilesToEnvironment_@see TestPropertySourceUtils#addInlinedPropertiesToEnvironment_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId;protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__		TestPropertySourceUtils.addPropertiesFilesToEnvironment(context, mergedConfig.getPropertySourceLocations())__		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, mergedConfig.getPropertySourceProperties())__		invokeApplicationContextInitializers(context, mergedConfig)__	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,adds,link,property,source,property,sources,for,all,linkplain,merged,context,configuration,get,property,source,locations,resource,locations,and,linkplain,merged,context,configuration,get,property,source,properties,inlined,properties,from,the,supplied,code,merged,context,configuration,to,the,code,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,instantiates,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,ul,li,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,annotated,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,li,ul,li,ul,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,3,2,see,test,property,source,utils,add,properties,files,to,environment,see,test,property,source,utils,add,inlined,properties,to,environment,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id;protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,test,property,source,utils,add,properties,files,to,environment,context,merged,config,get,property,source,locations,test,property,source,utils,add,inlined,properties,to,environment,context,merged,config,get,property,source,properties,invoke,application,context,initializers,context,merged,config
AbstractContextLoader -> protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1496955179;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read._<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the_context.</li>_<li>Adds {@link PropertySource PropertySources} for all_{@linkplain MergedContextConfiguration#getPropertySourceLocations()_resource locations} and_{@linkplain MergedContextConfiguration#getPropertySourceProperties()_inlined properties} from the supplied {@code MergedContextConfiguration}_to the {@code Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and instantiates and_{@linkplain ApplicationContextInitializer#initialize invokes} each with the_given application context._<ul>_<li>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or annotated with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.</li>_</ul>_</li>_</ul>_@param context the newly created application context_@param mergedConfig the merged context configuration_@since 3.2_@see TestPropertySourceUtils#addPropertiesFilesToEnvironment_@see TestPropertySourceUtils#addInlinedPropertiesToEnvironment_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId;protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__		TestPropertySourceUtils.addPropertiesFilesToEnvironment(context, mergedConfig.getPropertySourceLocations())__		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, mergedConfig.getPropertySourceProperties())__		invokeApplicationContextInitializers(context, mergedConfig)__	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,adds,link,property,source,property,sources,for,all,linkplain,merged,context,configuration,get,property,source,locations,resource,locations,and,linkplain,merged,context,configuration,get,property,source,properties,inlined,properties,from,the,supplied,code,merged,context,configuration,to,the,code,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,instantiates,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,ul,li,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,annotated,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,li,ul,li,ul,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,3,2,see,test,property,source,utils,add,properties,files,to,environment,see,test,property,source,utils,add,inlined,properties,to,environment,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id;protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,test,property,source,utils,add,properties,files,to,environment,context,merged,config,get,property,source,locations,test,property,source,utils,add,inlined,properties,to,environment,context,merged,config,get,property,source,properties,invoke,application,context,initializers,context,merged,config
AbstractContextLoader -> protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1497341594;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read._<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the_context.</li>_<li>Adds {@link PropertySource PropertySources} for all_{@linkplain MergedContextConfiguration#getPropertySourceLocations()_resource locations} and_{@linkplain MergedContextConfiguration#getPropertySourceProperties()_inlined properties} from the supplied {@code MergedContextConfiguration}_to the {@code Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and instantiates and_{@linkplain ApplicationContextInitializer#initialize invokes} each with the_given application context._<ul>_<li>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or annotated with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.</li>_</ul>_</li>_</ul>_@param context the newly created application context_@param mergedConfig the merged context configuration_@since 3.2_@see TestPropertySourceUtils#addPropertiesFilesToEnvironment_@see TestPropertySourceUtils#addInlinedPropertiesToEnvironment_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId;protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__		TestPropertySourceUtils.addPropertiesFilesToEnvironment(context, mergedConfig.getPropertySourceLocations())__		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, mergedConfig.getPropertySourceProperties())__		invokeApplicationContextInitializers(context, mergedConfig)__	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,adds,link,property,source,property,sources,for,all,linkplain,merged,context,configuration,get,property,source,locations,resource,locations,and,linkplain,merged,context,configuration,get,property,source,properties,inlined,properties,from,the,supplied,code,merged,context,configuration,to,the,code,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,instantiates,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,ul,li,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,annotated,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,li,ul,li,ul,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,3,2,see,test,property,source,utils,add,properties,files,to,environment,see,test,property,source,utils,add,inlined,properties,to,environment,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id;protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,test,property,source,utils,add,properties,files,to,environment,context,merged,config,get,property,source,locations,test,property,source,utils,add,inlined,properties,to,environment,context,merged,config,get,property,source,properties,invoke,application,context,initializers,context,merged,config
AbstractContextLoader -> protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1516617801;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read._<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the_context.</li>_<li>Adds {@link PropertySource PropertySources} for all_{@linkplain MergedContextConfiguration#getPropertySourceLocations()_resource locations} and_{@linkplain MergedContextConfiguration#getPropertySourceProperties()_inlined properties} from the supplied {@code MergedContextConfiguration}_to the {@code Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and instantiates and_{@linkplain ApplicationContextInitializer#initialize invokes} each with the_given application context._<ul>_<li>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or annotated with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.</li>_</ul>_</li>_</ul>_@param context the newly created application context_@param mergedConfig the merged context configuration_@since 3.2_@see TestPropertySourceUtils#addPropertiesFilesToEnvironment_@see TestPropertySourceUtils#addInlinedPropertiesToEnvironment_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId;protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())__		TestPropertySourceUtils.addPropertiesFilesToEnvironment(context, mergedConfig.getPropertySourceLocations())__		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, mergedConfig.getPropertySourceProperties())__		invokeApplicationContextInitializers(context, mergedConfig)__	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,adds,link,property,source,property,sources,for,all,linkplain,merged,context,configuration,get,property,source,locations,resource,locations,and,linkplain,merged,context,configuration,get,property,source,properties,inlined,properties,from,the,supplied,code,merged,context,configuration,to,the,code,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,instantiates,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,ul,li,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,annotated,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,li,ul,li,ul,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,3,2,see,test,property,source,utils,add,properties,files,to,environment,see,test,property,source,utils,add,inlined,properties,to,environment,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id;protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,test,property,source,utils,add,properties,files,to,environment,context,merged,config,get,property,source,locations,test,property,source,utils,add,inlined,properties,to,environment,context,merged,config,get,property,source,properties,invoke,application,context,initializers,context,merged,config
AbstractContextLoader -> protected String[] getResourceSuffixes();1406214559;Get the suffixes to append to {@link ApplicationContext} resource_locations when detecting default locations.__<p>The default implementation simply wraps the value returned by_{@link #getResourceSuffix()} in a single-element array, but this_can be overridden by subclasses in order to support multiple suffixes.__@return the resource suffixes_ never {@code null} or empty_@since 4.1_@see #generateDefaultLocations(Class);protected String[] getResourceSuffixes() {_		return new String[] { getResourceSuffix() }__	};get,the,suffixes,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,the,default,implementation,simply,wraps,the,value,returned,by,link,get,resource,suffix,in,a,single,element,array,but,this,can,be,overridden,by,subclasses,in,order,to,support,multiple,suffixes,return,the,resource,suffixes,never,code,null,or,empty,since,4,1,see,generate,default,locations,class;protected,string,get,resource,suffixes,return,new,string,get,resource,suffix
AbstractContextLoader -> protected String[] getResourceSuffixes();1407967503;Get the suffixes to append to {@link ApplicationContext} resource_locations when detecting default locations.__<p>The default implementation simply wraps the value returned by_{@link #getResourceSuffix()} in a single-element array, but this_can be overridden by subclasses in order to support multiple suffixes.__@return the resource suffixes_ never {@code null} or empty_@since 4.1_@see #generateDefaultLocations(Class);protected String[] getResourceSuffixes() {_		return new String[] { getResourceSuffix() }__	};get,the,suffixes,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,the,default,implementation,simply,wraps,the,value,returned,by,link,get,resource,suffix,in,a,single,element,array,but,this,can,be,overridden,by,subclasses,in,order,to,support,multiple,suffixes,return,the,resource,suffixes,never,code,null,or,empty,since,4,1,see,generate,default,locations,class;protected,string,get,resource,suffixes,return,new,string,get,resource,suffix
AbstractContextLoader -> protected String[] getResourceSuffixes();1413848647;Get the suffixes to append to {@link ApplicationContext} resource_locations when detecting default locations.__<p>The default implementation simply wraps the value returned by_{@link #getResourceSuffix()} in a single-element array, but this_can be overridden by subclasses in order to support multiple suffixes.__@return the resource suffixes_ never {@code null} or empty_@since 4.1_@see #generateDefaultLocations(Class);protected String[] getResourceSuffixes() {_		return new String[] { getResourceSuffix() }__	};get,the,suffixes,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,the,default,implementation,simply,wraps,the,value,returned,by,link,get,resource,suffix,in,a,single,element,array,but,this,can,be,overridden,by,subclasses,in,order,to,support,multiple,suffixes,return,the,resource,suffixes,never,code,null,or,empty,since,4,1,see,generate,default,locations,class;protected,string,get,resource,suffixes,return,new,string,get,resource,suffix
AbstractContextLoader -> protected String[] getResourceSuffixes();1424114809;Get the suffixes to append to {@link ApplicationContext} resource_locations when detecting default locations.__<p>The default implementation simply wraps the value returned by_{@link #getResourceSuffix()} in a single-element array, but this_can be overridden by subclasses in order to support multiple suffixes.__@return the resource suffixes_ never {@code null} or empty_@since 4.1_@see #generateDefaultLocations(Class);protected String[] getResourceSuffixes() {_		return new String[] { getResourceSuffix() }__	};get,the,suffixes,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,the,default,implementation,simply,wraps,the,value,returned,by,link,get,resource,suffix,in,a,single,element,array,but,this,can,be,overridden,by,subclasses,in,order,to,support,multiple,suffixes,return,the,resource,suffixes,never,code,null,or,empty,since,4,1,see,generate,default,locations,class;protected,string,get,resource,suffixes,return,new,string,get,resource,suffix
AbstractContextLoader -> protected String[] getResourceSuffixes();1424138964;Get the suffixes to append to {@link ApplicationContext} resource_locations when detecting default locations.__<p>The default implementation simply wraps the value returned by_{@link #getResourceSuffix()} in a single-element array, but this_can be overridden by subclasses in order to support multiple suffixes.__@return the resource suffixes_ never {@code null} or empty_@since 4.1_@see #generateDefaultLocations(Class);protected String[] getResourceSuffixes() {_		return new String[] { getResourceSuffix() }__	};get,the,suffixes,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,the,default,implementation,simply,wraps,the,value,returned,by,link,get,resource,suffix,in,a,single,element,array,but,this,can,be,overridden,by,subclasses,in,order,to,support,multiple,suffixes,return,the,resource,suffixes,never,code,null,or,empty,since,4,1,see,generate,default,locations,class;protected,string,get,resource,suffixes,return,new,string,get,resource,suffix
AbstractContextLoader -> protected String[] getResourceSuffixes();1456332614;Get the suffixes to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>The default implementation simply wraps the value returned by_{@link #getResourceSuffix()} in a single-element array, but this_can be overridden by subclasses in order to support multiple suffixes._@return the resource suffixes_ never {@code null} or empty_@since 4.1_@see #generateDefaultLocations(Class);protected String[] getResourceSuffixes() {_		return new String[] {getResourceSuffix()}__	};get,the,suffixes,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,the,default,implementation,simply,wraps,the,value,returned,by,link,get,resource,suffix,in,a,single,element,array,but,this,can,be,overridden,by,subclasses,in,order,to,support,multiple,suffixes,return,the,resource,suffixes,never,code,null,or,empty,since,4,1,see,generate,default,locations,class;protected,string,get,resource,suffixes,return,new,string,get,resource,suffix
AbstractContextLoader -> protected String[] getResourceSuffixes();1457447255;Get the suffixes to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>The default implementation simply wraps the value returned by_{@link #getResourceSuffix()} in a single-element array, but this_can be overridden by subclasses in order to support multiple suffixes._@return the resource suffixes_ never {@code null} or empty_@since 4.1_@see #generateDefaultLocations(Class);protected String[] getResourceSuffixes() {_		return new String[] {getResourceSuffix()}__	};get,the,suffixes,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,the,default,implementation,simply,wraps,the,value,returned,by,link,get,resource,suffix,in,a,single,element,array,but,this,can,be,overridden,by,subclasses,in,order,to,support,multiple,suffixes,return,the,resource,suffixes,never,code,null,or,empty,since,4,1,see,generate,default,locations,class;protected,string,get,resource,suffixes,return,new,string,get,resource,suffix
AbstractContextLoader -> protected String[] getResourceSuffixes();1457727806;Get the suffixes to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>The default implementation simply wraps the value returned by_{@link #getResourceSuffix()} in a single-element array, but this_can be overridden by subclasses in order to support multiple suffixes._@return the resource suffixes_ never {@code null} or empty_@since 4.1_@see #generateDefaultLocations(Class);protected String[] getResourceSuffixes() {_		return new String[] {getResourceSuffix()}__	};get,the,suffixes,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,the,default,implementation,simply,wraps,the,value,returned,by,link,get,resource,suffix,in,a,single,element,array,but,this,can,be,overridden,by,subclasses,in,order,to,support,multiple,suffixes,return,the,resource,suffixes,never,code,null,or,empty,since,4,1,see,generate,default,locations,class;protected,string,get,resource,suffixes,return,new,string,get,resource,suffix
AbstractContextLoader -> protected String[] getResourceSuffixes();1467730834;Get the suffixes to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>The default implementation simply wraps the value returned by_{@link #getResourceSuffix()} in a single-element array, but this_can be overridden by subclasses in order to support multiple suffixes._@return the resource suffixes_ never {@code null} or empty_@since 4.1_@see #generateDefaultLocations(Class);protected String[] getResourceSuffixes() {_		return new String[] {getResourceSuffix()}__	};get,the,suffixes,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,the,default,implementation,simply,wraps,the,value,returned,by,link,get,resource,suffix,in,a,single,element,array,but,this,can,be,overridden,by,subclasses,in,order,to,support,multiple,suffixes,return,the,resource,suffixes,never,code,null,or,empty,since,4,1,see,generate,default,locations,class;protected,string,get,resource,suffixes,return,new,string,get,resource,suffix
AbstractContextLoader -> protected String[] getResourceSuffixes();1495868221;Get the suffixes to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>The default implementation simply wraps the value returned by_{@link #getResourceSuffix()} in a single-element array, but this_can be overridden by subclasses in order to support multiple suffixes._@return the resource suffixes_ never {@code null} or empty_@since 4.1_@see #generateDefaultLocations(Class);protected String[] getResourceSuffixes() {_		return new String[] {getResourceSuffix()}__	};get,the,suffixes,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,the,default,implementation,simply,wraps,the,value,returned,by,link,get,resource,suffix,in,a,single,element,array,but,this,can,be,overridden,by,subclasses,in,order,to,support,multiple,suffixes,return,the,resource,suffixes,never,code,null,or,empty,since,4,1,see,generate,default,locations,class;protected,string,get,resource,suffixes,return,new,string,get,resource,suffix
AbstractContextLoader -> protected String[] getResourceSuffixes();1496242568;Get the suffixes to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>The default implementation simply wraps the value returned by_{@link #getResourceSuffix()} in a single-element array, but this_can be overridden by subclasses in order to support multiple suffixes._@return the resource suffixes_ never {@code null} or empty_@since 4.1_@see #generateDefaultLocations(Class);protected String[] getResourceSuffixes() {_		return new String[] {getResourceSuffix()}__	};get,the,suffixes,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,the,default,implementation,simply,wraps,the,value,returned,by,link,get,resource,suffix,in,a,single,element,array,but,this,can,be,overridden,by,subclasses,in,order,to,support,multiple,suffixes,return,the,resource,suffixes,never,code,null,or,empty,since,4,1,see,generate,default,locations,class;protected,string,get,resource,suffixes,return,new,string,get,resource,suffix
AbstractContextLoader -> protected String[] getResourceSuffixes();1496955179;Get the suffixes to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>The default implementation simply wraps the value returned by_{@link #getResourceSuffix()} in a single-element array, but this_can be overridden by subclasses in order to support multiple suffixes._@return the resource suffixes_ never {@code null} or empty_@since 4.1_@see #generateDefaultLocations(Class);protected String[] getResourceSuffixes() {_		return new String[] {getResourceSuffix()}__	};get,the,suffixes,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,the,default,implementation,simply,wraps,the,value,returned,by,link,get,resource,suffix,in,a,single,element,array,but,this,can,be,overridden,by,subclasses,in,order,to,support,multiple,suffixes,return,the,resource,suffixes,never,code,null,or,empty,since,4,1,see,generate,default,locations,class;protected,string,get,resource,suffixes,return,new,string,get,resource,suffix
AbstractContextLoader -> protected String[] getResourceSuffixes();1497341594;Get the suffixes to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>The default implementation simply wraps the value returned by_{@link #getResourceSuffix()} in a single-element array, but this_can be overridden by subclasses in order to support multiple suffixes._@return the resource suffixes_ never {@code null} or empty_@since 4.1_@see #generateDefaultLocations(Class);protected String[] getResourceSuffixes() {_		return new String[] {getResourceSuffix()}__	};get,the,suffixes,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,the,default,implementation,simply,wraps,the,value,returned,by,link,get,resource,suffix,in,a,single,element,array,but,this,can,be,overridden,by,subclasses,in,order,to,support,multiple,suffixes,return,the,resource,suffixes,never,code,null,or,empty,since,4,1,see,generate,default,locations,class;protected,string,get,resource,suffixes,return,new,string,get,resource,suffix
AbstractContextLoader -> protected String[] getResourceSuffixes();1516617801;Get the suffixes to append to {@link ApplicationContext} resource locations_when detecting default locations._<p>The default implementation simply wraps the value returned by_{@link #getResourceSuffix()} in a single-element array, but this_can be overridden by subclasses in order to support multiple suffixes._@return the resource suffixes_ never {@code null} or empty_@since 4.1_@see #generateDefaultLocations(Class);protected String[] getResourceSuffixes() {_		return new String[] {getResourceSuffix()}__	};get,the,suffixes,to,append,to,link,application,context,resource,locations,when,detecting,default,locations,p,the,default,implementation,simply,wraps,the,value,returned,by,link,get,resource,suffix,in,a,single,element,array,but,this,can,be,overridden,by,subclasses,in,order,to,support,multiple,suffixes,return,the,resource,suffixes,never,code,null,or,empty,since,4,1,see,generate,default,locations,class;protected,string,get,resource,suffixes,return,new,string,get,resource,suffix
AbstractContextLoader -> private void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, 			MergedContextConfiguration mergedConfig);1407967503;@since 4.1;private void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context,_			MergedContextConfiguration mergedConfig) {_		String[] keyValuePairs = mergedConfig.getPropertySourceProperties()__		if (!ObjectUtils.isEmpty(keyValuePairs)) {_			String name = "test properties " + ObjectUtils.nullSafeToString(keyValuePairs)__			MapPropertySource ps = new MapPropertySource(name, extractEnvironmentProperties(keyValuePairs))__			context.getEnvironment().getPropertySources().addFirst(ps)__		}_	};since,4,1;private,void,add,inlined,properties,to,environment,configurable,application,context,context,merged,context,configuration,merged,config,string,key,value,pairs,merged,config,get,property,source,properties,if,object,utils,is,empty,key,value,pairs,string,name,test,properties,object,utils,null,safe,to,string,key,value,pairs,map,property,source,ps,new,map,property,source,name,extract,environment,properties,key,value,pairs,context,get,environment,get,property,sources,add,first,ps
AbstractContextLoader -> private void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, 			MergedContextConfiguration mergedConfig);1413848647;@since 4.1;private void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context,_			MergedContextConfiguration mergedConfig) {_		String[] keyValuePairs = mergedConfig.getPropertySourceProperties()__		if (!ObjectUtils.isEmpty(keyValuePairs)) {_			String name = "test properties " + ObjectUtils.nullSafeToString(keyValuePairs)__			MapPropertySource ps = new MapPropertySource(name, extractEnvironmentProperties(keyValuePairs))__			context.getEnvironment().getPropertySources().addFirst(ps)__		}_	};since,4,1;private,void,add,inlined,properties,to,environment,configurable,application,context,context,merged,context,configuration,merged,config,string,key,value,pairs,merged,config,get,property,source,properties,if,object,utils,is,empty,key,value,pairs,string,name,test,properties,object,utils,null,safe,to,string,key,value,pairs,map,property,source,ps,new,map,property,source,name,extract,environment,properties,key,value,pairs,context,get,environment,get,property,sources,add,first,ps
AbstractContextLoader -> private Map<String, Object> extractEnvironmentProperties(String[] keyValuePairs);1407967503;Extract environment properties from the supplied key/value pairs._<p>Parsing of the key/value pairs is achieved by converting all pairs_into a single <em>virtual</em> properties file in memory and delegating_to {@link Properties#load(java.io.Reader)} to parse that virtual file._<p>This code has been adapted from Spring Boot's_{@link org.springframework.boot.test.SpringApplicationContextLoader SpringApplicationContextLoader}._@since 4.1;private Map<String, Object> extractEnvironmentProperties(String[] keyValuePairs) {_		StringBuilder sb = new StringBuilder()__		for (String keyValuePair : keyValuePairs) {_			sb.append(keyValuePair).append(LINE_SEPARATOR)__		}_		String content = sb.toString()__		Properties props = new Properties()__		try {_			props.load(new StringReader(content))__		}_		catch (IOException e) {_			throw new IllegalStateException("Failed to load test environment properties from: " + content, e)__		}__		Map<String, Object> properties = new HashMap<String, Object>()__		for (String name : props.stringPropertyNames()) {_			properties.put(name, props.getProperty(name))__		}_		return properties__	};extract,environment,properties,from,the,supplied,key,value,pairs,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,a,single,em,virtual,em,properties,file,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,that,virtual,file,p,this,code,has,been,adapted,from,spring,boot,s,link,org,springframework,boot,test,spring,application,context,loader,spring,application,context,loader,since,4,1;private,map,string,object,extract,environment,properties,string,key,value,pairs,string,builder,sb,new,string,builder,for,string,key,value,pair,key,value,pairs,sb,append,key,value,pair,append,string,content,sb,to,string,properties,props,new,properties,try,props,load,new,string,reader,content,catch,ioexception,e,throw,new,illegal,state,exception,failed,to,load,test,environment,properties,from,content,e,map,string,object,properties,new,hash,map,string,object,for,string,name,props,string,property,names,properties,put,name,props,get,property,name,return,properties
AbstractContextLoader -> private Map<String, Object> extractEnvironmentProperties(String[] keyValuePairs);1413848647;Extract environment properties from the supplied key/value pairs._<p>Parsing of the key/value pairs is achieved by converting all pairs_into a single <em>virtual</em> properties file in memory and delegating_to {@link Properties#load(java.io.Reader)} to parse that virtual file._<p>This code has been adapted from Spring Boot's_{@link org.springframework.boot.test.SpringApplicationContextLoader SpringApplicationContextLoader}._@since 4.1;private Map<String, Object> extractEnvironmentProperties(String[] keyValuePairs) {_		StringBuilder sb = new StringBuilder()__		for (String keyValuePair : keyValuePairs) {_			sb.append(keyValuePair).append(LINE_SEPARATOR)__		}_		String content = sb.toString()__		Properties props = new Properties()__		try {_			props.load(new StringReader(content))__		}_		catch (IOException e) {_			throw new IllegalStateException("Failed to load test environment properties from: " + content, e)__		}__		Map<String, Object> properties = new HashMap<String, Object>()__		for (String name : props.stringPropertyNames()) {_			properties.put(name, props.getProperty(name))__		}_		return properties__	};extract,environment,properties,from,the,supplied,key,value,pairs,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,a,single,em,virtual,em,properties,file,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,that,virtual,file,p,this,code,has,been,adapted,from,spring,boot,s,link,org,springframework,boot,test,spring,application,context,loader,spring,application,context,loader,since,4,1;private,map,string,object,extract,environment,properties,string,key,value,pairs,string,builder,sb,new,string,builder,for,string,key,value,pair,key,value,pairs,sb,append,key,value,pair,append,string,content,sb,to,string,properties,props,new,properties,try,props,load,new,string,reader,content,catch,ioexception,e,throw,new,illegal,state,exception,failed,to,load,test,environment,properties,from,content,e,map,string,object,properties,new,hash,map,string,object,for,string,name,props,string,property,names,properties,put,name,props,get,property,name,return,properties
AbstractContextLoader -> protected void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1457727806;Customize the {@link ConfigurableApplicationContext} created by this_{@code ContextLoader} <em>after</em> bean definitions have been loaded_into the context but <em>before</em> the context has been refreshed._<p>The default implementation delegates to all_{@link MergedContextConfiguration#getContextCustomizers context customizers}_that have been registered with the supplied {@code mergedConfig}._@param context the newly created application context_@param mergedConfig the merged context configuration_@since 4.3;protected void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		for (ContextCustomizer contextCustomizer : mergedConfig.getContextCustomizers()) {_			contextCustomizer.customizeContext(context, mergedConfig)__		}_	};customize,the,link,configurable,application,context,created,by,this,code,context,loader,em,after,em,bean,definitions,have,been,loaded,into,the,context,but,em,before,em,the,context,has,been,refreshed,p,the,default,implementation,delegates,to,all,link,merged,context,configuration,get,context,customizers,context,customizers,that,have,been,registered,with,the,supplied,code,merged,config,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,4,3;protected,void,customize,context,configurable,application,context,context,merged,context,configuration,merged,config,for,context,customizer,context,customizer,merged,config,get,context,customizers,context,customizer,customize,context,context,merged,config
AbstractContextLoader -> protected void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1467730834;Customize the {@link ConfigurableApplicationContext} created by this_{@code ContextLoader} <em>after</em> bean definitions have been loaded_into the context but <em>before</em> the context has been refreshed._<p>The default implementation delegates to all_{@link MergedContextConfiguration#getContextCustomizers context customizers}_that have been registered with the supplied {@code mergedConfig}._@param context the newly created application context_@param mergedConfig the merged context configuration_@since 4.3;protected void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		for (ContextCustomizer contextCustomizer : mergedConfig.getContextCustomizers()) {_			contextCustomizer.customizeContext(context, mergedConfig)__		}_	};customize,the,link,configurable,application,context,created,by,this,code,context,loader,em,after,em,bean,definitions,have,been,loaded,into,the,context,but,em,before,em,the,context,has,been,refreshed,p,the,default,implementation,delegates,to,all,link,merged,context,configuration,get,context,customizers,context,customizers,that,have,been,registered,with,the,supplied,code,merged,config,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,4,3;protected,void,customize,context,configurable,application,context,context,merged,context,configuration,merged,config,for,context,customizer,context,customizer,merged,config,get,context,customizers,context,customizer,customize,context,context,merged,config
AbstractContextLoader -> protected void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1495868221;Customize the {@link ConfigurableApplicationContext} created by this_{@code ContextLoader} <em>after</em> bean definitions have been loaded_into the context but <em>before</em> the context has been refreshed._<p>The default implementation delegates to all_{@link MergedContextConfiguration#getContextCustomizers context customizers}_that have been registered with the supplied {@code mergedConfig}._@param context the newly created application context_@param mergedConfig the merged context configuration_@since 4.3;protected void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		for (ContextCustomizer contextCustomizer : mergedConfig.getContextCustomizers()) {_			contextCustomizer.customizeContext(context, mergedConfig)__		}_	};customize,the,link,configurable,application,context,created,by,this,code,context,loader,em,after,em,bean,definitions,have,been,loaded,into,the,context,but,em,before,em,the,context,has,been,refreshed,p,the,default,implementation,delegates,to,all,link,merged,context,configuration,get,context,customizers,context,customizers,that,have,been,registered,with,the,supplied,code,merged,config,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,4,3;protected,void,customize,context,configurable,application,context,context,merged,context,configuration,merged,config,for,context,customizer,context,customizer,merged,config,get,context,customizers,context,customizer,customize,context,context,merged,config
AbstractContextLoader -> protected void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1496242568;Customize the {@link ConfigurableApplicationContext} created by this_{@code ContextLoader} <em>after</em> bean definitions have been loaded_into the context but <em>before</em> the context has been refreshed._<p>The default implementation delegates to all_{@link MergedContextConfiguration#getContextCustomizers context customizers}_that have been registered with the supplied {@code mergedConfig}._@param context the newly created application context_@param mergedConfig the merged context configuration_@since 4.3;protected void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		for (ContextCustomizer contextCustomizer : mergedConfig.getContextCustomizers()) {_			contextCustomizer.customizeContext(context, mergedConfig)__		}_	};customize,the,link,configurable,application,context,created,by,this,code,context,loader,em,after,em,bean,definitions,have,been,loaded,into,the,context,but,em,before,em,the,context,has,been,refreshed,p,the,default,implementation,delegates,to,all,link,merged,context,configuration,get,context,customizers,context,customizers,that,have,been,registered,with,the,supplied,code,merged,config,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,4,3;protected,void,customize,context,configurable,application,context,context,merged,context,configuration,merged,config,for,context,customizer,context,customizer,merged,config,get,context,customizers,context,customizer,customize,context,context,merged,config
AbstractContextLoader -> protected void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1496955179;Customize the {@link ConfigurableApplicationContext} created by this_{@code ContextLoader} <em>after</em> bean definitions have been loaded_into the context but <em>before</em> the context has been refreshed._<p>The default implementation delegates to all_{@link MergedContextConfiguration#getContextCustomizers context customizers}_that have been registered with the supplied {@code mergedConfig}._@param context the newly created application context_@param mergedConfig the merged context configuration_@since 4.3;protected void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		for (ContextCustomizer contextCustomizer : mergedConfig.getContextCustomizers()) {_			contextCustomizer.customizeContext(context, mergedConfig)__		}_	};customize,the,link,configurable,application,context,created,by,this,code,context,loader,em,after,em,bean,definitions,have,been,loaded,into,the,context,but,em,before,em,the,context,has,been,refreshed,p,the,default,implementation,delegates,to,all,link,merged,context,configuration,get,context,customizers,context,customizers,that,have,been,registered,with,the,supplied,code,merged,config,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,4,3;protected,void,customize,context,configurable,application,context,context,merged,context,configuration,merged,config,for,context,customizer,context,customizer,merged,config,get,context,customizers,context,customizer,customize,context,context,merged,config
AbstractContextLoader -> protected void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1497341594;Customize the {@link ConfigurableApplicationContext} created by this_{@code ContextLoader} <em>after</em> bean definitions have been loaded_into the context but <em>before</em> the context has been refreshed._<p>The default implementation delegates to all_{@link MergedContextConfiguration#getContextCustomizers context customizers}_that have been registered with the supplied {@code mergedConfig}._@param context the newly created application context_@param mergedConfig the merged context configuration_@since 4.3;protected void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		for (ContextCustomizer contextCustomizer : mergedConfig.getContextCustomizers()) {_			contextCustomizer.customizeContext(context, mergedConfig)__		}_	};customize,the,link,configurable,application,context,created,by,this,code,context,loader,em,after,em,bean,definitions,have,been,loaded,into,the,context,but,em,before,em,the,context,has,been,refreshed,p,the,default,implementation,delegates,to,all,link,merged,context,configuration,get,context,customizers,context,customizers,that,have,been,registered,with,the,supplied,code,merged,config,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,4,3;protected,void,customize,context,configurable,application,context,context,merged,context,configuration,merged,config,for,context,customizer,context,customizer,merged,config,get,context,customizers,context,customizer,customize,context,context,merged,config
AbstractContextLoader -> protected void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1516617801;Customize the {@link ConfigurableApplicationContext} created by this_{@code ContextLoader} <em>after</em> bean definitions have been loaded_into the context but <em>before</em> the context has been refreshed._<p>The default implementation delegates to all_{@link MergedContextConfiguration#getContextCustomizers context customizers}_that have been registered with the supplied {@code mergedConfig}._@param context the newly created application context_@param mergedConfig the merged context configuration_@since 4.3;protected void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		for (ContextCustomizer contextCustomizer : mergedConfig.getContextCustomizers()) {_			contextCustomizer.customizeContext(context, mergedConfig)__		}_	};customize,the,link,configurable,application,context,created,by,this,code,context,loader,em,after,em,bean,definitions,have,been,loaded,into,the,context,but,em,before,em,the,context,has,been,refreshed,p,the,default,implementation,delegates,to,all,link,merged,context,configuration,get,context,customizers,context,customizers,that,have,been,registered,with,the,supplied,code,merged,config,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,4,3;protected,void,customize,context,configurable,application,context,context,merged,context,configuration,merged,config,for,context,customizer,context,customizer,merged,config,get,context,customizers,context,customizer,customize,context,context,merged,config
AbstractContextLoader -> @SuppressWarnings("unchecked") 	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1349648958;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read.__<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_<code>MergedContextConfiguration</code> in the_{@link org.springframework.core.env.Environment Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given application context.</li>_</ul>__<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.__@param context the newly created application context_@param mergedConfig the merged context configuration_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId_@since 3.2;@SuppressWarnings("unchecked")_	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {__		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())___		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = mergedConfig.getContextInitializerClasses()___		if (initializerClasses.size() == 0) {_			_			return__		}__		final List<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances = new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()__		final Class<?> contextClass = context.getClass()___		for (Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass = GenericTypeResolver.resolveTypeArgument(initializerClass,_				ApplicationContextInitializer.class)__			Assert.isAssignable(initializerContextClass, contextClass, String.format(_				"Could not add context initializer [%s] since its generic parameter [%s] "_						+ "is not assignable from the type of application context used by this "_						+ "context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),_				contextClass.getName()))__			initializerInstances.add((ApplicationContextInitializer<ConfigurableApplicationContext>) BeanUtils.instantiateClass(initializerClass))__		}__		Collections.sort(initializerInstances, new AnnotationAwareOrderComparator())__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(context)__		}_	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,code,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,li,ul,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id,since,3,2;suppress,warnings,unchecked,protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,merged,config,get,context,initializer,classes,if,initializer,classes,size,0,return,final,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,final,class,context,class,context,get,class,for,class,extends,application,context,initializer,extends,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,context,class,get,name,initializer,instances,add,application,context,initializer,configurable,application,context,bean,utils,instantiate,class,initializer,class,collections,sort,initializer,instances,new,annotation,aware,order,comparator,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,context
AbstractContextLoader -> @SuppressWarnings("unchecked") 	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1356735495;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read.__<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given application context.</li>_</ul>__<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.__@param context the newly created application context_@param mergedConfig the merged context configuration_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId_@since 3.2;@SuppressWarnings("unchecked")_	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {__		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())___		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = mergedConfig.getContextInitializerClasses()___		if (initializerClasses.size() == 0) {_			_			return__		}__		final List<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances = new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()__		final Class<?> contextClass = context.getClass()___		for (Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass = GenericTypeResolver.resolveTypeArgument(initializerClass,_				ApplicationContextInitializer.class)__			Assert.isAssignable(initializerContextClass, contextClass, String.format(_				"Could not add context initializer [%s] since its generic parameter [%s] "_						+ "is not assignable from the type of application context used by this "_						+ "context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),_				contextClass.getName()))__			initializerInstances.add((ApplicationContextInitializer<ConfigurableApplicationContext>) BeanUtils.instantiateClass(initializerClass))__		}__		Collections.sort(initializerInstances, new AnnotationAwareOrderComparator())__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(context)__		}_	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,li,ul,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id,since,3,2;suppress,warnings,unchecked,protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,merged,config,get,context,initializer,classes,if,initializer,classes,size,0,return,final,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,final,class,context,class,context,get,class,for,class,extends,application,context,initializer,extends,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,context,class,get,name,initializer,instances,add,application,context,initializer,configurable,application,context,bean,utils,instantiate,class,initializer,class,collections,sort,initializer,instances,new,annotation,aware,order,comparator,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,context
AbstractContextLoader -> @SuppressWarnings("unchecked") 	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1357119239;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read.__<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given application context.</li>_</ul>__<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.__@param context the newly created application context_@param mergedConfig the merged context configuration_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId_@since 3.2;@SuppressWarnings("unchecked")_	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {__		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())___		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = mergedConfig.getContextInitializerClasses()___		if (initializerClasses.size() == 0) {_			_			return__		}__		final List<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances = new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()__		final Class<?> contextClass = context.getClass()___		for (Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass = GenericTypeResolver.resolveTypeArgument(initializerClass,_				ApplicationContextInitializer.class)__			Assert.isAssignable(initializerContextClass, contextClass, String.format(_				"Could not add context initializer [%s] since its generic parameter [%s] "_						+ "is not assignable from the type of application context used by this "_						+ "context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),_				contextClass.getName()))__			initializerInstances.add((ApplicationContextInitializer<ConfigurableApplicationContext>) BeanUtils.instantiateClass(initializerClass))__		}__		Collections.sort(initializerInstances, new AnnotationAwareOrderComparator())__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(context)__		}_	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,li,ul,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id,since,3,2;suppress,warnings,unchecked,protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,merged,config,get,context,initializer,classes,if,initializer,classes,size,0,return,final,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,final,class,context,class,context,get,class,for,class,extends,application,context,initializer,extends,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,context,class,get,name,initializer,instances,add,application,context,initializer,configurable,application,context,bean,utils,instantiate,class,initializer,class,collections,sort,initializer,instances,new,annotation,aware,order,comparator,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,context
AbstractContextLoader -> @SuppressWarnings("unchecked") 	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1362408075;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read.__<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given application context.</li>_</ul>__<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.__@param context the newly created application context_@param mergedConfig the merged context configuration_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId_@since 3.2;@SuppressWarnings("unchecked")_	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {__		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())___		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = mergedConfig.getContextInitializerClasses()___		if (initializerClasses.size() == 0) {_			_			return__		}__		final List<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances = new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()__		final Class<?> contextClass = context.getClass()___		for (Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass = GenericTypeResolver.resolveTypeArgument(initializerClass,_				ApplicationContextInitializer.class)__			Assert.isAssignable(initializerContextClass, contextClass, String.format(_				"Could not add context initializer [%s] since its generic parameter [%s] "_						+ "is not assignable from the type of application context used by this "_						+ "context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),_				contextClass.getName()))__			initializerInstances.add((ApplicationContextInitializer<ConfigurableApplicationContext>) BeanUtils.instantiateClass(initializerClass))__		}__		Collections.sort(initializerInstances, new AnnotationAwareOrderComparator())__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(context)__		}_	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,li,ul,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id,since,3,2;suppress,warnings,unchecked,protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,merged,config,get,context,initializer,classes,if,initializer,classes,size,0,return,final,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,final,class,context,class,context,get,class,for,class,extends,application,context,initializer,extends,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,context,class,get,name,initializer,instances,add,application,context,initializer,configurable,application,context,bean,utils,instantiate,class,initializer,class,collections,sort,initializer,instances,new,annotation,aware,order,comparator,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,context
AbstractContextLoader -> @SuppressWarnings("unchecked") 	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1368482696;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read.__<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given application context.</li>_</ul>__<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.__@param context the newly created application context_@param mergedConfig the merged context configuration_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId_@since 3.2;@SuppressWarnings("unchecked")_	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {__		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())___		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = mergedConfig.getContextInitializerClasses()___		if (initializerClasses.size() == 0) {_			_			return__		}__		final List<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances = new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()__		final Class<?> contextClass = context.getClass()___		for (Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass = GenericTypeResolver.resolveTypeArgument(initializerClass,_				ApplicationContextInitializer.class)__			Assert.isAssignable(initializerContextClass, contextClass, String.format(_				"Could not add context initializer [%s] since its generic parameter [%s] "_						+ "is not assignable from the type of application context used by this "_						+ "context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),_				contextClass.getName()))__			initializerInstances.add((ApplicationContextInitializer<ConfigurableApplicationContext>) BeanUtils.instantiateClass(initializerClass))__		}__		Collections.sort(initializerInstances, new AnnotationAwareOrderComparator())__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(context)__		}_	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,li,ul,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id,since,3,2;suppress,warnings,unchecked,protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,merged,config,get,context,initializer,classes,if,initializer,classes,size,0,return,final,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,final,class,context,class,context,get,class,for,class,extends,application,context,initializer,extends,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,context,class,get,name,initializer,instances,add,application,context,initializer,configurable,application,context,bean,utils,instantiate,class,initializer,class,collections,sort,initializer,instances,new,annotation,aware,order,comparator,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,context
AbstractContextLoader -> @SuppressWarnings("unchecked") 	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1384955459;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read.__<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given application context.</li>_</ul>__<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately.__@param context the newly created application context_@param mergedConfig the merged context configuration_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId_@since 3.2;@SuppressWarnings("unchecked")_	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())___		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses =_				mergedConfig.getContextInitializerClasses()__		if (initializerClasses.isEmpty()) {_			_			return__		}__		final List<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances = new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()__		final Class<?> contextClass = context.getClass()___		for (Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass = GenericTypeResolver.resolveTypeArgument(initializerClass,_				ApplicationContextInitializer.class)__			Assert.isAssignable(initializerContextClass, contextClass, String.format(_				"Could not add context initializer [%s] since its generic parameter [%s] "_						+ "is not assignable from the type of application context used by this "_						+ "context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),_				contextClass.getName()))__			initializerInstances.add((ApplicationContextInitializer<ConfigurableApplicationContext>) BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(initializerInstances)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(context)__		}_	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,li,ul,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id,since,3,2;suppress,warnings,unchecked,protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,merged,config,get,context,initializer,classes,if,initializer,classes,is,empty,return,final,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,final,class,context,class,context,get,class,for,class,extends,application,context,initializer,extends,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,context,class,get,name,initializer,instances,add,application,context,initializer,configurable,application,context,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,initializer,instances,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,context
AbstractContextLoader -> @SuppressWarnings("unchecked") 	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1389822826;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read._<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given application context.</li>_</ul>_<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately._@param context the newly created application context_@param mergedConfig the merged context configuration_@since 3.2_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId;@SuppressWarnings("unchecked")_	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())___		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses =_				mergedConfig.getContextInitializerClasses()__		if (initializerClasses.isEmpty()) {_			_			return__		}__		List<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances =_				new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()__		Class<?> contextClass = context.getClass()___		for (Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass = GenericTypeResolver.resolveTypeArgument(initializerClass,_					ApplicationContextInitializer.class)__			Assert.isAssignable(initializerContextClass, contextClass, String.format(_					"Could not add context initializer [%s] since its generic parameter [%s] " +_					"is not assignable from the type of application context used by this " +_					"context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),_					contextClass.getName()))__			initializerInstances.add((ApplicationContextInitializer<ConfigurableApplicationContext>) BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(initializerInstances)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(context)__		}_	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,li,ul,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,3,2,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id;suppress,warnings,unchecked,protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,merged,config,get,context,initializer,classes,if,initializer,classes,is,empty,return,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,class,context,class,context,get,class,for,class,extends,application,context,initializer,extends,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,context,class,get,name,initializer,instances,add,application,context,initializer,configurable,application,context,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,initializer,instances,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,context
AbstractContextLoader -> @SuppressWarnings("unchecked") 	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1401991965;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read._<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given application context.</li>_</ul>_<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately._@param context the newly created application context_@param mergedConfig the merged context configuration_@since 3.2_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId;@SuppressWarnings("unchecked")_	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())___		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = mergedConfig.getContextInitializerClasses()__		if (initializerClasses.isEmpty()) {_			_			return__		}__		List<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances = new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()__		Class<?> contextClass = context.getClass()___		for (Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass = GenericTypeResolver.resolveTypeArgument(initializerClass,_				ApplicationContextInitializer.class)__			Assert.isAssignable(initializerContextClass, contextClass, String.format(_				"Could not add context initializer [%s] since its generic parameter [%s] "_						+ "is not assignable from the type of application context used by this "_						+ "context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),_				contextClass.getName()))__			initializerInstances.add((ApplicationContextInitializer<ConfigurableApplicationContext>) BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(initializerInstances)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(context)__		}_	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,li,ul,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,3,2,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id;suppress,warnings,unchecked,protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,merged,config,get,context,initializer,classes,if,initializer,classes,is,empty,return,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,class,context,class,context,get,class,for,class,extends,application,context,initializer,extends,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,context,class,get,name,initializer,instances,add,application,context,initializer,configurable,application,context,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,initializer,instances,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,context
AbstractContextLoader -> @SuppressWarnings("unchecked") 	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig);1406214559;Prepare the {@link ConfigurableApplicationContext} created by this_{@code SmartContextLoader} <i>before</i> bean definitions are read._<p>The default implementation:_<ul>_<li>Sets the <em>active bean definition profiles</em> from the supplied_{@code MergedContextConfiguration} in the_{@link org.springframework.core.env.Environment Environment} of the context.</li>_<li>Determines what (if any) context initializer classes have been supplied_via the {@code MergedContextConfiguration} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given application context.</li>_</ul>_<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with {@link_org.springframework.core.annotation.Order @Order} will be sorted appropriately._@param context the newly created application context_@param mergedConfig the merged context configuration_@since 3.2_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)_@see #loadContext(MergedContextConfiguration)_@see ConfigurableApplicationContext#setId;@SuppressWarnings("unchecked")_	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {_		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles())___		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = mergedConfig.getContextInitializerClasses()__		if (initializerClasses.isEmpty()) {_			_			return__		}__		List<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances = new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()__		Class<?> contextClass = context.getClass()___		for (Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass = GenericTypeResolver.resolveTypeArgument(initializerClass,_				ApplicationContextInitializer.class)__			Assert.isAssignable(initializerContextClass, contextClass, String.format(_				"Could not add context initializer [%s] since its generic parameter [%s] "_						+ "is not assignable from the type of application context used by this "_						+ "context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),_				contextClass.getName()))__			initializerInstances.add((ApplicationContextInitializer<ConfigurableApplicationContext>) BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(initializerInstances)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(context)__		}_	};prepare,the,link,configurable,application,context,created,by,this,code,smart,context,loader,i,before,i,bean,definitions,are,read,p,the,default,implementation,ul,li,sets,the,em,active,bean,definition,profiles,em,from,the,supplied,code,merged,context,configuration,in,the,link,org,springframework,core,env,environment,environment,of,the,context,li,li,determines,what,if,any,context,initializer,classes,have,been,supplied,via,the,code,merged,context,configuration,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,application,context,li,ul,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,context,the,newly,created,application,context,param,merged,config,the,merged,context,configuration,since,3,2,see,application,context,initializer,initialize,configurable,application,context,see,load,context,merged,context,configuration,see,configurable,application,context,set,id;suppress,warnings,unchecked,protected,void,prepare,context,configurable,application,context,context,merged,context,configuration,merged,config,context,get,environment,set,active,profiles,merged,config,get,active,profiles,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,merged,config,get,context,initializer,classes,if,initializer,classes,is,empty,return,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,class,context,class,context,get,class,for,class,extends,application,context,initializer,extends,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,context,class,get,name,initializer,instances,add,application,context,initializer,configurable,application,context,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,initializer,instances,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,context
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1356735495;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes.__<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations.__@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(),_			configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1368482696;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes.__<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations.__@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(),_			configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1384955459;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes.__<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations.__@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(),_			configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1389822826;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes._<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations._@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(), configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1401991965;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes._<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations._@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(),_			configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1406214559;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes._<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations._@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(),_			configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1407967503;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes._<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations._@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(),_			configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1413848647;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes._<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations._@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(),_			configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1424114809;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes._<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations._@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(),_			configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1424138964;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes._<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations._@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(),_			configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1456332614;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes._<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations._@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations =_				processLocations(configAttributes.getDeclaringClass(), configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1457447255;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes._<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations._@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations =_				processLocations(configAttributes.getDeclaringClass(), configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1457727806;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes._<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations._@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations =_				processLocations(configAttributes.getDeclaringClass(), configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1467730834;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes._<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations._@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations =_				processLocations(configAttributes.getDeclaringClass(), configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1495868221;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes._<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations._@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations =_				processLocations(configAttributes.getDeclaringClass(), configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1496955179;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes._<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations._@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations =_				processLocations(configAttributes.getDeclaringClass(), configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1497341594;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes._<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations._@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations =_				processLocations(configAttributes.getDeclaringClass(), configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
AbstractContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1516617801;For backwards compatibility with the {@link ContextLoader} SPI, the_default implementation simply delegates to {@link #processLocations(Class, String...)},_passing it the {@link ContextConfigurationAttributes#getDeclaringClass()_declaring class} and {@link ContextConfigurationAttributes#getLocations()_resource locations} retrieved from the supplied_{@link ContextConfigurationAttributes configuration attributes}. The_processed locations are then_{@link ContextConfigurationAttributes#setLocations(String[]) set} in_the supplied configuration attributes._<p>Can be overridden in subclasses &mdash_ for example, to process_annotated classes instead of resource locations._@since 3.1_@see #processLocations(Class, String...);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		String[] processedLocations =_				processLocations(configAttributes.getDeclaringClass(), configAttributes.getLocations())__		configAttributes.setLocations(processedLocations)__	};for,backwards,compatibility,with,the,link,context,loader,spi,the,default,implementation,simply,delegates,to,link,process,locations,class,string,passing,it,the,link,context,configuration,attributes,get,declaring,class,declaring,class,and,link,context,configuration,attributes,get,locations,resource,locations,retrieved,from,the,supplied,link,context,configuration,attributes,configuration,attributes,the,processed,locations,are,then,link,context,configuration,attributes,set,locations,string,set,in,the,supplied,configuration,attributes,p,can,be,overridden,in,subclasses,mdash,for,example,to,process,annotated,classes,instead,of,resource,locations,since,3,1,see,process,locations,class,string;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,string,processed,locations,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,config,attributes,set,locations,processed,locations
