commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Add a file to this request. The parameter name from the multipart  * form is taken from the {@link MultipartFile#getName()}.  * @param file multipart file to be added  */ ;/**  * Add a file to this request. The parameter name from the multipart  * form is taken from the {@link MultipartFile#getName()}.  * @param file multipart file to be added  */ public void addFile(MultipartFile file) {     Assert.notNull(file, "MultipartFile must not be null").     this.multipartFiles.add(file.getName(), file). }
false;public;0;4;;@Override public Iterator<String> getFileNames() {     return this.multipartFiles.keySet().iterator(). }
false;public;1;4;;@Override public MultipartFile getFile(String name) {     return this.multipartFiles.getFirst(name). }
false;public;1;10;;@Override public List<MultipartFile> getFiles(String name) {     List<MultipartFile> multipartFiles = this.multipartFiles.get(name).     if (multipartFiles != null) {         return multipartFiles.     } else {         return Collections.emptyList().     } }
false;public;0;4;;@Override public Map<String, MultipartFile> getFileMap() {     return this.multipartFiles.toSingleValueMap(). }
false;public;0;4;;@Override public MultiValueMap<String, MultipartFile> getMultiFileMap() {     return new LinkedMultiValueMap<>(this.multipartFiles). }
false;public;1;10;;@Override public String getMultipartContentType(String paramOrFileName) {     MultipartFile file = getFile(paramOrFileName).     if (file != null) {         return file.getContentType().     } else {         return null.     } }
false;public;0;4;;@Override public HttpMethod getRequestMethod() {     return HttpMethod.resolve(getMethod()). }
false;public;0;10;;@Override public HttpHeaders getRequestHeaders() {     HttpHeaders headers = new HttpHeaders().     Enumeration<String> headerNames = getHeaderNames().     while (headerNames.hasMoreElements()) {         String headerName = headerNames.nextElement().         headers.put(headerName, Collections.list(getHeaders(headerName))).     }     return headers. }
false;public;1;12;;@Override public HttpHeaders getMultipartHeaders(String paramOrFileName) {     String contentType = getMultipartContentType(paramOrFileName).     if (contentType != null) {         HttpHeaders headers = new HttpHeaders().         headers.add("Content-Type", contentType).         return headers.     } else {         return null.     } }
