# id;timestamp;commentText;codeText;commentWords;codeWords
TestPropertySource -> String[] locations() default {}_;1407967503;The resource locations of properties files to be loaded into the_{@code Environment}'s set of {@code PropertySources}. Each location_will be added to the enclosing {@code Environment} as its own property_source, in the order declared.__<h3>Supported File Formats</h3>_<p>Both traditional and XML-based properties file formats are supported_&mdash_ for example, {@code "classpath:/com/example/test.properties"}_or {@code "file:/path/to/file.xml"}.__<h3>Path Resource Semantics</h3>_<p>Each path will be interpreted as a Spring_{@link org.springframework.core.io.Resource Resource}. A plain path_&mdash_ for example, {@code "test.properties"} &mdash_ will be treated as a_classpath resource that is <em>relative</em> to the package in which the_test class is defined. A path starting with a slash will be treated as an_<em>absolute</em> classpath resource, for example:_{@code "/org/example/test.xml"}. A path which references a_URL (e.g., a path prefixed with_{@link org.springframework.util.ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link org.springframework.util.ResourceUtils#FILE_URL_PREFIX file:},_{@code http:}, etc.) will be loaded using the specified resource protocol._Resource location wildcards (e.g. <code>*&#42_/*.properties</code>)_are not permitted: each location must evaluate to exactly one_{@code .properties} or {@code .xml} resource.__<h3>Default Properties File Detection</h3>_<p>See the class-level Javadoc for a discussion on detection of defaults.__<h3>Precedence</h3>_<p>Properties loaded from resource locations have lower precedence than_inlined {@link #properties}.__<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #value}, but it may be used <em>instead</em> of {@link #value}.__@see #inheritLocations_@see #value_@see #properties_@see org.springframework.core.env.PropertySource;String[] locations() default {}_;the,resource,locations,of,properties,files,to,be,loaded,into,the,code,environment,s,set,of,code,property,sources,each,location,will,be,added,to,the,enclosing,code,environment,as,its,own,property,source,in,the,order,declared,h3,supported,file,formats,h3,p,both,traditional,and,xml,based,properties,file,formats,are,supported,mdash,for,example,code,classpath,com,example,test,properties,or,code,file,path,to,file,xml,h3,path,resource,semantics,h3,p,each,path,will,be,interpreted,as,a,spring,link,org,springframework,core,io,resource,resource,a,plain,path,mdash,for,example,code,test,properties,mdash,will,be,treated,as,a,classpath,resource,that,is,em,relative,em,to,the,package,in,which,the,test,class,is,defined,a,path,starting,with,a,slash,will,be,treated,as,an,em,absolute,em,classpath,resource,for,example,code,org,example,test,xml,a,path,which,references,a,url,e,g,a,path,prefixed,with,link,org,springframework,util,resource,utils,classpath,link,org,springframework,util,resource,utils,file,code,http,etc,will,be,loaded,using,the,specified,resource,protocol,resource,location,wildcards,e,g,code,42,properties,code,are,not,permitted,each,location,must,evaluate,to,exactly,one,code,properties,or,code,xml,resource,h3,default,properties,file,detection,h3,p,see,the,class,level,javadoc,for,a,discussion,on,detection,of,defaults,h3,precedence,h3,p,properties,loaded,from,resource,locations,have,lower,precedence,than,inlined,link,properties,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,value,but,it,may,be,used,em,instead,em,of,link,value,see,inherit,locations,see,value,see,properties,see,org,springframework,core,env,property,source;string,locations,default
TestPropertySource -> String[] locations() default {}_;1408896758;The resource locations of properties files to be loaded into the_{@code Environment}'s set of {@code PropertySources}. Each location_will be added to the enclosing {@code Environment} as its own property_source, in the order declared.__<h3>Supported File Formats</h3>_<p>Both traditional and XML-based properties file formats are supported_&mdash_ for example, {@code "classpath:/com/example/test.properties"}_or {@code "file:/path/to/file.xml"}.__<h3>Path Resource Semantics</h3>_<p>Each path will be interpreted as a Spring_{@link org.springframework.core.io.Resource Resource}. A plain path_&mdash_ for example, {@code "test.properties"} &mdash_ will be treated as a_classpath resource that is <em>relative</em> to the package in which the_test class is defined. A path starting with a slash will be treated as an_<em>absolute</em> classpath resource, for example:_{@code "/org/example/test.xml"}. A path which references a_URL (e.g., a path prefixed with_{@link org.springframework.util.ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link org.springframework.util.ResourceUtils#FILE_URL_PREFIX file:},_{@code http:}, etc.) will be loaded using the specified resource protocol._Resource location wildcards (e.g. <code>*&#42_/*.properties</code>)_are not permitted: each location must evaluate to exactly one_{@code .properties} or {@code .xml} resource.__<h3>Default Properties File Detection</h3>_<p>See the class-level Javadoc for a discussion on detection of defaults.__<h3>Precedence</h3>_<p>Properties loaded from resource locations have lower precedence than_inlined {@link #properties}.__<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #value}, but it may be used <em>instead</em> of {@link #value}.__@see #inheritLocations_@see #value_@see #properties_@see org.springframework.core.env.PropertySource;String[] locations() default {}_;the,resource,locations,of,properties,files,to,be,loaded,into,the,code,environment,s,set,of,code,property,sources,each,location,will,be,added,to,the,enclosing,code,environment,as,its,own,property,source,in,the,order,declared,h3,supported,file,formats,h3,p,both,traditional,and,xml,based,properties,file,formats,are,supported,mdash,for,example,code,classpath,com,example,test,properties,or,code,file,path,to,file,xml,h3,path,resource,semantics,h3,p,each,path,will,be,interpreted,as,a,spring,link,org,springframework,core,io,resource,resource,a,plain,path,mdash,for,example,code,test,properties,mdash,will,be,treated,as,a,classpath,resource,that,is,em,relative,em,to,the,package,in,which,the,test,class,is,defined,a,path,starting,with,a,slash,will,be,treated,as,an,em,absolute,em,classpath,resource,for,example,code,org,example,test,xml,a,path,which,references,a,url,e,g,a,path,prefixed,with,link,org,springframework,util,resource,utils,classpath,link,org,springframework,util,resource,utils,file,code,http,etc,will,be,loaded,using,the,specified,resource,protocol,resource,location,wildcards,e,g,code,42,properties,code,are,not,permitted,each,location,must,evaluate,to,exactly,one,code,properties,or,code,xml,resource,h3,default,properties,file,detection,h3,p,see,the,class,level,javadoc,for,a,discussion,on,detection,of,defaults,h3,precedence,h3,p,properties,loaded,from,resource,locations,have,lower,precedence,than,inlined,link,properties,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,value,but,it,may,be,used,em,instead,em,of,link,value,see,inherit,locations,see,value,see,properties,see,org,springframework,core,env,property,source;string,locations,default
TestPropertySource -> String[] locations() default {}_;1424197939;The resource locations of properties files to be loaded into the_{@code Environment}'s set of {@code PropertySources}. Each location_will be added to the enclosing {@code Environment} as its own property_source, in the order declared.__<h3>Supported File Formats</h3>_<p>Both traditional and XML-based properties file formats are supported_&mdash_ for example, {@code "classpath:/com/example/test.properties"}_or {@code "file:/path/to/file.xml"}.__<h3>Path Resource Semantics</h3>_<p>Each path will be interpreted as a Spring_{@link org.springframework.core.io.Resource Resource}. A plain path_&mdash_ for example, {@code "test.properties"} &mdash_ will be treated as a_classpath resource that is <em>relative</em> to the package in which the_test class is defined. A path starting with a slash will be treated as an_<em>absolute</em> classpath resource, for example:_{@code "/org/example/test.xml"}. A path which references a_URL (e.g., a path prefixed with_{@link org.springframework.util.ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link org.springframework.util.ResourceUtils#FILE_URL_PREFIX file:},_{@code http:}, etc.) will be loaded using the specified resource protocol._Resource location wildcards (e.g. <code>*&#42_/*.properties</code>)_are not permitted: each location must evaluate to exactly one_{@code .properties} or {@code .xml} resource. Property placeholders_in paths (i.e., <code>${...}</code>) will be_{@linkplain org.springframework.core.env.Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}.__<h3>Default Properties File Detection</h3>_<p>See the class-level Javadoc for a discussion on detection of defaults.__<h3>Precedence</h3>_<p>Properties loaded from resource locations have lower precedence than_inlined {@link #properties}.__<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #value}, but it may be used <em>instead</em> of {@link #value}.__@see #inheritLocations_@see #value_@see #properties_@see org.springframework.core.env.PropertySource;String[] locations() default {}_;the,resource,locations,of,properties,files,to,be,loaded,into,the,code,environment,s,set,of,code,property,sources,each,location,will,be,added,to,the,enclosing,code,environment,as,its,own,property,source,in,the,order,declared,h3,supported,file,formats,h3,p,both,traditional,and,xml,based,properties,file,formats,are,supported,mdash,for,example,code,classpath,com,example,test,properties,or,code,file,path,to,file,xml,h3,path,resource,semantics,h3,p,each,path,will,be,interpreted,as,a,spring,link,org,springframework,core,io,resource,resource,a,plain,path,mdash,for,example,code,test,properties,mdash,will,be,treated,as,a,classpath,resource,that,is,em,relative,em,to,the,package,in,which,the,test,class,is,defined,a,path,starting,with,a,slash,will,be,treated,as,an,em,absolute,em,classpath,resource,for,example,code,org,example,test,xml,a,path,which,references,a,url,e,g,a,path,prefixed,with,link,org,springframework,util,resource,utils,classpath,link,org,springframework,util,resource,utils,file,code,http,etc,will,be,loaded,using,the,specified,resource,protocol,resource,location,wildcards,e,g,code,42,properties,code,are,not,permitted,each,location,must,evaluate,to,exactly,one,code,properties,or,code,xml,resource,property,placeholders,in,paths,i,e,code,code,will,be,linkplain,org,springframework,core,env,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,h3,default,properties,file,detection,h3,p,see,the,class,level,javadoc,for,a,discussion,on,detection,of,defaults,h3,precedence,h3,p,properties,loaded,from,resource,locations,have,lower,precedence,than,inlined,link,properties,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,value,but,it,may,be,used,em,instead,em,of,link,value,see,inherit,locations,see,value,see,properties,see,org,springframework,core,env,property,source;string,locations,default
TestPropertySource -> boolean inheritLocations() default true_;1407967503;Whether or not test property source {@link #locations} from superclasses_should be <em>inherited</em>.__<p>The default value is {@code true}, which means that a test class will_<em>inherit</em> property source locations defined by a superclass._Specifically, the property source locations for a test class will be_appended to the list of property source locations defined by a superclass._Thus, subclasses have the option of <em>extending</em> the list of test_property source locations.__<p>If {@code inheritLocations} is set to {@code false}, the property_source locations for the test class will <em>shadow</em> and effectively_replace any property source locations defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the {@code "base.properties"}_file as a test property source. In contrast, the {@code ApplicationContext}_for {@code ExtendedTest} will be loaded using the {@code "base.properties"}_<strong>and</strong> {@code "extended.properties"} files as test property_source locations._<pre class="code">_&#064_TestPropertySource(&quot_base.properties&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_TestPropertySource(&quot_extended.properties&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__@see #locations;boolean inheritLocations() default true_;whether,or,not,test,property,source,link,locations,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,property,source,locations,defined,by,a,superclass,specifically,the,property,source,locations,for,a,test,class,will,be,appended,to,the,list,of,property,source,locations,defined,by,a,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,test,property,source,locations,p,if,code,inherit,locations,is,set,to,code,false,the,property,source,locations,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,property,source,locations,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,code,base,properties,file,as,a,test,property,source,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,code,base,properties,strong,and,strong,code,extended,properties,files,as,test,property,source,locations,pre,class,code,064,test,property,source,quot,base,properties,quot,064,context,configuration,public,class,base,test,064,test,property,source,quot,extended,properties,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,see,locations;boolean,inherit,locations,default,true
TestPropertySource -> boolean inheritLocations() default true_;1408896758;Whether or not test property source {@link #locations} from superclasses_should be <em>inherited</em>.__<p>The default value is {@code true}, which means that a test class will_<em>inherit</em> property source locations defined by a superclass._Specifically, the property source locations for a test class will be_appended to the list of property source locations defined by a superclass._Thus, subclasses have the option of <em>extending</em> the list of test_property source locations.__<p>If {@code inheritLocations} is set to {@code false}, the property_source locations for the test class will <em>shadow</em> and effectively_replace any property source locations defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the {@code "base.properties"}_file as a test property source. In contrast, the {@code ApplicationContext}_for {@code ExtendedTest} will be loaded using the {@code "base.properties"}_<strong>and</strong> {@code "extended.properties"} files as test property_source locations._<pre class="code">_&#064_TestPropertySource(&quot_base.properties&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_TestPropertySource(&quot_extended.properties&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__@see #locations;boolean inheritLocations() default true_;whether,or,not,test,property,source,link,locations,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,property,source,locations,defined,by,a,superclass,specifically,the,property,source,locations,for,a,test,class,will,be,appended,to,the,list,of,property,source,locations,defined,by,a,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,test,property,source,locations,p,if,code,inherit,locations,is,set,to,code,false,the,property,source,locations,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,property,source,locations,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,code,base,properties,file,as,a,test,property,source,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,code,base,properties,strong,and,strong,code,extended,properties,files,as,test,property,source,locations,pre,class,code,064,test,property,source,quot,base,properties,quot,064,context,configuration,public,class,base,test,064,test,property,source,quot,extended,properties,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,see,locations;boolean,inherit,locations,default,true
TestPropertySource -> boolean inheritLocations() default true_;1424197939;Whether or not test property source {@link #locations} from superclasses_should be <em>inherited</em>.__<p>The default value is {@code true}, which means that a test class will_<em>inherit</em> property source locations defined by a superclass._Specifically, the property source locations for a test class will be_appended to the list of property source locations defined by a superclass._Thus, subclasses have the option of <em>extending</em> the list of test_property source locations.__<p>If {@code inheritLocations} is set to {@code false}, the property_source locations for the test class will <em>shadow</em> and effectively_replace any property source locations defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the {@code "base.properties"}_file as a test property source. In contrast, the {@code ApplicationContext}_for {@code ExtendedTest} will be loaded using the {@code "base.properties"}_<strong>and</strong> {@code "extended.properties"} files as test property_source locations._<pre class="code">_&#064_TestPropertySource(&quot_base.properties&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_TestPropertySource(&quot_extended.properties&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__@see #locations;boolean inheritLocations() default true_;whether,or,not,test,property,source,link,locations,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,property,source,locations,defined,by,a,superclass,specifically,the,property,source,locations,for,a,test,class,will,be,appended,to,the,list,of,property,source,locations,defined,by,a,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,test,property,source,locations,p,if,code,inherit,locations,is,set,to,code,false,the,property,source,locations,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,property,source,locations,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,code,base,properties,file,as,a,test,property,source,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,code,base,properties,strong,and,strong,code,extended,properties,files,as,test,property,source,locations,pre,class,code,064,test,property,source,quot,base,properties,quot,064,context,configuration,public,class,base,test,064,test,property,source,quot,extended,properties,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,see,locations;boolean,inherit,locations,default,true
TestPropertySource -> boolean inheritLocations() default true_;1432246071;Whether or not test property source {@link #locations} from superclasses_should be <em>inherited</em>.__<p>The default value is {@code true}, which means that a test class will_<em>inherit</em> property source locations defined by a superclass._Specifically, the property source locations for a test class will be_appended to the list of property source locations defined by a superclass._Thus, subclasses have the option of <em>extending</em> the list of test_property source locations.__<p>If {@code inheritLocations} is set to {@code false}, the property_source locations for the test class will <em>shadow</em> and effectively_replace any property source locations defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the {@code "base.properties"}_file as a test property source. In contrast, the {@code ApplicationContext}_for {@code ExtendedTest} will be loaded using the {@code "base.properties"}_<strong>and</strong> {@code "extended.properties"} files as test property_source locations._<pre class="code">_&#064_TestPropertySource(&quot_base.properties&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_TestPropertySource(&quot_extended.properties&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__@see #locations;boolean inheritLocations() default true_;whether,or,not,test,property,source,link,locations,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,property,source,locations,defined,by,a,superclass,specifically,the,property,source,locations,for,a,test,class,will,be,appended,to,the,list,of,property,source,locations,defined,by,a,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,test,property,source,locations,p,if,code,inherit,locations,is,set,to,code,false,the,property,source,locations,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,property,source,locations,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,code,base,properties,file,as,a,test,property,source,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,code,base,properties,strong,and,strong,code,extended,properties,files,as,test,property,source,locations,pre,class,code,064,test,property,source,quot,base,properties,quot,064,context,configuration,public,class,base,test,064,test,property,source,quot,extended,properties,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,see,locations;boolean,inherit,locations,default,true
TestPropertySource -> boolean inheritLocations() default true_;1438176426;Whether or not test property source {@link #locations} from superclasses_should be <em>inherited</em>.__<p>The default value is {@code true}, which means that a test class will_<em>inherit</em> property source locations defined by a superclass._Specifically, the property source locations for a test class will be_appended to the list of property source locations defined by a superclass._Thus, subclasses have the option of <em>extending</em> the list of test_property source locations.__<p>If {@code inheritLocations} is set to {@code false}, the property_source locations for the test class will <em>shadow</em> and effectively_replace any property source locations defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the {@code "base.properties"}_file as a test property source. In contrast, the {@code ApplicationContext}_for {@code ExtendedTest} will be loaded using the {@code "base.properties"}_<strong>and</strong> {@code "extended.properties"} files as test property_source locations._<pre class="code">_&#064_TestPropertySource(&quot_base.properties&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_TestPropertySource(&quot_extended.properties&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__@see #locations;boolean inheritLocations() default true_;whether,or,not,test,property,source,link,locations,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,property,source,locations,defined,by,a,superclass,specifically,the,property,source,locations,for,a,test,class,will,be,appended,to,the,list,of,property,source,locations,defined,by,a,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,test,property,source,locations,p,if,code,inherit,locations,is,set,to,code,false,the,property,source,locations,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,property,source,locations,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,code,base,properties,file,as,a,test,property,source,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,code,base,properties,strong,and,strong,code,extended,properties,files,as,test,property,source,locations,pre,class,code,064,test,property,source,quot,base,properties,quot,064,context,configuration,public,class,base,test,064,test,property,source,quot,extended,properties,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,see,locations;boolean,inherit,locations,default,true
TestPropertySource -> boolean inheritLocations() default true_;1459842161;Whether or not test property source {@link #locations} from superclasses_should be <em>inherited</em>._<p>The default value is {@code true}, which means that a test class will_<em>inherit</em> property source locations defined by a superclass._Specifically, the property source locations for a test class will be_appended to the list of property source locations defined by a superclass._Thus, subclasses have the option of <em>extending</em> the list of test_property source locations._<p>If {@code inheritLocations} is set to {@code false}, the property_source locations for the test class will <em>shadow</em> and effectively_replace any property source locations defined by a superclass._<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the {@code "base.properties"}_file as a test property source. In contrast, the {@code ApplicationContext}_for {@code ExtendedTest} will be loaded using the {@code "base.properties"}_<strong>and</strong> {@code "extended.properties"} files as test property_source locations._<pre class="code">_&#064_TestPropertySource(&quot_base.properties&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_TestPropertySource(&quot_extended.properties&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__@see #locations;boolean inheritLocations() default true_;whether,or,not,test,property,source,link,locations,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,property,source,locations,defined,by,a,superclass,specifically,the,property,source,locations,for,a,test,class,will,be,appended,to,the,list,of,property,source,locations,defined,by,a,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,test,property,source,locations,p,if,code,inherit,locations,is,set,to,code,false,the,property,source,locations,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,property,source,locations,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,code,base,properties,file,as,a,test,property,source,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,code,base,properties,strong,and,strong,code,extended,properties,files,as,test,property,source,locations,pre,class,code,064,test,property,source,quot,base,properties,quot,064,context,configuration,public,class,base,test,064,test,property,source,quot,extended,properties,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,see,locations;boolean,inherit,locations,default,true
TestPropertySource -> boolean inheritLocations() default true_;1462470884;Whether or not test property source {@link #locations} from superclasses_should be <em>inherited</em>._<p>The default value is {@code true}, which means that a test class will_<em>inherit</em> property source locations defined by a superclass._Specifically, the property source locations for a test class will be_appended to the list of property source locations defined by a superclass._Thus, subclasses have the option of <em>extending</em> the list of test_property source locations._<p>If {@code inheritLocations} is set to {@code false}, the property_source locations for the test class will <em>shadow</em> and effectively_replace any property source locations defined by a superclass._<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the {@code "base.properties"}_file as a test property source. In contrast, the {@code ApplicationContext}_for {@code ExtendedTest} will be loaded using the {@code "base.properties"}_<strong>and</strong> {@code "extended.properties"} files as test property_source locations._<pre class="code">_&#064_TestPropertySource(&quot_base.properties&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_TestPropertySource(&quot_extended.properties&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__@see #locations;boolean inheritLocations() default true_;whether,or,not,test,property,source,link,locations,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,property,source,locations,defined,by,a,superclass,specifically,the,property,source,locations,for,a,test,class,will,be,appended,to,the,list,of,property,source,locations,defined,by,a,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,test,property,source,locations,p,if,code,inherit,locations,is,set,to,code,false,the,property,source,locations,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,property,source,locations,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,code,base,properties,file,as,a,test,property,source,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,code,base,properties,strong,and,strong,code,extended,properties,files,as,test,property,source,locations,pre,class,code,064,test,property,source,quot,base,properties,quot,064,context,configuration,public,class,base,test,064,test,property,source,quot,extended,properties,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,see,locations;boolean,inherit,locations,default,true
TestPropertySource -> String[] properties() default {}_;1407967503;<em>Inlined properties</em> in the form of <em>key-value</em> pairs that_should be added to the Spring_{@link org.springframework.core.env.Environment Environment} before the_{@code ApplicationContext} is loaded for the test. All key-value pairs_will be added to the enclosing {@code Environment} as a single test_{@code PropertySource} with the highest precedence.__<h3>Supported Syntax</h3>_<p>The supported syntax for key-value pairs is the same as the_syntax defined for entries in a Java_{@linkplain java.util.Properties#load(java.io.Reader) properties file}:_<ul>_<li>{@code "key=value"}</li>_<li>{@code "key:value"}</li>_<li>{@code "key value"}</li>_</ul>__<h3>Precedence</h3>_<p>Properties declared via this attribute have higher precedence than_properties loaded from resource {@link locations}.__<p>This attribute may be used in conjunction with {@link #value}_<em>or</em> {@link #locations}.__@see #inheritProperties_@see #locations_@see org.springframework.core.env.PropertySource;String[] properties() default {}_;em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,that,should,be,added,to,the,spring,link,org,springframework,core,env,environment,environment,before,the,code,application,context,is,loaded,for,the,test,all,key,value,pairs,will,be,added,to,the,enclosing,code,environment,as,a,single,test,code,property,source,with,the,highest,precedence,h3,supported,syntax,h3,p,the,supported,syntax,for,key,value,pairs,is,the,same,as,the,syntax,defined,for,entries,in,a,java,linkplain,java,util,properties,load,java,io,reader,properties,file,ul,li,code,key,value,li,li,code,key,value,li,li,code,key,value,li,ul,h3,precedence,h3,p,properties,declared,via,this,attribute,have,higher,precedence,than,properties,loaded,from,resource,link,locations,p,this,attribute,may,be,used,in,conjunction,with,link,value,em,or,em,link,locations,see,inherit,properties,see,locations,see,org,springframework,core,env,property,source;string,properties,default
TestPropertySource -> String[] properties() default {}_;1408896758;<em>Inlined properties</em> in the form of <em>key-value</em> pairs that_should be added to the Spring_{@link org.springframework.core.env.Environment Environment} before the_{@code ApplicationContext} is loaded for the test. All key-value pairs_will be added to the enclosing {@code Environment} as a single test_{@code PropertySource} with the highest precedence.__<h3>Supported Syntax</h3>_<p>The supported syntax for key-value pairs is the same as the_syntax defined for entries in a Java_{@linkplain java.util.Properties#load(java.io.Reader) properties file}:_<ul>_<li>{@code "key=value"}</li>_<li>{@code "key:value"}</li>_<li>{@code "key value"}</li>_</ul>__<h3>Precedence</h3>_<p>Properties declared via this attribute have higher precedence than_properties loaded from resource {@link #locations}.__<p>This attribute may be used in conjunction with {@link #value}_<em>or</em> {@link #locations}.__@see #inheritProperties_@see #locations_@see org.springframework.core.env.PropertySource;String[] properties() default {}_;em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,that,should,be,added,to,the,spring,link,org,springframework,core,env,environment,environment,before,the,code,application,context,is,loaded,for,the,test,all,key,value,pairs,will,be,added,to,the,enclosing,code,environment,as,a,single,test,code,property,source,with,the,highest,precedence,h3,supported,syntax,h3,p,the,supported,syntax,for,key,value,pairs,is,the,same,as,the,syntax,defined,for,entries,in,a,java,linkplain,java,util,properties,load,java,io,reader,properties,file,ul,li,code,key,value,li,li,code,key,value,li,li,code,key,value,li,ul,h3,precedence,h3,p,properties,declared,via,this,attribute,have,higher,precedence,than,properties,loaded,from,resource,link,locations,p,this,attribute,may,be,used,in,conjunction,with,link,value,em,or,em,link,locations,see,inherit,properties,see,locations,see,org,springframework,core,env,property,source;string,properties,default
TestPropertySource -> String[] properties() default {}_;1424197939;<em>Inlined properties</em> in the form of <em>key-value</em> pairs that_should be added to the Spring_{@link org.springframework.core.env.Environment Environment} before the_{@code ApplicationContext} is loaded for the test. All key-value pairs_will be added to the enclosing {@code Environment} as a single test_{@code PropertySource} with the highest precedence.__<h3>Supported Syntax</h3>_<p>The supported syntax for key-value pairs is the same as the_syntax defined for entries in a Java_{@linkplain java.util.Properties#load(java.io.Reader) properties file}:_<ul>_<li>{@code "key=value"}</li>_<li>{@code "key:value"}</li>_<li>{@code "key value"}</li>_</ul>__<h3>Precedence</h3>_<p>Properties declared via this attribute have higher precedence than_properties loaded from resource {@link #locations}.__<p>This attribute may be used in conjunction with {@link #value}_<em>or</em> {@link #locations}.__@see #inheritProperties_@see #locations_@see org.springframework.core.env.PropertySource;String[] properties() default {}_;em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,that,should,be,added,to,the,spring,link,org,springframework,core,env,environment,environment,before,the,code,application,context,is,loaded,for,the,test,all,key,value,pairs,will,be,added,to,the,enclosing,code,environment,as,a,single,test,code,property,source,with,the,highest,precedence,h3,supported,syntax,h3,p,the,supported,syntax,for,key,value,pairs,is,the,same,as,the,syntax,defined,for,entries,in,a,java,linkplain,java,util,properties,load,java,io,reader,properties,file,ul,li,code,key,value,li,li,code,key,value,li,li,code,key,value,li,ul,h3,precedence,h3,p,properties,declared,via,this,attribute,have,higher,precedence,than,properties,loaded,from,resource,link,locations,p,this,attribute,may,be,used,in,conjunction,with,link,value,em,or,em,link,locations,see,inherit,properties,see,locations,see,org,springframework,core,env,property,source;string,properties,default
TestPropertySource -> String[] properties() default {}_;1432246071;<em>Inlined properties</em> in the form of <em>key-value</em> pairs that_should be added to the Spring_{@link org.springframework.core.env.Environment Environment} before the_{@code ApplicationContext} is loaded for the test. All key-value pairs_will be added to the enclosing {@code Environment} as a single test_{@code PropertySource} with the highest precedence.__<h3>Supported Syntax</h3>_<p>The supported syntax for key-value pairs is the same as the_syntax defined for entries in a Java_{@linkplain java.util.Properties#load(java.io.Reader) properties file}:_<ul>_<li>{@code "key=value"}</li>_<li>{@code "key:value"}</li>_<li>{@code "key value"}</li>_</ul>__<h3>Precedence</h3>_<p>Properties declared via this attribute have higher precedence than_properties loaded from resource {@link #locations}.__<p>This attribute may be used in conjunction with {@link #value}_<em>or</em> {@link #locations}.__@see #inheritProperties_@see #locations_@see org.springframework.core.env.PropertySource;String[] properties() default {}_;em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,that,should,be,added,to,the,spring,link,org,springframework,core,env,environment,environment,before,the,code,application,context,is,loaded,for,the,test,all,key,value,pairs,will,be,added,to,the,enclosing,code,environment,as,a,single,test,code,property,source,with,the,highest,precedence,h3,supported,syntax,h3,p,the,supported,syntax,for,key,value,pairs,is,the,same,as,the,syntax,defined,for,entries,in,a,java,linkplain,java,util,properties,load,java,io,reader,properties,file,ul,li,code,key,value,li,li,code,key,value,li,li,code,key,value,li,ul,h3,precedence,h3,p,properties,declared,via,this,attribute,have,higher,precedence,than,properties,loaded,from,resource,link,locations,p,this,attribute,may,be,used,in,conjunction,with,link,value,em,or,em,link,locations,see,inherit,properties,see,locations,see,org,springframework,core,env,property,source;string,properties,default
TestPropertySource -> String[] properties() default {}_;1438176426;<em>Inlined properties</em> in the form of <em>key-value</em> pairs that_should be added to the Spring_{@link org.springframework.core.env.Environment Environment} before the_{@code ApplicationContext} is loaded for the test. All key-value pairs_will be added to the enclosing {@code Environment} as a single test_{@code PropertySource} with the highest precedence.__<h3>Supported Syntax</h3>_<p>The supported syntax for key-value pairs is the same as the_syntax defined for entries in a Java_{@linkplain java.util.Properties#load(java.io.Reader) properties file}:_<ul>_<li>{@code "key=value"}</li>_<li>{@code "key:value"}</li>_<li>{@code "key value"}</li>_</ul>__<h3>Precedence</h3>_<p>Properties declared via this attribute have higher precedence than_properties loaded from resource {@link #locations}.__<p>This attribute may be used in conjunction with {@link #value}_<em>or</em> {@link #locations}.__@see #inheritProperties_@see #locations_@see org.springframework.core.env.PropertySource;String[] properties() default {}_;em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,that,should,be,added,to,the,spring,link,org,springframework,core,env,environment,environment,before,the,code,application,context,is,loaded,for,the,test,all,key,value,pairs,will,be,added,to,the,enclosing,code,environment,as,a,single,test,code,property,source,with,the,highest,precedence,h3,supported,syntax,h3,p,the,supported,syntax,for,key,value,pairs,is,the,same,as,the,syntax,defined,for,entries,in,a,java,linkplain,java,util,properties,load,java,io,reader,properties,file,ul,li,code,key,value,li,li,code,key,value,li,li,code,key,value,li,ul,h3,precedence,h3,p,properties,declared,via,this,attribute,have,higher,precedence,than,properties,loaded,from,resource,link,locations,p,this,attribute,may,be,used,in,conjunction,with,link,value,em,or,em,link,locations,see,inherit,properties,see,locations,see,org,springframework,core,env,property,source;string,properties,default
TestPropertySource -> String[] properties() default {}_;1459842161;<em>Inlined properties</em> in the form of <em>key-value</em> pairs that_should be added to the Spring_{@link org.springframework.core.env.Environment Environment} before the_{@code ApplicationContext} is loaded for the test. All key-value pairs_will be added to the enclosing {@code Environment} as a single test_{@code PropertySource} with the highest precedence._<h3>Supported Syntax</h3>_<p>The supported syntax for key-value pairs is the same as the_syntax defined for entries in a Java_{@linkplain java.util.Properties#load(java.io.Reader) properties file}:_<ul>_<li>{@code "key=value"}</li>_<li>{@code "key:value"}</li>_<li>{@code "key value"}</li>_</ul>_<h3>Precedence</h3>_<p>Properties declared via this attribute have higher precedence than_properties loaded from resource {@link #locations}._<p>This attribute may be used in conjunction with {@link #value}_<em>or</em> {@link #locations}._@see #inheritProperties_@see #locations_@see org.springframework.core.env.PropertySource;String[] properties() default {}_;em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,that,should,be,added,to,the,spring,link,org,springframework,core,env,environment,environment,before,the,code,application,context,is,loaded,for,the,test,all,key,value,pairs,will,be,added,to,the,enclosing,code,environment,as,a,single,test,code,property,source,with,the,highest,precedence,h3,supported,syntax,h3,p,the,supported,syntax,for,key,value,pairs,is,the,same,as,the,syntax,defined,for,entries,in,a,java,linkplain,java,util,properties,load,java,io,reader,properties,file,ul,li,code,key,value,li,li,code,key,value,li,li,code,key,value,li,ul,h3,precedence,h3,p,properties,declared,via,this,attribute,have,higher,precedence,than,properties,loaded,from,resource,link,locations,p,this,attribute,may,be,used,in,conjunction,with,link,value,em,or,em,link,locations,see,inherit,properties,see,locations,see,org,springframework,core,env,property,source;string,properties,default
TestPropertySource -> String[] properties() default {}_;1462470884;<em>Inlined properties</em> in the form of <em>key-value</em> pairs that_should be added to the Spring_{@link org.springframework.core.env.Environment Environment} before the_{@code ApplicationContext} is loaded for the test. All key-value pairs_will be added to the enclosing {@code Environment} as a single test_{@code PropertySource} with the highest precedence._<h3>Supported Syntax</h3>_<p>The supported syntax for key-value pairs is the same as the_syntax defined for entries in a Java_{@linkplain java.util.Properties#load(java.io.Reader) properties file}:_<ul>_<li>{@code "key=value"}</li>_<li>{@code "key:value"}</li>_<li>{@code "key value"}</li>_</ul>_<h3>Precedence</h3>_<p>Properties declared via this attribute have higher precedence than_properties loaded from resource {@link #locations}._<p>This attribute may be used in conjunction with {@link #value}_<em>or</em> {@link #locations}._@see #inheritProperties_@see #locations_@see org.springframework.core.env.PropertySource;String[] properties() default {}_;em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,that,should,be,added,to,the,spring,link,org,springframework,core,env,environment,environment,before,the,code,application,context,is,loaded,for,the,test,all,key,value,pairs,will,be,added,to,the,enclosing,code,environment,as,a,single,test,code,property,source,with,the,highest,precedence,h3,supported,syntax,h3,p,the,supported,syntax,for,key,value,pairs,is,the,same,as,the,syntax,defined,for,entries,in,a,java,linkplain,java,util,properties,load,java,io,reader,properties,file,ul,li,code,key,value,li,li,code,key,value,li,li,code,key,value,li,ul,h3,precedence,h3,p,properties,declared,via,this,attribute,have,higher,precedence,than,properties,loaded,from,resource,link,locations,p,this,attribute,may,be,used,in,conjunction,with,link,value,em,or,em,link,locations,see,inherit,properties,see,locations,see,org,springframework,core,env,property,source;string,properties,default
TestPropertySource -> String[] value() default {}_;1407967503;Alias for {@link #locations}.__<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #locations}, but it may be used <em>instead</em> of {@link #locations}.__@see #locations;String[] value() default {}_;alias,for,link,locations,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,locations,but,it,may,be,used,em,instead,em,of,link,locations,see,locations;string,value,default
TestPropertySource -> String[] value() default {}_;1408896758;Alias for {@link #locations}.__<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #locations}, but it may be used <em>instead</em> of {@link #locations}.__@see #locations;String[] value() default {}_;alias,for,link,locations,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,locations,but,it,may,be,used,em,instead,em,of,link,locations,see,locations;string,value,default
TestPropertySource -> String[] value() default {}_;1424197939;Alias for {@link #locations}.__<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #locations}, but it may be used <em>instead</em> of {@link #locations}.__@see #locations;String[] value() default {}_;alias,for,link,locations,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,locations,but,it,may,be,used,em,instead,em,of,link,locations,see,locations;string,value,default
TestPropertySource -> @AliasFor("locations") 	String[] value() default {}_;1438176426;Alias for {@link #locations}.__<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #locations}, but it may be used <em>instead</em> of {@link #locations}.__@see #locations;@AliasFor("locations")_	String[] value() default {}_;alias,for,link,locations,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,locations,but,it,may,be,used,em,instead,em,of,link,locations,see,locations;alias,for,locations,string,value,default
TestPropertySource -> @AliasFor("locations") 	String[] value() default {}_;1459842161;Alias for {@link #locations}._<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #locations}, but it may be used <em>instead</em> of {@link #locations}._@see #locations;@AliasFor("locations")_	String[] value() default {}_;alias,for,link,locations,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,locations,but,it,may,be,used,em,instead,em,of,link,locations,see,locations;alias,for,locations,string,value,default
TestPropertySource -> @AliasFor("locations") 	String[] value() default {}_;1462470884;Alias for {@link #locations}._<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #locations}, but it may be used <em>instead</em> of {@link #locations}._@see #locations;@AliasFor("locations")_	String[] value() default {}_;alias,for,link,locations,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,locations,but,it,may,be,used,em,instead,em,of,link,locations,see,locations;alias,for,locations,string,value,default
TestPropertySource -> boolean inheritProperties() default true_;1407967503;Whether or not inlined test {@link #properties} from superclasses should_be <em>inherited</em>.__<p>The default value is {@code true}, which means that a test class will_<em>inherit</em> inlined properties defined by a superclass. Specifically,_the inlined properties for a test class will be appended to the list of_inlined properties defined by a superclass. Thus, subclasses have the_option of <em>extending</em> the list of inlined test properties.__<p>If {@code inheritProperties} is set to {@code false}, the inlined_properties for the test class will <em>shadow</em> and effectively_replace any inlined properties defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the inlined {@code key1}_property. In contrast, the {@code ApplicationContext} for_{@code ExtendedTest} will be loaded using the inlined {@code key1}_<strong>and</strong> {@code key2} properties._<pre class="code">_&#064_TestPropertySource(properties = &quot_key1 = value1&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_TestPropertySource(properties = &quot_key2 = value2&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__@see #properties;boolean inheritProperties() default true_;whether,or,not,inlined,test,link,properties,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,inlined,properties,defined,by,a,superclass,specifically,the,inlined,properties,for,a,test,class,will,be,appended,to,the,list,of,inlined,properties,defined,by,a,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,inlined,test,properties,p,if,code,inherit,properties,is,set,to,code,false,the,inlined,properties,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,inlined,properties,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,inlined,code,key1,property,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,inlined,code,key1,strong,and,strong,code,key2,properties,pre,class,code,064,test,property,source,properties,quot,key1,value1,quot,064,context,configuration,public,class,base,test,064,test,property,source,properties,quot,key2,value2,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,see,properties;boolean,inherit,properties,default,true
TestPropertySource -> boolean inheritProperties() default true_;1408896758;Whether or not inlined test {@link #properties} from superclasses should_be <em>inherited</em>.__<p>The default value is {@code true}, which means that a test class will_<em>inherit</em> inlined properties defined by a superclass. Specifically,_the inlined properties for a test class will be appended to the list of_inlined properties defined by a superclass. Thus, subclasses have the_option of <em>extending</em> the list of inlined test properties.__<p>If {@code inheritProperties} is set to {@code false}, the inlined_properties for the test class will <em>shadow</em> and effectively_replace any inlined properties defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the inlined {@code key1}_property. In contrast, the {@code ApplicationContext} for_{@code ExtendedTest} will be loaded using the inlined {@code key1}_<strong>and</strong> {@code key2} properties._<pre class="code">_&#064_TestPropertySource(properties = &quot_key1 = value1&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_TestPropertySource(properties = &quot_key2 = value2&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__@see #properties;boolean inheritProperties() default true_;whether,or,not,inlined,test,link,properties,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,inlined,properties,defined,by,a,superclass,specifically,the,inlined,properties,for,a,test,class,will,be,appended,to,the,list,of,inlined,properties,defined,by,a,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,inlined,test,properties,p,if,code,inherit,properties,is,set,to,code,false,the,inlined,properties,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,inlined,properties,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,inlined,code,key1,property,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,inlined,code,key1,strong,and,strong,code,key2,properties,pre,class,code,064,test,property,source,properties,quot,key1,value1,quot,064,context,configuration,public,class,base,test,064,test,property,source,properties,quot,key2,value2,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,see,properties;boolean,inherit,properties,default,true
TestPropertySource -> boolean inheritProperties() default true_;1424197939;Whether or not inlined test {@link #properties} from superclasses should_be <em>inherited</em>.__<p>The default value is {@code true}, which means that a test class will_<em>inherit</em> inlined properties defined by a superclass. Specifically,_the inlined properties for a test class will be appended to the list of_inlined properties defined by a superclass. Thus, subclasses have the_option of <em>extending</em> the list of inlined test properties.__<p>If {@code inheritProperties} is set to {@code false}, the inlined_properties for the test class will <em>shadow</em> and effectively_replace any inlined properties defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the inlined {@code key1}_property. In contrast, the {@code ApplicationContext} for_{@code ExtendedTest} will be loaded using the inlined {@code key1}_<strong>and</strong> {@code key2} properties._<pre class="code">_&#064_TestPropertySource(properties = &quot_key1 = value1&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_TestPropertySource(properties = &quot_key2 = value2&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__@see #properties;boolean inheritProperties() default true_;whether,or,not,inlined,test,link,properties,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,inlined,properties,defined,by,a,superclass,specifically,the,inlined,properties,for,a,test,class,will,be,appended,to,the,list,of,inlined,properties,defined,by,a,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,inlined,test,properties,p,if,code,inherit,properties,is,set,to,code,false,the,inlined,properties,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,inlined,properties,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,inlined,code,key1,property,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,inlined,code,key1,strong,and,strong,code,key2,properties,pre,class,code,064,test,property,source,properties,quot,key1,value1,quot,064,context,configuration,public,class,base,test,064,test,property,source,properties,quot,key2,value2,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,see,properties;boolean,inherit,properties,default,true
TestPropertySource -> boolean inheritProperties() default true_;1432246071;Whether or not inlined test {@link #properties} from superclasses should_be <em>inherited</em>.__<p>The default value is {@code true}, which means that a test class will_<em>inherit</em> inlined properties defined by a superclass. Specifically,_the inlined properties for a test class will be appended to the list of_inlined properties defined by a superclass. Thus, subclasses have the_option of <em>extending</em> the list of inlined test properties.__<p>If {@code inheritProperties} is set to {@code false}, the inlined_properties for the test class will <em>shadow</em> and effectively_replace any inlined properties defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the inlined {@code key1}_property. In contrast, the {@code ApplicationContext} for_{@code ExtendedTest} will be loaded using the inlined {@code key1}_<strong>and</strong> {@code key2} properties._<pre class="code">_&#064_TestPropertySource(properties = &quot_key1 = value1&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_TestPropertySource(properties = &quot_key2 = value2&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__@see #properties;boolean inheritProperties() default true_;whether,or,not,inlined,test,link,properties,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,inlined,properties,defined,by,a,superclass,specifically,the,inlined,properties,for,a,test,class,will,be,appended,to,the,list,of,inlined,properties,defined,by,a,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,inlined,test,properties,p,if,code,inherit,properties,is,set,to,code,false,the,inlined,properties,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,inlined,properties,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,inlined,code,key1,property,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,inlined,code,key1,strong,and,strong,code,key2,properties,pre,class,code,064,test,property,source,properties,quot,key1,value1,quot,064,context,configuration,public,class,base,test,064,test,property,source,properties,quot,key2,value2,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,see,properties;boolean,inherit,properties,default,true
TestPropertySource -> boolean inheritProperties() default true_;1438176426;Whether or not inlined test {@link #properties} from superclasses should_be <em>inherited</em>.__<p>The default value is {@code true}, which means that a test class will_<em>inherit</em> inlined properties defined by a superclass. Specifically,_the inlined properties for a test class will be appended to the list of_inlined properties defined by a superclass. Thus, subclasses have the_option of <em>extending</em> the list of inlined test properties.__<p>If {@code inheritProperties} is set to {@code false}, the inlined_properties for the test class will <em>shadow</em> and effectively_replace any inlined properties defined by a superclass.__<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the inlined {@code key1}_property. In contrast, the {@code ApplicationContext} for_{@code ExtendedTest} will be loaded using the inlined {@code key1}_<strong>and</strong> {@code key2} properties._<pre class="code">_&#064_TestPropertySource(properties = &quot_key1 = value1&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...___&#064_TestPropertySource(properties = &quot_key2 = value2&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>__@see #properties;boolean inheritProperties() default true_;whether,or,not,inlined,test,link,properties,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,inlined,properties,defined,by,a,superclass,specifically,the,inlined,properties,for,a,test,class,will,be,appended,to,the,list,of,inlined,properties,defined,by,a,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,inlined,test,properties,p,if,code,inherit,properties,is,set,to,code,false,the,inlined,properties,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,inlined,properties,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,inlined,code,key1,property,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,inlined,code,key1,strong,and,strong,code,key2,properties,pre,class,code,064,test,property,source,properties,quot,key1,value1,quot,064,context,configuration,public,class,base,test,064,test,property,source,properties,quot,key2,value2,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,see,properties;boolean,inherit,properties,default,true
TestPropertySource -> boolean inheritProperties() default true_;1459842161;Whether or not inlined test {@link #properties} from superclasses should_be <em>inherited</em>._<p>The default value is {@code true}, which means that a test class will_<em>inherit</em> inlined properties defined by a superclass. Specifically,_the inlined properties for a test class will be appended to the list of_inlined properties defined by a superclass. Thus, subclasses have the_option of <em>extending</em> the list of inlined test properties._<p>If {@code inheritProperties} is set to {@code false}, the inlined_properties for the test class will <em>shadow</em> and effectively_replace any inlined properties defined by a superclass._<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the inlined {@code key1}_property. In contrast, the {@code ApplicationContext} for_{@code ExtendedTest} will be loaded using the inlined {@code key1}_<strong>and</strong> {@code key2} properties._<pre class="code">_&#064_TestPropertySource(properties = &quot_key1 = value1&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...__&#064_TestPropertySource(properties = &quot_key2 = value2&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>_@see #properties;boolean inheritProperties() default true_;whether,or,not,inlined,test,link,properties,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,inlined,properties,defined,by,a,superclass,specifically,the,inlined,properties,for,a,test,class,will,be,appended,to,the,list,of,inlined,properties,defined,by,a,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,inlined,test,properties,p,if,code,inherit,properties,is,set,to,code,false,the,inlined,properties,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,inlined,properties,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,inlined,code,key1,property,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,inlined,code,key1,strong,and,strong,code,key2,properties,pre,class,code,064,test,property,source,properties,quot,key1,value1,quot,064,context,configuration,public,class,base,test,064,test,property,source,properties,quot,key2,value2,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,see,properties;boolean,inherit,properties,default,true
TestPropertySource -> boolean inheritProperties() default true_;1462470884;Whether or not inlined test {@link #properties} from superclasses should_be <em>inherited</em>._<p>The default value is {@code true}, which means that a test class will_<em>inherit</em> inlined properties defined by a superclass. Specifically,_the inlined properties for a test class will be appended to the list of_inlined properties defined by a superclass. Thus, subclasses have the_option of <em>extending</em> the list of inlined test properties._<p>If {@code inheritProperties} is set to {@code false}, the inlined_properties for the test class will <em>shadow</em> and effectively_replace any inlined properties defined by a superclass._<p>In the following example, the {@code ApplicationContext} for_{@code BaseTest} will be loaded using only the inlined {@code key1}_property. In contrast, the {@code ApplicationContext} for_{@code ExtendedTest} will be loaded using the inlined {@code key1}_<strong>and</strong> {@code key2} properties._<pre class="code">_&#064_TestPropertySource(properties = &quot_key1 = value1&quot_)_&#064_ContextConfiguration_public class BaseTest {_// ...__&#064_TestPropertySource(properties = &quot_key2 = value2&quot_)_&#064_ContextConfiguration_public class ExtendedTest extends BaseTest {_// ...__</pre>_@see #properties;boolean inheritProperties() default true_;whether,or,not,inlined,test,link,properties,from,superclasses,should,be,em,inherited,em,p,the,default,value,is,code,true,which,means,that,a,test,class,will,em,inherit,em,inlined,properties,defined,by,a,superclass,specifically,the,inlined,properties,for,a,test,class,will,be,appended,to,the,list,of,inlined,properties,defined,by,a,superclass,thus,subclasses,have,the,option,of,em,extending,em,the,list,of,inlined,test,properties,p,if,code,inherit,properties,is,set,to,code,false,the,inlined,properties,for,the,test,class,will,em,shadow,em,and,effectively,replace,any,inlined,properties,defined,by,a,superclass,p,in,the,following,example,the,code,application,context,for,code,base,test,will,be,loaded,using,only,the,inlined,code,key1,property,in,contrast,the,code,application,context,for,code,extended,test,will,be,loaded,using,the,inlined,code,key1,strong,and,strong,code,key2,properties,pre,class,code,064,test,property,source,properties,quot,key1,value1,quot,064,context,configuration,public,class,base,test,064,test,property,source,properties,quot,key2,value2,quot,064,context,configuration,public,class,extended,test,extends,base,test,pre,see,properties;boolean,inherit,properties,default,true
TestPropertySource -> @AliasFor("value") 	String[] locations() default {}_;1438176426;The resource locations of properties files to be loaded into the_{@code Environment}'s set of {@code PropertySources}. Each location_will be added to the enclosing {@code Environment} as its own property_source, in the order declared.__<h3>Supported File Formats</h3>_<p>Both traditional and XML-based properties file formats are supported_&mdash_ for example, {@code "classpath:/com/example/test.properties"}_or {@code "file:/path/to/file.xml"}.__<h3>Path Resource Semantics</h3>_<p>Each path will be interpreted as a Spring_{@link org.springframework.core.io.Resource Resource}. A plain path_&mdash_ for example, {@code "test.properties"} &mdash_ will be treated as a_classpath resource that is <em>relative</em> to the package in which the_test class is defined. A path starting with a slash will be treated as an_<em>absolute</em> classpath resource, for example:_{@code "/org/example/test.xml"}. A path which references a_URL (e.g., a path prefixed with_{@link org.springframework.util.ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link org.springframework.util.ResourceUtils#FILE_URL_PREFIX file:},_{@code http:}, etc.) will be loaded using the specified resource protocol._Resource location wildcards (e.g. <code>*&#42_/*.properties</code>)_are not permitted: each location must evaluate to exactly one_{@code .properties} or {@code .xml} resource. Property placeholders_in paths (i.e., <code>${...}</code>) will be_{@linkplain org.springframework.core.env.Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}.__<h3>Default Properties File Detection</h3>_<p>See the class-level Javadoc for a discussion on detection of defaults.__<h3>Precedence</h3>_<p>Properties loaded from resource locations have lower precedence than_inlined {@link #properties}.__<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #value}, but it may be used <em>instead</em> of {@link #value}.__@see #inheritLocations_@see #value_@see #properties_@see org.springframework.core.env.PropertySource;@AliasFor("value")_	String[] locations() default {}_;the,resource,locations,of,properties,files,to,be,loaded,into,the,code,environment,s,set,of,code,property,sources,each,location,will,be,added,to,the,enclosing,code,environment,as,its,own,property,source,in,the,order,declared,h3,supported,file,formats,h3,p,both,traditional,and,xml,based,properties,file,formats,are,supported,mdash,for,example,code,classpath,com,example,test,properties,or,code,file,path,to,file,xml,h3,path,resource,semantics,h3,p,each,path,will,be,interpreted,as,a,spring,link,org,springframework,core,io,resource,resource,a,plain,path,mdash,for,example,code,test,properties,mdash,will,be,treated,as,a,classpath,resource,that,is,em,relative,em,to,the,package,in,which,the,test,class,is,defined,a,path,starting,with,a,slash,will,be,treated,as,an,em,absolute,em,classpath,resource,for,example,code,org,example,test,xml,a,path,which,references,a,url,e,g,a,path,prefixed,with,link,org,springframework,util,resource,utils,classpath,link,org,springframework,util,resource,utils,file,code,http,etc,will,be,loaded,using,the,specified,resource,protocol,resource,location,wildcards,e,g,code,42,properties,code,are,not,permitted,each,location,must,evaluate,to,exactly,one,code,properties,or,code,xml,resource,property,placeholders,in,paths,i,e,code,code,will,be,linkplain,org,springframework,core,env,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,h3,default,properties,file,detection,h3,p,see,the,class,level,javadoc,for,a,discussion,on,detection,of,defaults,h3,precedence,h3,p,properties,loaded,from,resource,locations,have,lower,precedence,than,inlined,link,properties,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,value,but,it,may,be,used,em,instead,em,of,link,value,see,inherit,locations,see,value,see,properties,see,org,springframework,core,env,property,source;alias,for,value,string,locations,default
TestPropertySource -> @AliasFor("value") 	String[] locations() default {}_;1459842161;The resource locations of properties files to be loaded into the_{@code Environment}'s set of {@code PropertySources}. Each location_will be added to the enclosing {@code Environment} as its own property_source, in the order declared._<h3>Supported File Formats</h3>_<p>Both traditional and XML-based properties file formats are supported_&mdash_ for example, {@code "classpath:/com/example/test.properties"}_or {@code "file:/path/to/file.xml"}._<h3>Path Resource Semantics</h3>_<p>Each path will be interpreted as a Spring_{@link org.springframework.core.io.Resource Resource}. A plain path_&mdash_ for example, {@code "test.properties"} &mdash_ will be treated as a_classpath resource that is <em>relative</em> to the package in which the_test class is defined. A path starting with a slash will be treated as an_<em>absolute</em> classpath resource, for example:_{@code "/org/example/test.xml"}. A path which references a_URL (e.g., a path prefixed with_{@link org.springframework.util.ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link org.springframework.util.ResourceUtils#FILE_URL_PREFIX file:},_{@code http:}, etc.) will be loaded using the specified resource protocol._Resource location wildcards (e.g. <code>*&#42_/*.properties</code>)_are not permitted: each location must evaluate to exactly one_{@code .properties} or {@code .xml} resource. Property placeholders_in paths (i.e., <code>${...}</code>) will be_{@linkplain org.springframework.core.env.Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<h3>Default Properties File Detection</h3>_<p>See the class-level Javadoc for a discussion on detection of defaults._<h3>Precedence</h3>_<p>Properties loaded from resource locations have lower precedence than_inlined {@link #properties}._<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #value}, but it may be used <em>instead</em> of {@link #value}._@see #inheritLocations_@see #value_@see #properties_@see org.springframework.core.env.PropertySource;@AliasFor("value")_	String[] locations() default {}_;the,resource,locations,of,properties,files,to,be,loaded,into,the,code,environment,s,set,of,code,property,sources,each,location,will,be,added,to,the,enclosing,code,environment,as,its,own,property,source,in,the,order,declared,h3,supported,file,formats,h3,p,both,traditional,and,xml,based,properties,file,formats,are,supported,mdash,for,example,code,classpath,com,example,test,properties,or,code,file,path,to,file,xml,h3,path,resource,semantics,h3,p,each,path,will,be,interpreted,as,a,spring,link,org,springframework,core,io,resource,resource,a,plain,path,mdash,for,example,code,test,properties,mdash,will,be,treated,as,a,classpath,resource,that,is,em,relative,em,to,the,package,in,which,the,test,class,is,defined,a,path,starting,with,a,slash,will,be,treated,as,an,em,absolute,em,classpath,resource,for,example,code,org,example,test,xml,a,path,which,references,a,url,e,g,a,path,prefixed,with,link,org,springframework,util,resource,utils,classpath,link,org,springframework,util,resource,utils,file,code,http,etc,will,be,loaded,using,the,specified,resource,protocol,resource,location,wildcards,e,g,code,42,properties,code,are,not,permitted,each,location,must,evaluate,to,exactly,one,code,properties,or,code,xml,resource,property,placeholders,in,paths,i,e,code,code,will,be,linkplain,org,springframework,core,env,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,h3,default,properties,file,detection,h3,p,see,the,class,level,javadoc,for,a,discussion,on,detection,of,defaults,h3,precedence,h3,p,properties,loaded,from,resource,locations,have,lower,precedence,than,inlined,link,properties,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,value,but,it,may,be,used,em,instead,em,of,link,value,see,inherit,locations,see,value,see,properties,see,org,springframework,core,env,property,source;alias,for,value,string,locations,default
TestPropertySource -> @AliasFor("value") 	String[] locations() default {}_;1462470884;The resource locations of properties files to be loaded into the_{@code Environment}'s set of {@code PropertySources}. Each location_will be added to the enclosing {@code Environment} as its own property_source, in the order declared._<h3>Supported File Formats</h3>_<p>Both traditional and XML-based properties file formats are supported_&mdash_ for example, {@code "classpath:/com/example/test.properties"}_or {@code "file:/path/to/file.xml"}._<h3>Path Resource Semantics</h3>_<p>Each path will be interpreted as a Spring_{@link org.springframework.core.io.Resource Resource}. A plain path_&mdash_ for example, {@code "test.properties"} &mdash_ will be treated as a_classpath resource that is <em>relative</em> to the package in which the_test class is defined. A path starting with a slash will be treated as an_<em>absolute</em> classpath resource, for example:_{@code "/org/example/test.xml"}. A path which references a_URL (e.g., a path prefixed with_{@link org.springframework.util.ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link org.springframework.util.ResourceUtils#FILE_URL_PREFIX file:},_{@code http:}, etc.) will be loaded using the specified resource protocol._Resource location wildcards (e.g. <code>*&#42_/*.properties</code>)_are not permitted: each location must evaluate to exactly one_{@code .properties} or {@code .xml} resource. Property placeholders_in paths (i.e., <code>${...}</code>) will be_{@linkplain org.springframework.core.env.Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<h3>Default Properties File Detection</h3>_<p>See the class-level Javadoc for a discussion on detection of defaults._<h3>Precedence</h3>_<p>Properties loaded from resource locations have lower precedence than_inlined {@link #properties}._<p>This attribute may <strong>not</strong> be used in conjunction with_{@link #value}, but it may be used <em>instead</em> of {@link #value}._@see #inheritLocations_@see #value_@see #properties_@see org.springframework.core.env.PropertySource;@AliasFor("value")_	String[] locations() default {}_;the,resource,locations,of,properties,files,to,be,loaded,into,the,code,environment,s,set,of,code,property,sources,each,location,will,be,added,to,the,enclosing,code,environment,as,its,own,property,source,in,the,order,declared,h3,supported,file,formats,h3,p,both,traditional,and,xml,based,properties,file,formats,are,supported,mdash,for,example,code,classpath,com,example,test,properties,or,code,file,path,to,file,xml,h3,path,resource,semantics,h3,p,each,path,will,be,interpreted,as,a,spring,link,org,springframework,core,io,resource,resource,a,plain,path,mdash,for,example,code,test,properties,mdash,will,be,treated,as,a,classpath,resource,that,is,em,relative,em,to,the,package,in,which,the,test,class,is,defined,a,path,starting,with,a,slash,will,be,treated,as,an,em,absolute,em,classpath,resource,for,example,code,org,example,test,xml,a,path,which,references,a,url,e,g,a,path,prefixed,with,link,org,springframework,util,resource,utils,classpath,link,org,springframework,util,resource,utils,file,code,http,etc,will,be,loaded,using,the,specified,resource,protocol,resource,location,wildcards,e,g,code,42,properties,code,are,not,permitted,each,location,must,evaluate,to,exactly,one,code,properties,or,code,xml,resource,property,placeholders,in,paths,i,e,code,code,will,be,linkplain,org,springframework,core,env,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,h3,default,properties,file,detection,h3,p,see,the,class,level,javadoc,for,a,discussion,on,detection,of,defaults,h3,precedence,h3,p,properties,loaded,from,resource,locations,have,lower,precedence,than,inlined,link,properties,p,this,attribute,may,strong,not,strong,be,used,in,conjunction,with,link,value,but,it,may,be,used,em,instead,em,of,link,value,see,inherit,locations,see,value,see,properties,see,org,springframework,core,env,property,source;alias,for,value,string,locations,default
