commented;modifiers;parameterAmount;loc;comment;code
true;public;1;6;/**  * Evaluate the XPath and assert the {@link Node} content found with the  * given Hamcrest {@link Matcher}.  */ ;/**  * Evaluate the XPath and assert the {@link Node} content found with the  * given Hamcrest {@link Matcher}.  */ public ResultMatcher node(final Matcher<? super Node> matcher) {     return result -> {         MockHttpServletResponse response = result.getResponse().         this.xpathHelper.assertNode(response.getContentAsByteArray(), getDefinedEncoding(response), matcher).     }. }
true;private;1;4;/**  * Get the response encoding if explicitly defined in the response, {code null} otherwise.  */ ;/**  * Get the response encoding if explicitly defined in the response, {code null} otherwise.  */ @Nullable private String getDefinedEncoding(MockHttpServletResponse response) {     return (response.isCharset() ? response.getCharacterEncoding() : null). }
true;public;0;6;/**  * Evaluate the XPath and assert that content exists.  */ ;/**  * Evaluate the XPath and assert that content exists.  */ public ResultMatcher exists() {     return result -> {         MockHttpServletResponse response = result.getResponse().         this.xpathHelper.exists(response.getContentAsByteArray(), getDefinedEncoding(response)).     }. }
true;public;0;6;/**  * Evaluate the XPath and assert that content doesn't exist.  */ ;/**  * Evaluate the XPath and assert that content doesn't exist.  */ public ResultMatcher doesNotExist() {     return result -> {         MockHttpServletResponse response = result.getResponse().         this.xpathHelper.doesNotExist(response.getContentAsByteArray(), getDefinedEncoding(response)).     }. }
true;public;1;6;/**  * Evaluate the XPath and assert the number of nodes found with the given  * Hamcrest {@link Matcher}.  */ ;/**  * Evaluate the XPath and assert the number of nodes found with the given  * Hamcrest {@link Matcher}.  */ public ResultMatcher nodeCount(final Matcher<Integer> matcher) {     return result -> {         MockHttpServletResponse response = result.getResponse().         this.xpathHelper.assertNodeCount(response.getContentAsByteArray(), getDefinedEncoding(response), matcher).     }. }
true;public;1;6;/**  * Evaluate the XPath and assert the number of nodes found.  */ ;/**  * Evaluate the XPath and assert the number of nodes found.  */ public ResultMatcher nodeCount(final int expectedCount) {     return result -> {         MockHttpServletResponse response = result.getResponse().         this.xpathHelper.assertNodeCount(response.getContentAsByteArray(), getDefinedEncoding(response), expectedCount).     }. }
true;public;1;6;/**  * Apply the XPath and assert the {@link String} value found with the given  * Hamcrest {@link Matcher}.  */ ;/**  * Apply the XPath and assert the {@link String} value found with the given  * Hamcrest {@link Matcher}.  */ public ResultMatcher string(final Matcher<? super String> matcher) {     return result -> {         MockHttpServletResponse response = result.getResponse().         this.xpathHelper.assertString(response.getContentAsByteArray(), getDefinedEncoding(response), matcher).     }. }
true;public;1;6;/**  * Apply the XPath and assert the {@link String} value found.  */ ;/**  * Apply the XPath and assert the {@link String} value found.  */ public ResultMatcher string(final String expectedValue) {     return result -> {         MockHttpServletResponse response = result.getResponse().         this.xpathHelper.assertString(response.getContentAsByteArray(), getDefinedEncoding(response), expectedValue).     }. }
true;public;1;6;/**  * Evaluate the XPath and assert the {@link Double} value found with the  * given Hamcrest {@link Matcher}.  */ ;/**  * Evaluate the XPath and assert the {@link Double} value found with the  * given Hamcrest {@link Matcher}.  */ public ResultMatcher number(final Matcher<? super Double> matcher) {     return result -> {         MockHttpServletResponse response = result.getResponse().         this.xpathHelper.assertNumber(response.getContentAsByteArray(), getDefinedEncoding(response), matcher).     }. }
true;public;1;6;/**  * Evaluate the XPath and assert the {@link Double} value found.  */ ;/**  * Evaluate the XPath and assert the {@link Double} value found.  */ public ResultMatcher number(final Double expectedValue) {     return result -> {         MockHttpServletResponse response = result.getResponse().         this.xpathHelper.assertNumber(response.getContentAsByteArray(), getDefinedEncoding(response), expectedValue).     }. }
true;public;1;6;/**  * Evaluate the XPath and assert the {@link Boolean} value found.  */ ;/**  * Evaluate the XPath and assert the {@link Boolean} value found.  */ public ResultMatcher booleanValue(final Boolean value) {     return result -> {         MockHttpServletResponse response = result.getResponse().         this.xpathHelper.assertBoolean(response.getContentAsByteArray(), getDefinedEncoding(response), value).     }. }
