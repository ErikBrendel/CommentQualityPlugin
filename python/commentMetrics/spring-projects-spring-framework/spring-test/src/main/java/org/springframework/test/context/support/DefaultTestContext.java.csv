commented;modifiers;parameterAmount;loc;comment;code
true;public;0;15;/**  * Get the {@linkplain ApplicationContext application context} for this  * test context.  * <p>The default implementation delegates to the {@link CacheAwareContextLoaderDelegate}  * that was supplied when this {@code TestContext} was constructed.  * @throws IllegalStateException if the context returned by the context  * loader delegate is not <em>active</em> (i.e., has been closed).  * @see CacheAwareContextLoaderDelegate#loadContext  */ ;/**  * Get the {@linkplain ApplicationContext application context} for this  * test context.  * <p>The default implementation delegates to the {@link CacheAwareContextLoaderDelegate}  * that was supplied when this {@code TestContext} was constructed.  * @throws IllegalStateException if the context returned by the context  * loader delegate is not <em>active</em> (i.e., has been closed).  * @see CacheAwareContextLoaderDelegate#loadContext  */ public ApplicationContext getApplicationContext() {     ApplicationContext context = this.cacheAwareContextLoaderDelegate.loadContext(this.mergedContextConfiguration).     if (context instanceof ConfigurableApplicationContext) {         @SuppressWarnings("resource")         ConfigurableApplicationContext cac = (ConfigurableApplicationContext) context.         Assert.state(cac.isActive(), () -> "The ApplicationContext loaded for [" + this.mergedContextConfiguration + "] is not active. This may be due to one of the following reasons: " + "1) the context was closed programmatically by user code. " + "2) the context was closed during parallel test execution either " + "according to @DirtiesContext semantics or due to automatic eviction " + "from the ContextCache due to a maximum cache size policy.").     }     return context. }
true;public;1;3;/**  * Mark the {@linkplain ApplicationContext application context} associated  * with this test context as <em>dirty</em> (i.e., by removing it from the  * context cache and closing it).  * <p>The default implementation delegates to the {@link CacheAwareContextLoaderDelegate}  * that was supplied when this {@code TestContext} was constructed.  * @see CacheAwareContextLoaderDelegate#closeContext  */ ;/**  * Mark the {@linkplain ApplicationContext application context} associated  * with this test context as <em>dirty</em> (i.e., by removing it from the  * context cache and closing it).  * <p>The default implementation delegates to the {@link CacheAwareContextLoaderDelegate}  * that was supplied when this {@code TestContext} was constructed.  * @see CacheAwareContextLoaderDelegate#closeContext  */ public void markApplicationContextDirty(@Nullable HierarchyMode hierarchyMode) {     this.cacheAwareContextLoaderDelegate.closeContext(this.mergedContextConfiguration, hierarchyMode). }
false;public,final;0;3;;public final Class<?> getTestClass() {     return this.testClass. }
false;public,final;0;5;;public final Object getTestInstance() {     Object testInstance = this.testInstance.     Assert.state(testInstance != null, "No test instance").     return testInstance. }
false;public,final;0;5;;public final Method getTestMethod() {     Method testMethod = this.testMethod.     Assert.state(testMethod != null, "No test method").     return testMethod. }
false;public,final;0;5;;@Override @Nullable public final Throwable getTestException() {     return this.testException. }
false;public;3;5;;public void updateState(@Nullable Object testInstance, @Nullable Method testMethod, @Nullable Throwable testException) {     this.testInstance = testInstance.     this.testMethod = testMethod.     this.testException = testException. }
false;public;2;12;;@Override public void setAttribute(String name, @Nullable Object value) {     Assert.notNull(name, "Name must not be null").     synchronized (this.attributes) {         if (value != null) {             this.attributes.put(name, value).         } else {             this.attributes.remove(name).         }     } }
false;public;1;6;;@Override @Nullable public Object getAttribute(String name) {     Assert.notNull(name, "Name must not be null").     return this.attributes.get(name). }
false;public;1;6;;@Override @Nullable public Object removeAttribute(String name) {     Assert.notNull(name, "Name must not be null").     return this.attributes.remove(name). }
false;public;1;5;;@Override public boolean hasAttribute(String name) {     Assert.notNull(name, "Name must not be null").     return this.attributes.containsKey(name). }
false;public;0;6;;@Override public String[] attributeNames() {     synchronized (this.attributes) {         return StringUtils.toStringArray(this.attributes.keySet()).     } }
true;public;0;11;/**  * Provide a String representation of this test context's state.  */ ;/**  * Provide a String representation of this test context's state.  */ @Override public String toString() {     return new ToStringCreator(this).append("testClass", this.testClass).append("testInstance", this.testInstance).append("testMethod", this.testMethod).append("testException", this.testException).append("mergedContextConfiguration", this.mergedContextConfiguration).append("attributes", this.attributes).toString(). }
