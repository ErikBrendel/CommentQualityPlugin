# id;timestamp;commentText;codeText;commentWords;codeWords
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, 			String[] inlinedProperties);1424138964;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the {@link Environment} of the supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated_@param inlinedProperties the inlined properties to add to the environment_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context,_			String[] inlinedProperties) {_		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, 			String[] inlinedProperties);1424198572;Add the given <em>inlined properties</em> to the {@link Environment} of the_supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated__never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context,_			String[] inlinedProperties) {_		Assert.notNull(context, "context must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,assert,not,null,context,context,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, 			String[] inlinedProperties);1432018141;Add the given <em>inlined properties</em> to the {@link Environment} of the_supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated__never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context,_			String[] inlinedProperties) {_		Assert.notNull(context, "context must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,assert,not,null,context,context,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, 			String[] inlinedProperties);1432856630;Add the given <em>inlined properties</em> to the {@link Environment} of the_supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated__never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context,_			String[] inlinedProperties) {_		Assert.notNull(context, "context must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,assert,not,null,context,context,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, 			String[] inlinedProperties);1434234880;Add the given <em>inlined properties</em> to the {@link Environment} of the_supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated__never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context,_			String[] inlinedProperties) {_		Assert.notNull(context, "context must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,assert,not,null,context,context,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, 			String... inlinedProperties);1458929547;Add the given <em>inlined properties</em> to the {@link Environment} of the_supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated__never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context,_			String... inlinedProperties) {_		Assert.notNull(context, "context must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,assert,not,null,context,context,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, 			String... inlinedProperties);1460041357;Add the given <em>inlined properties</em> to the {@link Environment} of the_supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated__never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context,_			String... inlinedProperties) {_		Assert.notNull(context, "context must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,assert,not,null,context,context,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, 			String... inlinedProperties);1465306936;Add the given <em>inlined properties</em> to the {@link Environment} of the_supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated__never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context,_			String... inlinedProperties) {_		Assert.notNull(context, "context must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,assert,not,null,context,context,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties);1467677340;Add the given <em>inlined properties</em> to the {@link Environment} of the_supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated__never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties) {_		Assert.notNull(context, "context must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,assert,not,null,context,context,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties);1467730834;Add the given <em>inlined properties</em> to the {@link Environment} of the_supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated__never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties) {_		Assert.notNull(context, "context must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,assert,not,null,context,context,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties);1467821493;Add the given <em>inlined properties</em> to the {@link Environment} of the_supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated__never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties) {_		Assert.notNull(context, "'context' must not be null")__		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,assert,not,null,context,context,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties);1468426720;Add the given <em>inlined properties</em> to the {@link Environment} of the_supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated__never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties) {_		Assert.notNull(context, "'context' must not be null")__		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,assert,not,null,context,context,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties);1472834371;Add the given <em>inlined properties</em> to the {@link Environment} of the_supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated__never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties) {_		Assert.notNull(context, "'context' must not be null")__		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,assert,not,null,context,context,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties);1474905889;Add the given <em>inlined properties</em> to the {@link Environment} of the_supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated__never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties) {_		Assert.notNull(context, "'context' must not be null")__		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,assert,not,null,context,context,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties);1496955179;Add the given <em>inlined properties</em> to the {@link Environment} of the_supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated__never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties) {_		Assert.notNull(context, "'context' must not be null")__		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,assert,not,null,context,context,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties);1497341594;Add the given <em>inlined properties</em> to the {@link Environment} of the_supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated__never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties) {_		Assert.notNull(context, "'context' must not be null")__		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,assert,not,null,context,context,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties);1530174524;Add the given <em>inlined properties</em> to the {@link Environment} of the_supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated__never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties) {_		Assert.notNull(context, "'context' must not be null")__		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,assert,not,null,context,context,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties);1530174524;Add the given <em>inlined properties</em> to the {@link Environment} of the_supplied {@code context}._<p>This method simply delegates to_{@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}._@param context the application context whose environment should be updated__never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see TestPropertySource#properties_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context, String... inlinedProperties) {_		Assert.notNull(context, "'context' must not be null")__		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties)__	};add,the,given,em,inlined,properties,em,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,inlined,properties,to,environment,configurable,environment,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,test,property,source,properties,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,void,add,inlined,properties,to,environment,configurable,application,context,context,string,inlined,properties,assert,not,null,context,context,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,add,inlined,properties,to,environment,context,get,environment,inlined,properties
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, 			String[] locations);1424138964;Add the {@link Properties} files from the given resource {@code locations}_to the {@link Environment} of the supplied {@code context}._<p>Each properties file will be converted to a {@code ResourcePropertySource}_that will be added to the {@link PropertySources} of the environment with_highest precedence._@param context the application context whose environment should be updated_@param locations the resource locations of {@link Properties} files to add_to the environment_@since 4.1.5_@see ResourcePropertySource_@see TestPropertySource#locations_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context,_			String[] locations) {_		try {_			ConfigurableEnvironment environment = context.getEnvironment()__			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = context.getResource(resolvedLocation)__				environment.getPropertySources().addFirst(new ResourcePropertySource(resource))__			}_		}_		catch (IOException e) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", e)__		}_	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,link,environment,of,the,supplied,code,context,p,each,properties,file,will,be,converted,to,a,code,resource,property,source,that,will,be,added,to,the,link,property,sources,of,the,environment,with,highest,precedence,param,context,the,application,context,whose,environment,should,be,updated,param,locations,the,resource,locations,of,link,properties,files,to,add,to,the,environment,since,4,1,5,see,resource,property,source,see,test,property,source,locations,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,application,context,context,string,locations,try,configurable,environment,environment,context,get,environment,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,context,get,resource,resolved,location,environment,get,property,sources,add,first,new,resource,property,source,resource,catch,ioexception,e,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,e
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, 			String[] locations);1424198572;Add the {@link Properties} files from the given resource {@code locations}_to the {@link Environment} of the supplied {@code context}._<p>Property placeholders in resource locations (i.e., <code>${...}</code>)_will be {@linkplain Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<p>Each properties file will be converted to a {@link ResourcePropertySource}_that will be added to the {@link PropertySources} of the environment with_highest precedence._@param context the application context whose environment should be updated__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.1.5_@see ResourcePropertySource_@see TestPropertySource#locations_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context,_			String[] locations) {_		Assert.notNull(context, "context must not be null")__		Assert.notNull(locations, "locations must not be null")__		try {_			ConfigurableEnvironment environment = context.getEnvironment()__			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = context.getResource(resolvedLocation)__				environment.getPropertySources().addFirst(new ResourcePropertySource(resource))__			}_		}_		catch (IOException e) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", e)__		}_	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,link,environment,of,the,supplied,code,context,p,property,placeholders,in,resource,locations,i,e,code,code,will,be,linkplain,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,p,each,properties,file,will,be,converted,to,a,link,resource,property,source,that,will,be,added,to,the,link,property,sources,of,the,environment,with,highest,precedence,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,resource,property,source,see,test,property,source,locations,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,application,context,context,string,locations,assert,not,null,context,context,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,try,configurable,environment,environment,context,get,environment,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,context,get,resource,resolved,location,environment,get,property,sources,add,first,new,resource,property,source,resource,catch,ioexception,e,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,e
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, 			String[] locations);1432018141;Add the {@link Properties} files from the given resource {@code locations}_to the {@link Environment} of the supplied {@code context}._<p>Property placeholders in resource locations (i.e., <code>${...}</code>)_will be {@linkplain Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<p>Each properties file will be converted to a {@link ResourcePropertySource}_that will be added to the {@link PropertySources} of the environment with_highest precedence._@param context the application context whose environment should be updated__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.1.5_@see ResourcePropertySource_@see TestPropertySource#locations_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context,_			String[] locations) {_		Assert.notNull(context, "context must not be null")__		Assert.notNull(locations, "locations must not be null")__		try {_			ConfigurableEnvironment environment = context.getEnvironment()__			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = context.getResource(resolvedLocation)__				environment.getPropertySources().addFirst(new ResourcePropertySource(resource))__			}_		}_		catch (IOException e) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", e)__		}_	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,link,environment,of,the,supplied,code,context,p,property,placeholders,in,resource,locations,i,e,code,code,will,be,linkplain,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,p,each,properties,file,will,be,converted,to,a,link,resource,property,source,that,will,be,added,to,the,link,property,sources,of,the,environment,with,highest,precedence,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,resource,property,source,see,test,property,source,locations,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,application,context,context,string,locations,assert,not,null,context,context,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,try,configurable,environment,environment,context,get,environment,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,context,get,resource,resolved,location,environment,get,property,sources,add,first,new,resource,property,source,resource,catch,ioexception,e,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,e
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, 			String[] locations);1432856630;Add the {@link Properties} files from the given resource {@code locations}_to the {@link Environment} of the supplied {@code context}._<p>Property placeholders in resource locations (i.e., <code>${...}</code>)_will be {@linkplain Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<p>Each properties file will be converted to a {@link ResourcePropertySource}_that will be added to the {@link PropertySources} of the environment with_highest precedence._@param context the application context whose environment should be updated__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.1.5_@see ResourcePropertySource_@see TestPropertySource#locations_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context,_			String[] locations) {_		Assert.notNull(context, "context must not be null")__		Assert.notNull(locations, "locations must not be null")__		try {_			ConfigurableEnvironment environment = context.getEnvironment()__			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = context.getResource(resolvedLocation)__				environment.getPropertySources().addFirst(new ResourcePropertySource(resource))__			}_		}_		catch (IOException e) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", e)__		}_	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,link,environment,of,the,supplied,code,context,p,property,placeholders,in,resource,locations,i,e,code,code,will,be,linkplain,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,p,each,properties,file,will,be,converted,to,a,link,resource,property,source,that,will,be,added,to,the,link,property,sources,of,the,environment,with,highest,precedence,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,resource,property,source,see,test,property,source,locations,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,application,context,context,string,locations,assert,not,null,context,context,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,try,configurable,environment,environment,context,get,environment,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,context,get,resource,resolved,location,environment,get,property,sources,add,first,new,resource,property,source,resource,catch,ioexception,e,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,e
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, 			String[] locations);1434234880;Add the {@link Properties} files from the given resource {@code locations}_to the {@link Environment} of the supplied {@code context}._<p>Property placeholders in resource locations (i.e., <code>${...}</code>)_will be {@linkplain Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<p>Each properties file will be converted to a {@link ResourcePropertySource}_that will be added to the {@link PropertySources} of the environment with_highest precedence._@param context the application context whose environment should be updated__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.1.5_@see ResourcePropertySource_@see TestPropertySource#locations_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context,_			String[] locations) {_		Assert.notNull(context, "context must not be null")__		Assert.notNull(locations, "locations must not be null")__		try {_			ConfigurableEnvironment environment = context.getEnvironment()__			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = context.getResource(resolvedLocation)__				environment.getPropertySources().addFirst(new ResourcePropertySource(resource))__			}_		}_		catch (IOException e) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", e)__		}_	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,link,environment,of,the,supplied,code,context,p,property,placeholders,in,resource,locations,i,e,code,code,will,be,linkplain,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,p,each,properties,file,will,be,converted,to,a,link,resource,property,source,that,will,be,added,to,the,link,property,sources,of,the,environment,with,highest,precedence,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,resource,property,source,see,test,property,source,locations,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,application,context,context,string,locations,assert,not,null,context,context,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,try,configurable,environment,environment,context,get,environment,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,context,get,resource,resolved,location,environment,get,property,sources,add,first,new,resource,property,source,resource,catch,ioexception,e,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,e
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment, 			ResourceLoader resourceLoader, String... locations);1460041357;Add the {@link Properties} files from the given resource {@code locations}_to the supplied {@link ConfigurableEnvironment environment}._<p>Property placeholders in resource locations (i.e., <code>${...}</code>)_will be {@linkplain Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<p>Each properties file will be converted to a {@link ResourcePropertySource}_that will be added to the {@link PropertySources} of the environment with_highest precedence._@param environment the environment to update_ never {@code null}_@param resourceLoader the {@code ResourceLoader} to use to load each resource__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.3_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableApplicationContext, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment,_			ResourceLoader resourceLoader, String... locations) {__		Assert.notNull(environment, "environment must not be null")__		Assert.notNull(resourceLoader, "resourceLoader must not be null")__		Assert.notNull(locations, "locations must not be null")__		try {_			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = resourceLoader.getResource(resolvedLocation)__				environment.getPropertySources().addFirst(new ResourcePropertySource(resource))__			}_		}_		catch (IOException ex) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", ex)__		}_	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,supplied,link,configurable,environment,environment,p,property,placeholders,in,resource,locations,i,e,code,code,will,be,linkplain,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,p,each,properties,file,will,be,converted,to,a,link,resource,property,source,that,will,be,added,to,the,link,property,sources,of,the,environment,with,highest,precedence,param,environment,the,environment,to,update,never,code,null,param,resource,loader,the,code,resource,loader,to,use,to,load,each,resource,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,3,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,application,context,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,environment,environment,resource,loader,resource,loader,string,locations,assert,not,null,environment,environment,must,not,be,null,assert,not,null,resource,loader,resource,loader,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,try,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,resource,loader,get,resource,resolved,location,environment,get,property,sources,add,first,new,resource,property,source,resource,catch,ioexception,ex,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,ex
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment, 			ResourceLoader resourceLoader, String... locations);1465306936;Add the {@link Properties} files from the given resource {@code locations}_to the supplied {@link ConfigurableEnvironment environment}._<p>Property placeholders in resource locations (i.e., <code>${...}</code>)_will be {@linkplain Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<p>Each properties file will be converted to a {@link ResourcePropertySource}_that will be added to the {@link PropertySources} of the environment with_highest precedence._@param environment the environment to update_ never {@code null}_@param resourceLoader the {@code ResourceLoader} to use to load each resource__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.3_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableApplicationContext, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment,_			ResourceLoader resourceLoader, String... locations) {__		Assert.notNull(environment, "environment must not be null")__		Assert.notNull(resourceLoader, "resourceLoader must not be null")__		Assert.notNull(locations, "locations must not be null")__		try {_			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = resourceLoader.getResource(resolvedLocation)__				environment.getPropertySources().addFirst(new ResourcePropertySource(resource))__			}_		}_		catch (IOException ex) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", ex)__		}_	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,supplied,link,configurable,environment,environment,p,property,placeholders,in,resource,locations,i,e,code,code,will,be,linkplain,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,p,each,properties,file,will,be,converted,to,a,link,resource,property,source,that,will,be,added,to,the,link,property,sources,of,the,environment,with,highest,precedence,param,environment,the,environment,to,update,never,code,null,param,resource,loader,the,code,resource,loader,to,use,to,load,each,resource,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,3,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,application,context,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,environment,environment,resource,loader,resource,loader,string,locations,assert,not,null,environment,environment,must,not,be,null,assert,not,null,resource,loader,resource,loader,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,try,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,resource,loader,get,resource,resolved,location,environment,get,property,sources,add,first,new,resource,property,source,resource,catch,ioexception,ex,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,ex
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment, 			ResourceLoader resourceLoader, String... locations);1467677340;Add the {@link Properties} files from the given resource {@code locations}_to the supplied {@link ConfigurableEnvironment environment}._<p>Property placeholders in resource locations (i.e., <code>${...}</code>)_will be {@linkplain Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<p>Each properties file will be converted to a {@link ResourcePropertySource}_that will be added to the {@link PropertySources} of the environment with_highest precedence._@param environment the environment to update_ never {@code null}_@param resourceLoader the {@code ResourceLoader} to use to load each resource__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.3_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableApplicationContext, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment,_			ResourceLoader resourceLoader, String... locations) {__		Assert.notNull(environment, "environment must not be null")__		Assert.notNull(resourceLoader, "resourceLoader must not be null")__		Assert.notNull(locations, "locations must not be null")__		try {_			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = resourceLoader.getResource(resolvedLocation)__				environment.getPropertySources().addFirst(new ResourcePropertySource(resource))__			}_		}_		catch (IOException ex) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", ex)__		}_	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,supplied,link,configurable,environment,environment,p,property,placeholders,in,resource,locations,i,e,code,code,will,be,linkplain,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,p,each,properties,file,will,be,converted,to,a,link,resource,property,source,that,will,be,added,to,the,link,property,sources,of,the,environment,with,highest,precedence,param,environment,the,environment,to,update,never,code,null,param,resource,loader,the,code,resource,loader,to,use,to,load,each,resource,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,3,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,application,context,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,environment,environment,resource,loader,resource,loader,string,locations,assert,not,null,environment,environment,must,not,be,null,assert,not,null,resource,loader,resource,loader,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,try,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,resource,loader,get,resource,resolved,location,environment,get,property,sources,add,first,new,resource,property,source,resource,catch,ioexception,ex,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,ex
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment, 			ResourceLoader resourceLoader, String... locations);1467730834;Add the {@link Properties} files from the given resource {@code locations}_to the supplied {@link ConfigurableEnvironment environment}._<p>Property placeholders in resource locations (i.e., <code>${...}</code>)_will be {@linkplain Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<p>Each properties file will be converted to a {@link ResourcePropertySource}_that will be added to the {@link PropertySources} of the environment with_highest precedence._@param environment the environment to update_ never {@code null}_@param resourceLoader the {@code ResourceLoader} to use to load each resource__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.3_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableApplicationContext, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment,_			ResourceLoader resourceLoader, String... locations) {__		Assert.notNull(environment, "environment must not be null")__		Assert.notNull(resourceLoader, "resourceLoader must not be null")__		Assert.notNull(locations, "locations must not be null")__		try {_			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = resourceLoader.getResource(resolvedLocation)__				environment.getPropertySources().addFirst(new ResourcePropertySource(resource))__			}_		}_		catch (IOException ex) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", ex)__		}_	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,supplied,link,configurable,environment,environment,p,property,placeholders,in,resource,locations,i,e,code,code,will,be,linkplain,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,p,each,properties,file,will,be,converted,to,a,link,resource,property,source,that,will,be,added,to,the,link,property,sources,of,the,environment,with,highest,precedence,param,environment,the,environment,to,update,never,code,null,param,resource,loader,the,code,resource,loader,to,use,to,load,each,resource,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,3,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,application,context,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,environment,environment,resource,loader,resource,loader,string,locations,assert,not,null,environment,environment,must,not,be,null,assert,not,null,resource,loader,resource,loader,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,try,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,resource,loader,get,resource,resolved,location,environment,get,property,sources,add,first,new,resource,property,source,resource,catch,ioexception,ex,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,ex
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment, 			ResourceLoader resourceLoader, String... locations);1467821493;Add the {@link Properties} files from the given resource {@code locations}_to the supplied {@link ConfigurableEnvironment environment}._<p>Property placeholders in resource locations (i.e., <code>${...}</code>)_will be {@linkplain Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<p>Each properties file will be converted to a {@link ResourcePropertySource}_that will be added to the {@link PropertySources} of the environment with_highest precedence._@param environment the environment to update_ never {@code null}_@param resourceLoader the {@code ResourceLoader} to use to load each resource__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.3_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableApplicationContext, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment,_			ResourceLoader resourceLoader, String... locations) {__		Assert.notNull(environment, "'environment' must not be null")__		Assert.notNull(resourceLoader, "'resourceLoader' must not be null")__		Assert.notNull(locations, "'locations' must not be null")__		try {_			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = resourceLoader.getResource(resolvedLocation)__				environment.getPropertySources().addFirst(new ResourcePropertySource(resource))__			}_		}_		catch (IOException ex) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", ex)__		}_	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,supplied,link,configurable,environment,environment,p,property,placeholders,in,resource,locations,i,e,code,code,will,be,linkplain,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,p,each,properties,file,will,be,converted,to,a,link,resource,property,source,that,will,be,added,to,the,link,property,sources,of,the,environment,with,highest,precedence,param,environment,the,environment,to,update,never,code,null,param,resource,loader,the,code,resource,loader,to,use,to,load,each,resource,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,3,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,application,context,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,environment,environment,resource,loader,resource,loader,string,locations,assert,not,null,environment,environment,must,not,be,null,assert,not,null,resource,loader,resource,loader,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,try,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,resource,loader,get,resource,resolved,location,environment,get,property,sources,add,first,new,resource,property,source,resource,catch,ioexception,ex,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,ex
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment, 			ResourceLoader resourceLoader, String... locations);1468426720;Add the {@link Properties} files from the given resource {@code locations}_to the supplied {@link ConfigurableEnvironment environment}._<p>Property placeholders in resource locations (i.e., <code>${...}</code>)_will be {@linkplain Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<p>Each properties file will be converted to a {@link ResourcePropertySource}_that will be added to the {@link PropertySources} of the environment with_highest precedence._@param environment the environment to update_ never {@code null}_@param resourceLoader the {@code ResourceLoader} to use to load each resource__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.3_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableApplicationContext, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment,_			ResourceLoader resourceLoader, String... locations) {__		Assert.notNull(environment, "'environment' must not be null")__		Assert.notNull(resourceLoader, "'resourceLoader' must not be null")__		Assert.notNull(locations, "'locations' must not be null")__		try {_			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = resourceLoader.getResource(resolvedLocation)__				environment.getPropertySources().addFirst(new ResourcePropertySource(resource))__			}_		}_		catch (IOException ex) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", ex)__		}_	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,supplied,link,configurable,environment,environment,p,property,placeholders,in,resource,locations,i,e,code,code,will,be,linkplain,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,p,each,properties,file,will,be,converted,to,a,link,resource,property,source,that,will,be,added,to,the,link,property,sources,of,the,environment,with,highest,precedence,param,environment,the,environment,to,update,never,code,null,param,resource,loader,the,code,resource,loader,to,use,to,load,each,resource,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,3,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,application,context,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,environment,environment,resource,loader,resource,loader,string,locations,assert,not,null,environment,environment,must,not,be,null,assert,not,null,resource,loader,resource,loader,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,try,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,resource,loader,get,resource,resolved,location,environment,get,property,sources,add,first,new,resource,property,source,resource,catch,ioexception,ex,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,ex
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment, 			ResourceLoader resourceLoader, String... locations);1472834371;Add the {@link Properties} files from the given resource {@code locations}_to the supplied {@link ConfigurableEnvironment environment}._<p>Property placeholders in resource locations (i.e., <code>${...}</code>)_will be {@linkplain Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<p>Each properties file will be converted to a {@link ResourcePropertySource}_that will be added to the {@link PropertySources} of the environment with_highest precedence._@param environment the environment to update_ never {@code null}_@param resourceLoader the {@code ResourceLoader} to use to load each resource__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.3_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableApplicationContext, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment,_			ResourceLoader resourceLoader, String... locations) {__		Assert.notNull(environment, "'environment' must not be null")__		Assert.notNull(resourceLoader, "'resourceLoader' must not be null")__		Assert.notNull(locations, "'locations' must not be null")__		try {_			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = resourceLoader.getResource(resolvedLocation)__				environment.getPropertySources().addFirst(new ResourcePropertySource(resource))__			}_		}_		catch (IOException ex) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", ex)__		}_	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,supplied,link,configurable,environment,environment,p,property,placeholders,in,resource,locations,i,e,code,code,will,be,linkplain,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,p,each,properties,file,will,be,converted,to,a,link,resource,property,source,that,will,be,added,to,the,link,property,sources,of,the,environment,with,highest,precedence,param,environment,the,environment,to,update,never,code,null,param,resource,loader,the,code,resource,loader,to,use,to,load,each,resource,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,3,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,application,context,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,environment,environment,resource,loader,resource,loader,string,locations,assert,not,null,environment,environment,must,not,be,null,assert,not,null,resource,loader,resource,loader,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,try,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,resource,loader,get,resource,resolved,location,environment,get,property,sources,add,first,new,resource,property,source,resource,catch,ioexception,ex,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,ex
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment, 			ResourceLoader resourceLoader, String... locations);1474905889;Add the {@link Properties} files from the given resource {@code locations}_to the supplied {@link ConfigurableEnvironment environment}._<p>Property placeholders in resource locations (i.e., <code>${...}</code>)_will be {@linkplain Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<p>Each properties file will be converted to a {@link ResourcePropertySource}_that will be added to the {@link PropertySources} of the environment with_highest precedence._@param environment the environment to update_ never {@code null}_@param resourceLoader the {@code ResourceLoader} to use to load each resource__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.3_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableApplicationContext, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment,_			ResourceLoader resourceLoader, String... locations) {__		Assert.notNull(environment, "'environment' must not be null")__		Assert.notNull(resourceLoader, "'resourceLoader' must not be null")__		Assert.notNull(locations, "'locations' must not be null")__		try {_			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = resourceLoader.getResource(resolvedLocation)__				environment.getPropertySources().addFirst(new ResourcePropertySource(resource))__			}_		}_		catch (IOException ex) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", ex)__		}_	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,supplied,link,configurable,environment,environment,p,property,placeholders,in,resource,locations,i,e,code,code,will,be,linkplain,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,p,each,properties,file,will,be,converted,to,a,link,resource,property,source,that,will,be,added,to,the,link,property,sources,of,the,environment,with,highest,precedence,param,environment,the,environment,to,update,never,code,null,param,resource,loader,the,code,resource,loader,to,use,to,load,each,resource,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,3,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,application,context,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,environment,environment,resource,loader,resource,loader,string,locations,assert,not,null,environment,environment,must,not,be,null,assert,not,null,resource,loader,resource,loader,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,try,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,resource,loader,get,resource,resolved,location,environment,get,property,sources,add,first,new,resource,property,source,resource,catch,ioexception,ex,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,ex
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment, 			ResourceLoader resourceLoader, String... locations);1496955179;Add the {@link Properties} files from the given resource {@code locations}_to the supplied {@link ConfigurableEnvironment environment}._<p>Property placeholders in resource locations (i.e., <code>${...}</code>)_will be {@linkplain Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<p>Each properties file will be converted to a {@link ResourcePropertySource}_that will be added to the {@link PropertySources} of the environment with_highest precedence._@param environment the environment to update_ never {@code null}_@param resourceLoader the {@code ResourceLoader} to use to load each resource__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.3_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableApplicationContext, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment,_			ResourceLoader resourceLoader, String... locations) {__		Assert.notNull(environment, "'environment' must not be null")__		Assert.notNull(resourceLoader, "'resourceLoader' must not be null")__		Assert.notNull(locations, "'locations' must not be null")__		try {_			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = resourceLoader.getResource(resolvedLocation)__				environment.getPropertySources().addFirst(new ResourcePropertySource(resource))__			}_		}_		catch (IOException ex) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", ex)__		}_	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,supplied,link,configurable,environment,environment,p,property,placeholders,in,resource,locations,i,e,code,code,will,be,linkplain,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,p,each,properties,file,will,be,converted,to,a,link,resource,property,source,that,will,be,added,to,the,link,property,sources,of,the,environment,with,highest,precedence,param,environment,the,environment,to,update,never,code,null,param,resource,loader,the,code,resource,loader,to,use,to,load,each,resource,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,3,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,application,context,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,environment,environment,resource,loader,resource,loader,string,locations,assert,not,null,environment,environment,must,not,be,null,assert,not,null,resource,loader,resource,loader,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,try,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,resource,loader,get,resource,resolved,location,environment,get,property,sources,add,first,new,resource,property,source,resource,catch,ioexception,ex,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,ex
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment, 			ResourceLoader resourceLoader, String... locations);1497341594;Add the {@link Properties} files from the given resource {@code locations}_to the supplied {@link ConfigurableEnvironment environment}._<p>Property placeholders in resource locations (i.e., <code>${...}</code>)_will be {@linkplain Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<p>Each properties file will be converted to a {@link ResourcePropertySource}_that will be added to the {@link PropertySources} of the environment with_highest precedence._@param environment the environment to update_ never {@code null}_@param resourceLoader the {@code ResourceLoader} to use to load each resource__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.3_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableApplicationContext, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment,_			ResourceLoader resourceLoader, String... locations) {__		Assert.notNull(environment, "'environment' must not be null")__		Assert.notNull(resourceLoader, "'resourceLoader' must not be null")__		Assert.notNull(locations, "'locations' must not be null")__		try {_			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = resourceLoader.getResource(resolvedLocation)__				environment.getPropertySources().addFirst(new ResourcePropertySource(resource))__			}_		}_		catch (IOException ex) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", ex)__		}_	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,supplied,link,configurable,environment,environment,p,property,placeholders,in,resource,locations,i,e,code,code,will,be,linkplain,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,p,each,properties,file,will,be,converted,to,a,link,resource,property,source,that,will,be,added,to,the,link,property,sources,of,the,environment,with,highest,precedence,param,environment,the,environment,to,update,never,code,null,param,resource,loader,the,code,resource,loader,to,use,to,load,each,resource,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,3,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,application,context,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,environment,environment,resource,loader,resource,loader,string,locations,assert,not,null,environment,environment,must,not,be,null,assert,not,null,resource,loader,resource,loader,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,try,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,resource,loader,get,resource,resolved,location,environment,get,property,sources,add,first,new,resource,property,source,resource,catch,ioexception,ex,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,ex
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment, 			ResourceLoader resourceLoader, String... locations);1530174524;Add the {@link Properties} files from the given resource {@code locations}_to the supplied {@link ConfigurableEnvironment environment}._<p>Property placeholders in resource locations (i.e., <code>${...}</code>)_will be {@linkplain Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<p>Each properties file will be converted to a {@link ResourcePropertySource}_that will be added to the {@link PropertySources} of the environment with_highest precedence._@param environment the environment to update_ never {@code null}_@param resourceLoader the {@code ResourceLoader} to use to load each resource__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@throws IllegalStateException if an error occurs while processing a properties file_@since 4.3_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableApplicationContext, String...);public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment,_			ResourceLoader resourceLoader, String... locations) {__		Assert.notNull(environment, "'environment' must not be null")__		Assert.notNull(resourceLoader, "'resourceLoader' must not be null")__		Assert.notNull(locations, "'locations' must not be null")__		try {_			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = resourceLoader.getResource(resolvedLocation)__				environment.getPropertySources().addFirst(new ResourcePropertySource(resource))__			}_		}_		catch (IOException ex) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", ex)__		}_	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,supplied,link,configurable,environment,environment,p,property,placeholders,in,resource,locations,i,e,code,code,will,be,linkplain,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,p,each,properties,file,will,be,converted,to,a,link,resource,property,source,that,will,be,added,to,the,link,property,sources,of,the,environment,with,highest,precedence,param,environment,the,environment,to,update,never,code,null,param,resource,loader,the,code,resource,loader,to,use,to,load,each,resource,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file,since,4,3,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,application,context,string;public,static,void,add,properties,files,to,environment,configurable,environment,environment,resource,loader,resource,loader,string,locations,assert,not,null,environment,environment,must,not,be,null,assert,not,null,resource,loader,resource,loader,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,try,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,resource,loader,get,resource,resolved,location,environment,get,property,sources,add,first,new,resource,property,source,resource,catch,ioexception,ex,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,ex
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment, 			ResourceLoader resourceLoader, String... locations);1530174524;Add the {@link Properties} files from the given resource {@code locations}_to the supplied {@link ConfigurableEnvironment environment}._<p>Property placeholders in resource locations (i.e., <code>${...}</code>)_will be {@linkplain Environment#resolveRequiredPlaceholders(String) resolved}_against the {@code Environment}._<p>Each properties file will be converted to a {@link ResourcePropertySource}_that will be added to the {@link PropertySources} of the environment with_highest precedence._@param environment the environment to update_ never {@code null}_@param resourceLoader the {@code ResourceLoader} to use to load each resource__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@throws IllegalStateException if an error occurs while processing a properties file_@since 4.3_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableApplicationContext, String...);public static void addPropertiesFilesToEnvironment(ConfigurableEnvironment environment,_			ResourceLoader resourceLoader, String... locations) {__		Assert.notNull(environment, "'environment' must not be null")__		Assert.notNull(resourceLoader, "'resourceLoader' must not be null")__		Assert.notNull(locations, "'locations' must not be null")__		try {_			for (String location : locations) {_				String resolvedLocation = environment.resolveRequiredPlaceholders(location)__				Resource resource = resourceLoader.getResource(resolvedLocation)__				environment.getPropertySources().addFirst(new ResourcePropertySource(resource))__			}_		}_		catch (IOException ex) {_			throw new IllegalStateException("Failed to add PropertySource to Environment", ex)__		}_	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,supplied,link,configurable,environment,environment,p,property,placeholders,in,resource,locations,i,e,code,code,will,be,linkplain,environment,resolve,required,placeholders,string,resolved,against,the,code,environment,p,each,properties,file,will,be,converted,to,a,link,resource,property,source,that,will,be,added,to,the,link,property,sources,of,the,environment,with,highest,precedence,param,environment,the,environment,to,update,never,code,null,param,resource,loader,the,code,resource,loader,to,use,to,load,each,resource,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file,since,4,3,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,application,context,string;public,static,void,add,properties,files,to,environment,configurable,environment,environment,resource,loader,resource,loader,string,locations,assert,not,null,environment,environment,must,not,be,null,assert,not,null,resource,loader,resource,loader,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,try,for,string,location,locations,string,resolved,location,environment,resolve,required,placeholders,location,resource,resource,resource,loader,get,resource,resolved,location,environment,get,property,sources,add,first,new,resource,property,source,resource,catch,ioexception,ex,throw,new,illegal,state,exception,failed,to,add,property,source,to,environment,ex
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties);1458929547;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_ never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see MapPropertySource_@see #INLINED_PROPERTIES_PROPERTY_SOURCE_NAME_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties) {_		Assert.notNull(environment, "environment must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Adding inlined properties to environment: "_						+ ObjectUtils.nullSafeToString(inlinedProperties))__			}_			MapPropertySource ps = (MapPropertySource) environment.getPropertySources().get(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME)__			if (ps == null) {_				ps = new MapPropertySource(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME,_						new LinkedHashMap<String, Object>())__				environment.getPropertySources().addFirst(ps)__			}_			ps.getSource().putAll(convertInlinedPropertiesToMap(inlinedProperties))__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,map,property,source,see,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,assert,not,null,environment,environment,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,if,object,utils,is,empty,inlined,properties,if,logger,is,debug,enabled,logger,debug,adding,inlined,properties,to,environment,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,map,property,source,environment,get,property,sources,get,if,ps,null,ps,new,map,property,source,new,linked,hash,map,string,object,environment,get,property,sources,add,first,ps,ps,get,source,put,all,convert,inlined,properties,to,map,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties);1460041357;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_ never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see MapPropertySource_@see #INLINED_PROPERTIES_PROPERTY_SOURCE_NAME_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties) {_		Assert.notNull(environment, "environment must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Adding inlined properties to environment: "_						+ ObjectUtils.nullSafeToString(inlinedProperties))__			}_			MapPropertySource ps = (MapPropertySource) environment.getPropertySources().get(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME)__			if (ps == null) {_				ps = new MapPropertySource(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME,_						new LinkedHashMap<String, Object>())__				environment.getPropertySources().addFirst(ps)__			}_			ps.getSource().putAll(convertInlinedPropertiesToMap(inlinedProperties))__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,map,property,source,see,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,assert,not,null,environment,environment,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,if,object,utils,is,empty,inlined,properties,if,logger,is,debug,enabled,logger,debug,adding,inlined,properties,to,environment,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,map,property,source,environment,get,property,sources,get,if,ps,null,ps,new,map,property,source,new,linked,hash,map,string,object,environment,get,property,sources,add,first,ps,ps,get,source,put,all,convert,inlined,properties,to,map,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties);1465306936;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_ never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see MapPropertySource_@see #INLINED_PROPERTIES_PROPERTY_SOURCE_NAME_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties) {_		Assert.notNull(environment, "environment must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Adding inlined properties to environment: "_						+ ObjectUtils.nullSafeToString(inlinedProperties))__			}_			MapPropertySource ps = (MapPropertySource) environment.getPropertySources().get(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME)__			if (ps == null) {_				ps = new MapPropertySource(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME,_						new LinkedHashMap<String, Object>())__				environment.getPropertySources().addFirst(ps)__			}_			ps.getSource().putAll(convertInlinedPropertiesToMap(inlinedProperties))__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,map,property,source,see,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,assert,not,null,environment,environment,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,if,object,utils,is,empty,inlined,properties,if,logger,is,debug,enabled,logger,debug,adding,inlined,properties,to,environment,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,map,property,source,environment,get,property,sources,get,if,ps,null,ps,new,map,property,source,new,linked,hash,map,string,object,environment,get,property,sources,add,first,ps,ps,get,source,put,all,convert,inlined,properties,to,map,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties);1467677340;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_ never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see MapPropertySource_@see #INLINED_PROPERTIES_PROPERTY_SOURCE_NAME_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties) {_		Assert.notNull(environment, "environment must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Adding inlined properties to environment: " + ObjectUtils.nullSafeToString(inlinedProperties))__			}_			MapPropertySource ps = (MapPropertySource) environment.getPropertySources().get(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME)__			if (ps == null) {_				ps = new MapPropertySource(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME, new LinkedHashMap<String, Object>())__				environment.getPropertySources().addFirst(ps)__			}_			ps.getSource().putAll(convertInlinedPropertiesToMap(inlinedProperties))__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,map,property,source,see,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,assert,not,null,environment,environment,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,if,object,utils,is,empty,inlined,properties,if,logger,is,debug,enabled,logger,debug,adding,inlined,properties,to,environment,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,map,property,source,environment,get,property,sources,get,if,ps,null,ps,new,map,property,source,new,linked,hash,map,string,object,environment,get,property,sources,add,first,ps,ps,get,source,put,all,convert,inlined,properties,to,map,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties);1467730834;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_ never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see MapPropertySource_@see #INLINED_PROPERTIES_PROPERTY_SOURCE_NAME_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties) {_		Assert.notNull(environment, "environment must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Adding inlined properties to environment: " + ObjectUtils.nullSafeToString(inlinedProperties))__			}_			MapPropertySource ps = (MapPropertySource) environment.getPropertySources().get(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME)__			if (ps == null) {_				ps = new MapPropertySource(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME, new LinkedHashMap<>())__				environment.getPropertySources().addFirst(ps)__			}_			ps.getSource().putAll(convertInlinedPropertiesToMap(inlinedProperties))__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,map,property,source,see,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,assert,not,null,environment,environment,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,if,object,utils,is,empty,inlined,properties,if,logger,is,debug,enabled,logger,debug,adding,inlined,properties,to,environment,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,map,property,source,environment,get,property,sources,get,if,ps,null,ps,new,map,property,source,new,linked,hash,map,environment,get,property,sources,add,first,ps,ps,get,source,put,all,convert,inlined,properties,to,map,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties);1467821493;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_ never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see MapPropertySource_@see #INLINED_PROPERTIES_PROPERTY_SOURCE_NAME_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties) {_		Assert.notNull(environment, "'environment' must not be null")__		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Adding inlined properties to environment: " +_						ObjectUtils.nullSafeToString(inlinedProperties))__			}_			MapPropertySource ps = (MapPropertySource)_					environment.getPropertySources().get(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME)__			if (ps == null) {_				ps = new MapPropertySource(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME, new LinkedHashMap<>())__				environment.getPropertySources().addFirst(ps)__			}_			ps.getSource().putAll(convertInlinedPropertiesToMap(inlinedProperties))__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,map,property,source,see,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,assert,not,null,environment,environment,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,if,object,utils,is,empty,inlined,properties,if,logger,is,debug,enabled,logger,debug,adding,inlined,properties,to,environment,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,map,property,source,environment,get,property,sources,get,if,ps,null,ps,new,map,property,source,new,linked,hash,map,environment,get,property,sources,add,first,ps,ps,get,source,put,all,convert,inlined,properties,to,map,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties);1468426720;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_ never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see MapPropertySource_@see #INLINED_PROPERTIES_PROPERTY_SOURCE_NAME_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties) {_		Assert.notNull(environment, "'environment' must not be null")__		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Adding inlined properties to environment: " +_						ObjectUtils.nullSafeToString(inlinedProperties))__			}_			MapPropertySource ps = (MapPropertySource)_					environment.getPropertySources().get(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME)__			if (ps == null) {_				ps = new MapPropertySource(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME, new LinkedHashMap<>())__				environment.getPropertySources().addFirst(ps)__			}_			ps.getSource().putAll(convertInlinedPropertiesToMap(inlinedProperties))__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,map,property,source,see,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,assert,not,null,environment,environment,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,if,object,utils,is,empty,inlined,properties,if,logger,is,debug,enabled,logger,debug,adding,inlined,properties,to,environment,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,map,property,source,environment,get,property,sources,get,if,ps,null,ps,new,map,property,source,new,linked,hash,map,environment,get,property,sources,add,first,ps,ps,get,source,put,all,convert,inlined,properties,to,map,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties);1472834371;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_ never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see MapPropertySource_@see #INLINED_PROPERTIES_PROPERTY_SOURCE_NAME_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties) {_		Assert.notNull(environment, "'environment' must not be null")__		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Adding inlined properties to environment: " +_						ObjectUtils.nullSafeToString(inlinedProperties))__			}_			MapPropertySource ps = (MapPropertySource)_					environment.getPropertySources().get(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME)__			if (ps == null) {_				ps = new MapPropertySource(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME, new LinkedHashMap<>())__				environment.getPropertySources().addFirst(ps)__			}_			ps.getSource().putAll(convertInlinedPropertiesToMap(inlinedProperties))__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,map,property,source,see,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,assert,not,null,environment,environment,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,if,object,utils,is,empty,inlined,properties,if,logger,is,debug,enabled,logger,debug,adding,inlined,properties,to,environment,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,map,property,source,environment,get,property,sources,get,if,ps,null,ps,new,map,property,source,new,linked,hash,map,environment,get,property,sources,add,first,ps,ps,get,source,put,all,convert,inlined,properties,to,map,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties);1474905889;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_ never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see MapPropertySource_@see #INLINED_PROPERTIES_PROPERTY_SOURCE_NAME_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties) {_		Assert.notNull(environment, "'environment' must not be null")__		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Adding inlined properties to environment: " +_						ObjectUtils.nullSafeToString(inlinedProperties))__			}_			MapPropertySource ps = (MapPropertySource)_					environment.getPropertySources().get(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME)__			if (ps == null) {_				ps = new MapPropertySource(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME, new LinkedHashMap<>())__				environment.getPropertySources().addFirst(ps)__			}_			ps.getSource().putAll(convertInlinedPropertiesToMap(inlinedProperties))__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,map,property,source,see,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,assert,not,null,environment,environment,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,if,object,utils,is,empty,inlined,properties,if,logger,is,debug,enabled,logger,debug,adding,inlined,properties,to,environment,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,map,property,source,environment,get,property,sources,get,if,ps,null,ps,new,map,property,source,new,linked,hash,map,environment,get,property,sources,add,first,ps,ps,get,source,put,all,convert,inlined,properties,to,map,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties);1496955179;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_ never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see MapPropertySource_@see #INLINED_PROPERTIES_PROPERTY_SOURCE_NAME_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties) {_		Assert.notNull(environment, "'environment' must not be null")__		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Adding inlined properties to environment: " +_						ObjectUtils.nullSafeToString(inlinedProperties))__			}_			MapPropertySource ps = (MapPropertySource)_					environment.getPropertySources().get(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME)__			if (ps == null) {_				ps = new MapPropertySource(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME, new LinkedHashMap<>())__				environment.getPropertySources().addFirst(ps)__			}_			ps.getSource().putAll(convertInlinedPropertiesToMap(inlinedProperties))__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,map,property,source,see,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,assert,not,null,environment,environment,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,if,object,utils,is,empty,inlined,properties,if,logger,is,debug,enabled,logger,debug,adding,inlined,properties,to,environment,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,map,property,source,environment,get,property,sources,get,if,ps,null,ps,new,map,property,source,new,linked,hash,map,environment,get,property,sources,add,first,ps,ps,get,source,put,all,convert,inlined,properties,to,map,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties);1497341594;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_ never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see MapPropertySource_@see #INLINED_PROPERTIES_PROPERTY_SOURCE_NAME_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties) {_		Assert.notNull(environment, "'environment' must not be null")__		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Adding inlined properties to environment: " +_						ObjectUtils.nullSafeToString(inlinedProperties))__			}_			MapPropertySource ps = (MapPropertySource)_					environment.getPropertySources().get(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME)__			if (ps == null) {_				ps = new MapPropertySource(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME, new LinkedHashMap<>())__				environment.getPropertySources().addFirst(ps)__			}_			ps.getSource().putAll(convertInlinedPropertiesToMap(inlinedProperties))__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,map,property,source,see,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,assert,not,null,environment,environment,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,if,object,utils,is,empty,inlined,properties,if,logger,is,debug,enabled,logger,debug,adding,inlined,properties,to,environment,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,map,property,source,environment,get,property,sources,get,if,ps,null,ps,new,map,property,source,new,linked,hash,map,environment,get,property,sources,add,first,ps,ps,get,source,put,all,convert,inlined,properties,to,map,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties);1530174524;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_ never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see MapPropertySource_@see #INLINED_PROPERTIES_PROPERTY_SOURCE_NAME_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties) {_		Assert.notNull(environment, "'environment' must not be null")__		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Adding inlined properties to environment: " +_						ObjectUtils.nullSafeToString(inlinedProperties))__			}_			MapPropertySource ps = (MapPropertySource)_					environment.getPropertySources().get(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME)__			if (ps == null) {_				ps = new MapPropertySource(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME, new LinkedHashMap<>())__				environment.getPropertySources().addFirst(ps)__			}_			ps.getSource().putAll(convertInlinedPropertiesToMap(inlinedProperties))__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,map,property,source,see,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,assert,not,null,environment,environment,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,if,object,utils,is,empty,inlined,properties,if,logger,is,debug,enabled,logger,debug,adding,inlined,properties,to,environment,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,map,property,source,environment,get,property,sources,get,if,ps,null,ps,new,map,property,source,new,linked,hash,map,environment,get,property,sources,add,first,ps,ps,get,source,put,all,convert,inlined,properties,to,map,inlined,properties
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties);1530174524;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_ never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see MapPropertySource_@see #INLINED_PROPERTIES_PROPERTY_SOURCE_NAME_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String... inlinedProperties) {_		Assert.notNull(environment, "'environment' must not be null")__		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Adding inlined properties to environment: " +_						ObjectUtils.nullSafeToString(inlinedProperties))__			}_			MapPropertySource ps = (MapPropertySource)_					environment.getPropertySources().get(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME)__			if (ps == null) {_				ps = new MapPropertySource(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME, new LinkedHashMap<>())__				environment.getPropertySources().addFirst(ps)__			}_			ps.getSource().putAll(convertInlinedPropertiesToMap(inlinedProperties))__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,map,property,source,see,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,assert,not,null,environment,environment,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,if,object,utils,is,empty,inlined,properties,if,logger,is,debug,enabled,logger,debug,adding,inlined,properties,to,environment,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,map,property,source,environment,get,property,sources,get,if,ps,null,ps,new,map,property,source,new,linked,hash,map,environment,get,property,sources,add,first,ps,ps,get,source,put,all,convert,inlined,properties,to,map,inlined,properties
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations);1460041357;Add the {@link Properties} files from the given resource {@code locations}_to the {@link Environment} of the supplied {@code context}._<p>This method simply delegates to_{@link #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)}._@param context the application context whose environment should be updated__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.1.5_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations) {_		Assert.notNull(context, "context must not be null")__		Assert.notNull(locations, "locations must not be null")__		addPropertiesFilesToEnvironment(context.getEnvironment(), context, locations)__	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,properties,files,to,environment,configurable,environment,resource,loader,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,environment,resource,loader,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,application,context,context,string,locations,assert,not,null,context,context,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,add,properties,files,to,environment,context,get,environment,context,locations
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations);1465306936;Add the {@link Properties} files from the given resource {@code locations}_to the {@link Environment} of the supplied {@code context}._<p>This method simply delegates to_{@link #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)}._@param context the application context whose environment should be updated__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.1.5_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations) {_		Assert.notNull(context, "context must not be null")__		Assert.notNull(locations, "locations must not be null")__		addPropertiesFilesToEnvironment(context.getEnvironment(), context, locations)__	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,properties,files,to,environment,configurable,environment,resource,loader,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,environment,resource,loader,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,application,context,context,string,locations,assert,not,null,context,context,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,add,properties,files,to,environment,context,get,environment,context,locations
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations);1467677340;Add the {@link Properties} files from the given resource {@code locations}_to the {@link Environment} of the supplied {@code context}._<p>This method simply delegates to_{@link #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)}._@param context the application context whose environment should be updated__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.1.5_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations) {_		Assert.notNull(context, "context must not be null")__		Assert.notNull(locations, "locations must not be null")__		addPropertiesFilesToEnvironment(context.getEnvironment(), context, locations)__	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,properties,files,to,environment,configurable,environment,resource,loader,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,environment,resource,loader,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,application,context,context,string,locations,assert,not,null,context,context,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,add,properties,files,to,environment,context,get,environment,context,locations
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations);1467730834;Add the {@link Properties} files from the given resource {@code locations}_to the {@link Environment} of the supplied {@code context}._<p>This method simply delegates to_{@link #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)}._@param context the application context whose environment should be updated__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.1.5_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations) {_		Assert.notNull(context, "context must not be null")__		Assert.notNull(locations, "locations must not be null")__		addPropertiesFilesToEnvironment(context.getEnvironment(), context, locations)__	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,properties,files,to,environment,configurable,environment,resource,loader,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,environment,resource,loader,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,application,context,context,string,locations,assert,not,null,context,context,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,add,properties,files,to,environment,context,get,environment,context,locations
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations);1467821493;Add the {@link Properties} files from the given resource {@code locations}_to the {@link Environment} of the supplied {@code context}._<p>This method simply delegates to_{@link #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)}._@param context the application context whose environment should be updated__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.1.5_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations) {_		Assert.notNull(context, "'context' must not be null")__		Assert.notNull(locations, "'locations' must not be null")__		addPropertiesFilesToEnvironment(context.getEnvironment(), context, locations)__	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,properties,files,to,environment,configurable,environment,resource,loader,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,environment,resource,loader,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,application,context,context,string,locations,assert,not,null,context,context,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,add,properties,files,to,environment,context,get,environment,context,locations
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations);1468426720;Add the {@link Properties} files from the given resource {@code locations}_to the {@link Environment} of the supplied {@code context}._<p>This method simply delegates to_{@link #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)}._@param context the application context whose environment should be updated__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.1.5_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations) {_		Assert.notNull(context, "'context' must not be null")__		Assert.notNull(locations, "'locations' must not be null")__		addPropertiesFilesToEnvironment(context.getEnvironment(), context, locations)__	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,properties,files,to,environment,configurable,environment,resource,loader,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,environment,resource,loader,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,application,context,context,string,locations,assert,not,null,context,context,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,add,properties,files,to,environment,context,get,environment,context,locations
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations);1472834371;Add the {@link Properties} files from the given resource {@code locations}_to the {@link Environment} of the supplied {@code context}._<p>This method simply delegates to_{@link #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)}._@param context the application context whose environment should be updated__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.1.5_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations) {_		Assert.notNull(context, "'context' must not be null")__		Assert.notNull(locations, "'locations' must not be null")__		addPropertiesFilesToEnvironment(context.getEnvironment(), context, locations)__	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,properties,files,to,environment,configurable,environment,resource,loader,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,environment,resource,loader,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,application,context,context,string,locations,assert,not,null,context,context,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,add,properties,files,to,environment,context,get,environment,context,locations
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations);1474905889;Add the {@link Properties} files from the given resource {@code locations}_to the {@link Environment} of the supplied {@code context}._<p>This method simply delegates to_{@link #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)}._@param context the application context whose environment should be updated__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.1.5_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations) {_		Assert.notNull(context, "'context' must not be null")__		Assert.notNull(locations, "'locations' must not be null")__		addPropertiesFilesToEnvironment(context.getEnvironment(), context, locations)__	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,properties,files,to,environment,configurable,environment,resource,loader,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,environment,resource,loader,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,application,context,context,string,locations,assert,not,null,context,context,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,add,properties,files,to,environment,context,get,environment,context,locations
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations);1496955179;Add the {@link Properties} files from the given resource {@code locations}_to the {@link Environment} of the supplied {@code context}._<p>This method simply delegates to_{@link #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)}._@param context the application context whose environment should be updated__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.1.5_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations) {_		Assert.notNull(context, "'context' must not be null")__		Assert.notNull(locations, "'locations' must not be null")__		addPropertiesFilesToEnvironment(context.getEnvironment(), context, locations)__	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,properties,files,to,environment,configurable,environment,resource,loader,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,environment,resource,loader,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,application,context,context,string,locations,assert,not,null,context,context,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,add,properties,files,to,environment,context,get,environment,context,locations
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations);1497341594;Add the {@link Properties} files from the given resource {@code locations}_to the {@link Environment} of the supplied {@code context}._<p>This method simply delegates to_{@link #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)}._@param context the application context whose environment should be updated__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@since 4.1.5_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)_@throws IllegalStateException if an error occurs while processing a properties file;public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations) {_		Assert.notNull(context, "'context' must not be null")__		Assert.notNull(locations, "'locations' must not be null")__		addPropertiesFilesToEnvironment(context.getEnvironment(), context, locations)__	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,properties,files,to,environment,configurable,environment,resource,loader,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,environment,resource,loader,string,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file;public,static,void,add,properties,files,to,environment,configurable,application,context,context,string,locations,assert,not,null,context,context,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,add,properties,files,to,environment,context,get,environment,context,locations
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations);1530174524;Add the {@link Properties} files from the given resource {@code locations}_to the {@link Environment} of the supplied {@code context}._<p>This method simply delegates to_{@link #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)}._@param context the application context whose environment should be updated__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@throws IllegalStateException if an error occurs while processing a properties file_@since 4.1.5_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...);public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations) {_		Assert.notNull(context, "'context' must not be null")__		Assert.notNull(locations, "'locations' must not be null")__		addPropertiesFilesToEnvironment(context.getEnvironment(), context, locations)__	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,properties,files,to,environment,configurable,environment,resource,loader,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file,since,4,1,5,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,environment,resource,loader,string;public,static,void,add,properties,files,to,environment,configurable,application,context,context,string,locations,assert,not,null,context,context,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,add,properties,files,to,environment,context,get,environment,context,locations
TestPropertySourceUtils -> public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations);1530174524;Add the {@link Properties} files from the given resource {@code locations}_to the {@link Environment} of the supplied {@code context}._<p>This method simply delegates to_{@link #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...)}._@param context the application context whose environment should be updated__never {@code null}_@param locations the resource locations of {@code Properties} files to add_to the environment_ potentially empty but never {@code null}_@throws IllegalStateException if an error occurs while processing a properties file_@since 4.1.5_@see ResourcePropertySource_@see TestPropertySource#locations_@see #addPropertiesFilesToEnvironment(ConfigurableEnvironment, ResourceLoader, String...);public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context, String... locations) {_		Assert.notNull(context, "'context' must not be null")__		Assert.notNull(locations, "'locations' must not be null")__		addPropertiesFilesToEnvironment(context.getEnvironment(), context, locations)__	};add,the,link,properties,files,from,the,given,resource,code,locations,to,the,link,environment,of,the,supplied,code,context,p,this,method,simply,delegates,to,link,add,properties,files,to,environment,configurable,environment,resource,loader,string,param,context,the,application,context,whose,environment,should,be,updated,never,code,null,param,locations,the,resource,locations,of,code,properties,files,to,add,to,the,environment,potentially,empty,but,never,code,null,throws,illegal,state,exception,if,an,error,occurs,while,processing,a,properties,file,since,4,1,5,see,resource,property,source,see,test,property,source,locations,see,add,properties,files,to,environment,configurable,environment,resource,loader,string;public,static,void,add,properties,files,to,environment,configurable,application,context,context,string,locations,assert,not,null,context,context,must,not,be,null,assert,not,null,locations,locations,must,not,be,null,add,properties,files,to,environment,context,get,environment,context,locations
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String[] inlinedProperties);1424138964;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_@param inlinedProperties the inlined properties to add to the environment_@since 4.1.5_@see MapPropertySource_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String[] inlinedProperties) {_		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			String name = "test properties " + ObjectUtils.nullSafeToString(inlinedProperties)__			MapPropertySource ps = new MapPropertySource(name, convertInlinedPropertiesToMap(inlinedProperties))__			environment.getPropertySources().addFirst(ps)__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,since,4,1,5,see,map,property,source,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,if,object,utils,is,empty,inlined,properties,string,name,test,properties,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,new,map,property,source,name,convert,inlined,properties,to,map,inlined,properties,environment,get,property,sources,add,first,ps
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String[] inlinedProperties);1424198572;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_ never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see MapPropertySource_@see #INLINED_PROPERTIES_PROPERTY_SOURCE_NAME_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String[] inlinedProperties) {_		Assert.notNull(environment, "environment must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Adding inlined properties to environment: "_						+ ObjectUtils.nullSafeToString(inlinedProperties))__			}_			MapPropertySource ps = new MapPropertySource(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME,_				convertInlinedPropertiesToMap(inlinedProperties))__			environment.getPropertySources().addFirst(ps)__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,map,property,source,see,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,assert,not,null,environment,environment,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,if,object,utils,is,empty,inlined,properties,if,logger,is,debug,enabled,logger,debug,adding,inlined,properties,to,environment,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,new,map,property,source,convert,inlined,properties,to,map,inlined,properties,environment,get,property,sources,add,first,ps
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String[] inlinedProperties);1432018141;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_ never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see MapPropertySource_@see #INLINED_PROPERTIES_PROPERTY_SOURCE_NAME_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String[] inlinedProperties) {_		Assert.notNull(environment, "environment must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Adding inlined properties to environment: "_						+ ObjectUtils.nullSafeToString(inlinedProperties))__			}_			MapPropertySource ps = new MapPropertySource(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME,_				convertInlinedPropertiesToMap(inlinedProperties))__			environment.getPropertySources().addFirst(ps)__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,map,property,source,see,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,assert,not,null,environment,environment,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,if,object,utils,is,empty,inlined,properties,if,logger,is,debug,enabled,logger,debug,adding,inlined,properties,to,environment,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,new,map,property,source,convert,inlined,properties,to,map,inlined,properties,environment,get,property,sources,add,first,ps
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String[] inlinedProperties);1432856630;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_ never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see MapPropertySource_@see #INLINED_PROPERTIES_PROPERTY_SOURCE_NAME_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String[] inlinedProperties) {_		Assert.notNull(environment, "environment must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Adding inlined properties to environment: "_						+ ObjectUtils.nullSafeToString(inlinedProperties))__			}_			MapPropertySource ps = new MapPropertySource(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME,_				convertInlinedPropertiesToMap(inlinedProperties))__			environment.getPropertySources().addFirst(ps)__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,map,property,source,see,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,assert,not,null,environment,environment,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,if,object,utils,is,empty,inlined,properties,if,logger,is,debug,enabled,logger,debug,adding,inlined,properties,to,environment,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,new,map,property,source,convert,inlined,properties,to,map,inlined,properties,environment,get,property,sources,add,first,ps
TestPropertySourceUtils -> public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String[] inlinedProperties);1434234880;Add the given <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) to the supplied {@link ConfigurableEnvironment environment}._<p>All key-value pairs will be added to the {@code Environment} as a_single {@link MapPropertySource} with the highest precedence._<p>For details on the parsing of <em>inlined properties</em>, consult the_Javadoc for {@link #convertInlinedPropertiesToMap}._@param environment the environment to update_ never {@code null}_@param inlinedProperties the inlined properties to add to the environment__potentially empty but never {@code null}_@since 4.1.5_@see MapPropertySource_@see #INLINED_PROPERTIES_PROPERTY_SOURCE_NAME_@see TestPropertySource#properties_@see #convertInlinedPropertiesToMap;public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String[] inlinedProperties) {_		Assert.notNull(environment, "environment must not be null")__		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		if (!ObjectUtils.isEmpty(inlinedProperties)) {_			if (logger.isDebugEnabled()) {_				logger.debug("Adding inlined properties to environment: "_						+ ObjectUtils.nullSafeToString(inlinedProperties))__			}_			MapPropertySource ps = new MapPropertySource(INLINED_PROPERTIES_PROPERTY_SOURCE_NAME,_				convertInlinedPropertiesToMap(inlinedProperties))__			environment.getPropertySources().addFirst(ps)__		}_	};add,the,given,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,to,the,supplied,link,configurable,environment,environment,p,all,key,value,pairs,will,be,added,to,the,code,environment,as,a,single,link,map,property,source,with,the,highest,precedence,p,for,details,on,the,parsing,of,em,inlined,properties,em,consult,the,javadoc,for,link,convert,inlined,properties,to,map,param,environment,the,environment,to,update,never,code,null,param,inlined,properties,the,inlined,properties,to,add,to,the,environment,potentially,empty,but,never,code,null,since,4,1,5,see,map,property,source,see,see,test,property,source,properties,see,convert,inlined,properties,to,map;public,static,void,add,inlined,properties,to,environment,configurable,environment,environment,string,inlined,properties,assert,not,null,environment,environment,must,not,be,null,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,if,object,utils,is,empty,inlined,properties,if,logger,is,debug,enabled,logger,debug,adding,inlined,properties,to,environment,object,utils,null,safe,to,string,inlined,properties,map,property,source,ps,new,map,property,source,convert,inlined,properties,to,map,inlined,properties,environment,get,property,sources,add,first,ps
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties);1458929547;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@param inlinedProperties the inlined properties to convert_ potentially empty_but never {@code null}_@return a new, ordered map containing the converted properties_@since 4.1.5_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties) {_		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		Map<String, Object> map = new LinkedHashMap<String, Object>()___		Properties props = new Properties()__		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}__			try {_				props.load(new StringReader(pair))__			}_			catch (Exception e) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "].", e)__			}_			Assert.state(props.size() == 1, "Failed to load exactly one test environment property from [" + pair + "].")___			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,param,inlined,properties,the,inlined,properties,to,convert,potentially,empty,but,never,code,null,return,a,new,ordered,map,containing,the,converted,properties,since,4,1,5,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,map,string,object,map,new,linked,hash,map,string,object,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,e,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,e,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties);1460041357;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@param inlinedProperties the inlined properties to convert_ potentially empty_but never {@code null}_@return a new, ordered map containing the converted properties_@since 4.1.5_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties) {_		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		Map<String, Object> map = new LinkedHashMap<String, Object>()___		Properties props = new Properties()__		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}__			try {_				props.load(new StringReader(pair))__			}_			catch (Exception e) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "].", e)__			}_			Assert.state(props.size() == 1, "Failed to load exactly one test environment property from [" + pair + "].")___			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,param,inlined,properties,the,inlined,properties,to,convert,potentially,empty,but,never,code,null,return,a,new,ordered,map,containing,the,converted,properties,since,4,1,5,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,map,string,object,map,new,linked,hash,map,string,object,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,e,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,e,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties);1465306936;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@param inlinedProperties the inlined properties to convert_ potentially empty_but never {@code null}_@return a new, ordered map containing the converted properties_@since 4.1.5_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties) {_		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		Map<String, Object> map = new LinkedHashMap<String, Object>()___		Properties props = new Properties()__		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}__			try {_				props.load(new StringReader(pair))__			}_			catch (Exception e) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "].", e)__			}_			Assert.state(props.size() == 1, "Failed to load exactly one test environment property from [" + pair + "].")___			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,param,inlined,properties,the,inlined,properties,to,convert,potentially,empty,but,never,code,null,return,a,new,ordered,map,containing,the,converted,properties,since,4,1,5,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,map,string,object,map,new,linked,hash,map,string,object,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,e,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,e,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties);1467677340;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@param inlinedProperties the inlined properties to convert_ potentially empty_but never {@code null}_@return a new, ordered map containing the converted properties_@since 4.1.5_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties) {_		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		Map<String, Object> map = new LinkedHashMap<String, Object>()__		Properties props = new Properties()___		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}_			try {_				props.load(new StringReader(pair))__			}_			catch (Exception ex) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "]", ex)__			}_			Assert.state(props.size() == 1, "Failed to load exactly one test environment property from [" + pair + "]")__			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,param,inlined,properties,the,inlined,properties,to,convert,potentially,empty,but,never,code,null,return,a,new,ordered,map,containing,the,converted,properties,since,4,1,5,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,map,string,object,map,new,linked,hash,map,string,object,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,ex,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,ex,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties);1467730834;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@param inlinedProperties the inlined properties to convert_ potentially empty_but never {@code null}_@return a new, ordered map containing the converted properties_@since 4.1.5_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties) {_		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		Map<String, Object> map = new LinkedHashMap<>()__		Properties props = new Properties()___		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}_			try {_				props.load(new StringReader(pair))__			}_			catch (Exception ex) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "]", ex)__			}_			Assert.state(props.size() == 1, "Failed to load exactly one test environment property from [" + pair + "]")__			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,param,inlined,properties,the,inlined,properties,to,convert,potentially,empty,but,never,code,null,return,a,new,ordered,map,containing,the,converted,properties,since,4,1,5,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,map,string,object,map,new,linked,hash,map,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,ex,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,ex,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties);1467821493;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@param inlinedProperties the inlined properties to convert_ potentially empty_but never {@code null}_@return a new, ordered map containing the converted properties_@since 4.1.5_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties) {_		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		Map<String, Object> map = new LinkedHashMap<>()__		Properties props = new Properties()___		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}_			try {_				props.load(new StringReader(pair))__			}_			catch (Exception ex) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "]", ex)__			}_			Assert.state(props.size() == 1, "Failed to load exactly one test environment property from [" + pair + "]")__			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,param,inlined,properties,the,inlined,properties,to,convert,potentially,empty,but,never,code,null,return,a,new,ordered,map,containing,the,converted,properties,since,4,1,5,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,map,string,object,map,new,linked,hash,map,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,ex,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,ex,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties);1468426720;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@param inlinedProperties the inlined properties to convert_ potentially empty_but never {@code null}_@return a new, ordered map containing the converted properties_@since 4.1.5_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties) {_		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		Map<String, Object> map = new LinkedHashMap<>()__		Properties props = new Properties()___		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}_			try {_				props.load(new StringReader(pair))__			}_			catch (Exception ex) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "]", ex)__			}_			Assert.state(props.size() == 1, "Failed to load exactly one test environment property from [" + pair + "]")__			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,param,inlined,properties,the,inlined,properties,to,convert,potentially,empty,but,never,code,null,return,a,new,ordered,map,containing,the,converted,properties,since,4,1,5,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,map,string,object,map,new,linked,hash,map,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,ex,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,ex,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties);1472834371;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@param inlinedProperties the inlined properties to convert_ potentially empty_but never {@code null}_@return a new, ordered map containing the converted properties_@since 4.1.5_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties) {_		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		Map<String, Object> map = new LinkedHashMap<>()__		Properties props = new Properties()___		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}_			try {_				props.load(new StringReader(pair))__			}_			catch (Exception ex) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "]", ex)__			}_			Assert.state(props.size() == 1, () -> "Failed to load exactly one test environment property from [" + pair + "]")__			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,param,inlined,properties,the,inlined,properties,to,convert,potentially,empty,but,never,code,null,return,a,new,ordered,map,containing,the,converted,properties,since,4,1,5,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,map,string,object,map,new,linked,hash,map,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,ex,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,ex,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties);1474905889;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@param inlinedProperties the inlined properties to convert_ potentially empty_but never {@code null}_@return a new, ordered map containing the converted properties_@since 4.1.5_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties) {_		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		Map<String, Object> map = new LinkedHashMap<>()__		Properties props = new Properties()___		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}_			try {_				props.load(new StringReader(pair))__			}_			catch (Exception ex) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "]", ex)__			}_			Assert.state(props.size() == 1, () -> "Failed to load exactly one test environment property from [" + pair + "]")__			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,param,inlined,properties,the,inlined,properties,to,convert,potentially,empty,but,never,code,null,return,a,new,ordered,map,containing,the,converted,properties,since,4,1,5,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,map,string,object,map,new,linked,hash,map,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,ex,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,ex,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties);1496955179;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@param inlinedProperties the inlined properties to convert_ potentially empty_but never {@code null}_@return a new, ordered map containing the converted properties_@since 4.1.5_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties) {_		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		Map<String, Object> map = new LinkedHashMap<>()__		Properties props = new Properties()___		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}_			try {_				props.load(new StringReader(pair))__			}_			catch (Exception ex) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "]", ex)__			}_			Assert.state(props.size() == 1, () -> "Failed to load exactly one test environment property from [" + pair + "]")__			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,param,inlined,properties,the,inlined,properties,to,convert,potentially,empty,but,never,code,null,return,a,new,ordered,map,containing,the,converted,properties,since,4,1,5,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,map,string,object,map,new,linked,hash,map,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,ex,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,ex,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties);1497341594;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@param inlinedProperties the inlined properties to convert_ potentially empty_but never {@code null}_@return a new, ordered map containing the converted properties_@since 4.1.5_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties) {_		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		Map<String, Object> map = new LinkedHashMap<>()__		Properties props = new Properties()___		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}_			try {_				props.load(new StringReader(pair))__			}_			catch (Exception ex) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "]", ex)__			}_			Assert.state(props.size() == 1, () -> "Failed to load exactly one test environment property from [" + pair + "]")__			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,param,inlined,properties,the,inlined,properties,to,convert,potentially,empty,but,never,code,null,return,a,new,ordered,map,containing,the,converted,properties,since,4,1,5,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,map,string,object,map,new,linked,hash,map,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,ex,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,ex,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties);1530174524;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@param inlinedProperties the inlined properties to convert_ potentially empty_but never {@code null}_@return a new, ordered map containing the converted properties_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs_@since 4.1.5_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties) {_		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		Map<String, Object> map = new LinkedHashMap<>()__		Properties props = new Properties()___		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}_			try {_				props.load(new StringReader(pair))__			}_			catch (Exception ex) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "]", ex)__			}_			Assert.state(props.size() == 1, () -> "Failed to load exactly one test environment property from [" + pair + "]")__			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,param,inlined,properties,the,inlined,properties,to,convert,potentially,empty,but,never,code,null,return,a,new,ordered,map,containing,the,converted,properties,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs,since,4,1,5,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,map,string,object,map,new,linked,hash,map,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,ex,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,ex,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties);1530174524;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@param inlinedProperties the inlined properties to convert_ potentially empty_but never {@code null}_@return a new, ordered map containing the converted properties_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs_@since 4.1.5_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static Map<String, Object> convertInlinedPropertiesToMap(String... inlinedProperties) {_		Assert.notNull(inlinedProperties, "'inlinedProperties' must not be null")__		Map<String, Object> map = new LinkedHashMap<>()__		Properties props = new Properties()___		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}_			try {_				props.load(new StringReader(pair))__			}_			catch (Exception ex) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "]", ex)__			}_			Assert.state(props.size() == 1, () -> "Failed to load exactly one test environment property from [" + pair + "]")__			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,param,inlined,properties,the,inlined,properties,to,convert,potentially,empty,but,never,code,null,return,a,new,ordered,map,containing,the,converted,properties,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs,since,4,1,5,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,map,string,object,map,new,linked,hash,map,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,ex,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,ex,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String[] inlinedProperties);1424138964;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@since 4.1.5_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs;public static Map<String, Object> convertInlinedPropertiesToMap(String[] inlinedProperties) {_		Map<String, Object> map = new LinkedHashMap<String, Object>()___		Properties props = new Properties()__		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}__			try {_				props.load(new StringReader(pair))__			}_			catch (Exception e) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "].", e)__			}_			Assert.state(props.size() == 1, "Failed to load exactly one test environment property from [" + pair + "].")___			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,since,4,1,5,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,map,string,object,map,new,linked,hash,map,string,object,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,e,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,e,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String[] inlinedProperties);1424198572;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@param inlinedProperties the inlined properties to convert_ potentially empty_but never {@code null}_@return a new, ordered map containing the converted properties_@since 4.1.5_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static Map<String, Object> convertInlinedPropertiesToMap(String[] inlinedProperties) {_		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		Map<String, Object> map = new LinkedHashMap<String, Object>()___		Properties props = new Properties()__		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}__			try {_				props.load(new StringReader(pair))__			}_			catch (Exception e) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "].", e)__			}_			Assert.state(props.size() == 1, "Failed to load exactly one test environment property from [" + pair + "].")___			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,param,inlined,properties,the,inlined,properties,to,convert,potentially,empty,but,never,code,null,return,a,new,ordered,map,containing,the,converted,properties,since,4,1,5,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,map,string,object,map,new,linked,hash,map,string,object,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,e,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,e,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String[] inlinedProperties);1432018141;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@param inlinedProperties the inlined properties to convert_ potentially empty_but never {@code null}_@return a new, ordered map containing the converted properties_@since 4.1.5_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static Map<String, Object> convertInlinedPropertiesToMap(String[] inlinedProperties) {_		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		Map<String, Object> map = new LinkedHashMap<String, Object>()___		Properties props = new Properties()__		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}__			try {_				props.load(new StringReader(pair))__			}_			catch (Exception e) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "].", e)__			}_			Assert.state(props.size() == 1, "Failed to load exactly one test environment property from [" + pair + "].")___			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,param,inlined,properties,the,inlined,properties,to,convert,potentially,empty,but,never,code,null,return,a,new,ordered,map,containing,the,converted,properties,since,4,1,5,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,map,string,object,map,new,linked,hash,map,string,object,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,e,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,e,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String[] inlinedProperties);1432856630;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@param inlinedProperties the inlined properties to convert_ potentially empty_but never {@code null}_@return a new, ordered map containing the converted properties_@since 4.1.5_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static Map<String, Object> convertInlinedPropertiesToMap(String[] inlinedProperties) {_		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		Map<String, Object> map = new LinkedHashMap<String, Object>()___		Properties props = new Properties()__		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}__			try {_				props.load(new StringReader(pair))__			}_			catch (Exception e) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "].", e)__			}_			Assert.state(props.size() == 1, "Failed to load exactly one test environment property from [" + pair + "].")___			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,param,inlined,properties,the,inlined,properties,to,convert,potentially,empty,but,never,code,null,return,a,new,ordered,map,containing,the,converted,properties,since,4,1,5,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,map,string,object,map,new,linked,hash,map,string,object,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,e,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,e,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
TestPropertySourceUtils -> public static Map<String, Object> convertInlinedPropertiesToMap(String[] inlinedProperties);1434234880;Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>_pairs) into a map keyed by property name, preserving the ordering of property names_in the returned map._<p>Parsing of the key-value pairs is achieved by converting all pairs_into <em>virtual</em> properties files in memory and delegating to_{@link Properties#load(java.io.Reader)} to parse each virtual file._<p>For a full discussion of <em>inlined properties</em>, consult the Javadoc_for {@link TestPropertySource#properties}._@param inlinedProperties the inlined properties to convert_ potentially empty_but never {@code null}_@return a new, ordered map containing the converted properties_@since 4.1.5_@throws IllegalStateException if a given key-value pair cannot be parsed, or if_a given inlined property contains multiple key-value pairs_@see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]);public static Map<String, Object> convertInlinedPropertiesToMap(String[] inlinedProperties) {_		Assert.notNull(inlinedProperties, "inlinedProperties must not be null")__		Map<String, Object> map = new LinkedHashMap<String, Object>()___		Properties props = new Properties()__		for (String pair : inlinedProperties) {_			if (!StringUtils.hasText(pair)) {_				continue__			}__			try {_				props.load(new StringReader(pair))__			}_			catch (Exception e) {_				throw new IllegalStateException("Failed to load test environment property from [" + pair + "].", e)__			}_			Assert.state(props.size() == 1, "Failed to load exactly one test environment property from [" + pair + "].")___			for (String name : props.stringPropertyNames()) {_				map.put(name, props.getProperty(name))__			}_			props.clear()__		}__		return map__	};convert,the,supplied,em,inlined,properties,em,in,the,form,of,em,key,value,em,pairs,into,a,map,keyed,by,property,name,preserving,the,ordering,of,property,names,in,the,returned,map,p,parsing,of,the,key,value,pairs,is,achieved,by,converting,all,pairs,into,em,virtual,em,properties,files,in,memory,and,delegating,to,link,properties,load,java,io,reader,to,parse,each,virtual,file,p,for,a,full,discussion,of,em,inlined,properties,em,consult,the,javadoc,for,link,test,property,source,properties,param,inlined,properties,the,inlined,properties,to,convert,potentially,empty,but,never,code,null,return,a,new,ordered,map,containing,the,converted,properties,since,4,1,5,throws,illegal,state,exception,if,a,given,key,value,pair,cannot,be,parsed,or,if,a,given,inlined,property,contains,multiple,key,value,pairs,see,add,inlined,properties,to,environment,configurable,environment,string;public,static,map,string,object,convert,inlined,properties,to,map,string,inlined,properties,assert,not,null,inlined,properties,inlined,properties,must,not,be,null,map,string,object,map,new,linked,hash,map,string,object,properties,props,new,properties,for,string,pair,inlined,properties,if,string,utils,has,text,pair,continue,try,props,load,new,string,reader,pair,catch,exception,e,throw,new,illegal,state,exception,failed,to,load,test,environment,property,from,pair,e,assert,state,props,size,1,failed,to,load,exactly,one,test,environment,property,from,pair,for,string,name,props,string,property,names,map,put,name,props,get,property,name,props,clear,return,map
