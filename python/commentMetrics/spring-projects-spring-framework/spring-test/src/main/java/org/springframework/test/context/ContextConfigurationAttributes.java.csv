commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Get the {@linkplain Class class} that declared the  * {@link ContextConfiguration @ContextConfiguration} annotation, either explicitly  * or implicitly.  * @return the declaring class (never {@code null})  */ ;/**  * Get the {@linkplain Class class} that declared the  * {@link ContextConfiguration @ContextConfiguration} annotation, either explicitly  * or implicitly.  * @return the declaring class (never {@code null})  */ public Class<?> getDeclaringClass() {     return this.declaringClass. }
true;public;1;3;/**  * Set the <em>processed</em> annotated classes, effectively overriding the  * original value declared via {@link ContextConfiguration @ContextConfiguration}.  * @see #getClasses()  */ ;/**  * Set the <em>processed</em> annotated classes, effectively overriding the  * original value declared via {@link ContextConfiguration @ContextConfiguration}.  * @see #getClasses()  */ public void setClasses(Class<?>... classes) {     this.classes = classes. }
true;public;0;3;/**  * Get the annotated classes that were declared via  * {@link ContextConfiguration @ContextConfiguration}.  * <p>Note: this is a mutable property. The returned value may therefore  * represent a <em>processed</em> value that does not match the original value  * declared via {@link ContextConfiguration @ContextConfiguration}.  * @return the annotated classes (potentially {<em>empty</em>)  * @see ContextConfiguration#classes  * @see #setClasses(Class[])  */ ;/**  * Get the annotated classes that were declared via  * {@link ContextConfiguration @ContextConfiguration}.  * <p>Note: this is a mutable property. The returned value may therefore  * represent a <em>processed</em> value that does not match the original value  * declared via {@link ContextConfiguration @ContextConfiguration}.  * @return the annotated classes (potentially {<em>empty</em>)  * @see ContextConfiguration#classes  * @see #setClasses(Class[])  */ public Class<?>[] getClasses() {     return this.classes. }
true;public;0;3;/**  * Determine if this {@code ContextConfigurationAttributes} instance has  * class-based resources.  * @return {@code true} if the {@link #getClasses() classes} array is not empty  * @see #hasResources()  * @see #hasLocations()  */ ;/**  * Determine if this {@code ContextConfigurationAttributes} instance has  * class-based resources.  * @return {@code true} if the {@link #getClasses() classes} array is not empty  * @see #hasResources()  * @see #hasLocations()  */ public boolean hasClasses() {     return (getClasses().length > 0). }
true;public;1;3;/**  * Set the <em>processed</em> resource locations, effectively overriding the  * original value declared via {@link ContextConfiguration @ContextConfiguration}.  * @see #getLocations()  */ ;/**  * Set the <em>processed</em> resource locations, effectively overriding the  * original value declared via {@link ContextConfiguration @ContextConfiguration}.  * @see #getLocations()  */ public void setLocations(String... locations) {     this.locations = locations. }
true;public;0;3;/**  * Get the resource locations that were declared via  * {@link ContextConfiguration @ContextConfiguration}.  * <p>Note: this is a mutable property. The returned value may therefore  * represent a <em>processed</em> value that does not match the original value  * declared via {@link ContextConfiguration @ContextConfiguration}.  * @return the resource locations (potentially <em>empty</em>)  * @see ContextConfiguration#value  * @see ContextConfiguration#locations  * @see #setLocations  */ ;/**  * Get the resource locations that were declared via  * {@link ContextConfiguration @ContextConfiguration}.  * <p>Note: this is a mutable property. The returned value may therefore  * represent a <em>processed</em> value that does not match the original value  * declared via {@link ContextConfiguration @ContextConfiguration}.  * @return the resource locations (potentially <em>empty</em>)  * @see ContextConfiguration#value  * @see ContextConfiguration#locations  * @see #setLocations  */ public String[] getLocations() {     return this.locations. }
true;public;0;3;/**  * Determine if this {@code ContextConfigurationAttributes} instance has  * path-based resource locations.  * @return {@code true} if the {@link #getLocations() locations} array is not empty  * @see #hasResources()  * @see #hasClasses()  */ ;/**  * Determine if this {@code ContextConfigurationAttributes} instance has  * path-based resource locations.  * @return {@code true} if the {@link #getLocations() locations} array is not empty  * @see #hasResources()  * @see #hasClasses()  */ public boolean hasLocations() {     return (getLocations().length > 0). }
true;public;0;3;/**  * Determine if this {@code ContextConfigurationAttributes} instance has  * either path-based resource locations or class-based resources.  * @return {@code true} if either the {@link #getLocations() locations}  * or the {@link #getClasses() classes} array is not empty  * @see #hasLocations()  * @see #hasClasses()  */ ;/**  * Determine if this {@code ContextConfigurationAttributes} instance has  * either path-based resource locations or class-based resources.  * @return {@code true} if either the {@link #getLocations() locations}  * or the {@link #getClasses() classes} array is not empty  * @see #hasLocations()  * @see #hasClasses()  */ public boolean hasResources() {     return (hasLocations() || hasClasses()). }
true;public;0;3;/**  * Get the {@code inheritLocations} flag that was declared via  * {@link ContextConfiguration @ContextConfiguration}.  * @return the {@code inheritLocations} flag  * @see ContextConfiguration#inheritLocations  */ ;/**  * Get the {@code inheritLocations} flag that was declared via  * {@link ContextConfiguration @ContextConfiguration}.  * @return the {@code inheritLocations} flag  * @see ContextConfiguration#inheritLocations  */ public boolean isInheritLocations() {     return this.inheritLocations. }
true;public;0;3;/**  * Get the {@code ApplicationContextInitializer} classes that were declared via  * {@link ContextConfiguration @ContextConfiguration}.  * @return the {@code ApplicationContextInitializer} classes  * @since 3.2  */ ;/**  * Get the {@code ApplicationContextInitializer} classes that were declared via  * {@link ContextConfiguration @ContextConfiguration}.  * @return the {@code ApplicationContextInitializer} classes  * @since 3.2  */ public Class<? extends ApplicationContextInitializer<?>>[] getInitializers() {     return this.initializers. }
true;public;0;3;/**  * Get the {@code inheritInitializers} flag that was declared via  * {@link ContextConfiguration @ContextConfiguration}.  * @return the {@code inheritInitializers} flag  * @since 3.2  */ ;/**  * Get the {@code inheritInitializers} flag that was declared via  * {@link ContextConfiguration @ContextConfiguration}.  * @return the {@code inheritInitializers} flag  * @since 3.2  */ public boolean isInheritInitializers() {     return this.inheritInitializers. }
true;public;0;4;/**  * Get the name of the context hierarchy level that was declared via  * {@link ContextConfiguration @ContextConfiguration}.  * @return the name of the context hierarchy level or {@code null} if not applicable  * @see ContextConfiguration#name()  * @since 3.2.2  */ ;/**  * Get the name of the context hierarchy level that was declared via  * {@link ContextConfiguration @ContextConfiguration}.  * @return the name of the context hierarchy level or {@code null} if not applicable  * @see ContextConfiguration#name()  * @since 3.2.2  */ @Nullable public String getName() {     return this.name. }
true;public;0;3;/**  * Get the {@code ContextLoader} class that was declared via  * {@link ContextConfiguration @ContextConfiguration}.  * @return the {@code ContextLoader} class  * @see ContextConfiguration#loader  */ ;/**  * Get the {@code ContextLoader} class that was declared via  * {@link ContextConfiguration @ContextConfiguration}.  * @return the {@code ContextLoader} class  * @see ContextConfiguration#loader  */ public Class<? extends ContextLoader> getContextLoaderClass() {     return this.contextLoaderClass. }
true;public;1;18;/**  * Determine if the supplied object is equal to this  * {@code ContextConfigurationAttributes} instance by comparing both object's  * {@linkplain #getDeclaringClass() declaring class},  * {@linkplain #getLocations() locations},  * {@linkplain #getClasses() annotated classes},  * {@linkplain #isInheritLocations() inheritLocations flag},  * {@linkplain #getInitializers() context initializer classes},  * {@linkplain #isInheritInitializers() inheritInitializers flag}, and the  * {@link #getContextLoaderClass() ContextLoader class}.  */ ;/**  * Determine if the supplied object is equal to this  * {@code ContextConfigurationAttributes} instance by comparing both object's  * {@linkplain #getDeclaringClass() declaring class},  * {@linkplain #getLocations() locations},  * {@linkplain #getClasses() annotated classes},  * {@linkplain #isInheritLocations() inheritLocations flag},  * {@linkplain #getInitializers() context initializer classes},  * {@linkplain #isInheritInitializers() inheritInitializers flag}, and the  * {@link #getContextLoaderClass() ContextLoader class}.  */ @Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof ContextConfigurationAttributes)) {         return false.     }     ContextConfigurationAttributes otherAttr = (ContextConfigurationAttributes) other.     return (ObjectUtils.nullSafeEquals(this.declaringClass, otherAttr.declaringClass) && Arrays.equals(this.classes, otherAttr.classes)) && Arrays.equals(this.locations, otherAttr.locations) && this.inheritLocations == otherAttr.inheritLocations && Arrays.equals(this.initializers, otherAttr.initializers) && this.inheritInitializers == otherAttr.inheritInitializers && ObjectUtils.nullSafeEquals(this.name, otherAttr.name) && ObjectUtils.nullSafeEquals(this.contextLoaderClass, otherAttr.contextLoaderClass). }
true;public;0;8;/**  * Generate a unique hash code for all properties of this  * {@code ContextConfigurationAttributes} instance excluding the  * {@linkplain #getName() name}.  */ ;/**  * Generate a unique hash code for all properties of this  * {@code ContextConfigurationAttributes} instance excluding the  * {@linkplain #getName() name}.  */ @Override public int hashCode() {     int result = this.declaringClass.hashCode().     result = 31 * result + Arrays.hashCode(this.classes).     result = 31 * result + Arrays.hashCode(this.locations).     result = 31 * result + Arrays.hashCode(this.initializers).     return result. }
true;public;0;13;/**  * Provide a String representation of the context configuration attributes  * and declaring class.  */ ;/**  * Provide a String representation of the context configuration attributes  * and declaring class.  */ @Override public String toString() {     return new ToStringCreator(this).append("declaringClass", this.declaringClass.getName()).append("classes", ObjectUtils.nullSafeToString(this.classes)).append("locations", ObjectUtils.nullSafeToString(this.locations)).append("inheritLocations", this.inheritLocations).append("initializers", ObjectUtils.nullSafeToString(this.initializers)).append("inheritInitializers", this.inheritInitializers).append("name", this.name).append("contextLoaderClass", this.contextLoaderClass.getName()).toString(). }
