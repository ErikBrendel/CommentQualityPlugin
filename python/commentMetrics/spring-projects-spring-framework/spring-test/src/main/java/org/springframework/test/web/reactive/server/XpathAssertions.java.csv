commented;modifiers;parameterAmount;loc;comment;code
false;private,static;3;10;;private static XpathExpectationsHelper initXpathHelper(String expression, @Nullable Map<String, String> namespaces, Object[] args) {     try {         return new XpathExpectationsHelper(expression, namespaces, args).     } catch (XPathExpressionException ex) {         throw new AssertionError("XML parsing error", ex).     } }
true;public;1;3;/**  * Delegates to {@link XpathExpectationsHelper#assertString(byte[], String, String)}.  */ ;/**  * Delegates to {@link XpathExpectationsHelper#assertString(byte[], String, String)}.  */ public WebTestClient.BodyContentSpec isEqualTo(String expectedValue) {     return assertWith(() -> this.xpathHelper.assertString(getContent(), getCharset(), expectedValue)). }
true;public;1;3;/**  * Delegates to {@link XpathExpectationsHelper#assertNumber(byte[], String, Double)}.  */ ;/**  * Delegates to {@link XpathExpectationsHelper#assertNumber(byte[], String, Double)}.  */ public WebTestClient.BodyContentSpec isEqualTo(Double expectedValue) {     return assertWith(() -> this.xpathHelper.assertNumber(getContent(), getCharset(), expectedValue)). }
true;public;1;3;/**  * Delegates to {@link XpathExpectationsHelper#assertBoolean(byte[], String, boolean)}.  */ ;/**  * Delegates to {@link XpathExpectationsHelper#assertBoolean(byte[], String, boolean)}.  */ public WebTestClient.BodyContentSpec isEqualTo(boolean expectedValue) {     return assertWith(() -> this.xpathHelper.assertBoolean(getContent(), getCharset(), expectedValue)). }
true;public;0;3;/**  * Delegates to {@link XpathExpectationsHelper#exists(byte[], String)}.  */ ;/**  * Delegates to {@link XpathExpectationsHelper#exists(byte[], String)}.  */ public WebTestClient.BodyContentSpec exists() {     return assertWith(() -> this.xpathHelper.exists(getContent(), getCharset())). }
true;public;0;3;/**  * Delegates to {@link XpathExpectationsHelper#doesNotExist(byte[], String)}.  */ ;/**  * Delegates to {@link XpathExpectationsHelper#doesNotExist(byte[], String)}.  */ public WebTestClient.BodyContentSpec doesNotExist() {     return assertWith(() -> this.xpathHelper.doesNotExist(getContent(), getCharset())). }
true;public;1;3;/**  * Delegates to {@link XpathExpectationsHelper#assertNodeCount(byte[], String, int)}.  */ ;/**  * Delegates to {@link XpathExpectationsHelper#assertNodeCount(byte[], String, int)}.  */ public WebTestClient.BodyContentSpec nodeCount(int expectedCount) {     return assertWith(() -> this.xpathHelper.assertNodeCount(getContent(), getCharset(), expectedCount)). }
true;public;1;3;/**  * Delegates to {@link XpathExpectationsHelper#assertString(byte[], String, Matcher)}.  * @since 5.1  */ ;/**  * Delegates to {@link XpathExpectationsHelper#assertString(byte[], String, Matcher)}.  * @since 5.1  */ public WebTestClient.BodyContentSpec string(Matcher<? super String> matcher) {     return assertWith(() -> this.xpathHelper.assertString(getContent(), getCharset(), matcher)). }
true;public;1;3;/**  * Delegates to {@link XpathExpectationsHelper#assertNumber(byte[], String, Matcher)}.  * @since 5.1  */ ;/**  * Delegates to {@link XpathExpectationsHelper#assertNumber(byte[], String, Matcher)}.  * @since 5.1  */ public WebTestClient.BodyContentSpec number(Matcher<? super Double> matcher) {     return assertWith(() -> this.xpathHelper.assertNumber(getContent(), getCharset(), matcher)). }
true;public;1;3;/**  * Delegates to {@link XpathExpectationsHelper#assertNodeCount(byte[], String, Matcher)}.  * @since 5.1  */ ;/**  * Delegates to {@link XpathExpectationsHelper#assertNodeCount(byte[], String, Matcher)}.  * @since 5.1  */ public WebTestClient.BodyContentSpec nodeCount(Matcher<Integer> matcher) {     return assertWith(() -> this.xpathHelper.assertNodeCount(getContent(), getCharset(), matcher)). }
true;public;1;6;/**  * Consume the result of the XPath evaluation as a String.  * @since 5.1  */ ;/**  * Consume the result of the XPath evaluation as a String.  * @since 5.1  */ public WebTestClient.BodyContentSpec string(Consumer<String> consumer) {     return assertWith(() -> {         String value = this.xpathHelper.evaluateXpath(getContent(), getCharset(), String.class).         consumer.accept(value).     }). }
true;public;1;6;/**  * Consume the result of the XPath evaluation as a Double.  * @since 5.1  */ ;/**  * Consume the result of the XPath evaluation as a Double.  * @since 5.1  */ public WebTestClient.BodyContentSpec number(Consumer<Double> consumer) {     return assertWith(() -> {         Double value = this.xpathHelper.evaluateXpath(getContent(), getCharset(), Double.class).         consumer.accept(value).     }). }
true;public;1;6;/**  * Consume the count of nodes as result of the XPath evaluation.  * @since 5.1  */ ;/**  * Consume the count of nodes as result of the XPath evaluation.  * @since 5.1  */ public WebTestClient.BodyContentSpec nodeCount(Consumer<Integer> consumer) {     return assertWith(() -> {         Integer value = this.xpathHelper.evaluateXpath(getContent(), getCharset(), Integer.class).         consumer.accept(value).     }). }
false;private;1;9;;private WebTestClient.BodyContentSpec assertWith(CheckedExceptionTask task) {     try {         task.run().     } catch (Exception ex) {         throw new AssertionError("XML parsing error", ex).     }     return this.bodySpec. }
false;private;0;5;;private byte[] getContent() {     byte[] body = this.bodySpec.returnResult().getResponseBody().     Assert.notNull(body, "Expected body content").     return body. }
false;private;0;8;;private String getCharset() {     return Optional.of(this.bodySpec.returnResult()).map(EntityExchangeResult::getResponseHeaders).map(HttpHeaders::getContentType).map(MimeType::getCharset).orElse(StandardCharsets.UTF_8).name(). }
false;public;1;5;;@Override public boolean equals(Object obj) {     throw new AssertionError("Object#equals is disabled " + "to avoid being used in error instead of XPathAssertions#isEqualTo(String)."). }
false;public;0;4;;@Override public int hashCode() {     return super.hashCode(). }
false;;0;1;;void run() throws Exception.
