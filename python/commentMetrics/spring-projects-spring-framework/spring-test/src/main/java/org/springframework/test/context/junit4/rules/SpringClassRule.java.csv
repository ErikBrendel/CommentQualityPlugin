# id;timestamp;commentText;codeText;commentWords;codeWords
SpringClassRule -> static final TestContextManager getTestContextManager(Class<?> testClass);1431875649;Get the {@link TestContextManager} associated with the supplied test class._@param testClass the test class to be managed_ never {@code null};static final TestContextManager getTestContextManager(Class<?> testClass) {_		Assert.notNull(testClass, "testClass must not be null")__		synchronized (testContextManagerCache) {_			TestContextManager testContextManager = testContextManagerCache.get(testClass)__			if (testContextManager == null) {_				testContextManager = new TestContextManager(testClass)__				testContextManagerCache.put(testClass, testContextManager)__			}_			return testContextManager__		}_	};get,the,link,test,context,manager,associated,with,the,supplied,test,class,param,test,class,the,test,class,to,be,managed,never,code,null;static,final,test,context,manager,get,test,context,manager,class,test,class,assert,not,null,test,class,test,class,must,not,be,null,synchronized,test,context,manager,cache,test,context,manager,test,context,manager,test,context,manager,cache,get,test,class,if,test,context,manager,null,test,context,manager,new,test,context,manager,test,class,test,context,manager,cache,put,test,class,test,context,manager,return,test,context,manager
SpringClassRule -> static final TestContextManager getTestContextManager(Class<?> testClass);1443464140;Get the {@link TestContextManager} associated with the supplied test class._@param testClass the test class to be managed_ never {@code null};static final TestContextManager getTestContextManager(Class<?> testClass) {_		Assert.notNull(testClass, "testClass must not be null")__		synchronized (testContextManagerCache) {_			TestContextManager testContextManager = testContextManagerCache.get(testClass)__			if (testContextManager == null) {_				testContextManager = new TestContextManager(testClass)__				testContextManagerCache.put(testClass, testContextManager)__			}_			return testContextManager__		}_	};get,the,link,test,context,manager,associated,with,the,supplied,test,class,param,test,class,the,test,class,to,be,managed,never,code,null;static,final,test,context,manager,get,test,context,manager,class,test,class,assert,not,null,test,class,test,class,must,not,be,null,synchronized,test,context,manager,cache,test,context,manager,test,context,manager,test,context,manager,cache,get,test,class,if,test,context,manager,null,test,context,manager,new,test,context,manager,test,class,test,context,manager,cache,put,test,class,test,context,manager,return,test,context,manager
SpringClassRule -> private Statement withTestContextManagerCacheEviction(Statement next, Class<?> testClass);1472740443;Wrap the supplied {@link Statement} with a {@code TestContextManagerCacheEvictor} statement._@see TestContextManagerCacheEvictor;private Statement withTestContextManagerCacheEviction(Statement next, Class<?> testClass) {_		return new TestContextManagerCacheEvictor(next, testClass)__	};wrap,the,supplied,link,statement,with,a,code,test,context,manager,cache,evictor,statement,see,test,context,manager,cache,evictor;private,statement,with,test,context,manager,cache,eviction,statement,next,class,test,class,return,new,test,context,manager,cache,evictor,next,test,class
SpringClassRule -> private Statement withTestContextManagerCacheEviction(Statement next, Class<?> testClass);1530174524;Wrap the supplied {@link Statement} with a {@code TestContextManagerCacheEvictor} statement._@see TestContextManagerCacheEvictor;private Statement withTestContextManagerCacheEviction(Statement next, Class<?> testClass) {_		return new TestContextManagerCacheEvictor(next, testClass)__	};wrap,the,supplied,link,statement,with,a,code,test,context,manager,cache,evictor,statement,see,test,context,manager,cache,evictor;private,statement,with,test,context,manager,cache,eviction,statement,next,class,test,class,return,new,test,context,manager,cache,evictor,next,test,class
SpringClassRule -> private Statement withTestContextManagerCacheEviction(Statement next, Class<?> testClass);1530174524;Wrap the supplied {@link Statement} with a {@code TestContextManagerCacheEvictor} statement._@see TestContextManagerCacheEvictor;private Statement withTestContextManagerCacheEviction(Statement next, Class<?> testClass) {_		return new TestContextManagerCacheEvictor(next, testClass)__	};wrap,the,supplied,link,statement,with,a,code,test,context,manager,cache,evictor,statement,see,test,context,manager,cache,evictor;private,statement,with,test,context,manager,cache,eviction,statement,next,class,test,class,return,new,test,context,manager,cache,evictor,next,test,class
SpringClassRule -> private Statement withTestContextManagerCacheEviction(Statement next, Class<?> testClass);1530188116;Wrap the supplied {@link Statement} with a {@code TestContextManagerCacheEvictor} statement._@see TestContextManagerCacheEvictor;private Statement withTestContextManagerCacheEviction(Statement next, Class<?> testClass) {_		return new TestContextManagerCacheEvictor(next, testClass)__	};wrap,the,supplied,link,statement,with,a,code,test,context,manager,cache,evictor,statement,see,test,context,manager,cache,evictor;private,statement,with,test,context,manager,cache,eviction,statement,next,class,test,class,return,new,test,context,manager,cache,evictor,next,test,class
SpringClassRule -> private Statement withProfileValueCheck(Statement next, Class<?> testClass);1472740443;Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement next, Class<?> testClass) {_		return new ProfileValueChecker(next, testClass, null)__	};wrap,the,supplied,link,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,next,class,test,class,return,new,profile,value,checker,next,test,class,null
SpringClassRule -> private Statement withProfileValueCheck(Statement next, Class<?> testClass);1530174524;Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement next, Class<?> testClass) {_		return new ProfileValueChecker(next, testClass, null)__	};wrap,the,supplied,link,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,next,class,test,class,return,new,profile,value,checker,next,test,class,null
SpringClassRule -> private Statement withProfileValueCheck(Statement next, Class<?> testClass);1530174524;Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement next, Class<?> testClass) {_		return new ProfileValueChecker(next, testClass, null)__	};wrap,the,supplied,link,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,next,class,test,class,return,new,profile,value,checker,next,test,class,null
SpringClassRule -> private Statement withProfileValueCheck(Statement next, Class<?> testClass);1530188116;Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement next, Class<?> testClass) {_		return new ProfileValueChecker(next, testClass, null)__	};wrap,the,supplied,link,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,next,class,test,class,return,new,profile,value,checker,next,test,class,null
SpringClassRule -> private Statement withAfterTestClassCallbacks(Statement statement, TestContextManager testContextManager);1431875649;Wrap the supplied {@code statement} with a {@code RunAfterTestClassCallbacks} statement._@see RunAfterTestClassCallbacks;private Statement withAfterTestClassCallbacks(Statement statement, TestContextManager testContextManager) {_		return new RunAfterTestClassCallbacks(statement, testContextManager)__	};wrap,the,supplied,code,statement,with,a,code,run,after,test,class,callbacks,statement,see,run,after,test,class,callbacks;private,statement,with,after,test,class,callbacks,statement,statement,test,context,manager,test,context,manager,return,new,run,after,test,class,callbacks,statement,test,context,manager
SpringClassRule -> private Statement withAfterTestClassCallbacks(Statement statement, TestContextManager testContextManager);1443464140;Wrap the supplied {@code statement} with a {@code RunAfterTestClassCallbacks} statement._@see RunAfterTestClassCallbacks;private Statement withAfterTestClassCallbacks(Statement statement, TestContextManager testContextManager) {_		return new RunAfterTestClassCallbacks(statement, testContextManager)__	};wrap,the,supplied,code,statement,with,a,code,run,after,test,class,callbacks,statement,see,run,after,test,class,callbacks;private,statement,with,after,test,class,callbacks,statement,statement,test,context,manager,test,context,manager,return,new,run,after,test,class,callbacks,statement,test,context,manager
SpringClassRule -> private Statement withAfterTestClassCallbacks(Statement statement, TestContextManager testContextManager);1443471070;Wrap the supplied {@code statement} with a {@code RunAfterTestClassCallbacks} statement._@see RunAfterTestClassCallbacks;private Statement withAfterTestClassCallbacks(Statement statement, TestContextManager testContextManager) {_		return new RunAfterTestClassCallbacks(statement, testContextManager)__	};wrap,the,supplied,code,statement,with,a,code,run,after,test,class,callbacks,statement,see,run,after,test,class,callbacks;private,statement,with,after,test,class,callbacks,statement,statement,test,context,manager,test,context,manager,return,new,run,after,test,class,callbacks,statement,test,context,manager
SpringClassRule -> private Statement withAfterTestClassCallbacks(Statement statement, TestContextManager testContextManager);1450547039;Wrap the supplied {@code statement} with a {@code RunAfterTestClassCallbacks} statement._@see RunAfterTestClassCallbacks;private Statement withAfterTestClassCallbacks(Statement statement, TestContextManager testContextManager) {_		return new RunAfterTestClassCallbacks(statement, testContextManager)__	};wrap,the,supplied,code,statement,with,a,code,run,after,test,class,callbacks,statement,see,run,after,test,class,callbacks;private,statement,with,after,test,class,callbacks,statement,statement,test,context,manager,test,context,manager,return,new,run,after,test,class,callbacks,statement,test,context,manager
SpringClassRule -> private Statement withAfterTestClassCallbacks(Statement statement, TestContextManager testContextManager);1467730834;Wrap the supplied {@code statement} with a {@code RunAfterTestClassCallbacks} statement._@see RunAfterTestClassCallbacks;private Statement withAfterTestClassCallbacks(Statement statement, TestContextManager testContextManager) {_		return new RunAfterTestClassCallbacks(statement, testContextManager)__	};wrap,the,supplied,code,statement,with,a,code,run,after,test,class,callbacks,statement,see,run,after,test,class,callbacks;private,statement,with,after,test,class,callbacks,statement,statement,test,context,manager,test,context,manager,return,new,run,after,test,class,callbacks,statement,test,context,manager
SpringClassRule -> private Statement withAfterTestClassCallbacks(Statement statement, TestContextManager testContextManager);1468334463;Wrap the supplied {@code statement} with a {@code RunAfterTestClassCallbacks} statement._@see RunAfterTestClassCallbacks;private Statement withAfterTestClassCallbacks(Statement statement, TestContextManager testContextManager) {_		return new RunAfterTestClassCallbacks(statement, testContextManager)__	};wrap,the,supplied,code,statement,with,a,code,run,after,test,class,callbacks,statement,see,run,after,test,class,callbacks;private,statement,with,after,test,class,callbacks,statement,statement,test,context,manager,test,context,manager,return,new,run,after,test,class,callbacks,statement,test,context,manager
SpringClassRule -> private Statement withAfterTestClassCallbacks(Statement statement, TestContextManager testContextManager);1472729922;Wrap the supplied {@code statement} with a {@code RunAfterTestClassCallbacks} statement._@see RunAfterTestClassCallbacks;private Statement withAfterTestClassCallbacks(Statement statement, TestContextManager testContextManager) {_		return new RunAfterTestClassCallbacks(statement, testContextManager)__	};wrap,the,supplied,code,statement,with,a,code,run,after,test,class,callbacks,statement,see,run,after,test,class,callbacks;private,statement,with,after,test,class,callbacks,statement,statement,test,context,manager,test,context,manager,return,new,run,after,test,class,callbacks,statement,test,context,manager
SpringClassRule -> private Statement withProfileValueCheck(Statement statement, Class<?> testClass);1431875649;Wrap the supplied {@code statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement statement, Class<?> testClass) {_		return new ProfileValueChecker(statement, testClass, null)__	};wrap,the,supplied,code,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,statement,class,test,class,return,new,profile,value,checker,statement,test,class,null
SpringClassRule -> private Statement withProfileValueCheck(Statement statement, Class<?> testClass);1443464140;Wrap the supplied {@code statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement statement, Class<?> testClass) {_		return new ProfileValueChecker(statement, testClass, null)__	};wrap,the,supplied,code,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,statement,class,test,class,return,new,profile,value,checker,statement,test,class,null
SpringClassRule -> private Statement withProfileValueCheck(Statement statement, Class<?> testClass);1443471070;Wrap the supplied {@code statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement statement, Class<?> testClass) {_		return new ProfileValueChecker(statement, testClass, null)__	};wrap,the,supplied,code,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,statement,class,test,class,return,new,profile,value,checker,statement,test,class,null
SpringClassRule -> private Statement withProfileValueCheck(Statement statement, Class<?> testClass);1450547039;Wrap the supplied {@code statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement statement, Class<?> testClass) {_		return new ProfileValueChecker(statement, testClass, null)__	};wrap,the,supplied,code,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,statement,class,test,class,return,new,profile,value,checker,statement,test,class,null
SpringClassRule -> private Statement withProfileValueCheck(Statement statement, Class<?> testClass);1467730834;Wrap the supplied {@code statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement statement, Class<?> testClass) {_		return new ProfileValueChecker(statement, testClass, null)__	};wrap,the,supplied,code,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,statement,class,test,class,return,new,profile,value,checker,statement,test,class,null
SpringClassRule -> private Statement withProfileValueCheck(Statement statement, Class<?> testClass);1468334463;Wrap the supplied {@code statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement statement, Class<?> testClass) {_		return new ProfileValueChecker(statement, testClass, null)__	};wrap,the,supplied,code,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,statement,class,test,class,return,new,profile,value,checker,statement,test,class,null
SpringClassRule -> private Statement withProfileValueCheck(Statement statement, Class<?> testClass);1472729922;Wrap the supplied {@code statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement statement, Class<?> testClass) {_		return new ProfileValueChecker(statement, testClass, null)__	};wrap,the,supplied,code,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,statement,class,test,class,return,new,profile,value,checker,statement,test,class,null
SpringClassRule -> private static final void validateSpringMethodRuleConfiguration(Class<?> testClass);1431875649;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public SpringMethodRule} field that is_annotated with {@code @Rule}.;private static final void validateSpringMethodRuleConfiguration(Class<?> testClass) {_		Field ruleField = null___		for (Field field : testClass.getFields()) {_			int modifiers = field.getModifiers()__			if (!Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers)_					&& SpringMethodRule.class.isAssignableFrom(field.getType())) {_				ruleField = field__				break__			}_		}__		if (ruleField == null) {_			throw new IllegalStateException(String.format(_				"Failed to find 'public SpringMethodRule' field in test class [%s]. "_						+ "Consult the Javadoc for SpringClassRule for details.", testClass.getName()))__		}__		if (!ruleField.isAnnotationPresent(Rule.class)) {_			throw new IllegalStateException(String.format(_				"SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. "_						+ "Consult the Javadoc for SpringClassRule for details.", ruleField))__		}_	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,spring,method,rule,field,that,is,annotated,with,code,rule;private,static,final,void,validate,spring,method,rule,configuration,class,test,class,field,rule,field,null,for,field,field,test,class,get,fields,int,modifiers,field,get,modifiers,if,modifier,is,static,modifiers,modifier,is,public,modifiers,spring,method,rule,class,is,assignable,from,field,get,type,rule,field,field,break,if,rule,field,null,throw,new,illegal,state,exception,string,format,failed,to,find,public,spring,method,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,if,rule,field,is,annotation,present,rule,class,throw,new,illegal,state,exception,string,format,spring,method,rule,field,s,must,be,annotated,with,junit,s,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field
SpringClassRule -> private static final void validateSpringMethodRuleConfiguration(Class<?> testClass);1443464140;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public SpringMethodRule} field that is_annotated with {@code @Rule}.;private static final void validateSpringMethodRuleConfiguration(Class<?> testClass) {_		Field ruleField = null___		for (Field field : testClass.getFields()) {_			int modifiers = field.getModifiers()__			if (!Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers)_					&& SpringMethodRule.class.isAssignableFrom(field.getType())) {_				ruleField = field__				break__			}_		}__		if (ruleField == null) {_			throw new IllegalStateException(String.format(_				"Failed to find 'public SpringMethodRule' field in test class [%s]. "_						+ "Consult the Javadoc for SpringClassRule for details.", testClass.getName()))__		}__		if (!ruleField.isAnnotationPresent(Rule.class)) {_			throw new IllegalStateException(String.format(_				"SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. "_						+ "Consult the Javadoc for SpringClassRule for details.", ruleField))__		}_	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,spring,method,rule,field,that,is,annotated,with,code,rule;private,static,final,void,validate,spring,method,rule,configuration,class,test,class,field,rule,field,null,for,field,field,test,class,get,fields,int,modifiers,field,get,modifiers,if,modifier,is,static,modifiers,modifier,is,public,modifiers,spring,method,rule,class,is,assignable,from,field,get,type,rule,field,field,break,if,rule,field,null,throw,new,illegal,state,exception,string,format,failed,to,find,public,spring,method,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,if,rule,field,is,annotation,present,rule,class,throw,new,illegal,state,exception,string,format,spring,method,rule,field,s,must,be,annotated,with,junit,s,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field
SpringClassRule -> private Statement withBeforeTestClassCallbacks(Statement next, TestContextManager testContextManager);1472740443;Wrap the supplied {@link Statement} with a {@code RunBeforeTestClassCallbacks} statement._@see RunBeforeTestClassCallbacks;private Statement withBeforeTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		return new RunBeforeTestClassCallbacks(next, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,class,callbacks,statement,see,run,before,test,class,callbacks;private,statement,with,before,test,class,callbacks,statement,next,test,context,manager,test,context,manager,return,new,run,before,test,class,callbacks,next,test,context,manager
SpringClassRule -> private Statement withBeforeTestClassCallbacks(Statement next, TestContextManager testContextManager);1530174524;Wrap the supplied {@link Statement} with a {@code RunBeforeTestClassCallbacks} statement._@see RunBeforeTestClassCallbacks;private Statement withBeforeTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		return new RunBeforeTestClassCallbacks(next, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,class,callbacks,statement,see,run,before,test,class,callbacks;private,statement,with,before,test,class,callbacks,statement,next,test,context,manager,test,context,manager,return,new,run,before,test,class,callbacks,next,test,context,manager
SpringClassRule -> private Statement withBeforeTestClassCallbacks(Statement next, TestContextManager testContextManager);1530174524;Wrap the supplied {@link Statement} with a {@code RunBeforeTestClassCallbacks} statement._@see RunBeforeTestClassCallbacks;private Statement withBeforeTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		return new RunBeforeTestClassCallbacks(next, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,class,callbacks,statement,see,run,before,test,class,callbacks;private,statement,with,before,test,class,callbacks,statement,next,test,context,manager,test,context,manager,return,new,run,before,test,class,callbacks,next,test,context,manager
SpringClassRule -> private Statement withBeforeTestClassCallbacks(Statement next, TestContextManager testContextManager);1530188116;Wrap the supplied {@link Statement} with a {@code RunBeforeTestClassCallbacks} statement._@see RunBeforeTestClassCallbacks;private Statement withBeforeTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		return new RunBeforeTestClassCallbacks(next, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,class,callbacks,statement,see,run,before,test,class,callbacks;private,statement,with,before,test,class,callbacks,statement,next,test,context,manager,test,context,manager,return,new,run,before,test,class,callbacks,next,test,context,manager
SpringClassRule -> private static void validateSpringMethodRuleConfiguration(Class<?> testClass);1443471070;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public SpringMethodRule} field that is_annotated with {@code @Rule}.;private static void validateSpringMethodRuleConfiguration(Class<?> testClass) {_		Field ruleField = null___		for (Field field : testClass.getFields()) {_			int modifiers = field.getModifiers()__			if (!Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers) &&_					SpringMethodRule.class.isAssignableFrom(field.getType())) {_				ruleField = field__				break__			}_		}__		if (ruleField == null) {_			throw new IllegalStateException(String.format(_					"Failed to find 'public SpringMethodRule' field in test class [%s]. " +_					"Consult the javadoc for SpringClassRule for details.", testClass.getName()))__		}__		if (!ruleField.isAnnotationPresent(Rule.class)) {_			throw new IllegalStateException(String.format(_					"SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. " +_					"Consult the javadoc for SpringClassRule for details.", ruleField))__		}_	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,spring,method,rule,field,that,is,annotated,with,code,rule;private,static,void,validate,spring,method,rule,configuration,class,test,class,field,rule,field,null,for,field,field,test,class,get,fields,int,modifiers,field,get,modifiers,if,modifier,is,static,modifiers,modifier,is,public,modifiers,spring,method,rule,class,is,assignable,from,field,get,type,rule,field,field,break,if,rule,field,null,throw,new,illegal,state,exception,string,format,failed,to,find,public,spring,method,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,if,rule,field,is,annotation,present,rule,class,throw,new,illegal,state,exception,string,format,spring,method,rule,field,s,must,be,annotated,with,junit,s,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field
SpringClassRule -> private static void validateSpringMethodRuleConfiguration(Class<?> testClass);1450547039;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public SpringMethodRule} field that is_annotated with {@code @Rule}.;private static void validateSpringMethodRuleConfiguration(Class<?> testClass) {_		Field ruleField = null___		for (Field field : testClass.getFields()) {_			int modifiers = field.getModifiers()__			if (!Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers) &&_					SpringMethodRule.class.isAssignableFrom(field.getType())) {_				ruleField = field__				break__			}_		}__		if (ruleField == null) {_			throw new IllegalStateException(String.format(_					"Failed to find 'public SpringMethodRule' field in test class [%s]. " +_					"Consult the javadoc for SpringClassRule for details.", testClass.getName()))__		}__		if (!ruleField.isAnnotationPresent(Rule.class)) {_			throw new IllegalStateException(String.format(_					"SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. " +_					"Consult the javadoc for SpringClassRule for details.", ruleField))__		}_	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,spring,method,rule,field,that,is,annotated,with,code,rule;private,static,void,validate,spring,method,rule,configuration,class,test,class,field,rule,field,null,for,field,field,test,class,get,fields,int,modifiers,field,get,modifiers,if,modifier,is,static,modifiers,modifier,is,public,modifiers,spring,method,rule,class,is,assignable,from,field,get,type,rule,field,field,break,if,rule,field,null,throw,new,illegal,state,exception,string,format,failed,to,find,public,spring,method,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,if,rule,field,is,annotation,present,rule,class,throw,new,illegal,state,exception,string,format,spring,method,rule,field,s,must,be,annotated,with,junit,s,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field
SpringClassRule -> private static void validateSpringMethodRuleConfiguration(Class<?> testClass);1467730834;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public SpringMethodRule} field that is_annotated with {@code @Rule}.;private static void validateSpringMethodRuleConfiguration(Class<?> testClass) {_		Field ruleField = null___		for (Field field : testClass.getFields()) {_			int modifiers = field.getModifiers()__			if (!Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers) &&_					SpringMethodRule.class.isAssignableFrom(field.getType())) {_				ruleField = field__				break__			}_		}__		if (ruleField == null) {_			throw new IllegalStateException(String.format(_					"Failed to find 'public SpringMethodRule' field in test class [%s]. " +_					"Consult the javadoc for SpringClassRule for details.", testClass.getName()))__		}__		if (!ruleField.isAnnotationPresent(Rule.class)) {_			throw new IllegalStateException(String.format(_					"SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. " +_					"Consult the javadoc for SpringClassRule for details.", ruleField))__		}_	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,spring,method,rule,field,that,is,annotated,with,code,rule;private,static,void,validate,spring,method,rule,configuration,class,test,class,field,rule,field,null,for,field,field,test,class,get,fields,int,modifiers,field,get,modifiers,if,modifier,is,static,modifiers,modifier,is,public,modifiers,spring,method,rule,class,is,assignable,from,field,get,type,rule,field,field,break,if,rule,field,null,throw,new,illegal,state,exception,string,format,failed,to,find,public,spring,method,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,if,rule,field,is,annotation,present,rule,class,throw,new,illegal,state,exception,string,format,spring,method,rule,field,s,must,be,annotated,with,junit,s,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field
SpringClassRule -> private static void validateSpringMethodRuleConfiguration(Class<?> testClass);1468334463;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public SpringMethodRule} field that is_annotated with {@code @Rule}.;private static void validateSpringMethodRuleConfiguration(Class<?> testClass) {_		Field ruleField = findSpringMethodRuleField(testClass)___		Assert.state(ruleField != null, () -> String.format(_					"Failed to find 'public SpringMethodRule' field in test class [%s]. " +_					"Consult the javadoc for SpringClassRule for details.", testClass.getName()))___		Assert.state(ruleField.isAnnotationPresent(Rule.class), () -> String.format(_					"SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. " +_					"Consult the javadoc for SpringClassRule for details.", ruleField))__	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,spring,method,rule,field,that,is,annotated,with,code,rule;private,static,void,validate,spring,method,rule,configuration,class,test,class,field,rule,field,find,spring,method,rule,field,test,class,assert,state,rule,field,null,string,format,failed,to,find,public,spring,method,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,assert,state,rule,field,is,annotation,present,rule,class,string,format,spring,method,rule,field,s,must,be,annotated,with,junit,s,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field
SpringClassRule -> private static void validateSpringMethodRuleConfiguration(Class<?> testClass);1472729922;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public SpringMethodRule} field that is_annotated with {@code @Rule}.;private static void validateSpringMethodRuleConfiguration(Class<?> testClass) {_		Field ruleField = findSpringMethodRuleField(testClass)___		Assert.state(ruleField != null, () -> String.format(_					"Failed to find 'public SpringMethodRule' field in test class [%s]. " +_					"Consult the javadoc for SpringClassRule for details.", testClass.getName()))___		Assert.state(ruleField.isAnnotationPresent(Rule.class), () -> String.format(_					"SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. " +_					"Consult the javadoc for SpringClassRule for details.", ruleField))__	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,spring,method,rule,field,that,is,annotated,with,code,rule;private,static,void,validate,spring,method,rule,configuration,class,test,class,field,rule,field,find,spring,method,rule,field,test,class,assert,state,rule,field,null,string,format,failed,to,find,public,spring,method,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,assert,state,rule,field,is,annotation,present,rule,class,string,format,spring,method,rule,field,s,must,be,annotated,with,junit,s,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field
SpringClassRule -> private static void validateSpringMethodRuleConfiguration(Class<?> testClass);1472740443;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public SpringMethodRule} field that is_annotated with {@code @Rule}.;private static void validateSpringMethodRuleConfiguration(Class<?> testClass) {_		Field ruleField = findSpringMethodRuleField(testClass).orElseThrow(() ->_				new IllegalStateException(String.format(_					"Failed to find 'public SpringMethodRule' field in test class [%s]. " +_					"Consult the javadoc for SpringClassRule for details.", testClass.getName())))___		Assert.state(ruleField.isAnnotationPresent(Rule.class), () -> String.format(_					"SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. " +_					"Consult the javadoc for SpringClassRule for details.", ruleField))__	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,spring,method,rule,field,that,is,annotated,with,code,rule;private,static,void,validate,spring,method,rule,configuration,class,test,class,field,rule,field,find,spring,method,rule,field,test,class,or,else,throw,new,illegal,state,exception,string,format,failed,to,find,public,spring,method,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,assert,state,rule,field,is,annotation,present,rule,class,string,format,spring,method,rule,field,s,must,be,annotated,with,junit,s,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field
SpringClassRule -> private static void validateSpringMethodRuleConfiguration(Class<?> testClass);1530174524;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public SpringMethodRule} field that is_annotated with {@code @Rule}.;private static void validateSpringMethodRuleConfiguration(Class<?> testClass) {_		Field ruleField = findSpringMethodRuleField(testClass).orElseThrow(() ->_				new IllegalStateException(String.format(_					"Failed to find 'public SpringMethodRule' field in test class [%s]. " +_					"Consult the javadoc for SpringClassRule for details.", testClass.getName())))___		Assert.state(ruleField.isAnnotationPresent(Rule.class), () -> String.format(_					"SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. " +_					"Consult the javadoc for SpringClassRule for details.", ruleField))__	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,spring,method,rule,field,that,is,annotated,with,code,rule;private,static,void,validate,spring,method,rule,configuration,class,test,class,field,rule,field,find,spring,method,rule,field,test,class,or,else,throw,new,illegal,state,exception,string,format,failed,to,find,public,spring,method,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,assert,state,rule,field,is,annotation,present,rule,class,string,format,spring,method,rule,field,s,must,be,annotated,with,junit,s,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field
SpringClassRule -> private static void validateSpringMethodRuleConfiguration(Class<?> testClass);1530174524;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public SpringMethodRule} field that is_annotated with {@code @Rule}.;private static void validateSpringMethodRuleConfiguration(Class<?> testClass) {_		Field ruleField = findSpringMethodRuleField(testClass).orElseThrow(() ->_				new IllegalStateException(String.format(_					"Failed to find 'public SpringMethodRule' field in test class [%s]. " +_					"Consult the javadoc for SpringClassRule for details.", testClass.getName())))___		Assert.state(ruleField.isAnnotationPresent(Rule.class), () -> String.format(_					"SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. " +_					"Consult the javadoc for SpringClassRule for details.", ruleField))__	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,spring,method,rule,field,that,is,annotated,with,code,rule;private,static,void,validate,spring,method,rule,configuration,class,test,class,field,rule,field,find,spring,method,rule,field,test,class,or,else,throw,new,illegal,state,exception,string,format,failed,to,find,public,spring,method,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,assert,state,rule,field,is,annotation,present,rule,class,string,format,spring,method,rule,field,s,must,be,annotated,with,junit,s,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field
SpringClassRule -> @Override 	public Statement apply(Statement base, Description description);1431875649;Apply <em>class-level</em> features of the <em>Spring TestContext_Framework</em> to the supplied {@code base} statement.__<p>Specifically, this method retrieves the {@link TestContextManager}_used by this rule and its associated {@link SpringMethodRule} and_invokes the {@link TestContextManager#beforeTestClass() beforeTestClass()}_and {@link TestContextManager#afterTestClass() afterTestClass()} methods_on the {@code TestContextManager}.__<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents classes with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code beforeTestClass()} methods_in {@code TestExecutionListeners}.__@param base the base {@code Statement} that this rule should be applied to_@param description a {@code Description} of the current test execution_@return a statement that wraps the supplied {@code base} with class-level_features of the Spring TestContext Framework_@see #getTestContextManager_@see #withBeforeTestClassCallbacks_@see #withAfterTestClassCallbacks_@see #withProfileValueCheck_@see #withTestContextManagerCacheEviction;@Override_	public Statement apply(Statement base, Description description) {_		Class<?> testClass = description.getTestClass()___		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringClassRule to test class [" + testClass.getName() + "].")__		}__		validateSpringMethodRuleConfiguration(testClass)___		TestContextManager testContextManager = getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestClassCallbacks(statement, testContextManager)__		statement = withAfterTestClassCallbacks(statement, testContextManager)__		statement = withProfileValueCheck(statement, testClass)__		statement = withTestContextManagerCacheEviction(statement, testClass)__		return statement__	};apply,em,class,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,retrieves,the,link,test,context,manager,used,by,this,rule,and,its,associated,link,spring,method,rule,and,invokes,the,link,test,context,manager,before,test,class,before,test,class,and,link,test,context,manager,after,test,class,after,test,class,methods,on,the,code,test,context,manager,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,before,test,class,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,description,a,code,description,of,the,current,test,execution,return,a,statement,that,wraps,the,supplied,code,base,with,class,level,features,of,the,spring,test,context,framework,see,get,test,context,manager,see,with,before,test,class,callbacks,see,with,after,test,class,callbacks,see,with,profile,value,check,see,with,test,context,manager,cache,eviction;override,public,statement,apply,statement,base,description,description,class,test,class,description,get,test,class,if,logger,is,debug,enabled,logger,debug,applying,spring,class,rule,to,test,class,test,class,get,name,validate,spring,method,rule,configuration,test,class,test,context,manager,test,context,manager,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,class,callbacks,statement,test,context,manager,statement,with,after,test,class,callbacks,statement,test,context,manager,statement,with,profile,value,check,statement,test,class,statement,with,test,context,manager,cache,eviction,statement,test,class,return,statement
SpringClassRule -> @Override 	public Statement apply(Statement base, Description description);1443464140;Apply <em>class-level</em> features of the <em>Spring TestContext_Framework</em> to the supplied {@code base} statement.__<p>Specifically, this method retrieves the {@link TestContextManager}_used by this rule and its associated {@link SpringMethodRule} and_invokes the {@link TestContextManager#beforeTestClass() beforeTestClass()}_and {@link TestContextManager#afterTestClass() afterTestClass()} methods_on the {@code TestContextManager}.__<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents classes with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code beforeTestClass()} methods_in {@code TestExecutionListeners}.__@param base the base {@code Statement} that this rule should be applied to_@param description a {@code Description} of the current test execution_@return a statement that wraps the supplied {@code base} with class-level_features of the Spring TestContext Framework_@see #getTestContextManager_@see #withBeforeTestClassCallbacks_@see #withAfterTestClassCallbacks_@see #withProfileValueCheck_@see #withTestContextManagerCacheEviction;@Override_	public Statement apply(Statement base, Description description) {_		Class<?> testClass = description.getTestClass()___		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringClassRule to test class [" + testClass.getName() + "].")__		}__		validateSpringMethodRuleConfiguration(testClass)___		TestContextManager testContextManager = getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestClassCallbacks(statement, testContextManager)__		statement = withAfterTestClassCallbacks(statement, testContextManager)__		statement = withProfileValueCheck(statement, testClass)__		statement = withTestContextManagerCacheEviction(statement, testClass)__		return statement__	};apply,em,class,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,retrieves,the,link,test,context,manager,used,by,this,rule,and,its,associated,link,spring,method,rule,and,invokes,the,link,test,context,manager,before,test,class,before,test,class,and,link,test,context,manager,after,test,class,after,test,class,methods,on,the,code,test,context,manager,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,before,test,class,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,description,a,code,description,of,the,current,test,execution,return,a,statement,that,wraps,the,supplied,code,base,with,class,level,features,of,the,spring,test,context,framework,see,get,test,context,manager,see,with,before,test,class,callbacks,see,with,after,test,class,callbacks,see,with,profile,value,check,see,with,test,context,manager,cache,eviction;override,public,statement,apply,statement,base,description,description,class,test,class,description,get,test,class,if,logger,is,debug,enabled,logger,debug,applying,spring,class,rule,to,test,class,test,class,get,name,validate,spring,method,rule,configuration,test,class,test,context,manager,test,context,manager,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,class,callbacks,statement,test,context,manager,statement,with,after,test,class,callbacks,statement,test,context,manager,statement,with,profile,value,check,statement,test,class,statement,with,test,context,manager,cache,eviction,statement,test,class,return,statement
SpringClassRule -> @Override 	public Statement apply(Statement base, Description description);1443471070;Apply <em>class-level</em> features of the <em>Spring TestContext_Framework</em> to the supplied {@code base} statement._<p>Specifically, this method retrieves the {@link TestContextManager}_used by this rule and its associated {@link SpringMethodRule} and_invokes the {@link TestContextManager#beforeTestClass() beforeTestClass()}_and {@link TestContextManager#afterTestClass() afterTestClass()} methods_on the {@code TestContextManager}._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents classes with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code beforeTestClass()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param description a {@code Description} of the current test execution_@return a statement that wraps the supplied {@code base} with class-level_features of the Spring TestContext Framework_@see #getTestContextManager_@see #withBeforeTestClassCallbacks_@see #withAfterTestClassCallbacks_@see #withProfileValueCheck_@see #withTestContextManagerCacheEviction;@Override_	public Statement apply(Statement base, Description description) {_		Class<?> testClass = description.getTestClass()__		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringClassRule to test class [" + testClass.getName() + "]")__		}_		validateSpringMethodRuleConfiguration(testClass)__		TestContextManager testContextManager = getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestClassCallbacks(statement, testContextManager)__		statement = withAfterTestClassCallbacks(statement, testContextManager)__		statement = withProfileValueCheck(statement, testClass)__		statement = withTestContextManagerCacheEviction(statement, testClass)__		return statement__	};apply,em,class,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,retrieves,the,link,test,context,manager,used,by,this,rule,and,its,associated,link,spring,method,rule,and,invokes,the,link,test,context,manager,before,test,class,before,test,class,and,link,test,context,manager,after,test,class,after,test,class,methods,on,the,code,test,context,manager,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,before,test,class,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,description,a,code,description,of,the,current,test,execution,return,a,statement,that,wraps,the,supplied,code,base,with,class,level,features,of,the,spring,test,context,framework,see,get,test,context,manager,see,with,before,test,class,callbacks,see,with,after,test,class,callbacks,see,with,profile,value,check,see,with,test,context,manager,cache,eviction;override,public,statement,apply,statement,base,description,description,class,test,class,description,get,test,class,if,logger,is,debug,enabled,logger,debug,applying,spring,class,rule,to,test,class,test,class,get,name,validate,spring,method,rule,configuration,test,class,test,context,manager,test,context,manager,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,class,callbacks,statement,test,context,manager,statement,with,after,test,class,callbacks,statement,test,context,manager,statement,with,profile,value,check,statement,test,class,statement,with,test,context,manager,cache,eviction,statement,test,class,return,statement
SpringClassRule -> @Override 	public Statement apply(Statement base, Description description);1450547039;Apply <em>class-level</em> features of the <em>Spring TestContext_Framework</em> to the supplied {@code base} statement._<p>Specifically, this method retrieves the {@link TestContextManager}_used by this rule and its associated {@link SpringMethodRule} and_invokes the {@link TestContextManager#beforeTestClass() beforeTestClass()}_and {@link TestContextManager#afterTestClass() afterTestClass()} methods_on the {@code TestContextManager}._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents classes with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code beforeTestClass()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param description a {@code Description} of the current test execution_@return a statement that wraps the supplied {@code base} with class-level_features of the Spring TestContext Framework_@see #getTestContextManager_@see #withBeforeTestClassCallbacks_@see #withAfterTestClassCallbacks_@see #withProfileValueCheck_@see #withTestContextManagerCacheEviction;@Override_	public Statement apply(Statement base, Description description) {_		Class<?> testClass = description.getTestClass()__		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringClassRule to test class [" + testClass.getName() + "]")__		}_		validateSpringMethodRuleConfiguration(testClass)__		TestContextManager testContextManager = getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestClassCallbacks(statement, testContextManager)__		statement = withAfterTestClassCallbacks(statement, testContextManager)__		statement = withProfileValueCheck(statement, testClass)__		statement = withTestContextManagerCacheEviction(statement, testClass)__		return statement__	};apply,em,class,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,retrieves,the,link,test,context,manager,used,by,this,rule,and,its,associated,link,spring,method,rule,and,invokes,the,link,test,context,manager,before,test,class,before,test,class,and,link,test,context,manager,after,test,class,after,test,class,methods,on,the,code,test,context,manager,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,before,test,class,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,description,a,code,description,of,the,current,test,execution,return,a,statement,that,wraps,the,supplied,code,base,with,class,level,features,of,the,spring,test,context,framework,see,get,test,context,manager,see,with,before,test,class,callbacks,see,with,after,test,class,callbacks,see,with,profile,value,check,see,with,test,context,manager,cache,eviction;override,public,statement,apply,statement,base,description,description,class,test,class,description,get,test,class,if,logger,is,debug,enabled,logger,debug,applying,spring,class,rule,to,test,class,test,class,get,name,validate,spring,method,rule,configuration,test,class,test,context,manager,test,context,manager,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,class,callbacks,statement,test,context,manager,statement,with,after,test,class,callbacks,statement,test,context,manager,statement,with,profile,value,check,statement,test,class,statement,with,test,context,manager,cache,eviction,statement,test,class,return,statement
SpringClassRule -> @Override 	public Statement apply(Statement base, Description description);1467730834;Apply <em>class-level</em> features of the <em>Spring TestContext_Framework</em> to the supplied {@code base} statement._<p>Specifically, this method retrieves the {@link TestContextManager}_used by this rule and its associated {@link SpringMethodRule} and_invokes the {@link TestContextManager#beforeTestClass() beforeTestClass()}_and {@link TestContextManager#afterTestClass() afterTestClass()} methods_on the {@code TestContextManager}._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents classes with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code beforeTestClass()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param description a {@code Description} of the current test execution_@return a statement that wraps the supplied {@code base} with class-level_features of the Spring TestContext Framework_@see #getTestContextManager_@see #withBeforeTestClassCallbacks_@see #withAfterTestClassCallbacks_@see #withProfileValueCheck_@see #withTestContextManagerCacheEviction;@Override_	public Statement apply(Statement base, Description description) {_		Class<?> testClass = description.getTestClass()__		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringClassRule to test class [" + testClass.getName() + "]")__		}_		validateSpringMethodRuleConfiguration(testClass)__		TestContextManager testContextManager = getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestClassCallbacks(statement, testContextManager)__		statement = withAfterTestClassCallbacks(statement, testContextManager)__		statement = withProfileValueCheck(statement, testClass)__		statement = withTestContextManagerCacheEviction(statement, testClass)__		return statement__	};apply,em,class,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,retrieves,the,link,test,context,manager,used,by,this,rule,and,its,associated,link,spring,method,rule,and,invokes,the,link,test,context,manager,before,test,class,before,test,class,and,link,test,context,manager,after,test,class,after,test,class,methods,on,the,code,test,context,manager,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,before,test,class,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,description,a,code,description,of,the,current,test,execution,return,a,statement,that,wraps,the,supplied,code,base,with,class,level,features,of,the,spring,test,context,framework,see,get,test,context,manager,see,with,before,test,class,callbacks,see,with,after,test,class,callbacks,see,with,profile,value,check,see,with,test,context,manager,cache,eviction;override,public,statement,apply,statement,base,description,description,class,test,class,description,get,test,class,if,logger,is,debug,enabled,logger,debug,applying,spring,class,rule,to,test,class,test,class,get,name,validate,spring,method,rule,configuration,test,class,test,context,manager,test,context,manager,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,class,callbacks,statement,test,context,manager,statement,with,after,test,class,callbacks,statement,test,context,manager,statement,with,profile,value,check,statement,test,class,statement,with,test,context,manager,cache,eviction,statement,test,class,return,statement
SpringClassRule -> @Override 	public Statement apply(Statement base, Description description);1468334463;Apply <em>class-level</em> features of the <em>Spring TestContext_Framework</em> to the supplied {@code base} statement._<p>Specifically, this method retrieves the {@link TestContextManager}_used by this rule and its associated {@link SpringMethodRule} and_invokes the {@link TestContextManager#beforeTestClass() beforeTestClass()}_and {@link TestContextManager#afterTestClass() afterTestClass()} methods_on the {@code TestContextManager}._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents classes with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code beforeTestClass()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param description a {@code Description} of the current test execution_@return a statement that wraps the supplied {@code base} with class-level_features of the Spring TestContext Framework_@see #getTestContextManager_@see #withBeforeTestClassCallbacks_@see #withAfterTestClassCallbacks_@see #withProfileValueCheck_@see #withTestContextManagerCacheEviction;@Override_	public Statement apply(Statement base, Description description) {_		Class<?> testClass = description.getTestClass()__		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringClassRule to test class [" + testClass.getName() + "]")__		}_		validateSpringMethodRuleConfiguration(testClass)__		TestContextManager testContextManager = getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestClassCallbacks(statement, testContextManager)__		statement = withAfterTestClassCallbacks(statement, testContextManager)__		statement = withProfileValueCheck(statement, testClass)__		statement = withTestContextManagerCacheEviction(statement, testClass)__		return statement__	};apply,em,class,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,retrieves,the,link,test,context,manager,used,by,this,rule,and,its,associated,link,spring,method,rule,and,invokes,the,link,test,context,manager,before,test,class,before,test,class,and,link,test,context,manager,after,test,class,after,test,class,methods,on,the,code,test,context,manager,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,before,test,class,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,description,a,code,description,of,the,current,test,execution,return,a,statement,that,wraps,the,supplied,code,base,with,class,level,features,of,the,spring,test,context,framework,see,get,test,context,manager,see,with,before,test,class,callbacks,see,with,after,test,class,callbacks,see,with,profile,value,check,see,with,test,context,manager,cache,eviction;override,public,statement,apply,statement,base,description,description,class,test,class,description,get,test,class,if,logger,is,debug,enabled,logger,debug,applying,spring,class,rule,to,test,class,test,class,get,name,validate,spring,method,rule,configuration,test,class,test,context,manager,test,context,manager,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,class,callbacks,statement,test,context,manager,statement,with,after,test,class,callbacks,statement,test,context,manager,statement,with,profile,value,check,statement,test,class,statement,with,test,context,manager,cache,eviction,statement,test,class,return,statement
SpringClassRule -> @Override 	public Statement apply(Statement base, Description description);1472729922;Apply <em>class-level</em> features of the <em>Spring TestContext_Framework</em> to the supplied {@code base} statement._<p>Specifically, this method retrieves the {@link TestContextManager}_used by this rule and its associated {@link SpringMethodRule} and_invokes the {@link TestContextManager#beforeTestClass() beforeTestClass()}_and {@link TestContextManager#afterTestClass() afterTestClass()} methods_on the {@code TestContextManager}._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents classes with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code beforeTestClass()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param description a {@code Description} of the current test execution_@return a statement that wraps the supplied {@code base} with class-level_features of the Spring TestContext Framework_@see #getTestContextManager_@see #withBeforeTestClassCallbacks_@see #withAfterTestClassCallbacks_@see #withProfileValueCheck_@see #withTestContextManagerCacheEviction;@Override_	public Statement apply(Statement base, Description description) {_		Class<?> testClass = description.getTestClass()__		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringClassRule to test class [" + testClass.getName() + "]")__		}_		validateSpringMethodRuleConfiguration(testClass)__		TestContextManager testContextManager = getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestClassCallbacks(statement, testContextManager)__		statement = withAfterTestClassCallbacks(statement, testContextManager)__		statement = withProfileValueCheck(statement, testClass)__		statement = withTestContextManagerCacheEviction(statement, testClass)__		return statement__	};apply,em,class,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,retrieves,the,link,test,context,manager,used,by,this,rule,and,its,associated,link,spring,method,rule,and,invokes,the,link,test,context,manager,before,test,class,before,test,class,and,link,test,context,manager,after,test,class,after,test,class,methods,on,the,code,test,context,manager,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,before,test,class,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,description,a,code,description,of,the,current,test,execution,return,a,statement,that,wraps,the,supplied,code,base,with,class,level,features,of,the,spring,test,context,framework,see,get,test,context,manager,see,with,before,test,class,callbacks,see,with,after,test,class,callbacks,see,with,profile,value,check,see,with,test,context,manager,cache,eviction;override,public,statement,apply,statement,base,description,description,class,test,class,description,get,test,class,if,logger,is,debug,enabled,logger,debug,applying,spring,class,rule,to,test,class,test,class,get,name,validate,spring,method,rule,configuration,test,class,test,context,manager,test,context,manager,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,class,callbacks,statement,test,context,manager,statement,with,after,test,class,callbacks,statement,test,context,manager,statement,with,profile,value,check,statement,test,class,statement,with,test,context,manager,cache,eviction,statement,test,class,return,statement
SpringClassRule -> @Override 	public Statement apply(Statement base, Description description);1472740443;Apply <em>class-level</em> features of the <em>Spring TestContext_Framework</em> to the supplied {@code base} statement._<p>Specifically, this method retrieves the {@link TestContextManager}_used by this rule and its associated {@link SpringMethodRule} and_invokes the {@link TestContextManager#beforeTestClass() beforeTestClass()}_and {@link TestContextManager#afterTestClass() afterTestClass()} methods_on the {@code TestContextManager}._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents classes with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code beforeTestClass()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param description a {@code Description} of the current test execution_@return a statement that wraps the supplied {@code base} with class-level_features of the Spring TestContext Framework_@see #getTestContextManager_@see #withBeforeTestClassCallbacks_@see #withAfterTestClassCallbacks_@see #withProfileValueCheck_@see #withTestContextManagerCacheEviction;@Override_	public Statement apply(Statement base, Description description) {_		Class<?> testClass = description.getTestClass()__		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringClassRule to test class [" + testClass.getName() + "]")__		}_		validateSpringMethodRuleConfiguration(testClass)__		TestContextManager testContextManager = getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestClassCallbacks(statement, testContextManager)__		statement = withAfterTestClassCallbacks(statement, testContextManager)__		statement = withProfileValueCheck(statement, testClass)__		statement = withTestContextManagerCacheEviction(statement, testClass)__		return statement__	};apply,em,class,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,retrieves,the,link,test,context,manager,used,by,this,rule,and,its,associated,link,spring,method,rule,and,invokes,the,link,test,context,manager,before,test,class,before,test,class,and,link,test,context,manager,after,test,class,after,test,class,methods,on,the,code,test,context,manager,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,before,test,class,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,description,a,code,description,of,the,current,test,execution,return,a,statement,that,wraps,the,supplied,code,base,with,class,level,features,of,the,spring,test,context,framework,see,get,test,context,manager,see,with,before,test,class,callbacks,see,with,after,test,class,callbacks,see,with,profile,value,check,see,with,test,context,manager,cache,eviction;override,public,statement,apply,statement,base,description,description,class,test,class,description,get,test,class,if,logger,is,debug,enabled,logger,debug,applying,spring,class,rule,to,test,class,test,class,get,name,validate,spring,method,rule,configuration,test,class,test,context,manager,test,context,manager,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,class,callbacks,statement,test,context,manager,statement,with,after,test,class,callbacks,statement,test,context,manager,statement,with,profile,value,check,statement,test,class,statement,with,test,context,manager,cache,eviction,statement,test,class,return,statement
SpringClassRule -> @Override 	public Statement apply(Statement base, Description description);1530174524;Apply <em>class-level</em> features of the <em>Spring TestContext_Framework</em> to the supplied {@code base} statement._<p>Specifically, this method retrieves the {@link TestContextManager}_used by this rule and its associated {@link SpringMethodRule} and_invokes the {@link TestContextManager#beforeTestClass() beforeTestClass()}_and {@link TestContextManager#afterTestClass() afterTestClass()} methods_on the {@code TestContextManager}._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents classes with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code beforeTestClass()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param description a {@code Description} of the current test execution_@return a statement that wraps the supplied {@code base} with class-level_features of the Spring TestContext Framework_@see #getTestContextManager_@see #withBeforeTestClassCallbacks_@see #withAfterTestClassCallbacks_@see #withProfileValueCheck_@see #withTestContextManagerCacheEviction;@Override_	public Statement apply(Statement base, Description description) {_		Class<?> testClass = description.getTestClass()__		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringClassRule to test class [" + testClass.getName() + "]")__		}_		validateSpringMethodRuleConfiguration(testClass)__		TestContextManager testContextManager = getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestClassCallbacks(statement, testContextManager)__		statement = withAfterTestClassCallbacks(statement, testContextManager)__		statement = withProfileValueCheck(statement, testClass)__		statement = withTestContextManagerCacheEviction(statement, testClass)__		return statement__	};apply,em,class,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,retrieves,the,link,test,context,manager,used,by,this,rule,and,its,associated,link,spring,method,rule,and,invokes,the,link,test,context,manager,before,test,class,before,test,class,and,link,test,context,manager,after,test,class,after,test,class,methods,on,the,code,test,context,manager,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,before,test,class,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,description,a,code,description,of,the,current,test,execution,return,a,statement,that,wraps,the,supplied,code,base,with,class,level,features,of,the,spring,test,context,framework,see,get,test,context,manager,see,with,before,test,class,callbacks,see,with,after,test,class,callbacks,see,with,profile,value,check,see,with,test,context,manager,cache,eviction;override,public,statement,apply,statement,base,description,description,class,test,class,description,get,test,class,if,logger,is,debug,enabled,logger,debug,applying,spring,class,rule,to,test,class,test,class,get,name,validate,spring,method,rule,configuration,test,class,test,context,manager,test,context,manager,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,class,callbacks,statement,test,context,manager,statement,with,after,test,class,callbacks,statement,test,context,manager,statement,with,profile,value,check,statement,test,class,statement,with,test,context,manager,cache,eviction,statement,test,class,return,statement
SpringClassRule -> @Override 	public Statement apply(Statement base, Description description);1530174524;Apply <em>class-level</em> features of the <em>Spring TestContext_Framework</em> to the supplied {@code base} statement._<p>Specifically, this method retrieves the {@link TestContextManager}_used by this rule and its associated {@link SpringMethodRule} and_invokes the {@link TestContextManager#beforeTestClass() beforeTestClass()}_and {@link TestContextManager#afterTestClass() afterTestClass()} methods_on the {@code TestContextManager}._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents classes with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code beforeTestClass()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param description a {@code Description} of the current test execution_@return a statement that wraps the supplied {@code base} with class-level_features of the Spring TestContext Framework_@see #getTestContextManager_@see #withBeforeTestClassCallbacks_@see #withAfterTestClassCallbacks_@see #withProfileValueCheck_@see #withTestContextManagerCacheEviction;@Override_	public Statement apply(Statement base, Description description) {_		Class<?> testClass = description.getTestClass()__		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringClassRule to test class [" + testClass.getName() + "]")__		}_		validateSpringMethodRuleConfiguration(testClass)__		TestContextManager testContextManager = getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestClassCallbacks(statement, testContextManager)__		statement = withAfterTestClassCallbacks(statement, testContextManager)__		statement = withProfileValueCheck(statement, testClass)__		statement = withTestContextManagerCacheEviction(statement, testClass)__		return statement__	};apply,em,class,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,retrieves,the,link,test,context,manager,used,by,this,rule,and,its,associated,link,spring,method,rule,and,invokes,the,link,test,context,manager,before,test,class,before,test,class,and,link,test,context,manager,after,test,class,after,test,class,methods,on,the,code,test,context,manager,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,before,test,class,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,description,a,code,description,of,the,current,test,execution,return,a,statement,that,wraps,the,supplied,code,base,with,class,level,features,of,the,spring,test,context,framework,see,get,test,context,manager,see,with,before,test,class,callbacks,see,with,after,test,class,callbacks,see,with,profile,value,check,see,with,test,context,manager,cache,eviction;override,public,statement,apply,statement,base,description,description,class,test,class,description,get,test,class,if,logger,is,debug,enabled,logger,debug,applying,spring,class,rule,to,test,class,test,class,get,name,validate,spring,method,rule,configuration,test,class,test,context,manager,test,context,manager,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,class,callbacks,statement,test,context,manager,statement,with,after,test,class,callbacks,statement,test,context,manager,statement,with,profile,value,check,statement,test,class,statement,with,test,context,manager,cache,eviction,statement,test,class,return,statement
SpringClassRule -> @Override 	public Statement apply(Statement base, Description description);1530188116;Apply <em>class-level</em> features of the <em>Spring TestContext_Framework</em> to the supplied {@code base} statement._<p>Specifically, this method retrieves the {@link TestContextManager}_used by this rule and its associated {@link SpringMethodRule} and_invokes the {@link TestContextManager#beforeTestClass() beforeTestClass()}_and {@link TestContextManager#afterTestClass() afterTestClass()} methods_on the {@code TestContextManager}._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents classes with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code beforeTestClass()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param description a {@code Description} of the current test execution_@return a statement that wraps the supplied {@code base} with class-level_features of the Spring TestContext Framework_@see #getTestContextManager_@see #withBeforeTestClassCallbacks_@see #withAfterTestClassCallbacks_@see #withProfileValueCheck_@see #withTestContextManagerCacheEviction;@Override_	public Statement apply(Statement base, Description description) {_		Class<?> testClass = description.getTestClass()__		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringClassRule to test class [" + testClass.getName() + "]")__		}_		TestContextManager testContextManager = getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestClassCallbacks(statement, testContextManager)__		statement = withAfterTestClassCallbacks(statement, testContextManager)__		statement = withProfileValueCheck(statement, testClass)__		statement = withTestContextManagerCacheEviction(statement, testClass)__		return statement__	};apply,em,class,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,retrieves,the,link,test,context,manager,used,by,this,rule,and,its,associated,link,spring,method,rule,and,invokes,the,link,test,context,manager,before,test,class,before,test,class,and,link,test,context,manager,after,test,class,after,test,class,methods,on,the,code,test,context,manager,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,before,test,class,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,description,a,code,description,of,the,current,test,execution,return,a,statement,that,wraps,the,supplied,code,base,with,class,level,features,of,the,spring,test,context,framework,see,get,test,context,manager,see,with,before,test,class,callbacks,see,with,after,test,class,callbacks,see,with,profile,value,check,see,with,test,context,manager,cache,eviction;override,public,statement,apply,statement,base,description,description,class,test,class,description,get,test,class,if,logger,is,debug,enabled,logger,debug,applying,spring,class,rule,to,test,class,test,class,get,name,test,context,manager,test,context,manager,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,class,callbacks,statement,test,context,manager,statement,with,after,test,class,callbacks,statement,test,context,manager,statement,with,profile,value,check,statement,test,class,statement,with,test,context,manager,cache,eviction,statement,test,class,return,statement
SpringClassRule -> static TestContextManager getTestContextManager(Class<?> testClass);1443471070;Get the {@link TestContextManager} associated with the supplied test class._@param testClass the test class to be managed_ never {@code null};static TestContextManager getTestContextManager(Class<?> testClass) {_		Assert.notNull(testClass, "testClass must not be null")__		synchronized (testContextManagerCache) {_			TestContextManager testContextManager = testContextManagerCache.get(testClass)__			if (testContextManager == null) {_				testContextManager = new TestContextManager(testClass)__				testContextManagerCache.put(testClass, testContextManager)__			}_			return testContextManager__		}_	};get,the,link,test,context,manager,associated,with,the,supplied,test,class,param,test,class,the,test,class,to,be,managed,never,code,null;static,test,context,manager,get,test,context,manager,class,test,class,assert,not,null,test,class,test,class,must,not,be,null,synchronized,test,context,manager,cache,test,context,manager,test,context,manager,test,context,manager,cache,get,test,class,if,test,context,manager,null,test,context,manager,new,test,context,manager,test,class,test,context,manager,cache,put,test,class,test,context,manager,return,test,context,manager
SpringClassRule -> static TestContextManager getTestContextManager(Class<?> testClass);1450547039;Get the {@link TestContextManager} associated with the supplied test class._@param testClass the test class to be managed_ never {@code null};static TestContextManager getTestContextManager(Class<?> testClass) {_		Assert.notNull(testClass, "testClass must not be null")__		synchronized (testContextManagerCache) {_			TestContextManager testContextManager = testContextManagerCache.get(testClass)__			if (testContextManager == null) {_				testContextManager = new TestContextManager(testClass)__				testContextManagerCache.put(testClass, testContextManager)__			}_			return testContextManager__		}_	};get,the,link,test,context,manager,associated,with,the,supplied,test,class,param,test,class,the,test,class,to,be,managed,never,code,null;static,test,context,manager,get,test,context,manager,class,test,class,assert,not,null,test,class,test,class,must,not,be,null,synchronized,test,context,manager,cache,test,context,manager,test,context,manager,test,context,manager,cache,get,test,class,if,test,context,manager,null,test,context,manager,new,test,context,manager,test,class,test,context,manager,cache,put,test,class,test,context,manager,return,test,context,manager
SpringClassRule -> static TestContextManager getTestContextManager(Class<?> testClass);1467730834;Get the {@link TestContextManager} associated with the supplied test class._@param testClass the test class to be managed_ never {@code null};static TestContextManager getTestContextManager(Class<?> testClass) {_		Assert.notNull(testClass, "testClass must not be null")__		synchronized (testContextManagerCache) {_			TestContextManager testContextManager = testContextManagerCache.get(testClass)__			if (testContextManager == null) {_				testContextManager = new TestContextManager(testClass)__				testContextManagerCache.put(testClass, testContextManager)__			}_			return testContextManager__		}_	};get,the,link,test,context,manager,associated,with,the,supplied,test,class,param,test,class,the,test,class,to,be,managed,never,code,null;static,test,context,manager,get,test,context,manager,class,test,class,assert,not,null,test,class,test,class,must,not,be,null,synchronized,test,context,manager,cache,test,context,manager,test,context,manager,test,context,manager,cache,get,test,class,if,test,context,manager,null,test,context,manager,new,test,context,manager,test,class,test,context,manager,cache,put,test,class,test,context,manager,return,test,context,manager
SpringClassRule -> static TestContextManager getTestContextManager(Class<?> testClass);1468334463;Get the {@link TestContextManager} associated with the supplied test class._@param testClass the test class to be managed_ never {@code null};static TestContextManager getTestContextManager(Class<?> testClass) {_		Assert.notNull(testClass, "testClass must not be null")__		synchronized (testContextManagerCache) {_			TestContextManager testContextManager = testContextManagerCache.get(testClass)__			if (testContextManager == null) {_				testContextManager = new TestContextManager(testClass)__				testContextManagerCache.put(testClass, testContextManager)__			}_			return testContextManager__		}_	};get,the,link,test,context,manager,associated,with,the,supplied,test,class,param,test,class,the,test,class,to,be,managed,never,code,null;static,test,context,manager,get,test,context,manager,class,test,class,assert,not,null,test,class,test,class,must,not,be,null,synchronized,test,context,manager,cache,test,context,manager,test,context,manager,test,context,manager,cache,get,test,class,if,test,context,manager,null,test,context,manager,new,test,context,manager,test,class,test,context,manager,cache,put,test,class,test,context,manager,return,test,context,manager
SpringClassRule -> static TestContextManager getTestContextManager(Class<?> testClass);1472729922;Get the {@link TestContextManager} associated with the supplied test class._@param testClass the test class to be managed_ never {@code null};static TestContextManager getTestContextManager(Class<?> testClass) {_		Assert.notNull(testClass, "testClass must not be null")__		return testContextManagerCache.computeIfAbsent(testClass, TestContextManager::new)__	};get,the,link,test,context,manager,associated,with,the,supplied,test,class,param,test,class,the,test,class,to,be,managed,never,code,null;static,test,context,manager,get,test,context,manager,class,test,class,assert,not,null,test,class,test,class,must,not,be,null,return,test,context,manager,cache,compute,if,absent,test,class,test,context,manager,new
SpringClassRule -> static TestContextManager getTestContextManager(Class<?> testClass);1472740443;Get the {@link TestContextManager} associated with the supplied test class._@param testClass the test class to be managed_ never {@code null};static TestContextManager getTestContextManager(Class<?> testClass) {_		Assert.notNull(testClass, "testClass must not be null")__		return testContextManagerCache.computeIfAbsent(testClass, TestContextManager::new)__	};get,the,link,test,context,manager,associated,with,the,supplied,test,class,param,test,class,the,test,class,to,be,managed,never,code,null;static,test,context,manager,get,test,context,manager,class,test,class,assert,not,null,test,class,test,class,must,not,be,null,return,test,context,manager,cache,compute,if,absent,test,class,test,context,manager,new
SpringClassRule -> static TestContextManager getTestContextManager(Class<?> testClass);1530174524;Get the {@link TestContextManager} associated with the supplied test class._@param testClass the test class to be managed_ never {@code null};static TestContextManager getTestContextManager(Class<?> testClass) {_		Assert.notNull(testClass, "testClass must not be null")__		return testContextManagerCache.computeIfAbsent(testClass, TestContextManager::new)__	};get,the,link,test,context,manager,associated,with,the,supplied,test,class,param,test,class,the,test,class,to,be,managed,never,code,null;static,test,context,manager,get,test,context,manager,class,test,class,assert,not,null,test,class,test,class,must,not,be,null,return,test,context,manager,cache,compute,if,absent,test,class,test,context,manager,new
SpringClassRule -> static TestContextManager getTestContextManager(Class<?> testClass);1530174524;Get the {@link TestContextManager} associated with the supplied test class._@param testClass the test class to be managed_ never {@code null};static TestContextManager getTestContextManager(Class<?> testClass) {_		Assert.notNull(testClass, "testClass must not be null")__		return testContextManagerCache.computeIfAbsent(testClass, TestContextManager::new)__	};get,the,link,test,context,manager,associated,with,the,supplied,test,class,param,test,class,the,test,class,to,be,managed,never,code,null;static,test,context,manager,get,test,context,manager,class,test,class,assert,not,null,test,class,test,class,must,not,be,null,return,test,context,manager,cache,compute,if,absent,test,class,test,context,manager,new
SpringClassRule -> static TestContextManager getTestContextManager(Class<?> testClass);1530188116;Get the {@link TestContextManager} associated with the supplied test class._@param testClass the test class to be managed_ never {@code null};static TestContextManager getTestContextManager(Class<?> testClass) {_		Assert.notNull(testClass, "Test Class must not be null")__		return testContextManagerCache.computeIfAbsent(testClass, TestContextManager::new)__	};get,the,link,test,context,manager,associated,with,the,supplied,test,class,param,test,class,the,test,class,to,be,managed,never,code,null;static,test,context,manager,get,test,context,manager,class,test,class,assert,not,null,test,class,test,class,must,not,be,null,return,test,context,manager,cache,compute,if,absent,test,class,test,context,manager,new
SpringClassRule -> private Statement withAfterTestClassCallbacks(Statement next, TestContextManager testContextManager);1472740443;Wrap the supplied {@link Statement} with a {@code RunAfterTestClassCallbacks} statement._@see RunAfterTestClassCallbacks;private Statement withAfterTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		return new RunAfterTestClassCallbacks(next, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,class,callbacks,statement,see,run,after,test,class,callbacks;private,statement,with,after,test,class,callbacks,statement,next,test,context,manager,test,context,manager,return,new,run,after,test,class,callbacks,next,test,context,manager
SpringClassRule -> private Statement withAfterTestClassCallbacks(Statement next, TestContextManager testContextManager);1530174524;Wrap the supplied {@link Statement} with a {@code RunAfterTestClassCallbacks} statement._@see RunAfterTestClassCallbacks;private Statement withAfterTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		return new RunAfterTestClassCallbacks(next, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,class,callbacks,statement,see,run,after,test,class,callbacks;private,statement,with,after,test,class,callbacks,statement,next,test,context,manager,test,context,manager,return,new,run,after,test,class,callbacks,next,test,context,manager
SpringClassRule -> private Statement withAfterTestClassCallbacks(Statement next, TestContextManager testContextManager);1530174524;Wrap the supplied {@link Statement} with a {@code RunAfterTestClassCallbacks} statement._@see RunAfterTestClassCallbacks;private Statement withAfterTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		return new RunAfterTestClassCallbacks(next, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,class,callbacks,statement,see,run,after,test,class,callbacks;private,statement,with,after,test,class,callbacks,statement,next,test,context,manager,test,context,manager,return,new,run,after,test,class,callbacks,next,test,context,manager
SpringClassRule -> private Statement withAfterTestClassCallbacks(Statement next, TestContextManager testContextManager);1530188116;Wrap the supplied {@link Statement} with a {@code RunAfterTestClassCallbacks} statement._@see RunAfterTestClassCallbacks;private Statement withAfterTestClassCallbacks(Statement next, TestContextManager testContextManager) {_		return new RunAfterTestClassCallbacks(next, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,class,callbacks,statement,see,run,after,test,class,callbacks;private,statement,with,after,test,class,callbacks,statement,next,test,context,manager,test,context,manager,return,new,run,after,test,class,callbacks,next,test,context,manager
SpringClassRule -> private Statement withBeforeTestClassCallbacks(Statement statement, TestContextManager testContextManager);1431875649;Wrap the supplied {@code statement} with a {@code RunBeforeTestClassCallbacks} statement._@see RunBeforeTestClassCallbacks;private Statement withBeforeTestClassCallbacks(Statement statement, TestContextManager testContextManager) {_		return new RunBeforeTestClassCallbacks(statement, testContextManager)__	};wrap,the,supplied,code,statement,with,a,code,run,before,test,class,callbacks,statement,see,run,before,test,class,callbacks;private,statement,with,before,test,class,callbacks,statement,statement,test,context,manager,test,context,manager,return,new,run,before,test,class,callbacks,statement,test,context,manager
SpringClassRule -> private Statement withBeforeTestClassCallbacks(Statement statement, TestContextManager testContextManager);1443464140;Wrap the supplied {@code statement} with a {@code RunBeforeTestClassCallbacks} statement._@see RunBeforeTestClassCallbacks;private Statement withBeforeTestClassCallbacks(Statement statement, TestContextManager testContextManager) {_		return new RunBeforeTestClassCallbacks(statement, testContextManager)__	};wrap,the,supplied,code,statement,with,a,code,run,before,test,class,callbacks,statement,see,run,before,test,class,callbacks;private,statement,with,before,test,class,callbacks,statement,statement,test,context,manager,test,context,manager,return,new,run,before,test,class,callbacks,statement,test,context,manager
SpringClassRule -> private Statement withBeforeTestClassCallbacks(Statement statement, TestContextManager testContextManager);1443471070;Wrap the supplied {@code statement} with a {@code RunBeforeTestClassCallbacks} statement._@see RunBeforeTestClassCallbacks;private Statement withBeforeTestClassCallbacks(Statement statement, TestContextManager testContextManager) {_		return new RunBeforeTestClassCallbacks(statement, testContextManager)__	};wrap,the,supplied,code,statement,with,a,code,run,before,test,class,callbacks,statement,see,run,before,test,class,callbacks;private,statement,with,before,test,class,callbacks,statement,statement,test,context,manager,test,context,manager,return,new,run,before,test,class,callbacks,statement,test,context,manager
SpringClassRule -> private Statement withBeforeTestClassCallbacks(Statement statement, TestContextManager testContextManager);1450547039;Wrap the supplied {@code statement} with a {@code RunBeforeTestClassCallbacks} statement._@see RunBeforeTestClassCallbacks;private Statement withBeforeTestClassCallbacks(Statement statement, TestContextManager testContextManager) {_		return new RunBeforeTestClassCallbacks(statement, testContextManager)__	};wrap,the,supplied,code,statement,with,a,code,run,before,test,class,callbacks,statement,see,run,before,test,class,callbacks;private,statement,with,before,test,class,callbacks,statement,statement,test,context,manager,test,context,manager,return,new,run,before,test,class,callbacks,statement,test,context,manager
SpringClassRule -> private Statement withBeforeTestClassCallbacks(Statement statement, TestContextManager testContextManager);1467730834;Wrap the supplied {@code statement} with a {@code RunBeforeTestClassCallbacks} statement._@see RunBeforeTestClassCallbacks;private Statement withBeforeTestClassCallbacks(Statement statement, TestContextManager testContextManager) {_		return new RunBeforeTestClassCallbacks(statement, testContextManager)__	};wrap,the,supplied,code,statement,with,a,code,run,before,test,class,callbacks,statement,see,run,before,test,class,callbacks;private,statement,with,before,test,class,callbacks,statement,statement,test,context,manager,test,context,manager,return,new,run,before,test,class,callbacks,statement,test,context,manager
SpringClassRule -> private Statement withBeforeTestClassCallbacks(Statement statement, TestContextManager testContextManager);1468334463;Wrap the supplied {@code statement} with a {@code RunBeforeTestClassCallbacks} statement._@see RunBeforeTestClassCallbacks;private Statement withBeforeTestClassCallbacks(Statement statement, TestContextManager testContextManager) {_		return new RunBeforeTestClassCallbacks(statement, testContextManager)__	};wrap,the,supplied,code,statement,with,a,code,run,before,test,class,callbacks,statement,see,run,before,test,class,callbacks;private,statement,with,before,test,class,callbacks,statement,statement,test,context,manager,test,context,manager,return,new,run,before,test,class,callbacks,statement,test,context,manager
SpringClassRule -> private Statement withBeforeTestClassCallbacks(Statement statement, TestContextManager testContextManager);1472729922;Wrap the supplied {@code statement} with a {@code RunBeforeTestClassCallbacks} statement._@see RunBeforeTestClassCallbacks;private Statement withBeforeTestClassCallbacks(Statement statement, TestContextManager testContextManager) {_		return new RunBeforeTestClassCallbacks(statement, testContextManager)__	};wrap,the,supplied,code,statement,with,a,code,run,before,test,class,callbacks,statement,see,run,before,test,class,callbacks;private,statement,with,before,test,class,callbacks,statement,statement,test,context,manager,test,context,manager,return,new,run,before,test,class,callbacks,statement,test,context,manager
SpringClassRule -> private Statement withTestContextManagerCacheEviction(Statement statement, Class<?> testClass);1431875649;Wrap the supplied {@code statement} with a {@code TestContextManagerCacheEvictor} statement._@see TestContextManagerCacheEvictor;private Statement withTestContextManagerCacheEviction(Statement statement, Class<?> testClass) {_		return new TestContextManagerCacheEvictor(statement, testClass)__	};wrap,the,supplied,code,statement,with,a,code,test,context,manager,cache,evictor,statement,see,test,context,manager,cache,evictor;private,statement,with,test,context,manager,cache,eviction,statement,statement,class,test,class,return,new,test,context,manager,cache,evictor,statement,test,class
SpringClassRule -> private Statement withTestContextManagerCacheEviction(Statement statement, Class<?> testClass);1443464140;Wrap the supplied {@code statement} with a {@code TestContextManagerCacheEvictor} statement._@see TestContextManagerCacheEvictor;private Statement withTestContextManagerCacheEviction(Statement statement, Class<?> testClass) {_		return new TestContextManagerCacheEvictor(statement, testClass)__	};wrap,the,supplied,code,statement,with,a,code,test,context,manager,cache,evictor,statement,see,test,context,manager,cache,evictor;private,statement,with,test,context,manager,cache,eviction,statement,statement,class,test,class,return,new,test,context,manager,cache,evictor,statement,test,class
SpringClassRule -> private Statement withTestContextManagerCacheEviction(Statement statement, Class<?> testClass);1443471070;Wrap the supplied {@code statement} with a {@code TestContextManagerCacheEvictor} statement._@see TestContextManagerCacheEvictor;private Statement withTestContextManagerCacheEviction(Statement statement, Class<?> testClass) {_		return new TestContextManagerCacheEvictor(statement, testClass)__	};wrap,the,supplied,code,statement,with,a,code,test,context,manager,cache,evictor,statement,see,test,context,manager,cache,evictor;private,statement,with,test,context,manager,cache,eviction,statement,statement,class,test,class,return,new,test,context,manager,cache,evictor,statement,test,class
SpringClassRule -> private Statement withTestContextManagerCacheEviction(Statement statement, Class<?> testClass);1450547039;Wrap the supplied {@code statement} with a {@code TestContextManagerCacheEvictor} statement._@see TestContextManagerCacheEvictor;private Statement withTestContextManagerCacheEviction(Statement statement, Class<?> testClass) {_		return new TestContextManagerCacheEvictor(statement, testClass)__	};wrap,the,supplied,code,statement,with,a,code,test,context,manager,cache,evictor,statement,see,test,context,manager,cache,evictor;private,statement,with,test,context,manager,cache,eviction,statement,statement,class,test,class,return,new,test,context,manager,cache,evictor,statement,test,class
SpringClassRule -> private Statement withTestContextManagerCacheEviction(Statement statement, Class<?> testClass);1467730834;Wrap the supplied {@code statement} with a {@code TestContextManagerCacheEvictor} statement._@see TestContextManagerCacheEvictor;private Statement withTestContextManagerCacheEviction(Statement statement, Class<?> testClass) {_		return new TestContextManagerCacheEvictor(statement, testClass)__	};wrap,the,supplied,code,statement,with,a,code,test,context,manager,cache,evictor,statement,see,test,context,manager,cache,evictor;private,statement,with,test,context,manager,cache,eviction,statement,statement,class,test,class,return,new,test,context,manager,cache,evictor,statement,test,class
SpringClassRule -> private Statement withTestContextManagerCacheEviction(Statement statement, Class<?> testClass);1468334463;Wrap the supplied {@code statement} with a {@code TestContextManagerCacheEvictor} statement._@see TestContextManagerCacheEvictor;private Statement withTestContextManagerCacheEviction(Statement statement, Class<?> testClass) {_		return new TestContextManagerCacheEvictor(statement, testClass)__	};wrap,the,supplied,code,statement,with,a,code,test,context,manager,cache,evictor,statement,see,test,context,manager,cache,evictor;private,statement,with,test,context,manager,cache,eviction,statement,statement,class,test,class,return,new,test,context,manager,cache,evictor,statement,test,class
SpringClassRule -> private Statement withTestContextManagerCacheEviction(Statement statement, Class<?> testClass);1472729922;Wrap the supplied {@code statement} with a {@code TestContextManagerCacheEvictor} statement._@see TestContextManagerCacheEvictor;private Statement withTestContextManagerCacheEviction(Statement statement, Class<?> testClass) {_		return new TestContextManagerCacheEvictor(statement, testClass)__	};wrap,the,supplied,code,statement,with,a,code,test,context,manager,cache,evictor,statement,see,test,context,manager,cache,evictor;private,statement,with,test,context,manager,cache,eviction,statement,statement,class,test,class,return,new,test,context,manager,cache,evictor,statement,test,class
