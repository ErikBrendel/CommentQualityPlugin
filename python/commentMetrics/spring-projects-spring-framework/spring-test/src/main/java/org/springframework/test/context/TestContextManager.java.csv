# id;timestamp;commentText;codeText;commentWords;codeWords
TestContextManager -> public void beforeTestClass() throws Exception;1328020251;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass &#064_BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before class' callback for test class [" + testClass + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,064,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,throw,ex
TestContextManager -> public void beforeTestClass() throws Exception;1344604587;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass &#064_BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before class' callback for test class [" + testClass + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,064,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,throw,ex
TestContextManager -> public void beforeTestClass() throws Exception;1349648958;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass &#064_BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before class' callback for test class [" + testClass + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,064,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,throw,ex
TestContextManager -> public void beforeTestClass() throws Exception;1350692960;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass &#064_BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before class' callback for test class [" + testClass + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,064,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,throw,ex
TestContextManager -> public void beforeTestClass() throws Exception;1356735495;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass &#064_BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before class' callback for test class [" + testClass + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,064,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,throw,ex
TestContextManager -> public void beforeTestClass() throws Exception;1362408075;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass &#064_BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before class' callback for test class [" + testClass + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,064,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,throw,ex
TestContextManager -> public void beforeTestClass() throws Exception;1363208506;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass &#064_BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before class' callback for test class [" + testClass + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,064,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,throw,ex
TestContextManager -> public void beforeTestClass() throws Exception;1382815212;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass &#064_BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before class' callback for test class [" + testClass + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,064,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,throw,ex
TestContextManager -> public void beforeTestClass() throws Exception;1382920864;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass &#064_BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before class' callback for test class [" + testClass + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,064,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,throw,ex
TestContextManager -> public void beforeTestClass() throws Exception;1385499540;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass &#064_BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before class' callback for test class [" + testClass + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,064,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,throw,ex
TestContextManager -> public void beforeTestClass() throws Exception;1390429716;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass &#064_BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before class' callback for test class [" + testClass + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,064,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,throw,ex
TestContextManager -> public void beforeTestClass() throws Exception;1397082962;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before class' callback for test class [" + testClass + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,throw,ex
TestContextManager -> public void beforeTestClass() throws Exception;1398638841;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'before class' callback for test class [" + testClass + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,throw,ex
TestContextManager -> public void beforeTestClass() throws Exception;1398808867;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'before class' callback for test class [" + testClass + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,throw,ex
TestContextManager -> public void beforeTestClass() throws Exception;1400531350;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'before class' callback for test class [" + testClass + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,throw,ex
TestContextManager -> public void beforeTestClass() throws Exception;1429465455;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'before class' callback for test class [" + testClass + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,throw,ex
TestContextManager -> public void beforeTestClass() throws Exception;1429466943;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'before class' callback for test class [" + testClass + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,throw,ex
TestContextManager -> public void beforeTestClass() throws Exception;1455826052;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'before class' callback for test class [" + testClass + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestClass() throws Exception;1456613400;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'before class' callback for test class [" + testClass + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestClass() throws Exception;1456946365;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'before class' callback for test class [" + testClass + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestClass() throws Exception;1461428605;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'before class' callback for test class [" + testClass + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestClass() throws Exception;1467730834;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'before class' callback for test class [" + testClass + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestClass() throws Exception;1468159440;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'before class' callback for test class [" + testClass + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,class,callback,for,test,class,test,class,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestClass() throws Exception;1468244735;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@since 3.0_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "beforeTestClass", testExecutionListener, testClass)__				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,throwable,ex,log,exception,ex,before,test,class,test,execution,listener,test,class,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestClass() throws Exception;1468434541;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@since 3.0_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "beforeTestClass", testExecutionListener, testClass)__				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,throwable,ex,log,exception,ex,before,test,class,test,execution,listener,test,class,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestClass() throws Exception;1468503798;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@since 3.0_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "beforeTestClass", testExecutionListener, testClass)__				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,throwable,ex,log,exception,ex,before,test,class,test,execution,listener,test,class,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestClass() throws Exception;1472840882;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@since 3.0_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "beforeTestClass", testExecutionListener, testClass)__				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,throwable,ex,log,exception,ex,before,test,class,test,execution,listener,test,class,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestClass() throws Exception;1495868221;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@since 3.0_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "beforeTestClass", testExecutionListener, testClass)__				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,throwable,ex,log,exception,ex,before,test,class,test,execution,listener,test,class,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestClass() throws Exception;1496955179;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@since 3.0_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "beforeTestClass", testExecutionListener, testClass)__				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,throwable,ex,log,exception,ex,before,test,class,test,execution,listener,test,class,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestClass() throws Exception;1497341594;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@since 3.0_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "beforeTestClass", testExecutionListener, testClass)__				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,throwable,ex,log,exception,ex,before,test,class,test,execution,listener,test,class,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestClass() throws Exception;1519295386;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@since 3.0_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "beforeTestClass", testExecutionListener, testClass)__				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,throwable,ex,log,exception,ex,before,test,class,test,execution,listener,test,class,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestClass() throws Exception;1519859718;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@since 3.0_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "beforeTestClass", testExecutionListener, testClass)__				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,throwable,ex,log,exception,ex,before,test,class,test,execution,listener,test,class,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestClass() throws Exception;1519864746;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@since 3.0_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "beforeTestClass", testExecutionListener, testClass)__				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,throwable,ex,log,exception,ex,before,test,class,test,execution,listener,test,class,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestClass() throws Exception;1520441064;Hook for pre-processing a test class <em>before</em> execution of any_tests within the class. Should be called prior to any framework-specific_<em>before class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.BeforeClass @BeforeClass})._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test class_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@throws Exception if a registered TestExecutionListener throws an_exception_@since 3.0_@see #getTestExecutionListeners();public void beforeTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "beforeTestClass", testExecutionListener, testClass)__				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,class,em,before,em,execution,of,any,tests,within,the,class,should,be,called,prior,to,any,framework,specific,em,before,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,class,before,class,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,class,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners;public,void,before,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,before,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,class,get,test,context,catch,throwable,ex,log,exception,ex,before,test,class,test,execution,listener,test,class,reflection,utils,rethrow,exception,ex
TestContextManager -> public final TestContext getTestContext();1456946365;Get the {@link TestContext} managed by this {@code TestContextManager}.;public final TestContext getTestContext() {_		return this.testContext__	};get,the,link,test,context,managed,by,this,code,test,context,manager;public,final,test,context,get,test,context,return,this,test,context
TestContextManager -> public final TestContext getTestContext();1461428605;Get the {@link TestContext} managed by this {@code TestContextManager}.;public final TestContext getTestContext() {_		return this.testContext__	};get,the,link,test,context,managed,by,this,code,test,context,manager;public,final,test,context,get,test,context,return,this,test,context
TestContextManager -> public final TestContext getTestContext();1467730834;Get the {@link TestContext} managed by this {@code TestContextManager}.;public final TestContext getTestContext() {_		return this.testContext__	};get,the,link,test,context,managed,by,this,code,test,context,manager;public,final,test,context,get,test,context,return,this,test,context
TestContextManager -> public final TestContext getTestContext();1468159440;Get the {@link TestContext} managed by this {@code TestContextManager}.;public final TestContext getTestContext() {_		return this.testContext__	};get,the,link,test,context,managed,by,this,code,test,context,manager;public,final,test,context,get,test,context,return,this,test,context
TestContextManager -> public final TestContext getTestContext();1468244735;Get the {@link TestContext} managed by this {@code TestContextManager}.;public final TestContext getTestContext() {_		return this.testContext__	};get,the,link,test,context,managed,by,this,code,test,context,manager;public,final,test,context,get,test,context,return,this,test,context
TestContextManager -> public final TestContext getTestContext();1468434541;Get the {@link TestContext} managed by this {@code TestContextManager}.;public final TestContext getTestContext() {_		return this.testContext__	};get,the,link,test,context,managed,by,this,code,test,context,manager;public,final,test,context,get,test,context,return,this,test,context
TestContextManager -> public final TestContext getTestContext();1468503798;Get the {@link TestContext} managed by this {@code TestContextManager}.;public final TestContext getTestContext() {_		return this.testContext__	};get,the,link,test,context,managed,by,this,code,test,context,manager;public,final,test,context,get,test,context,return,this,test,context
TestContextManager -> public final TestContext getTestContext();1472840882;Get the {@link TestContext} managed by this {@code TestContextManager}.;public final TestContext getTestContext() {_		return this.testContextHolder.get()__	};get,the,link,test,context,managed,by,this,code,test,context,manager;public,final,test,context,get,test,context,return,this,test,context,holder,get
TestContextManager -> public final TestContext getTestContext();1495868221;Get the {@link TestContext} managed by this {@code TestContextManager}.;public final TestContext getTestContext() {_		return this.testContextHolder.get()__	};get,the,link,test,context,managed,by,this,code,test,context,manager;public,final,test,context,get,test,context,return,this,test,context,holder,get
TestContextManager -> public final TestContext getTestContext();1496955179;Get the {@link TestContext} managed by this {@code TestContextManager}.;public final TestContext getTestContext() {_		return this.testContextHolder.get()__	};get,the,link,test,context,managed,by,this,code,test,context,manager;public,final,test,context,get,test,context,return,this,test,context,holder,get
TestContextManager -> public final TestContext getTestContext();1497341594;Get the {@link TestContext} managed by this {@code TestContextManager}.;public final TestContext getTestContext() {_		return this.testContextHolder.get()__	};get,the,link,test,context,managed,by,this,code,test,context,manager;public,final,test,context,get,test,context,return,this,test,context,holder,get
TestContextManager -> public final TestContext getTestContext();1519295386;Get the {@link TestContext} managed by this {@code TestContextManager}.;public final TestContext getTestContext() {_		return this.testContextHolder.get()__	};get,the,link,test,context,managed,by,this,code,test,context,manager;public,final,test,context,get,test,context,return,this,test,context,holder,get
TestContextManager -> public final TestContext getTestContext();1519859718;Get the {@link TestContext} managed by this {@code TestContextManager}.;public final TestContext getTestContext() {_		return this.testContextHolder.get()__	};get,the,link,test,context,managed,by,this,code,test,context,manager;public,final,test,context,get,test,context,return,this,test,context,holder,get
TestContextManager -> public final TestContext getTestContext();1519864746;Get the {@link TestContext} managed by this {@code TestContextManager}.;public final TestContext getTestContext() {_		return this.testContextHolder.get()__	};get,the,link,test,context,managed,by,this,code,test,context,manager;public,final,test,context,get,test,context,return,this,test,context,holder,get
TestContextManager -> public final TestContext getTestContext();1520441064;Get the {@link TestContext} managed by this {@code TestContextManager}.;public final TestContext getTestContext() {_		return this.testContextHolder.get()__	};get,the,link,test,context,managed,by,this,code,test,context,manager;public,final,test,context,get,test,context,return,this,test,context,holder,get
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1328020251;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_<code>testInstance</code>._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never <code>null</code>)_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Exception ex) {_				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to prepare test instance [" + testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,code,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,exception,ex,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1344604587;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_<code>testInstance</code>._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never <code>null</code>)_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Exception ex) {_				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to prepare test instance [" + testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,code,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,exception,ex,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1349648958;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_<code>testInstance</code>._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never <code>null</code>)_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			} catch (Exception ex) {_				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to prepare test instance [" + testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,code,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,exception,ex,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1350692960;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_<code>testInstance</code>._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never <code>null</code>)_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			} catch (Exception ex) {_				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to prepare test instance [" + testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,code,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,exception,ex,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1356735495;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			} catch (Exception ex) {_				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to prepare test instance [" + testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,exception,ex,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1362408075;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			} catch (Exception ex) {_				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to prepare test instance [" + testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,exception,ex,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1363208506;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			} catch (Exception ex) {_				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to prepare test instance [" + testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,exception,ex,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1382815212;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Exception ex) {_				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to prepare test instance [" + testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,exception,ex,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1382920864;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Exception ex) {_				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to prepare test instance [" + testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,exception,ex,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1385499540;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Exception ex) {_				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to prepare test instance [" + testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,exception,ex,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1390429716;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Exception ex) {_				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to prepare test instance [" + testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,exception,ex,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1397082962;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Exception ex) {_				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to prepare test instance [" + testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,exception,ex,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1398638841;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Exception ex) {_				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to prepare test instance [" + testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,exception,ex,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1398808867;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Exception ex) {_				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to prepare test instance [" + testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,exception,ex,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1400531350;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Exception ex) {_				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to prepare test instance [" + testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,exception,ex,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1429465455;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Exception ex) {_				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to prepare test instance [" + testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,exception,ex,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1429466943;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Exception ex) {_				logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to prepare test instance [" + testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,exception,ex,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1455826052;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isErrorEnabled()) {_					logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to prepare test instance [" + testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,throwable,ex,if,logger,is,error,enabled,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1456613400;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isErrorEnabled()) {_					logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to prepare test instance [" + testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,throwable,ex,if,logger,is,error,enabled,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1456946365;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isErrorEnabled()) {_					logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to prepare test instance [" + testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,throwable,ex,if,logger,is,error,enabled,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1461428605;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isErrorEnabled()) {_					logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to prepare test instance [" + testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,throwable,ex,if,logger,is,error,enabled,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1467730834;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isErrorEnabled()) {_					logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to prepare test instance [" + testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,throwable,ex,if,logger,is,error,enabled,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1468159440;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isErrorEnabled()) {_					logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to prepare test instance [" + testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,throwable,ex,if,logger,is,error,enabled,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1468244735;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isErrorEnabled()) {_					logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to prepare test instance [" + testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,throwable,ex,if,logger,is,error,enabled,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1468434541;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isErrorEnabled()) {_					logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to prepare test instance [" + testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,throwable,ex,if,logger,is,error,enabled,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1468503798;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isErrorEnabled()) {_					logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to prepare test instance [" + testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,throwable,ex,if,logger,is,error,enabled,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1472840882;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isErrorEnabled()) {_					logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to prepare test instance [" + testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,throwable,ex,if,logger,is,error,enabled,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1495868221;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isErrorEnabled()) {_					logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to prepare test instance [" + testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,throwable,ex,if,logger,is,error,enabled,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1496955179;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isErrorEnabled()) {_					logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to prepare test instance [" + testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,throwable,ex,if,logger,is,error,enabled,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1497341594;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isErrorEnabled()) {_					logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to prepare test instance [" + testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,throwable,ex,if,logger,is,error,enabled,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1519295386;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isErrorEnabled()) {_					logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to prepare test instance [" + testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,throwable,ex,if,logger,is,error,enabled,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1519859718;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isErrorEnabled()) {_					logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to prepare test instance [" + testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,throwable,ex,if,logger,is,error,enabled,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1519864746;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isErrorEnabled()) {_					logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to prepare test instance [" + testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,throwable,ex,if,logger,is,error,enabled,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void prepareTestInstance(Object testInstance) throws Exception;1520441064;Hook for preparing a test instance prior to execution of any individual_test methods, for example for injecting dependencies, etc. Should be_called immediately after instantiation of the test instance._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to prepare the test instance. If a_listener throws an exception, however, the remaining registered listeners_will <strong>not</strong> be called._@param testInstance the test instance to prepare (never {@code null})_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void prepareTestInstance(Object testInstance) throws Exception {_		if (logger.isTraceEnabled()) {_			logger.trace("prepareTestInstance(): instance [" + testInstance + "]")__		}_		getTestContext().updateState(testInstance, null, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.prepareTestInstance(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isErrorEnabled()) {_					logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to prepare test instance [" + testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,preparing,a,test,instance,prior,to,execution,of,any,individual,test,methods,for,example,for,injecting,dependencies,etc,should,be,called,immediately,after,instantiation,of,the,test,instance,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,prepare,the,test,instance,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,test,instance,to,prepare,never,code,null,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,prepare,test,instance,object,test,instance,throws,exception,if,logger,is,trace,enabled,logger,trace,prepare,test,instance,instance,test,instance,get,test,context,update,state,test,instance,null,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,prepare,test,instance,get,test,context,catch,throwable,ex,if,logger,is,error,enabled,logger,error,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,prepare,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception) 			throws Exception;1519864746;Hook for post-processing a test <em>after</em> execution of <em>after</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_tearing down test fixtures, ending a transaction, etc._<p>This method <strong>must</strong> be called immediately after_framework-specific <em>after</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.After @After}). For historical_reasons, this method is named {@code afterTestMethod}. Since the_introduction of {@link #afterTestExecution}, a more suitable name for_this method might be something like {@code afterTestTearDown} or_{@code afterEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the test_method or by a TestExecutionListener, or {@code null} if none was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #beforeTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception)_			throws Exception {__		String callbackName = "afterTestMethod"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)__		Throwable afterTestMethodException = null___		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_				else {_					afterTestMethodException.addSuppressed(ex)__				}_			}_		}__		if (afterTestMethodException != null) {_			ReflectionUtils.rethrowException(afterTestMethodException)__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,em,after,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,tearing,down,test,fixtures,ending,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,after,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,for,historical,reasons,this,method,is,named,code,after,test,method,since,the,introduction,of,link,after,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,after,test,tear,down,or,code,after,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,before,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,method,object,test,instance,method,test,method,nullable,throwable,exception,throws,exception,string,callback,name,after,test,method,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,method,exception,null,after,test,method,exception,ex,else,after,test,method,exception,add,suppressed,ex,if,after,test,method,exception,null,reflection,utils,rethrow,exception,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception) 			throws Exception;1520441064;Hook for post-processing a test <em>after</em> execution of <em>after</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_tearing down test fixtures, ending a transaction, etc._<p>This method <strong>must</strong> be called immediately after_framework-specific <em>after</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.After @After}). For historical_reasons, this method is named {@code afterTestMethod}. Since the_introduction of {@link #afterTestExecution}, a more suitable name for_this method might be something like {@code afterTestTearDown} or_{@code afterEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the test_method or by a TestExecutionListener, or {@code null} if none was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #beforeTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception)_			throws Exception {__		String callbackName = "afterTestMethod"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)__		Throwable afterTestMethodException = null___		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_				else {_					afterTestMethodException.addSuppressed(ex)__				}_			}_		}__		if (afterTestMethodException != null) {_			ReflectionUtils.rethrowException(afterTestMethodException)__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,em,after,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,tearing,down,test,fixtures,ending,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,after,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,for,historical,reasons,this,method,is,named,code,after,test,method,since,the,introduction,of,link,after,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,after,test,tear,down,or,code,after,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,before,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,method,object,test,instance,method,test,method,nullable,throwable,exception,throws,exception,string,callback,name,after,test,method,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,method,exception,null,after,test,method,exception,ex,else,after,test,method,exception,add,suppressed,ex,if,after,test,method,exception,null,reflection,utils,rethrow,exception,after,test,method,exception
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1397082962;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1398638841;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1398808867;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1400531350;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1429465455;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1429466943;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1455826052;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1456613400;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1456946365;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1461428605;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1467730834;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1468159440;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1468244735;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1468434541;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1468503798;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1472840882;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1495868221;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1496955179;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1497341594;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[testExecutionListeners.size()]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,test,execution,listeners,size
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1519295386;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[0]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,0
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1519859718;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[0]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,0
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1519864746;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[0]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,0
TestContextManager -> public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners);1520441064;Register the supplied list of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}._@see #registerTestExecutionListeners(TestExecutionListener...);public void registerTestExecutionListeners(List<TestExecutionListener> testExecutionListeners) {_		registerTestExecutionListeners(testExecutionListeners.toArray(new TestExecutionListener[0]))__	};register,the,supplied,list,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager,see,register,test,execution,listeners,test,execution,listener;public,void,register,test,execution,listeners,list,test,execution,listener,test,execution,listeners,register,test,execution,listeners,test,execution,listeners,to,array,new,test,execution,listener,0
TestContextManager -> public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName);1328020251;Constructs a new <code>TestContextManager</code> for the specified {@link Class test class}_and automatically {@link #registerTestExecutionListeners registers} the_{@link TestExecutionListener TestExecutionListeners} configured for the test class_via the {@link TestExecutionListeners &#064_TestExecutionListeners} annotation._@param testClass the test class to be managed_@param defaultContextLoaderClassName the name of the default_<code>ContextLoader</code> class to use (may be <code>null</code>)_@see #registerTestExecutionListeners(TestExecutionListener...)_@see #retrieveTestExecutionListeners(Class);public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName) {_		this.testContext = new TestContext(testClass, contextCache, defaultContextLoaderClassName)__		registerTestExecutionListeners(retrieveTestExecutionListeners(testClass))__	};constructs,a,new,code,test,context,manager,code,for,the,specified,link,class,test,class,and,automatically,link,register,test,execution,listeners,registers,the,link,test,execution,listener,test,execution,listeners,configured,for,the,test,class,via,the,link,test,execution,listeners,064,test,execution,listeners,annotation,param,test,class,the,test,class,to,be,managed,param,default,context,loader,class,name,the,name,of,the,default,code,context,loader,code,class,to,use,may,be,code,null,code,see,register,test,execution,listeners,test,execution,listener,see,retrieve,test,execution,listeners,class;public,test,context,manager,class,test,class,string,default,context,loader,class,name,this,test,context,new,test,context,test,class,context,cache,default,context,loader,class,name,register,test,execution,listeners,retrieve,test,execution,listeners,test,class
TestContextManager -> public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName);1344604587;Constructs a new <code>TestContextManager</code> for the specified {@link Class test class}_and automatically {@link #registerTestExecutionListeners registers} the_{@link TestExecutionListener TestExecutionListeners} configured for the test class_via the {@link TestExecutionListeners &#064_TestExecutionListeners} annotation._@param testClass the test class to be managed_@param defaultContextLoaderClassName the name of the default_<code>ContextLoader</code> class to use (may be <code>null</code>)_@see #registerTestExecutionListeners(TestExecutionListener...)_@see #retrieveTestExecutionListeners(Class);public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName) {_		this.testContext = new TestContext(testClass, contextCache, defaultContextLoaderClassName)__		registerTestExecutionListeners(retrieveTestExecutionListeners(testClass))__	};constructs,a,new,code,test,context,manager,code,for,the,specified,link,class,test,class,and,automatically,link,register,test,execution,listeners,registers,the,link,test,execution,listener,test,execution,listeners,configured,for,the,test,class,via,the,link,test,execution,listeners,064,test,execution,listeners,annotation,param,test,class,the,test,class,to,be,managed,param,default,context,loader,class,name,the,name,of,the,default,code,context,loader,code,class,to,use,may,be,code,null,code,see,register,test,execution,listeners,test,execution,listener,see,retrieve,test,execution,listeners,class;public,test,context,manager,class,test,class,string,default,context,loader,class,name,this,test,context,new,test,context,test,class,context,cache,default,context,loader,class,name,register,test,execution,listeners,retrieve,test,execution,listeners,test,class
TestContextManager -> public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName);1349648958;Constructs a new <code>TestContextManager</code> for the specified {@link Class test class}_and automatically {@link #registerTestExecutionListeners registers} the_{@link TestExecutionListener TestExecutionListeners} configured for the test class_via the {@link TestExecutionListeners &#064_TestExecutionListeners} annotation._@param testClass the test class to be managed_@param defaultContextLoaderClassName the name of the default_<code>ContextLoader</code> class to use (may be <code>null</code>)_@see #registerTestExecutionListeners(TestExecutionListener...)_@see #retrieveTestExecutionListeners(Class);public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName) {_		this.testContext = new TestContext(testClass, contextCache, defaultContextLoaderClassName)__		registerTestExecutionListeners(retrieveTestExecutionListeners(testClass))__	};constructs,a,new,code,test,context,manager,code,for,the,specified,link,class,test,class,and,automatically,link,register,test,execution,listeners,registers,the,link,test,execution,listener,test,execution,listeners,configured,for,the,test,class,via,the,link,test,execution,listeners,064,test,execution,listeners,annotation,param,test,class,the,test,class,to,be,managed,param,default,context,loader,class,name,the,name,of,the,default,code,context,loader,code,class,to,use,may,be,code,null,code,see,register,test,execution,listeners,test,execution,listener,see,retrieve,test,execution,listeners,class;public,test,context,manager,class,test,class,string,default,context,loader,class,name,this,test,context,new,test,context,test,class,context,cache,default,context,loader,class,name,register,test,execution,listeners,retrieve,test,execution,listeners,test,class
TestContextManager -> public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName);1350692960;Constructs a new <code>TestContextManager</code> for the specified {@link Class test class}_and automatically {@link #registerTestExecutionListeners registers} the_{@link TestExecutionListener TestExecutionListeners} configured for the test class_via the {@link TestExecutionListeners &#064_TestExecutionListeners} annotation._@param testClass the test class to be managed_@param defaultContextLoaderClassName the name of the default_<code>ContextLoader</code> class to use (may be <code>null</code>)_@see #registerTestExecutionListeners(TestExecutionListener...)_@see #retrieveTestExecutionListeners(Class);public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName) {_		this.testContext = new TestContext(testClass, contextCache, defaultContextLoaderClassName)__		registerTestExecutionListeners(retrieveTestExecutionListeners(testClass))__	};constructs,a,new,code,test,context,manager,code,for,the,specified,link,class,test,class,and,automatically,link,register,test,execution,listeners,registers,the,link,test,execution,listener,test,execution,listeners,configured,for,the,test,class,via,the,link,test,execution,listeners,064,test,execution,listeners,annotation,param,test,class,the,test,class,to,be,managed,param,default,context,loader,class,name,the,name,of,the,default,code,context,loader,code,class,to,use,may,be,code,null,code,see,register,test,execution,listeners,test,execution,listener,see,retrieve,test,execution,listeners,class;public,test,context,manager,class,test,class,string,default,context,loader,class,name,this,test,context,new,test,context,test,class,context,cache,default,context,loader,class,name,register,test,execution,listeners,retrieve,test,execution,listeners,test,class
TestContextManager -> public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName);1356735495;Constructs a new {@code TestContextManager} for the specified {@link Class test class}_and automatically {@link #registerTestExecutionListeners registers} the_{@link TestExecutionListener TestExecutionListeners} configured for the test class_via the {@link TestExecutionListeners &#064_TestExecutionListeners} annotation._@param testClass the test class to be managed_@param defaultContextLoaderClassName the name of the default_{@code ContextLoader} class to use (may be {@code null})_@see #registerTestExecutionListeners(TestExecutionListener...)_@see #retrieveTestExecutionListeners(Class);public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName) {_		this.testContext = new TestContext(testClass, contextCache, defaultContextLoaderClassName)__		registerTestExecutionListeners(retrieveTestExecutionListeners(testClass))__	};constructs,a,new,code,test,context,manager,for,the,specified,link,class,test,class,and,automatically,link,register,test,execution,listeners,registers,the,link,test,execution,listener,test,execution,listeners,configured,for,the,test,class,via,the,link,test,execution,listeners,064,test,execution,listeners,annotation,param,test,class,the,test,class,to,be,managed,param,default,context,loader,class,name,the,name,of,the,default,code,context,loader,class,to,use,may,be,code,null,see,register,test,execution,listeners,test,execution,listener,see,retrieve,test,execution,listeners,class;public,test,context,manager,class,test,class,string,default,context,loader,class,name,this,test,context,new,test,context,test,class,context,cache,default,context,loader,class,name,register,test,execution,listeners,retrieve,test,execution,listeners,test,class
TestContextManager -> public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName);1362408075;Constructs a new {@code TestContextManager} for the specified {@link Class test class}_and automatically {@link #registerTestExecutionListeners registers} the_{@link TestExecutionListener TestExecutionListeners} configured for the test class_via the {@link TestExecutionListeners &#064_TestExecutionListeners} annotation._@param testClass the test class to be managed_@param defaultContextLoaderClassName the name of the default_{@code ContextLoader} class to use (may be {@code null})_@see #registerTestExecutionListeners(TestExecutionListener...)_@see #retrieveTestExecutionListeners(Class);public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName) {_		this.testContext = new TestContext(testClass, contextCache, defaultContextLoaderClassName)__		registerTestExecutionListeners(retrieveTestExecutionListeners(testClass))__	};constructs,a,new,code,test,context,manager,for,the,specified,link,class,test,class,and,automatically,link,register,test,execution,listeners,registers,the,link,test,execution,listener,test,execution,listeners,configured,for,the,test,class,via,the,link,test,execution,listeners,064,test,execution,listeners,annotation,param,test,class,the,test,class,to,be,managed,param,default,context,loader,class,name,the,name,of,the,default,code,context,loader,class,to,use,may,be,code,null,see,register,test,execution,listeners,test,execution,listener,see,retrieve,test,execution,listeners,class;public,test,context,manager,class,test,class,string,default,context,loader,class,name,this,test,context,new,test,context,test,class,context,cache,default,context,loader,class,name,register,test,execution,listeners,retrieve,test,execution,listeners,test,class
TestContextManager -> public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName);1363208506;Constructs a new {@code TestContextManager} for the specified {@linkplain Class_test class} and automatically {@link #registerTestExecutionListeners registers} the_{@link TestExecutionListener TestExecutionListeners} configured for the test class_via the {@link TestExecutionListeners &#064_TestExecutionListeners} annotation._@param testClass the test class to be managed_@param defaultContextLoaderClassName the name of the default {@code ContextLoader}_class to use (may be {@code null})_@see #registerTestExecutionListeners(TestExecutionListener...);public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName) {_		this.testContext = new TestContext(testClass, contextCache, defaultContextLoaderClassName)__		registerTestExecutionListeners(retrieveTestExecutionListeners(testClass))__	};constructs,a,new,code,test,context,manager,for,the,specified,linkplain,class,test,class,and,automatically,link,register,test,execution,listeners,registers,the,link,test,execution,listener,test,execution,listeners,configured,for,the,test,class,via,the,link,test,execution,listeners,064,test,execution,listeners,annotation,param,test,class,the,test,class,to,be,managed,param,default,context,loader,class,name,the,name,of,the,default,code,context,loader,class,to,use,may,be,code,null,see,register,test,execution,listeners,test,execution,listener;public,test,context,manager,class,test,class,string,default,context,loader,class,name,this,test,context,new,test,context,test,class,context,cache,default,context,loader,class,name,register,test,execution,listeners,retrieve,test,execution,listeners,test,class
TestContextManager -> public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName);1382815212;Constructs a new {@code TestContextManager} for the specified {@linkplain Class_test class} and automatically {@link #registerTestExecutionListeners registers} the_{@link TestExecutionListener TestExecutionListeners} configured for the test class_via the {@link TestExecutionListeners &#064_TestExecutionListeners} annotation._@param testClass the test class to be managed_@param defaultContextLoaderClassName the name of the default {@code ContextLoader}_class to use (may be {@code null})_@see #registerTestExecutionListeners(TestExecutionListener...);public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName) {_		this.testContext = new DefaultTestContext(testClass, contextCache, defaultContextLoaderClassName)__		registerTestExecutionListeners(retrieveTestExecutionListeners(testClass))__	};constructs,a,new,code,test,context,manager,for,the,specified,linkplain,class,test,class,and,automatically,link,register,test,execution,listeners,registers,the,link,test,execution,listener,test,execution,listeners,configured,for,the,test,class,via,the,link,test,execution,listeners,064,test,execution,listeners,annotation,param,test,class,the,test,class,to,be,managed,param,default,context,loader,class,name,the,name,of,the,default,code,context,loader,class,to,use,may,be,code,null,see,register,test,execution,listeners,test,execution,listener;public,test,context,manager,class,test,class,string,default,context,loader,class,name,this,test,context,new,default,test,context,test,class,context,cache,default,context,loader,class,name,register,test,execution,listeners,retrieve,test,execution,listeners,test,class
TestContextManager -> public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName);1382920864;Constructs a new {@code TestContextManager} for the specified {@linkplain Class_test class} and automatically {@link #registerTestExecutionListeners registers} the_{@link TestExecutionListener TestExecutionListeners} configured for the test class_via the {@link TestExecutionListeners &#064_TestExecutionListeners} annotation._@param testClass the test class to be managed_@param defaultContextLoaderClassName the name of the default {@code ContextLoader}_class to use (may be {@code null})_@see #registerTestExecutionListeners(TestExecutionListener...);public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName) {_		this.testContext = new DefaultTestContext(testClass, contextCache, defaultContextLoaderClassName)__		registerTestExecutionListeners(retrieveTestExecutionListeners(testClass))__	};constructs,a,new,code,test,context,manager,for,the,specified,linkplain,class,test,class,and,automatically,link,register,test,execution,listeners,registers,the,link,test,execution,listener,test,execution,listeners,configured,for,the,test,class,via,the,link,test,execution,listeners,064,test,execution,listeners,annotation,param,test,class,the,test,class,to,be,managed,param,default,context,loader,class,name,the,name,of,the,default,code,context,loader,class,to,use,may,be,code,null,see,register,test,execution,listeners,test,execution,listener;public,test,context,manager,class,test,class,string,default,context,loader,class,name,this,test,context,new,default,test,context,test,class,context,cache,default,context,loader,class,name,register,test,execution,listeners,retrieve,test,execution,listeners,test,class
TestContextManager -> public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName);1385499540;Constructs a new {@code TestContextManager} for the specified {@linkplain Class_test class} and automatically {@link #registerTestExecutionListeners registers} the_{@link TestExecutionListener TestExecutionListeners} configured for the test class_via the {@link TestExecutionListeners &#064_TestExecutionListeners} annotation._@param testClass the test class to be managed_@param defaultContextLoaderClassName the name of the default {@code ContextLoader}_class to use (may be {@code null})_@see #registerTestExecutionListeners(TestExecutionListener...);public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName) {_		this.testContext = new DefaultTestContext(testClass, contextCache, defaultContextLoaderClassName)__		registerTestExecutionListeners(retrieveTestExecutionListeners(testClass))__	};constructs,a,new,code,test,context,manager,for,the,specified,linkplain,class,test,class,and,automatically,link,register,test,execution,listeners,registers,the,link,test,execution,listener,test,execution,listeners,configured,for,the,test,class,via,the,link,test,execution,listeners,064,test,execution,listeners,annotation,param,test,class,the,test,class,to,be,managed,param,default,context,loader,class,name,the,name,of,the,default,code,context,loader,class,to,use,may,be,code,null,see,register,test,execution,listeners,test,execution,listener;public,test,context,manager,class,test,class,string,default,context,loader,class,name,this,test,context,new,default,test,context,test,class,context,cache,default,context,loader,class,name,register,test,execution,listeners,retrieve,test,execution,listeners,test,class
TestContextManager -> public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName);1390429716;Constructs a new {@code TestContextManager} for the specified {@linkplain Class_test class} and automatically {@link #registerTestExecutionListeners registers} the_{@link TestExecutionListener TestExecutionListeners} configured for the test class_via the {@link TestExecutionListeners &#064_TestExecutionListeners} annotation._@param testClass the test class to be managed_@param defaultContextLoaderClassName the name of the default {@code ContextLoader}_class to use (may be {@code null})_@see #registerTestExecutionListeners(TestExecutionListener...);public TestContextManager(Class<?> testClass, String defaultContextLoaderClassName) {_		this.testContext = new DefaultTestContext(testClass, contextCache, defaultContextLoaderClassName)__		registerTestExecutionListeners(retrieveTestExecutionListeners(testClass))__	};constructs,a,new,code,test,context,manager,for,the,specified,linkplain,class,test,class,and,automatically,link,register,test,execution,listeners,registers,the,link,test,execution,listener,test,execution,listeners,configured,for,the,test,class,via,the,link,test,execution,listeners,064,test,execution,listeners,annotation,param,test,class,the,test,class,to,be,managed,param,default,context,loader,class,name,the,name,of,the,default,code,context,loader,class,to,use,may,be,code,null,see,register,test,execution,listeners,test,execution,listener;public,test,context,manager,class,test,class,string,default,context,loader,class,name,this,test,context,new,default,test,context,test,class,context,cache,default,context,loader,class,name,register,test,execution,listeners,retrieve,test,execution,listeners,test,class
TestContextManager -> public void afterTestClass() throws Exception;1328020251;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass &#064_AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		Exception afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after class' callback for test class [" + testClass + "]", ex)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			throw afterTestClassException__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,064,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,test,context,update,state,null,null,null,exception,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,throw,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1344604587;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass &#064_AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		Exception afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after class' callback for test class [" + testClass + "]", ex)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			throw afterTestClassException__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,064,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,test,context,update,state,null,null,null,exception,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,throw,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1349648958;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass &#064_AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		Exception afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after class' callback for test class [" + testClass + "]", ex)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			throw afterTestClassException__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,064,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,test,context,update,state,null,null,null,exception,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,throw,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1350692960;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass &#064_AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		Exception afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after class' callback for test class [" + testClass + "]", ex)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			throw afterTestClassException__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,064,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,test,context,update,state,null,null,null,exception,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,throw,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1356735495;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass &#064_AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		Exception afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after class' callback for test class [" + testClass + "]", ex)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			throw afterTestClassException__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,064,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,test,context,update,state,null,null,null,exception,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,throw,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1362408075;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass &#064_AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		Exception afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after class' callback for test class [" + testClass + "]", ex)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			throw afterTestClassException__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,064,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,test,context,update,state,null,null,null,exception,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,throw,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1363208506;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass &#064_AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		Exception afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after class' callback for test class [" + testClass + "]", ex)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			throw afterTestClassException__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,064,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,test,context,update,state,null,null,null,exception,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,throw,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1382815212;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass &#064_AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		Exception afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after class' callback for test class [" + testClass + "]", ex)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			throw afterTestClassException__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,064,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,test,context,update,state,null,null,null,exception,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,throw,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1382920864;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass &#064_AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		Exception afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after class' callback for test class [" + testClass + "]", ex)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			throw afterTestClassException__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,064,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,test,context,update,state,null,null,null,exception,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,throw,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1385499540;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass &#064_AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		Exception afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after class' callback for test class [" + testClass + "]", ex)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			throw afterTestClassException__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,064,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,test,context,update,state,null,null,null,exception,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,throw,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1390429716;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass &#064_AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		Exception afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after class' callback for test class [" + testClass + "]", ex)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			throw afterTestClassException__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,064,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,test,context,update,state,null,null,null,exception,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,throw,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1397082962;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		final Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		Exception afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after class' callback for test class [" + testClass + "]", ex)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			throw afterTestClassException__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,final,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,test,context,update,state,null,null,null,exception,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,throw,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1398638841;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		Exception afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'after class' callback for test class [" + testClass + "]", ex)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			throw afterTestClassException__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,test,context,update,state,null,null,null,exception,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,throw,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1398808867;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass + "]")__		}_		getTestContext().updateState(null, null, null)___		Exception afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'after class' callback for test class [" + testClass + "]", ex)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			throw afterTestClassException__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,test,context,update,state,null,null,null,exception,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,throw,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1400531350;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Exception afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'after class' callback for test class [" + testClass + "]", ex)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			throw afterTestClassException__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,exception,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,throw,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1429465455;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Exception afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'after class' callback for test class [" + testClass + "]", ex)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			throw afterTestClassException__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,exception,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,throw,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1429466943;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Exception afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'after class' callback for test class [" + testClass + "]", ex)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			throw afterTestClassException__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,exception,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,throw,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1455826052;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Throwable afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'after class' callback for test class [" + testClass + "]", ex)__					if (afterTestClassException == null) {_						afterTestClassException = ex__					}_				}_			}_		}_		if (afterTestClassException != null) {_			ReflectionUtils.rethrowException(afterTestClassException)__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,throwable,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,reflection,utils,rethrow,exception,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1456613400;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Throwable afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'after class' callback for test class [" + testClass + "]", ex)__					if (afterTestClassException == null) {_						afterTestClassException = ex__					}_				}_			}_		}_		if (afterTestClassException != null) {_			ReflectionUtils.rethrowException(afterTestClassException)__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,throwable,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,reflection,utils,rethrow,exception,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1456946365;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Throwable afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'after class' callback for test class [" + testClass + "]", ex)__					if (afterTestClassException == null) {_						afterTestClassException = ex__					}_				}_			}_		}_		if (afterTestClassException != null) {_			ReflectionUtils.rethrowException(afterTestClassException)__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,throwable,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,reflection,utils,rethrow,exception,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1461428605;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Throwable afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'after class' callback for test class [" + testClass + "]", ex)__					if (afterTestClassException == null) {_						afterTestClassException = ex__					}_				}_			}_		}_		if (afterTestClassException != null) {_			ReflectionUtils.rethrowException(afterTestClassException)__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,throwable,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,reflection,utils,rethrow,exception,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1467730834;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Throwable afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'after class' callback for test class [" + testClass + "]", ex)__					if (afterTestClassException == null) {_						afterTestClassException = ex__					}_				}_			}_		}_		if (afterTestClassException != null) {_			ReflectionUtils.rethrowException(afterTestClassException)__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,throwable,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,reflection,utils,rethrow,exception,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1468159440;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Throwable afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'after class' callback for test class [" + testClass + "]", ex)__				}_				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			ReflectionUtils.rethrowException(afterTestClassException)__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,throwable,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,class,callback,for,test,class,test,class,ex,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,reflection,utils,rethrow,exception,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1468244735;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@since 3.0_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Throwable afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "afterTestClass", testExecutionListener, testClass)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_			}_		}_		if (afterTestClassException != null) {_			ReflectionUtils.rethrowException(afterTestClassException)__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,throwable,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,throwable,ex,log,exception,ex,after,test,class,test,execution,listener,test,class,if,after,test,class,exception,null,after,test,class,exception,ex,if,after,test,class,exception,null,reflection,utils,rethrow,exception,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1468434541;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test class. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@throws Exception if a registered TestExecutionListener throws an exception_@since 3.0_@see #getTestExecutionListeners();public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Throwable afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "afterTestClass", testExecutionListener, testClass)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_				else {_					afterTestClassException.addSuppressed(ex)__				}_			}_		}_		if (afterTestClassException != null) {_			ReflectionUtils.rethrowException(afterTestClassException)__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,class,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,throwable,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,throwable,ex,log,exception,ex,after,test,class,test,execution,listener,test,class,if,after,test,class,exception,null,after,test,class,exception,ex,else,after,test,class,exception,add,suppressed,ex,if,after,test,class,exception,null,reflection,utils,rethrow,exception,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1468503798;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@throws Exception if a registered TestExecutionListener throws an exception_@since 3.0_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Throwable afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "afterTestClass", testExecutionListener, testClass)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_				else {_					afterTestClassException.addSuppressed(ex)__				}_			}_		}_		if (afterTestClassException != null) {_			ReflectionUtils.rethrowException(afterTestClassException)__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,throwable,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,throwable,ex,log,exception,ex,after,test,class,test,execution,listener,test,class,if,after,test,class,exception,null,after,test,class,exception,ex,else,after,test,class,exception,add,suppressed,ex,if,after,test,class,exception,null,reflection,utils,rethrow,exception,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1472840882;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@throws Exception if a registered TestExecutionListener throws an exception_@since 3.0_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Throwable afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "afterTestClass", testExecutionListener, testClass)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_				else {_					afterTestClassException.addSuppressed(ex)__				}_			}_		}__		this.testContextHolder.remove()___		if (afterTestClassException != null) {_			ReflectionUtils.rethrowException(afterTestClassException)__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,throwable,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,throwable,ex,log,exception,ex,after,test,class,test,execution,listener,test,class,if,after,test,class,exception,null,after,test,class,exception,ex,else,after,test,class,exception,add,suppressed,ex,this,test,context,holder,remove,if,after,test,class,exception,null,reflection,utils,rethrow,exception,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1495868221;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@throws Exception if a registered TestExecutionListener throws an exception_@since 3.0_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Throwable afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "afterTestClass", testExecutionListener, testClass)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_				else {_					afterTestClassException.addSuppressed(ex)__				}_			}_		}__		this.testContextHolder.remove()___		if (afterTestClassException != null) {_			ReflectionUtils.rethrowException(afterTestClassException)__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,throwable,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,throwable,ex,log,exception,ex,after,test,class,test,execution,listener,test,class,if,after,test,class,exception,null,after,test,class,exception,ex,else,after,test,class,exception,add,suppressed,ex,this,test,context,holder,remove,if,after,test,class,exception,null,reflection,utils,rethrow,exception,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1496955179;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@throws Exception if a registered TestExecutionListener throws an exception_@since 3.0_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Throwable afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "afterTestClass", testExecutionListener, testClass)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_				else {_					afterTestClassException.addSuppressed(ex)__				}_			}_		}__		this.testContextHolder.remove()___		if (afterTestClassException != null) {_			ReflectionUtils.rethrowException(afterTestClassException)__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,throwable,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,throwable,ex,log,exception,ex,after,test,class,test,execution,listener,test,class,if,after,test,class,exception,null,after,test,class,exception,ex,else,after,test,class,exception,add,suppressed,ex,this,test,context,holder,remove,if,after,test,class,exception,null,reflection,utils,rethrow,exception,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1497341594;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@throws Exception if a registered TestExecutionListener throws an exception_@since 3.0_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Throwable afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "afterTestClass", testExecutionListener, testClass)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_				else {_					afterTestClassException.addSuppressed(ex)__				}_			}_		}__		this.testContextHolder.remove()___		if (afterTestClassException != null) {_			ReflectionUtils.rethrowException(afterTestClassException)__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,throwable,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,throwable,ex,log,exception,ex,after,test,class,test,execution,listener,test,class,if,after,test,class,exception,null,after,test,class,exception,ex,else,after,test,class,exception,add,suppressed,ex,this,test,context,holder,remove,if,after,test,class,exception,null,reflection,utils,rethrow,exception,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1519295386;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@throws Exception if a registered TestExecutionListener throws an exception_@since 3.0_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Throwable afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "afterTestClass", testExecutionListener, testClass)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_				else {_					afterTestClassException.addSuppressed(ex)__				}_			}_		}__		this.testContextHolder.remove()___		if (afterTestClassException != null) {_			ReflectionUtils.rethrowException(afterTestClassException)__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,throwable,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,throwable,ex,log,exception,ex,after,test,class,test,execution,listener,test,class,if,after,test,class,exception,null,after,test,class,exception,ex,else,after,test,class,exception,add,suppressed,ex,this,test,context,holder,remove,if,after,test,class,exception,null,reflection,utils,rethrow,exception,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1519859718;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@throws Exception if a registered TestExecutionListener throws an exception_@since 3.0_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Throwable afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "afterTestClass", testExecutionListener, testClass)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_				else {_					afterTestClassException.addSuppressed(ex)__				}_			}_		}__		this.testContextHolder.remove()___		if (afterTestClassException != null) {_			ReflectionUtils.rethrowException(afterTestClassException)__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,throwable,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,throwable,ex,log,exception,ex,after,test,class,test,execution,listener,test,class,if,after,test,class,exception,null,after,test,class,exception,ex,else,after,test,class,exception,add,suppressed,ex,this,test,context,holder,remove,if,after,test,class,exception,null,reflection,utils,rethrow,exception,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1519864746;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@throws Exception if a registered TestExecutionListener throws an exception_@since 3.0_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Throwable afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "afterTestClass", testExecutionListener, testClass)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_				else {_					afterTestClassException.addSuppressed(ex)__				}_			}_		}__		this.testContextHolder.remove()___		if (afterTestClassException != null) {_			ReflectionUtils.rethrowException(afterTestClassException)__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,throwable,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,throwable,ex,log,exception,ex,after,test,class,test,execution,listener,test,class,if,after,test,class,exception,null,after,test,class,exception,ex,else,after,test,class,exception,add,suppressed,ex,this,test,context,holder,remove,if,after,test,class,exception,null,reflection,utils,rethrow,exception,after,test,class,exception
TestContextManager -> public void afterTestClass() throws Exception;1520441064;Hook for post-processing a test class <em>after</em> execution of all_tests within the class. Should be called after any framework-specific_<em>after class methods</em> (e.g., methods annotated with JUnit 4's_{@link org.junit.AfterClass @AfterClass})._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@throws Exception if a registered TestExecutionListener throws an exception_@since 3.0_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestClass() throws Exception {_		Class<?> testClass = getTestContext().getTestClass()__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestClass(): class [" + testClass.getName() + "]")__		}_		getTestContext().updateState(null, null, null)___		Throwable afterTestClassException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestClass(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, "afterTestClass", testExecutionListener, testClass)__				if (afterTestClassException == null) {_					afterTestClassException = ex__				}_				else {_					afterTestClassException.addSuppressed(ex)__				}_			}_		}__		this.testContextHolder.remove()___		if (afterTestClassException != null) {_			ReflectionUtils.rethrowException(afterTestClassException)__		}_	};hook,for,post,processing,a,test,class,em,after,em,execution,of,all,tests,within,the,class,should,be,called,after,any,framework,specific,em,after,class,methods,em,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,class,after,class,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,3,0,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,class,throws,exception,class,test,class,get,test,context,get,test,class,if,logger,is,trace,enabled,logger,trace,after,test,class,class,test,class,get,name,get,test,context,update,state,null,null,null,throwable,after,test,class,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,class,get,test,context,catch,throwable,ex,log,exception,ex,after,test,class,test,execution,listener,test,class,if,after,test,class,exception,null,after,test,class,exception,ex,else,after,test,class,exception,add,suppressed,ex,this,test,context,holder,remove,if,after,test,class,exception,null,reflection,utils,rethrow,exception,after,test,class,exception
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1328020251;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before &#064_Before})._<p>The managed {@link TestContext} will be updated with the supplied_<code>testInstance</code> and <code>testMethod</code>._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never <code>null</code>)_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before' execution of test method [" + testMethod + "] for test instance ["_						+ testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,064,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,and,code,test,method,code,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,code,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1344604587;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before &#064_Before})._<p>The managed {@link TestContext} will be updated with the supplied_<code>testInstance</code> and <code>testMethod</code>._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never <code>null</code>)_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before' execution of test method [" + testMethod + "] for test instance ["_						+ testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,064,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,and,code,test,method,code,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,code,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1349648958;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before &#064_Before})._<p>The managed {@link TestContext} will be updated with the supplied_<code>testInstance</code> and <code>testMethod</code>._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never <code>null</code>)_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before' execution of test method [" + testMethod + "] for test instance ["_						+ testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,064,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,and,code,test,method,code,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,code,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1350692960;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before &#064_Before})._<p>The managed {@link TestContext} will be updated with the supplied_<code>testInstance</code> and <code>testMethod</code>._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never <code>null</code>)_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before' execution of test method [" + testMethod + "] for test instance ["_						+ testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,064,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,and,code,test,method,code,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,code,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1356735495;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before &#064_Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before' execution of test method [" + testMethod + "] for test instance ["_						+ testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,064,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1362408075;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before &#064_Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before' execution of test method [" + testMethod + "] for test instance ["_						+ testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,064,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1363208506;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before &#064_Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before' execution of test method [" + testMethod + "] for test instance ["_						+ testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,064,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1382815212;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before &#064_Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before' execution of test method [" + testMethod + "] for test instance ["_						+ testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,064,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1382920864;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before &#064_Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before' execution of test method [" + testMethod + "] for test instance ["_						+ testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,064,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1385499540;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before &#064_Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before' execution of test method [" + testMethod + "] for test instance ["_						+ testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,064,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1390429716;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before &#064_Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before' execution of test method [" + testMethod + "] for test instance ["_						+ testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,064,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1397082962;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'before' execution of test method [" + testMethod + "] for test instance ["_						+ testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1398638841;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'before' execution of test method [" + testMethod + "] for test instance [" +_						testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1398808867;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'before' execution of test method [" + testMethod + "] for test instance [" +_						testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1400531350;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'before' execution of test method [" + testMethod + "] for test instance [" +_						testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1429465455;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'before' execution of test method [" + testMethod + "] for test instance [" +_						testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1429466943;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'before' execution of test method [" + testMethod + "] for test instance [" +_						testInstance + "]", ex)__				throw ex__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,throw,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1455826052;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'before' execution of test method [" + testMethod + "] for test instance [" +_							testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1456613400;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'before' execution of test method [" + testMethod + "] for test instance [" +_							testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1456946365;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'before' execution of test method [" + testMethod + "] for test instance [" +_							testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1461428605;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'before' execution of test method [" + testMethod + "] for test instance [" +_							testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1467730834;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'before' execution of test method [" + testMethod + "] for test instance [" +_							testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1468159440;Hook for pre-processing a test <em>before</em> execution of the supplied_{@link Method test method}, for example for setting up test fixtures,_starting a transaction, etc. Should be called prior to any_framework-specific <em>before methods</em> (e.g., methods annotated with_JUnit's {@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to pre-process the test method_execution. If a listener throws an exception, however, the remaining_registered listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("beforeTestMethod(): instance [" + testInstance + "], method [" + testMethod + "]")__		}_		getTestContext().updateState(testInstance, testMethod, null)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'before' execution of test method [" + testMethod + "] for test instance [" +_							testInstance + "]", ex)__				}_				ReflectionUtils.rethrowException(ex)__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,the,supplied,link,method,test,method,for,example,for,setting,up,test,fixtures,starting,a,transaction,etc,should,be,called,prior,to,any,framework,specific,em,before,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,pre,process,the,test,method,execution,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,before,test,method,instance,test,instance,method,test,method,get,test,context,update,state,test,instance,test,method,null,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,before,execution,of,test,method,test,method,for,test,instance,test,instance,ex,reflection,utils,rethrow,exception,ex
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1468244735;Hook for pre-processing a test <em>before</em> execution of <em>before</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_setting up test fixtures, starting a transaction, etc._<p>This method <strong>must</strong> be called immediately prior to_framework-specific <em>before</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.Before @Before}). For historical_reasons, this method is named {@code beforeTestMethod}. Since the_introduction of {@link #beforeTestExecution}, a more suitable name for_this method might be something like {@code beforeTestSetUp} or_{@code beforeEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestMethod"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,em,before,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,setting,up,test,fixtures,starting,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,prior,to,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,for,historical,reasons,this,method,is,named,code,before,test,method,since,the,introduction,of,link,before,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,before,test,set,up,or,code,before,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,method,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1468434541;Hook for pre-processing a test <em>before</em> execution of <em>before</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_setting up test fixtures, starting a transaction, etc._<p>This method <strong>must</strong> be called immediately prior to_framework-specific <em>before</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.Before @Before}). For historical_reasons, this method is named {@code beforeTestMethod}. Since the_introduction of {@link #beforeTestExecution}, a more suitable name for_this method might be something like {@code beforeTestSetUp} or_{@code beforeEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestMethod"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,em,before,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,setting,up,test,fixtures,starting,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,prior,to,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,for,historical,reasons,this,method,is,named,code,before,test,method,since,the,introduction,of,link,before,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,before,test,set,up,or,code,before,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,method,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1468503798;Hook for pre-processing a test <em>before</em> execution of <em>before</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_setting up test fixtures, starting a transaction, etc._<p>This method <strong>must</strong> be called immediately prior to_framework-specific <em>before</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.Before @Before}). For historical_reasons, this method is named {@code beforeTestMethod}. Since the_introduction of {@link #beforeTestExecution}, a more suitable name for_this method might be something like {@code beforeTestSetUp} or_{@code beforeEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestMethod"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,em,before,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,setting,up,test,fixtures,starting,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,prior,to,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,for,historical,reasons,this,method,is,named,code,before,test,method,since,the,introduction,of,link,before,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,before,test,set,up,or,code,before,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,method,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1472840882;Hook for pre-processing a test <em>before</em> execution of <em>before</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_setting up test fixtures, starting a transaction, etc._<p>This method <strong>must</strong> be called immediately prior to_framework-specific <em>before</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.Before @Before}). For historical_reasons, this method is named {@code beforeTestMethod}. Since the_introduction of {@link #beforeTestExecution}, a more suitable name for_this method might be something like {@code beforeTestSetUp} or_{@code beforeEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestMethod"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,em,before,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,setting,up,test,fixtures,starting,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,prior,to,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,for,historical,reasons,this,method,is,named,code,before,test,method,since,the,introduction,of,link,before,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,before,test,set,up,or,code,before,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,method,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1495868221;Hook for pre-processing a test <em>before</em> execution of <em>before</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_setting up test fixtures, starting a transaction, etc._<p>This method <strong>must</strong> be called immediately prior to_framework-specific <em>before</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.Before @Before}). For historical_reasons, this method is named {@code beforeTestMethod}. Since the_introduction of {@link #beforeTestExecution}, a more suitable name for_this method might be something like {@code beforeTestSetUp} or_{@code beforeEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestMethod"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,em,before,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,setting,up,test,fixtures,starting,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,prior,to,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,for,historical,reasons,this,method,is,named,code,before,test,method,since,the,introduction,of,link,before,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,before,test,set,up,or,code,before,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,method,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1496955179;Hook for pre-processing a test <em>before</em> execution of <em>before</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_setting up test fixtures, starting a transaction, etc._<p>This method <strong>must</strong> be called immediately prior to_framework-specific <em>before</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.Before @Before}). For historical_reasons, this method is named {@code beforeTestMethod}. Since the_introduction of {@link #beforeTestExecution}, a more suitable name for_this method might be something like {@code beforeTestSetUp} or_{@code beforeEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestMethod"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,em,before,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,setting,up,test,fixtures,starting,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,prior,to,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,for,historical,reasons,this,method,is,named,code,before,test,method,since,the,introduction,of,link,before,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,before,test,set,up,or,code,before,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,method,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1497341594;Hook for pre-processing a test <em>before</em> execution of <em>before</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_setting up test fixtures, starting a transaction, etc._<p>This method <strong>must</strong> be called immediately prior to_framework-specific <em>before</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.Before @Before}). For historical_reasons, this method is named {@code beforeTestMethod}. Since the_introduction of {@link #beforeTestExecution}, a more suitable name for_this method might be something like {@code beforeTestSetUp} or_{@code beforeEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestMethod"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,em,before,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,setting,up,test,fixtures,starting,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,prior,to,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,for,historical,reasons,this,method,is,named,code,before,test,method,since,the,introduction,of,link,before,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,before,test,set,up,or,code,before,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,method,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1519295386;Hook for pre-processing a test <em>before</em> execution of <em>before</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_setting up test fixtures, starting a transaction, etc._<p>This method <strong>must</strong> be called immediately prior to_framework-specific <em>before</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.Before @Before}). For historical_reasons, this method is named {@code beforeTestMethod}. Since the_introduction of {@link #beforeTestExecution}, a more suitable name for_this method might be something like {@code beforeTestSetUp} or_{@code beforeEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestMethod"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,em,before,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,setting,up,test,fixtures,starting,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,prior,to,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,for,historical,reasons,this,method,is,named,code,before,test,method,since,the,introduction,of,link,before,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,before,test,set,up,or,code,before,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,method,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1519859718;Hook for pre-processing a test <em>before</em> execution of <em>before</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_setting up test fixtures, starting a transaction, etc._<p>This method <strong>must</strong> be called immediately prior to_framework-specific <em>before</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.Before @Before}). For historical_reasons, this method is named {@code beforeTestMethod}. Since the_introduction of {@link #beforeTestExecution}, a more suitable name for_this method might be something like {@code beforeTestSetUp} or_{@code beforeEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestMethod"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,em,before,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,setting,up,test,fixtures,starting,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,prior,to,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,for,historical,reasons,this,method,is,named,code,before,test,method,since,the,introduction,of,link,before,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,before,test,set,up,or,code,before,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,method,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1519864746;Hook for pre-processing a test <em>before</em> execution of <em>before</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_setting up test fixtures, starting a transaction, etc._<p>This method <strong>must</strong> be called immediately prior to_framework-specific <em>before</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.Before @Before}). For historical_reasons, this method is named {@code beforeTestMethod}. Since the_introduction of {@link #beforeTestExecution}, a more suitable name for_this method might be something like {@code beforeTestSetUp} or_{@code beforeEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestMethod"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,em,before,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,setting,up,test,fixtures,starting,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,prior,to,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,for,historical,reasons,this,method,is,named,code,before,test,method,since,the,introduction,of,link,before,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,before,test,set,up,or,code,before,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,method,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception;1520441064;Hook for pre-processing a test <em>before</em> execution of <em>before</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_setting up test fixtures, starting a transaction, etc._<p>This method <strong>must</strong> be called immediately prior to_framework-specific <em>before</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.Before @Before}). For historical_reasons, this method is named {@code beforeTestMethod}. Since the_introduction of {@link #beforeTestExecution}, a more suitable name for_this method might be something like {@code beforeTestSetUp} or_{@code beforeEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestMethod(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestMethod"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,before,em,execution,of,em,before,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,setting,up,test,fixtures,starting,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,prior,to,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,for,historical,reasons,this,method,is,named,code,before,test,method,since,the,introduction,of,link,before,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,before,test,set,up,or,code,before,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,method,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,method,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,method,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception) 			throws Exception;1519864746;Hook for post-processing a test <em>immediately after</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called before framework-specific_<em>after</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception)_			throws Exception {__		String callbackName = "afterTestExecution"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)__		Throwable afterTestExecutionException = null___		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestExecutionException == null) {_					afterTestExecutionException = ex__				}_				else {_					afterTestExecutionException.addSuppressed(ex)__				}_			}_		}__		if (afterTestExecutionException != null) {_			ReflectionUtils.rethrowException(afterTestExecutionException)__		}_	};hook,for,post,processing,a,test,em,immediately,after,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,before,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,execution,object,test,instance,method,test,method,nullable,throwable,exception,throws,exception,string,callback,name,after,test,execution,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,execution,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,execution,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,execution,exception,null,after,test,execution,exception,ex,else,after,test,execution,exception,add,suppressed,ex,if,after,test,execution,exception,null,reflection,utils,rethrow,exception,after,test,execution,exception
TestContextManager -> public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception) 			throws Exception;1520441064;Hook for post-processing a test <em>immediately after</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called before framework-specific_<em>after</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception)_			throws Exception {__		String callbackName = "afterTestExecution"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)__		Throwable afterTestExecutionException = null___		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestExecutionException == null) {_					afterTestExecutionException = ex__				}_				else {_					afterTestExecutionException.addSuppressed(ex)__				}_			}_		}__		if (afterTestExecutionException != null) {_			ReflectionUtils.rethrowException(afterTestExecutionException)__		}_	};hook,for,post,processing,a,test,em,immediately,after,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,before,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,execution,object,test,instance,method,test,method,nullable,throwable,exception,throws,exception,string,callback,name,after,test,execution,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,execution,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,execution,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,execution,exception,null,after,test,execution,exception,ex,else,after,test,execution,exception,add,suppressed,ex,if,after,test,execution,exception,null,reflection,utils,rethrow,exception,after,test,execution,exception
TestContextManager -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1328020251;Determine the default {@link TestExecutionListener} classes.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses =_				new LinkedHashSet<Class<? extends TestExecutionListener>>()__		for (String className : DEFAULT_TEST_EXECUTION_LISTENER_CLASS_NAMES) {_			try {_				defaultListenerClasses.add(_						(Class<? extends TestExecutionListener>) getClass().getClassLoader().loadClass(className))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.")__				}_			}_		}_		return defaultListenerClasses__	};determine,the,default,link,test,execution,listener,classes;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,for,string,class,name,try,default,listener,classes,add,class,extends,test,execution,listener,get,class,get,class,loader,load,class,class,name,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,return,default,listener,classes
TestContextManager -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1344604587;Determine the default {@link TestExecutionListener} classes.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses =_				new LinkedHashSet<Class<? extends TestExecutionListener>>()__		for (String className : DEFAULT_TEST_EXECUTION_LISTENER_CLASS_NAMES) {_			try {_				defaultListenerClasses.add(_						(Class<? extends TestExecutionListener>) getClass().getClassLoader().loadClass(className))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.")__				}_			}_		}_		return defaultListenerClasses__	};determine,the,default,link,test,execution,listener,classes;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,for,string,class,name,try,default,listener,classes,add,class,extends,test,execution,listener,get,class,get,class,loader,load,class,class,name,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,return,default,listener,classes
TestContextManager -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1349648958;Determine the default {@link TestExecutionListener} classes.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		for (String className : DEFAULT_TEST_EXECUTION_LISTENER_CLASS_NAMES) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) getClass().getClassLoader().loadClass(_					className))__			} catch (Throwable t) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", t)__				}_			}_		}_		return defaultListenerClasses__	};determine,the,default,link,test,execution,listener,classes;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,for,string,class,name,try,default,listener,classes,add,class,extends,test,execution,listener,get,class,get,class,loader,load,class,class,name,catch,throwable,t,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,t,return,default,listener,classes
TestContextManager -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1350692960;Determine the default {@link TestExecutionListener} classes.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		for (String className : DEFAULT_TEST_EXECUTION_LISTENER_CLASS_NAMES) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) getClass().getClassLoader().loadClass(_					className))__			} catch (Throwable t) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", t)__				}_			}_		}_		return defaultListenerClasses__	};determine,the,default,link,test,execution,listener,classes;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,for,string,class,name,try,default,listener,classes,add,class,extends,test,execution,listener,get,class,get,class,loader,load,class,class,name,catch,throwable,t,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,t,return,default,listener,classes
TestContextManager -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1356735495;Determine the default {@link TestExecutionListener} classes.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		for (String className : DEFAULT_TEST_EXECUTION_LISTENER_CLASS_NAMES) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) getClass().getClassLoader().loadClass(_					className))__			} catch (Throwable t) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", t)__				}_			}_		}_		return defaultListenerClasses__	};determine,the,default,link,test,execution,listener,classes;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,for,string,class,name,try,default,listener,classes,add,class,extends,test,execution,listener,get,class,get,class,loader,load,class,class,name,catch,throwable,t,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,t,return,default,listener,classes
TestContextManager -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1362408075;Determine the default {@link TestExecutionListener} classes.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		for (String className : DEFAULT_TEST_EXECUTION_LISTENER_CLASS_NAMES) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) getClass().getClassLoader().loadClass(_					className))__			} catch (Throwable t) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", t)__				}_			}_		}_		return defaultListenerClasses__	};determine,the,default,link,test,execution,listener,classes;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,for,string,class,name,try,default,listener,classes,add,class,extends,test,execution,listener,get,class,get,class,loader,load,class,class,name,catch,throwable,t,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,t,return,default,listener,classes
TestContextManager -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1363208506;Determine the default {@link TestExecutionListener} classes.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		for (String className : DEFAULT_TEST_EXECUTION_LISTENER_CLASS_NAMES) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) getClass().getClassLoader().loadClass(_					className))__			} catch (Throwable t) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", t)__				}_			}_		}_		return defaultListenerClasses__	};determine,the,default,link,test,execution,listener,classes;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,for,string,class,name,try,default,listener,classes,add,class,extends,test,execution,listener,get,class,get,class,loader,load,class,class,name,catch,throwable,t,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,t,return,default,listener,classes
TestContextManager -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1382815212;Determine the default {@link TestExecutionListener} classes.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		for (String className : DEFAULT_TEST_EXECUTION_LISTENER_CLASS_NAMES) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) getClass().getClassLoader().loadClass(_					className))__			}_			catch (Throwable t) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", t)__				}_			}_		}_		return defaultListenerClasses__	};determine,the,default,link,test,execution,listener,classes;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,for,string,class,name,try,default,listener,classes,add,class,extends,test,execution,listener,get,class,get,class,loader,load,class,class,name,catch,throwable,t,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,t,return,default,listener,classes
TestContextManager -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1382920864;Determine the default {@link TestExecutionListener} classes.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		for (String className : DEFAULT_TEST_EXECUTION_LISTENER_CLASS_NAMES) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) getClass().getClassLoader().loadClass(_					className))__			}_			catch (Throwable t) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", t)__				}_			}_		}_		return defaultListenerClasses__	};determine,the,default,link,test,execution,listener,classes;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,for,string,class,name,try,default,listener,classes,add,class,extends,test,execution,listener,get,class,get,class,loader,load,class,class,name,catch,throwable,t,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,t,return,default,listener,classes
TestContextManager -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1385499540;Determine the default {@link TestExecutionListener} classes.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		for (String className : DEFAULT_TEST_EXECUTION_LISTENER_CLASS_NAMES) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) getClass().getClassLoader().loadClass(_					className))__			}_			catch (Throwable t) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", t)__				}_			}_		}_		return defaultListenerClasses__	};determine,the,default,link,test,execution,listener,classes;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,for,string,class,name,try,default,listener,classes,add,class,extends,test,execution,listener,get,class,get,class,loader,load,class,class,name,catch,throwable,t,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,t,return,default,listener,classes
TestContextManager -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1390429716;Determine the default {@link TestExecutionListener} classes.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		for (String className : DEFAULT_TEST_EXECUTION_LISTENER_CLASS_NAMES) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) getClass().getClassLoader().loadClass(_					className))__			}_			catch (Throwable t) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", t)__				}_			}_		}_		return defaultListenerClasses__	};determine,the,default,link,test,execution,listener,classes;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,for,string,class,name,try,default,listener,classes,add,class,extends,test,execution,listener,get,class,get,class,loader,load,class,class,name,catch,throwable,t,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,t,return,default,listener,classes
TestContextManager -> private static TestContext copyTestContext(TestContext testContext);1472840882;Attempt to create a copy of the supplied {@code TestContext} using its_<em>copy constructor</em>.;private static TestContext copyTestContext(TestContext testContext) {_		Constructor<? extends TestContext> constructor = ClassUtils.getConstructorIfAvailable(testContext.getClass(),_			testContext.getClass())___		if (constructor != null) {_			try {_				ReflectionUtils.makeAccessible(constructor)__				return constructor.newInstance(testContext)__			}_			catch (Exception ex) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Failed to invoke copy constructor for [%s]_ " +_							"concurrent test execution is therefore likely not supported.",_							testContext), ex)__				}_			}_		}__		_		return testContext__	};attempt,to,create,a,copy,of,the,supplied,code,test,context,using,its,em,copy,constructor,em;private,static,test,context,copy,test,context,test,context,test,context,constructor,extends,test,context,constructor,class,utils,get,constructor,if,available,test,context,get,class,test,context,get,class,if,constructor,null,try,reflection,utils,make,accessible,constructor,return,constructor,new,instance,test,context,catch,exception,ex,if,logger,is,info,enabled,logger,info,string,format,failed,to,invoke,copy,constructor,for,s,concurrent,test,execution,is,therefore,likely,not,supported,test,context,ex,return,test,context
TestContextManager -> private static TestContext copyTestContext(TestContext testContext);1495868221;Attempt to create a copy of the supplied {@code TestContext} using its_<em>copy constructor</em>.;private static TestContext copyTestContext(TestContext testContext) {_		Constructor<? extends TestContext> constructor = ClassUtils.getConstructorIfAvailable(testContext.getClass(),_			testContext.getClass())___		if (constructor != null) {_			try {_				ReflectionUtils.makeAccessible(constructor)__				return constructor.newInstance(testContext)__			}_			catch (Exception ex) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Failed to invoke copy constructor for [%s]_ " +_							"concurrent test execution is therefore likely not supported.",_							testContext), ex)__				}_			}_		}__		_		return testContext__	};attempt,to,create,a,copy,of,the,supplied,code,test,context,using,its,em,copy,constructor,em;private,static,test,context,copy,test,context,test,context,test,context,constructor,extends,test,context,constructor,class,utils,get,constructor,if,available,test,context,get,class,test,context,get,class,if,constructor,null,try,reflection,utils,make,accessible,constructor,return,constructor,new,instance,test,context,catch,exception,ex,if,logger,is,info,enabled,logger,info,string,format,failed,to,invoke,copy,constructor,for,s,concurrent,test,execution,is,therefore,likely,not,supported,test,context,ex,return,test,context
TestContextManager -> private static TestContext copyTestContext(TestContext testContext);1496955179;Attempt to create a copy of the supplied {@code TestContext} using its_<em>copy constructor</em>.;private static TestContext copyTestContext(TestContext testContext) {_		Constructor<? extends TestContext> constructor = ClassUtils.getConstructorIfAvailable(testContext.getClass(),_			testContext.getClass())___		if (constructor != null) {_			try {_				ReflectionUtils.makeAccessible(constructor)__				return constructor.newInstance(testContext)__			}_			catch (Exception ex) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Failed to invoke copy constructor for [%s]_ " +_							"concurrent test execution is therefore likely not supported.",_							testContext), ex)__				}_			}_		}__		_		return testContext__	};attempt,to,create,a,copy,of,the,supplied,code,test,context,using,its,em,copy,constructor,em;private,static,test,context,copy,test,context,test,context,test,context,constructor,extends,test,context,constructor,class,utils,get,constructor,if,available,test,context,get,class,test,context,get,class,if,constructor,null,try,reflection,utils,make,accessible,constructor,return,constructor,new,instance,test,context,catch,exception,ex,if,logger,is,info,enabled,logger,info,string,format,failed,to,invoke,copy,constructor,for,s,concurrent,test,execution,is,therefore,likely,not,supported,test,context,ex,return,test,context
TestContextManager -> private static TestContext copyTestContext(TestContext testContext);1497341594;Attempt to create a copy of the supplied {@code TestContext} using its_<em>copy constructor</em>.;private static TestContext copyTestContext(TestContext testContext) {_		Constructor<? extends TestContext> constructor = ClassUtils.getConstructorIfAvailable(testContext.getClass(),_			testContext.getClass())___		if (constructor != null) {_			try {_				ReflectionUtils.makeAccessible(constructor)__				return constructor.newInstance(testContext)__			}_			catch (Exception ex) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Failed to invoke copy constructor for [%s]_ " +_							"concurrent test execution is therefore likely not supported.",_							testContext), ex)__				}_			}_		}__		_		return testContext__	};attempt,to,create,a,copy,of,the,supplied,code,test,context,using,its,em,copy,constructor,em;private,static,test,context,copy,test,context,test,context,test,context,constructor,extends,test,context,constructor,class,utils,get,constructor,if,available,test,context,get,class,test,context,get,class,if,constructor,null,try,reflection,utils,make,accessible,constructor,return,constructor,new,instance,test,context,catch,exception,ex,if,logger,is,info,enabled,logger,info,string,format,failed,to,invoke,copy,constructor,for,s,concurrent,test,execution,is,therefore,likely,not,supported,test,context,ex,return,test,context
TestContextManager -> private static TestContext copyTestContext(TestContext testContext);1519295386;Attempt to create a copy of the supplied {@code TestContext} using its_<em>copy constructor</em>.;private static TestContext copyTestContext(TestContext testContext) {_		Constructor<? extends TestContext> constructor = ClassUtils.getConstructorIfAvailable(testContext.getClass(),_			testContext.getClass())___		if (constructor != null) {_			try {_				ReflectionUtils.makeAccessible(constructor)__				return constructor.newInstance(testContext)__			}_			catch (Exception ex) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Failed to invoke copy constructor for [%s]_ " +_							"concurrent test execution is therefore likely not supported.",_							testContext), ex)__				}_			}_		}__		_		return testContext__	};attempt,to,create,a,copy,of,the,supplied,code,test,context,using,its,em,copy,constructor,em;private,static,test,context,copy,test,context,test,context,test,context,constructor,extends,test,context,constructor,class,utils,get,constructor,if,available,test,context,get,class,test,context,get,class,if,constructor,null,try,reflection,utils,make,accessible,constructor,return,constructor,new,instance,test,context,catch,exception,ex,if,logger,is,info,enabled,logger,info,string,format,failed,to,invoke,copy,constructor,for,s,concurrent,test,execution,is,therefore,likely,not,supported,test,context,ex,return,test,context
TestContextManager -> private static TestContext copyTestContext(TestContext testContext);1519859718;Attempt to create a copy of the supplied {@code TestContext} using its_<em>copy constructor</em>.;private static TestContext copyTestContext(TestContext testContext) {_		Constructor<? extends TestContext> constructor = ClassUtils.getConstructorIfAvailable(testContext.getClass(),_			testContext.getClass())___		if (constructor != null) {_			try {_				ReflectionUtils.makeAccessible(constructor)__				return constructor.newInstance(testContext)__			}_			catch (Exception ex) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Failed to invoke copy constructor for [%s]_ " +_							"concurrent test execution is therefore likely not supported.",_							testContext), ex)__				}_			}_		}__		_		return testContext__	};attempt,to,create,a,copy,of,the,supplied,code,test,context,using,its,em,copy,constructor,em;private,static,test,context,copy,test,context,test,context,test,context,constructor,extends,test,context,constructor,class,utils,get,constructor,if,available,test,context,get,class,test,context,get,class,if,constructor,null,try,reflection,utils,make,accessible,constructor,return,constructor,new,instance,test,context,catch,exception,ex,if,logger,is,info,enabled,logger,info,string,format,failed,to,invoke,copy,constructor,for,s,concurrent,test,execution,is,therefore,likely,not,supported,test,context,ex,return,test,context
TestContextManager -> private static TestContext copyTestContext(TestContext testContext);1519864746;Attempt to create a copy of the supplied {@code TestContext} using its_<em>copy constructor</em>.;private static TestContext copyTestContext(TestContext testContext) {_		Constructor<? extends TestContext> constructor =_				ClassUtils.getConstructorIfAvailable(testContext.getClass(), testContext.getClass())___		if (constructor != null) {_			try {_				ReflectionUtils.makeAccessible(constructor)__				return constructor.newInstance(testContext)__			}_			catch (Exception ex) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Failed to invoke copy constructor for [%s]_ " +_							"concurrent test execution is therefore likely not supported.",_							testContext), ex)__				}_			}_		}__		_		return testContext__	};attempt,to,create,a,copy,of,the,supplied,code,test,context,using,its,em,copy,constructor,em;private,static,test,context,copy,test,context,test,context,test,context,constructor,extends,test,context,constructor,class,utils,get,constructor,if,available,test,context,get,class,test,context,get,class,if,constructor,null,try,reflection,utils,make,accessible,constructor,return,constructor,new,instance,test,context,catch,exception,ex,if,logger,is,info,enabled,logger,info,string,format,failed,to,invoke,copy,constructor,for,s,concurrent,test,execution,is,therefore,likely,not,supported,test,context,ex,return,test,context
TestContextManager -> private static TestContext copyTestContext(TestContext testContext);1520441064;Attempt to create a copy of the supplied {@code TestContext} using its_<em>copy constructor</em>.;private static TestContext copyTestContext(TestContext testContext) {_		Constructor<? extends TestContext> constructor =_				ClassUtils.getConstructorIfAvailable(testContext.getClass(), testContext.getClass())___		if (constructor != null) {_			try {_				ReflectionUtils.makeAccessible(constructor)__				return constructor.newInstance(testContext)__			}_			catch (Exception ex) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Failed to invoke copy constructor for [%s]_ " +_							"concurrent test execution is therefore likely not supported.",_							testContext), ex)__				}_			}_		}__		_		return testContext__	};attempt,to,create,a,copy,of,the,supplied,code,test,context,using,its,em,copy,constructor,em;private,static,test,context,copy,test,context,test,context,test,context,constructor,extends,test,context,constructor,class,utils,get,constructor,if,available,test,context,get,class,test,context,get,class,if,constructor,null,try,reflection,utils,make,accessible,constructor,return,constructor,new,instance,test,context,catch,exception,ex,if,logger,is,info,enabled,logger,info,string,format,failed,to,invoke,copy,constructor,for,s,concurrent,test,execution,is,therefore,likely,not,supported,test,context,ex,return,test,context
TestContextManager -> public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception;1495868221;Hook for post-processing a test <em>immediately after</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called before framework-specific_<em>after</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception {_		String callbackName = "afterTestExecution"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestExecutionException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestExecutionException == null) {_					afterTestExecutionException = ex__				}_				else {_					afterTestExecutionException.addSuppressed(ex)__				}_			}_		}_		if (afterTestExecutionException != null) {_			ReflectionUtils.rethrowException(afterTestExecutionException)__		}_	};hook,for,post,processing,a,test,em,immediately,after,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,before,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,execution,object,test,instance,method,test,method,nullable,throwable,exception,throws,exception,string,callback,name,after,test,execution,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,execution,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,execution,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,execution,exception,null,after,test,execution,exception,ex,else,after,test,execution,exception,add,suppressed,ex,if,after,test,execution,exception,null,reflection,utils,rethrow,exception,after,test,execution,exception
TestContextManager -> public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception;1496955179;Hook for post-processing a test <em>immediately after</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called before framework-specific_<em>after</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception {_		String callbackName = "afterTestExecution"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestExecutionException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestExecutionException == null) {_					afterTestExecutionException = ex__				}_				else {_					afterTestExecutionException.addSuppressed(ex)__				}_			}_		}_		if (afterTestExecutionException != null) {_			ReflectionUtils.rethrowException(afterTestExecutionException)__		}_	};hook,for,post,processing,a,test,em,immediately,after,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,before,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,execution,object,test,instance,method,test,method,nullable,throwable,exception,throws,exception,string,callback,name,after,test,execution,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,execution,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,execution,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,execution,exception,null,after,test,execution,exception,ex,else,after,test,execution,exception,add,suppressed,ex,if,after,test,execution,exception,null,reflection,utils,rethrow,exception,after,test,execution,exception
TestContextManager -> public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception;1497341594;Hook for post-processing a test <em>immediately after</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called before framework-specific_<em>after</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception {_		String callbackName = "afterTestExecution"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestExecutionException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestExecutionException == null) {_					afterTestExecutionException = ex__				}_				else {_					afterTestExecutionException.addSuppressed(ex)__				}_			}_		}_		if (afterTestExecutionException != null) {_			ReflectionUtils.rethrowException(afterTestExecutionException)__		}_	};hook,for,post,processing,a,test,em,immediately,after,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,before,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,execution,object,test,instance,method,test,method,nullable,throwable,exception,throws,exception,string,callback,name,after,test,execution,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,execution,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,execution,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,execution,exception,null,after,test,execution,exception,ex,else,after,test,execution,exception,add,suppressed,ex,if,after,test,execution,exception,null,reflection,utils,rethrow,exception,after,test,execution,exception
TestContextManager -> public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception;1519295386;Hook for post-processing a test <em>immediately after</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called before framework-specific_<em>after</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception {_		String callbackName = "afterTestExecution"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestExecutionException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestExecutionException == null) {_					afterTestExecutionException = ex__				}_				else {_					afterTestExecutionException.addSuppressed(ex)__				}_			}_		}_		if (afterTestExecutionException != null) {_			ReflectionUtils.rethrowException(afterTestExecutionException)__		}_	};hook,for,post,processing,a,test,em,immediately,after,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,before,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,execution,object,test,instance,method,test,method,nullable,throwable,exception,throws,exception,string,callback,name,after,test,execution,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,execution,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,execution,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,execution,exception,null,after,test,execution,exception,ex,else,after,test,execution,exception,add,suppressed,ex,if,after,test,execution,exception,null,reflection,utils,rethrow,exception,after,test,execution,exception
TestContextManager -> public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception;1519859718;Hook for post-processing a test <em>immediately after</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called before framework-specific_<em>after</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception {_		String callbackName = "afterTestExecution"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestExecutionException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestExecutionException == null) {_					afterTestExecutionException = ex__				}_				else {_					afterTestExecutionException.addSuppressed(ex)__				}_			}_		}_		if (afterTestExecutionException != null) {_			ReflectionUtils.rethrowException(afterTestExecutionException)__		}_	};hook,for,post,processing,a,test,em,immediately,after,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,before,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,execution,object,test,instance,method,test,method,nullable,throwable,exception,throws,exception,string,callback,name,after,test,execution,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,execution,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,execution,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,execution,exception,null,after,test,execution,exception,ex,else,after,test,execution,exception,add,suppressed,ex,if,after,test,execution,exception,null,reflection,utils,rethrow,exception,after,test,execution,exception
TestContextManager -> private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz);1328020251;Retrieve an array of newly instantiated {@link TestExecutionListener TestExecutionListeners}_for the specified {@link Class class}. If {@link TestExecutionListeners &#064_TestExecutionListeners}_is not <em>present</em> on the supplied class, the default listeners will be returned._<p>Note that the {@link TestExecutionListeners#inheritListeners() inheritListeners} flag of_{@link TestExecutionListeners &#064_TestExecutionListeners} will be taken into consideration._Specifically, if the <code>inheritListeners</code> flag is set to <code>true</code>, listeners_defined in the annotated class will be appended to the listeners defined in superclasses._@param clazz the test class for which the listeners should be retrieved_@return an array of TestExecutionListeners for the specified class;private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(annotationType, clazz)__		boolean defaultListeners = false___		_		if (declaringClass == null) {_			if (logger.isInfoEnabled()) {_				logger.info("@TestExecutionListeners is not present for class [" + clazz + "]: using defaults.")__			}_			classesList.addAll(getDefaultTestExecutionListenerClasses())__			defaultListeners = true__		}_		else {_			_			while (declaringClass != null) {_				TestExecutionListeners testExecutionListeners = declaringClass.getAnnotation(annotationType)__				if (logger.isTraceEnabled()) {_					logger.trace("Retrieved @TestExecutionListeners [" + testExecutionListeners_							+ "] for declaring class [" + declaringClass + "].")__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = testExecutionListeners.value()__				Class<? extends TestExecutionListener>[] listenerClasses = testExecutionListeners.listeners()__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					String msg = String.format(_						"Test class [%s] has been configured with @TestExecutionListeners' 'value' [%s] " +_								"and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass, ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses))__					logger.error(msg)__					throw new IllegalStateException(msg)__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				if (listenerClasses != null) {_					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))__				}_				declaringClass = (testExecutionListeners.inheritListeners() ?_						AnnotationUtils.findAnnotationDeclaringClass(annotationType, declaringClass.getSuperclass()) : null)__			}_		}__		List<TestExecutionListener> listeners = new ArrayList<TestExecutionListener>(classesList.size())__		for (Class<? extends TestExecutionListener> listenerClass : classesList) {_			try {_				listeners.add(BeanUtils.instantiateClass(listenerClass))__			}_			catch (NoClassDefFoundError err) {_				if (defaultListeners) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not instantiate default TestExecutionListener class ["_								+ listenerClass.getName()_								+ "]. Specify custom listener classes or make the default listener classes available.")__					}_				}_				else {_					throw err__				}_			}_		}_		return listeners.toArray(new TestExecutionListener[listeners.size()])__	};retrieve,an,array,of,newly,instantiated,link,test,execution,listener,test,execution,listeners,for,the,specified,link,class,class,if,link,test,execution,listeners,064,test,execution,listeners,is,not,em,present,em,on,the,supplied,class,the,default,listeners,will,be,returned,p,note,that,the,link,test,execution,listeners,inherit,listeners,inherit,listeners,flag,of,link,test,execution,listeners,064,test,execution,listeners,will,be,taken,into,consideration,specifically,if,the,code,inherit,listeners,code,flag,is,set,to,code,true,code,listeners,defined,in,the,annotated,class,will,be,appended,to,the,listeners,defined,in,superclasses,param,clazz,the,test,class,for,which,the,listeners,should,be,retrieved,return,an,array,of,test,execution,listeners,for,the,specified,class;private,test,execution,listener,retrieve,test,execution,listeners,class,clazz,assert,not,null,clazz,class,must,not,be,null,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,class,declaring,class,annotation,utils,find,annotation,declaring,class,annotation,type,clazz,boolean,default,listeners,false,if,declaring,class,null,if,logger,is,info,enabled,logger,info,test,execution,listeners,is,not,present,for,class,clazz,using,defaults,classes,list,add,all,get,default,test,execution,listener,classes,default,listeners,true,else,while,declaring,class,null,test,execution,listeners,test,execution,listeners,declaring,class,get,annotation,annotation,type,if,logger,is,trace,enabled,logger,trace,retrieved,test,execution,listeners,test,execution,listeners,for,declaring,class,declaring,class,class,extends,test,execution,listener,value,listener,classes,test,execution,listeners,value,class,extends,test,execution,listener,listener,classes,test,execution,listeners,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,string,msg,string,format,test,class,s,has,been,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,if,listener,classes,null,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,declaring,class,test,execution,listeners,inherit,listeners,annotation,utils,find,annotation,declaring,class,annotation,type,declaring,class,get,superclass,null,list,test,execution,listener,listeners,new,array,list,test,execution,listener,classes,list,size,for,class,extends,test,execution,listener,listener,class,classes,list,try,listeners,add,bean,utils,instantiate,class,listener,class,catch,no,class,def,found,error,err,if,default,listeners,if,logger,is,debug,enabled,logger,debug,could,not,instantiate,default,test,execution,listener,class,listener,class,get,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,else,throw,err,return,listeners,to,array,new,test,execution,listener,listeners,size
TestContextManager -> private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz);1344604587;Retrieve an array of newly instantiated {@link TestExecutionListener TestExecutionListeners}_for the specified {@link Class class}. If {@link TestExecutionListeners &#064_TestExecutionListeners}_is not <em>present</em> on the supplied class, the default listeners will be returned._<p>Note that the {@link TestExecutionListeners#inheritListeners() inheritListeners} flag of_{@link TestExecutionListeners &#064_TestExecutionListeners} will be taken into consideration._Specifically, if the <code>inheritListeners</code> flag is set to <code>true</code>, listeners_defined in the annotated class will be appended to the listeners defined in superclasses._@param clazz the test class for which the listeners should be retrieved_@return an array of TestExecutionListeners for the specified class;private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(annotationType, clazz)__		boolean defaultListeners = false___		_		if (declaringClass == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("@TestExecutionListeners is not present for class [" + clazz + "]: using defaults.")__			}_			classesList.addAll(getDefaultTestExecutionListenerClasses())__			defaultListeners = true__		}_		else {_			_			while (declaringClass != null) {_				TestExecutionListeners testExecutionListeners = declaringClass.getAnnotation(annotationType)__				if (logger.isTraceEnabled()) {_					logger.trace("Retrieved @TestExecutionListeners [" + testExecutionListeners_							+ "] for declaring class [" + declaringClass + "].")__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = testExecutionListeners.value()__				Class<? extends TestExecutionListener>[] listenerClasses = testExecutionListeners.listeners()__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					String msg = String.format(_						"Test class [%s] has been configured with @TestExecutionListeners' 'value' [%s] " +_								"and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass, ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses))__					logger.error(msg)__					throw new IllegalStateException(msg)__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				if (listenerClasses != null) {_					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))__				}_				declaringClass = (testExecutionListeners.inheritListeners() ?_						AnnotationUtils.findAnnotationDeclaringClass(annotationType, declaringClass.getSuperclass()) : null)__			}_		}__		List<TestExecutionListener> listeners = new ArrayList<TestExecutionListener>(classesList.size())__		for (Class<? extends TestExecutionListener> listenerClass : classesList) {_			try {_				listeners.add(BeanUtils.instantiateClass(listenerClass))__			}_			catch (NoClassDefFoundError err) {_				if (defaultListeners) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not instantiate default TestExecutionListener class ["_								+ listenerClass.getName()_								+ "]. Specify custom listener classes or make the default listener classes available.")__					}_				}_				else {_					throw err__				}_			}_		}_		return listeners.toArray(new TestExecutionListener[listeners.size()])__	};retrieve,an,array,of,newly,instantiated,link,test,execution,listener,test,execution,listeners,for,the,specified,link,class,class,if,link,test,execution,listeners,064,test,execution,listeners,is,not,em,present,em,on,the,supplied,class,the,default,listeners,will,be,returned,p,note,that,the,link,test,execution,listeners,inherit,listeners,inherit,listeners,flag,of,link,test,execution,listeners,064,test,execution,listeners,will,be,taken,into,consideration,specifically,if,the,code,inherit,listeners,code,flag,is,set,to,code,true,code,listeners,defined,in,the,annotated,class,will,be,appended,to,the,listeners,defined,in,superclasses,param,clazz,the,test,class,for,which,the,listeners,should,be,retrieved,return,an,array,of,test,execution,listeners,for,the,specified,class;private,test,execution,listener,retrieve,test,execution,listeners,class,clazz,assert,not,null,clazz,class,must,not,be,null,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,class,declaring,class,annotation,utils,find,annotation,declaring,class,annotation,type,clazz,boolean,default,listeners,false,if,declaring,class,null,if,logger,is,debug,enabled,logger,debug,test,execution,listeners,is,not,present,for,class,clazz,using,defaults,classes,list,add,all,get,default,test,execution,listener,classes,default,listeners,true,else,while,declaring,class,null,test,execution,listeners,test,execution,listeners,declaring,class,get,annotation,annotation,type,if,logger,is,trace,enabled,logger,trace,retrieved,test,execution,listeners,test,execution,listeners,for,declaring,class,declaring,class,class,extends,test,execution,listener,value,listener,classes,test,execution,listeners,value,class,extends,test,execution,listener,listener,classes,test,execution,listeners,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,string,msg,string,format,test,class,s,has,been,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,if,listener,classes,null,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,declaring,class,test,execution,listeners,inherit,listeners,annotation,utils,find,annotation,declaring,class,annotation,type,declaring,class,get,superclass,null,list,test,execution,listener,listeners,new,array,list,test,execution,listener,classes,list,size,for,class,extends,test,execution,listener,listener,class,classes,list,try,listeners,add,bean,utils,instantiate,class,listener,class,catch,no,class,def,found,error,err,if,default,listeners,if,logger,is,debug,enabled,logger,debug,could,not,instantiate,default,test,execution,listener,class,listener,class,get,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,else,throw,err,return,listeners,to,array,new,test,execution,listener,listeners,size
TestContextManager -> private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz);1349648958;Retrieve an array of newly instantiated {@link TestExecutionListener TestExecutionListeners}_for the specified {@link Class class}. If {@link TestExecutionListeners &#064_TestExecutionListeners}_is not <em>present</em> on the supplied class, the default listeners will be returned._<p>Note that the {@link TestExecutionListeners#inheritListeners() inheritListeners} flag of_{@link TestExecutionListeners &#064_TestExecutionListeners} will be taken into consideration._Specifically, if the <code>inheritListeners</code> flag is set to <code>true</code>, listeners_defined in the annotated class will be appended to the listeners defined in superclasses._@param clazz the test class for which the listeners should be retrieved_@return an array of TestExecutionListeners for the specified class;private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(annotationType, clazz)__		boolean defaultListeners = false___		_		if (declaringClass == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("@TestExecutionListeners is not present for class [" + clazz + "]: using defaults.")__			}_			classesList.addAll(getDefaultTestExecutionListenerClasses())__			defaultListeners = true__		} else {_			_			while (declaringClass != null) {_				TestExecutionListeners testExecutionListeners = declaringClass.getAnnotation(annotationType)__				if (logger.isTraceEnabled()) {_					logger.trace("Retrieved @TestExecutionListeners [" + testExecutionListeners_							+ "] for declaring class [" + declaringClass + "].")__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = testExecutionListeners.value()__				Class<? extends TestExecutionListener>[] listenerClasses = testExecutionListeners.listeners()__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					String msg = String.format(_						"Test class [%s] has been configured with @TestExecutionListeners' 'value' [%s] "_								+ "and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass, ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses))__					logger.error(msg)__					throw new IllegalStateException(msg)__				} else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				if (listenerClasses != null) {_					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))__				}_				declaringClass = (testExecutionListeners.inheritListeners() ? AnnotationUtils.findAnnotationDeclaringClass(_					annotationType, declaringClass.getSuperclass()) : null)__			}_		}__		List<TestExecutionListener> listeners = new ArrayList<TestExecutionListener>(classesList.size())__		for (Class<? extends TestExecutionListener> listenerClass : classesList) {_			try {_				listeners.add(BeanUtils.instantiateClass(listenerClass))__			} catch (NoClassDefFoundError err) {_				if (defaultListeners) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not instantiate default TestExecutionListener class ["_								+ listenerClass.getName()_								+ "]. Specify custom listener classes or make the default listener classes available.")__					}_				} else {_					throw err__				}_			}_		}_		return listeners.toArray(new TestExecutionListener[listeners.size()])__	};retrieve,an,array,of,newly,instantiated,link,test,execution,listener,test,execution,listeners,for,the,specified,link,class,class,if,link,test,execution,listeners,064,test,execution,listeners,is,not,em,present,em,on,the,supplied,class,the,default,listeners,will,be,returned,p,note,that,the,link,test,execution,listeners,inherit,listeners,inherit,listeners,flag,of,link,test,execution,listeners,064,test,execution,listeners,will,be,taken,into,consideration,specifically,if,the,code,inherit,listeners,code,flag,is,set,to,code,true,code,listeners,defined,in,the,annotated,class,will,be,appended,to,the,listeners,defined,in,superclasses,param,clazz,the,test,class,for,which,the,listeners,should,be,retrieved,return,an,array,of,test,execution,listeners,for,the,specified,class;private,test,execution,listener,retrieve,test,execution,listeners,class,clazz,assert,not,null,clazz,class,must,not,be,null,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,class,declaring,class,annotation,utils,find,annotation,declaring,class,annotation,type,clazz,boolean,default,listeners,false,if,declaring,class,null,if,logger,is,debug,enabled,logger,debug,test,execution,listeners,is,not,present,for,class,clazz,using,defaults,classes,list,add,all,get,default,test,execution,listener,classes,default,listeners,true,else,while,declaring,class,null,test,execution,listeners,test,execution,listeners,declaring,class,get,annotation,annotation,type,if,logger,is,trace,enabled,logger,trace,retrieved,test,execution,listeners,test,execution,listeners,for,declaring,class,declaring,class,class,extends,test,execution,listener,value,listener,classes,test,execution,listeners,value,class,extends,test,execution,listener,listener,classes,test,execution,listeners,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,string,msg,string,format,test,class,s,has,been,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,if,listener,classes,null,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,declaring,class,test,execution,listeners,inherit,listeners,annotation,utils,find,annotation,declaring,class,annotation,type,declaring,class,get,superclass,null,list,test,execution,listener,listeners,new,array,list,test,execution,listener,classes,list,size,for,class,extends,test,execution,listener,listener,class,classes,list,try,listeners,add,bean,utils,instantiate,class,listener,class,catch,no,class,def,found,error,err,if,default,listeners,if,logger,is,debug,enabled,logger,debug,could,not,instantiate,default,test,execution,listener,class,listener,class,get,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,else,throw,err,return,listeners,to,array,new,test,execution,listener,listeners,size
TestContextManager -> private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz);1350692960;Retrieve an array of newly instantiated {@link TestExecutionListener TestExecutionListeners}_for the specified {@link Class class}. If {@link TestExecutionListeners &#064_TestExecutionListeners}_is not <em>present</em> on the supplied class, the default listeners will be returned._<p>Note that the {@link TestExecutionListeners#inheritListeners() inheritListeners} flag of_{@link TestExecutionListeners &#064_TestExecutionListeners} will be taken into consideration._Specifically, if the <code>inheritListeners</code> flag is set to <code>true</code>, listeners_defined in the annotated class will be appended to the listeners defined in superclasses._@param clazz the test class for which the listeners should be retrieved_@return an array of TestExecutionListeners for the specified class;private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(annotationType, clazz)__		boolean defaultListeners = false___		_		if (declaringClass == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("@TestExecutionListeners is not present for class [" + clazz + "]: using defaults.")__			}_			classesList.addAll(getDefaultTestExecutionListenerClasses())__			defaultListeners = true__		} else {_			_			while (declaringClass != null) {_				TestExecutionListeners testExecutionListeners = declaringClass.getAnnotation(annotationType)__				if (logger.isTraceEnabled()) {_					logger.trace("Retrieved @TestExecutionListeners [" + testExecutionListeners_							+ "] for declaring class [" + declaringClass + "].")__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = testExecutionListeners.value()__				Class<? extends TestExecutionListener>[] listenerClasses = testExecutionListeners.listeners()__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					String msg = String.format(_						"Test class [%s] has been configured with @TestExecutionListeners' 'value' [%s] "_								+ "and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass, ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses))__					logger.error(msg)__					throw new IllegalStateException(msg)__				} else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				if (listenerClasses != null) {_					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))__				}_				declaringClass = (testExecutionListeners.inheritListeners() ? AnnotationUtils.findAnnotationDeclaringClass(_					annotationType, declaringClass.getSuperclass()) : null)__			}_		}__		List<TestExecutionListener> listeners = new ArrayList<TestExecutionListener>(classesList.size())__		for (Class<? extends TestExecutionListener> listenerClass : classesList) {_			try {_				listeners.add(BeanUtils.instantiateClass(listenerClass))__			} catch (NoClassDefFoundError err) {_				if (defaultListeners) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not instantiate default TestExecutionListener class ["_								+ listenerClass.getName()_								+ "]. Specify custom listener classes or make the default listener classes available.")__					}_				} else {_					throw err__				}_			}_		}_		return listeners.toArray(new TestExecutionListener[listeners.size()])__	};retrieve,an,array,of,newly,instantiated,link,test,execution,listener,test,execution,listeners,for,the,specified,link,class,class,if,link,test,execution,listeners,064,test,execution,listeners,is,not,em,present,em,on,the,supplied,class,the,default,listeners,will,be,returned,p,note,that,the,link,test,execution,listeners,inherit,listeners,inherit,listeners,flag,of,link,test,execution,listeners,064,test,execution,listeners,will,be,taken,into,consideration,specifically,if,the,code,inherit,listeners,code,flag,is,set,to,code,true,code,listeners,defined,in,the,annotated,class,will,be,appended,to,the,listeners,defined,in,superclasses,param,clazz,the,test,class,for,which,the,listeners,should,be,retrieved,return,an,array,of,test,execution,listeners,for,the,specified,class;private,test,execution,listener,retrieve,test,execution,listeners,class,clazz,assert,not,null,clazz,class,must,not,be,null,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,class,declaring,class,annotation,utils,find,annotation,declaring,class,annotation,type,clazz,boolean,default,listeners,false,if,declaring,class,null,if,logger,is,debug,enabled,logger,debug,test,execution,listeners,is,not,present,for,class,clazz,using,defaults,classes,list,add,all,get,default,test,execution,listener,classes,default,listeners,true,else,while,declaring,class,null,test,execution,listeners,test,execution,listeners,declaring,class,get,annotation,annotation,type,if,logger,is,trace,enabled,logger,trace,retrieved,test,execution,listeners,test,execution,listeners,for,declaring,class,declaring,class,class,extends,test,execution,listener,value,listener,classes,test,execution,listeners,value,class,extends,test,execution,listener,listener,classes,test,execution,listeners,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,string,msg,string,format,test,class,s,has,been,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,if,listener,classes,null,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,declaring,class,test,execution,listeners,inherit,listeners,annotation,utils,find,annotation,declaring,class,annotation,type,declaring,class,get,superclass,null,list,test,execution,listener,listeners,new,array,list,test,execution,listener,classes,list,size,for,class,extends,test,execution,listener,listener,class,classes,list,try,listeners,add,bean,utils,instantiate,class,listener,class,catch,no,class,def,found,error,err,if,default,listeners,if,logger,is,debug,enabled,logger,debug,could,not,instantiate,default,test,execution,listener,class,listener,class,get,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,else,throw,err,return,listeners,to,array,new,test,execution,listener,listeners,size
TestContextManager -> private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz);1356735495;Retrieve an array of newly instantiated {@link TestExecutionListener TestExecutionListeners}_for the specified {@link Class class}. If {@link TestExecutionListeners &#064_TestExecutionListeners}_is not <em>present</em> on the supplied class, the default listeners will be returned._<p>Note that the {@link TestExecutionListeners#inheritListeners() inheritListeners} flag of_{@link TestExecutionListeners &#064_TestExecutionListeners} will be taken into consideration._Specifically, if the {@code inheritListeners} flag is set to {@code true}, listeners_defined in the annotated class will be appended to the listeners defined in superclasses._@param clazz the test class for which the listeners should be retrieved_@return an array of TestExecutionListeners for the specified class;private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(annotationType, clazz)__		boolean defaultListeners = false___		_		if (declaringClass == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("@TestExecutionListeners is not present for class [" + clazz + "]: using defaults.")__			}_			classesList.addAll(getDefaultTestExecutionListenerClasses())__			defaultListeners = true__		} else {_			_			while (declaringClass != null) {_				TestExecutionListeners testExecutionListeners = declaringClass.getAnnotation(annotationType)__				if (logger.isTraceEnabled()) {_					logger.trace("Retrieved @TestExecutionListeners [" + testExecutionListeners_							+ "] for declaring class [" + declaringClass + "].")__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = testExecutionListeners.value()__				Class<? extends TestExecutionListener>[] listenerClasses = testExecutionListeners.listeners()__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					String msg = String.format(_						"Test class [%s] has been configured with @TestExecutionListeners' 'value' [%s] "_								+ "and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass, ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses))__					logger.error(msg)__					throw new IllegalStateException(msg)__				} else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				if (listenerClasses != null) {_					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))__				}_				declaringClass = (testExecutionListeners.inheritListeners() ? AnnotationUtils.findAnnotationDeclaringClass(_					annotationType, declaringClass.getSuperclass()) : null)__			}_		}__		List<TestExecutionListener> listeners = new ArrayList<TestExecutionListener>(classesList.size())__		for (Class<? extends TestExecutionListener> listenerClass : classesList) {_			try {_				listeners.add(BeanUtils.instantiateClass(listenerClass))__			} catch (NoClassDefFoundError err) {_				if (defaultListeners) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not instantiate default TestExecutionListener class ["_								+ listenerClass.getName()_								+ "]. Specify custom listener classes or make the default listener classes available.")__					}_				} else {_					throw err__				}_			}_		}_		return listeners.toArray(new TestExecutionListener[listeners.size()])__	};retrieve,an,array,of,newly,instantiated,link,test,execution,listener,test,execution,listeners,for,the,specified,link,class,class,if,link,test,execution,listeners,064,test,execution,listeners,is,not,em,present,em,on,the,supplied,class,the,default,listeners,will,be,returned,p,note,that,the,link,test,execution,listeners,inherit,listeners,inherit,listeners,flag,of,link,test,execution,listeners,064,test,execution,listeners,will,be,taken,into,consideration,specifically,if,the,code,inherit,listeners,flag,is,set,to,code,true,listeners,defined,in,the,annotated,class,will,be,appended,to,the,listeners,defined,in,superclasses,param,clazz,the,test,class,for,which,the,listeners,should,be,retrieved,return,an,array,of,test,execution,listeners,for,the,specified,class;private,test,execution,listener,retrieve,test,execution,listeners,class,clazz,assert,not,null,clazz,class,must,not,be,null,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,class,declaring,class,annotation,utils,find,annotation,declaring,class,annotation,type,clazz,boolean,default,listeners,false,if,declaring,class,null,if,logger,is,debug,enabled,logger,debug,test,execution,listeners,is,not,present,for,class,clazz,using,defaults,classes,list,add,all,get,default,test,execution,listener,classes,default,listeners,true,else,while,declaring,class,null,test,execution,listeners,test,execution,listeners,declaring,class,get,annotation,annotation,type,if,logger,is,trace,enabled,logger,trace,retrieved,test,execution,listeners,test,execution,listeners,for,declaring,class,declaring,class,class,extends,test,execution,listener,value,listener,classes,test,execution,listeners,value,class,extends,test,execution,listener,listener,classes,test,execution,listeners,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,string,msg,string,format,test,class,s,has,been,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,if,listener,classes,null,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,declaring,class,test,execution,listeners,inherit,listeners,annotation,utils,find,annotation,declaring,class,annotation,type,declaring,class,get,superclass,null,list,test,execution,listener,listeners,new,array,list,test,execution,listener,classes,list,size,for,class,extends,test,execution,listener,listener,class,classes,list,try,listeners,add,bean,utils,instantiate,class,listener,class,catch,no,class,def,found,error,err,if,default,listeners,if,logger,is,debug,enabled,logger,debug,could,not,instantiate,default,test,execution,listener,class,listener,class,get,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,else,throw,err,return,listeners,to,array,new,test,execution,listener,listeners,size
TestContextManager -> private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz);1362408075;Retrieve an array of newly instantiated {@link TestExecutionListener TestExecutionListeners}_for the specified {@link Class class}. If {@link TestExecutionListeners &#064_TestExecutionListeners}_is not <em>present</em> on the supplied class, the default listeners will be returned._<p>Note that the {@link TestExecutionListeners#inheritListeners() inheritListeners} flag of_{@link TestExecutionListeners &#064_TestExecutionListeners} will be taken into consideration._Specifically, if the {@code inheritListeners} flag is set to {@code true}, listeners_defined in the annotated class will be appended to the listeners defined in superclasses._@param clazz the test class for which the listeners should be retrieved_@return an array of TestExecutionListeners for the specified class;private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(annotationType, clazz)__		boolean defaultListeners = false___		_		if (declaringClass == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("@TestExecutionListeners is not present for class [" + clazz + "]: using defaults.")__			}_			classesList.addAll(getDefaultTestExecutionListenerClasses())__			defaultListeners = true__		} else {_			_			while (declaringClass != null) {_				TestExecutionListeners testExecutionListeners = declaringClass.getAnnotation(annotationType)__				if (logger.isTraceEnabled()) {_					logger.trace("Retrieved @TestExecutionListeners [" + testExecutionListeners_							+ "] for declaring class [" + declaringClass + "].")__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = testExecutionListeners.value()__				Class<? extends TestExecutionListener>[] listenerClasses = testExecutionListeners.listeners()__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					String msg = String.format(_						"Test class [%s] has been configured with @TestExecutionListeners' 'value' [%s] "_								+ "and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass, ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses))__					logger.error(msg)__					throw new IllegalStateException(msg)__				} else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				if (listenerClasses != null) {_					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))__				}_				declaringClass = (testExecutionListeners.inheritListeners() ? AnnotationUtils.findAnnotationDeclaringClass(_					annotationType, declaringClass.getSuperclass()) : null)__			}_		}__		List<TestExecutionListener> listeners = new ArrayList<TestExecutionListener>(classesList.size())__		for (Class<? extends TestExecutionListener> listenerClass : classesList) {_			try {_				listeners.add(BeanUtils.instantiateClass(listenerClass))__			} catch (NoClassDefFoundError err) {_				if (defaultListeners) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not instantiate default TestExecutionListener class ["_								+ listenerClass.getName()_								+ "]. Specify custom listener classes or make the default listener classes available.")__					}_				} else {_					throw err__				}_			}_		}_		return listeners.toArray(new TestExecutionListener[listeners.size()])__	};retrieve,an,array,of,newly,instantiated,link,test,execution,listener,test,execution,listeners,for,the,specified,link,class,class,if,link,test,execution,listeners,064,test,execution,listeners,is,not,em,present,em,on,the,supplied,class,the,default,listeners,will,be,returned,p,note,that,the,link,test,execution,listeners,inherit,listeners,inherit,listeners,flag,of,link,test,execution,listeners,064,test,execution,listeners,will,be,taken,into,consideration,specifically,if,the,code,inherit,listeners,flag,is,set,to,code,true,listeners,defined,in,the,annotated,class,will,be,appended,to,the,listeners,defined,in,superclasses,param,clazz,the,test,class,for,which,the,listeners,should,be,retrieved,return,an,array,of,test,execution,listeners,for,the,specified,class;private,test,execution,listener,retrieve,test,execution,listeners,class,clazz,assert,not,null,clazz,class,must,not,be,null,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,class,declaring,class,annotation,utils,find,annotation,declaring,class,annotation,type,clazz,boolean,default,listeners,false,if,declaring,class,null,if,logger,is,debug,enabled,logger,debug,test,execution,listeners,is,not,present,for,class,clazz,using,defaults,classes,list,add,all,get,default,test,execution,listener,classes,default,listeners,true,else,while,declaring,class,null,test,execution,listeners,test,execution,listeners,declaring,class,get,annotation,annotation,type,if,logger,is,trace,enabled,logger,trace,retrieved,test,execution,listeners,test,execution,listeners,for,declaring,class,declaring,class,class,extends,test,execution,listener,value,listener,classes,test,execution,listeners,value,class,extends,test,execution,listener,listener,classes,test,execution,listeners,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,string,msg,string,format,test,class,s,has,been,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,if,listener,classes,null,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,declaring,class,test,execution,listeners,inherit,listeners,annotation,utils,find,annotation,declaring,class,annotation,type,declaring,class,get,superclass,null,list,test,execution,listener,listeners,new,array,list,test,execution,listener,classes,list,size,for,class,extends,test,execution,listener,listener,class,classes,list,try,listeners,add,bean,utils,instantiate,class,listener,class,catch,no,class,def,found,error,err,if,default,listeners,if,logger,is,debug,enabled,logger,debug,could,not,instantiate,default,test,execution,listener,class,listener,class,get,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,else,throw,err,return,listeners,to,array,new,test,execution,listener,listeners,size
TestContextManager -> private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz);1363208506;Retrieve an array of newly instantiated {@link TestExecutionListener TestExecutionListeners}_for the specified {@link Class class}. If {@link TestExecutionListeners &#064_TestExecutionListeners}_is not <em>present</em> on the supplied class, the default listeners will be returned._<p>Note that the {@link TestExecutionListeners#inheritListeners() inheritListeners} flag of_{@link TestExecutionListeners &#064_TestExecutionListeners} will be taken into consideration._Specifically, if the {@code inheritListeners} flag is set to {@code true}, listeners_defined in the annotated class will be appended to the listeners defined in superclasses._@param clazz the test class for which the listeners should be retrieved_@return an array of TestExecutionListeners for the specified class;private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(annotationType, clazz)__		boolean defaultListeners = false___		_		if (declaringClass == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("@TestExecutionListeners is not present for class [" + clazz + "]: using defaults.")__			}_			classesList.addAll(getDefaultTestExecutionListenerClasses())__			defaultListeners = true__		} else {_			_			while (declaringClass != null) {_				TestExecutionListeners testExecutionListeners = declaringClass.getAnnotation(annotationType)__				if (logger.isTraceEnabled()) {_					logger.trace("Retrieved @TestExecutionListeners [" + testExecutionListeners_							+ "] for declaring class [" + declaringClass + "].")__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = testExecutionListeners.value()__				Class<? extends TestExecutionListener>[] listenerClasses = testExecutionListeners.listeners()__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					String msg = String.format(_						"Test class [%s] has been configured with @TestExecutionListeners' 'value' [%s] "_								+ "and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass, ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses))__					logger.error(msg)__					throw new IllegalStateException(msg)__				} else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				if (listenerClasses != null) {_					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))__				}_				declaringClass = (testExecutionListeners.inheritListeners() ? AnnotationUtils.findAnnotationDeclaringClass(_					annotationType, declaringClass.getSuperclass()) : null)__			}_		}__		List<TestExecutionListener> listeners = new ArrayList<TestExecutionListener>(classesList.size())__		for (Class<? extends TestExecutionListener> listenerClass : classesList) {_			try {_				listeners.add(BeanUtils.instantiateClass(listenerClass))__			} catch (NoClassDefFoundError err) {_				if (defaultListeners) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not instantiate default TestExecutionListener class ["_								+ listenerClass.getName()_								+ "]. Specify custom listener classes or make the default listener classes available.")__					}_				} else {_					throw err__				}_			}_		}_		return listeners.toArray(new TestExecutionListener[listeners.size()])__	};retrieve,an,array,of,newly,instantiated,link,test,execution,listener,test,execution,listeners,for,the,specified,link,class,class,if,link,test,execution,listeners,064,test,execution,listeners,is,not,em,present,em,on,the,supplied,class,the,default,listeners,will,be,returned,p,note,that,the,link,test,execution,listeners,inherit,listeners,inherit,listeners,flag,of,link,test,execution,listeners,064,test,execution,listeners,will,be,taken,into,consideration,specifically,if,the,code,inherit,listeners,flag,is,set,to,code,true,listeners,defined,in,the,annotated,class,will,be,appended,to,the,listeners,defined,in,superclasses,param,clazz,the,test,class,for,which,the,listeners,should,be,retrieved,return,an,array,of,test,execution,listeners,for,the,specified,class;private,test,execution,listener,retrieve,test,execution,listeners,class,clazz,assert,not,null,clazz,class,must,not,be,null,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,class,declaring,class,annotation,utils,find,annotation,declaring,class,annotation,type,clazz,boolean,default,listeners,false,if,declaring,class,null,if,logger,is,debug,enabled,logger,debug,test,execution,listeners,is,not,present,for,class,clazz,using,defaults,classes,list,add,all,get,default,test,execution,listener,classes,default,listeners,true,else,while,declaring,class,null,test,execution,listeners,test,execution,listeners,declaring,class,get,annotation,annotation,type,if,logger,is,trace,enabled,logger,trace,retrieved,test,execution,listeners,test,execution,listeners,for,declaring,class,declaring,class,class,extends,test,execution,listener,value,listener,classes,test,execution,listeners,value,class,extends,test,execution,listener,listener,classes,test,execution,listeners,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,string,msg,string,format,test,class,s,has,been,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,if,listener,classes,null,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,declaring,class,test,execution,listeners,inherit,listeners,annotation,utils,find,annotation,declaring,class,annotation,type,declaring,class,get,superclass,null,list,test,execution,listener,listeners,new,array,list,test,execution,listener,classes,list,size,for,class,extends,test,execution,listener,listener,class,classes,list,try,listeners,add,bean,utils,instantiate,class,listener,class,catch,no,class,def,found,error,err,if,default,listeners,if,logger,is,debug,enabled,logger,debug,could,not,instantiate,default,test,execution,listener,class,listener,class,get,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,else,throw,err,return,listeners,to,array,new,test,execution,listener,listeners,size
TestContextManager -> private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz);1382815212;Retrieve an array of newly instantiated {@link TestExecutionListener TestExecutionListeners}_for the specified {@link Class class}. If {@link TestExecutionListeners &#064_TestExecutionListeners}_is not <em>present</em> on the supplied class, the default listeners will be returned._<p>Note that the {@link TestExecutionListeners#inheritListeners() inheritListeners} flag of_{@link TestExecutionListeners &#064_TestExecutionListeners} will be taken into consideration._Specifically, if the {@code inheritListeners} flag is set to {@code true}, listeners_defined in the annotated class will be appended to the listeners defined in superclasses._@param clazz the test class for which the listeners should be retrieved_@return an array of TestExecutionListeners for the specified class;private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(annotationType, clazz)__		boolean defaultListeners = false___		_		if (declaringClass == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("@TestExecutionListeners is not present for class [" + clazz + "]: using defaults.")__			}_			classesList.addAll(getDefaultTestExecutionListenerClasses())__			defaultListeners = true__		}_		else {_			_			while (declaringClass != null) {_				TestExecutionListeners testExecutionListeners = declaringClass.getAnnotation(annotationType)__				if (logger.isTraceEnabled()) {_					logger.trace("Retrieved @TestExecutionListeners [" + testExecutionListeners_							+ "] for declaring class [" + declaringClass + "].")__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = testExecutionListeners.value()__				Class<? extends TestExecutionListener>[] listenerClasses = testExecutionListeners.listeners()__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					String msg = String.format(_						"Test class [%s] has been configured with @TestExecutionListeners' 'value' [%s] "_								+ "and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass, ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses))__					logger.error(msg)__					throw new IllegalStateException(msg)__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				if (listenerClasses != null) {_					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))__				}_				declaringClass = (testExecutionListeners.inheritListeners() ? AnnotationUtils.findAnnotationDeclaringClass(_					annotationType, declaringClass.getSuperclass()) : null)__			}_		}__		List<TestExecutionListener> listeners = new ArrayList<TestExecutionListener>(classesList.size())__		for (Class<? extends TestExecutionListener> listenerClass : classesList) {_			try {_				listeners.add(BeanUtils.instantiateClass(listenerClass))__			}_			catch (NoClassDefFoundError err) {_				if (defaultListeners) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not instantiate default TestExecutionListener class ["_								+ listenerClass.getName()_								+ "]. Specify custom listener classes or make the default listener classes available.")__					}_				}_				else {_					throw err__				}_			}_		}_		return listeners.toArray(new TestExecutionListener[listeners.size()])__	};retrieve,an,array,of,newly,instantiated,link,test,execution,listener,test,execution,listeners,for,the,specified,link,class,class,if,link,test,execution,listeners,064,test,execution,listeners,is,not,em,present,em,on,the,supplied,class,the,default,listeners,will,be,returned,p,note,that,the,link,test,execution,listeners,inherit,listeners,inherit,listeners,flag,of,link,test,execution,listeners,064,test,execution,listeners,will,be,taken,into,consideration,specifically,if,the,code,inherit,listeners,flag,is,set,to,code,true,listeners,defined,in,the,annotated,class,will,be,appended,to,the,listeners,defined,in,superclasses,param,clazz,the,test,class,for,which,the,listeners,should,be,retrieved,return,an,array,of,test,execution,listeners,for,the,specified,class;private,test,execution,listener,retrieve,test,execution,listeners,class,clazz,assert,not,null,clazz,class,must,not,be,null,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,class,declaring,class,annotation,utils,find,annotation,declaring,class,annotation,type,clazz,boolean,default,listeners,false,if,declaring,class,null,if,logger,is,debug,enabled,logger,debug,test,execution,listeners,is,not,present,for,class,clazz,using,defaults,classes,list,add,all,get,default,test,execution,listener,classes,default,listeners,true,else,while,declaring,class,null,test,execution,listeners,test,execution,listeners,declaring,class,get,annotation,annotation,type,if,logger,is,trace,enabled,logger,trace,retrieved,test,execution,listeners,test,execution,listeners,for,declaring,class,declaring,class,class,extends,test,execution,listener,value,listener,classes,test,execution,listeners,value,class,extends,test,execution,listener,listener,classes,test,execution,listeners,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,string,msg,string,format,test,class,s,has,been,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,if,listener,classes,null,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,declaring,class,test,execution,listeners,inherit,listeners,annotation,utils,find,annotation,declaring,class,annotation,type,declaring,class,get,superclass,null,list,test,execution,listener,listeners,new,array,list,test,execution,listener,classes,list,size,for,class,extends,test,execution,listener,listener,class,classes,list,try,listeners,add,bean,utils,instantiate,class,listener,class,catch,no,class,def,found,error,err,if,default,listeners,if,logger,is,debug,enabled,logger,debug,could,not,instantiate,default,test,execution,listener,class,listener,class,get,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,else,throw,err,return,listeners,to,array,new,test,execution,listener,listeners,size
TestContextManager -> private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz);1382920864;Retrieve an array of newly instantiated {@link TestExecutionListener TestExecutionListeners}_for the specified {@link Class class}. If {@link TestExecutionListeners &#064_TestExecutionListeners}_is not <em>present</em> on the supplied class, the default listeners will be returned._<p>Note that the {@link TestExecutionListeners#inheritListeners() inheritListeners} flag of_{@link TestExecutionListeners &#064_TestExecutionListeners} will be taken into consideration._Specifically, if the {@code inheritListeners} flag is set to {@code true}, listeners_defined in the annotated class will be appended to the listeners defined in superclasses._@param clazz the test class for which the listeners should be retrieved_@return an array of TestExecutionListeners for the specified class;private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()___		AnnotationDescriptor<TestExecutionListeners> descriptor = findAnnotationDescriptor(clazz, annotationType)___		boolean defaultListeners = false___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("@TestExecutionListeners is not present for class [" + clazz + "]: using defaults.")__			}_			classesList.addAll(getDefaultTestExecutionListenerClasses())__			defaultListeners = true__		}_		else {_			_			while (descriptor != null) {_				Class<?> rootDeclaringClass = descriptor.getDeclaringClass()__				Class<?> declaringClass = (descriptor.getStereotype() != null) ? descriptor.getStereotypeType()_						: rootDeclaringClass___				TestExecutionListeners testExecutionListeners = declaringClass.getAnnotation(annotationType)__				if (logger.isTraceEnabled()) {_					logger.trace("Retrieved @TestExecutionListeners [" + testExecutionListeners_							+ "] for declaring class [" + declaringClass + "].")__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = testExecutionListeners.value()__				Class<? extends TestExecutionListener>[] listenerClasses = testExecutionListeners.listeners()__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					String msg = String.format(_						"Test class [%s] has been configured with @TestExecutionListeners' 'value' [%s] "_								+ "and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass, ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses))__					logger.error(msg)__					throw new IllegalStateException(msg)__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				if (listenerClasses != null) {_					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))__				}__				descriptor = (testExecutionListeners.inheritListeners() ? findAnnotationDescriptor(_					rootDeclaringClass.getSuperclass(), annotationType) : null)__			}_		}__		List<TestExecutionListener> listeners = new ArrayList<TestExecutionListener>(classesList.size())__		for (Class<? extends TestExecutionListener> listenerClass : classesList) {_			try {_				listeners.add(BeanUtils.instantiateClass(listenerClass))__			}_			catch (NoClassDefFoundError err) {_				if (defaultListeners) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not instantiate default TestExecutionListener class ["_								+ listenerClass.getName()_								+ "]. Specify custom listener classes or make the default listener classes available.")__					}_				}_				else {_					throw err__				}_			}_		}_		return listeners.toArray(new TestExecutionListener[listeners.size()])__	};retrieve,an,array,of,newly,instantiated,link,test,execution,listener,test,execution,listeners,for,the,specified,link,class,class,if,link,test,execution,listeners,064,test,execution,listeners,is,not,em,present,em,on,the,supplied,class,the,default,listeners,will,be,returned,p,note,that,the,link,test,execution,listeners,inherit,listeners,inherit,listeners,flag,of,link,test,execution,listeners,064,test,execution,listeners,will,be,taken,into,consideration,specifically,if,the,code,inherit,listeners,flag,is,set,to,code,true,listeners,defined,in,the,annotated,class,will,be,appended,to,the,listeners,defined,in,superclasses,param,clazz,the,test,class,for,which,the,listeners,should,be,retrieved,return,an,array,of,test,execution,listeners,for,the,specified,class;private,test,execution,listener,retrieve,test,execution,listeners,class,clazz,assert,not,null,clazz,class,must,not,be,null,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,annotation,descriptor,test,execution,listeners,descriptor,find,annotation,descriptor,clazz,annotation,type,boolean,default,listeners,false,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,test,execution,listeners,is,not,present,for,class,clazz,using,defaults,classes,list,add,all,get,default,test,execution,listener,classes,default,listeners,true,else,while,descriptor,null,class,root,declaring,class,descriptor,get,declaring,class,class,declaring,class,descriptor,get,stereotype,null,descriptor,get,stereotype,type,root,declaring,class,test,execution,listeners,test,execution,listeners,declaring,class,get,annotation,annotation,type,if,logger,is,trace,enabled,logger,trace,retrieved,test,execution,listeners,test,execution,listeners,for,declaring,class,declaring,class,class,extends,test,execution,listener,value,listener,classes,test,execution,listeners,value,class,extends,test,execution,listener,listener,classes,test,execution,listeners,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,string,msg,string,format,test,class,s,has,been,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,if,listener,classes,null,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,descriptor,test,execution,listeners,inherit,listeners,find,annotation,descriptor,root,declaring,class,get,superclass,annotation,type,null,list,test,execution,listener,listeners,new,array,list,test,execution,listener,classes,list,size,for,class,extends,test,execution,listener,listener,class,classes,list,try,listeners,add,bean,utils,instantiate,class,listener,class,catch,no,class,def,found,error,err,if,default,listeners,if,logger,is,debug,enabled,logger,debug,could,not,instantiate,default,test,execution,listener,class,listener,class,get,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,else,throw,err,return,listeners,to,array,new,test,execution,listener,listeners,size
TestContextManager -> @SuppressWarnings("unchecked") 	private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz);1385499540;Retrieve an array of newly instantiated {@link TestExecutionListener TestExecutionListeners}_for the specified {@link Class class}. If {@link TestExecutionListeners &#064_TestExecutionListeners}_is not <em>present</em> on the supplied class, the default listeners will be returned._<p>Note that the {@link TestExecutionListeners#inheritListeners() inheritListeners} flag of_{@link TestExecutionListeners &#064_TestExecutionListeners} will be taken into consideration._Specifically, if the {@code inheritListeners} flag is set to {@code true}, listeners_defined in the annotated class will be appended to the listeners defined in superclasses._@param clazz the test class for which the listeners should be retrieved_@return an array of TestExecutionListeners for the specified class;@SuppressWarnings("unchecked")_	private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()___		AnnotationDescriptor<TestExecutionListeners> descriptor = findAnnotationDescriptor(clazz, annotationType)__		boolean defaultListeners = false___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("@TestExecutionListeners is not present for class [" + clazz + "]: using defaults.")__			}_			classesList.addAll(getDefaultTestExecutionListenerClasses())__			defaultListeners = true__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()___				AnnotationAttributes annAttrs = descriptor.getAnnotationAttributes()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format(_						"Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].", annAttrs,_						declaringClass))__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("value")__				Class<? extends TestExecutionListener>[] listenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("listeners")__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					String msg = String.format(_						"Class [%s] has been configured with @TestExecutionListeners' 'value' [%s] "_								+ "and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass, ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses))__					logger.error(msg)__					throw new IllegalStateException(msg)__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				if (listenerClasses != null) {_					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))__				}__				descriptor = (annAttrs.getBoolean("inheritListeners") ? findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType) : null)__			}_		}__		List<TestExecutionListener> listeners = new ArrayList<TestExecutionListener>(classesList.size())__		for (Class<? extends TestExecutionListener> listenerClass : classesList) {_			try {_				listeners.add(BeanUtils.instantiateClass(listenerClass))__			}_			catch (NoClassDefFoundError err) {_				if (defaultListeners) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not instantiate default TestExecutionListener class ["_								+ listenerClass.getName()_								+ "]. Specify custom listener classes or make the default listener classes available.")__					}_				}_				else {_					throw err__				}_			}_		}_		return listeners.toArray(new TestExecutionListener[listeners.size()])__	};retrieve,an,array,of,newly,instantiated,link,test,execution,listener,test,execution,listeners,for,the,specified,link,class,class,if,link,test,execution,listeners,064,test,execution,listeners,is,not,em,present,em,on,the,supplied,class,the,default,listeners,will,be,returned,p,note,that,the,link,test,execution,listeners,inherit,listeners,inherit,listeners,flag,of,link,test,execution,listeners,064,test,execution,listeners,will,be,taken,into,consideration,specifically,if,the,code,inherit,listeners,flag,is,set,to,code,true,listeners,defined,in,the,annotated,class,will,be,appended,to,the,listeners,defined,in,superclasses,param,clazz,the,test,class,for,which,the,listeners,should,be,retrieved,return,an,array,of,test,execution,listeners,for,the,specified,class;suppress,warnings,unchecked,private,test,execution,listener,retrieve,test,execution,listeners,class,clazz,assert,not,null,clazz,class,must,not,be,null,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,annotation,descriptor,test,execution,listeners,descriptor,find,annotation,descriptor,clazz,annotation,type,boolean,default,listeners,false,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,test,execution,listeners,is,not,present,for,class,clazz,using,defaults,classes,list,add,all,get,default,test,execution,listener,classes,default,listeners,true,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,annotation,attributes,ann,attrs,descriptor,get,annotation,attributes,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,attributes,s,for,declaring,class,s,ann,attrs,declaring,class,class,extends,test,execution,listener,value,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,value,class,extends,test,execution,listener,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,string,msg,string,format,class,s,has,been,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,if,listener,classes,null,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,descriptor,ann,attrs,get,boolean,inherit,listeners,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,null,list,test,execution,listener,listeners,new,array,list,test,execution,listener,classes,list,size,for,class,extends,test,execution,listener,listener,class,classes,list,try,listeners,add,bean,utils,instantiate,class,listener,class,catch,no,class,def,found,error,err,if,default,listeners,if,logger,is,debug,enabled,logger,debug,could,not,instantiate,default,test,execution,listener,class,listener,class,get,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,else,throw,err,return,listeners,to,array,new,test,execution,listener,listeners,size
TestContextManager -> @SuppressWarnings("unchecked") 	private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz);1390429716;Retrieve an array of newly instantiated {@link TestExecutionListener TestExecutionListeners}_for the specified {@link Class class}. If {@link TestExecutionListeners &#064_TestExecutionListeners}_is not <em>present</em> on the supplied class, the default listeners will be returned._<p>Note that the {@link TestExecutionListeners#inheritListeners() inheritListeners} flag of_{@link TestExecutionListeners &#064_TestExecutionListeners} will be taken into consideration._Specifically, if the {@code inheritListeners} flag is set to {@code true}, listeners_defined in the annotated class will be appended to the listeners defined in superclasses._@param clazz the test class for which the listeners should be retrieved_@return an array of TestExecutionListeners for the specified class;@SuppressWarnings("unchecked")_	private TestExecutionListener[] retrieveTestExecutionListeners(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()___		AnnotationDescriptor<TestExecutionListeners> descriptor = findAnnotationDescriptor(clazz, annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("@TestExecutionListeners is not present for class [" + clazz + "]: using defaults.")__			}_			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()___				AnnotationAttributes annAttrs = descriptor.getAnnotationAttributes()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format(_						"Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].", annAttrs,_						declaringClass))__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("value")__				Class<? extends TestExecutionListener>[] listenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("listeners")__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					String msg = String.format(_						"Class [%s] has been configured with @TestExecutionListeners' 'value' [%s] "_								+ "and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass, ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses))__					logger.error(msg)__					throw new IllegalStateException(msg)__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				if (listenerClasses != null) {_					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))__				}__				descriptor = (annAttrs.getBoolean("inheritListeners") ? findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType) : null)__			}_		}__		List<TestExecutionListener> listeners = new ArrayList<TestExecutionListener>(classesList.size())__		for (Class<? extends TestExecutionListener> listenerClass : classesList) {_			try {_				listeners.add(BeanUtils.instantiateClass(listenerClass))__			}_			catch (NoClassDefFoundError err) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Could not instantiate TestExecutionListener class [%s]. "_							+ "Specify custom listener classes or make the default listener classes "_							+ "(and their dependencies) available.", listenerClass.getName()))__				}_			}_		}_		return listeners.toArray(new TestExecutionListener[listeners.size()])__	};retrieve,an,array,of,newly,instantiated,link,test,execution,listener,test,execution,listeners,for,the,specified,link,class,class,if,link,test,execution,listeners,064,test,execution,listeners,is,not,em,present,em,on,the,supplied,class,the,default,listeners,will,be,returned,p,note,that,the,link,test,execution,listeners,inherit,listeners,inherit,listeners,flag,of,link,test,execution,listeners,064,test,execution,listeners,will,be,taken,into,consideration,specifically,if,the,code,inherit,listeners,flag,is,set,to,code,true,listeners,defined,in,the,annotated,class,will,be,appended,to,the,listeners,defined,in,superclasses,param,clazz,the,test,class,for,which,the,listeners,should,be,retrieved,return,an,array,of,test,execution,listeners,for,the,specified,class;suppress,warnings,unchecked,private,test,execution,listener,retrieve,test,execution,listeners,class,clazz,assert,not,null,clazz,class,must,not,be,null,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,annotation,descriptor,test,execution,listeners,descriptor,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,test,execution,listeners,is,not,present,for,class,clazz,using,defaults,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,annotation,attributes,ann,attrs,descriptor,get,annotation,attributes,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,attributes,s,for,declaring,class,s,ann,attrs,declaring,class,class,extends,test,execution,listener,value,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,value,class,extends,test,execution,listener,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,string,msg,string,format,class,s,has,been,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,if,listener,classes,null,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,descriptor,ann,attrs,get,boolean,inherit,listeners,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,null,list,test,execution,listener,listeners,new,array,list,test,execution,listener,classes,list,size,for,class,extends,test,execution,listener,listener,class,classes,list,try,listeners,add,bean,utils,instantiate,class,listener,class,catch,no,class,def,found,error,err,if,logger,is,info,enabled,logger,info,string,format,could,not,instantiate,test,execution,listener,class,s,specify,custom,listener,classes,or,make,the,default,listener,classes,and,their,dependencies,available,listener,class,get,name,return,listeners,to,array,new,test,execution,listener,listeners,size
TestContextManager -> protected final TestContext getTestContext();1328020251;Returns the {@link TestContext} managed by this_<code>TestContextManager</code>.;protected final TestContext getTestContext() {_		return this.testContext__	};returns,the,link,test,context,managed,by,this,code,test,context,manager,code;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1344604587;Returns the {@link TestContext} managed by this_<code>TestContextManager</code>.;protected final TestContext getTestContext() {_		return this.testContext__	};returns,the,link,test,context,managed,by,this,code,test,context,manager,code;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1349648958;Returns the {@link TestContext} managed by this_<code>TestContextManager</code>.;protected final TestContext getTestContext() {_		return this.testContext__	};returns,the,link,test,context,managed,by,this,code,test,context,manager,code;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1350692960;Returns the {@link TestContext} managed by this_<code>TestContextManager</code>.;protected final TestContext getTestContext() {_		return this.testContext__	};returns,the,link,test,context,managed,by,this,code,test,context,manager,code;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1356735495;Returns the {@link TestContext} managed by this_{@code TestContextManager}.;protected final TestContext getTestContext() {_		return this.testContext__	};returns,the,link,test,context,managed,by,this,code,test,context,manager;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1362408075;Returns the {@link TestContext} managed by this_{@code TestContextManager}.;protected final TestContext getTestContext() {_		return this.testContext__	};returns,the,link,test,context,managed,by,this,code,test,context,manager;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1363208506;Returns the {@link TestContext} managed by this_{@code TestContextManager}.;protected final TestContext getTestContext() {_		return this.testContext__	};returns,the,link,test,context,managed,by,this,code,test,context,manager;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1382815212;Returns the {@link TestContext} managed by this_{@code TestContextManager}.;protected final TestContext getTestContext() {_		return this.testContext__	};returns,the,link,test,context,managed,by,this,code,test,context,manager;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1382920864;Returns the {@link TestContext} managed by this_{@code TestContextManager}.;protected final TestContext getTestContext() {_		return this.testContext__	};returns,the,link,test,context,managed,by,this,code,test,context,manager;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1385499540;Returns the {@link TestContext} managed by this_{@code TestContextManager}.;protected final TestContext getTestContext() {_		return this.testContext__	};returns,the,link,test,context,managed,by,this,code,test,context,manager;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1390429716;Returns the {@link TestContext} managed by this_{@code TestContextManager}.;protected final TestContext getTestContext() {_		return this.testContext__	};returns,the,link,test,context,managed,by,this,code,test,context,manager;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1397082962;Get the {@link TestContext} managed by this {@code TestContextManager}.;protected final TestContext getTestContext() {_		return this.testContext__	};get,the,link,test,context,managed,by,this,code,test,context,manager;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1398638841;Get the {@link TestContext} managed by this {@code TestContextManager}.;protected final TestContext getTestContext() {_		return this.testContext__	};get,the,link,test,context,managed,by,this,code,test,context,manager;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1398808867;Get the {@link TestContext} managed by this {@code TestContextManager}.;protected final TestContext getTestContext() {_		return this.testContext__	};get,the,link,test,context,managed,by,this,code,test,context,manager;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1400531350;Get the {@link TestContext} managed by this {@code TestContextManager}.;protected final TestContext getTestContext() {_		return this.testContext__	};get,the,link,test,context,managed,by,this,code,test,context,manager;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1429465455;Get the {@link TestContext} managed by this {@code TestContextManager}.;protected final TestContext getTestContext() {_		return this.testContext__	};get,the,link,test,context,managed,by,this,code,test,context,manager;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1429466943;Get the {@link TestContext} managed by this {@code TestContextManager}.;protected final TestContext getTestContext() {_		return this.testContext__	};get,the,link,test,context,managed,by,this,code,test,context,manager;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1455826052;Get the {@link TestContext} managed by this {@code TestContextManager}.;protected final TestContext getTestContext() {_		return this.testContext__	};get,the,link,test,context,managed,by,this,code,test,context,manager;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> protected final TestContext getTestContext();1456613400;Get the {@link TestContext} managed by this {@code TestContextManager}.;protected final TestContext getTestContext() {_		return this.testContext__	};get,the,link,test,context,managed,by,this,code,test,context,manager;protected,final,test,context,get,test,context,return,this,test,context
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception;1495868221;Hook for post-processing a test <em>after</em> execution of <em>after</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_tearing down test fixtures, ending a transaction, etc._<p>This method <strong>must</strong> be called immediately after_framework-specific <em>after</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.After @After}). For historical_reasons, this method is named {@code afterTestMethod}. Since the_introduction of {@link #afterTestExecution}, a more suitable name for_this method might be something like {@code afterTestTearDown} or_{@code afterEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #beforeTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception {_		String callbackName = "afterTestMethod"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_				else {_					afterTestMethodException.addSuppressed(ex)__				}_			}_		}_		if (afterTestMethodException != null) {_			ReflectionUtils.rethrowException(afterTestMethodException)__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,em,after,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,tearing,down,test,fixtures,ending,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,after,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,for,historical,reasons,this,method,is,named,code,after,test,method,since,the,introduction,of,link,after,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,after,test,tear,down,or,code,after,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,before,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,method,object,test,instance,method,test,method,nullable,throwable,exception,throws,exception,string,callback,name,after,test,method,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,method,exception,null,after,test,method,exception,ex,else,after,test,method,exception,add,suppressed,ex,if,after,test,method,exception,null,reflection,utils,rethrow,exception,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception;1496955179;Hook for post-processing a test <em>after</em> execution of <em>after</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_tearing down test fixtures, ending a transaction, etc._<p>This method <strong>must</strong> be called immediately after_framework-specific <em>after</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.After @After}). For historical_reasons, this method is named {@code afterTestMethod}. Since the_introduction of {@link #afterTestExecution}, a more suitable name for_this method might be something like {@code afterTestTearDown} or_{@code afterEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #beforeTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception {_		String callbackName = "afterTestMethod"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_				else {_					afterTestMethodException.addSuppressed(ex)__				}_			}_		}_		if (afterTestMethodException != null) {_			ReflectionUtils.rethrowException(afterTestMethodException)__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,em,after,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,tearing,down,test,fixtures,ending,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,after,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,for,historical,reasons,this,method,is,named,code,after,test,method,since,the,introduction,of,link,after,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,after,test,tear,down,or,code,after,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,before,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,method,object,test,instance,method,test,method,nullable,throwable,exception,throws,exception,string,callback,name,after,test,method,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,method,exception,null,after,test,method,exception,ex,else,after,test,method,exception,add,suppressed,ex,if,after,test,method,exception,null,reflection,utils,rethrow,exception,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception;1497341594;Hook for post-processing a test <em>after</em> execution of <em>after</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_tearing down test fixtures, ending a transaction, etc._<p>This method <strong>must</strong> be called immediately after_framework-specific <em>after</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.After @After}). For historical_reasons, this method is named {@code afterTestMethod}. Since the_introduction of {@link #afterTestExecution}, a more suitable name for_this method might be something like {@code afterTestTearDown} or_{@code afterEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #beforeTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception {_		String callbackName = "afterTestMethod"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_				else {_					afterTestMethodException.addSuppressed(ex)__				}_			}_		}_		if (afterTestMethodException != null) {_			ReflectionUtils.rethrowException(afterTestMethodException)__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,em,after,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,tearing,down,test,fixtures,ending,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,after,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,for,historical,reasons,this,method,is,named,code,after,test,method,since,the,introduction,of,link,after,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,after,test,tear,down,or,code,after,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,before,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,method,object,test,instance,method,test,method,nullable,throwable,exception,throws,exception,string,callback,name,after,test,method,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,method,exception,null,after,test,method,exception,ex,else,after,test,method,exception,add,suppressed,ex,if,after,test,method,exception,null,reflection,utils,rethrow,exception,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception;1519295386;Hook for post-processing a test <em>after</em> execution of <em>after</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_tearing down test fixtures, ending a transaction, etc._<p>This method <strong>must</strong> be called immediately after_framework-specific <em>after</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.After @After}). For historical_reasons, this method is named {@code afterTestMethod}. Since the_introduction of {@link #afterTestExecution}, a more suitable name for_this method might be something like {@code afterTestTearDown} or_{@code afterEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #beforeTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception {_		String callbackName = "afterTestMethod"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_				else {_					afterTestMethodException.addSuppressed(ex)__				}_			}_		}_		if (afterTestMethodException != null) {_			ReflectionUtils.rethrowException(afterTestMethodException)__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,em,after,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,tearing,down,test,fixtures,ending,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,after,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,for,historical,reasons,this,method,is,named,code,after,test,method,since,the,introduction,of,link,after,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,after,test,tear,down,or,code,after,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,before,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,method,object,test,instance,method,test,method,nullable,throwable,exception,throws,exception,string,callback,name,after,test,method,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,method,exception,null,after,test,method,exception,ex,else,after,test,method,exception,add,suppressed,ex,if,after,test,method,exception,null,reflection,utils,rethrow,exception,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception;1519859718;Hook for post-processing a test <em>after</em> execution of <em>after</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_tearing down test fixtures, ending a transaction, etc._<p>This method <strong>must</strong> be called immediately after_framework-specific <em>after</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.After @After}). For historical_reasons, this method is named {@code afterTestMethod}. Since the_introduction of {@link #afterTestExecution}, a more suitable name for_this method might be something like {@code afterTestTearDown} or_{@code afterEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #beforeTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception) throws Exception {_		String callbackName = "afterTestMethod"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_				else {_					afterTestMethodException.addSuppressed(ex)__				}_			}_		}_		if (afterTestMethodException != null) {_			ReflectionUtils.rethrowException(afterTestMethodException)__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,em,after,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,tearing,down,test,fixtures,ending,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,after,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,for,historical,reasons,this,method,is,named,code,after,test,method,since,the,introduction,of,link,after,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,after,test,tear,down,or,code,after,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,before,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,method,object,test,instance,method,test,method,nullable,throwable,exception,throws,exception,string,callback,name,after,test,method,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,method,exception,null,after,test,method,exception,ex,else,after,test,method,exception,add,suppressed,ex,if,after,test,method,exception,null,reflection,utils,rethrow,exception,after,test,method,exception
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1328020251;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this <code>TestContextManager</code>._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,code,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1344604587;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this <code>TestContextManager</code>._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,code,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1349648958;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this <code>TestContextManager</code>._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,code,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1350692960;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this <code>TestContextManager</code>._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,code,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1356735495;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1362408075;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1363208506;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1382815212;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1382920864;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1385499540;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1390429716;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1397082962;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1398638841;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1398808867;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1400531350;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1429465455;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1429466943;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1455826052;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1456613400;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1456946365;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1461428605;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1467730834;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1468159440;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1468244735;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1468434541;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1468503798;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1472840882;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1495868221;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1496955179;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1497341594;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1519295386;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1519859718;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1519864746;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public final List<TestExecutionListener> getTestExecutionListeners();1520441064;Get the current {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager}._<p>Allows for modifications, e.g. adding a listener to the beginning of the list._However, make sure to keep the list stable while actually executing tests.;public final List<TestExecutionListener> getTestExecutionListeners() {_		return this.testExecutionListeners__	};get,the,current,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,p,allows,for,modifications,e,g,adding,a,listener,to,the,beginning,of,the,list,however,make,sure,to,keep,the,list,stable,while,actually,executing,tests;public,final,list,test,execution,listener,get,test,execution,listeners,return,this,test,execution,listeners
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1328020251;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After &#064_After})._<p>The managed {@link TestContext} will be updated with the supplied_<code>testInstance</code>, <code>testMethod</code>, and_<code>exception</code>._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never <code>null</code>)_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or <code>null</code> if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod + "], exception ["_					+ exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Exception afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after' execution for test: method [" + testMethod + "], instance ["_						+ testInstance + "], exception [" + exception + "]", ex)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			throw afterTestMethodException__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,064,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,code,test,method,code,and,code,exception,code,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,code,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,code,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,exception,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,throw,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1344604587;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After &#064_After})._<p>The managed {@link TestContext} will be updated with the supplied_<code>testInstance</code>, <code>testMethod</code>, and_<code>exception</code>._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never <code>null</code>)_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or <code>null</code> if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod + "], exception ["_					+ exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Exception afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after' execution for test: method [" + testMethod + "], instance ["_						+ testInstance + "], exception [" + exception + "]", ex)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			throw afterTestMethodException__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,064,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,code,test,method,code,and,code,exception,code,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,code,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,code,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,exception,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,throw,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1349648958;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After &#064_After})._<p>The managed {@link TestContext} will be updated with the supplied_<code>testInstance</code>, <code>testMethod</code>, and_<code>exception</code>._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never <code>null</code>)_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or <code>null</code> if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod + "], exception ["_					+ exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Exception afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after' execution for test: method [" + testMethod + "], instance ["_						+ testInstance + "], exception [" + exception + "]", ex)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			throw afterTestMethodException__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,064,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,code,test,method,code,and,code,exception,code,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,code,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,code,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,exception,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,throw,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1350692960;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After &#064_After})._<p>The managed {@link TestContext} will be updated with the supplied_<code>testInstance</code>, <code>testMethod</code>, and_<code>exception</code>._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never <code>null</code>)_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or <code>null</code> if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod + "], exception ["_					+ exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Exception afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after' execution for test: method [" + testMethod + "], instance ["_						+ testInstance + "], exception [" + exception + "]", ex)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			throw afterTestMethodException__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,064,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,code,test,method,code,and,code,exception,code,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,code,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,code,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,exception,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,throw,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1356735495;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After &#064_After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod + "], exception ["_					+ exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Exception afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after' execution for test: method [" + testMethod + "], instance ["_						+ testInstance + "], exception [" + exception + "]", ex)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			throw afterTestMethodException__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,064,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,exception,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,throw,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1362408075;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After &#064_After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod + "], exception ["_					+ exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Exception afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after' execution for test: method [" + testMethod + "], instance ["_						+ testInstance + "], exception [" + exception + "]", ex)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			throw afterTestMethodException__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,064,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,exception,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,throw,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1363208506;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After &#064_After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod + "], exception ["_					+ exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Exception afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			} catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after' execution for test: method [" + testMethod + "], instance ["_						+ testInstance + "], exception [" + exception + "]", ex)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			throw afterTestMethodException__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,064,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,exception,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,throw,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1382815212;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After &#064_After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod + "], exception ["_					+ exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Exception afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after' execution for test: method [" + testMethod + "], instance ["_						+ testInstance + "], exception [" + exception + "]", ex)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			throw afterTestMethodException__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,064,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,exception,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,throw,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1382920864;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After &#064_After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod + "], exception ["_					+ exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Exception afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after' execution for test: method [" + testMethod + "], instance ["_						+ testInstance + "], exception [" + exception + "]", ex)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			throw afterTestMethodException__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,064,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,exception,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,throw,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1385499540;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After &#064_After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod + "], exception ["_					+ exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Exception afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after' execution for test: method [" + testMethod + "], instance ["_						+ testInstance + "], exception [" + exception + "]", ex)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			throw afterTestMethodException__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,064,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,exception,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,throw,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1390429716;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After &#064_After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod + "], exception ["_					+ exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Exception afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after' execution for test: method [" + testMethod + "], instance ["_						+ testInstance + "], exception [" + exception + "]", ex)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			throw afterTestMethodException__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,064,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,exception,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,throw,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1397082962;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod + "], exception ["_					+ exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Exception afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener_						+ "] to process 'after' execution for test: method [" + testMethod + "], instance ["_						+ testInstance + "], exception [" + exception + "]", ex)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			throw afterTestMethodException__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,exception,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,throw,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1398638841;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod + "], exception ["_					+ exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Exception afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'after' execution for test: method [" + testMethod + "], instance [" +_						testInstance + "], exception [" + exception + "]", ex)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			throw afterTestMethodException__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,exception,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,throw,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1398808867;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod + "], exception ["_					+ exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Exception afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'after' execution for test: method [" + testMethod + "], instance [" +_						testInstance + "], exception [" + exception + "]", ex)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			throw afterTestMethodException__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,exception,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,throw,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1400531350;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "testInstance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod +_					"], exception [" + exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Exception afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'after' execution for test: method [" + testMethod + "], instance [" +_						testInstance + "], exception [" + exception + "]", ex)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			throw afterTestMethodException__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,exception,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,throw,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1429465455;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod +_					"], exception [" + exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Exception afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'after' execution for test: method [" + testMethod + "], instance [" +_						testInstance + "], exception [" + exception + "]", ex)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			throw afterTestMethodException__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,exception,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,throw,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1429466943;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod +_					"], exception [" + exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Exception afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Exception ex) {_				logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_						"] to process 'after' execution for test: method [" + testMethod + "], instance [" +_						testInstance + "], exception [" + exception + "]", ex)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			throw afterTestMethodException__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,exception,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,exception,ex,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,throw,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1455826052;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod +_					"], exception [" + exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Throwable afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'after' execution for test: method [" + testMethod + "], instance [" +_							testInstance + "], exception [" + exception + "]", ex)__				}_				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			ReflectionUtils.rethrowException(afterTestMethodException)__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,throwable,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,reflection,utils,rethrow,exception,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1456613400;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod +_					"], exception [" + exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Throwable afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'after' execution for test: method [" + testMethod + "], instance [" +_							testInstance + "], exception [" + exception + "]", ex)__				}_				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			ReflectionUtils.rethrowException(afterTestMethodException)__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,throwable,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,reflection,utils,rethrow,exception,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1456946365;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod +_					"], exception [" + exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Throwable afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'after' execution for test: method [" + testMethod + "], instance [" +_							testInstance + "], exception [" + exception + "]", ex)__				}_				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			ReflectionUtils.rethrowException(afterTestMethodException)__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,throwable,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,reflection,utils,rethrow,exception,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1461428605;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod +_					"], exception [" + exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Throwable afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'after' execution for test: method [" + testMethod + "], instance [" +_							testInstance + "], exception [" + exception + "]", ex)__				}_				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			ReflectionUtils.rethrowException(afterTestMethodException)__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,throwable,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,reflection,utils,rethrow,exception,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1467730834;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod +_					"], exception [" + exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Throwable afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'after' execution for test: method [" + testMethod + "], instance [" +_							testInstance + "], exception [" + exception + "]", ex)__				}_				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			ReflectionUtils.rethrowException(afterTestMethodException)__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,throwable,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,reflection,utils,rethrow,exception,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1468159440;Hook for post-processing a test <em>after</em> execution of the supplied_{@link Method test method}, for example for tearing down test fixtures,_ending a transaction, etc. Should be called after any framework-specific_<em>after methods</em> (e.g., methods annotated with JUnit's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and_{@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance to_post-process the test method execution. If a listener throws an_exception, the remaining registered listeners will still be called, but_the first exception thrown will be tracked and rethrown after all_listeners have executed. Note that registered listeners will be executed_in the opposite order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		Assert.notNull(testInstance, "Test instance must not be null")__		if (logger.isTraceEnabled()) {_			logger.trace("afterTestMethod(): instance [" + testInstance + "], method [" + testMethod +_					"], exception [" + exception + "]")__		}_		getTestContext().updateState(testInstance, testMethod, exception)___		Throwable afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Caught exception while allowing TestExecutionListener [" + testExecutionListener +_							"] to process 'after' execution for test: method [" + testMethod + "], instance [" +_							testInstance + "], exception [" + exception + "]", ex)__				}_				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			ReflectionUtils.rethrowException(afterTestMethodException)__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,the,supplied,link,method,test,method,for,example,for,tearing,down,test,fixtures,ending,a,transaction,etc,should,be,called,after,any,framework,specific,em,after,methods,em,e,g,methods,annotated,with,junit,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,post,process,the,test,method,execution,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,assert,not,null,test,instance,test,instance,must,not,be,null,if,logger,is,trace,enabled,logger,trace,after,test,method,instance,test,instance,method,test,method,exception,exception,get,test,context,update,state,test,instance,test,method,exception,throwable,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,allowing,test,execution,listener,test,execution,listener,to,process,after,execution,for,test,method,test,method,instance,test,instance,exception,exception,ex,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,reflection,utils,rethrow,exception,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1468244735;Hook for post-processing a test <em>after</em> execution of <em>after</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_tearing down test fixtures, ending a transaction, etc._<p>This method <strong>must</strong> be called immediately after_framework-specific <em>after</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.After @After}). For historical_reasons, this method is named {@code afterTestMethod}. Since the_introduction of {@link #afterTestExecution}, a more suitable name for_this method might be something like {@code afterTestTearDown} or_{@code afterEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #beforeTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		String callbackName = "afterTestMethod"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_			}_		}_		if (afterTestMethodException != null) {_			ReflectionUtils.rethrowException(afterTestMethodException)__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,em,after,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,tearing,down,test,fixtures,ending,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,after,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,for,historical,reasons,this,method,is,named,code,after,test,method,since,the,introduction,of,link,after,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,after,test,tear,down,or,code,after,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,before,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,string,callback,name,after,test,method,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,method,exception,null,after,test,method,exception,ex,if,after,test,method,exception,null,reflection,utils,rethrow,exception,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1468434541;Hook for post-processing a test <em>after</em> execution of <em>after</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_tearing down test fixtures, ending a transaction, etc._<p>This method <strong>must</strong> be called immediately after_framework-specific <em>after</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.After @After}). For historical_reasons, this method is named {@code afterTestMethod}. Since the_introduction of {@link #afterTestExecution}, a more suitable name for_this method might be something like {@code afterTestTearDown} or_{@code afterEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #beforeTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		String callbackName = "afterTestMethod"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_				else {_					afterTestMethodException.addSuppressed(ex)__				}_			}_		}_		if (afterTestMethodException != null) {_			ReflectionUtils.rethrowException(afterTestMethodException)__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,em,after,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,tearing,down,test,fixtures,ending,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,after,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,for,historical,reasons,this,method,is,named,code,after,test,method,since,the,introduction,of,link,after,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,after,test,tear,down,or,code,after,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,before,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,string,callback,name,after,test,method,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,method,exception,null,after,test,method,exception,ex,else,after,test,method,exception,add,suppressed,ex,if,after,test,method,exception,null,reflection,utils,rethrow,exception,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1468503798;Hook for post-processing a test <em>after</em> execution of <em>after</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_tearing down test fixtures, ending a transaction, etc._<p>This method <strong>must</strong> be called immediately after_framework-specific <em>after</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.After @After}). For historical_reasons, this method is named {@code afterTestMethod}. Since the_introduction of {@link #afterTestExecution}, a more suitable name for_this method might be something like {@code afterTestTearDown} or_{@code afterEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #beforeTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		String callbackName = "afterTestMethod"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_				else {_					afterTestMethodException.addSuppressed(ex)__				}_			}_		}_		if (afterTestMethodException != null) {_			ReflectionUtils.rethrowException(afterTestMethodException)__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,em,after,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,tearing,down,test,fixtures,ending,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,after,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,for,historical,reasons,this,method,is,named,code,after,test,method,since,the,introduction,of,link,after,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,after,test,tear,down,or,code,after,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,before,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,string,callback,name,after,test,method,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,method,exception,null,after,test,method,exception,ex,else,after,test,method,exception,add,suppressed,ex,if,after,test,method,exception,null,reflection,utils,rethrow,exception,after,test,method,exception
TestContextManager -> public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception;1472840882;Hook for post-processing a test <em>after</em> execution of <em>after</em>_lifecycle callbacks of the underlying test framework &mdash_ for example,_tearing down test fixtures, ending a transaction, etc._<p>This method <strong>must</strong> be called immediately after_framework-specific <em>after</em> lifecycle callbacks (e.g., methods_annotated with JUnit 4's {@link org.junit.After @After}). For historical_reasons, this method is named {@code afterTestMethod}. Since the_introduction of {@link #afterTestExecution}, a more suitable name for_this method might be something like {@code afterTestTearDown} or_{@code afterEach}_ however, it is unfortunately impossible to rename_this method due to backward compatibility concerns._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@see #beforeTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		String callbackName = "afterTestMethod"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestMethodException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestMethod(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestMethodException == null) {_					afterTestMethodException = ex__				}_				else {_					afterTestMethodException.addSuppressed(ex)__				}_			}_		}_		if (afterTestMethodException != null) {_			ReflectionUtils.rethrowException(afterTestMethodException)__		}_	};hook,for,post,processing,a,test,em,after,em,execution,of,em,after,em,lifecycle,callbacks,of,the,underlying,test,framework,mdash,for,example,tearing,down,test,fixtures,ending,a,transaction,etc,p,this,method,strong,must,strong,be,called,immediately,after,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,for,historical,reasons,this,method,is,named,code,after,test,method,since,the,introduction,of,link,after,test,execution,a,more,suitable,name,for,this,method,might,be,something,like,code,after,test,tear,down,or,code,after,each,however,it,is,unfortunately,impossible,to,rename,this,method,due,to,backward,compatibility,concerns,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,see,before,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,method,object,test,instance,method,test,method,throwable,exception,throws,exception,string,callback,name,after,test,method,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,method,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,method,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,method,exception,null,after,test,method,exception,ex,else,after,test,method,exception,add,suppressed,ex,if,after,test,method,exception,null,reflection,utils,rethrow,exception,after,test,method,exception
TestContextManager -> public TestContextManager(Class<?> testClass);1328020251;Delegates to {@link #TestContextManager(Class, String)} with a value of_<code>null</code> for the default <code>ContextLoader</code> class name.;public TestContextManager(Class<?> testClass) {_		this(testClass, null)__	};delegates,to,link,test,context,manager,class,string,with,a,value,of,code,null,code,for,the,default,code,context,loader,code,class,name;public,test,context,manager,class,test,class,this,test,class,null
TestContextManager -> public TestContextManager(Class<?> testClass);1344604587;Delegates to {@link #TestContextManager(Class, String)} with a value of_<code>null</code> for the default <code>ContextLoader</code> class name.;public TestContextManager(Class<?> testClass) {_		this(testClass, null)__	};delegates,to,link,test,context,manager,class,string,with,a,value,of,code,null,code,for,the,default,code,context,loader,code,class,name;public,test,context,manager,class,test,class,this,test,class,null
TestContextManager -> public TestContextManager(Class<?> testClass);1349648958;Delegates to {@link #TestContextManager(Class, String)} with a value of_<code>null</code> for the default <code>ContextLoader</code> class name.;public TestContextManager(Class<?> testClass) {_		this(testClass, null)__	};delegates,to,link,test,context,manager,class,string,with,a,value,of,code,null,code,for,the,default,code,context,loader,code,class,name;public,test,context,manager,class,test,class,this,test,class,null
TestContextManager -> public TestContextManager(Class<?> testClass);1350692960;Delegates to {@link #TestContextManager(Class, String)} with a value of_<code>null</code> for the default <code>ContextLoader</code> class name.;public TestContextManager(Class<?> testClass) {_		this(testClass, null)__	};delegates,to,link,test,context,manager,class,string,with,a,value,of,code,null,code,for,the,default,code,context,loader,code,class,name;public,test,context,manager,class,test,class,this,test,class,null
TestContextManager -> public TestContextManager(Class<?> testClass);1356735495;Delegates to {@link #TestContextManager(Class, String)} with a value of_{@code null} for the default {@code ContextLoader} class name.;public TestContextManager(Class<?> testClass) {_		this(testClass, null)__	};delegates,to,link,test,context,manager,class,string,with,a,value,of,code,null,for,the,default,code,context,loader,class,name;public,test,context,manager,class,test,class,this,test,class,null
TestContextManager -> public TestContextManager(Class<?> testClass);1362408075;Delegates to {@link #TestContextManager(Class, String)} with a value of_{@code null} for the default {@code ContextLoader} class name.;public TestContextManager(Class<?> testClass) {_		this(testClass, null)__	};delegates,to,link,test,context,manager,class,string,with,a,value,of,code,null,for,the,default,code,context,loader,class,name;public,test,context,manager,class,test,class,this,test,class,null
TestContextManager -> public TestContextManager(Class<?> testClass);1363208506;Delegates to {@link #TestContextManager(Class, String)} with a value of_{@code null} for the default {@code ContextLoader} class name.;public TestContextManager(Class<?> testClass) {_		this(testClass, null)__	};delegates,to,link,test,context,manager,class,string,with,a,value,of,code,null,for,the,default,code,context,loader,class,name;public,test,context,manager,class,test,class,this,test,class,null
TestContextManager -> public TestContextManager(Class<?> testClass);1382815212;Delegates to {@link #TestContextManager(Class, String)} with a value of_{@code null} for the default {@code ContextLoader} class name.;public TestContextManager(Class<?> testClass) {_		this(testClass, null)__	};delegates,to,link,test,context,manager,class,string,with,a,value,of,code,null,for,the,default,code,context,loader,class,name;public,test,context,manager,class,test,class,this,test,class,null
TestContextManager -> public TestContextManager(Class<?> testClass);1382920864;Delegates to {@link #TestContextManager(Class, String)} with a value of_{@code null} for the default {@code ContextLoader} class name.;public TestContextManager(Class<?> testClass) {_		this(testClass, null)__	};delegates,to,link,test,context,manager,class,string,with,a,value,of,code,null,for,the,default,code,context,loader,class,name;public,test,context,manager,class,test,class,this,test,class,null
TestContextManager -> public TestContextManager(Class<?> testClass);1385499540;Delegates to {@link #TestContextManager(Class, String)} with a value of_{@code null} for the default {@code ContextLoader} class name.;public TestContextManager(Class<?> testClass) {_		this(testClass, null)__	};delegates,to,link,test,context,manager,class,string,with,a,value,of,code,null,for,the,default,code,context,loader,class,name;public,test,context,manager,class,test,class,this,test,class,null
TestContextManager -> public TestContextManager(Class<?> testClass);1390429716;Delegates to {@link #TestContextManager(Class, String)} with a value of_{@code null} for the default {@code ContextLoader} class name.;public TestContextManager(Class<?> testClass) {_		this(testClass, null)__	};delegates,to,link,test,context,manager,class,string,with,a,value,of,code,null,for,the,default,code,context,loader,class,name;public,test,context,manager,class,test,class,this,test,class,null
TestContextManager -> public TestContextManager(Class<?> testClass);1397082962;Construct a new {@code TestContextManager} for the specified {@linkplain Class_test class} and automatically {@link #registerTestExecutionListeners register} the_{@link TestExecutionListener TestExecutionListeners} configured for the test class_via the {@link TestExecutionListeners @TestExecutionListeners} annotation._@param testClass the test class to be managed_@see #registerTestExecutionListeners(List);public TestContextManager(Class<?> testClass) {_		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = new DefaultCacheAwareContextLoaderDelegate(_			contextCache)__		BootstrapContext bootstrapContext = new DefaultBootstrapContext(testClass, cacheAwareContextLoaderDelegate)__		this.testContextBootstrapper = BootstrapUtils.resolveTestContextBootstrapper(bootstrapContext)__		this.testContext = new DefaultTestContext(testContextBootstrapper)__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,for,the,specified,linkplain,class,test,class,and,automatically,link,register,test,execution,listeners,register,the,link,test,execution,listener,test,execution,listeners,configured,for,the,test,class,via,the,link,test,execution,listeners,test,execution,listeners,annotation,param,test,class,the,test,class,to,be,managed,see,register,test,execution,listeners,list;public,test,context,manager,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,new,default,cache,aware,context,loader,delegate,context,cache,bootstrap,context,bootstrap,context,new,default,bootstrap,context,test,class,cache,aware,context,loader,delegate,this,test,context,bootstrapper,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,context,this,test,context,new,default,test,context,test,context,bootstrapper,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(Class<?> testClass);1398638841;Construct a new {@code TestContextManager} for the specified {@linkplain Class_test class} and automatically {@link #registerTestExecutionListeners register} the_{@link TestExecutionListener TestExecutionListeners} configured for the test class_via the {@link TestExecutionListeners @TestExecutionListeners} annotation._@param testClass the test class to be managed_@see #registerTestExecutionListeners(List);public TestContextManager(Class<?> testClass) {_		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = new DefaultCacheAwareContextLoaderDelegate(contextCache)__		BootstrapContext bootstrapContext = new DefaultBootstrapContext(testClass, cacheAwareContextLoaderDelegate)__		this.testContextBootstrapper = BootstrapUtils.resolveTestContextBootstrapper(bootstrapContext)__		this.testContext = new DefaultTestContext(testContextBootstrapper)__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,for,the,specified,linkplain,class,test,class,and,automatically,link,register,test,execution,listeners,register,the,link,test,execution,listener,test,execution,listeners,configured,for,the,test,class,via,the,link,test,execution,listeners,test,execution,listeners,annotation,param,test,class,the,test,class,to,be,managed,see,register,test,execution,listeners,list;public,test,context,manager,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,new,default,cache,aware,context,loader,delegate,context,cache,bootstrap,context,bootstrap,context,new,default,bootstrap,context,test,class,cache,aware,context,loader,delegate,this,test,context,bootstrapper,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,context,this,test,context,new,default,test,context,test,context,bootstrapper,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(Class<?> testClass);1398808867;Construct a new {@code TestContextManager} for the specified {@linkplain Class test class}_and automatically {@link #registerTestExecutionListeners register} the_{@link TestExecutionListener TestExecutionListeners} configured for the test class_via the {@link TestExecutionListeners @TestExecutionListeners} annotation._@param testClass the test class to be managed_@see #registerTestExecutionListeners;public TestContextManager(Class<?> testClass) {_		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = new DefaultCacheAwareContextLoaderDelegate(contextCache)__		BootstrapContext bootstrapContext = new DefaultBootstrapContext(testClass, cacheAwareContextLoaderDelegate)__		this.testContextBootstrapper = BootstrapUtils.resolveTestContextBootstrapper(bootstrapContext)__		this.testContext = new DefaultTestContext(this.testContextBootstrapper)__		registerTestExecutionListeners(this.testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,for,the,specified,linkplain,class,test,class,and,automatically,link,register,test,execution,listeners,register,the,link,test,execution,listener,test,execution,listeners,configured,for,the,test,class,via,the,link,test,execution,listeners,test,execution,listeners,annotation,param,test,class,the,test,class,to,be,managed,see,register,test,execution,listeners;public,test,context,manager,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,new,default,cache,aware,context,loader,delegate,context,cache,bootstrap,context,bootstrap,context,new,default,bootstrap,context,test,class,cache,aware,context,loader,delegate,this,test,context,bootstrapper,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,context,this,test,context,new,default,test,context,this,test,context,bootstrapper,register,test,execution,listeners,this,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(Class<?> testClass);1400531350;Construct a new {@code TestContextManager} for the specified {@linkplain Class test class}_and automatically {@link #registerTestExecutionListeners register} the_{@link TestExecutionListener TestExecutionListeners} configured for the test class_via the {@link TestExecutionListeners @TestExecutionListeners} annotation._@param testClass the test class to be managed_@see #registerTestExecutionListeners;public TestContextManager(Class<?> testClass) {_		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = new DefaultCacheAwareContextLoaderDelegate(contextCache)__		BootstrapContext bootstrapContext = new DefaultBootstrapContext(testClass, cacheAwareContextLoaderDelegate)__		this.testContextBootstrapper = BootstrapUtils.resolveTestContextBootstrapper(bootstrapContext)__		this.testContext = new DefaultTestContext(this.testContextBootstrapper)__		registerTestExecutionListeners(this.testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,for,the,specified,linkplain,class,test,class,and,automatically,link,register,test,execution,listeners,register,the,link,test,execution,listener,test,execution,listeners,configured,for,the,test,class,via,the,link,test,execution,listeners,test,execution,listeners,annotation,param,test,class,the,test,class,to,be,managed,see,register,test,execution,listeners;public,test,context,manager,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,new,default,cache,aware,context,loader,delegate,context,cache,bootstrap,context,bootstrap,context,new,default,bootstrap,context,test,class,cache,aware,context,loader,delegate,this,test,context,bootstrapper,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,context,this,test,context,new,default,test,context,this,test,context,bootstrapper,register,test,execution,listeners,this,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(Class<?> testClass);1429465455;Construct a new {@code TestContextManager} for the specified {@linkplain Class test class},_automatically {@linkplain #registerTestExecutionListeners registering} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to a {@link TestContextBootstrapper} for building the {@code TestContext}_and retrieving the {@code TestExecutionListeners}._@param testClass the test class to be managed_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(Class<?> testClass) {_		BootstrapContext bootstrapContext = createBootstrapContext(testClass)__		TestContextBootstrapper bootstrapper = BootstrapUtils.resolveTestContextBootstrapper(bootstrapContext)__		this.testContext = bootstrapper.buildTestContext()__		registerTestExecutionListeners(bootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,for,the,specified,linkplain,class,test,class,automatically,linkplain,register,test,execution,listeners,registering,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,a,link,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,class,the,test,class,to,be,managed,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,class,test,class,bootstrap,context,bootstrap,context,create,bootstrap,context,test,class,test,context,bootstrapper,bootstrapper,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,context,this,test,context,bootstrapper,build,test,context,register,test,execution,listeners,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(Class<?> testClass);1429466943;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public TestContextManager(Class<?> testClass);1455826052;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public TestContextManager(Class<?> testClass);1456613400;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public TestContextManager(Class<?> testClass);1456946365;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public TestContextManager(Class<?> testClass);1461428605;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public TestContextManager(Class<?> testClass);1467730834;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public TestContextManager(Class<?> testClass);1468159440;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public TestContextManager(Class<?> testClass);1468244735;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public TestContextManager(Class<?> testClass);1468434541;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public TestContextManager(Class<?> testClass);1468503798;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public TestContextManager(Class<?> testClass);1472840882;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public TestContextManager(Class<?> testClass);1495868221;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public TestContextManager(Class<?> testClass);1496955179;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public TestContextManager(Class<?> testClass);1497341594;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public TestContextManager(Class<?> testClass);1519295386;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public TestContextManager(Class<?> testClass);1519859718;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public TestContextManager(Class<?> testClass);1519864746;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public TestContextManager(Class<?> testClass);1520441064;Construct a new {@code TestContextManager} for the supplied {@linkplain Class test class}._<p>Delegates to {@link #TestContextManager(TestContextBootstrapper)} with_the {@link TestContextBootstrapper} configured for the test class. If the_{@link BootstrapWith @BootstrapWith} annotation is present on the test_class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type__otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used._@param testClass the test class to be managed_@see #TestContextManager(TestContextBootstrapper);public TestContextManager(Class<?> testClass) {_		this(BootstrapUtils.resolveTestContextBootstrapper(BootstrapUtils.createBootstrapContext(testClass)))__	};construct,a,new,code,test,context,manager,for,the,supplied,linkplain,class,test,class,p,delegates,to,link,test,context,manager,test,context,bootstrapper,with,the,link,test,context,bootstrapper,configured,for,the,test,class,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,test,class,the,test,class,to,be,managed,see,test,context,manager,test,context,bootstrapper;public,test,context,manager,class,test,class,this,bootstrap,utils,resolve,test,context,bootstrapper,bootstrap,utils,create,bootstrap,context,test,class
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1328020251;Register the supplied {@link TestExecutionListener TestExecutionListeners}_by appending them to the set of listeners used by this <code>TestContextManager</code>.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,set,of,listeners,used,by,this,code,test,context,manager,code;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1344604587;Register the supplied {@link TestExecutionListener TestExecutionListeners}_by appending them to the set of listeners used by this <code>TestContextManager</code>.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,set,of,listeners,used,by,this,code,test,context,manager,code;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1349648958;Register the supplied {@link TestExecutionListener TestExecutionListeners}_by appending them to the set of listeners used by this <code>TestContextManager</code>.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,set,of,listeners,used,by,this,code,test,context,manager,code;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1350692960;Register the supplied {@link TestExecutionListener TestExecutionListeners}_by appending them to the set of listeners used by this <code>TestContextManager</code>.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,set,of,listeners,used,by,this,code,test,context,manager,code;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1356735495;Register the supplied {@link TestExecutionListener TestExecutionListeners}_by appending them to the set of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,set,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1362408075;Register the supplied {@link TestExecutionListener TestExecutionListeners}_by appending them to the set of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,set,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1363208506;Register the supplied {@link TestExecutionListener TestExecutionListeners}_by appending them to the set of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,set,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1382815212;Register the supplied {@link TestExecutionListener TestExecutionListeners}_by appending them to the set of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,set,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1382920864;Register the supplied {@link TestExecutionListener TestExecutionListeners}_by appending them to the set of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,set,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1385499540;Register the supplied {@link TestExecutionListener TestExecutionListeners}_by appending them to the set of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,set,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1390429716;Register the supplied {@link TestExecutionListener TestExecutionListeners}_by appending them to the set of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,set,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1397082962;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1398638841;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1398808867;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1400531350;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1429465455;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1429466943;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1455826052;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1456613400;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1456946365;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1461428605;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1467730834;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1468159440;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1468244735;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1468434541;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1468503798;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1472840882;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1495868221;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1496955179;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1497341594;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1519295386;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1519859718;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1519864746;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners);1520441064;Register the supplied array of {@link TestExecutionListener TestExecutionListeners}_by appending them to the list of listeners used by this {@code TestContextManager}.;public void registerTestExecutionListeners(TestExecutionListener... testExecutionListeners) {_		for (TestExecutionListener listener : testExecutionListeners) {_			if (logger.isTraceEnabled()) {_				logger.trace("Registering TestExecutionListener: " + listener)__			}_			this.testExecutionListeners.add(listener)__		}_	};register,the,supplied,array,of,link,test,execution,listener,test,execution,listeners,by,appending,them,to,the,list,of,listeners,used,by,this,code,test,context,manager;public,void,register,test,execution,listeners,test,execution,listener,test,execution,listeners,for,test,execution,listener,listener,test,execution,listeners,if,logger,is,trace,enabled,logger,trace,registering,test,execution,listener,listener,this,test,execution,listeners,add,listener
TestContextManager -> public void afterTestExecution(Object testInstance, Method testMethod, Throwable exception) throws Exception;1468244735;Hook for post-processing a test <em>immediately after</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called before framework-specific_<em>after</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #getTestExecutionListeners();public void afterTestExecution(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		String callbackName = "afterTestExecution"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestExecutionException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestExecutionException == null) {_					afterTestExecutionException = ex__				}_			}_		}_		if (afterTestExecutionException != null) {_			ReflectionUtils.rethrowException(afterTestExecutionException)__		}_	};hook,for,post,processing,a,test,em,immediately,after,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,before,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,get,test,execution,listeners;public,void,after,test,execution,object,test,instance,method,test,method,throwable,exception,throws,exception,string,callback,name,after,test,execution,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,execution,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,execution,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,execution,exception,null,after,test,execution,exception,ex,if,after,test,execution,exception,null,reflection,utils,rethrow,exception,after,test,execution,exception
TestContextManager -> public void afterTestExecution(Object testInstance, Method testMethod, Throwable exception) throws Exception;1468434541;Hook for post-processing a test <em>immediately after</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called before framework-specific_<em>after</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called, but the first_exception thrown will be tracked and rethrown after all listeners have_executed. Note that registered listeners will be executed in the opposite_order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #getTestExecutionListeners();public void afterTestExecution(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		String callbackName = "afterTestExecution"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestExecutionException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestExecutionException == null) {_					afterTestExecutionException = ex__				}_				else {_					afterTestExecutionException.addSuppressed(ex)__				}_			}_		}_		if (afterTestExecutionException != null) {_			ReflectionUtils.rethrowException(afterTestExecutionException)__		}_	};hook,for,post,processing,a,test,em,immediately,after,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,before,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,but,the,first,exception,thrown,will,be,tracked,and,rethrown,after,all,listeners,have,executed,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,get,test,execution,listeners;public,void,after,test,execution,object,test,instance,method,test,method,throwable,exception,throws,exception,string,callback,name,after,test,execution,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,execution,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,execution,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,execution,exception,null,after,test,execution,exception,ex,else,after,test,execution,exception,add,suppressed,ex,if,after,test,execution,exception,null,reflection,utils,rethrow,exception,after,test,execution,exception
TestContextManager -> public void afterTestExecution(Object testInstance, Method testMethod, Throwable exception) throws Exception;1468503798;Hook for post-processing a test <em>immediately after</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called before framework-specific_<em>after</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestExecution(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		String callbackName = "afterTestExecution"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestExecutionException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestExecutionException == null) {_					afterTestExecutionException = ex__				}_				else {_					afterTestExecutionException.addSuppressed(ex)__				}_			}_		}_		if (afterTestExecutionException != null) {_			ReflectionUtils.rethrowException(afterTestExecutionException)__		}_	};hook,for,post,processing,a,test,em,immediately,after,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,before,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,execution,object,test,instance,method,test,method,throwable,exception,throws,exception,string,callback,name,after,test,execution,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,execution,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,execution,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,execution,exception,null,after,test,execution,exception,ex,else,after,test,execution,exception,add,suppressed,ex,if,after,test,execution,exception,null,reflection,utils,rethrow,exception,after,test,execution,exception
TestContextManager -> public void afterTestExecution(Object testInstance, Method testMethod, Throwable exception) throws Exception;1472840882;Hook for post-processing a test <em>immediately after</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called before framework-specific_<em>after</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.After @After})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance}, {@code testMethod}, and {@code exception}._<p>Each registered {@link TestExecutionListener} will be given a chance_to perform its post-processing. If a listener throws an exception, the_remaining registered listeners will still be called. After all listeners_have executed, the first caught exception will be rethrown with any_subsequent exceptions {@linkplain Throwable#addSuppressed suppressed} in_the first exception._<p>Note that registered listeners will be executed in the opposite_order in which they were registered._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which has just been executed on the_test instance_@param exception the exception that was thrown during execution of the_test method or by a TestExecutionListener, or {@code null} if none_was thrown_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #getTestExecutionListeners()_@see Throwable#addSuppressed(Throwable);public void afterTestExecution(Object testInstance, Method testMethod, Throwable exception) throws Exception {_		String callbackName = "afterTestExecution"__		prepareForAfterCallback(callbackName, testInstance, testMethod, exception)___		Throwable afterTestExecutionException = null__		_		_		for (TestExecutionListener testExecutionListener : getReversedTestExecutionListeners()) {_			try {_				testExecutionListener.afterTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				logException(ex, callbackName, testExecutionListener, testInstance, testMethod)__				if (afterTestExecutionException == null) {_					afterTestExecutionException = ex__				}_				else {_					afterTestExecutionException.addSuppressed(ex)__				}_			}_		}_		if (afterTestExecutionException != null) {_			ReflectionUtils.rethrowException(afterTestExecutionException)__		}_	};hook,for,post,processing,a,test,em,immediately,after,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,before,framework,specific,em,after,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,after,after,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,code,test,method,and,code,exception,p,each,registered,link,test,execution,listener,will,be,given,a,chance,to,perform,its,post,processing,if,a,listener,throws,an,exception,the,remaining,registered,listeners,will,still,be,called,after,all,listeners,have,executed,the,first,caught,exception,will,be,rethrown,with,any,subsequent,exceptions,linkplain,throwable,add,suppressed,suppressed,in,the,first,exception,p,note,that,registered,listeners,will,be,executed,in,the,opposite,order,in,which,they,were,registered,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,has,just,been,executed,on,the,test,instance,param,exception,the,exception,that,was,thrown,during,execution,of,the,test,method,or,by,a,test,execution,listener,or,code,null,if,none,was,thrown,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,get,test,execution,listeners,see,throwable,add,suppressed,throwable;public,void,after,test,execution,object,test,instance,method,test,method,throwable,exception,throws,exception,string,callback,name,after,test,execution,prepare,for,after,callback,callback,name,test,instance,test,method,exception,throwable,after,test,execution,exception,null,for,test,execution,listener,test,execution,listener,get,reversed,test,execution,listeners,try,test,execution,listener,after,test,execution,get,test,context,catch,throwable,ex,log,exception,ex,callback,name,test,execution,listener,test,instance,test,method,if,after,test,execution,exception,null,after,test,execution,exception,ex,else,after,test,execution,exception,add,suppressed,ex,if,after,test,execution,exception,null,reflection,utils,rethrow,exception,after,test,execution,exception
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1429466943;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1455826052;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1456613400;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1456946365;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1461428605;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1467730834;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1468159440;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1468244735;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1468434541;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1468503798;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1472840882;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1495868221;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1496955179;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1497341594;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1519295386;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1519859718;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1519864746;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> public TestContextManager(TestContextBootstrapper testContextBootstrapper);1520441064;Construct a new {@code TestContextManager} using the supplied {@link TestContextBootstrapper}_and {@linkplain #registerTestExecutionListeners register} the necessary_{@link TestExecutionListener TestExecutionListeners}._<p>Delegates to the supplied {@code TestContextBootstrapper} for building_the {@code TestContext} and retrieving the {@code TestExecutionListeners}._@param testContextBootstrapper the bootstrapper to use_@see TestContextBootstrapper#buildTestContext_@see TestContextBootstrapper#getTestExecutionListeners_@see #registerTestExecutionListeners;public TestContextManager(TestContextBootstrapper testContextBootstrapper) {_		this.testContext = testContextBootstrapper.buildTestContext()__		registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners())__	};construct,a,new,code,test,context,manager,using,the,supplied,link,test,context,bootstrapper,and,linkplain,register,test,execution,listeners,register,the,necessary,link,test,execution,listener,test,execution,listeners,p,delegates,to,the,supplied,code,test,context,bootstrapper,for,building,the,code,test,context,and,retrieving,the,code,test,execution,listeners,param,test,context,bootstrapper,the,bootstrapper,to,use,see,test,context,bootstrapper,build,test,context,see,test,context,bootstrapper,get,test,execution,listeners,see,register,test,execution,listeners;public,test,context,manager,test,context,bootstrapper,test,context,bootstrapper,this,test,context,test,context,bootstrapper,build,test,context,register,test,execution,listeners,test,context,bootstrapper,get,test,execution,listeners
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1328020251;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this <code>TestContextManager</code> in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed =_				new ArrayList<TestExecutionListener>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,code,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1344604587;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this <code>TestContextManager</code> in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed =_				new ArrayList<TestExecutionListener>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,code,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1349648958;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this <code>TestContextManager</code> in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(_			getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,code,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1350692960;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this <code>TestContextManager</code> in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(_			getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,code,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1356735495;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(_			getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1362408075;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(_			getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1363208506;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(_			getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1382815212;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(_			getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1382920864;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(_			getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1385499540;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(_			getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1390429716;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(_			getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1397082962;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(_			getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1398638841;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1398808867;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1400531350;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1429465455;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1429466943;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1455826052;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1456613400;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1456946365;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1461428605;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<TestExecutionListener>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,test,execution,listener,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1467730834;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1468159440;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1468244735;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1468434541;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1468503798;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1472840882;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1495868221;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1496955179;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1497341594;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1519295386;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1519859718;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1519864746;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> private List<TestExecutionListener> getReversedTestExecutionListeners();1520441064;Get a copy of the {@link TestExecutionListener TestExecutionListeners}_registered for this {@code TestContextManager} in reverse order.;private List<TestExecutionListener> getReversedTestExecutionListeners() {_		List<TestExecutionListener> listenersReversed = new ArrayList<>(getTestExecutionListeners())__		Collections.reverse(listenersReversed)__		return listenersReversed__	};get,a,copy,of,the,link,test,execution,listener,test,execution,listeners,registered,for,this,code,test,context,manager,in,reverse,order;private,list,test,execution,listener,get,reversed,test,execution,listeners,list,test,execution,listener,listeners,reversed,new,array,list,get,test,execution,listeners,collections,reverse,listeners,reversed,return,listeners,reversed
TestContextManager -> public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception;1468244735;Hook for pre-processing a test <em>immediately before</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called after framework-specific_<em>before</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestExecution"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,immediately,before,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,after,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,execution,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,execution,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,execution,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception;1468434541;Hook for pre-processing a test <em>immediately before</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called after framework-specific_<em>before</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestExecution"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,immediately,before,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,after,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,execution,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,execution,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,execution,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception;1468503798;Hook for pre-processing a test <em>immediately before</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called after framework-specific_<em>before</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestExecution"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,immediately,before,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,after,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,execution,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,execution,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,execution,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception;1472840882;Hook for pre-processing a test <em>immediately before</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called after framework-specific_<em>before</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestExecution"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,immediately,before,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,after,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,execution,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,execution,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,execution,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception;1495868221;Hook for pre-processing a test <em>immediately before</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called after framework-specific_<em>before</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestExecution"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,immediately,before,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,after,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,execution,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,execution,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,execution,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception;1496955179;Hook for pre-processing a test <em>immediately before</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called after framework-specific_<em>before</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestExecution"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,immediately,before,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,after,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,execution,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,execution,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,execution,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception;1497341594;Hook for pre-processing a test <em>immediately before</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called after framework-specific_<em>before</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestExecution"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,immediately,before,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,after,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,execution,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,execution,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,execution,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception;1519295386;Hook for pre-processing a test <em>immediately before</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called after framework-specific_<em>before</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestExecution"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,immediately,before,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,after,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,execution,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,execution,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,execution,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception;1519859718;Hook for pre-processing a test <em>immediately before</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called after framework-specific_<em>before</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestExecution"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,immediately,before,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,after,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,execution,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,execution,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,execution,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception;1519864746;Hook for pre-processing a test <em>immediately before</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called after framework-specific_<em>before</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestExecution"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,immediately,before,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,after,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,execution,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,execution,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,execution,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
TestContextManager -> public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception;1520441064;Hook for pre-processing a test <em>immediately before</em> execution of_the {@linkplain java.lang.reflect.Method test method} in the supplied_{@linkplain TestContext test context} &mdash_ for example, for timing_or logging purposes._<p>This method <strong>must</strong> be called after framework-specific_<em>before</em> lifecycle callbacks (e.g., methods annotated with JUnit 4's_{@link org.junit.Before @Before})._<p>The managed {@link TestContext} will be updated with the supplied_{@code testInstance} and {@code testMethod}._<p>An attempt will be made to give each registered_{@link TestExecutionListener} a chance to perform its pre-processing._If a listener throws an exception, however, the remaining registered_listeners will <strong>not</strong> be called._@param testInstance the current test instance (never {@code null})_@param testMethod the test method which is about to be executed on the_test instance_@throws Exception if a registered TestExecutionListener throws an exception_@since 5.0_@see #beforeTestMethod_@see #afterTestMethod_@see #beforeTestExecution_@see #afterTestExecution_@see #getTestExecutionListeners();public void beforeTestExecution(Object testInstance, Method testMethod) throws Exception {_		String callbackName = "beforeTestExecution"__		prepareForBeforeCallback(callbackName, testInstance, testMethod)___		for (TestExecutionListener testExecutionListener : getTestExecutionListeners()) {_			try {_				testExecutionListener.beforeTestExecution(getTestContext())__			}_			catch (Throwable ex) {_				handleBeforeException(ex, callbackName, testExecutionListener, testInstance, testMethod)__			}_		}_	};hook,for,pre,processing,a,test,em,immediately,before,em,execution,of,the,linkplain,java,lang,reflect,method,test,method,in,the,supplied,linkplain,test,context,test,context,mdash,for,example,for,timing,or,logging,purposes,p,this,method,strong,must,strong,be,called,after,framework,specific,em,before,em,lifecycle,callbacks,e,g,methods,annotated,with,junit,4,s,link,org,junit,before,before,p,the,managed,link,test,context,will,be,updated,with,the,supplied,code,test,instance,and,code,test,method,p,an,attempt,will,be,made,to,give,each,registered,link,test,execution,listener,a,chance,to,perform,its,pre,processing,if,a,listener,throws,an,exception,however,the,remaining,registered,listeners,will,strong,not,strong,be,called,param,test,instance,the,current,test,instance,never,code,null,param,test,method,the,test,method,which,is,about,to,be,executed,on,the,test,instance,throws,exception,if,a,registered,test,execution,listener,throws,an,exception,since,5,0,see,before,test,method,see,after,test,method,see,before,test,execution,see,after,test,execution,see,get,test,execution,listeners;public,void,before,test,execution,object,test,instance,method,test,method,throws,exception,string,callback,name,before,test,execution,prepare,for,before,callback,callback,name,test,instance,test,method,for,test,execution,listener,test,execution,listener,get,test,execution,listeners,try,test,execution,listener,before,test,execution,get,test,context,catch,throwable,ex,handle,before,exception,ex,callback,name,test,execution,listener,test,instance,test,method
