commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Access to request-related assertions.  */ ;/**  * Access to request-related assertions.  */ public static RequestResultMatchers request() {     return new RequestResultMatchers(). }
true;public,static;0;3;/**  * Access to assertions for the handler that handled the request.  */ ;/**  * Access to assertions for the handler that handled the request.  */ public static HandlerResultMatchers handler() {     return new HandlerResultMatchers(). }
true;public,static;0;3;/**  * Access to model-related assertions.  */ ;/**  * Access to model-related assertions.  */ public static ModelResultMatchers model() {     return new ModelResultMatchers(). }
true;public,static;0;3;/**  * Access to assertions on the selected view.  */ ;/**  * Access to assertions on the selected view.  */ public static ViewResultMatchers view() {     return new ViewResultMatchers(). }
true;public,static;0;3;/**  * Access to flash attribute assertions.  */ ;/**  * Access to flash attribute assertions.  */ public static FlashAttributeResultMatchers flash() {     return new FlashAttributeResultMatchers(). }
true;public,static;1;3;/**  * Asserts the request was forwarded to the given URL.  * <p>This method accepts only exact matches.  * @param expectedUrl the exact URL expected  */ ;/**  * Asserts the request was forwarded to the given URL.  * <p>This method accepts only exact matches.  * @param expectedUrl the exact URL expected  */ public static ResultMatcher forwardedUrl(@Nullable String expectedUrl) {     return result -> assertEquals("Forwarded URL", expectedUrl, result.getResponse().getForwardedUrl()). }
true;public,static;2;4;/**  * Asserts the request was forwarded to the given URL template.  * <p>This method accepts exact matches against the expanded and encoded URL template.  * @param urlTemplate a URL template. the expanded URL will be encoded  * @param uriVars zero or more URI variables to populate the template  * @see UriComponentsBuilder#fromUriString(String)  */ ;/**  * Asserts the request was forwarded to the given URL template.  * <p>This method accepts exact matches against the expanded and encoded URL template.  * @param urlTemplate a URL template. the expanded URL will be encoded  * @param uriVars zero or more URI variables to populate the template  * @see UriComponentsBuilder#fromUriString(String)  */ public static ResultMatcher forwardedUrlTemplate(String urlTemplate, Object... uriVars) {     String uri = UriComponentsBuilder.fromUriString(urlTemplate).buildAndExpand(uriVars).encode().toUriString().     return forwardedUrl(uri). }
true;public,static;1;8;/**  * Asserts the request was forwarded to the given URL.  * <p>This method accepts {@link org.springframework.util.AntPathMatcher}  * patterns.  * @param urlPattern an AntPath pattern to match against  * @since 4.0  * @see org.springframework.util.AntPathMatcher  */ ;/**  * Asserts the request was forwarded to the given URL.  * <p>This method accepts {@link org.springframework.util.AntPathMatcher}  * patterns.  * @param urlPattern an AntPath pattern to match against  * @since 4.0  * @see org.springframework.util.AntPathMatcher  */ public static ResultMatcher forwardedUrlPattern(String urlPattern) {     return result -> {         assertTrue("AntPath pattern", pathMatcher.isPattern(urlPattern)).         String url = result.getResponse().getForwardedUrl().         assertTrue("Forwarded URL does not match the expected URL pattern", (url != null && pathMatcher.match(urlPattern, url))).     }. }
true;public,static;1;3;/**  * Asserts the request was redirected to the given URL.  * <p>This method accepts only exact matches.  * @param expectedUrl the exact URL expected  */ ;/**  * Asserts the request was redirected to the given URL.  * <p>This method accepts only exact matches.  * @param expectedUrl the exact URL expected  */ public static ResultMatcher redirectedUrl(String expectedUrl) {     return result -> assertEquals("Redirected URL", expectedUrl, result.getResponse().getRedirectedUrl()). }
true;public,static;2;4;/**  * Asserts the request was redirected to the given URL template.  * <p>This method accepts exact matches against the expanded and encoded URL template.  * @param urlTemplate a URL template. the expanded URL will be encoded  * @param uriVars zero or more URI variables to populate the template  * @see UriComponentsBuilder#fromUriString(String)  */ ;/**  * Asserts the request was redirected to the given URL template.  * <p>This method accepts exact matches against the expanded and encoded URL template.  * @param urlTemplate a URL template. the expanded URL will be encoded  * @param uriVars zero or more URI variables to populate the template  * @see UriComponentsBuilder#fromUriString(String)  */ public static ResultMatcher redirectedUrlTemplate(String urlTemplate, Object... uriVars) {     String uri = UriComponentsBuilder.fromUriString(urlTemplate).buildAndExpand(uriVars).encode().toUriString().     return redirectedUrl(uri). }
true;public,static;1;8;/**  * Asserts the request was redirected to the given URL.  * <p>This method accepts {@link org.springframework.util.AntPathMatcher}  * patterns.  * @param urlPattern an AntPath pattern to match against  * @since 4.0  * @see org.springframework.util.AntPathMatcher  */ ;/**  * Asserts the request was redirected to the given URL.  * <p>This method accepts {@link org.springframework.util.AntPathMatcher}  * patterns.  * @param urlPattern an AntPath pattern to match against  * @since 4.0  * @see org.springframework.util.AntPathMatcher  */ public static ResultMatcher redirectedUrlPattern(String urlPattern) {     return result -> {         assertTrue("No Ant-style path pattern", pathMatcher.isPattern(urlPattern)).         String url = result.getResponse().getRedirectedUrl().         assertTrue("Redirected URL does not match the expected URL pattern", (url != null && pathMatcher.match(urlPattern, url))).     }. }
true;public,static;0;3;/**  * Access to response status assertions.  */ ;/**  * Access to response status assertions.  */ public static StatusResultMatchers status() {     return new StatusResultMatchers(). }
true;public,static;0;3;/**  * Access to response header assertions.  */ ;/**  * Access to response header assertions.  */ public static HeaderResultMatchers header() {     return new HeaderResultMatchers(). }
true;public,static;0;3;/**  * Access to response body assertions.  */ ;/**  * Access to response body assertions.  */ public static ContentResultMatchers content() {     return new ContentResultMatchers(). }
true;public,static;2;3;/**  * Access to response body assertions using a  * <a href="https://github.com/jayway/JsonPath">JsonPath</a> expression  * to inspect a specific subset of the body.  * <p>The JSON path expression can be a parameterized string using  * formatting specifiers as defined in  * {@link String#format(String, Object...)}.  * @param expression the JSON path expression, optionally parameterized with arguments  * @param args arguments to parameterize the JSON path expression with  */ ;/**  * Access to response body assertions using a  * <a href="https://github.com/jayway/JsonPath">JsonPath</a> expression  * to inspect a specific subset of the body.  * <p>The JSON path expression can be a parameterized string using  * formatting specifiers as defined in  * {@link String#format(String, Object...)}.  * @param expression the JSON path expression, optionally parameterized with arguments  * @param args arguments to parameterize the JSON path expression with  */ public static JsonPathResultMatchers jsonPath(String expression, Object... args) {     return new JsonPathResultMatchers(expression, args). }
true;public,static;2;3;/**  * Access to response body assertions using a  * <a href="https://github.com/jayway/JsonPath">JsonPath</a> expression  * to inspect a specific subset of the body and a Hamcrest matcher for  * asserting the value found at the JSON path.  * @param expression the JSON path expression  * @param matcher a matcher for the value expected at the JSON path  */ ;/**  * Access to response body assertions using a  * <a href="https://github.com/jayway/JsonPath">JsonPath</a> expression  * to inspect a specific subset of the body and a Hamcrest matcher for  * asserting the value found at the JSON path.  * @param expression the JSON path expression  * @param matcher a matcher for the value expected at the JSON path  */ public static <T> ResultMatcher jsonPath(String expression, Matcher<T> matcher) {     return new JsonPathResultMatchers(expression).value(matcher). }
true;public,static;2;3;/**  * Access to response body assertions using an XPath expression to  * inspect a specific subset of the body.  * <p>The XPath expression can be a parameterized string using formatting  * specifiers as defined in {@link String#format(String, Object...)}.  * @param expression the XPath expression, optionally parameterized with arguments  * @param args arguments to parameterize the XPath expression with  */ ;/**  * Access to response body assertions using an XPath expression to  * inspect a specific subset of the body.  * <p>The XPath expression can be a parameterized string using formatting  * specifiers as defined in {@link String#format(String, Object...)}.  * @param expression the XPath expression, optionally parameterized with arguments  * @param args arguments to parameterize the XPath expression with  */ public static XpathResultMatchers xpath(String expression, Object... args) throws XPathExpressionException {     return new XpathResultMatchers(expression, null, args). }
true;public,static;3;5;/**  * Access to response body assertions using an XPath expression to  * inspect a specific subset of the body.  * <p>The XPath expression can be a parameterized string using formatting  * specifiers as defined in {@link String#format(String, Object...)}.  * @param expression the XPath expression, optionally parameterized with arguments  * @param namespaces namespaces referenced in the XPath expression  * @param args arguments to parameterize the XPath expression with  */ ;/**  * Access to response body assertions using an XPath expression to  * inspect a specific subset of the body.  * <p>The XPath expression can be a parameterized string using formatting  * specifiers as defined in {@link String#format(String, Object...)}.  * @param expression the XPath expression, optionally parameterized with arguments  * @param namespaces namespaces referenced in the XPath expression  * @param args arguments to parameterize the XPath expression with  */ public static XpathResultMatchers xpath(String expression, Map<String, String> namespaces, Object... args) throws XPathExpressionException {     return new XpathResultMatchers(expression, namespaces, args). }
true;public,static;0;3;/**  * Access to response cookie assertions.  */ ;/**  * Access to response cookie assertions.  */ public static CookieResultMatchers cookie() {     return new CookieResultMatchers(). }
