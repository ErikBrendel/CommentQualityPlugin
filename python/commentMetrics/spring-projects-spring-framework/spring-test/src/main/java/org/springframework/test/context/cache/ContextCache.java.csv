commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Determine whether there is a cached context for the given key.  * @param key the context key (never {@code null})  * @return {@code true} if the cache contains a context with the given key  */ ;/**  * Determine whether there is a cached context for the given key.  * @param key the context key (never {@code null})  * @return {@code true} if the cache contains a context with the given key  */ boolean contains(MergedContextConfiguration key).
true;;1;2;/**  * Obtain a cached {@code ApplicationContext} for the given key.  * <p>The {@linkplain #getHitCount() hit} and {@linkplain #getMissCount() miss}  * counts must be updated accordingly.  * @param key the context key (never {@code null})  * @return the corresponding {@code ApplicationContext} instance, or {@code null}  * if not found in the cache  * @see #remove  */ ;/**  * Obtain a cached {@code ApplicationContext} for the given key.  * <p>The {@linkplain #getHitCount() hit} and {@linkplain #getMissCount() miss}  * counts must be updated accordingly.  * @param key the context key (never {@code null})  * @return the corresponding {@code ApplicationContext} instance, or {@code null}  * if not found in the cache  * @see #remove  */ @Nullable ApplicationContext get(MergedContextConfiguration key).
true;;2;1;/**  * Explicitly add an {@code ApplicationContext} instance to the cache  * under the given key, potentially honoring a custom eviction policy.  * @param key the context key (never {@code null})  * @param context the {@code ApplicationContext} instance (never {@code null})  */ ;/**  * Explicitly add an {@code ApplicationContext} instance to the cache  * under the given key, potentially honoring a custom eviction policy.  * @param key the context key (never {@code null})  * @param context the {@code ApplicationContext} instance (never {@code null})  */ void put(MergedContextConfiguration key, ApplicationContext context).
true;;2;1;/**  * Remove the context with the given key from the cache and explicitly  * {@linkplain org.springframework.context.ConfigurableApplicationContext#close() close}  * it if it is an instance of {@code ConfigurableApplicationContext}.  * <p>Generally speaking, this method should be called to properly evict  * a context from the cache (e.g., due to a custom eviction policy) or if  * the state of a singleton bean has been modified, potentially affecting  * future interaction with the context.  * <p>In addition, the semantics of the supplied {@code HierarchyMode} must  * be honored. See the Javadoc for {@link HierarchyMode} for details.  * @param key the context key. never {@code null}  * @param hierarchyMode the hierarchy mode. may be {@code null} if the context  * is not part of a hierarchy  */ ;/**  * Remove the context with the given key from the cache and explicitly  * {@linkplain org.springframework.context.ConfigurableApplicationContext#close() close}  * it if it is an instance of {@code ConfigurableApplicationContext}.  * <p>Generally speaking, this method should be called to properly evict  * a context from the cache (e.g., due to a custom eviction policy) or if  * the state of a singleton bean has been modified, potentially affecting  * future interaction with the context.  * <p>In addition, the semantics of the supplied {@code HierarchyMode} must  * be honored. See the Javadoc for {@link HierarchyMode} for details.  * @param key the context key. never {@code null}  * @param hierarchyMode the hierarchy mode. may be {@code null} if the context  * is not part of a hierarchy  */ void remove(MergedContextConfiguration key, @Nullable HierarchyMode hierarchyMode).
true;;0;1;/**  * Determine the number of contexts currently stored in the cache.  * <p>If the cache contains more than {@code Integer.MAX_VALUE} elements,  * this method must return {@code Integer.MAX_VALUE}.  */ ;/**  * Determine the number of contexts currently stored in the cache.  * <p>If the cache contains more than {@code Integer.MAX_VALUE} elements,  * this method must return {@code Integer.MAX_VALUE}.  */ int size().
true;;0;1;/**  * Determine the number of parent contexts currently tracked within the cache.  */ ;/**  * Determine the number of parent contexts currently tracked within the cache.  */ int getParentContextCount().
true;;0;1;/**  * Get the overall hit count for this cache.  * <p>A <em>hit</em> is any access to the cache that returns a non-null  * context for the queried key.  */ ;/**  * Get the overall hit count for this cache.  * <p>A <em>hit</em> is any access to the cache that returns a non-null  * context for the queried key.  */ int getHitCount().
true;;0;1;/**  * Get the overall miss count for this cache.  * <p>A <em>miss</em> is any access to the cache that returns a {@code null}  * context for the queried key.  */ ;/**  * Get the overall miss count for this cache.  * <p>A <em>miss</em> is any access to the cache that returns a {@code null}  * context for the queried key.  */ int getMissCount().
true;;0;1;/**  * Reset all state maintained by this cache including statistics.  * @see #clear()  * @see #clearStatistics()  */ ;/**  * Reset all state maintained by this cache including statistics.  * @see #clear()  * @see #clearStatistics()  */ void reset().
true;;0;1;/**  * Clear all contexts from the cache, clearing context hierarchy information as well.  */ ;/**  * Clear all contexts from the cache, clearing context hierarchy information as well.  */ void clear().
true;;0;1;/**  * Clear hit and miss count statistics for the cache (i.e., reset counters to zero).  */ ;/**  * Clear hit and miss count statistics for the cache (i.e., reset counters to zero).  */ void clearStatistics().
true;;0;1;/**  * Log the statistics for this {@code ContextCache} at {@code DEBUG} level  * using the {@value #CONTEXT_CACHE_LOGGING_CATEGORY} logging category.  * <p>The following information should be logged.  * <ul>  * <li>name of the concrete {@code ContextCache} implementation</li>  * <li>{@linkplain #size}</li>  * <li>{@linkplain #getParentContextCount() parent context count}</li>  * <li>{@linkplain #getHitCount() hit count}</li>  * <li>{@linkplain #getMissCount() miss count}</li>  * <li>any other information useful for monitoring the state of this cache</li>  * </ul>  */ ;/**  * Log the statistics for this {@code ContextCache} at {@code DEBUG} level  * using the {@value #CONTEXT_CACHE_LOGGING_CATEGORY} logging category.  * <p>The following information should be logged.  * <ul>  * <li>name of the concrete {@code ContextCache} implementation</li>  * <li>{@linkplain #size}</li>  * <li>{@linkplain #getParentContextCount() parent context count}</li>  * <li>{@linkplain #getHitCount() hit count}</li>  * <li>{@linkplain #getMissCount() miss count}</li>  * <li>any other information useful for monitoring the state of this cache</li>  * </ul>  */ void logStatistics().
