commented;modifiers;parameterAmount;loc;comment;code
true;public;2;3;/**  * Expect a header with the given name to match the specified values.  */ ;/**  * Expect a header with the given name to match the specified values.  */ public WebTestClient.ResponseSpec valueEquals(String headerName, String... values) {     return assertHeader(headerName, Arrays.asList(values), getHeaders().get(headerName)). }
true;public;2;6;/**  * Match the primary value of the response header with a regex.  * @param name the header name  * @param pattern the regex pattern  */ ;/**  * Match the primary value of the response header with a regex.  * @param name the header name  * @param pattern the regex pattern  */ public WebTestClient.ResponseSpec valueMatches(String name, String pattern) {     String value = getRequiredValue(name).     String message = getMessage(name) + "=[" + value + "] does not match [" + pattern + "]".     this.exchangeResult.assertWithDiagnostics(() -> AssertionErrors.assertTrue(message, value.matches(pattern))).     return this.responseSpec. }
true;public;2;5;/**  * Assert the primary value of the response header with a {@link Matcher}.  * @param name the header name  * @param matcher the matcher to sue  * @since 5.1  */ ;/**  * Assert the primary value of the response header with a {@link Matcher}.  * @param name the header name  * @param matcher the matcher to sue  * @since 5.1  */ public WebTestClient.ResponseSpec value(String name, Matcher<? super String> matcher) {     String value = getRequiredValue(name).     this.exchangeResult.assertWithDiagnostics(() -> MatcherAssert.assertThat(value, matcher)).     return this.responseSpec. }
true;public;2;5;/**  * Assert the primary value of the response header with a {@link Matcher}.  * @param name the header name  * @param consumer the matcher to sue  * @since 5.1  */ ;/**  * Assert the primary value of the response header with a {@link Matcher}.  * @param name the header name  * @param consumer the matcher to sue  * @since 5.1  */ public WebTestClient.ResponseSpec value(String name, Consumer<String> consumer) {     String value = getRequiredValue(name).     this.exchangeResult.assertWithDiagnostics(() -> consumer.accept(value)).     return this.responseSpec. }
false;private;1;7;;private String getRequiredValue(String name) {     String value = getHeaders().getFirst(name).     if (value == null) {         AssertionErrors.fail(getMessage(name) + " not found").     }     return value. }
true;public;1;7;/**  * Expect that the header with the given name is present.  * @since 5.0.3  */ ;/**  * Expect that the header with the given name is present.  * @since 5.0.3  */ public WebTestClient.ResponseSpec exists(String name) {     if (!getHeaders().containsKey(name)) {         String message = getMessage(name) + " does not exist".         this.exchangeResult.assertWithDiagnostics(() -> AssertionErrors.fail(message)).     }     return this.responseSpec. }
true;public;1;7;/**  * Expect that the header with the given name is not present.  */ ;/**  * Expect that the header with the given name is not present.  */ public WebTestClient.ResponseSpec doesNotExist(String name) {     if (getHeaders().containsKey(name)) {         String message = getMessage(name) + " exists with value=[" + getHeaders().getFirst(name) + "]".         this.exchangeResult.assertWithDiagnostics(() -> AssertionErrors.fail(message)).     }     return this.responseSpec. }
true;public;1;3;/**  * Expect a "Cache-Control" header with the given value.  */ ;/**  * Expect a "Cache-Control" header with the given value.  */ public WebTestClient.ResponseSpec cacheControl(CacheControl cacheControl) {     return assertHeader("Cache-Control", cacheControl.getHeaderValue(), getHeaders().getCacheControl()). }
true;public;1;3;/**  * Expect a "Content-Disposition" header with the given value.  */ ;/**  * Expect a "Content-Disposition" header with the given value.  */ public WebTestClient.ResponseSpec contentDisposition(ContentDisposition contentDisposition) {     return assertHeader("Content-Disposition", contentDisposition, getHeaders().getContentDisposition()). }
true;public;1;3;/**  * Expect a "Content-Length" header with the given value.  */ ;/**  * Expect a "Content-Length" header with the given value.  */ public WebTestClient.ResponseSpec contentLength(long contentLength) {     return assertHeader("Content-Length", contentLength, getHeaders().getContentLength()). }
true;public;1;3;/**  * Expect a "Content-Type" header with the given value.  */ ;/**  * Expect a "Content-Type" header with the given value.  */ public WebTestClient.ResponseSpec contentType(MediaType mediaType) {     return assertHeader("Content-Type", mediaType, getHeaders().getContentType()). }
true;public;1;3;/**  * Expect a "Content-Type" header with the given value.  */ ;/**  * Expect a "Content-Type" header with the given value.  */ public WebTestClient.ResponseSpec contentType(String mediaType) {     return contentType(MediaType.parseMediaType(mediaType)). }
true;public;1;7;/**  * Expect a "Content-Type" header compatible with the given value.  */ ;/**  * Expect a "Content-Type" header compatible with the given value.  */ public WebTestClient.ResponseSpec contentTypeCompatibleWith(MediaType mediaType) {     MediaType actual = getHeaders().getContentType().     String message = getMessage("Content-Type") + "=[" + actual + "] is not compatible with [" + mediaType + "]".     this.exchangeResult.assertWithDiagnostics(() -> AssertionErrors.assertTrue(message, (actual != null && actual.isCompatibleWith(mediaType)))).     return this.responseSpec. }
true;public;1;3;/**  * Expect a "Content-Type" header compatible with the given value.  */ ;/**  * Expect a "Content-Type" header compatible with the given value.  */ public WebTestClient.ResponseSpec contentTypeCompatibleWith(String mediaType) {     return contentTypeCompatibleWith(MediaType.parseMediaType(mediaType)). }
true;public;1;3;/**  * Expect an "Expires" header with the given value.  */ ;/**  * Expect an "Expires" header with the given value.  */ public WebTestClient.ResponseSpec expires(long expires) {     return assertHeader("Expires", expires, getHeaders().getExpires()). }
true;public;1;3;/**  * Expect a "Last-Modified" header with the given value.  */ ;/**  * Expect a "Last-Modified" header with the given value.  */ public WebTestClient.ResponseSpec lastModified(long lastModified) {     return assertHeader("Last-Modified", lastModified, getHeaders().getLastModified()). }
false;private;0;3;;private HttpHeaders getHeaders() {     return this.exchangeResult.getResponseHeaders(). }
false;private;1;3;;private String getMessage(String headerName) {     return "Response header '" + headerName + "'". }
false;private;3;7;;private WebTestClient.ResponseSpec assertHeader(String name, @Nullable Object expected, @Nullable Object actual) {     this.exchangeResult.assertWithDiagnostics(() -> {         String message = getMessage(name).         AssertionErrors.assertEquals(message, expected, actual).     }).     return this.responseSpec. }
