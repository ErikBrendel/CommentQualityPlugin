# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1429465455;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@code CacheAwareContextLoaderDelegate} implementation with_custom {@link ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1429559310;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache}_support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1432125256;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1432246071;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1432856630;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1434234880;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1457462209;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1457727806;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1458754760;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1459174667;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1459842161;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1465306936;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1467730834;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1468334463;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1468426720;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1495868221;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1496955179;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1500495740;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1515772066;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1516210145;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate();1519295386;Get the {@link CacheAwareContextLoaderDelegate} to use for transparent_interaction with the {@code ContextCache}._<p>The default implementation simply delegates to_{@code getBootstrapContext().getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a custom_{@code CacheAwareContextLoaderDelegate} implementation with custom_{@link org.springframework.test.context.cache.ContextCache ContextCache} support._@return the context loader delegate (never {@code null});protected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate() {_		return getBootstrapContext().getCacheAwareContextLoaderDelegate()__	};get,the,link,cache,aware,context,loader,delegate,to,use,for,transparent,interaction,with,the,code,context,cache,p,the,default,implementation,simply,delegates,to,code,get,bootstrap,context,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,code,cache,aware,context,loader,delegate,implementation,with,custom,link,org,springframework,test,context,cache,context,cache,context,cache,support,return,the,context,loader,delegate,never,code,null;protected,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,return,get,bootstrap,context,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final List<TestExecutionListener> getTestExecutionListeners();1397082962;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("@TestExecutionListeners is not present for class [" + clazz + "]: using defaults.")__			}_			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()___				AnnotationAttributes annAttrs = descriptor.getAnnotationAttributes()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format(_						"Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].", annAttrs,_						declaringClass))__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("value")__				Class<? extends TestExecutionListener>[] listenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("listeners")__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					String msg = String.format(_						"Class [%s] has been configured with @TestExecutionListeners' 'value' [%s] "_								+ "and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass, ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses))__					logger.error(msg)__					throw new IllegalStateException(msg)__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				if (listenerClasses != null) {_					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))__				}__				descriptor = (annAttrs.getBoolean("inheritListeners") ? MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType) : null)__			}_		}__		List<TestExecutionListener> listeners = new ArrayList<TestExecutionListener>(classesList.size())__		for (Class<? extends TestExecutionListener> listenerClass : classesList) {_			try {_				listeners.add(BeanUtils.instantiateClass(listenerClass))__			}_			catch (NoClassDefFoundError err) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Could not instantiate TestExecutionListener [%s]. "_							+ "Specify custom listener classes or make the default listener classes "_							+ "(and their dependencies) available.", listenerClass.getName()))__				}_			}_		}_		return listeners__	};inherit,doc;suppress,warnings,unchecked,override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,test,execution,listeners,is,not,present,for,class,clazz,using,defaults,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,annotation,attributes,ann,attrs,descriptor,get,annotation,attributes,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,attributes,s,for,declaring,class,s,ann,attrs,declaring,class,class,extends,test,execution,listener,value,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,value,class,extends,test,execution,listener,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,string,msg,string,format,class,s,has,been,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,if,listener,classes,null,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,descriptor,ann,attrs,get,boolean,inherit,listeners,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,null,list,test,execution,listener,listeners,new,array,list,test,execution,listener,classes,list,size,for,class,extends,test,execution,listener,listener,class,classes,list,try,listeners,add,bean,utils,instantiate,class,listener,class,catch,no,class,def,found,error,err,if,logger,is,info,enabled,logger,info,string,format,could,not,instantiate,test,execution,listener,s,specify,custom,listener,classes,or,make,the,default,listener,classes,and,their,dependencies,available,listener,class,get,name,return,listeners
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final List<TestExecutionListener> getTestExecutionListeners();1398638841;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("@TestExecutionListeners is not present for class [" + clazz + "]: using defaults.")__			}_			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()___				AnnotationAttributes annAttrs = descriptor.getAnnotationAttributes()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format(_						"Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].", annAttrs,_						declaringClass))__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("value")__				Class<? extends TestExecutionListener>[] listenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("listeners")__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					String msg = String.format(_						"Class [%s] has been configured with @TestExecutionListeners' 'value' [%s] " +_								"and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass, ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses))__					logger.error(msg)__					throw new IllegalStateException(msg)__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				if (listenerClasses != null) {_					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))__				}__				descriptor = (annAttrs.getBoolean("inheritListeners") ? MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType) : null)__			}_		}__		List<TestExecutionListener> listeners = new ArrayList<TestExecutionListener>(classesList.size())__		for (Class<? extends TestExecutionListener> listenerClass : classesList) {_			try {_				listeners.add(BeanUtils.instantiateClass(listenerClass))__			}_			catch (NoClassDefFoundError err) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Could not instantiate TestExecutionListener [%s]. " +_							"Specify custom listener classes or make the default listener classes " +_							"(and their dependencies) available.", listenerClass.getName()))__				}_			}_		}_		return listeners__	};inherit,doc;suppress,warnings,unchecked,override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,test,execution,listeners,is,not,present,for,class,clazz,using,defaults,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,annotation,attributes,ann,attrs,descriptor,get,annotation,attributes,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,attributes,s,for,declaring,class,s,ann,attrs,declaring,class,class,extends,test,execution,listener,value,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,value,class,extends,test,execution,listener,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,string,msg,string,format,class,s,has,been,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,if,listener,classes,null,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,descriptor,ann,attrs,get,boolean,inherit,listeners,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,null,list,test,execution,listener,listeners,new,array,list,test,execution,listener,classes,list,size,for,class,extends,test,execution,listener,listener,class,classes,list,try,listeners,add,bean,utils,instantiate,class,listener,class,catch,no,class,def,found,error,err,if,logger,is,info,enabled,logger,info,string,format,could,not,instantiate,test,execution,listener,s,specify,custom,listener,classes,or,make,the,default,listener,classes,and,their,dependencies,available,listener,class,get,name,return,listeners
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final List<TestExecutionListener> getTestExecutionListeners();1400509883;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("@TestExecutionListeners is not present for class [" + clazz + "]: using defaults.")__			}_			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				AnnotationAttributes annAttrs = descriptor.getAnnotationAttributes()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format("Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].",_							annAttrs, declaringClass))__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses =_						(Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("value")__				Class<? extends TestExecutionListener>[] listenerClasses =_						(Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("listeners")__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					throw new IllegalStateException(_							String.format("Class [%s] has been configured with @TestExecutionListeners' 'value' [%s]" +_											" and 'listeners' [%s] attributes. Use one or the other, but not both.",_							declaringClass, ObjectUtils.nullSafeToString(valueListenerClasses),_							ObjectUtils.nullSafeToString(listenerClasses)))__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				if (listenerClasses != null) {_					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))__				}_				descriptor = (annAttrs.getBoolean("inheritListeners") ? MetaAnnotationUtils.findAnnotationDescriptor(_						descriptor.getRootDeclaringClass().getSuperclass(), annotationType) : null)__			}_		}__		List<TestExecutionListener> listeners = new ArrayList<TestExecutionListener>(classesList.size())__		for (Class<? extends TestExecutionListener> listenerClass : classesList) {_			NoClassDefFoundError ncdfe = null__			try {_				listeners.add(BeanUtils.instantiateClass(listenerClass))__			}_			catch (NoClassDefFoundError err) {_				ncdfe = err__			}_			catch (BeanInstantiationException ex) {_				if (ex.getCause() instanceof NoClassDefFoundError) {_					ncdfe = (NoClassDefFoundError) ex.getCause()__				}_			}_			if (ncdfe != null) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Could not instantiate TestExecutionListener [%s]. " +_							"Specify custom listener classes or make the default listener classes " +_							"(and their dependencies) available. Offending class: [%s]",_							listenerClass.getName(), ncdfe.getMessage()))__				}_			}_		}_		return listeners__	};inherit,doc;suppress,warnings,unchecked,override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,test,execution,listeners,is,not,present,for,class,clazz,using,defaults,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,annotation,attributes,ann,attrs,descriptor,get,annotation,attributes,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,attributes,s,for,declaring,class,s,ann,attrs,declaring,class,class,extends,test,execution,listener,value,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,value,class,extends,test,execution,listener,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,throw,new,illegal,state,exception,string,format,class,s,has,been,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,if,listener,classes,null,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,descriptor,ann,attrs,get,boolean,inherit,listeners,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,null,list,test,execution,listener,listeners,new,array,list,test,execution,listener,classes,list,size,for,class,extends,test,execution,listener,listener,class,classes,list,no,class,def,found,error,ncdfe,null,try,listeners,add,bean,utils,instantiate,class,listener,class,catch,no,class,def,found,error,err,ncdfe,err,catch,bean,instantiation,exception,ex,if,ex,get,cause,instanceof,no,class,def,found,error,ncdfe,no,class,def,found,error,ex,get,cause,if,ncdfe,null,if,logger,is,info,enabled,logger,info,string,format,could,not,instantiate,test,execution,listener,s,specify,custom,listener,classes,or,make,the,default,listener,classes,and,their,dependencies,available,offending,class,s,listener,class,get,name,ncdfe,get,message,return,listeners
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final List<TestExecutionListener> getTestExecutionListeners();1400523530;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()___		AnnotationDescriptor<TestExecutionListeners> descriptor =_				MetaAnnotationUtils.findAnnotationDescriptor(clazz, annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("@TestExecutionListeners is not present for class [" + clazz.getName() + "]: using defaults.")__			}_			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				AnnotationAttributes annAttrs = descriptor.getAnnotationAttributes()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format("Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].",_							annAttrs, declaringClass.getName()))__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses =_						(Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("value")__				Class<? extends TestExecutionListener>[] listenerClasses =_						(Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("listeners")__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					throw new IllegalStateException(String.format("Class [%s] configured with @TestExecutionListeners' " +_							"'value' [%s] and 'listeners' [%s] attributes. Use one or the other, but not both.",_							declaringClass.getName(), ObjectUtils.nullSafeToString(valueListenerClasses),_							ObjectUtils.nullSafeToString(listenerClasses)))__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				if (listenerClasses != null) {_					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))__				}_				descriptor = (annAttrs.getBoolean("inheritListeners") ? MetaAnnotationUtils.findAnnotationDescriptor(_						descriptor.getRootDeclaringClass().getSuperclass(), annotationType) : null)__			}_		}__		List<TestExecutionListener> listeners = new ArrayList<TestExecutionListener>(classesList.size())__		for (Class<? extends TestExecutionListener> listenerClass : classesList) {_			NoClassDefFoundError ncdfe = null__			try {_				listeners.add(BeanUtils.instantiateClass(listenerClass))__			}_			catch (NoClassDefFoundError err) {_				ncdfe = err__			}_			catch (BeanInstantiationException ex) {_				if (ex.getCause() instanceof NoClassDefFoundError) {_					ncdfe = (NoClassDefFoundError) ex.getCause()__				}_			}_			if (ncdfe != null) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Could not instantiate TestExecutionListener [%s]. " +_							"Specify custom listener classes or make the default listener classes " +_							"(and their required dependencies) available. Offending class: [%s]",_							listenerClass.getName(), ncdfe.getMessage()))__				}_			}_		}_		return listeners__	};inherit,doc;suppress,warnings,unchecked,override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,test,execution,listeners,is,not,present,for,class,clazz,get,name,using,defaults,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,annotation,attributes,ann,attrs,descriptor,get,annotation,attributes,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,attributes,s,for,declaring,class,s,ann,attrs,declaring,class,get,name,class,extends,test,execution,listener,value,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,value,class,extends,test,execution,listener,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,throw,new,illegal,state,exception,string,format,class,s,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,get,name,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,if,listener,classes,null,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,descriptor,ann,attrs,get,boolean,inherit,listeners,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,null,list,test,execution,listener,listeners,new,array,list,test,execution,listener,classes,list,size,for,class,extends,test,execution,listener,listener,class,classes,list,no,class,def,found,error,ncdfe,null,try,listeners,add,bean,utils,instantiate,class,listener,class,catch,no,class,def,found,error,err,ncdfe,err,catch,bean,instantiation,exception,ex,if,ex,get,cause,instanceof,no,class,def,found,error,ncdfe,no,class,def,found,error,ex,get,cause,if,ncdfe,null,if,logger,is,info,enabled,logger,info,string,format,could,not,instantiate,test,execution,listener,s,specify,custom,listener,classes,or,make,the,default,listener,classes,and,their,required,dependencies,available,offending,class,s,listener,class,get,name,ncdfe,get,message,return,listeners
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final List<TestExecutionListener> getTestExecutionListeners();1407967503;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("@TestExecutionListeners is not present for class [" + clazz.getName()_						+ "]: using defaults.")__			}_			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				AnnotationAttributes annAttrs = descriptor.getAnnotationAttributes()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format(_						"Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].", annAttrs,_						declaringClass.getName()))__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("value")__				Class<? extends TestExecutionListener>[] listenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("listeners")__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					throw new IllegalStateException(String.format(_						"Class [%s] configured with @TestExecutionListeners' "_								+ "'value' [%s] and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass.getName(), ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses)))__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				if (listenerClasses != null) {_					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))__				}_				descriptor = (annAttrs.getBoolean("inheritListeners") ? MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType) : null)__			}_		}__		List<TestExecutionListener> listeners = new ArrayList<TestExecutionListener>(classesList.size())__		for (Class<? extends TestExecutionListener> listenerClass : classesList) {_			NoClassDefFoundError ncdfe = null__			try {_				listeners.add(BeanUtils.instantiateClass(listenerClass))__			}_			catch (NoClassDefFoundError err) {_				ncdfe = err__			}_			catch (BeanInstantiationException ex) {_				if (ex.getCause() instanceof NoClassDefFoundError) {_					ncdfe = (NoClassDefFoundError) ex.getCause()__				}_			}_			if (ncdfe != null) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("Could not instantiate TestExecutionListener [%s]. "_							+ "Specify custom listener classes or make the default listener classes "_							+ "(and their required dependencies) available. Offending class: [%s]",_						listenerClass.getName(), ncdfe.getMessage()))__				}_			}_		}_		return listeners__	};inherit,doc;suppress,warnings,unchecked,override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,test,execution,listeners,is,not,present,for,class,clazz,get,name,using,defaults,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,annotation,attributes,ann,attrs,descriptor,get,annotation,attributes,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,attributes,s,for,declaring,class,s,ann,attrs,declaring,class,get,name,class,extends,test,execution,listener,value,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,value,class,extends,test,execution,listener,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,throw,new,illegal,state,exception,string,format,class,s,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,get,name,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,if,listener,classes,null,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,descriptor,ann,attrs,get,boolean,inherit,listeners,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,null,list,test,execution,listener,listeners,new,array,list,test,execution,listener,classes,list,size,for,class,extends,test,execution,listener,listener,class,classes,list,no,class,def,found,error,ncdfe,null,try,listeners,add,bean,utils,instantiate,class,listener,class,catch,no,class,def,found,error,err,ncdfe,err,catch,bean,instantiation,exception,ex,if,ex,get,cause,instanceof,no,class,def,found,error,ncdfe,no,class,def,found,error,ex,get,cause,if,ncdfe,null,if,logger,is,info,enabled,logger,info,string,format,could,not,instantiate,test,execution,listener,s,specify,custom,listener,classes,or,make,the,default,listener,classes,and,their,required,dependencies,available,offending,class,s,listener,class,get,name,ncdfe,get,message,return,listeners
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final List<TestExecutionListener> getTestExecutionListeners();1408048216;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_					clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				AnnotationAttributes annAttrs = descriptor.getAnnotationAttributes()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format(_						"Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].", annAttrs,_						declaringClass.getName()))__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("value")__				Class<? extends TestExecutionListener>[] listenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("listeners")__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					throw new IllegalStateException(String.format(_						"Class [%s] configured with @TestExecutionListeners' "_								+ "'value' [%s] and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass.getName(), ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses)))__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				if (listenerClasses != null) {_					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))__				}_				descriptor = (annAttrs.getBoolean("inheritListeners") ? MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType) : null)__			}_		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;suppress,warnings,unchecked,override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,annotation,attributes,ann,attrs,descriptor,get,annotation,attributes,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,attributes,s,for,declaring,class,s,ann,attrs,declaring,class,get,name,class,extends,test,execution,listener,value,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,value,class,extends,test,execution,listener,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,throw,new,illegal,state,exception,string,format,class,s,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,get,name,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,if,listener,classes,null,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,descriptor,ann,attrs,get,boolean,inherit,listeners,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,null,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final List<TestExecutionListener> getTestExecutionListeners();1408062102;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_					clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				AnnotationAttributes annAttrs = descriptor.getAnnotationAttributes()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format(_						"Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].", annAttrs,_						declaringClass.getName()))__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("value")__				Class<? extends TestExecutionListener>[] listenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("listeners")__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					throw new IllegalStateException(String.format(_						"Class [%s] configured with @TestExecutionListeners' "_								+ "'value' [%s] and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass.getName(), ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses)))__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				boolean inheritListeners = annAttrs.getBoolean("inheritListeners")__				AnnotationDescriptor<TestExecutionListeners> superDescriptor = MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null)_						&& (annAttrs.getEnum("mergeMode") == MergeMode.MERGE_WITH_DEFAULTS)) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format(_							"Merging default listeners with listeners configured via @TestExecutionListeners for class [%s].",_							clazz.getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<Class<? extends TestExecutionListener>>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;suppress,warnings,unchecked,override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,annotation,attributes,ann,attrs,descriptor,get,annotation,attributes,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,attributes,s,for,declaring,class,s,ann,attrs,declaring,class,get,name,class,extends,test,execution,listener,value,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,value,class,extends,test,execution,listener,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,throw,new,illegal,state,exception,string,format,class,s,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,get,name,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,boolean,inherit,listeners,ann,attrs,get,boolean,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,ann,attrs,get,enum,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,class,extends,test,execution,listener,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final List<TestExecutionListener> getTestExecutionListeners();1408063803;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_					clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				AnnotationAttributes annAttrs = descriptor.getAnnotationAttributes()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format(_						"Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].", annAttrs,_						declaringClass.getName()))__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("value")__				Class<? extends TestExecutionListener>[] listenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("listeners")__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					throw new IllegalStateException(String.format(_						"Class [%s] configured with @TestExecutionListeners' "_								+ "'value' [%s] and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass.getName(), ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses)))__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				boolean inheritListeners = annAttrs.getBoolean("inheritListeners")__				AnnotationDescriptor<TestExecutionListeners> superDescriptor = MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null)_						&& (annAttrs.getEnum("mergeMode") == MergeMode.MERGE_WITH_DEFAULTS)) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format(_							"Merging default listeners with listeners configured via @TestExecutionListeners for class [%s].",_							descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<Class<? extends TestExecutionListener>>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;suppress,warnings,unchecked,override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,annotation,attributes,ann,attrs,descriptor,get,annotation,attributes,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,attributes,s,for,declaring,class,s,ann,attrs,declaring,class,get,name,class,extends,test,execution,listener,value,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,value,class,extends,test,execution,listener,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,throw,new,illegal,state,exception,string,format,class,s,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,get,name,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,boolean,inherit,listeners,ann,attrs,get,boolean,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,ann,attrs,get,enum,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,class,extends,test,execution,listener,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final List<TestExecutionListener> getTestExecutionListeners();1413848647;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_					clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				AnnotationAttributes annAttrs = descriptor.getAnnotationAttributes()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format(_						"Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].", annAttrs,_						declaringClass.getName()))__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("value")__				Class<? extends TestExecutionListener>[] listenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("listeners")__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					throw new IllegalStateException(String.format(_						"Class [%s] configured with @TestExecutionListeners' "_								+ "'value' [%s] and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass.getName(), ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses)))__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				boolean inheritListeners = annAttrs.getBoolean("inheritListeners")__				AnnotationDescriptor<TestExecutionListeners> superDescriptor = MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null)_						&& (annAttrs.getEnum("mergeMode") == MergeMode.MERGE_WITH_DEFAULTS)) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format(_							"Merging default listeners with listeners configured via @TestExecutionListeners for class [%s].",_							descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<Class<? extends TestExecutionListener>>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;suppress,warnings,unchecked,override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,annotation,attributes,ann,attrs,descriptor,get,annotation,attributes,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,attributes,s,for,declaring,class,s,ann,attrs,declaring,class,get,name,class,extends,test,execution,listener,value,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,value,class,extends,test,execution,listener,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,throw,new,illegal,state,exception,string,format,class,s,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,get,name,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,boolean,inherit,listeners,ann,attrs,get,boolean,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,ann,attrs,get,enum,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,class,extends,test,execution,listener,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final List<TestExecutionListener> getTestExecutionListeners();1429051063;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_					clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				AnnotationAttributes annAttrs = descriptor.getAnnotationAttributes()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format(_						"Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].", annAttrs,_						declaringClass.getName()))__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("value")__				Class<? extends TestExecutionListener>[] listenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("listeners")__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					throw new IllegalStateException(String.format(_						"Class [%s] configured with @TestExecutionListeners' "_								+ "'value' [%s] and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass.getName(), ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses)))__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				boolean inheritListeners = annAttrs.getBoolean("inheritListeners")__				AnnotationDescriptor<TestExecutionListeners> superDescriptor = MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null)_						&& (annAttrs.getEnum("mergeMode") == MergeMode.MERGE_WITH_DEFAULTS)) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format(_							"Merging default listeners with listeners configured via @TestExecutionListeners for class [%s].",_							descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<Class<? extends TestExecutionListener>>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;suppress,warnings,unchecked,override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,annotation,attributes,ann,attrs,descriptor,get,annotation,attributes,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,attributes,s,for,declaring,class,s,ann,attrs,declaring,class,get,name,class,extends,test,execution,listener,value,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,value,class,extends,test,execution,listener,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,throw,new,illegal,state,exception,string,format,class,s,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,get,name,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,boolean,inherit,listeners,ann,attrs,get,boolean,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,ann,attrs,get,enum,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,class,extends,test,execution,listener,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final List<TestExecutionListener> getTestExecutionListeners();1429465455;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_					clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				AnnotationAttributes annAttrs = descriptor.getAnnotationAttributes()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format(_						"Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].", annAttrs,_						declaringClass.getName()))__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("value")__				Class<? extends TestExecutionListener>[] listenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("listeners")__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					throw new IllegalStateException(String.format(_						"Class [%s] configured with @TestExecutionListeners' "_								+ "'value' [%s] and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass.getName(), ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses)))__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				boolean inheritListeners = annAttrs.getBoolean("inheritListeners")__				AnnotationDescriptor<TestExecutionListeners> superDescriptor = MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null)_						&& (annAttrs.getEnum("mergeMode") == MergeMode.MERGE_WITH_DEFAULTS)) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format(_							"Merging default listeners with listeners configured via @TestExecutionListeners for class [%s].",_							descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<Class<? extends TestExecutionListener>>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;suppress,warnings,unchecked,override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,annotation,attributes,ann,attrs,descriptor,get,annotation,attributes,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,attributes,s,for,declaring,class,s,ann,attrs,declaring,class,get,name,class,extends,test,execution,listener,value,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,value,class,extends,test,execution,listener,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,throw,new,illegal,state,exception,string,format,class,s,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,get,name,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,boolean,inherit,listeners,ann,attrs,get,boolean,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,ann,attrs,get,enum,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,class,extends,test,execution,listener,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final List<TestExecutionListener> getTestExecutionListeners();1429559310;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_					clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				AnnotationAttributes annAttrs = descriptor.getAnnotationAttributes()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format(_						"Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].", annAttrs,_						declaringClass.getName()))__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("value")__				Class<? extends TestExecutionListener>[] listenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("listeners")__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					throw new IllegalStateException(String.format(_						"Class [%s] configured with @TestExecutionListeners' "_								+ "'value' [%s] and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass.getName(), ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses)))__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				boolean inheritListeners = annAttrs.getBoolean("inheritListeners")__				AnnotationDescriptor<TestExecutionListeners> superDescriptor = MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null)_						&& (annAttrs.getEnum("mergeMode") == MergeMode.MERGE_WITH_DEFAULTS)) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format(_							"Merging default listeners with listeners configured via @TestExecutionListeners for class [%s].",_							descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<Class<? extends TestExecutionListener>>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;suppress,warnings,unchecked,override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,annotation,attributes,ann,attrs,descriptor,get,annotation,attributes,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,attributes,s,for,declaring,class,s,ann,attrs,declaring,class,get,name,class,extends,test,execution,listener,value,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,value,class,extends,test,execution,listener,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,throw,new,illegal,state,exception,string,format,class,s,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,get,name,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,boolean,inherit,listeners,ann,attrs,get,boolean,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,ann,attrs,get,enum,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,class,extends,test,execution,listener,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final List<TestExecutionListener> getTestExecutionListeners();1432125256;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_					clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				AnnotationAttributes annAttrs = descriptor.getAnnotationAttributes()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format(_						"Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].", annAttrs,_						declaringClass.getName()))__				}__				Class<? extends TestExecutionListener>[] valueListenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("value")__				Class<? extends TestExecutionListener>[] listenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("listeners")__				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {_					throw new IllegalStateException(String.format(_						"Class [%s] configured with @TestExecutionListeners' "_								+ "'value' [%s] and 'listeners' [%s] attributes. Use one or the other, but not both.",_						declaringClass.getName(), ObjectUtils.nullSafeToString(valueListenerClasses),_						ObjectUtils.nullSafeToString(listenerClasses)))__				}_				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {_					listenerClasses = valueListenerClasses__				}__				boolean inheritListeners = annAttrs.getBoolean("inheritListeners")__				AnnotationDescriptor<TestExecutionListeners> superDescriptor = MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null)_						&& (annAttrs.getEnum("mergeMode") == MergeMode.MERGE_WITH_DEFAULTS)) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format(_							"Merging default listeners with listeners configured via @TestExecutionListeners for class [%s].",_							descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<Class<? extends TestExecutionListener>>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;suppress,warnings,unchecked,override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,annotation,attributes,ann,attrs,descriptor,get,annotation,attributes,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,attributes,s,for,declaring,class,s,ann,attrs,declaring,class,get,name,class,extends,test,execution,listener,value,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,value,class,extends,test,execution,listener,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,listeners,if,object,utils,is,empty,value,listener,classes,object,utils,is,empty,listener,classes,throw,new,illegal,state,exception,string,format,class,s,configured,with,test,execution,listeners,value,s,and,listeners,s,attributes,use,one,or,the,other,but,not,both,declaring,class,get,name,object,utils,null,safe,to,string,value,listener,classes,object,utils,null,safe,to,string,listener,classes,else,if,object,utils,is,empty,value,listener,classes,listener,classes,value,listener,classes,boolean,inherit,listeners,ann,attrs,get,boolean,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,ann,attrs,get,enum,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,class,extends,test,execution,listener,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final List<TestExecutionListener> getTestExecutionListeners();1432246071;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_					clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				AnnotationAttributes annAttrs = descriptor.getAnnotationAttributes()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format(_						"Retrieved @TestExecutionListeners attributes [%s] for declaring class [%s].", annAttrs,_						declaringClass.getName()))__				}__				Class<? extends TestExecutionListener>[] listenerClasses = (Class<? extends TestExecutionListener>[]) annAttrs.getClassArray("listeners")___				boolean inheritListeners = annAttrs.getBoolean("inheritListeners")__				AnnotationDescriptor<TestExecutionListeners> superDescriptor = MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null)_						&& (annAttrs.getEnum("mergeMode") == MergeMode.MERGE_WITH_DEFAULTS)) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format(_							"Merging default listeners with listeners configured via @TestExecutionListeners for class [%s].",_							descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<Class<? extends TestExecutionListener>>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;suppress,warnings,unchecked,override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,annotation,attributes,ann,attrs,descriptor,get,annotation,attributes,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,attributes,s,for,declaring,class,s,ann,attrs,declaring,class,get,name,class,extends,test,execution,listener,listener,classes,class,extends,test,execution,listener,ann,attrs,get,class,array,listeners,boolean,inherit,listeners,ann,attrs,get,boolean,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,ann,attrs,get,enum,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,class,extends,test,execution,listener,as,list,listener,classes,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,class,extends,test,execution,listener,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1398638841;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getBootstrapContext().getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_			ContextHierarchy.class) == null) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format(_					"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s]",_					testClass.getName()))__			}_			return new MergedContextConfiguration(testClass, null, null, null, null)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap = ContextLoaderUtils.buildContextHierarchyMap(testClass)___			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(declaringClass, reversedList, parentConfig,_					cacheAwareContextLoaderDelegate)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_				ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_				cacheAwareContextLoaderDelegate)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,bootstrap,context,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,test,class,get,name,return,new,merged,context,configuration,test,class,null,null,null,null,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1400509883;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getBootstrapContext().getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_			ContextHierarchy.class) == null) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s]",_						testClass.getName()))__			}_			return new MergedContextConfiguration(testClass, null, null, null, null)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap =_					ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(_						declaringClass, reversedList, parentConfig, cacheAwareContextLoaderDelegate)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_					ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_					cacheAwareContextLoaderDelegate)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,bootstrap,context,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,test,class,get,name,return,new,merged,context,configuration,test,class,null,null,null,null,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1400523530;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getBootstrapContext().getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_			ContextHierarchy.class) == null) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s]",_						testClass.getName()))__			}_			return new MergedContextConfiguration(testClass, null, null, null, null)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap =_					ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(_						declaringClass, reversedList, parentConfig, cacheAwareContextLoaderDelegate)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_					ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_					cacheAwareContextLoaderDelegate)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,bootstrap,context,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,test,class,get,name,return,new,merged,context,configuration,test,class,null,null,null,null,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1407967503;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getBootstrapContext().getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_			ContextHierarchy.class) == null) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format(_					"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s]",_					testClass.getName()))__			}_			return new MergedContextConfiguration(testClass, null, null, null, null)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap = ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(declaringClass, reversedList, parentConfig,_					cacheAwareContextLoaderDelegate)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_				ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_				cacheAwareContextLoaderDelegate)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,bootstrap,context,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,test,class,get,name,return,new,merged,context,configuration,test,class,null,null,null,null,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1408048216;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getBootstrapContext().getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_			ContextHierarchy.class) == null) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format(_					"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s]",_					testClass.getName()))__			}_			return new MergedContextConfiguration(testClass, null, null, null, null)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap = ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(declaringClass, reversedList, parentConfig,_					cacheAwareContextLoaderDelegate)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_				ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_				cacheAwareContextLoaderDelegate)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,bootstrap,context,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,test,class,get,name,return,new,merged,context,configuration,test,class,null,null,null,null,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1408062102;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getBootstrapContext().getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_			ContextHierarchy.class) == null) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format(_					"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s]",_					testClass.getName()))__			}_			return new MergedContextConfiguration(testClass, null, null, null, null)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap = ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(declaringClass, reversedList, parentConfig,_					cacheAwareContextLoaderDelegate)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_				ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_				cacheAwareContextLoaderDelegate)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,bootstrap,context,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,test,class,get,name,return,new,merged,context,configuration,test,class,null,null,null,null,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1408063803;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getBootstrapContext().getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_			ContextHierarchy.class) == null) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format(_					"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s]",_					testClass.getName()))__			}_			return new MergedContextConfiguration(testClass, null, null, null, null)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap = ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(declaringClass, reversedList, parentConfig,_					cacheAwareContextLoaderDelegate)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_				ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_				cacheAwareContextLoaderDelegate)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,bootstrap,context,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,test,class,get,name,return,new,merged,context,configuration,test,class,null,null,null,null,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1413848647;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getBootstrapContext().getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_			ContextHierarchy.class) == null) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format(_					"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s]",_					testClass.getName()))__			}_			return new MergedContextConfiguration(testClass, null, null, null, null)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap = ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(declaringClass, reversedList, parentConfig,_					cacheAwareContextLoaderDelegate)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_				ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_				cacheAwareContextLoaderDelegate)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,bootstrap,context,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,test,class,get,name,return,new,merged,context,configuration,test,class,null,null,null,null,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1429051063;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getBootstrapContext().getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_			ContextHierarchy.class) == null) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format(_					"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s]",_					testClass.getName()))__			}_			return new MergedContextConfiguration(testClass, null, null, null, null)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap = ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(declaringClass, reversedList, parentConfig,_					cacheAwareContextLoaderDelegate)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_				ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_				cacheAwareContextLoaderDelegate)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,bootstrap,context,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,test,class,get,name,return,new,merged,context,configuration,test,class,null,null,null,null,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1429465455;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_			ContextHierarchy.class) == null) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format(_					"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s]",_					testClass.getName()))__			}_			return new MergedContextConfiguration(testClass, null, null, null, null)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap = ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(declaringClass, reversedList, parentConfig,_					cacheAwareContextLoaderDelegate)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_				ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_				cacheAwareContextLoaderDelegate)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,test,class,get,name,return,new,merged,context,configuration,test,class,null,null,null,null,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1429559310;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_			ContextHierarchy.class) == null) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format(_					"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s]",_					testClass.getName()))__			}_			return new MergedContextConfiguration(testClass, null, null, null, null)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap = ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(declaringClass, reversedList, parentConfig,_					cacheAwareContextLoaderDelegate)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_				ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_				cacheAwareContextLoaderDelegate)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,test,class,get,name,return,new,merged,context,configuration,test,class,null,null,null,null,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1432125256;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_			ContextHierarchy.class) == null) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format(_					"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s]",_					testClass.getName()))__			}_			return new MergedContextConfiguration(testClass, null, null, null, null)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap = ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(declaringClass, reversedList, parentConfig,_					cacheAwareContextLoaderDelegate)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_				ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_				cacheAwareContextLoaderDelegate)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,test,class,get,name,return,new,merged,context,configuration,test,class,null,null,null,null,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1432246071;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_			ContextHierarchy.class) == null) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format(_					"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s]",_					testClass.getName()))__			}_			return new MergedContextConfiguration(testClass, null, null, null, null)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap = ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(declaringClass, reversedList, parentConfig,_					cacheAwareContextLoaderDelegate)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_				ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_				cacheAwareContextLoaderDelegate)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,test,class,get,name,return,new,merged,context,configuration,test,class,null,null,null,null,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1432856630;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_			ContextHierarchy.class) == null) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format(_					"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s]",_					testClass.getName()))__			}_			return new MergedContextConfiguration(testClass, null, null, null, null)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap = ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(declaringClass, reversedList, parentConfig,_					cacheAwareContextLoaderDelegate)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_				ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_				cacheAwareContextLoaderDelegate)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,test,class,get,name,return,new,merged,context,configuration,test,class,null,null,null,null,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1434234880;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_			ContextHierarchy.class) == null) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format(_					"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s]",_					testClass.getName()))__			}_			return new MergedContextConfiguration(testClass, null, null, null, null)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap = ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(declaringClass, reversedList, parentConfig,_					cacheAwareContextLoaderDelegate)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_				ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_				cacheAwareContextLoaderDelegate)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,test,class,get,name,return,new,merged,context,configuration,test,class,null,null,null,null,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1457462209;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_				ContextHierarchy.class) == null) {_			return buildDefaultMergedContextConfiguration(testClass, cacheAwareContextLoaderDelegate)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap = ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(declaringClass, reversedList, parentConfig,_					cacheAwareContextLoaderDelegate, true)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_				ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_				cacheAwareContextLoaderDelegate, true)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,return,build,default,merged,context,configuration,test,class,cache,aware,context,loader,delegate,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,true,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate,true
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1457727806;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_				ContextHierarchy.class) == null) {_			return buildDefaultMergedContextConfiguration(testClass, cacheAwareContextLoaderDelegate)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap = ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(declaringClass, reversedList, parentConfig,_					cacheAwareContextLoaderDelegate, true)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_				ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_				cacheAwareContextLoaderDelegate, true)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,return,build,default,merged,context,configuration,test,class,cache,aware,context,loader,delegate,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,true,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate,true
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1458754760;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_				ContextHierarchy.class) == null) {_			return buildDefaultMergedContextConfiguration(testClass, cacheAwareContextLoaderDelegate)__		}__		if (AnnotatedElementUtils.findMergedAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap = ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(declaringClass, reversedList, parentConfig,_					cacheAwareContextLoaderDelegate, true)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_				ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_				cacheAwareContextLoaderDelegate, true)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,return,build,default,merged,context,configuration,test,class,cache,aware,context,loader,delegate,if,annotated,element,utils,find,merged,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,true,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate,true
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1459174667;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(testClass, ContextConfiguration.class,_				ContextHierarchy.class) == null) {_			return buildDefaultMergedContextConfiguration(testClass, cacheAwareContextLoaderDelegate)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap = ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(declaringClass, reversedList, parentConfig,_					cacheAwareContextLoaderDelegate, true)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_				ContextLoaderUtils.resolveContextConfigurationAttributes(testClass), null,_				cacheAwareContextLoaderDelegate, true)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,return,build,default,merged,context,configuration,test,class,cache,aware,context,loader,delegate,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,true,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate,true
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1459842161;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(_				testClass, ContextConfiguration.class, ContextHierarchy.class) == null) {_			return buildDefaultMergedContextConfiguration(testClass, cacheAwareContextLoaderDelegate)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap =_					ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(_						declaringClass, reversedList, parentConfig, cacheAwareContextLoaderDelegate, true)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_					ContextLoaderUtils.resolveContextConfigurationAttributes(testClass),_					null, cacheAwareContextLoaderDelegate, true)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,return,build,default,merged,context,configuration,test,class,cache,aware,context,loader,delegate,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,true,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate,true
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1465306936;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(_				testClass, ContextConfiguration.class, ContextHierarchy.class) == null) {_			return buildDefaultMergedContextConfiguration(testClass, cacheAwareContextLoaderDelegate)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap =_					ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<ContextConfigurationAttributes>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(_						declaringClass, reversedList, parentConfig, cacheAwareContextLoaderDelegate, true)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_					ContextLoaderUtils.resolveContextConfigurationAttributes(testClass),_					null, cacheAwareContextLoaderDelegate, true)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,return,build,default,merged,context,configuration,test,class,cache,aware,context,loader,delegate,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,context,configuration,attributes,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,true,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate,true
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1467730834;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(_				testClass, ContextConfiguration.class, ContextHierarchy.class) == null) {_			return buildDefaultMergedContextConfiguration(testClass, cacheAwareContextLoaderDelegate)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap =_					ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(_						declaringClass, reversedList, parentConfig, cacheAwareContextLoaderDelegate, true)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_					ContextLoaderUtils.resolveContextConfigurationAttributes(testClass),_					null, cacheAwareContextLoaderDelegate, true)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,return,build,default,merged,context,configuration,test,class,cache,aware,context,loader,delegate,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,true,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate,true
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1468334463;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(_				testClass, ContextConfiguration.class, ContextHierarchy.class) == null) {_			return buildDefaultMergedContextConfiguration(testClass, cacheAwareContextLoaderDelegate)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap =_					ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(_						declaringClass, reversedList, parentConfig, cacheAwareContextLoaderDelegate, true)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_					ContextLoaderUtils.resolveContextConfigurationAttributes(testClass),_					null, cacheAwareContextLoaderDelegate, true)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,return,build,default,merged,context,configuration,test,class,cache,aware,context,loader,delegate,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,true,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate,true
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1468426720;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(_				testClass, ContextConfiguration.class, ContextHierarchy.class) == null) {_			return buildDefaultMergedContextConfiguration(testClass, cacheAwareContextLoaderDelegate)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap =_					ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(_						declaringClass, reversedList, parentConfig, cacheAwareContextLoaderDelegate, true)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_					ContextLoaderUtils.resolveContextConfigurationAttributes(testClass),_					null, cacheAwareContextLoaderDelegate, true)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,return,build,default,merged,context,configuration,test,class,cache,aware,context,loader,delegate,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,true,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate,true
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1495868221;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(_				testClass, ContextConfiguration.class, ContextHierarchy.class) == null) {_			return buildDefaultMergedContextConfiguration(testClass, cacheAwareContextLoaderDelegate)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap =_					ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(_						declaringClass, reversedList, parentConfig, cacheAwareContextLoaderDelegate, true)__				parentConfig = mergedConfig__			}__			_			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_					ContextLoaderUtils.resolveContextConfigurationAttributes(testClass),_					null, cacheAwareContextLoaderDelegate, true)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,return,build,default,merged,context,configuration,test,class,cache,aware,context,loader,delegate,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,true,parent,config,merged,config,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate,true
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1496955179;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(_				testClass, ContextConfiguration.class, ContextHierarchy.class) == null) {_			return buildDefaultMergedContextConfiguration(testClass, cacheAwareContextLoaderDelegate)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap =_					ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(_						declaringClass, reversedList, parentConfig, cacheAwareContextLoaderDelegate, true)__				parentConfig = mergedConfig__			}__			_			Assert.state(mergedConfig != null, "No merged context configuration")__			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_					ContextLoaderUtils.resolveContextConfigurationAttributes(testClass),_					null, cacheAwareContextLoaderDelegate, true)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,return,build,default,merged,context,configuration,test,class,cache,aware,context,loader,delegate,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,true,parent,config,merged,config,assert,state,merged,config,null,no,merged,context,configuration,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate,true
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1500495740;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(_				testClass, ContextConfiguration.class, ContextHierarchy.class) == null) {_			return buildDefaultMergedContextConfiguration(testClass, cacheAwareContextLoaderDelegate)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap =_					ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(_						declaringClass, reversedList, parentConfig, cacheAwareContextLoaderDelegate, true)__				parentConfig = mergedConfig__			}__			_			Assert.state(mergedConfig != null, "No merged context configuration")__			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_					ContextLoaderUtils.resolveContextConfigurationAttributes(testClass),_					null, cacheAwareContextLoaderDelegate, true)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,return,build,default,merged,context,configuration,test,class,cache,aware,context,loader,delegate,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,true,parent,config,merged,config,assert,state,merged,config,null,no,merged,context,configuration,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate,true
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1515772066;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(_				testClass, ContextConfiguration.class, ContextHierarchy.class) == null) {_			return buildDefaultMergedContextConfiguration(testClass, cacheAwareContextLoaderDelegate)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap =_					ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(_						declaringClass, reversedList, parentConfig, cacheAwareContextLoaderDelegate, true)__				parentConfig = mergedConfig__			}__			_			Assert.state(mergedConfig != null, "No merged context configuration")__			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_					ContextLoaderUtils.resolveContextConfigurationAttributes(testClass),_					null, cacheAwareContextLoaderDelegate, true)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,return,build,default,merged,context,configuration,test,class,cache,aware,context,loader,delegate,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,true,parent,config,merged,config,assert,state,merged,config,null,no,merged,context,configuration,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate,true
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1516210145;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(_				testClass, ContextConfiguration.class, ContextHierarchy.class) == null) {_			return buildDefaultMergedContextConfiguration(testClass, cacheAwareContextLoaderDelegate)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap =_					ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(_						declaringClass, reversedList, parentConfig, cacheAwareContextLoaderDelegate, true)__				parentConfig = mergedConfig__			}__			_			Assert.state(mergedConfig != null, "No merged context configuration")__			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_					ContextLoaderUtils.resolveContextConfigurationAttributes(testClass),_					null, cacheAwareContextLoaderDelegate, true)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,return,build,default,merged,context,configuration,test,class,cache,aware,context,loader,delegate,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,true,parent,config,merged,config,assert,state,merged,config,null,no,merged,context,configuration,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate,true
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	@Override 	public final MergedContextConfiguration buildMergedContextConfiguration();1519295386;{@inheritDoc};@SuppressWarnings("unchecked")_	@Override_	public final MergedContextConfiguration buildMergedContextConfiguration() {_		Class<?> testClass = getBootstrapContext().getTestClass()__		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = getCacheAwareContextLoaderDelegate()___		if (MetaAnnotationUtils.findAnnotationDescriptorForTypes(_				testClass, ContextConfiguration.class, ContextHierarchy.class) == null) {_			return buildDefaultMergedContextConfiguration(testClass, cacheAwareContextLoaderDelegate)__		}__		if (AnnotationUtils.findAnnotation(testClass, ContextHierarchy.class) != null) {_			Map<String, List<ContextConfigurationAttributes>> hierarchyMap =_					ContextLoaderUtils.buildContextHierarchyMap(testClass)__			MergedContextConfiguration parentConfig = null__			MergedContextConfiguration mergedConfig = null___			for (List<ContextConfigurationAttributes> list : hierarchyMap.values()) {_				List<ContextConfigurationAttributes> reversedList = new ArrayList<>(list)__				Collections.reverse(reversedList)___				_				_				_				Assert.notEmpty(reversedList, "ContextConfigurationAttributes list must not be empty")__				Class<?> declaringClass = reversedList.get(0).getDeclaringClass()___				mergedConfig = buildMergedContextConfiguration(_						declaringClass, reversedList, parentConfig, cacheAwareContextLoaderDelegate, true)__				parentConfig = mergedConfig__			}__			_			Assert.state(mergedConfig != null, "No merged context configuration")__			return mergedConfig__		}_		else {_			return buildMergedContextConfiguration(testClass,_					ContextLoaderUtils.resolveContextConfigurationAttributes(testClass),_					null, cacheAwareContextLoaderDelegate, true)__		}_	};inherit,doc;suppress,warnings,unchecked,override,public,final,merged,context,configuration,build,merged,context,configuration,class,test,class,get,bootstrap,context,get,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,get,cache,aware,context,loader,delegate,if,meta,annotation,utils,find,annotation,descriptor,for,types,test,class,context,configuration,class,context,hierarchy,class,null,return,build,default,merged,context,configuration,test,class,cache,aware,context,loader,delegate,if,annotation,utils,find,annotation,test,class,context,hierarchy,class,null,map,string,list,context,configuration,attributes,hierarchy,map,context,loader,utils,build,context,hierarchy,map,test,class,merged,context,configuration,parent,config,null,merged,context,configuration,merged,config,null,for,list,context,configuration,attributes,list,hierarchy,map,values,list,context,configuration,attributes,reversed,list,new,array,list,list,collections,reverse,reversed,list,assert,not,empty,reversed,list,context,configuration,attributes,list,must,not,be,empty,class,declaring,class,reversed,list,get,0,get,declaring,class,merged,config,build,merged,context,configuration,declaring,class,reversed,list,parent,config,cache,aware,context,loader,delegate,true,parent,config,merged,config,assert,state,merged,config,null,no,merged,context,configuration,return,merged,config,else,return,build,merged,context,configuration,test,class,context,loader,utils,resolve,context,configuration,attributes,test,class,null,cache,aware,context,loader,delegate,true
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1429465455;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_			getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1429559310;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_			getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1432125256;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_			getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1432246071;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_			getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1432856630;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_			getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1434234880;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_			getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1457462209;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_			getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1457727806;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_			getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1458754760;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_			getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1459174667;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_			getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1459842161;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_				getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1465306936;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_				getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1467730834;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_				getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1468334463;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_				getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1468426720;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_				getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1495868221;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_				getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1496955179;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_				getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1500495740;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_				getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1515772066;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_				getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1516210145;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_				getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> @Override 	public TestContext buildTestContext();1519295386;Build a new {@link DefaultTestContext} using the {@linkplain Class test class}_in the {@link BootstrapContext} associated with this bootstrapper and_by delegating to {@link #buildMergedContextConfiguration()} and_{@link #getCacheAwareContextLoaderDelegate()}._<p>Concrete subclasses may choose to override this method to return a_custom {@link TestContext} implementation._@since 4.2;@Override_	public TestContext buildTestContext() {_		return new DefaultTestContext(getBootstrapContext().getTestClass(), buildMergedContextConfiguration(),_				getCacheAwareContextLoaderDelegate())__	};build,a,new,link,default,test,context,using,the,linkplain,class,test,class,in,the,link,bootstrap,context,associated,with,this,bootstrapper,and,by,delegating,to,link,build,merged,context,configuration,and,link,get,cache,aware,context,loader,delegate,p,concrete,subclasses,may,choose,to,override,this,method,to,return,a,custom,link,test,context,implementation,since,4,2;override,public,test,context,build,test,context,return,new,default,test,context,get,bootstrap,context,get,test,class,build,merged,context,configuration,get,cache,aware,context,loader,delegate
AbstractTestContextBootstrapper -> private boolean areAllEmpty(Collection<?>... collections);1457462209;@since 4.3;private boolean areAllEmpty(Collection<?>... collections) {_		for (Collection<?> collection : collections) {_			if (!collection.isEmpty()) {_				return false__			}_		}_		return true__	};since,4,3;private,boolean,are,all,empty,collection,collections,for,collection,collection,collections,if,collection,is,empty,return,false,return,true
AbstractTestContextBootstrapper -> private boolean areAllEmpty(Collection<?>... collections);1457727806;@since 4.3;private boolean areAllEmpty(Collection<?>... collections) {_		for (Collection<?> collection : collections) {_			if (!collection.isEmpty()) {_				return false__			}_		}_		return true__	};since,4,3;private,boolean,are,all,empty,collection,collections,for,collection,collection,collections,if,collection,is,empty,return,false,return,true
AbstractTestContextBootstrapper -> private boolean areAllEmpty(Collection<?>... collections);1458754760;@since 4.3;private boolean areAllEmpty(Collection<?>... collections) {_		for (Collection<?> collection : collections) {_			if (!collection.isEmpty()) {_				return false__			}_		}_		return true__	};since,4,3;private,boolean,are,all,empty,collection,collections,for,collection,collection,collections,if,collection,is,empty,return,false,return,true
AbstractTestContextBootstrapper -> private boolean areAllEmpty(Collection<?>... collections);1459174667;@since 4.3;private boolean areAllEmpty(Collection<?>... collections) {_		for (Collection<?> collection : collections) {_			if (!collection.isEmpty()) {_				return false__			}_		}_		return true__	};since,4,3;private,boolean,are,all,empty,collection,collections,for,collection,collection,collections,if,collection,is,empty,return,false,return,true
AbstractTestContextBootstrapper -> private boolean areAllEmpty(Collection<?>... collections);1459842161;@since 4.3;private boolean areAllEmpty(Collection<?>... collections) {_		for (Collection<?> collection : collections) {_			if (!collection.isEmpty()) {_				return false__			}_		}_		return true__	};since,4,3;private,boolean,are,all,empty,collection,collections,for,collection,collection,collections,if,collection,is,empty,return,false,return,true
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1429051063;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__			if (contextLoaderClass == null) {_				throw new IllegalStateException("getDefaultContextLoaderClass() must not return null")__			}_		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,context,loader,class,null,throw,new,illegal,state,exception,get,default,context,loader,class,must,not,return,null,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1429465455;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__			if (contextLoaderClass == null) {_				throw new IllegalStateException("getDefaultContextLoaderClass() must not return null")__			}_		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,context,loader,class,null,throw,new,illegal,state,exception,get,default,context,loader,class,must,not,return,null,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1429559310;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__			if (contextLoaderClass == null) {_				throw new IllegalStateException("getDefaultContextLoaderClass() must not return null")__			}_		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,context,loader,class,null,throw,new,illegal,state,exception,get,default,context,loader,class,must,not,return,null,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1432125256;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__			if (contextLoaderClass == null) {_				throw new IllegalStateException("getDefaultContextLoaderClass() must not return null")__			}_		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,context,loader,class,null,throw,new,illegal,state,exception,get,default,context,loader,class,must,not,return,null,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1432246071;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__			if (contextLoaderClass == null) {_				throw new IllegalStateException("getDefaultContextLoaderClass() must not return null")__			}_		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,context,loader,class,null,throw,new,illegal,state,exception,get,default,context,loader,class,must,not,return,null,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1432856630;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__			if (contextLoaderClass == null) {_				throw new IllegalStateException("getDefaultContextLoaderClass() must not return null")__			}_		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,context,loader,class,null,throw,new,illegal,state,exception,get,default,context,loader,class,must,not,return,null,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1434234880;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__			if (contextLoaderClass == null) {_				throw new IllegalStateException("getDefaultContextLoaderClass() must not return null")__			}_		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,context,loader,class,null,throw,new,illegal,state,exception,get,default,context,loader,class,must,not,return,null,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1457462209;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__			if (contextLoaderClass == null) {_				throw new IllegalStateException("getDefaultContextLoaderClass() must not return null")__			}_		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,context,loader,class,null,throw,new,illegal,state,exception,get,default,context,loader,class,must,not,return,null,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1457727806;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__			if (contextLoaderClass == null) {_				throw new IllegalStateException("getDefaultContextLoaderClass() must not return null")__			}_		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,context,loader,class,null,throw,new,illegal,state,exception,get,default,context,loader,class,must,not,return,null,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1458754760;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__			if (contextLoaderClass == null) {_				throw new IllegalStateException("getDefaultContextLoaderClass() must not return null")__			}_		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,context,loader,class,null,throw,new,illegal,state,exception,get,default,context,loader,class,must,not,return,null,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1459174667;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__			if (contextLoaderClass == null) {_				throw new IllegalStateException("getDefaultContextLoaderClass() must not return null")__			}_		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,context,loader,class,null,throw,new,illegal,state,exception,get,default,context,loader,class,must,not,return,null,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1459842161;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__			if (contextLoaderClass == null) {_				throw new IllegalStateException("getDefaultContextLoaderClass() must not return null")__			}_		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_					contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,context,loader,class,null,throw,new,illegal,state,exception,get,default,context,loader,class,must,not,return,null,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1465306936;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__			if (contextLoaderClass == null) {_				throw new IllegalStateException("getDefaultContextLoaderClass() must not return null")__			}_		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_					contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,context,loader,class,null,throw,new,illegal,state,exception,get,default,context,loader,class,must,not,return,null,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1467730834;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__			if (contextLoaderClass == null) {_				throw new IllegalStateException("getDefaultContextLoaderClass() must not return null")__			}_		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_					contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,context,loader,class,null,throw,new,illegal,state,exception,get,default,context,loader,class,must,not,return,null,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1468334463;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__			Assert.state(contextLoaderClass != null, "getDefaultContextLoaderClass() must not return null")__		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_					contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,assert,state,context,loader,class,null,get,default,context,loader,class,must,not,return,null,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1468426720;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__			Assert.state(contextLoaderClass != null, "getDefaultContextLoaderClass() must not return null")__		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_					contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,assert,state,context,loader,class,null,get,default,context,loader,class,must,not,return,null,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1495868221;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__			Assert.state(contextLoaderClass != null, "getDefaultContextLoaderClass() must not return null")__		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_					contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,assert,state,context,loader,class,null,get,default,context,loader,class,must,not,return,null,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1496955179;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_					contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1500495740;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_					contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1515772066;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_					contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1516210145;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_					contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> protected ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1519295386;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null})_@throws IllegalStateException if {@link #getDefaultContextLoaderClass(Class)}_returns {@code null};protected ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_					contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null,throws,illegal,state,exception,if,link,get,default,context,loader,class,class,returns,code,null;protected,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildDefaultMergedContextConfiguration(Class<?> testClass, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1457462209;@since 4.3;private MergedContextConfiguration buildDefaultMergedContextConfiguration(Class<?> testClass,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		List<ContextConfigurationAttributes> defaultConfigAttributesList_			= Collections.singletonList(new ContextConfigurationAttributes(testClass))___		ContextLoader contextLoader = resolveContextLoader(testClass, defaultConfigAttributesList)__		if (logger.isInfoEnabled()) {_			logger.info(String.format(_				"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s], using %s",_				testClass.getName(), contextLoader.getClass().getSimpleName()))__		}_		return buildMergedContextConfiguration(testClass, defaultConfigAttributesList, null,_			cacheAwareContextLoaderDelegate, false)__	};since,4,3;private,merged,context,configuration,build,default,merged,context,configuration,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,list,context,configuration,attributes,default,config,attributes,list,collections,singleton,list,new,context,configuration,attributes,test,class,context,loader,context,loader,resolve,context,loader,test,class,default,config,attributes,list,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,using,s,test,class,get,name,context,loader,get,class,get,simple,name,return,build,merged,context,configuration,test,class,default,config,attributes,list,null,cache,aware,context,loader,delegate,false
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildDefaultMergedContextConfiguration(Class<?> testClass, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1457727806;@since 4.3;private MergedContextConfiguration buildDefaultMergedContextConfiguration(Class<?> testClass,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		List<ContextConfigurationAttributes> defaultConfigAttributesList_			= Collections.singletonList(new ContextConfigurationAttributes(testClass))___		ContextLoader contextLoader = resolveContextLoader(testClass, defaultConfigAttributesList)__		if (logger.isInfoEnabled()) {_			logger.info(String.format(_				"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s], using %s",_				testClass.getName(), contextLoader.getClass().getSimpleName()))__		}_		return buildMergedContextConfiguration(testClass, defaultConfigAttributesList, null,_			cacheAwareContextLoaderDelegate, false)__	};since,4,3;private,merged,context,configuration,build,default,merged,context,configuration,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,list,context,configuration,attributes,default,config,attributes,list,collections,singleton,list,new,context,configuration,attributes,test,class,context,loader,context,loader,resolve,context,loader,test,class,default,config,attributes,list,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,using,s,test,class,get,name,context,loader,get,class,get,simple,name,return,build,merged,context,configuration,test,class,default,config,attributes,list,null,cache,aware,context,loader,delegate,false
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildDefaultMergedContextConfiguration(Class<?> testClass, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1458754760;@since 4.3;private MergedContextConfiguration buildDefaultMergedContextConfiguration(Class<?> testClass,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		List<ContextConfigurationAttributes> defaultConfigAttributesList_			= Collections.singletonList(new ContextConfigurationAttributes(testClass))___		ContextLoader contextLoader = resolveContextLoader(testClass, defaultConfigAttributesList)__		if (logger.isInfoEnabled()) {_			logger.info(String.format(_				"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s], using %s",_				testClass.getName(), contextLoader.getClass().getSimpleName()))__		}_		return buildMergedContextConfiguration(testClass, defaultConfigAttributesList, null,_			cacheAwareContextLoaderDelegate, false)__	};since,4,3;private,merged,context,configuration,build,default,merged,context,configuration,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,list,context,configuration,attributes,default,config,attributes,list,collections,singleton,list,new,context,configuration,attributes,test,class,context,loader,context,loader,resolve,context,loader,test,class,default,config,attributes,list,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,using,s,test,class,get,name,context,loader,get,class,get,simple,name,return,build,merged,context,configuration,test,class,default,config,attributes,list,null,cache,aware,context,loader,delegate,false
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildDefaultMergedContextConfiguration(Class<?> testClass, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1459174667;@since 4.3;private MergedContextConfiguration buildDefaultMergedContextConfiguration(Class<?> testClass,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		List<ContextConfigurationAttributes> defaultConfigAttributesList_			= Collections.singletonList(new ContextConfigurationAttributes(testClass))___		ContextLoader contextLoader = resolveContextLoader(testClass, defaultConfigAttributesList)__		if (logger.isInfoEnabled()) {_			logger.info(String.format(_				"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s], using %s",_				testClass.getName(), contextLoader.getClass().getSimpleName()))__		}_		return buildMergedContextConfiguration(testClass, defaultConfigAttributesList, null,_			cacheAwareContextLoaderDelegate, false)__	};since,4,3;private,merged,context,configuration,build,default,merged,context,configuration,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,list,context,configuration,attributes,default,config,attributes,list,collections,singleton,list,new,context,configuration,attributes,test,class,context,loader,context,loader,resolve,context,loader,test,class,default,config,attributes,list,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,using,s,test,class,get,name,context,loader,get,class,get,simple,name,return,build,merged,context,configuration,test,class,default,config,attributes,list,null,cache,aware,context,loader,delegate,false
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildDefaultMergedContextConfiguration(Class<?> testClass, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1459842161;@since 4.3;private MergedContextConfiguration buildDefaultMergedContextConfiguration(Class<?> testClass,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		List<ContextConfigurationAttributes> defaultConfigAttributesList_			= Collections.singletonList(new ContextConfigurationAttributes(testClass))___		ContextLoader contextLoader = resolveContextLoader(testClass, defaultConfigAttributesList)__		if (logger.isInfoEnabled()) {_			logger.info(String.format(_				"Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s], using %s",_				testClass.getName(), contextLoader.getClass().getSimpleName()))__		}_		return buildMergedContextConfiguration(testClass, defaultConfigAttributesList, null,_			cacheAwareContextLoaderDelegate, false)__	};since,4,3;private,merged,context,configuration,build,default,merged,context,configuration,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,list,context,configuration,attributes,default,config,attributes,list,collections,singleton,list,new,context,configuration,attributes,test,class,context,loader,context,loader,resolve,context,loader,test,class,default,config,attributes,list,if,logger,is,info,enabled,logger,info,string,format,neither,context,configuration,nor,context,hierarchy,found,for,test,class,s,using,s,test,class,get,name,context,loader,get,class,get,simple,name,return,build,merged,context,configuration,test,class,default,config,attributes,list,null,cache,aware,context,loader,delegate,false
AbstractTestContextBootstrapper -> protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1429051063;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")__		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (!ContextLoader.class.equals(contextLoaderClass)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,equals,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1429465455;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")__		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (!ContextLoader.class.equals(contextLoaderClass)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,equals,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1429559310;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")__		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (!ContextLoader.class.equals(contextLoaderClass)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,equals,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1432125256;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")__		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1432246071;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")__		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1432856630;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")__		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1434234880;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")__		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1457462209;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1457727806;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1458754760;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1459174667;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1459842161;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_						configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_							"Found explicit ContextLoader class [%s] for context configuration attributes %s",_							contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1465306936;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_						configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_							"Found explicit ContextLoader class [%s] for context configuration attributes %s",_							contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1467730834;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_						configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_							"Found explicit ContextLoader class [%s] for context configuration attributes %s",_							contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1468334463;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_						configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_							"Found explicit ContextLoader class [%s] for context configuration attributes %s",_							contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1468426720;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_						configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_							"Found explicit ContextLoader class [%s] for context configuration attributes %s",_							contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected abstract MergedContextConfiguration buildMergedContextConfiguration( 			Class<?> testClass, String[] locations, Class<?>[] classes, 			Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses, 			String[] activeProfiles, ContextLoader contextLoader, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, MergedContextConfiguration parentConfig)_;1398638841;Build a {@link MergedContextConfiguration} instance from the supplied,_merged values._<p>Concrete subclasses typically will only need to instantiate_{@link MergedContextConfiguration} (or a specialized subclass thereof)_from the provided values_ further processing and merging of values is likely_unnecessary._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param locations the merged resource locations_@param classes the merged annotated classes_@param initializerClasses the merged context initializer classes_@param activeProfiles the merged active bean definition profiles_@param contextLoader the resolved {@code ContextLoader}_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be provided to the instantiated {@code MergedContextConfiguration}_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@return the fully initialized {@code MergedContextConfiguration};protected abstract MergedContextConfiguration buildMergedContextConfiguration(_			Class<?> testClass, String[] locations, Class<?>[] classes,_			Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses,_			String[] activeProfiles, ContextLoader contextLoader,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, MergedContextConfiguration parentConfig)_;build,a,link,merged,context,configuration,instance,from,the,supplied,merged,values,p,concrete,subclasses,typically,will,only,need,to,instantiate,link,merged,context,configuration,or,a,specialized,subclass,thereof,from,the,provided,values,further,processing,and,merging,of,values,is,likely,unnecessary,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,locations,the,merged,resource,locations,param,classes,the,merged,annotated,classes,param,initializer,classes,the,merged,context,initializer,classes,param,active,profiles,the,merged,active,bean,definition,profiles,param,context,loader,the,resolved,code,context,loader,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,provided,to,the,instantiated,code,merged,context,configuration,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,return,the,fully,initialized,code,merged,context,configuration;protected,abstract,merged,context,configuration,build,merged,context,configuration,class,test,class,string,locations,class,classes,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,string,active,profiles,context,loader,context,loader,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,merged,context,configuration,parent,config
AbstractTestContextBootstrapper -> protected abstract MergedContextConfiguration buildMergedContextConfiguration( 			Class<?> testClass, String[] locations, Class<?>[] classes, 			Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses, 			String[] activeProfiles, ContextLoader contextLoader, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, MergedContextConfiguration parentConfig)_;1400509883;Build a {@link MergedContextConfiguration} instance from the supplied,_merged values._<p>Concrete subclasses typically will only need to instantiate_{@link MergedContextConfiguration} (or a specialized subclass thereof)_from the provided values_ further processing and merging of values is likely_unnecessary._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param locations the merged resource locations_@param classes the merged annotated classes_@param initializerClasses the merged context initializer classes_@param activeProfiles the merged active bean definition profiles_@param contextLoader the resolved {@code ContextLoader}_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate_to be provided to the instantiated {@code MergedContextConfiguration}_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@return the fully initialized {@code MergedContextConfiguration};protected abstract MergedContextConfiguration buildMergedContextConfiguration(_			Class<?> testClass, String[] locations, Class<?>[] classes,_			Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses,_			String[] activeProfiles, ContextLoader contextLoader,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, MergedContextConfiguration parentConfig)_;build,a,link,merged,context,configuration,instance,from,the,supplied,merged,values,p,concrete,subclasses,typically,will,only,need,to,instantiate,link,merged,context,configuration,or,a,specialized,subclass,thereof,from,the,provided,values,further,processing,and,merging,of,values,is,likely,unnecessary,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,locations,the,merged,resource,locations,param,classes,the,merged,annotated,classes,param,initializer,classes,the,merged,context,initializer,classes,param,active,profiles,the,merged,active,bean,definition,profiles,param,context,loader,the,resolved,code,context,loader,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,provided,to,the,instantiated,code,merged,context,configuration,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,return,the,fully,initialized,code,merged,context,configuration;protected,abstract,merged,context,configuration,build,merged,context,configuration,class,test,class,string,locations,class,classes,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,string,active,profiles,context,loader,context,loader,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,merged,context,configuration,parent,config
AbstractTestContextBootstrapper -> protected abstract MergedContextConfiguration buildMergedContextConfiguration( 			Class<?> testClass, String[] locations, Class<?>[] classes, 			Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses, 			String[] activeProfiles, ContextLoader contextLoader, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, MergedContextConfiguration parentConfig)_;1400523530;Build a {@link MergedContextConfiguration} instance from the supplied,_merged values._<p>Concrete subclasses typically will only need to instantiate_{@link MergedContextConfiguration} (or a specialized subclass thereof)_from the provided values_ further processing and merging of values is likely_unnecessary._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param locations the merged resource locations_@param classes the merged annotated classes_@param initializerClasses the merged context initializer classes_@param activeProfiles the merged active bean definition profiles_@param contextLoader the resolved {@code ContextLoader}_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate_to be provided to the instantiated {@code MergedContextConfiguration}_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@return the fully initialized {@code MergedContextConfiguration};protected abstract MergedContextConfiguration buildMergedContextConfiguration(_			Class<?> testClass, String[] locations, Class<?>[] classes,_			Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses,_			String[] activeProfiles, ContextLoader contextLoader,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, MergedContextConfiguration parentConfig)_;build,a,link,merged,context,configuration,instance,from,the,supplied,merged,values,p,concrete,subclasses,typically,will,only,need,to,instantiate,link,merged,context,configuration,or,a,specialized,subclass,thereof,from,the,provided,values,further,processing,and,merging,of,values,is,likely,unnecessary,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,locations,the,merged,resource,locations,param,classes,the,merged,annotated,classes,param,initializer,classes,the,merged,context,initializer,classes,param,active,profiles,the,merged,active,bean,definition,profiles,param,context,loader,the,resolved,code,context,loader,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,provided,to,the,instantiated,code,merged,context,configuration,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,return,the,fully,initialized,code,merged,context,configuration;protected,abstract,merged,context,configuration,build,merged,context,configuration,class,test,class,string,locations,class,classes,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,string,active,profiles,context,loader,context,loader,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,merged,context,configuration,parent,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, @Nullable MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, 			boolean requireLocationsClassesOrInitializers);1495868221;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@param requireLocationsClassesOrInitializers whether locations, classes, or_initializers are required_ typically {@code true} but may be set to {@code false}_if the configured loader supports empty configuration_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, @Nullable MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate,_			boolean requireLocationsClassesOrInitializers) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be null or empty")___		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locations = new ArrayList<>()__		List<Class<?>> classes = new ArrayList<>()__		List<Class<?>> initializers = new ArrayList<>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_						configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locations.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classes.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(_						configAttributes.getDeclaringClass(), configAttributes.getLocations())__				locations.addAll(0, Arrays.asList(processedLocations))__				_			}_			initializers.addAll(0, Arrays.asList(configAttributes.getInitializers()))__			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		Set<ContextCustomizer> contextCustomizers = getContextCustomizers(testClass,_				Collections.unmodifiableList(configAttributesList))___		Assert.state(!(requireLocationsClassesOrInitializers &&_				areAllEmpty(locations, classes, initializers, contextCustomizers)), () -> String.format(_				"%s was unable to detect defaults, and no ApplicationContextInitializers " +_				"or ContextCustomizers were declared for context configuration attributes %s",_				contextLoader.getClass().getSimpleName(), configAttributesList))___		MergedTestPropertySources mergedTestPropertySources =_				TestPropertySourceUtils.buildMergedTestPropertySources(testClass)__		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass,_				StringUtils.toStringArray(locations),_				ClassUtils.toClassArray(classes),_				ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList),_				ActiveProfilesUtils.resolveActiveProfiles(testClass),_				mergedTestPropertySources.getLocations(),_				mergedTestPropertySources.getProperties(),_				contextCustomizers, contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,param,require,locations,classes,or,initializers,whether,locations,classes,or,initializers,are,required,typically,code,true,but,may,be,set,to,code,false,if,the,configured,loader,supports,empty,configuration,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,nullable,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,boolean,require,locations,classes,or,initializers,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,null,or,empty,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,new,array,list,list,class,classes,new,array,list,list,class,initializers,new,array,list,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,add,all,0,arrays,as,list,config,attributes,get,locations,classes,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,add,all,0,arrays,as,list,processed,locations,initializers,add,all,0,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,locations,break,set,context,customizer,context,customizers,get,context,customizers,test,class,collections,unmodifiable,list,config,attributes,list,assert,state,require,locations,classes,or,initializers,are,all,empty,locations,classes,initializers,context,customizers,string,format,s,was,unable,to,detect,defaults,and,no,application,context,initializers,or,context,customizers,were,declared,for,context,configuration,attributes,s,context,loader,get,class,get,simple,name,config,attributes,list,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,string,utils,to,string,array,locations,class,utils,to,class,array,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,customizers,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, @Nullable MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, 			boolean requireLocationsClassesOrInitializers);1496955179;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@param requireLocationsClassesOrInitializers whether locations, classes, or_initializers are required_ typically {@code true} but may be set to {@code false}_if the configured loader supports empty configuration_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, @Nullable MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate,_			boolean requireLocationsClassesOrInitializers) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be null or empty")___		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locations = new ArrayList<>()__		List<Class<?>> classes = new ArrayList<>()__		List<Class<?>> initializers = new ArrayList<>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_						configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locations.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classes.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(_						configAttributes.getDeclaringClass(), configAttributes.getLocations())__				locations.addAll(0, Arrays.asList(processedLocations))__				_			}_			initializers.addAll(0, Arrays.asList(configAttributes.getInitializers()))__			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		Set<ContextCustomizer> contextCustomizers = getContextCustomizers(testClass,_				Collections.unmodifiableList(configAttributesList))___		Assert.state(!(requireLocationsClassesOrInitializers &&_				areAllEmpty(locations, classes, initializers, contextCustomizers)), () -> String.format(_				"%s was unable to detect defaults, and no ApplicationContextInitializers " +_				"or ContextCustomizers were declared for context configuration attributes %s",_				contextLoader.getClass().getSimpleName(), configAttributesList))___		MergedTestPropertySources mergedTestPropertySources =_				TestPropertySourceUtils.buildMergedTestPropertySources(testClass)__		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass,_				StringUtils.toStringArray(locations),_				ClassUtils.toClassArray(classes),_				ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList),_				ActiveProfilesUtils.resolveActiveProfiles(testClass),_				mergedTestPropertySources.getLocations(),_				mergedTestPropertySources.getProperties(),_				contextCustomizers, contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,param,require,locations,classes,or,initializers,whether,locations,classes,or,initializers,are,required,typically,code,true,but,may,be,set,to,code,false,if,the,configured,loader,supports,empty,configuration,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,nullable,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,boolean,require,locations,classes,or,initializers,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,null,or,empty,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,new,array,list,list,class,classes,new,array,list,list,class,initializers,new,array,list,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,add,all,0,arrays,as,list,config,attributes,get,locations,classes,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,add,all,0,arrays,as,list,processed,locations,initializers,add,all,0,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,locations,break,set,context,customizer,context,customizers,get,context,customizers,test,class,collections,unmodifiable,list,config,attributes,list,assert,state,require,locations,classes,or,initializers,are,all,empty,locations,classes,initializers,context,customizers,string,format,s,was,unable,to,detect,defaults,and,no,application,context,initializers,or,context,customizers,were,declared,for,context,configuration,attributes,s,context,loader,get,class,get,simple,name,config,attributes,list,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,string,utils,to,string,array,locations,class,utils,to,class,array,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,customizers,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, @Nullable MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, 			boolean requireLocationsClassesOrInitializers);1500495740;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@param requireLocationsClassesOrInitializers whether locations, classes, or_initializers are required_ typically {@code true} but may be set to {@code false}_if the configured loader supports empty configuration_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, @Nullable MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate,_			boolean requireLocationsClassesOrInitializers) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be null or empty")___		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locations = new ArrayList<>()__		List<Class<?>> classes = new ArrayList<>()__		List<Class<?>> initializers = new ArrayList<>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_						configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locations.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classes.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(_						configAttributes.getDeclaringClass(), configAttributes.getLocations())__				locations.addAll(0, Arrays.asList(processedLocations))__				_			}_			initializers.addAll(0, Arrays.asList(configAttributes.getInitializers()))__			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		Set<ContextCustomizer> contextCustomizers = getContextCustomizers(testClass,_				Collections.unmodifiableList(configAttributesList))___		Assert.state(!(requireLocationsClassesOrInitializers &&_				areAllEmpty(locations, classes, initializers, contextCustomizers)), () -> String.format(_				"%s was unable to detect defaults, and no ApplicationContextInitializers " +_				"or ContextCustomizers were declared for context configuration attributes %s",_				contextLoader.getClass().getSimpleName(), configAttributesList))___		MergedTestPropertySources mergedTestPropertySources =_				TestPropertySourceUtils.buildMergedTestPropertySources(testClass)__		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass,_				StringUtils.toStringArray(locations),_				ClassUtils.toClassArray(classes),_				ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList),_				ActiveProfilesUtils.resolveActiveProfiles(testClass),_				mergedTestPropertySources.getLocations(),_				mergedTestPropertySources.getProperties(),_				contextCustomizers, contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,param,require,locations,classes,or,initializers,whether,locations,classes,or,initializers,are,required,typically,code,true,but,may,be,set,to,code,false,if,the,configured,loader,supports,empty,configuration,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,nullable,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,boolean,require,locations,classes,or,initializers,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,null,or,empty,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,new,array,list,list,class,classes,new,array,list,list,class,initializers,new,array,list,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,add,all,0,arrays,as,list,config,attributes,get,locations,classes,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,add,all,0,arrays,as,list,processed,locations,initializers,add,all,0,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,locations,break,set,context,customizer,context,customizers,get,context,customizers,test,class,collections,unmodifiable,list,config,attributes,list,assert,state,require,locations,classes,or,initializers,are,all,empty,locations,classes,initializers,context,customizers,string,format,s,was,unable,to,detect,defaults,and,no,application,context,initializers,or,context,customizers,were,declared,for,context,configuration,attributes,s,context,loader,get,class,get,simple,name,config,attributes,list,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,string,utils,to,string,array,locations,class,utils,to,class,array,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,customizers,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, @Nullable MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, 			boolean requireLocationsClassesOrInitializers);1515772066;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@param requireLocationsClassesOrInitializers whether locations, classes, or_initializers are required_ typically {@code true} but may be set to {@code false}_if the configured loader supports empty configuration_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, @Nullable MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate,_			boolean requireLocationsClassesOrInitializers) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be null or empty")___		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locations = new ArrayList<>()__		List<Class<?>> classes = new ArrayList<>()__		List<Class<?>> initializers = new ArrayList<>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_						configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locations.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classes.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(_						configAttributes.getDeclaringClass(), configAttributes.getLocations())__				locations.addAll(0, Arrays.asList(processedLocations))__				_			}_			initializers.addAll(0, Arrays.asList(configAttributes.getInitializers()))__			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		Set<ContextCustomizer> contextCustomizers = getContextCustomizers(testClass,_				Collections.unmodifiableList(configAttributesList))___		Assert.state(!(requireLocationsClassesOrInitializers &&_				areAllEmpty(locations, classes, initializers, contextCustomizers)), () -> String.format(_				"%s was unable to detect defaults, and no ApplicationContextInitializers " +_				"or ContextCustomizers were declared for context configuration attributes %s",_				contextLoader.getClass().getSimpleName(), configAttributesList))___		MergedTestPropertySources mergedTestPropertySources =_				TestPropertySourceUtils.buildMergedTestPropertySources(testClass)__		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass,_				StringUtils.toStringArray(locations),_				ClassUtils.toClassArray(classes),_				ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList),_				ActiveProfilesUtils.resolveActiveProfiles(testClass),_				mergedTestPropertySources.getLocations(),_				mergedTestPropertySources.getProperties(),_				contextCustomizers, contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,param,require,locations,classes,or,initializers,whether,locations,classes,or,initializers,are,required,typically,code,true,but,may,be,set,to,code,false,if,the,configured,loader,supports,empty,configuration,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,nullable,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,boolean,require,locations,classes,or,initializers,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,null,or,empty,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,new,array,list,list,class,classes,new,array,list,list,class,initializers,new,array,list,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,add,all,0,arrays,as,list,config,attributes,get,locations,classes,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,add,all,0,arrays,as,list,processed,locations,initializers,add,all,0,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,locations,break,set,context,customizer,context,customizers,get,context,customizers,test,class,collections,unmodifiable,list,config,attributes,list,assert,state,require,locations,classes,or,initializers,are,all,empty,locations,classes,initializers,context,customizers,string,format,s,was,unable,to,detect,defaults,and,no,application,context,initializers,or,context,customizers,were,declared,for,context,configuration,attributes,s,context,loader,get,class,get,simple,name,config,attributes,list,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,string,utils,to,string,array,locations,class,utils,to,class,array,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,customizers,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, @Nullable MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, 			boolean requireLocationsClassesOrInitializers);1516210145;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@param requireLocationsClassesOrInitializers whether locations, classes, or_initializers are required_ typically {@code true} but may be set to {@code false}_if the configured loader supports empty configuration_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, @Nullable MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate,_			boolean requireLocationsClassesOrInitializers) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be null or empty")___		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locations = new ArrayList<>()__		List<Class<?>> classes = new ArrayList<>()__		List<Class<?>> initializers = new ArrayList<>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_						configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locations.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classes.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(_						configAttributes.getDeclaringClass(), configAttributes.getLocations())__				locations.addAll(0, Arrays.asList(processedLocations))__				_			}_			initializers.addAll(0, Arrays.asList(configAttributes.getInitializers()))__			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		Set<ContextCustomizer> contextCustomizers = getContextCustomizers(testClass,_				Collections.unmodifiableList(configAttributesList))___		Assert.state(!(requireLocationsClassesOrInitializers &&_				areAllEmpty(locations, classes, initializers, contextCustomizers)), () -> String.format(_				"%s was unable to detect defaults, and no ApplicationContextInitializers " +_				"or ContextCustomizers were declared for context configuration attributes %s",_				contextLoader.getClass().getSimpleName(), configAttributesList))___		MergedTestPropertySources mergedTestPropertySources =_				TestPropertySourceUtils.buildMergedTestPropertySources(testClass)__		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass,_				StringUtils.toStringArray(locations),_				ClassUtils.toClassArray(classes),_				ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList),_				ActiveProfilesUtils.resolveActiveProfiles(testClass),_				mergedTestPropertySources.getLocations(),_				mergedTestPropertySources.getProperties(),_				contextCustomizers, contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,param,require,locations,classes,or,initializers,whether,locations,classes,or,initializers,are,required,typically,code,true,but,may,be,set,to,code,false,if,the,configured,loader,supports,empty,configuration,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,nullable,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,boolean,require,locations,classes,or,initializers,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,null,or,empty,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,new,array,list,list,class,classes,new,array,list,list,class,initializers,new,array,list,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,add,all,0,arrays,as,list,config,attributes,get,locations,classes,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,add,all,0,arrays,as,list,processed,locations,initializers,add,all,0,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,locations,break,set,context,customizer,context,customizers,get,context,customizers,test,class,collections,unmodifiable,list,config,attributes,list,assert,state,require,locations,classes,or,initializers,are,all,empty,locations,classes,initializers,context,customizers,string,format,s,was,unable,to,detect,defaults,and,no,application,context,initializers,or,context,customizers,were,declared,for,context,configuration,attributes,s,context,loader,get,class,get,simple,name,config,attributes,list,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,string,utils,to,string,array,locations,class,utils,to,class,array,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,customizers,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, @Nullable MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, 			boolean requireLocationsClassesOrInitializers);1519295386;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@param requireLocationsClassesOrInitializers whether locations, classes, or_initializers are required_ typically {@code true} but may be set to {@code false}_if the configured loader supports empty configuration_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, @Nullable MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate,_			boolean requireLocationsClassesOrInitializers) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be null or empty")___		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locations = new ArrayList<>()__		List<Class<?>> classes = new ArrayList<>()__		List<Class<?>> initializers = new ArrayList<>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_						configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locations.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classes.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(_						configAttributes.getDeclaringClass(), configAttributes.getLocations())__				locations.addAll(0, Arrays.asList(processedLocations))__				_			}_			initializers.addAll(0, Arrays.asList(configAttributes.getInitializers()))__			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		Set<ContextCustomizer> contextCustomizers = getContextCustomizers(testClass,_				Collections.unmodifiableList(configAttributesList))___		Assert.state(!(requireLocationsClassesOrInitializers &&_				areAllEmpty(locations, classes, initializers, contextCustomizers)), () -> String.format(_				"%s was unable to detect defaults, and no ApplicationContextInitializers " +_				"or ContextCustomizers were declared for context configuration attributes %s",_				contextLoader.getClass().getSimpleName(), configAttributesList))___		MergedTestPropertySources mergedTestPropertySources =_				TestPropertySourceUtils.buildMergedTestPropertySources(testClass)__		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass,_				StringUtils.toStringArray(locations), ClassUtils.toClassArray(classes),_				ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList),_				ActiveProfilesUtils.resolveActiveProfiles(testClass),_				mergedTestPropertySources.getLocations(),_				mergedTestPropertySources.getProperties(),_				contextCustomizers, contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,param,require,locations,classes,or,initializers,whether,locations,classes,or,initializers,are,required,typically,code,true,but,may,be,set,to,code,false,if,the,configured,loader,supports,empty,configuration,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,nullable,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,boolean,require,locations,classes,or,initializers,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,null,or,empty,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,new,array,list,list,class,classes,new,array,list,list,class,initializers,new,array,list,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,add,all,0,arrays,as,list,config,attributes,get,locations,classes,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,add,all,0,arrays,as,list,processed,locations,initializers,add,all,0,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,locations,break,set,context,customizer,context,customizers,get,context,customizers,test,class,collections,unmodifiable,list,config,attributes,list,assert,state,require,locations,classes,or,initializers,are,all,empty,locations,classes,initializers,context,customizers,string,format,s,was,unable,to,detect,defaults,and,no,application,context,initializers,or,context,customizers,were,declared,for,context,configuration,attributes,s,context,loader,get,class,get,simple,name,config,attributes,list,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,string,utils,to,string,array,locations,class,utils,to,class,array,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,customizers,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> protected abstract List<String> getDefaultTestExecutionListenerClassNames()_;1397082962;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code_TestExecutionListener} classes;protected abstract List<String> getDefaultTestExecutionListenerClassNames()_;get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes;protected,abstract,list,string,get,default,test,execution,listener,class,names
AbstractTestContextBootstrapper -> protected abstract List<String> getDefaultTestExecutionListenerClassNames()_;1398638841;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code_TestExecutionListener} classes;protected abstract List<String> getDefaultTestExecutionListenerClassNames()_;get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes;protected,abstract,list,string,get,default,test,execution,listener,class,names
AbstractTestContextBootstrapper -> protected abstract List<String> getDefaultTestExecutionListenerClassNames()_;1400509883;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code_TestExecutionListener} classes;protected abstract List<String> getDefaultTestExecutionListenerClassNames()_;get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes;protected,abstract,list,string,get,default,test,execution,listener,class,names
AbstractTestContextBootstrapper -> protected abstract List<String> getDefaultTestExecutionListenerClassNames()_;1400523530;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code_TestExecutionListener} classes;protected abstract List<String> getDefaultTestExecutionListenerClassNames()_;get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes;protected,abstract,list,string,get,default,test,execution,listener,class,names
AbstractTestContextBootstrapper -> protected abstract List<String> getDefaultTestExecutionListenerClassNames()_;1407967503;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code_TestExecutionListener} classes;protected abstract List<String> getDefaultTestExecutionListenerClassNames()_;get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes;protected,abstract,list,string,get,default,test,execution,listener,class,names
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, 			boolean requireLocationsClassesOrInitializers);1457462209;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@param requireLocationsClassesOrInitializers whether locations, classes, or_initializers are required_ typically {@code true} but may be set to {@code false}_if the configured loader supports empty configuration_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate,_			boolean requireLocationsClassesOrInitializers) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be null or empty")___		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locations = new ArrayList<String>()__		List<Class<?>> classes = new ArrayList<Class<?>>()__		List<Class<?>> initializers = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locations.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classes.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(_						configAttributes.getDeclaringClass(), configAttributes.getLocations())__				locations.addAll(0, Arrays.asList(processedLocations))__				_			}_			initializers.addAll(0, Arrays.asList(configAttributes.getInitializers()))__			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		if (requireLocationsClassesOrInitializers && areAllEmpty(locations, classes, initializers)) {_			throw new IllegalStateException(String.format(_					"%s was unable to detect defaults, and no ApplicationContextInitializers "_							+ "were declared for context configuration attributes %s",_					contextLoader.getClass().getSimpleName(), configAttributesList))__		}__		MergedTestPropertySources mergedTestPropertySources = TestPropertySourceUtils.buildMergedTestPropertySources(testClass)__		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass,_				StringUtils.toStringArray(locations),_				ClassUtils.toClassArray(classes),_				ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList),_				ActiveProfilesUtils.resolveActiveProfiles(testClass),_				mergedTestPropertySources.getLocations(),_				mergedTestPropertySources.getProperties(),_				contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,param,require,locations,classes,or,initializers,whether,locations,classes,or,initializers,are,required,typically,code,true,but,may,be,set,to,code,false,if,the,configured,loader,supports,empty,configuration,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,boolean,require,locations,classes,or,initializers,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,null,or,empty,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,new,array,list,string,list,class,classes,new,array,list,class,list,class,initializers,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,add,all,0,arrays,as,list,config,attributes,get,locations,classes,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,add,all,0,arrays,as,list,processed,locations,initializers,add,all,0,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,locations,break,if,require,locations,classes,or,initializers,are,all,empty,locations,classes,initializers,throw,new,illegal,state,exception,string,format,s,was,unable,to,detect,defaults,and,no,application,context,initializers,were,declared,for,context,configuration,attributes,s,context,loader,get,class,get,simple,name,config,attributes,list,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,string,utils,to,string,array,locations,class,utils,to,class,array,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, 			boolean requireLocationsClassesOrInitializers);1457727806;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@param requireLocationsClassesOrInitializers whether locations, classes, or_initializers are required_ typically {@code true} but may be set to {@code false}_if the configured loader supports empty configuration_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate,_			boolean requireLocationsClassesOrInitializers) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be null or empty")___		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locations = new ArrayList<String>()__		List<Class<?>> classes = new ArrayList<Class<?>>()__		List<Class<?>> initializers = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locations.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classes.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(_						configAttributes.getDeclaringClass(), configAttributes.getLocations())__				locations.addAll(0, Arrays.asList(processedLocations))__				_			}_			initializers.addAll(0, Arrays.asList(configAttributes.getInitializers()))__			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		Set<ContextCustomizer> contextCustomizers = getContextCustomizers(testClass,_				Collections.unmodifiableList(configAttributesList))___		if (requireLocationsClassesOrInitializers && areAllEmpty(locations, classes, initializers, contextCustomizers)) {_			throw new IllegalStateException(String.format(_					"%s was unable to detect defaults, and no ApplicationContextInitializers "_							+ "or ContextCustomizers were declared for context configuration attributes %s",_					contextLoader.getClass().getSimpleName(), configAttributesList))__		}__		MergedTestPropertySources mergedTestPropertySources = TestPropertySourceUtils.buildMergedTestPropertySources(testClass)__		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass,_				StringUtils.toStringArray(locations),_				ClassUtils.toClassArray(classes),_				ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList),_				ActiveProfilesUtils.resolveActiveProfiles(testClass),_				mergedTestPropertySources.getLocations(),_				mergedTestPropertySources.getProperties(),_				contextCustomizers, contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,param,require,locations,classes,or,initializers,whether,locations,classes,or,initializers,are,required,typically,code,true,but,may,be,set,to,code,false,if,the,configured,loader,supports,empty,configuration,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,boolean,require,locations,classes,or,initializers,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,null,or,empty,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,new,array,list,string,list,class,classes,new,array,list,class,list,class,initializers,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,add,all,0,arrays,as,list,config,attributes,get,locations,classes,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,add,all,0,arrays,as,list,processed,locations,initializers,add,all,0,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,locations,break,set,context,customizer,context,customizers,get,context,customizers,test,class,collections,unmodifiable,list,config,attributes,list,if,require,locations,classes,or,initializers,are,all,empty,locations,classes,initializers,context,customizers,throw,new,illegal,state,exception,string,format,s,was,unable,to,detect,defaults,and,no,application,context,initializers,or,context,customizers,were,declared,for,context,configuration,attributes,s,context,loader,get,class,get,simple,name,config,attributes,list,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,string,utils,to,string,array,locations,class,utils,to,class,array,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,customizers,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, 			boolean requireLocationsClassesOrInitializers);1458754760;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@param requireLocationsClassesOrInitializers whether locations, classes, or_initializers are required_ typically {@code true} but may be set to {@code false}_if the configured loader supports empty configuration_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate,_			boolean requireLocationsClassesOrInitializers) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be null or empty")___		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locations = new ArrayList<String>()__		List<Class<?>> classes = new ArrayList<Class<?>>()__		List<Class<?>> initializers = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locations.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classes.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(_						configAttributes.getDeclaringClass(), configAttributes.getLocations())__				locations.addAll(0, Arrays.asList(processedLocations))__				_			}_			initializers.addAll(0, Arrays.asList(configAttributes.getInitializers()))__			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		Set<ContextCustomizer> contextCustomizers = getContextCustomizers(testClass,_				Collections.unmodifiableList(configAttributesList))___		if (requireLocationsClassesOrInitializers && areAllEmpty(locations, classes, initializers, contextCustomizers)) {_			throw new IllegalStateException(String.format(_					"%s was unable to detect defaults, and no ApplicationContextInitializers "_							+ "or ContextCustomizers were declared for context configuration attributes %s",_					contextLoader.getClass().getSimpleName(), configAttributesList))__		}__		MergedTestPropertySources mergedTestPropertySources = TestPropertySourceUtils.buildMergedTestPropertySources(testClass)__		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass,_				StringUtils.toStringArray(locations),_				ClassUtils.toClassArray(classes),_				ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList),_				ActiveProfilesUtils.resolveActiveProfiles(testClass),_				mergedTestPropertySources.getLocations(),_				mergedTestPropertySources.getProperties(),_				contextCustomizers, contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,param,require,locations,classes,or,initializers,whether,locations,classes,or,initializers,are,required,typically,code,true,but,may,be,set,to,code,false,if,the,configured,loader,supports,empty,configuration,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,boolean,require,locations,classes,or,initializers,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,null,or,empty,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,new,array,list,string,list,class,classes,new,array,list,class,list,class,initializers,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,add,all,0,arrays,as,list,config,attributes,get,locations,classes,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,add,all,0,arrays,as,list,processed,locations,initializers,add,all,0,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,locations,break,set,context,customizer,context,customizers,get,context,customizers,test,class,collections,unmodifiable,list,config,attributes,list,if,require,locations,classes,or,initializers,are,all,empty,locations,classes,initializers,context,customizers,throw,new,illegal,state,exception,string,format,s,was,unable,to,detect,defaults,and,no,application,context,initializers,or,context,customizers,were,declared,for,context,configuration,attributes,s,context,loader,get,class,get,simple,name,config,attributes,list,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,string,utils,to,string,array,locations,class,utils,to,class,array,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,customizers,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, 			boolean requireLocationsClassesOrInitializers);1459174667;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@param requireLocationsClassesOrInitializers whether locations, classes, or_initializers are required_ typically {@code true} but may be set to {@code false}_if the configured loader supports empty configuration_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate,_			boolean requireLocationsClassesOrInitializers) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be null or empty")___		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locations = new ArrayList<String>()__		List<Class<?>> classes = new ArrayList<Class<?>>()__		List<Class<?>> initializers = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locations.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classes.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(_						configAttributes.getDeclaringClass(), configAttributes.getLocations())__				locations.addAll(0, Arrays.asList(processedLocations))__				_			}_			initializers.addAll(0, Arrays.asList(configAttributes.getInitializers()))__			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		Set<ContextCustomizer> contextCustomizers = getContextCustomizers(testClass,_				Collections.unmodifiableList(configAttributesList))___		if (requireLocationsClassesOrInitializers && areAllEmpty(locations, classes, initializers, contextCustomizers)) {_			throw new IllegalStateException(String.format(_					"%s was unable to detect defaults, and no ApplicationContextInitializers "_							+ "or ContextCustomizers were declared for context configuration attributes %s",_					contextLoader.getClass().getSimpleName(), configAttributesList))__		}__		MergedTestPropertySources mergedTestPropertySources = TestPropertySourceUtils.buildMergedTestPropertySources(testClass)__		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass,_				StringUtils.toStringArray(locations),_				ClassUtils.toClassArray(classes),_				ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList),_				ActiveProfilesUtils.resolveActiveProfiles(testClass),_				mergedTestPropertySources.getLocations(),_				mergedTestPropertySources.getProperties(),_				contextCustomizers, contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,param,require,locations,classes,or,initializers,whether,locations,classes,or,initializers,are,required,typically,code,true,but,may,be,set,to,code,false,if,the,configured,loader,supports,empty,configuration,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,boolean,require,locations,classes,or,initializers,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,null,or,empty,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,new,array,list,string,list,class,classes,new,array,list,class,list,class,initializers,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,add,all,0,arrays,as,list,config,attributes,get,locations,classes,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,add,all,0,arrays,as,list,processed,locations,initializers,add,all,0,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,locations,break,set,context,customizer,context,customizers,get,context,customizers,test,class,collections,unmodifiable,list,config,attributes,list,if,require,locations,classes,or,initializers,are,all,empty,locations,classes,initializers,context,customizers,throw,new,illegal,state,exception,string,format,s,was,unable,to,detect,defaults,and,no,application,context,initializers,or,context,customizers,were,declared,for,context,configuration,attributes,s,context,loader,get,class,get,simple,name,config,attributes,list,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,string,utils,to,string,array,locations,class,utils,to,class,array,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,customizers,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, 			boolean requireLocationsClassesOrInitializers);1459842161;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@param requireLocationsClassesOrInitializers whether locations, classes, or_initializers are required_ typically {@code true} but may be set to {@code false}_if the configured loader supports empty configuration_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate,_			boolean requireLocationsClassesOrInitializers) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be null or empty")___		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locations = new ArrayList<String>()__		List<Class<?>> classes = new ArrayList<Class<?>>()__		List<Class<?>> initializers = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locations.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classes.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(_						configAttributes.getDeclaringClass(), configAttributes.getLocations())__				locations.addAll(0, Arrays.asList(processedLocations))__				_			}_			initializers.addAll(0, Arrays.asList(configAttributes.getInitializers()))__			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		Set<ContextCustomizer> contextCustomizers = getContextCustomizers(testClass,_				Collections.unmodifiableList(configAttributesList))___		if (requireLocationsClassesOrInitializers &&_				areAllEmpty(locations, classes, initializers, contextCustomizers)) {_			throw new IllegalStateException(String.format(_					"%s was unable to detect defaults, and no ApplicationContextInitializers " +_					"or ContextCustomizers were declared for context configuration attributes %s",_					contextLoader.getClass().getSimpleName(), configAttributesList))__		}__		MergedTestPropertySources mergedTestPropertySources =_				TestPropertySourceUtils.buildMergedTestPropertySources(testClass)__		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass,_				StringUtils.toStringArray(locations),_				ClassUtils.toClassArray(classes),_				ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList),_				ActiveProfilesUtils.resolveActiveProfiles(testClass),_				mergedTestPropertySources.getLocations(),_				mergedTestPropertySources.getProperties(),_				contextCustomizers, contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,param,require,locations,classes,or,initializers,whether,locations,classes,or,initializers,are,required,typically,code,true,but,may,be,set,to,code,false,if,the,configured,loader,supports,empty,configuration,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,boolean,require,locations,classes,or,initializers,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,null,or,empty,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,new,array,list,string,list,class,classes,new,array,list,class,list,class,initializers,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,add,all,0,arrays,as,list,config,attributes,get,locations,classes,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,add,all,0,arrays,as,list,processed,locations,initializers,add,all,0,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,locations,break,set,context,customizer,context,customizers,get,context,customizers,test,class,collections,unmodifiable,list,config,attributes,list,if,require,locations,classes,or,initializers,are,all,empty,locations,classes,initializers,context,customizers,throw,new,illegal,state,exception,string,format,s,was,unable,to,detect,defaults,and,no,application,context,initializers,or,context,customizers,were,declared,for,context,configuration,attributes,s,context,loader,get,class,get,simple,name,config,attributes,list,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,string,utils,to,string,array,locations,class,utils,to,class,array,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,customizers,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, 			boolean requireLocationsClassesOrInitializers);1465306936;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@param requireLocationsClassesOrInitializers whether locations, classes, or_initializers are required_ typically {@code true} but may be set to {@code false}_if the configured loader supports empty configuration_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate,_			boolean requireLocationsClassesOrInitializers) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be null or empty")___		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locations = new ArrayList<String>()__		List<Class<?>> classes = new ArrayList<Class<?>>()__		List<Class<?>> initializers = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_						configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locations.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classes.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(_						configAttributes.getDeclaringClass(), configAttributes.getLocations())__				locations.addAll(0, Arrays.asList(processedLocations))__				_			}_			initializers.addAll(0, Arrays.asList(configAttributes.getInitializers()))__			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		Set<ContextCustomizer> contextCustomizers = getContextCustomizers(testClass,_				Collections.unmodifiableList(configAttributesList))___		if (requireLocationsClassesOrInitializers &&_				areAllEmpty(locations, classes, initializers, contextCustomizers)) {_			throw new IllegalStateException(String.format(_					"%s was unable to detect defaults, and no ApplicationContextInitializers " +_					"or ContextCustomizers were declared for context configuration attributes %s",_					contextLoader.getClass().getSimpleName(), configAttributesList))__		}__		MergedTestPropertySources mergedTestPropertySources =_				TestPropertySourceUtils.buildMergedTestPropertySources(testClass)__		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass,_				StringUtils.toStringArray(locations),_				ClassUtils.toClassArray(classes),_				ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList),_				ActiveProfilesUtils.resolveActiveProfiles(testClass),_				mergedTestPropertySources.getLocations(),_				mergedTestPropertySources.getProperties(),_				contextCustomizers, contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,param,require,locations,classes,or,initializers,whether,locations,classes,or,initializers,are,required,typically,code,true,but,may,be,set,to,code,false,if,the,configured,loader,supports,empty,configuration,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,boolean,require,locations,classes,or,initializers,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,null,or,empty,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,new,array,list,string,list,class,classes,new,array,list,class,list,class,initializers,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,add,all,0,arrays,as,list,config,attributes,get,locations,classes,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,add,all,0,arrays,as,list,processed,locations,initializers,add,all,0,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,locations,break,set,context,customizer,context,customizers,get,context,customizers,test,class,collections,unmodifiable,list,config,attributes,list,if,require,locations,classes,or,initializers,are,all,empty,locations,classes,initializers,context,customizers,throw,new,illegal,state,exception,string,format,s,was,unable,to,detect,defaults,and,no,application,context,initializers,or,context,customizers,were,declared,for,context,configuration,attributes,s,context,loader,get,class,get,simple,name,config,attributes,list,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,string,utils,to,string,array,locations,class,utils,to,class,array,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,customizers,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, 			boolean requireLocationsClassesOrInitializers);1467730834;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@param requireLocationsClassesOrInitializers whether locations, classes, or_initializers are required_ typically {@code true} but may be set to {@code false}_if the configured loader supports empty configuration_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate,_			boolean requireLocationsClassesOrInitializers) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be null or empty")___		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locations = new ArrayList<>()__		List<Class<?>> classes = new ArrayList<>()__		List<Class<?>> initializers = new ArrayList<>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_						configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locations.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classes.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(_						configAttributes.getDeclaringClass(), configAttributes.getLocations())__				locations.addAll(0, Arrays.asList(processedLocations))__				_			}_			initializers.addAll(0, Arrays.asList(configAttributes.getInitializers()))__			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		Set<ContextCustomizer> contextCustomizers = getContextCustomizers(testClass,_				Collections.unmodifiableList(configAttributesList))___		if (requireLocationsClassesOrInitializers &&_				areAllEmpty(locations, classes, initializers, contextCustomizers)) {_			throw new IllegalStateException(String.format(_					"%s was unable to detect defaults, and no ApplicationContextInitializers " +_					"or ContextCustomizers were declared for context configuration attributes %s",_					contextLoader.getClass().getSimpleName(), configAttributesList))__		}__		MergedTestPropertySources mergedTestPropertySources =_				TestPropertySourceUtils.buildMergedTestPropertySources(testClass)__		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass,_				StringUtils.toStringArray(locations),_				ClassUtils.toClassArray(classes),_				ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList),_				ActiveProfilesUtils.resolveActiveProfiles(testClass),_				mergedTestPropertySources.getLocations(),_				mergedTestPropertySources.getProperties(),_				contextCustomizers, contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,param,require,locations,classes,or,initializers,whether,locations,classes,or,initializers,are,required,typically,code,true,but,may,be,set,to,code,false,if,the,configured,loader,supports,empty,configuration,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,boolean,require,locations,classes,or,initializers,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,null,or,empty,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,new,array,list,list,class,classes,new,array,list,list,class,initializers,new,array,list,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,add,all,0,arrays,as,list,config,attributes,get,locations,classes,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,add,all,0,arrays,as,list,processed,locations,initializers,add,all,0,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,locations,break,set,context,customizer,context,customizers,get,context,customizers,test,class,collections,unmodifiable,list,config,attributes,list,if,require,locations,classes,or,initializers,are,all,empty,locations,classes,initializers,context,customizers,throw,new,illegal,state,exception,string,format,s,was,unable,to,detect,defaults,and,no,application,context,initializers,or,context,customizers,were,declared,for,context,configuration,attributes,s,context,loader,get,class,get,simple,name,config,attributes,list,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,string,utils,to,string,array,locations,class,utils,to,class,array,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,customizers,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, 			boolean requireLocationsClassesOrInitializers);1468334463;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@param requireLocationsClassesOrInitializers whether locations, classes, or_initializers are required_ typically {@code true} but may be set to {@code false}_if the configured loader supports empty configuration_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate,_			boolean requireLocationsClassesOrInitializers) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be null or empty")___		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locations = new ArrayList<>()__		List<Class<?>> classes = new ArrayList<>()__		List<Class<?>> initializers = new ArrayList<>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_						configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locations.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classes.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(_						configAttributes.getDeclaringClass(), configAttributes.getLocations())__				locations.addAll(0, Arrays.asList(processedLocations))__				_			}_			initializers.addAll(0, Arrays.asList(configAttributes.getInitializers()))__			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		Set<ContextCustomizer> contextCustomizers = getContextCustomizers(testClass,_				Collections.unmodifiableList(configAttributesList))___		Assert.state(!(requireLocationsClassesOrInitializers &&_				areAllEmpty(locations, classes, initializers, contextCustomizers)), () -> String.format(_				"%s was unable to detect defaults, and no ApplicationContextInitializers " +_				"or ContextCustomizers were declared for context configuration attributes %s",_				contextLoader.getClass().getSimpleName(), configAttributesList))___		MergedTestPropertySources mergedTestPropertySources =_				TestPropertySourceUtils.buildMergedTestPropertySources(testClass)__		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass,_				StringUtils.toStringArray(locations),_				ClassUtils.toClassArray(classes),_				ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList),_				ActiveProfilesUtils.resolveActiveProfiles(testClass),_				mergedTestPropertySources.getLocations(),_				mergedTestPropertySources.getProperties(),_				contextCustomizers, contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,param,require,locations,classes,or,initializers,whether,locations,classes,or,initializers,are,required,typically,code,true,but,may,be,set,to,code,false,if,the,configured,loader,supports,empty,configuration,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,boolean,require,locations,classes,or,initializers,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,null,or,empty,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,new,array,list,list,class,classes,new,array,list,list,class,initializers,new,array,list,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,add,all,0,arrays,as,list,config,attributes,get,locations,classes,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,add,all,0,arrays,as,list,processed,locations,initializers,add,all,0,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,locations,break,set,context,customizer,context,customizers,get,context,customizers,test,class,collections,unmodifiable,list,config,attributes,list,assert,state,require,locations,classes,or,initializers,are,all,empty,locations,classes,initializers,context,customizers,string,format,s,was,unable,to,detect,defaults,and,no,application,context,initializers,or,context,customizers,were,declared,for,context,configuration,attributes,s,context,loader,get,class,get,simple,name,config,attributes,list,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,string,utils,to,string,array,locations,class,utils,to,class,array,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,customizers,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate, 			boolean requireLocationsClassesOrInitializers);1468426720;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@param requireLocationsClassesOrInitializers whether locations, classes, or_initializers are required_ typically {@code true} but may be set to {@code false}_if the configured loader supports empty configuration_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate,_			boolean requireLocationsClassesOrInitializers) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be null or empty")___		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locations = new ArrayList<>()__		List<Class<?>> classes = new ArrayList<>()__		List<Class<?>> initializers = new ArrayList<>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_						configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locations.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classes.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(_						configAttributes.getDeclaringClass(), configAttributes.getLocations())__				locations.addAll(0, Arrays.asList(processedLocations))__				_			}_			initializers.addAll(0, Arrays.asList(configAttributes.getInitializers()))__			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		Set<ContextCustomizer> contextCustomizers = getContextCustomizers(testClass,_				Collections.unmodifiableList(configAttributesList))___		Assert.state(!(requireLocationsClassesOrInitializers &&_				areAllEmpty(locations, classes, initializers, contextCustomizers)), () -> String.format(_				"%s was unable to detect defaults, and no ApplicationContextInitializers " +_				"or ContextCustomizers were declared for context configuration attributes %s",_				contextLoader.getClass().getSimpleName(), configAttributesList))___		MergedTestPropertySources mergedTestPropertySources =_				TestPropertySourceUtils.buildMergedTestPropertySources(testClass)__		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass,_				StringUtils.toStringArray(locations),_				ClassUtils.toClassArray(classes),_				ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList),_				ActiveProfilesUtils.resolveActiveProfiles(testClass),_				mergedTestPropertySources.getLocations(),_				mergedTestPropertySources.getProperties(),_				contextCustomizers, contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,param,require,locations,classes,or,initializers,whether,locations,classes,or,initializers,are,required,typically,code,true,but,may,be,set,to,code,false,if,the,configured,loader,supports,empty,configuration,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,boolean,require,locations,classes,or,initializers,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,null,or,empty,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,new,array,list,list,class,classes,new,array,list,list,class,initializers,new,array,list,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,add,all,0,arrays,as,list,config,attributes,get,locations,classes,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,add,all,0,arrays,as,list,processed,locations,initializers,add,all,0,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,locations,break,set,context,customizer,context,customizers,get,context,customizers,test,class,collections,unmodifiable,list,config,attributes,list,assert,state,require,locations,classes,or,initializers,are,all,empty,locations,classes,initializers,context,customizers,string,format,s,was,unable,to,detect,defaults,and,no,application,context,initializers,or,context,customizers,were,declared,for,context,configuration,attributes,s,context,loader,get,class,get,simple,name,config,attributes,list,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,string,utils,to,string,array,locations,class,utils,to,class,array,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,customizers,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> @Nullable 	protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1495868221;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;@Nullable_	protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_						configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_							"Found explicit ContextLoader class [%s] for context configuration attributes %s",_							contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;nullable,protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> @Nullable 	protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1496955179;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;@Nullable_	protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_						configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_							"Found explicit ContextLoader class [%s] for context configuration attributes %s",_							contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;nullable,protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> @Nullable 	protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1500495740;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;@Nullable_	protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_						configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_							"Found explicit ContextLoader class [%s] for context configuration attributes %s",_							contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;nullable,protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> @Nullable 	protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1515772066;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;@Nullable_	protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_						configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_							"Found explicit ContextLoader class [%s] for context configuration attributes %s",_							contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;nullable,protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> @Nullable 	protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1516210145;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;@Nullable_	protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_						configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_							"Found explicit ContextLoader class [%s] for context configuration attributes %s",_							contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;nullable,protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> @Nullable 	protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1519295386;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null}_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;@Nullable_	protected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(configAttributesList, "ContextConfigurationAttributes list must not be null")___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_						configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (ContextLoader.class != contextLoaderClass) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_							"Found explicit ContextLoader class [%s] for context configuration attributes %s",_							contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;nullable,protected,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,config,attributes,list,context,configuration,attributes,list,must,not,be,null,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected List<ContextCustomizerFactory> getContextCustomizerFactories();1457727806;Get the {@link ContextCustomizerFactory} instances for this bootstrapper._<p>The default implementation uses the {@link SpringFactoriesLoader} mechanism_for loading factories configured in all {@code META-INF/spring.factories}_files on the classpath._@since 4.3_@see SpringFactoriesLoader#loadFactories;protected List<ContextCustomizerFactory> getContextCustomizerFactories() {_		return SpringFactoriesLoader.loadFactories(ContextCustomizerFactory.class, getClass().getClassLoader())__	};get,the,link,context,customizer,factory,instances,for,this,bootstrapper,p,the,default,implementation,uses,the,link,spring,factories,loader,mechanism,for,loading,factories,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,since,4,3,see,spring,factories,loader,load,factories;protected,list,context,customizer,factory,get,context,customizer,factories,return,spring,factories,loader,load,factories,context,customizer,factory,class,get,class,get,class,loader
AbstractTestContextBootstrapper -> protected List<ContextCustomizerFactory> getContextCustomizerFactories();1458754760;Get the {@link ContextCustomizerFactory} instances for this bootstrapper._<p>The default implementation uses the {@link SpringFactoriesLoader} mechanism_for loading factories configured in all {@code META-INF/spring.factories}_files on the classpath._@since 4.3_@see SpringFactoriesLoader#loadFactories;protected List<ContextCustomizerFactory> getContextCustomizerFactories() {_		return SpringFactoriesLoader.loadFactories(ContextCustomizerFactory.class, getClass().getClassLoader())__	};get,the,link,context,customizer,factory,instances,for,this,bootstrapper,p,the,default,implementation,uses,the,link,spring,factories,loader,mechanism,for,loading,factories,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,since,4,3,see,spring,factories,loader,load,factories;protected,list,context,customizer,factory,get,context,customizer,factories,return,spring,factories,loader,load,factories,context,customizer,factory,class,get,class,get,class,loader
AbstractTestContextBootstrapper -> protected List<ContextCustomizerFactory> getContextCustomizerFactories();1459174667;Get the {@link ContextCustomizerFactory} instances for this bootstrapper._<p>The default implementation uses the {@link SpringFactoriesLoader} mechanism_for loading factories configured in all {@code META-INF/spring.factories}_files on the classpath._@since 4.3_@see SpringFactoriesLoader#loadFactories;protected List<ContextCustomizerFactory> getContextCustomizerFactories() {_		return SpringFactoriesLoader.loadFactories(ContextCustomizerFactory.class, getClass().getClassLoader())__	};get,the,link,context,customizer,factory,instances,for,this,bootstrapper,p,the,default,implementation,uses,the,link,spring,factories,loader,mechanism,for,loading,factories,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,since,4,3,see,spring,factories,loader,load,factories;protected,list,context,customizer,factory,get,context,customizer,factories,return,spring,factories,loader,load,factories,context,customizer,factory,class,get,class,get,class,loader
AbstractTestContextBootstrapper -> protected List<ContextCustomizerFactory> getContextCustomizerFactories();1459842161;Get the {@link ContextCustomizerFactory} instances for this bootstrapper._<p>The default implementation uses the {@link SpringFactoriesLoader} mechanism_for loading factories configured in all {@code META-INF/spring.factories}_files on the classpath._@since 4.3_@see SpringFactoriesLoader#loadFactories;protected List<ContextCustomizerFactory> getContextCustomizerFactories() {_		return SpringFactoriesLoader.loadFactories(ContextCustomizerFactory.class, getClass().getClassLoader())__	};get,the,link,context,customizer,factory,instances,for,this,bootstrapper,p,the,default,implementation,uses,the,link,spring,factories,loader,mechanism,for,loading,factories,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,since,4,3,see,spring,factories,loader,load,factories;protected,list,context,customizer,factory,get,context,customizer,factories,return,spring,factories,loader,load,factories,context,customizer,factory,class,get,class,get,class,loader
AbstractTestContextBootstrapper -> protected List<ContextCustomizerFactory> getContextCustomizerFactories();1465306936;Get the {@link ContextCustomizerFactory} instances for this bootstrapper._<p>The default implementation uses the {@link SpringFactoriesLoader} mechanism_for loading factories configured in all {@code META-INF/spring.factories}_files on the classpath._@since 4.3_@see SpringFactoriesLoader#loadFactories;protected List<ContextCustomizerFactory> getContextCustomizerFactories() {_		return SpringFactoriesLoader.loadFactories(ContextCustomizerFactory.class, getClass().getClassLoader())__	};get,the,link,context,customizer,factory,instances,for,this,bootstrapper,p,the,default,implementation,uses,the,link,spring,factories,loader,mechanism,for,loading,factories,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,since,4,3,see,spring,factories,loader,load,factories;protected,list,context,customizer,factory,get,context,customizer,factories,return,spring,factories,loader,load,factories,context,customizer,factory,class,get,class,get,class,loader
AbstractTestContextBootstrapper -> protected List<ContextCustomizerFactory> getContextCustomizerFactories();1467730834;Get the {@link ContextCustomizerFactory} instances for this bootstrapper._<p>The default implementation uses the {@link SpringFactoriesLoader} mechanism_for loading factories configured in all {@code META-INF/spring.factories}_files on the classpath._@since 4.3_@see SpringFactoriesLoader#loadFactories;protected List<ContextCustomizerFactory> getContextCustomizerFactories() {_		return SpringFactoriesLoader.loadFactories(ContextCustomizerFactory.class, getClass().getClassLoader())__	};get,the,link,context,customizer,factory,instances,for,this,bootstrapper,p,the,default,implementation,uses,the,link,spring,factories,loader,mechanism,for,loading,factories,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,since,4,3,see,spring,factories,loader,load,factories;protected,list,context,customizer,factory,get,context,customizer,factories,return,spring,factories,loader,load,factories,context,customizer,factory,class,get,class,get,class,loader
AbstractTestContextBootstrapper -> protected List<ContextCustomizerFactory> getContextCustomizerFactories();1468334463;Get the {@link ContextCustomizerFactory} instances for this bootstrapper._<p>The default implementation uses the {@link SpringFactoriesLoader} mechanism_for loading factories configured in all {@code META-INF/spring.factories}_files on the classpath._@since 4.3_@see SpringFactoriesLoader#loadFactories;protected List<ContextCustomizerFactory> getContextCustomizerFactories() {_		return SpringFactoriesLoader.loadFactories(ContextCustomizerFactory.class, getClass().getClassLoader())__	};get,the,link,context,customizer,factory,instances,for,this,bootstrapper,p,the,default,implementation,uses,the,link,spring,factories,loader,mechanism,for,loading,factories,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,since,4,3,see,spring,factories,loader,load,factories;protected,list,context,customizer,factory,get,context,customizer,factories,return,spring,factories,loader,load,factories,context,customizer,factory,class,get,class,get,class,loader
AbstractTestContextBootstrapper -> protected List<ContextCustomizerFactory> getContextCustomizerFactories();1468426720;Get the {@link ContextCustomizerFactory} instances for this bootstrapper._<p>The default implementation uses the {@link SpringFactoriesLoader} mechanism_for loading factories configured in all {@code META-INF/spring.factories}_files on the classpath._@since 4.3_@see SpringFactoriesLoader#loadFactories;protected List<ContextCustomizerFactory> getContextCustomizerFactories() {_		return SpringFactoriesLoader.loadFactories(ContextCustomizerFactory.class, getClass().getClassLoader())__	};get,the,link,context,customizer,factory,instances,for,this,bootstrapper,p,the,default,implementation,uses,the,link,spring,factories,loader,mechanism,for,loading,factories,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,since,4,3,see,spring,factories,loader,load,factories;protected,list,context,customizer,factory,get,context,customizer,factories,return,spring,factories,loader,load,factories,context,customizer,factory,class,get,class,get,class,loader
AbstractTestContextBootstrapper -> protected List<ContextCustomizerFactory> getContextCustomizerFactories();1495868221;Get the {@link ContextCustomizerFactory} instances for this bootstrapper._<p>The default implementation uses the {@link SpringFactoriesLoader} mechanism_for loading factories configured in all {@code META-INF/spring.factories}_files on the classpath._@since 4.3_@see SpringFactoriesLoader#loadFactories;protected List<ContextCustomizerFactory> getContextCustomizerFactories() {_		return SpringFactoriesLoader.loadFactories(ContextCustomizerFactory.class, getClass().getClassLoader())__	};get,the,link,context,customizer,factory,instances,for,this,bootstrapper,p,the,default,implementation,uses,the,link,spring,factories,loader,mechanism,for,loading,factories,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,since,4,3,see,spring,factories,loader,load,factories;protected,list,context,customizer,factory,get,context,customizer,factories,return,spring,factories,loader,load,factories,context,customizer,factory,class,get,class,get,class,loader
AbstractTestContextBootstrapper -> protected List<ContextCustomizerFactory> getContextCustomizerFactories();1496955179;Get the {@link ContextCustomizerFactory} instances for this bootstrapper._<p>The default implementation uses the {@link SpringFactoriesLoader} mechanism_for loading factories configured in all {@code META-INF/spring.factories}_files on the classpath._@since 4.3_@see SpringFactoriesLoader#loadFactories;protected List<ContextCustomizerFactory> getContextCustomizerFactories() {_		return SpringFactoriesLoader.loadFactories(ContextCustomizerFactory.class, getClass().getClassLoader())__	};get,the,link,context,customizer,factory,instances,for,this,bootstrapper,p,the,default,implementation,uses,the,link,spring,factories,loader,mechanism,for,loading,factories,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,since,4,3,see,spring,factories,loader,load,factories;protected,list,context,customizer,factory,get,context,customizer,factories,return,spring,factories,loader,load,factories,context,customizer,factory,class,get,class,get,class,loader
AbstractTestContextBootstrapper -> protected List<ContextCustomizerFactory> getContextCustomizerFactories();1500495740;Get the {@link ContextCustomizerFactory} instances for this bootstrapper._<p>The default implementation uses the {@link SpringFactoriesLoader} mechanism_for loading factories configured in all {@code META-INF/spring.factories}_files on the classpath._@since 4.3_@see SpringFactoriesLoader#loadFactories;protected List<ContextCustomizerFactory> getContextCustomizerFactories() {_		return SpringFactoriesLoader.loadFactories(ContextCustomizerFactory.class, getClass().getClassLoader())__	};get,the,link,context,customizer,factory,instances,for,this,bootstrapper,p,the,default,implementation,uses,the,link,spring,factories,loader,mechanism,for,loading,factories,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,since,4,3,see,spring,factories,loader,load,factories;protected,list,context,customizer,factory,get,context,customizer,factories,return,spring,factories,loader,load,factories,context,customizer,factory,class,get,class,get,class,loader
AbstractTestContextBootstrapper -> protected List<ContextCustomizerFactory> getContextCustomizerFactories();1515772066;Get the {@link ContextCustomizerFactory} instances for this bootstrapper._<p>The default implementation uses the {@link SpringFactoriesLoader} mechanism_for loading factories configured in all {@code META-INF/spring.factories}_files on the classpath._@since 4.3_@see SpringFactoriesLoader#loadFactories;protected List<ContextCustomizerFactory> getContextCustomizerFactories() {_		return SpringFactoriesLoader.loadFactories(ContextCustomizerFactory.class, getClass().getClassLoader())__	};get,the,link,context,customizer,factory,instances,for,this,bootstrapper,p,the,default,implementation,uses,the,link,spring,factories,loader,mechanism,for,loading,factories,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,since,4,3,see,spring,factories,loader,load,factories;protected,list,context,customizer,factory,get,context,customizer,factories,return,spring,factories,loader,load,factories,context,customizer,factory,class,get,class,get,class,loader
AbstractTestContextBootstrapper -> protected List<ContextCustomizerFactory> getContextCustomizerFactories();1516210145;Get the {@link ContextCustomizerFactory} instances for this bootstrapper._<p>The default implementation uses the {@link SpringFactoriesLoader} mechanism_for loading factories configured in all {@code META-INF/spring.factories}_files on the classpath._@since 4.3_@see SpringFactoriesLoader#loadFactories;protected List<ContextCustomizerFactory> getContextCustomizerFactories() {_		return SpringFactoriesLoader.loadFactories(ContextCustomizerFactory.class, getClass().getClassLoader())__	};get,the,link,context,customizer,factory,instances,for,this,bootstrapper,p,the,default,implementation,uses,the,link,spring,factories,loader,mechanism,for,loading,factories,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,since,4,3,see,spring,factories,loader,load,factories;protected,list,context,customizer,factory,get,context,customizer,factories,return,spring,factories,loader,load,factories,context,customizer,factory,class,get,class,get,class,loader
AbstractTestContextBootstrapper -> protected List<ContextCustomizerFactory> getContextCustomizerFactories();1519295386;Get the {@link ContextCustomizerFactory} instances for this bootstrapper._<p>The default implementation uses the {@link SpringFactoriesLoader} mechanism_for loading factories configured in all {@code META-INF/spring.factories}_files on the classpath._@since 4.3_@see SpringFactoriesLoader#loadFactories;protected List<ContextCustomizerFactory> getContextCustomizerFactories() {_		return SpringFactoriesLoader.loadFactories(ContextCustomizerFactory.class, getClass().getClassLoader())__	};get,the,link,context,customizer,factory,instances,for,this,bootstrapper,p,the,default,implementation,uses,the,link,spring,factories,loader,mechanism,for,loading,factories,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,since,4,3,see,spring,factories,loader,load,factories;protected,list,context,customizer,factory,get,context,customizer,factories,return,spring,factories,loader,load,factories,context,customizer,factory,class,get,class,get,class,loader
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1408048216;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process__never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never_{@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1408062102;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process__never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never_{@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1408063803;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process__never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never_{@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1413848647;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process__never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never_{@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1429051063;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process__never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never_{@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1429465455;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process__never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never_{@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1429559310;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process__never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never_{@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1432125256;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1432246071;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1432856630;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1434234880;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1457462209;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1457727806;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1458754760;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1459174667;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1459842161;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1465306936;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1467730834;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1468334463;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1468426720;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1495868221;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1496955179;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1500495740;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1515772066;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1516210145;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig);1519295386;Process the supplied, newly instantiated {@link MergedContextConfiguration} instance._<p>The returned {@link MergedContextConfiguration} instance may be a wrapper_around or a replacement for the original._<p>The default implementation simply returns the supplied instance unmodified._<p>Concrete subclasses may choose to return a specialized subclass of_{@link MergedContextConfiguration} based on properties in the supplied instance._@param mergedConfig the {@code MergedContextConfiguration} to process_ never {@code null}_@return a fully initialized {@code MergedContextConfiguration}_ never {@code null};protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {_		return mergedConfig__	};process,the,supplied,newly,instantiated,link,merged,context,configuration,instance,p,the,returned,link,merged,context,configuration,instance,may,be,a,wrapper,around,or,a,replacement,for,the,original,p,the,default,implementation,simply,returns,the,supplied,instance,unmodified,p,concrete,subclasses,may,choose,to,return,a,specialized,subclass,of,link,merged,context,configuration,based,on,properties,in,the,supplied,instance,param,merged,config,the,code,merged,context,configuration,to,process,never,code,null,return,a,fully,initialized,code,merged,context,configuration,never,code,null;protected,merged,context,configuration,process,merged,context,configuration,merged,context,configuration,merged,config,return,merged,config
AbstractTestContextBootstrapper -> private Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1397082962;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}.__<p>Beginning with the first level in the context configuration attributes hierarchy:__<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>__@param configAttributesList the list of configuration attributes to process__must not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;private Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {_		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}__			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (!ContextLoader.class.equals(contextLoaderClass)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}__		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;private,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,equals,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> private Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1398638841;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;private Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")__		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (!ContextLoader.class.equals(contextLoaderClass)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;private,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,equals,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> private Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1400509883;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;private Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")__		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (!ContextLoader.class.equals(contextLoaderClass)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;private,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,equals,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> private Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1400523530;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;private Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")__		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (!ContextLoader.class.equals(contextLoaderClass)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;private,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,equals,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> private Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1407967503;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;private Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")__		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (!ContextLoader.class.equals(contextLoaderClass)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;private,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,equals,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> private Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1408048216;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;private Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")__		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (!ContextLoader.class.equals(contextLoaderClass)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;private,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,equals,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> private Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1408062102;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;private Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")__		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (!ContextLoader.class.equals(contextLoaderClass)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;private,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,equals,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> private Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1408063803;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;private Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")__		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (!ContextLoader.class.equals(contextLoaderClass)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;private,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,equals,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> private Class<? extends ContextLoader> resolveExplicitContextLoaderClass( 			List<ContextConfigurationAttributes> configAttributesList);1413848647;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the supplied_list of {@link ContextConfigurationAttributes}._<p>Beginning with the first level in the context configuration attributes hierarchy:_<ol>_<li>If the {@link ContextConfigurationAttributes#getContextLoaderClass()_contextLoaderClass} property of {@link ContextConfigurationAttributes} is_configured with an explicit class, that class will be returned.</li>_<li>If an explicit {@code ContextLoader} class is not specified at the current_level in the hierarchy, traverse to the next level in the hierarchy and return to_step #1.</li>_</ol>_@param configAttributesList the list of configuration attributes to process__must not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the {@code ContextLoader} class to use for the supplied configuration_attributes, or {@code null} if no explicit loader is found_@throws IllegalArgumentException if supplied configuration attributes are_{@code null} or <em>empty</em>;private Class<? extends ContextLoader> resolveExplicitContextLoaderClass(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")__		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s",_					configAttributes))__			}_			Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass()__			if (!ContextLoader.class.equals(contextLoaderClass)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Found explicit ContextLoader class [%s] for context configuration attributes %s",_						contextLoaderClass.getName(), configAttributes))__				}_				return contextLoaderClass__			}_		}_		return null__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,p,beginning,with,the,first,level,in,the,context,configuration,attributes,hierarchy,ol,li,if,the,link,context,configuration,attributes,get,context,loader,class,context,loader,class,property,of,link,context,configuration,attributes,is,configured,with,an,explicit,class,that,class,will,be,returned,li,li,if,an,explicit,code,context,loader,class,is,not,specified,at,the,current,level,in,the,hierarchy,traverse,to,the,next,level,in,the,hierarchy,and,return,to,step,1,li,ol,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,code,context,loader,class,to,use,for,the,supplied,configuration,attributes,or,code,null,if,no,explicit,loader,is,found,throws,illegal,argument,exception,if,supplied,configuration,attributes,are,code,null,or,em,empty,em;private,class,extends,context,loader,resolve,explicit,context,loader,class,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,resolving,context,loader,for,context,configuration,attributes,s,config,attributes,class,extends,context,loader,context,loader,class,config,attributes,get,context,loader,class,if,context,loader,class,equals,context,loader,class,if,logger,is,debug,enabled,logger,debug,string,format,found,explicit,context,loader,class,s,for,context,configuration,attributes,s,context,loader,class,get,name,config,attributes,return,context,loader,class,return,null
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1408048216;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		final List<String> classNames = SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class,_			getClass().getClassLoader())___		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_				SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,final,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1408062102;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		final List<String> classNames = SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class,_			getClass().getClassLoader())___		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_				SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,final,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1408063803;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		final List<String> classNames = SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class,_			getClass().getClassLoader())___		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_				SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,final,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1413848647;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		final List<String> classNames = SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class,_			getClass().getClassLoader())___		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_				SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,final,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1429051063;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		final List<String> classNames = SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class,_			getClass().getClassLoader())___		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_				SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,final,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1429465455;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		final List<String> classNames = SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class,_			getClass().getClassLoader())___		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_				SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,final,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1429559310;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		final List<String> classNames = SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class,_			getClass().getClassLoader())___		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_				SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,final,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1432125256;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		final List<String> classNames = SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class,_			getClass().getClassLoader())___		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_				SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,final,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1432246071;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		final List<String> classNames = SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class,_			getClass().getClassLoader())___		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_				SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,final,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1432856630;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		final List<String> classNames = SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class,_			getClass().getClassLoader())___		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_				SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,final,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1434234880;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		final List<String> classNames = SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class,_			getClass().getClassLoader())___		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_				SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,final,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1457462209;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		final List<String> classNames = SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class,_			getClass().getClassLoader())___		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_				SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,final,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1457727806;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		final List<String> classNames = SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class,_			getClass().getClassLoader())___		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_				SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,final,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1458754760;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		final List<String> classNames = SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class,_			getClass().getClassLoader())___		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_				SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,final,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1459174667;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		final List<String> classNames = SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class,_			getClass().getClassLoader())___		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_				SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,final,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1459842161;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		List<String> classNames =_				SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class, getClass().getClassLoader())__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_					SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1465306936;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		List<String> classNames =_				SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class, getClass().getClassLoader())__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_					SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1467730834;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		List<String> classNames =_				SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class, getClass().getClassLoader())__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_					SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1468334463;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		List<String> classNames =_				SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class, getClass().getClassLoader())__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_					SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1468426720;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		List<String> classNames =_				SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class, getClass().getClassLoader())__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_					SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1495868221;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		List<String> classNames =_				SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class, getClass().getClassLoader())__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_					SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1496955179;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		List<String> classNames =_				SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class, getClass().getClassLoader())__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_					SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1500495740;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		List<String> classNames =_				SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class, getClass().getClassLoader())__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_					SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1515772066;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		List<String> classNames =_				SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class, getClass().getClassLoader())__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_					SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1516210145;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		List<String> classNames =_				SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class, getClass().getClassLoader())__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_					SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected List<String> getDefaultTestExecutionListenerClassNames();1519295386;Get the names of the default {@link TestExecutionListener} classes for_this bootstrapper._<p>The default implementation looks up all_{@code org.springframework.test.context.TestExecutionListener} entries_configured in all {@code META-INF/spring.factories} files on the classpath._<p>This method is invoked by {@link #getDefaultTestExecutionListenerClasses()}._@return an <em>unmodifiable</em> list of names of default {@code TestExecutionListener}_classes_@see SpringFactoriesLoader#loadFactoryNames;protected List<String> getDefaultTestExecutionListenerClassNames() {_		List<String> classNames =_				SpringFactoriesLoader.loadFactoryNames(TestExecutionListener.class, getClass().getClassLoader())__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s",_					SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames))__		}_		return Collections.unmodifiableList(classNames)__	};get,the,names,of,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,the,default,implementation,looks,up,all,code,org,springframework,test,context,test,execution,listener,entries,configured,in,all,code,meta,inf,spring,factories,files,on,the,classpath,p,this,method,is,invoked,by,link,get,default,test,execution,listener,classes,return,an,em,unmodifiable,em,list,of,names,of,default,code,test,execution,listener,classes,see,spring,factories,loader,load,factory,names;protected,list,string,get,default,test,execution,listener,class,names,list,string,class,names,spring,factories,loader,load,factory,names,test,execution,listener,class,get,class,get,class,loader,if,logger,is,info,enabled,logger,info,string,format,loaded,default,test,execution,listener,class,names,from,location,s,s,spring,factories,loader,class,names,return,collections,unmodifiable,list,class,names
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1397082962;Determine the default {@link ContextLoader} class to use for the supplied_test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class;protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1398638841;Determine the default {@link ContextLoader} class to use for the supplied_test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class;protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1400509883;Determine the default {@link ContextLoader} class to use for the supplied_test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class;protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1400523530;Determine the default {@link ContextLoader} class to use for the supplied_test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class;protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1407967503;Determine the default {@link ContextLoader} class to use for the supplied_test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class;protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1408048216;Determine the default {@link ContextLoader} class to use for the supplied_test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class;protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1408062102;Determine the default {@link ContextLoader} class to use for the supplied_test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class;protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1408063803;Determine the default {@link ContextLoader} class to use for the supplied_test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class;protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1413848647;Determine the default {@link ContextLoader} class to use for the supplied_test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class;protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1429051063;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1429465455;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1429559310;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1432125256;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1432246071;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1432856630;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1434234880;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1457462209;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1457727806;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1458754760;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1459174667;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1459842161;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1465306936;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1467730834;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1468334463;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1468426720;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1495868221;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1496955179;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1500495740;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1515772066;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1516210145;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;1519295386;Determine the default {@link ContextLoader} {@linkplain Class class}_to use for the supplied test class._<p>The class returned by this method will only be used if a {@code ContextLoader}_class has not been explicitly declared via {@link ContextConfiguration#loader}._@param testClass the test class for which to retrieve the default_{@code ContextLoader} class_@return the default {@code ContextLoader} class for the supplied test class_(never {@code null});protected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass)_;determine,the,default,link,context,loader,linkplain,class,class,to,use,for,the,supplied,test,class,p,the,class,returned,by,this,method,will,only,be,used,if,a,code,context,loader,class,has,not,been,explicitly,declared,via,link,context,configuration,loader,param,test,class,the,test,class,for,which,to,retrieve,the,default,code,context,loader,class,return,the,default,code,context,loader,class,for,the,supplied,test,class,never,code,null;protected,abstract,class,extends,context,loader,get,default,context,loader,class,class,test,class
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1397082962;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1398638841;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1400509883;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1400523530;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1407967503;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1408048216;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1408062102;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1408063803;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1413848647;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1429051063;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1429465455;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1429559310;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1432125256;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1432246071;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1432856630;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1434234880;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1457462209;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1457727806;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1458754760;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1459174667;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1459842161;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1465306936;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1467730834;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1468334463;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1468426720;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1495868221;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public BootstrapContext getBootstrapContext();1496955179;{@inheritDoc};@Override_	public BootstrapContext getBootstrapContext() {_		return this.bootstrapContext__	};inherit,doc;override,public,bootstrap,context,get,bootstrap,context,return,this,bootstrap,context
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1400509883;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locationsList = new ArrayList<String>()__		List<Class<?>> classesList = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_						configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locationsList.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classesList.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(configAttributes.getDeclaringClass(),_						configAttributes.getLocations())__				locationsList.addAll(0, Arrays.asList(processedLocations))__				_			}_			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		String[] locations = StringUtils.toStringArray(locationsList)__		Class<?>[] classes = ClassUtils.toClassArray(classesList)__		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList)__		String[] activeProfiles = ActiveProfilesUtils.resolveActiveProfiles(testClass)___		return buildMergedContextConfiguration(testClass, locations, classes, initializerClasses, activeProfiles,_				contextLoader, cacheAwareContextLoaderDelegate, parentConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,list,new,array,list,string,list,class,classes,list,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,list,add,all,0,arrays,as,list,config,attributes,get,locations,classes,list,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,list,add,all,0,arrays,as,list,processed,locations,if,config,attributes,is,inherit,locations,break,string,locations,string,utils,to,string,array,locations,list,class,classes,class,utils,to,class,array,classes,list,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,string,active,profiles,active,profiles,utils,resolve,active,profiles,test,class,return,build,merged,context,configuration,test,class,locations,classes,initializer,classes,active,profiles,context,loader,cache,aware,context,loader,delegate,parent,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1400523530;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locationsList = new ArrayList<String>()__		List<Class<?>> classesList = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_						configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locationsList.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classesList.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(configAttributes.getDeclaringClass(),_						configAttributes.getLocations())__				locationsList.addAll(0, Arrays.asList(processedLocations))__				_			}_			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		String[] locations = StringUtils.toStringArray(locationsList)__		Class<?>[] classes = ClassUtils.toClassArray(classesList)__		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList)__		String[] activeProfiles = ActiveProfilesUtils.resolveActiveProfiles(testClass)___		return buildMergedContextConfiguration(testClass, locations, classes, initializerClasses, activeProfiles,_				contextLoader, cacheAwareContextLoaderDelegate, parentConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,list,new,array,list,string,list,class,classes,list,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,list,add,all,0,arrays,as,list,config,attributes,get,locations,classes,list,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,list,add,all,0,arrays,as,list,processed,locations,if,config,attributes,is,inherit,locations,break,string,locations,string,utils,to,string,array,locations,list,class,classes,class,utils,to,class,array,classes,list,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,string,active,profiles,active,profiles,utils,resolve,active,profiles,test,class,return,build,merged,context,configuration,test,class,locations,classes,initializer,classes,active,profiles,context,loader,cache,aware,context,loader,delegate,parent,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1407967503;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locationsList = new ArrayList<String>()__		List<Class<?>> classesList = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locationsList.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classesList.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(configAttributes.getDeclaringClass(),_					configAttributes.getLocations())__				locationsList.addAll(0, Arrays.asList(processedLocations))__				_			}_			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		String[] locations = StringUtils.toStringArray(locationsList)__		Class<?>[] classes = ClassUtils.toClassArray(classesList)__		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList)__		String[] activeProfiles = ActiveProfilesUtils.resolveActiveProfiles(testClass)__		MergedTestPropertySources mergedTestPropertySources = TestPropertySourceUtils.buildMergedTestPropertySources(testClass)___		return buildMergedContextConfiguration(testClass, locations, classes, initializerClasses, activeProfiles,_			mergedTestPropertySources.getLocations(), mergedTestPropertySources.getProperties(), contextLoader,_			cacheAwareContextLoaderDelegate, parentConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,list,new,array,list,string,list,class,classes,list,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,list,add,all,0,arrays,as,list,config,attributes,get,locations,classes,list,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,list,add,all,0,arrays,as,list,processed,locations,if,config,attributes,is,inherit,locations,break,string,locations,string,utils,to,string,array,locations,list,class,classes,class,utils,to,class,array,classes,list,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,string,active,profiles,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,return,build,merged,context,configuration,test,class,locations,classes,initializer,classes,active,profiles,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,loader,cache,aware,context,loader,delegate,parent,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1408048216;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locationsList = new ArrayList<String>()__		List<Class<?>> classesList = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locationsList.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classesList.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(configAttributes.getDeclaringClass(),_					configAttributes.getLocations())__				locationsList.addAll(0, Arrays.asList(processedLocations))__				_			}_			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		String[] locations = StringUtils.toStringArray(locationsList)__		Class<?>[] classes = ClassUtils.toClassArray(classesList)__		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList)__		String[] activeProfiles = ActiveProfilesUtils.resolveActiveProfiles(testClass)__		MergedTestPropertySources mergedTestPropertySources = TestPropertySourceUtils.buildMergedTestPropertySources(testClass)___		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass, locations, classes,_			initializerClasses, activeProfiles, mergedTestPropertySources.getLocations(),_			mergedTestPropertySources.getProperties(), contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,list,new,array,list,string,list,class,classes,list,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,list,add,all,0,arrays,as,list,config,attributes,get,locations,classes,list,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,list,add,all,0,arrays,as,list,processed,locations,if,config,attributes,is,inherit,locations,break,string,locations,string,utils,to,string,array,locations,list,class,classes,class,utils,to,class,array,classes,list,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,string,active,profiles,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,locations,classes,initializer,classes,active,profiles,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1408062102;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locationsList = new ArrayList<String>()__		List<Class<?>> classesList = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locationsList.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classesList.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(configAttributes.getDeclaringClass(),_					configAttributes.getLocations())__				locationsList.addAll(0, Arrays.asList(processedLocations))__				_			}_			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		String[] locations = StringUtils.toStringArray(locationsList)__		Class<?>[] classes = ClassUtils.toClassArray(classesList)__		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList)__		String[] activeProfiles = ActiveProfilesUtils.resolveActiveProfiles(testClass)__		MergedTestPropertySources mergedTestPropertySources = TestPropertySourceUtils.buildMergedTestPropertySources(testClass)___		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass, locations, classes,_			initializerClasses, activeProfiles, mergedTestPropertySources.getLocations(),_			mergedTestPropertySources.getProperties(), contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,list,new,array,list,string,list,class,classes,list,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,list,add,all,0,arrays,as,list,config,attributes,get,locations,classes,list,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,list,add,all,0,arrays,as,list,processed,locations,if,config,attributes,is,inherit,locations,break,string,locations,string,utils,to,string,array,locations,list,class,classes,class,utils,to,class,array,classes,list,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,string,active,profiles,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,locations,classes,initializer,classes,active,profiles,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1408063803;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locationsList = new ArrayList<String>()__		List<Class<?>> classesList = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locationsList.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classesList.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(configAttributes.getDeclaringClass(),_					configAttributes.getLocations())__				locationsList.addAll(0, Arrays.asList(processedLocations))__				_			}_			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		String[] locations = StringUtils.toStringArray(locationsList)__		Class<?>[] classes = ClassUtils.toClassArray(classesList)__		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList)__		String[] activeProfiles = ActiveProfilesUtils.resolveActiveProfiles(testClass)__		MergedTestPropertySources mergedTestPropertySources = TestPropertySourceUtils.buildMergedTestPropertySources(testClass)___		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass, locations, classes,_			initializerClasses, activeProfiles, mergedTestPropertySources.getLocations(),_			mergedTestPropertySources.getProperties(), contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,list,new,array,list,string,list,class,classes,list,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,list,add,all,0,arrays,as,list,config,attributes,get,locations,classes,list,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,list,add,all,0,arrays,as,list,processed,locations,if,config,attributes,is,inherit,locations,break,string,locations,string,utils,to,string,array,locations,list,class,classes,class,utils,to,class,array,classes,list,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,string,active,profiles,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,locations,classes,initializer,classes,active,profiles,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1413848647;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locationsList = new ArrayList<String>()__		List<Class<?>> classesList = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locationsList.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classesList.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(configAttributes.getDeclaringClass(),_					configAttributes.getLocations())__				locationsList.addAll(0, Arrays.asList(processedLocations))__				_			}_			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		String[] locations = StringUtils.toStringArray(locationsList)__		Class<?>[] classes = ClassUtils.toClassArray(classesList)__		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList)__		String[] activeProfiles = ActiveProfilesUtils.resolveActiveProfiles(testClass)__		MergedTestPropertySources mergedTestPropertySources = TestPropertySourceUtils.buildMergedTestPropertySources(testClass)___		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass, locations, classes,_			initializerClasses, activeProfiles, mergedTestPropertySources.getLocations(),_			mergedTestPropertySources.getProperties(), contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,list,new,array,list,string,list,class,classes,list,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,list,add,all,0,arrays,as,list,config,attributes,get,locations,classes,list,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,list,add,all,0,arrays,as,list,processed,locations,if,config,attributes,is,inherit,locations,break,string,locations,string,utils,to,string,array,locations,list,class,classes,class,utils,to,class,array,classes,list,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,string,active,profiles,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,locations,classes,initializer,classes,active,profiles,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1429051063;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locationsList = new ArrayList<String>()__		List<Class<?>> classesList = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locationsList.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classesList.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(configAttributes.getDeclaringClass(),_					configAttributes.getLocations())__				locationsList.addAll(0, Arrays.asList(processedLocations))__				_			}_			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		String[] locations = StringUtils.toStringArray(locationsList)__		Class<?>[] classes = ClassUtils.toClassArray(classesList)__		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList)__		String[] activeProfiles = ActiveProfilesUtils.resolveActiveProfiles(testClass)__		MergedTestPropertySources mergedTestPropertySources = TestPropertySourceUtils.buildMergedTestPropertySources(testClass)___		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass, locations, classes,_			initializerClasses, activeProfiles, mergedTestPropertySources.getLocations(),_			mergedTestPropertySources.getProperties(), contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,list,new,array,list,string,list,class,classes,list,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,list,add,all,0,arrays,as,list,config,attributes,get,locations,classes,list,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,list,add,all,0,arrays,as,list,processed,locations,if,config,attributes,is,inherit,locations,break,string,locations,string,utils,to,string,array,locations,list,class,classes,class,utils,to,class,array,classes,list,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,string,active,profiles,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,locations,classes,initializer,classes,active,profiles,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1429465455;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locationsList = new ArrayList<String>()__		List<Class<?>> classesList = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locationsList.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classesList.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(configAttributes.getDeclaringClass(),_					configAttributes.getLocations())__				locationsList.addAll(0, Arrays.asList(processedLocations))__				_			}_			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		String[] locations = StringUtils.toStringArray(locationsList)__		Class<?>[] classes = ClassUtils.toClassArray(classesList)__		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList)__		String[] activeProfiles = ActiveProfilesUtils.resolveActiveProfiles(testClass)__		MergedTestPropertySources mergedTestPropertySources = TestPropertySourceUtils.buildMergedTestPropertySources(testClass)___		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass, locations, classes,_			initializerClasses, activeProfiles, mergedTestPropertySources.getLocations(),_			mergedTestPropertySources.getProperties(), contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,list,new,array,list,string,list,class,classes,list,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,list,add,all,0,arrays,as,list,config,attributes,get,locations,classes,list,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,list,add,all,0,arrays,as,list,processed,locations,if,config,attributes,is,inherit,locations,break,string,locations,string,utils,to,string,array,locations,list,class,classes,class,utils,to,class,array,classes,list,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,string,active,profiles,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,locations,classes,initializer,classes,active,profiles,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1429559310;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locationsList = new ArrayList<String>()__		List<Class<?>> classesList = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locationsList.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classesList.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(configAttributes.getDeclaringClass(),_					configAttributes.getLocations())__				locationsList.addAll(0, Arrays.asList(processedLocations))__				_			}_			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		String[] locations = StringUtils.toStringArray(locationsList)__		Class<?>[] classes = ClassUtils.toClassArray(classesList)__		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList)__		String[] activeProfiles = ActiveProfilesUtils.resolveActiveProfiles(testClass)__		MergedTestPropertySources mergedTestPropertySources = TestPropertySourceUtils.buildMergedTestPropertySources(testClass)___		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass, locations, classes,_			initializerClasses, activeProfiles, mergedTestPropertySources.getLocations(),_			mergedTestPropertySources.getProperties(), contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,list,new,array,list,string,list,class,classes,list,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,list,add,all,0,arrays,as,list,config,attributes,get,locations,classes,list,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,list,add,all,0,arrays,as,list,processed,locations,if,config,attributes,is,inherit,locations,break,string,locations,string,utils,to,string,array,locations,list,class,classes,class,utils,to,class,array,classes,list,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,string,active,profiles,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,locations,classes,initializer,classes,active,profiles,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1432125256;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locationsList = new ArrayList<String>()__		List<Class<?>> classesList = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locationsList.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classesList.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(configAttributes.getDeclaringClass(),_					configAttributes.getLocations())__				locationsList.addAll(0, Arrays.asList(processedLocations))__				_			}_			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		String[] locations = StringUtils.toStringArray(locationsList)__		Class<?>[] classes = ClassUtils.toClassArray(classesList)__		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList)__		String[] activeProfiles = ActiveProfilesUtils.resolveActiveProfiles(testClass)__		MergedTestPropertySources mergedTestPropertySources = TestPropertySourceUtils.buildMergedTestPropertySources(testClass)___		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass, locations, classes,_			initializerClasses, activeProfiles, mergedTestPropertySources.getLocations(),_			mergedTestPropertySources.getProperties(), contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,list,new,array,list,string,list,class,classes,list,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,list,add,all,0,arrays,as,list,config,attributes,get,locations,classes,list,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,list,add,all,0,arrays,as,list,processed,locations,if,config,attributes,is,inherit,locations,break,string,locations,string,utils,to,string,array,locations,list,class,classes,class,utils,to,class,array,classes,list,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,string,active,profiles,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,locations,classes,initializer,classes,active,profiles,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1432246071;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locationsList = new ArrayList<String>()__		List<Class<?>> classesList = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locationsList.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classesList.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(configAttributes.getDeclaringClass(),_					configAttributes.getLocations())__				locationsList.addAll(0, Arrays.asList(processedLocations))__				_			}_			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		String[] locations = StringUtils.toStringArray(locationsList)__		Class<?>[] classes = ClassUtils.toClassArray(classesList)__		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList)__		String[] activeProfiles = ActiveProfilesUtils.resolveActiveProfiles(testClass)__		MergedTestPropertySources mergedTestPropertySources = TestPropertySourceUtils.buildMergedTestPropertySources(testClass)___		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass, locations, classes,_			initializerClasses, activeProfiles, mergedTestPropertySources.getLocations(),_			mergedTestPropertySources.getProperties(), contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,list,new,array,list,string,list,class,classes,list,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,list,add,all,0,arrays,as,list,config,attributes,get,locations,classes,list,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,list,add,all,0,arrays,as,list,processed,locations,if,config,attributes,is,inherit,locations,break,string,locations,string,utils,to,string,array,locations,list,class,classes,class,utils,to,class,array,classes,list,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,string,active,profiles,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,locations,classes,initializer,classes,active,profiles,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1432856630;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locationsList = new ArrayList<String>()__		List<Class<?>> classesList = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locationsList.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classesList.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(configAttributes.getDeclaringClass(),_					configAttributes.getLocations())__				locationsList.addAll(0, Arrays.asList(processedLocations))__				_			}_			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		String[] locations = StringUtils.toStringArray(locationsList)__		Class<?>[] classes = ClassUtils.toClassArray(classesList)__		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList)__		String[] activeProfiles = ActiveProfilesUtils.resolveActiveProfiles(testClass)__		MergedTestPropertySources mergedTestPropertySources = TestPropertySourceUtils.buildMergedTestPropertySources(testClass)___		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass, locations, classes,_			initializerClasses, activeProfiles, mergedTestPropertySources.getLocations(),_			mergedTestPropertySources.getProperties(), contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,list,new,array,list,string,list,class,classes,list,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,list,add,all,0,arrays,as,list,config,attributes,get,locations,classes,list,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,list,add,all,0,arrays,as,list,processed,locations,if,config,attributes,is,inherit,locations,break,string,locations,string,utils,to,string,array,locations,list,class,classes,class,utils,to,class,array,classes,list,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,string,active,profiles,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,locations,classes,initializer,classes,active,profiles,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1434234880;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		List<String> locationsList = new ArrayList<String>()__		List<Class<?>> classesList = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}_			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locationsList.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classesList.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(configAttributes.getDeclaringClass(),_					configAttributes.getLocations())__				locationsList.addAll(0, Arrays.asList(processedLocations))__				_			}_			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		String[] locations = StringUtils.toStringArray(locationsList)__		Class<?>[] classes = ClassUtils.toClassArray(classesList)__		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList)__		String[] activeProfiles = ActiveProfilesUtils.resolveActiveProfiles(testClass)__		MergedTestPropertySources mergedTestPropertySources = TestPropertySourceUtils.buildMergedTestPropertySources(testClass)___		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(testClass, locations, classes,_			initializerClasses, activeProfiles, mergedTestPropertySources.getLocations(),_			mergedTestPropertySources.getProperties(), contextLoader, cacheAwareContextLoaderDelegate, parentConfig)___		return processMergedContextConfiguration(mergedConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,class,test,class,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,list,string,locations,list,new,array,list,string,list,class,classes,list,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,list,add,all,0,arrays,as,list,config,attributes,get,locations,classes,list,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,list,add,all,0,arrays,as,list,processed,locations,if,config,attributes,is,inherit,locations,break,string,locations,string,utils,to,string,array,locations,list,class,classes,class,utils,to,class,array,classes,list,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,string,active,profiles,active,profiles,utils,resolve,active,profiles,test,class,merged,test,property,sources,merged,test,property,sources,test,property,source,utils,build,merged,test,property,sources,test,class,merged,context,configuration,merged,config,new,merged,context,configuration,test,class,locations,classes,initializer,classes,active,profiles,merged,test,property,sources,get,locations,merged,test,property,sources,get,properties,context,loader,cache,aware,context,loader,delegate,parent,config,return,process,merged,context,configuration,merged,config
AbstractTestContextBootstrapper -> private Set<ContextCustomizer> getContextCustomizers(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributes);1457727806;@since 4.3;private Set<ContextCustomizer> getContextCustomizers(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributes) {__		List<ContextCustomizerFactory> factories = getContextCustomizerFactories()__		Set<ContextCustomizer> customizers = new LinkedHashSet<ContextCustomizer>(factories.size())__		for (ContextCustomizerFactory factory : factories) {_			ContextCustomizer customizer = factory.createContextCustomizer(testClass, configAttributes)__			if (customizer != null) {_				customizers.add(customizer)__			}_		}_		return customizers__	};since,4,3;private,set,context,customizer,get,context,customizers,class,test,class,list,context,configuration,attributes,config,attributes,list,context,customizer,factory,factories,get,context,customizer,factories,set,context,customizer,customizers,new,linked,hash,set,context,customizer,factories,size,for,context,customizer,factory,factory,factories,context,customizer,customizer,factory,create,context,customizer,test,class,config,attributes,if,customizer,null,customizers,add,customizer,return,customizers
AbstractTestContextBootstrapper -> private Set<ContextCustomizer> getContextCustomizers(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributes);1458754760;@since 4.3;private Set<ContextCustomizer> getContextCustomizers(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributes) {__		List<ContextCustomizerFactory> factories = getContextCustomizerFactories()__		Set<ContextCustomizer> customizers = new LinkedHashSet<ContextCustomizer>(factories.size())__		for (ContextCustomizerFactory factory : factories) {_			ContextCustomizer customizer = factory.createContextCustomizer(testClass, configAttributes)__			if (customizer != null) {_				customizers.add(customizer)__			}_		}_		return customizers__	};since,4,3;private,set,context,customizer,get,context,customizers,class,test,class,list,context,configuration,attributes,config,attributes,list,context,customizer,factory,factories,get,context,customizer,factories,set,context,customizer,customizers,new,linked,hash,set,context,customizer,factories,size,for,context,customizer,factory,factory,factories,context,customizer,customizer,factory,create,context,customizer,test,class,config,attributes,if,customizer,null,customizers,add,customizer,return,customizers
AbstractTestContextBootstrapper -> private Set<ContextCustomizer> getContextCustomizers(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributes);1459174667;@since 4.3;private Set<ContextCustomizer> getContextCustomizers(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributes) {__		List<ContextCustomizerFactory> factories = getContextCustomizerFactories()__		Set<ContextCustomizer> customizers = new LinkedHashSet<ContextCustomizer>(factories.size())__		for (ContextCustomizerFactory factory : factories) {_			ContextCustomizer customizer = factory.createContextCustomizer(testClass, configAttributes)__			if (customizer != null) {_				customizers.add(customizer)__			}_		}_		return customizers__	};since,4,3;private,set,context,customizer,get,context,customizers,class,test,class,list,context,configuration,attributes,config,attributes,list,context,customizer,factory,factories,get,context,customizer,factories,set,context,customizer,customizers,new,linked,hash,set,context,customizer,factories,size,for,context,customizer,factory,factory,factories,context,customizer,customizer,factory,create,context,customizer,test,class,config,attributes,if,customizer,null,customizers,add,customizer,return,customizers
AbstractTestContextBootstrapper -> private Set<ContextCustomizer> getContextCustomizers(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributes);1459842161;@since 4.3;private Set<ContextCustomizer> getContextCustomizers(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributes) {__		List<ContextCustomizerFactory> factories = getContextCustomizerFactories()__		Set<ContextCustomizer> customizers = new LinkedHashSet<ContextCustomizer>(factories.size())__		for (ContextCustomizerFactory factory : factories) {_			ContextCustomizer customizer = factory.createContextCustomizer(testClass, configAttributes)__			if (customizer != null) {_				customizers.add(customizer)__			}_		}_		return customizers__	};since,4,3;private,set,context,customizer,get,context,customizers,class,test,class,list,context,configuration,attributes,config,attributes,list,context,customizer,factory,factories,get,context,customizer,factories,set,context,customizer,customizers,new,linked,hash,set,context,customizer,factories,size,for,context,customizer,factory,factory,factories,context,customizer,customizer,factory,create,context,customizer,test,class,config,attributes,if,customizer,null,customizers,add,customizer,return,customizers
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1397082962;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1398638841;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1400509883;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1400523530;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1407967503;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1408048216;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1408062102;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1408063803;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1413848647;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1429051063;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1429465455;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1429559310;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1432125256;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1432246071;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1432856630;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1434234880;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1457462209;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1457727806;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1458754760;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1459174667;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1459842161;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1465306936;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1467730834;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1468334463;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1468426720;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1495868221;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> @Override 	public void setBootstrapContext(BootstrapContext bootstrapContext);1496955179;{@inheritDoc};@Override_	public void setBootstrapContext(BootstrapContext bootstrapContext) {_		this.bootstrapContext = bootstrapContext__	};inherit,doc;override,public,void,set,bootstrap,context,bootstrap,context,bootstrap,context,this,bootstrap,context,bootstrap,context
AbstractTestContextBootstrapper -> private ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1397082962;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}.__<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}.__@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null});private ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {_		Assert.notNull(testClass, "Class must not be null")__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__		}__		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}__		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null;private,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> private ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1398638841;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null});private ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null;private,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> private ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1400509883;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null});private ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null;private,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> private ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1400523530;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null});private ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_					contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null;private,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> private ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1407967503;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null});private ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null;private,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> private ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1408048216;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null});private ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null;private,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> private ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1408062102;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null});private ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null;private,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> private ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1408063803;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null});private ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null;private,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> private ContextLoader resolveContextLoader(Class<?> testClass, 			List<ContextConfigurationAttributes> configAttributesList);1413848647;Resolve the {@link ContextLoader} {@linkplain Class class} to use for the_supplied list of {@link ContextConfigurationAttributes} and then instantiate_and return that {@code ContextLoader}._<p>If the user has not explicitly declared which loader to use, the value_returned from {@link #getDefaultContextLoaderClass} will be used as the_default context loader class. For details on the class resolution process,_see {@link #resolveExplicitContextLoaderClass} and_{@link #getDefaultContextLoaderClass}._@param testClass the test class for which the {@code ContextLoader} should be_resolved_ must not be {@code null}_@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the resolved {@code ContextLoader} for the supplied {@code testClass}_(never {@code null});private ContextLoader resolveContextLoader(Class<?> testClass,_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notNull(testClass, "Class must not be null")__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		Class<? extends ContextLoader> contextLoaderClass = resolveExplicitContextLoaderClass(configAttributesList)__		if (contextLoaderClass == null) {_			contextLoaderClass = getDefaultContextLoaderClass(testClass)__		}_		if (logger.isTraceEnabled()) {_			logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]",_				contextLoaderClass.getName(), testClass.getName()))__		}_		return BeanUtils.instantiateClass(contextLoaderClass, ContextLoader.class)__	};resolve,the,link,context,loader,linkplain,class,class,to,use,for,the,supplied,list,of,link,context,configuration,attributes,and,then,instantiate,and,return,that,code,context,loader,p,if,the,user,has,not,explicitly,declared,which,loader,to,use,the,value,returned,from,link,get,default,context,loader,class,will,be,used,as,the,default,context,loader,class,for,details,on,the,class,resolution,process,see,link,resolve,explicit,context,loader,class,and,link,get,default,context,loader,class,param,test,class,the,test,class,for,which,the,code,context,loader,should,be,resolved,must,not,be,code,null,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,resolved,code,context,loader,for,the,supplied,code,test,class,never,code,null;private,context,loader,resolve,context,loader,class,test,class,list,context,configuration,attributes,config,attributes,list,assert,not,null,test,class,class,must,not,be,null,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,class,extends,context,loader,context,loader,class,resolve,explicit,context,loader,class,config,attributes,list,if,context,loader,class,null,context,loader,class,get,default,context,loader,class,test,class,if,logger,is,trace,enabled,logger,trace,string,format,using,context,loader,class,s,for,test,class,s,context,loader,class,get,name,test,class,get,name,return,bean,utils,instantiate,class,context,loader,class,context,loader,class
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(final Class<?> testClass, 			final List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1397082962;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration.__@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(final Class<?> testClass,_			final List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		final ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		final List<String> locationsList = new ArrayList<String>()__		final List<Class<?>> classesList = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}__			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locationsList.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classesList.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(configAttributes.getDeclaringClass(),_					configAttributes.getLocations())__				locationsList.addAll(0, Arrays.asList(processedLocations))__				_			}__			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		String[] locations = StringUtils.toStringArray(locationsList)__		Class<?>[] classes = ClassUtils.toClassArray(classesList)__		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList)__		String[] activeProfiles = ActiveProfilesUtils.resolveActiveProfiles(testClass)___		return buildMergedContextConfiguration(testClass, locations, classes, initializerClasses, activeProfiles,_			contextLoader, cacheAwareContextLoaderDelegate, parentConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,final,class,test,class,final,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,final,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,final,list,string,locations,list,new,array,list,string,final,list,class,classes,list,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,list,add,all,0,arrays,as,list,config,attributes,get,locations,classes,list,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,list,add,all,0,arrays,as,list,processed,locations,if,config,attributes,is,inherit,locations,break,string,locations,string,utils,to,string,array,locations,list,class,classes,class,utils,to,class,array,classes,list,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,string,active,profiles,active,profiles,utils,resolve,active,profiles,test,class,return,build,merged,context,configuration,test,class,locations,classes,initializer,classes,active,profiles,context,loader,cache,aware,context,loader,delegate,parent,config
AbstractTestContextBootstrapper -> private MergedContextConfiguration buildMergedContextConfiguration(final Class<?> testClass, 			final List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig, 			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate);1398638841;Build the {@link MergedContextConfiguration merged context configuration}_for the supplied {@link Class testClass}, context configuration attributes,_and parent context configuration._@param testClass the test class for which the {@code MergedContextConfiguration}_should be built (must not be {@code null})_@param configAttributesList the list of context configuration attributes for the_specified test class, ordered <em>bottom-up</em> (i.e., as if we were_traversing up the class hierarchy)_ never {@code null} or empty_@param parentConfig the merged context configuration for the parent application_context in a context hierarchy, or {@code null} if there is no parent_@param cacheAwareContextLoaderDelegate the cache-aware context loader delegate to_be passed to the {@code MergedContextConfiguration} constructor_@return the merged context configuration_@see #resolveContextLoader_@see ContextLoaderUtils#resolveContextConfigurationAttributes_@see SmartContextLoader#processContextConfiguration_@see ContextLoader#processLocations_@see ActiveProfilesUtils#resolveActiveProfiles_@see ApplicationContextInitializerUtils#resolveInitializerClasses_@see MergedContextConfiguration;private MergedContextConfiguration buildMergedContextConfiguration(final Class<?> testClass,_			final List<ContextConfigurationAttributes> configAttributesList, MergedContextConfiguration parentConfig,_			CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate) {__		final ContextLoader contextLoader = resolveContextLoader(testClass, configAttributesList)__		final List<String> locationsList = new ArrayList<String>()__		final List<Class<?>> classesList = new ArrayList<Class<?>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing locations and classes for context configuration attributes %s",_					configAttributes))__			}__			if (contextLoader instanceof SmartContextLoader) {_				SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader__				smartContextLoader.processContextConfiguration(configAttributes)__				locationsList.addAll(0, Arrays.asList(configAttributes.getLocations()))__				classesList.addAll(0, Arrays.asList(configAttributes.getClasses()))__			}_			else {_				String[] processedLocations = contextLoader.processLocations(configAttributes.getDeclaringClass(),_					configAttributes.getLocations())__				locationsList.addAll(0, Arrays.asList(processedLocations))__				_			}__			if (!configAttributes.isInheritLocations()) {_				break__			}_		}__		String[] locations = StringUtils.toStringArray(locationsList)__		Class<?>[] classes = ClassUtils.toClassArray(classesList)__		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		ApplicationContextInitializerUtils.resolveInitializerClasses(configAttributesList)__		String[] activeProfiles = ActiveProfilesUtils.resolveActiveProfiles(testClass)___		return buildMergedContextConfiguration(testClass, locations, classes, initializerClasses, activeProfiles,_			contextLoader, cacheAwareContextLoaderDelegate, parentConfig)__	};build,the,link,merged,context,configuration,merged,context,configuration,for,the,supplied,link,class,test,class,context,configuration,attributes,and,parent,context,configuration,param,test,class,the,test,class,for,which,the,code,merged,context,configuration,should,be,built,must,not,be,code,null,param,config,attributes,list,the,list,of,context,configuration,attributes,for,the,specified,test,class,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,never,code,null,or,empty,param,parent,config,the,merged,context,configuration,for,the,parent,application,context,in,a,context,hierarchy,or,code,null,if,there,is,no,parent,param,cache,aware,context,loader,delegate,the,cache,aware,context,loader,delegate,to,be,passed,to,the,code,merged,context,configuration,constructor,return,the,merged,context,configuration,see,resolve,context,loader,see,context,loader,utils,resolve,context,configuration,attributes,see,smart,context,loader,process,context,configuration,see,context,loader,process,locations,see,active,profiles,utils,resolve,active,profiles,see,application,context,initializer,utils,resolve,initializer,classes,see,merged,context,configuration;private,merged,context,configuration,build,merged,context,configuration,final,class,test,class,final,list,context,configuration,attributes,config,attributes,list,merged,context,configuration,parent,config,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,final,context,loader,context,loader,resolve,context,loader,test,class,config,attributes,list,final,list,string,locations,list,new,array,list,string,final,list,class,classes,list,new,array,list,class,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,locations,and,classes,for,context,configuration,attributes,s,config,attributes,if,context,loader,instanceof,smart,context,loader,smart,context,loader,smart,context,loader,smart,context,loader,context,loader,smart,context,loader,process,context,configuration,config,attributes,locations,list,add,all,0,arrays,as,list,config,attributes,get,locations,classes,list,add,all,0,arrays,as,list,config,attributes,get,classes,else,string,processed,locations,context,loader,process,locations,config,attributes,get,declaring,class,config,attributes,get,locations,locations,list,add,all,0,arrays,as,list,processed,locations,if,config,attributes,is,inherit,locations,break,string,locations,string,utils,to,string,array,locations,list,class,classes,class,utils,to,class,array,classes,list,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,application,context,initializer,utils,resolve,initializer,classes,config,attributes,list,string,active,profiles,active,profiles,utils,resolve,active,profiles,test,class,return,build,merged,context,configuration,test,class,locations,classes,initializer,classes,active,profiles,context,loader,cache,aware,context,loader,delegate,parent,config
AbstractTestContextBootstrapper -> @Override 	public final List<TestExecutionListener> getTestExecutionListeners();1432856630;{@inheritDoc};@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_					clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				TestExecutionListeners testExecutionListeners = descriptor.getMergedAnnotation()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format("Retrieved @TestExecutionListeners [%s] for declaring class [%s].",_						testExecutionListeners, declaringClass.getName()))__				}__				boolean inheritListeners = testExecutionListeners.inheritListeners()__				AnnotationDescriptor<TestExecutionListeners> superDescriptor = MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null)_						&& (testExecutionListeners.mergeMode() == MergeMode.MERGE_WITH_DEFAULTS)) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format(_							"Merging default listeners with listeners configured via @TestExecutionListeners for class [%s].",_							descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.asList(testExecutionListeners.listeners()))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<Class<? extends TestExecutionListener>>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,test,execution,listeners,test,execution,listeners,descriptor,get,merged,annotation,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,s,for,declaring,class,s,test,execution,listeners,declaring,class,get,name,boolean,inherit,listeners,test,execution,listeners,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,test,execution,listeners,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,as,list,test,execution,listeners,listeners,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,class,extends,test,execution,listener,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @Override 	public final List<TestExecutionListener> getTestExecutionListeners();1434234880;{@inheritDoc};@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_					clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				TestExecutionListeners testExecutionListeners = descriptor.synthesizeAnnotation()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format("Retrieved @TestExecutionListeners [%s] for declaring class [%s].",_						testExecutionListeners, declaringClass.getName()))__				}__				boolean inheritListeners = testExecutionListeners.inheritListeners()__				AnnotationDescriptor<TestExecutionListeners> superDescriptor = MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null)_						&& (testExecutionListeners.mergeMode() == MergeMode.MERGE_WITH_DEFAULTS)) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format(_							"Merging default listeners with listeners configured via @TestExecutionListeners for class [%s].",_							descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.asList(testExecutionListeners.listeners()))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<Class<? extends TestExecutionListener>>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,test,execution,listeners,test,execution,listeners,descriptor,synthesize,annotation,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,s,for,declaring,class,s,test,execution,listeners,declaring,class,get,name,boolean,inherit,listeners,test,execution,listeners,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,test,execution,listeners,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,as,list,test,execution,listeners,listeners,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,class,extends,test,execution,listener,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @Override 	public final List<TestExecutionListener> getTestExecutionListeners();1457462209;{@inheritDoc};@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_					clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				TestExecutionListeners testExecutionListeners = descriptor.synthesizeAnnotation()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format("Retrieved @TestExecutionListeners [%s] for declaring class [%s].",_						testExecutionListeners, declaringClass.getName()))__				}__				boolean inheritListeners = testExecutionListeners.inheritListeners()__				AnnotationDescriptor<TestExecutionListeners> superDescriptor = MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null)_						&& (testExecutionListeners.mergeMode() == MergeMode.MERGE_WITH_DEFAULTS)) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format(_							"Merging default listeners with listeners configured via @TestExecutionListeners for class [%s].",_							descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.asList(testExecutionListeners.listeners()))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<Class<? extends TestExecutionListener>>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,test,execution,listeners,test,execution,listeners,descriptor,synthesize,annotation,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,s,for,declaring,class,s,test,execution,listeners,declaring,class,get,name,boolean,inherit,listeners,test,execution,listeners,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,test,execution,listeners,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,as,list,test,execution,listeners,listeners,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,class,extends,test,execution,listener,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @Override 	public final List<TestExecutionListener> getTestExecutionListeners();1457727806;{@inheritDoc};@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_					clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				TestExecutionListeners testExecutionListeners = descriptor.synthesizeAnnotation()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format("Retrieved @TestExecutionListeners [%s] for declaring class [%s].",_						testExecutionListeners, declaringClass.getName()))__				}__				boolean inheritListeners = testExecutionListeners.inheritListeners()__				AnnotationDescriptor<TestExecutionListeners> superDescriptor = MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null)_						&& (testExecutionListeners.mergeMode() == MergeMode.MERGE_WITH_DEFAULTS)) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format(_							"Merging default listeners with listeners configured via @TestExecutionListeners for class [%s].",_							descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.asList(testExecutionListeners.listeners()))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<Class<? extends TestExecutionListener>>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,test,execution,listeners,test,execution,listeners,descriptor,synthesize,annotation,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,s,for,declaring,class,s,test,execution,listeners,declaring,class,get,name,boolean,inherit,listeners,test,execution,listeners,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,test,execution,listeners,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,as,list,test,execution,listeners,listeners,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,class,extends,test,execution,listener,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @Override 	public final List<TestExecutionListener> getTestExecutionListeners();1458754760;{@inheritDoc};@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_					clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				TestExecutionListeners testExecutionListeners = descriptor.synthesizeAnnotation()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format("Retrieved @TestExecutionListeners [%s] for declaring class [%s].",_						testExecutionListeners, declaringClass.getName()))__				}__				boolean inheritListeners = testExecutionListeners.inheritListeners()__				AnnotationDescriptor<TestExecutionListeners> superDescriptor = MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null)_						&& (testExecutionListeners.mergeMode() == MergeMode.MERGE_WITH_DEFAULTS)) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format(_							"Merging default listeners with listeners configured via @TestExecutionListeners for class [%s].",_							descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.asList(testExecutionListeners.listeners()))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<Class<? extends TestExecutionListener>>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,test,execution,listeners,test,execution,listeners,descriptor,synthesize,annotation,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,s,for,declaring,class,s,test,execution,listeners,declaring,class,get,name,boolean,inherit,listeners,test,execution,listeners,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,test,execution,listeners,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,as,list,test,execution,listeners,listeners,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,class,extends,test,execution,listener,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @Override 	public final List<TestExecutionListener> getTestExecutionListeners();1459174667;{@inheritDoc};@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor = MetaAnnotationUtils.findAnnotationDescriptor(clazz,_			annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_					clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				TestExecutionListeners testExecutionListeners = descriptor.synthesizeAnnotation()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format("Retrieved @TestExecutionListeners [%s] for declaring class [%s].",_						testExecutionListeners, declaringClass.getName()))__				}__				boolean inheritListeners = testExecutionListeners.inheritListeners()__				AnnotationDescriptor<TestExecutionListeners> superDescriptor = MetaAnnotationUtils.findAnnotationDescriptor(_					descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null)_						&& (testExecutionListeners.mergeMode() == MergeMode.MERGE_WITH_DEFAULTS)) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format(_							"Merging default listeners with listeners configured via @TestExecutionListeners for class [%s].",_							descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.asList(testExecutionListeners.listeners()))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<Class<? extends TestExecutionListener>>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,test,execution,listeners,test,execution,listeners,descriptor,synthesize,annotation,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,s,for,declaring,class,s,test,execution,listeners,declaring,class,get,name,boolean,inherit,listeners,test,execution,listeners,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,test,execution,listeners,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,as,list,test,execution,listeners,listeners,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,class,extends,test,execution,listener,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @Override 	public final List<TestExecutionListener> getTestExecutionListeners();1459842161;{@inheritDoc};@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor =_				MetaAnnotationUtils.findAnnotationDescriptor(clazz, annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_						clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				TestExecutionListeners testExecutionListeners = descriptor.synthesizeAnnotation()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format("Retrieved @TestExecutionListeners [%s] for declaring class [%s].",_							testExecutionListeners, declaringClass.getName()))__				}__				boolean inheritListeners = testExecutionListeners.inheritListeners()__				AnnotationDescriptor<TestExecutionListeners> superDescriptor =_						MetaAnnotationUtils.findAnnotationDescriptor(_								descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null) &&_						testExecutionListeners.mergeMode() == MergeMode.MERGE_WITH_DEFAULTS) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Merging default listeners with listeners configured via " +_								"@TestExecutionListeners for class [%s].", descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.asList(testExecutionListeners.listeners()))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<Class<? extends TestExecutionListener>>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,test,execution,listeners,test,execution,listeners,descriptor,synthesize,annotation,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,s,for,declaring,class,s,test,execution,listeners,declaring,class,get,name,boolean,inherit,listeners,test,execution,listeners,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,test,execution,listeners,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,as,list,test,execution,listeners,listeners,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,class,extends,test,execution,listener,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @Override 	public final List<TestExecutionListener> getTestExecutionListeners();1465306936;{@inheritDoc};@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<Class<? extends TestExecutionListener>>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor =_				MetaAnnotationUtils.findAnnotationDescriptor(clazz, annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_						clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				TestExecutionListeners testExecutionListeners = descriptor.synthesizeAnnotation()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format("Retrieved @TestExecutionListeners [%s] for declaring class [%s].",_							testExecutionListeners, declaringClass.getName()))__				}__				boolean inheritListeners = testExecutionListeners.inheritListeners()__				AnnotationDescriptor<TestExecutionListeners> superDescriptor =_						MetaAnnotationUtils.findAnnotationDescriptor(_								descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null) &&_						testExecutionListeners.mergeMode() == MergeMode.MERGE_WITH_DEFAULTS) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Merging default listeners with listeners configured via " +_								"@TestExecutionListeners for class [%s].", descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.asList(testExecutionListeners.listeners()))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<Class<? extends TestExecutionListener>>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,class,extends,test,execution,listener,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,test,execution,listeners,test,execution,listeners,descriptor,synthesize,annotation,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,s,for,declaring,class,s,test,execution,listeners,declaring,class,get,name,boolean,inherit,listeners,test,execution,listeners,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,test,execution,listeners,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,as,list,test,execution,listeners,listeners,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,class,extends,test,execution,listener,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @Override 	public final List<TestExecutionListener> getTestExecutionListeners();1467730834;{@inheritDoc};@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor =_				MetaAnnotationUtils.findAnnotationDescriptor(clazz, annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_						clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				TestExecutionListeners testExecutionListeners = descriptor.synthesizeAnnotation()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format("Retrieved @TestExecutionListeners [%s] for declaring class [%s].",_							testExecutionListeners, declaringClass.getName()))__				}__				boolean inheritListeners = testExecutionListeners.inheritListeners()__				AnnotationDescriptor<TestExecutionListeners> superDescriptor =_						MetaAnnotationUtils.findAnnotationDescriptor(_								descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null) &&_						testExecutionListeners.mergeMode() == MergeMode.MERGE_WITH_DEFAULTS) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Merging default listeners with listeners configured via " +_								"@TestExecutionListeners for class [%s].", descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.asList(testExecutionListeners.listeners()))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,test,execution,listeners,test,execution,listeners,descriptor,synthesize,annotation,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,s,for,declaring,class,s,test,execution,listeners,declaring,class,get,name,boolean,inherit,listeners,test,execution,listeners,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,test,execution,listeners,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,as,list,test,execution,listeners,listeners,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @Override 	public final List<TestExecutionListener> getTestExecutionListeners();1468334463;{@inheritDoc};@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor =_				MetaAnnotationUtils.findAnnotationDescriptor(clazz, annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_						clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				TestExecutionListeners testExecutionListeners = descriptor.synthesizeAnnotation()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format("Retrieved @TestExecutionListeners [%s] for declaring class [%s].",_							testExecutionListeners, declaringClass.getName()))__				}__				boolean inheritListeners = testExecutionListeners.inheritListeners()__				AnnotationDescriptor<TestExecutionListeners> superDescriptor =_						MetaAnnotationUtils.findAnnotationDescriptor(_								descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null) &&_						testExecutionListeners.mergeMode() == MergeMode.MERGE_WITH_DEFAULTS) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Merging default listeners with listeners configured via " +_								"@TestExecutionListeners for class [%s].", descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.asList(testExecutionListeners.listeners()))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,test,execution,listeners,test,execution,listeners,descriptor,synthesize,annotation,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,s,for,declaring,class,s,test,execution,listeners,declaring,class,get,name,boolean,inherit,listeners,test,execution,listeners,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,test,execution,listeners,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,as,list,test,execution,listeners,listeners,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @Override 	public final List<TestExecutionListener> getTestExecutionListeners();1468426720;{@inheritDoc};@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor =_				MetaAnnotationUtils.findAnnotationDescriptor(clazz, annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_						clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				TestExecutionListeners testExecutionListeners = descriptor.synthesizeAnnotation()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format("Retrieved @TestExecutionListeners [%s] for declaring class [%s].",_							testExecutionListeners, declaringClass.getName()))__				}__				boolean inheritListeners = testExecutionListeners.inheritListeners()__				AnnotationDescriptor<TestExecutionListeners> superDescriptor =_						MetaAnnotationUtils.findAnnotationDescriptor(_								descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null) &&_						testExecutionListeners.mergeMode() == MergeMode.MERGE_WITH_DEFAULTS) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Merging default listeners with listeners configured via " +_								"@TestExecutionListeners for class [%s].", descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.asList(testExecutionListeners.listeners()))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,test,execution,listeners,test,execution,listeners,descriptor,synthesize,annotation,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,s,for,declaring,class,s,test,execution,listeners,declaring,class,get,name,boolean,inherit,listeners,test,execution,listeners,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,test,execution,listeners,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,as,list,test,execution,listeners,listeners,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @Override 	public final List<TestExecutionListener> getTestExecutionListeners();1495868221;{@inheritDoc};@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor =_				MetaAnnotationUtils.findAnnotationDescriptor(clazz, annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_						clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				TestExecutionListeners testExecutionListeners = descriptor.synthesizeAnnotation()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format("Retrieved @TestExecutionListeners [%s] for declaring class [%s].",_							testExecutionListeners, declaringClass.getName()))__				}__				boolean inheritListeners = testExecutionListeners.inheritListeners()__				AnnotationDescriptor<TestExecutionListeners> superDescriptor =_						MetaAnnotationUtils.findAnnotationDescriptor(_								descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null) &&_						testExecutionListeners.mergeMode() == MergeMode.MERGE_WITH_DEFAULTS) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Merging default listeners with listeners configured via " +_								"@TestExecutionListeners for class [%s].", descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.asList(testExecutionListeners.listeners()))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,test,execution,listeners,test,execution,listeners,descriptor,synthesize,annotation,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,s,for,declaring,class,s,test,execution,listeners,declaring,class,get,name,boolean,inherit,listeners,test,execution,listeners,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,test,execution,listeners,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,as,list,test,execution,listeners,listeners,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @Override 	public final List<TestExecutionListener> getTestExecutionListeners();1496955179;{@inheritDoc};@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor =_				MetaAnnotationUtils.findAnnotationDescriptor(clazz, annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_						clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				TestExecutionListeners testExecutionListeners = descriptor.synthesizeAnnotation()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format("Retrieved @TestExecutionListeners [%s] for declaring class [%s].",_							testExecutionListeners, declaringClass.getName()))__				}__				boolean inheritListeners = testExecutionListeners.inheritListeners()__				AnnotationDescriptor<TestExecutionListeners> superDescriptor =_						MetaAnnotationUtils.findAnnotationDescriptor(_								descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null) &&_						testExecutionListeners.mergeMode() == MergeMode.MERGE_WITH_DEFAULTS) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Merging default listeners with listeners configured via " +_								"@TestExecutionListeners for class [%s].", descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.asList(testExecutionListeners.listeners()))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,test,execution,listeners,test,execution,listeners,descriptor,synthesize,annotation,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,s,for,declaring,class,s,test,execution,listeners,declaring,class,get,name,boolean,inherit,listeners,test,execution,listeners,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,test,execution,listeners,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,as,list,test,execution,listeners,listeners,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @Override 	public final List<TestExecutionListener> getTestExecutionListeners();1500495740;{@inheritDoc};@Override_	public final List<TestExecutionListener> getTestExecutionListeners() {_		Class<?> clazz = getBootstrapContext().getTestClass()__		Class<TestExecutionListeners> annotationType = TestExecutionListeners.class__		List<Class<? extends TestExecutionListener>> classesList = new ArrayList<>()__		boolean usingDefaults = false___		AnnotationDescriptor<TestExecutionListeners> descriptor =_				MetaAnnotationUtils.findAnnotationDescriptor(clazz, annotationType)___		_		if (descriptor == null) {_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.",_						clazz.getName()))__			}_			usingDefaults = true__			classesList.addAll(getDefaultTestExecutionListenerClasses())__		}_		else {_			_			while (descriptor != null) {_				Class<?> declaringClass = descriptor.getDeclaringClass()__				TestExecutionListeners testExecutionListeners = descriptor.synthesizeAnnotation()__				if (logger.isTraceEnabled()) {_					logger.trace(String.format("Retrieved @TestExecutionListeners [%s] for declaring class [%s].",_							testExecutionListeners, declaringClass.getName()))__				}__				boolean inheritListeners = testExecutionListeners.inheritListeners()__				AnnotationDescriptor<TestExecutionListeners> superDescriptor =_						MetaAnnotationUtils.findAnnotationDescriptor(_								descriptor.getRootDeclaringClass().getSuperclass(), annotationType)___				_				_				if ((!inheritListeners || superDescriptor == null) &&_						testExecutionListeners.mergeMode() == MergeMode.MERGE_WITH_DEFAULTS) {_					if (logger.isDebugEnabled()) {_						logger.debug(String.format("Merging default listeners with listeners configured via " +_								"@TestExecutionListeners for class [%s].", descriptor.getRootDeclaringClass().getName()))__					}_					usingDefaults = true__					classesList.addAll(getDefaultTestExecutionListenerClasses())__				}__				classesList.addAll(0, Arrays.asList(testExecutionListeners.listeners()))___				descriptor = (inheritListeners ? superDescriptor : null)__			}_		}__		_		if (usingDefaults) {_			Set<Class<? extends TestExecutionListener>> classesSet = new HashSet<>()__			classesSet.addAll(classesList)__			classesList.clear()__			classesList.addAll(classesSet)__		}__		List<TestExecutionListener> listeners = instantiateListeners(classesList)___		_		if (usingDefaults) {_			AnnotationAwareOrderComparator.sort(listeners)__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("Using TestExecutionListeners: %s", listeners))__		}_		return listeners__	};inherit,doc;override,public,final,list,test,execution,listener,get,test,execution,listeners,class,clazz,get,bootstrap,context,get,test,class,class,test,execution,listeners,annotation,type,test,execution,listeners,class,list,class,extends,test,execution,listener,classes,list,new,array,list,boolean,using,defaults,false,annotation,descriptor,test,execution,listeners,descriptor,meta,annotation,utils,find,annotation,descriptor,clazz,annotation,type,if,descriptor,null,if,logger,is,debug,enabled,logger,debug,string,format,test,execution,listeners,is,not,present,for,class,s,using,defaults,clazz,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,else,while,descriptor,null,class,declaring,class,descriptor,get,declaring,class,test,execution,listeners,test,execution,listeners,descriptor,synthesize,annotation,if,logger,is,trace,enabled,logger,trace,string,format,retrieved,test,execution,listeners,s,for,declaring,class,s,test,execution,listeners,declaring,class,get,name,boolean,inherit,listeners,test,execution,listeners,inherit,listeners,annotation,descriptor,test,execution,listeners,super,descriptor,meta,annotation,utils,find,annotation,descriptor,descriptor,get,root,declaring,class,get,superclass,annotation,type,if,inherit,listeners,super,descriptor,null,test,execution,listeners,merge,mode,merge,mode,if,logger,is,debug,enabled,logger,debug,string,format,merging,default,listeners,with,listeners,configured,via,test,execution,listeners,for,class,s,descriptor,get,root,declaring,class,get,name,using,defaults,true,classes,list,add,all,get,default,test,execution,listener,classes,classes,list,add,all,0,arrays,as,list,test,execution,listeners,listeners,descriptor,inherit,listeners,super,descriptor,null,if,using,defaults,set,class,extends,test,execution,listener,classes,set,new,hash,set,classes,set,add,all,classes,list,classes,list,clear,classes,list,add,all,classes,set,list,test,execution,listener,listeners,instantiate,listeners,classes,list,if,using,defaults,annotation,aware,order,comparator,sort,listeners,if,logger,is,info,enabled,logger,info,string,format,using,test,execution,listeners,s,listeners,return,listeners
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1397082962;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) getClass().getClassLoader().loadClass(_					className))__			}_			catch (Throwable t) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", t)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,get,class,get,class,loader,load,class,class,name,catch,throwable,t,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,t,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1398638841;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className +_							"]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1400509883;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className +_							"]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1400523530;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className +_							"]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1407967503;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1408048216;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1408062102;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1408063803;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1413848647;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1429051063;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1429465455;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1429559310;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1432125256;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1432246071;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1432856630;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1434234880;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1457462209;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1457727806;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1458754760;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1459174667;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className_							+ "]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1459842161;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className +_							"]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1465306936;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<Class<? extends TestExecutionListener>>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className +_							"]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,extends,test,execution,listener,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1467730834;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className +_							"]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1468334463;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className +_							"]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1468426720;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className +_							"]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1495868221;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className +_							"]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1496955179;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className +_							"]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1500495740;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className +_							"]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1515772066;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className +_							"]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1516210145;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className +_							"]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
AbstractTestContextBootstrapper -> @SuppressWarnings("unchecked") 	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses();1519295386;Get the default {@link TestExecutionListener} classes for this bootstrapper._<p>This method is invoked by {@link #getTestExecutionListeners()} and_delegates to {@link #getDefaultTestExecutionListenerClassNames()} to_retrieve the class names._<p>If a particular class cannot be loaded, a {@code DEBUG} message will_be logged, but the associated exception will not be rethrown.;@SuppressWarnings("unchecked")_	protected Set<Class<? extends TestExecutionListener>> getDefaultTestExecutionListenerClasses() {_		Set<Class<? extends TestExecutionListener>> defaultListenerClasses = new LinkedHashSet<>()__		ClassLoader cl = getClass().getClassLoader()__		for (String className : getDefaultTestExecutionListenerClassNames()) {_			try {_				defaultListenerClasses.add((Class<? extends TestExecutionListener>) ClassUtils.forName(className, cl))__			}_			catch (Throwable ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Could not load default TestExecutionListener class [" + className +_							"]. Specify custom listener classes or make the default listener classes available.", ex)__				}_			}_		}_		return defaultListenerClasses__	};get,the,default,link,test,execution,listener,classes,for,this,bootstrapper,p,this,method,is,invoked,by,link,get,test,execution,listeners,and,delegates,to,link,get,default,test,execution,listener,class,names,to,retrieve,the,class,names,p,if,a,particular,class,cannot,be,loaded,a,code,debug,message,will,be,logged,but,the,associated,exception,will,not,be,rethrown;suppress,warnings,unchecked,protected,set,class,extends,test,execution,listener,get,default,test,execution,listener,classes,set,class,extends,test,execution,listener,default,listener,classes,new,linked,hash,set,class,loader,cl,get,class,get,class,loader,for,string,class,name,get,default,test,execution,listener,class,names,try,default,listener,classes,add,class,extends,test,execution,listener,class,utils,for,name,class,name,cl,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,default,test,execution,listener,class,class,name,specify,custom,listener,classes,or,make,the,default,listener,classes,available,ex,return,default,listener,classes
