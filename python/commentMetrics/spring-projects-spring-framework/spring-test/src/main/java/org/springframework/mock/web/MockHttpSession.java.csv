commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public long getCreationTime() {     assertIsValid().     return this.creationTime. }
false;public;0;4;;@Override public String getId() {     return this.id. }
true;public;0;4;/**  * As of Servlet 3.1, the id of a session can be changed.  * @return the new session id  * @since 4.0.3  */ ;/**  * As of Servlet 3.1, the id of a session can be changed.  * @return the new session id  * @since 4.0.3  */ public String changeSessionId() {     this.id = Integer.toString(nextId++).     return this.id. }
false;public;0;4;;public void access() {     this.lastAccessedTime = System.currentTimeMillis().     this.isNew = false. }
false;public;0;5;;@Override public long getLastAccessedTime() {     assertIsValid().     return this.lastAccessedTime. }
false;public;0;4;;@Override public ServletContext getServletContext() {     return this.servletContext. }
false;public;1;4;;@Override public void setMaxInactiveInterval(int interval) {     this.maxInactiveInterval = interval. }
false;public;0;4;;@Override public int getMaxInactiveInterval() {     return this.maxInactiveInterval. }
false;public;0;4;;@Override public javax.servlet.http.HttpSessionContext getSessionContext() {     throw new UnsupportedOperationException("getSessionContext"). }
false;public;1;6;;@Override public Object getAttribute(String name) {     assertIsValid().     Assert.notNull(name, "Attribute name must not be null").     return this.attributes.get(name). }
false;public;1;4;;@Override public Object getValue(String name) {     return getAttribute(name). }
false;public;0;5;;@Override public Enumeration<String> getAttributeNames() {     assertIsValid().     return Collections.enumeration(new LinkedHashSet<>(this.attributes.keySet())). }
false;public;0;5;;@Override public String[] getValueNames() {     assertIsValid().     return StringUtils.toStringArray(this.attributes.keySet()). }
false;public;2;19;;@Override public void setAttribute(String name, @Nullable Object value) {     assertIsValid().     Assert.notNull(name, "Attribute name must not be null").     if (value != null) {         Object oldValue = this.attributes.put(name, value).         if (value != oldValue) {             if (oldValue instanceof HttpSessionBindingListener) {                 ((HttpSessionBindingListener) oldValue).valueUnbound(new HttpSessionBindingEvent(this, name, oldValue)).             }             if (value instanceof HttpSessionBindingListener) {                 ((HttpSessionBindingListener) value).valueBound(new HttpSessionBindingEvent(this, name, value)).             }         }     } else {         removeAttribute(name).     } }
false;public;2;4;;@Override public void putValue(String name, Object value) {     setAttribute(name, value). }
false;public;1;9;;@Override public void removeAttribute(String name) {     assertIsValid().     Assert.notNull(name, "Attribute name must not be null").     Object value = this.attributes.remove(name).     if (value instanceof HttpSessionBindingListener) {         ((HttpSessionBindingListener) value).valueUnbound(new HttpSessionBindingEvent(this, name, value)).     } }
false;public;1;4;;@Override public void removeValue(String name) {     removeAttribute(name). }
true;public;0;11;/**  * Clear all of this session's attributes.  */ ;/**  * Clear all of this session's attributes.  */ public void clearAttributes() {     for (Iterator<Map.Entry<String, Object>> it = this.attributes.entrySet().iterator(). it.hasNext(). ) {         Map.Entry<String, Object> entry = it.next().         String name = entry.getKey().         Object value = entry.getValue().         it.remove().         if (value instanceof HttpSessionBindingListener) {             ((HttpSessionBindingListener) value).valueUnbound(new HttpSessionBindingEvent(this, name, value)).         }     } }
true;public;0;6;/**  * Invalidates this session then unbinds any objects bound to it.  * @throws IllegalStateException if this method is called on an already invalidated session  */ ;/**  * Invalidates this session then unbinds any objects bound to it.  * @throws IllegalStateException if this method is called on an already invalidated session  */ @Override public void invalidate() {     assertIsValid().     this.invalid = true.     clearAttributes(). }
false;public;0;3;;public boolean isInvalid() {     return this.invalid. }
true;private;0;3;/**  * Convenience method for asserting that this session has not been  * {@linkplain #invalidate() invalidated}.  * @throws IllegalStateException if this session has been invalidated  */ ;/**  * Convenience method for asserting that this session has not been  * {@linkplain #invalidate() invalidated}.  * @throws IllegalStateException if this session has been invalidated  */ private void assertIsValid() {     Assert.state(!isInvalid(), "The session has already been invalidated"). }
false;public;1;3;;public void setNew(boolean value) {     this.isNew = value. }
false;public;0;5;;@Override public boolean isNew() {     assertIsValid().     return this.isNew. }
true;public;0;20;/**  * Serialize the attributes of this session into an object that can be  * turned into a byte array with standard Java serialization.  * @return a representation of this session's serialized state  */ ;/**  * Serialize the attributes of this session into an object that can be  * turned into a byte array with standard Java serialization.  * @return a representation of this session's serialized state  */ public Serializable serializeState() {     HashMap<String, Serializable> state = new HashMap<>().     for (Iterator<Map.Entry<String, Object>> it = this.attributes.entrySet().iterator(). it.hasNext(). ) {         Map.Entry<String, Object> entry = it.next().         String name = entry.getKey().         Object value = entry.getValue().         it.remove().         if (value instanceof Serializable) {             state.put(name, (Serializable) value).         } else {             // unbind the attribute in this case.             if (value instanceof HttpSessionBindingListener) {                 ((HttpSessionBindingListener) value).valueUnbound(new HttpSessionBindingEvent(this, name, value)).             }         }     }     return state. }
true;public;1;5;/**  * Deserialize the attributes of this session from a state object created by  * {@link #serializeState()}.  * @param state a representation of this session's serialized state  */ ;/**  * Deserialize the attributes of this session from a state object created by  * {@link #serializeState()}.  * @param state a representation of this session's serialized state  */ @SuppressWarnings("unchecked") public void deserializeState(Serializable state) {     Assert.isTrue(state instanceof Map, "Serialized state needs to be of type [java.util.Map]").     this.attributes.putAll((Map<String, Object>) state). }
