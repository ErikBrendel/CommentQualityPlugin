commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public <T extends B> T webFilter(WebFilter... filters) {     if (filters.length > 0) {         this.filters = (this.filters != null ? this.filters : new ArrayList<>(4)).         this.filters.addAll(Arrays.asList(filters)).     }     return self(). }
false;public;1;5;;@Override public <T extends B> T webSessionManager(WebSessionManager sessionManager) {     this.sessionManager = sessionManager.     return self(). }
false;public;1;7;;@Override public <T extends B> T apply(MockServerConfigurer configurer) {     configurer.afterConfigureAdded(this).     this.configurers = (this.configurers != null ? this.configurers : new ArrayList<>(4)).     this.configurers.add(configurer).     return self(). }
false;private;0;4;;@SuppressWarnings("unchecked") private <T extends B> T self() {     return (T) this. }
false;public;0;14;;@Override public WebTestClient.Builder configureClient() {     WebHttpHandlerBuilder builder = initHttpHandlerBuilder().     if (!CollectionUtils.isEmpty(this.filters)) {         builder.filters(theFilters -> theFilters.addAll(0, this.filters)).     }     if (!builder.hasSessionManager() && this.sessionManager != null) {         builder.sessionManager(this.sessionManager).     }     if (!CollectionUtils.isEmpty(this.configurers)) {         this.configurers.forEach(configurer -> configurer.beforeServerCreated(builder)).     }     return new DefaultWebTestClientBuilder(builder). }
true;protected,abstract;0;1;/**  * Sub-classes must create an {@code WebHttpHandlerBuilder} that will then  * be used to create the HttpHandler for the mock server.  */ ;/**  * Sub-classes must create an {@code WebHttpHandlerBuilder} that will then  * be used to create the HttpHandler for the mock server.  */ protected abstract WebHttpHandlerBuilder initHttpHandlerBuilder().
false;public;0;4;;@Override public WebTestClient build() {     return configureClient().build(). }
