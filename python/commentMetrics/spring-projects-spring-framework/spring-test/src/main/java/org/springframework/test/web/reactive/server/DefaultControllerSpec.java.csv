commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;7;;private static List<Object> instantiateIfNecessary(Object[] specified) {     List<Object> instances = new ArrayList<>(specified.length).     for (Object obj : specified) {         instances.add(obj instanceof Class ? BeanUtils.instantiateClass((Class<?>) obj) : obj).     }     return instances. }
false;public;1;5;;@Override public DefaultControllerSpec controllerAdvice(Object... controllerAdvices) {     this.controllerAdvice.addAll(instantiateIfNecessary(controllerAdvices)).     return this. }
false;public;1;5;;@Override public DefaultControllerSpec contentTypeResolver(Consumer<RequestedContentTypeResolverBuilder> consumer) {     this.configurer.contentTypeResolverConsumer = consumer.     return this. }
false;public;1;5;;@Override public DefaultControllerSpec corsMappings(Consumer<CorsRegistry> consumer) {     this.configurer.corsRegistryConsumer = consumer.     return this. }
false;public;1;5;;@Override public DefaultControllerSpec argumentResolvers(Consumer<ArgumentResolverConfigurer> consumer) {     this.configurer.argumentResolverConsumer = consumer.     return this. }
false;public;1;5;;@Override public DefaultControllerSpec pathMatching(Consumer<PathMatchConfigurer> consumer) {     this.configurer.pathMatchConsumer = consumer.     return this. }
false;public;1;5;;@Override public DefaultControllerSpec httpMessageCodecs(Consumer<ServerCodecConfigurer> consumer) {     this.configurer.messageCodecsConsumer = consumer.     return this. }
false;public;1;5;;@Override public DefaultControllerSpec formatters(Consumer<FormatterRegistry> consumer) {     this.configurer.formattersConsumer = consumer.     return this. }
false;public;1;5;;@Override public DefaultControllerSpec validator(Validator validator) {     this.configurer.validator = validator.     return this. }
false;public;1;5;;@Override public DefaultControllerSpec viewResolvers(Consumer<ViewResolverRegistry> consumer) {     this.configurer.viewResolversConsumer = consumer.     return this. }
false;protected;0;4;;@Override protected WebHttpHandlerBuilder initHttpHandlerBuilder() {     return WebHttpHandlerBuilder.applicationContext(initApplicationContext()). }
false;private;0;15;;private ApplicationContext initApplicationContext() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     this.controllers.forEach(controller -> {         String name = controller.getClass().getName().         context.registerBean(name, Object.class, () -> controller).     }).     this.controllerAdvice.forEach(advice -> {         String name = advice.getClass().getName().         context.registerBean(name, Object.class, () -> advice).     }).     context.register(DelegatingWebFluxConfiguration.class).     context.registerBean(WebFluxConfigurer.class, () -> this.configurer).     context.refresh().     return context. }
false;public;1;6;;@Override public void configureContentTypeResolver(RequestedContentTypeResolverBuilder builder) {     if (this.contentTypeResolverConsumer != null) {         this.contentTypeResolverConsumer.accept(builder).     } }
false;public;1;6;;@Override public void addCorsMappings(CorsRegistry registry) {     if (this.corsRegistryConsumer != null) {         this.corsRegistryConsumer.accept(registry).     } }
false;public;1;6;;@Override public void configurePathMatching(PathMatchConfigurer configurer) {     if (this.pathMatchConsumer != null) {         this.pathMatchConsumer.accept(configurer).     } }
false;public;1;6;;@Override public void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {     if (this.argumentResolverConsumer != null) {         this.argumentResolverConsumer.accept(configurer).     } }
false;public;1;6;;@Override public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) {     if (this.messageCodecsConsumer != null) {         this.messageCodecsConsumer.accept(configurer).     } }
false;public;1;6;;@Override public void addFormatters(FormatterRegistry registry) {     if (this.formattersConsumer != null) {         this.formattersConsumer.accept(registry).     } }
false;public;0;5;;@Override @Nullable public Validator getValidator() {     return this.validator. }
false;public;1;6;;@Override public void configureViewResolvers(ViewResolverRegistry registry) {     if (this.viewResolversConsumer != null) {         this.viewResolversConsumer.accept(registry).     } }
