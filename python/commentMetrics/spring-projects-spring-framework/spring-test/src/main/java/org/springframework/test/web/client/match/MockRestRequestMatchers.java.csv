commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Match to any request.  */ ;/**  * Match to any request.  */ public static RequestMatcher anything() {     return request -> {     }. }
true;public,static;1;4;/**  * Assert the {@link HttpMethod} of the request.  * @param method the HTTP method  * @return the request matcher  */ ;/**  * Assert the {@link HttpMethod} of the request.  * @param method the HTTP method  * @return the request matcher  */ public static RequestMatcher method(final HttpMethod method) {     Assert.notNull(method, "'method' must not be null").     return request -> assertEquals("Unexpected HttpMethod", method, request.getMethod()). }
true;public,static;1;4;/**  * Assert the request URI string with the given Hamcrest matcher.  * @param matcher the String matcher for the expected URI  * @return the request matcher  */ ;/**  * Assert the request URI string with the given Hamcrest matcher.  * @param matcher the String matcher for the expected URI  * @return the request matcher  */ public static RequestMatcher requestTo(final Matcher<String> matcher) {     Assert.notNull(matcher, "'matcher' must not be null").     return request -> assertThat("Request URI", request.getURI().toString(), matcher). }
true;public,static;1;4;/**  * Assert the request URI matches the given string.  * @param expectedUri the expected URI  * @return the request matcher  */ ;/**  * Assert the request URI matches the given string.  * @param expectedUri the expected URI  * @return the request matcher  */ public static RequestMatcher requestTo(final String expectedUri) {     Assert.notNull(expectedUri, "'uri' must not be null").     return request -> assertEquals("Request URI", expectedUri, request.getURI().toString()). }
true;public,static;2;5;/**  * Variant of {@link #requestTo(URI)} that prepares the URI from a URI  * template plus optional variables via {@link UriComponentsBuilder}  * including encoding.  * @param expectedUri the expected URI template  * @param uriVars zero or more URI variables to populate the expected URI  * @return the request matcher  */ ;/**  * Variant of {@link #requestTo(URI)} that prepares the URI from a URI  * template plus optional variables via {@link UriComponentsBuilder}  * including encoding.  * @param expectedUri the expected URI template  * @param uriVars zero or more URI variables to populate the expected URI  * @return the request matcher  */ public static RequestMatcher requestToUriTemplate(final String expectedUri, final Object... uriVars) {     Assert.notNull(expectedUri, "'uri' must not be null").     URI uri = UriComponentsBuilder.fromUriString(expectedUri).buildAndExpand(uriVars).encode().toUri().     return requestTo(uri). }
true;public,static;1;4;/**  * Expect a request to the given URI.  * @param uri the expected URI  * @return the request matcher  */ ;/**  * Expect a request to the given URI.  * @param uri the expected URI  * @return the request matcher  */ public static RequestMatcher requestTo(final URI uri) {     Assert.notNull(uri, "'uri' must not be null").     return request -> assertEquals("Unexpected request", uri, request.getURI()). }
true;public,static;2;10;/**  * Assert request query parameter values with the given Hamcrest matcher(s).  */ ;/**  * Assert request query parameter values with the given Hamcrest matcher(s).  */ @SafeVarargs public static RequestMatcher queryParam(final String name, final Matcher<? super String>... matchers) {     return request -> {         MultiValueMap<String, String> params = getQueryParams(request).         assertValueCount("query param", name, params, matchers.length).         for (int i = 0. i < matchers.length. i++) {             assertThat("Query param", params.get(name).get(i), matchers[i]).         }     }. }
true;public,static;2;9;/**  * Assert request query parameter values.  */ ;/**  * Assert request query parameter values.  */ public static RequestMatcher queryParam(final String name, final String... expectedValues) {     return request -> {         MultiValueMap<String, String> params = getQueryParams(request).         assertValueCount("query param", name, params, expectedValues.length).         for (int i = 0. i < expectedValues.length. i++) {             assertEquals("Query param [" + name + "]", expectedValues[i], params.get(name).get(i)).         }     }. }
false;private,static;1;3;;private static MultiValueMap<String, String> getQueryParams(ClientHttpRequest request) {     return UriComponentsBuilder.fromUri(request.getURI()).build().getQueryParams(). }
false;private,static;4;12;;private static void assertValueCount(String valueType, final String name, MultiValueMap<String, String> map, int count) {     List<String> values = map.get(name).     String message = "Expected " + valueType + " <" + name + ">".     if (values == null) {         fail(message + " to exist but was null").     }     if (count > values.size()) {         fail(message + " to have at least <" + count + "> values but found " + values).     } }
true;public,static;2;11;/**  * Assert request header values with the given Hamcrest matcher(s).  */ ;/**  * Assert request header values with the given Hamcrest matcher(s).  */ @SafeVarargs public static RequestMatcher header(final String name, final Matcher<? super String>... matchers) {     return request -> {         assertValueCount("header", name, request.getHeaders(), matchers.length).         List<String> headerValues = request.getHeaders().get(name).         Assert.state(headerValues != null, "No header values").         for (int i = 0. i < matchers.length. i++) {             assertThat("Request header [" + name + "]", headerValues.get(i), matchers[i]).         }     }. }
true;public,static;2;10;/**  * Assert request header values.  */ ;/**  * Assert request header values.  */ public static RequestMatcher header(final String name, final String... expectedValues) {     return request -> {         assertValueCount("header", name, request.getHeaders(), expectedValues.length).         List<String> headerValues = request.getHeaders().get(name).         Assert.state(headerValues != null, "No header values").         for (int i = 0. i < expectedValues.length. i++) {             assertEquals("Request header [" + name + "]", expectedValues[i], headerValues.get(i)).         }     }. }
true;public,static;0;3;/**  * Access to request body matchers.  */ ;/**  * Access to request body matchers.  */ public static ContentRequestMatchers content() {     return new ContentRequestMatchers(). }
true;public,static;2;3;/**  * Access to request body matchers using a  * <a href="https://github.com/jayway/JsonPath">JsonPath</a> expression to  * inspect a specific subset of the body. The JSON path expression can be a  * parameterized string using formatting specifiers as defined in  * {@link String#format(String, Object...)}.  * @param expression the JSON path optionally parameterized with arguments  * @param args arguments to parameterize the JSON path expression with  */ ;/**  * Access to request body matchers using a  * <a href="https://github.com/jayway/JsonPath">JsonPath</a> expression to  * inspect a specific subset of the body. The JSON path expression can be a  * parameterized string using formatting specifiers as defined in  * {@link String#format(String, Object...)}.  * @param expression the JSON path optionally parameterized with arguments  * @param args arguments to parameterize the JSON path expression with  */ public static JsonPathRequestMatchers jsonPath(String expression, Object... args) {     return new JsonPathRequestMatchers(expression, args). }
true;public,static;2;3;/**  * Access to request body matchers using a  * <a href="https://github.com/jayway/JsonPath">JsonPath</a> expression to  * inspect a specific subset of the body and a Hamcrest match for asserting  * the value found at the JSON path.  * @param expression the JSON path expression  * @param matcher a matcher for the value expected at the JSON path  */ ;/**  * Access to request body matchers using a  * <a href="https://github.com/jayway/JsonPath">JsonPath</a> expression to  * inspect a specific subset of the body and a Hamcrest match for asserting  * the value found at the JSON path.  * @param expression the JSON path expression  * @param matcher a matcher for the value expected at the JSON path  */ public static <T> RequestMatcher jsonPath(String expression, Matcher<T> matcher) {     return new JsonPathRequestMatchers(expression).value(matcher). }
true;public,static;2;3;/**  * Access to request body matchers using an XPath to inspect a specific  * subset of the body. The XPath expression can be a parameterized string  * using formatting specifiers as defined in  * {@link String#format(String, Object...)}.  * @param expression the XPath optionally parameterized with arguments  * @param args arguments to parameterize the XPath expression with  */ ;/**  * Access to request body matchers using an XPath to inspect a specific  * subset of the body. The XPath expression can be a parameterized string  * using formatting specifiers as defined in  * {@link String#format(String, Object...)}.  * @param expression the XPath optionally parameterized with arguments  * @param args arguments to parameterize the XPath expression with  */ public static XpathRequestMatchers xpath(String expression, Object... args) throws XPathExpressionException {     return new XpathRequestMatchers(expression, null, args). }
true;public,static;3;5;/**  * Access to response body matchers using an XPath to inspect a specific  * subset of the body. The XPath expression can be a parameterized string  * using formatting specifiers as defined in  * {@link String#format(String, Object...)}.  * @param expression the XPath optionally parameterized with arguments  * @param namespaces namespaces referenced in the XPath expression  * @param args arguments to parameterize the XPath expression with  */ ;/**  * Access to response body matchers using an XPath to inspect a specific  * subset of the body. The XPath expression can be a parameterized string  * using formatting specifiers as defined in  * {@link String#format(String, Object...)}.  * @param expression the XPath optionally parameterized with arguments  * @param namespaces namespaces referenced in the XPath expression  * @param args arguments to parameterize the XPath expression with  */ public static XpathRequestMatchers xpath(String expression, Map<String, String> namespaces, Object... args) throws XPathExpressionException {     return new XpathRequestMatchers(expression, namespaces, args). }
