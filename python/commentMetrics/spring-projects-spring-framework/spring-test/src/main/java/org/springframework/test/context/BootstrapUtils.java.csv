# id;timestamp;commentText;codeText;commentWords;codeWords
BootstrapUtils -> @SuppressWarnings("unchecked") 	static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext);1397082962;Resolve the {@link TestContextBootstrapper} type for the test class in the_supplied {@link BootstrapContext}, instantiate it, and provide it a reference_to the {@link BootstrapContext}.__<p>If the {@link BootstrapWith @BootstrapWith} annotation is present on_the test class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type._Otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used.__@param bootstrapContext the bootstrap context to use_@return a fully configured {@code TestContextBootstrapper};@SuppressWarnings("unchecked")_	static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext) {_		Class<?> testClass = bootstrapContext.getTestClass()___		Class<? extends TestContextBootstrapper> clazz = null__		try {_			BootstrapWith bootstrapWith = findAnnotation(testClass, BootstrapWith.class)__			if (bootstrapWith != null && !TestContextBootstrapper.class.equals(bootstrapWith.value())) {_				clazz = bootstrapWith.value()__			}_			else {_				clazz = (Class<? extends TestContextBootstrapper>) ClassUtils.forName(_					DEFAULT_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME, BootstrapUtils.class.getClassLoader())__			}__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating TestContextBootstrapper from class [%s]", clazz.getName()))__			}__			TestContextBootstrapper testContextBootstrapper = instantiateClass(clazz, TestContextBootstrapper.class)__			testContextBootstrapper.setBootstrapContext(bootstrapContext)___			return testContextBootstrapper__		}_		catch (Throwable t) {_			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz_					+ "]. Specify @BootstrapWith's 'value' attribute "_					+ "or make the default bootstrapper class available.", t)__		}_	};resolve,the,link,test,context,bootstrapper,type,for,the,test,class,in,the,supplied,link,bootstrap,context,instantiate,it,and,provide,it,a,reference,to,the,link,bootstrap,context,p,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,bootstrap,context,the,bootstrap,context,to,use,return,a,fully,configured,code,test,context,bootstrapper;suppress,warnings,unchecked,static,test,context,bootstrapper,resolve,test,context,bootstrapper,bootstrap,context,bootstrap,context,class,test,class,bootstrap,context,get,test,class,class,extends,test,context,bootstrapper,clazz,null,try,bootstrap,with,bootstrap,with,find,annotation,test,class,bootstrap,with,class,if,bootstrap,with,null,test,context,bootstrapper,class,equals,bootstrap,with,value,clazz,bootstrap,with,value,else,clazz,class,extends,test,context,bootstrapper,class,utils,for,name,bootstrap,utils,class,get,class,loader,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,test,context,bootstrapper,from,class,s,clazz,get,name,test,context,bootstrapper,test,context,bootstrapper,instantiate,class,clazz,test,context,bootstrapper,class,test,context,bootstrapper,set,bootstrap,context,bootstrap,context,return,test,context,bootstrapper,catch,throwable,t,throw,new,illegal,state,exception,could,not,load,test,context,bootstrapper,clazz,specify,bootstrap,with,s,value,attribute,or,make,the,default,bootstrapper,class,available,t
BootstrapUtils -> @SuppressWarnings("unchecked") 	static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext);1413848647;Resolve the {@link TestContextBootstrapper} type for the test class in the_supplied {@link BootstrapContext}, instantiate it, and provide it a reference_to the {@link BootstrapContext}.__<p>If the {@link BootstrapWith @BootstrapWith} annotation is present on_the test class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type._Otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used.__@param bootstrapContext the bootstrap context to use_@return a fully configured {@code TestContextBootstrapper};@SuppressWarnings("unchecked")_	static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext) {_		Class<?> testClass = bootstrapContext.getTestClass()___		Class<? extends TestContextBootstrapper> clazz = null__		try {_			BootstrapWith bootstrapWith = findAnnotation(testClass, BootstrapWith.class)__			if (bootstrapWith != null && !TestContextBootstrapper.class.equals(bootstrapWith.value())) {_				clazz = bootstrapWith.value()__			}_			else {_				clazz = (Class<? extends TestContextBootstrapper>) ClassUtils.forName(_					DEFAULT_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME, BootstrapUtils.class.getClassLoader())__			}__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating TestContextBootstrapper from class [%s]", clazz.getName()))__			}__			TestContextBootstrapper testContextBootstrapper = instantiateClass(clazz, TestContextBootstrapper.class)__			testContextBootstrapper.setBootstrapContext(bootstrapContext)___			return testContextBootstrapper__		}_		catch (Throwable t) {_			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz_					+ "]. Specify @BootstrapWith's 'value' attribute "_					+ "or make the default bootstrapper class available.", t)__		}_	};resolve,the,link,test,context,bootstrapper,type,for,the,test,class,in,the,supplied,link,bootstrap,context,instantiate,it,and,provide,it,a,reference,to,the,link,bootstrap,context,p,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,bootstrap,context,the,bootstrap,context,to,use,return,a,fully,configured,code,test,context,bootstrapper;suppress,warnings,unchecked,static,test,context,bootstrapper,resolve,test,context,bootstrapper,bootstrap,context,bootstrap,context,class,test,class,bootstrap,context,get,test,class,class,extends,test,context,bootstrapper,clazz,null,try,bootstrap,with,bootstrap,with,find,annotation,test,class,bootstrap,with,class,if,bootstrap,with,null,test,context,bootstrapper,class,equals,bootstrap,with,value,clazz,bootstrap,with,value,else,clazz,class,extends,test,context,bootstrapper,class,utils,for,name,bootstrap,utils,class,get,class,loader,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,test,context,bootstrapper,from,class,s,clazz,get,name,test,context,bootstrapper,test,context,bootstrapper,instantiate,class,clazz,test,context,bootstrapper,class,test,context,bootstrapper,set,bootstrap,context,bootstrap,context,return,test,context,bootstrapper,catch,throwable,t,throw,new,illegal,state,exception,could,not,load,test,context,bootstrapper,clazz,specify,bootstrap,with,s,value,attribute,or,make,the,default,bootstrapper,class,available,t
BootstrapUtils -> @SuppressWarnings("unchecked") 	static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext);1429465455;Resolve the {@link TestContextBootstrapper} type for the test class in the_supplied {@link BootstrapContext}, instantiate it, and provide it a reference_to the {@link BootstrapContext}.__<p>If the {@link BootstrapWith @BootstrapWith} annotation is present on_the test class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type._Otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used.__@param bootstrapContext the bootstrap context to use_@return a fully configured {@code TestContextBootstrapper};@SuppressWarnings("unchecked")_	static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext) {_		Class<?> testClass = bootstrapContext.getTestClass()___		Class<? extends TestContextBootstrapper> clazz = null__		try {_			BootstrapWith bootstrapWith = findAnnotation(testClass, BootstrapWith.class)__			if (bootstrapWith != null && !TestContextBootstrapper.class.equals(bootstrapWith.value())) {_				clazz = bootstrapWith.value()__			}_			else {_				clazz = (Class<? extends TestContextBootstrapper>) ClassUtils.forName(_					DEFAULT_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME, BootstrapUtils.class.getClassLoader())__			}__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating TestContextBootstrapper from class [%s]", clazz.getName()))__			}__			TestContextBootstrapper testContextBootstrapper = instantiateClass(clazz, TestContextBootstrapper.class)__			testContextBootstrapper.setBootstrapContext(bootstrapContext)___			return testContextBootstrapper__		}_		catch (Throwable t) {_			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz_					+ "]. Specify @BootstrapWith's 'value' attribute "_					+ "or make the default bootstrapper class available.", t)__		}_	};resolve,the,link,test,context,bootstrapper,type,for,the,test,class,in,the,supplied,link,bootstrap,context,instantiate,it,and,provide,it,a,reference,to,the,link,bootstrap,context,p,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,bootstrap,context,the,bootstrap,context,to,use,return,a,fully,configured,code,test,context,bootstrapper;suppress,warnings,unchecked,static,test,context,bootstrapper,resolve,test,context,bootstrapper,bootstrap,context,bootstrap,context,class,test,class,bootstrap,context,get,test,class,class,extends,test,context,bootstrapper,clazz,null,try,bootstrap,with,bootstrap,with,find,annotation,test,class,bootstrap,with,class,if,bootstrap,with,null,test,context,bootstrapper,class,equals,bootstrap,with,value,clazz,bootstrap,with,value,else,clazz,class,extends,test,context,bootstrapper,class,utils,for,name,bootstrap,utils,class,get,class,loader,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,test,context,bootstrapper,from,class,s,clazz,get,name,test,context,bootstrapper,test,context,bootstrapper,instantiate,class,clazz,test,context,bootstrapper,class,test,context,bootstrapper,set,bootstrap,context,bootstrap,context,return,test,context,bootstrapper,catch,throwable,t,throw,new,illegal,state,exception,could,not,load,test,context,bootstrapper,clazz,specify,bootstrap,with,s,value,attribute,or,make,the,default,bootstrapper,class,available,t
BootstrapUtils -> @SuppressWarnings("unchecked") 	static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext);1429559310;Resolve the {@link TestContextBootstrapper} type for the test class in the_supplied {@link BootstrapContext}, instantiate it, and provide it a reference_to the {@link BootstrapContext}.__<p>If the {@link BootstrapWith @BootstrapWith} annotation is present on_the test class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type._Otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used.__@param bootstrapContext the bootstrap context to use_@return a fully configured {@code TestContextBootstrapper};@SuppressWarnings("unchecked")_	static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext) {_		Class<?> testClass = bootstrapContext.getTestClass()___		Class<? extends TestContextBootstrapper> clazz = null__		try {_			BootstrapWith bootstrapWith = findAnnotation(testClass, BootstrapWith.class)__			if (bootstrapWith != null && !TestContextBootstrapper.class.equals(bootstrapWith.value())) {_				clazz = bootstrapWith.value()__			}_			else {_				clazz = (Class<? extends TestContextBootstrapper>) ClassUtils.forName(_					DEFAULT_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME, BootstrapUtils.class.getClassLoader())__			}__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating TestContextBootstrapper from class [%s]", clazz.getName()))__			}__			TestContextBootstrapper testContextBootstrapper = instantiateClass(clazz, TestContextBootstrapper.class)__			testContextBootstrapper.setBootstrapContext(bootstrapContext)___			return testContextBootstrapper__		}_		catch (Throwable t) {_			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz_					+ "]. Specify @BootstrapWith's 'value' attribute "_					+ "or make the default bootstrapper class available.", t)__		}_	};resolve,the,link,test,context,bootstrapper,type,for,the,test,class,in,the,supplied,link,bootstrap,context,instantiate,it,and,provide,it,a,reference,to,the,link,bootstrap,context,p,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,bootstrap,context,the,bootstrap,context,to,use,return,a,fully,configured,code,test,context,bootstrapper;suppress,warnings,unchecked,static,test,context,bootstrapper,resolve,test,context,bootstrapper,bootstrap,context,bootstrap,context,class,test,class,bootstrap,context,get,test,class,class,extends,test,context,bootstrapper,clazz,null,try,bootstrap,with,bootstrap,with,find,annotation,test,class,bootstrap,with,class,if,bootstrap,with,null,test,context,bootstrapper,class,equals,bootstrap,with,value,clazz,bootstrap,with,value,else,clazz,class,extends,test,context,bootstrapper,class,utils,for,name,bootstrap,utils,class,get,class,loader,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,test,context,bootstrapper,from,class,s,clazz,get,name,test,context,bootstrapper,test,context,bootstrapper,instantiate,class,clazz,test,context,bootstrapper,class,test,context,bootstrapper,set,bootstrap,context,bootstrap,context,return,test,context,bootstrapper,catch,throwable,t,throw,new,illegal,state,exception,could,not,load,test,context,bootstrapper,clazz,specify,bootstrap,with,s,value,attribute,or,make,the,default,bootstrapper,class,available,t
BootstrapUtils -> @SuppressWarnings("unchecked") 	static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext);1430009887;Resolve the {@link TestContextBootstrapper} type for the test class in the_supplied {@link BootstrapContext}, instantiate it, and provide it a reference_to the {@link BootstrapContext}.__<p>If the {@link BootstrapWith @BootstrapWith} annotation is present on_the test class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type._Otherwise, the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} will be used.__@param bootstrapContext the bootstrap context to use_@return a fully configured {@code TestContextBootstrapper};@SuppressWarnings("unchecked")_	static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext) {_		Class<?> testClass = bootstrapContext.getTestClass()___		Class<? extends TestContextBootstrapper> clazz = null__		try {__			MultiValueMap<String, Object> attributesMultiMap = AnnotatedElementUtils.getAllAnnotationAttributes(_				testClass, BootstrapWith.class.getName())__			List<Object> values = (attributesMultiMap == null ? null : attributesMultiMap.get(AnnotationUtils.VALUE))___			if (values != null) {_				if (values.size() != 1) {_					String msg = String.format(_						"Configuration error: found multiple declarations of @BootstrapWith on test class [%s] with values %s",_						testClass.getName(), values)__					throw new IllegalStateException(msg)__				}_				clazz = (Class<? extends TestContextBootstrapper>) values.get(0)__			}_			else {_				clazz = (Class<? extends TestContextBootstrapper>) ClassUtils.forName(_					DEFAULT_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME, BootstrapUtils.class.getClassLoader())__			}__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating TestContextBootstrapper for test class [%s] from class [%s]",_					testClass.getName(), clazz.getName()))__			}__			TestContextBootstrapper testContextBootstrapper = instantiateClass(clazz, TestContextBootstrapper.class)__			testContextBootstrapper.setBootstrapContext(bootstrapContext)___			return testContextBootstrapper__		}_		catch (Throwable t) {_			if (t instanceof IllegalStateException) {_				throw (IllegalStateException) t__			}__			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz_					+ "]. Specify @BootstrapWith's 'value' attribute "_					+ "or make the default bootstrapper class available.", t)__		}_	};resolve,the,link,test,context,bootstrapper,type,for,the,test,class,in,the,supplied,link,bootstrap,context,instantiate,it,and,provide,it,a,reference,to,the,link,bootstrap,context,p,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,will,be,used,param,bootstrap,context,the,bootstrap,context,to,use,return,a,fully,configured,code,test,context,bootstrapper;suppress,warnings,unchecked,static,test,context,bootstrapper,resolve,test,context,bootstrapper,bootstrap,context,bootstrap,context,class,test,class,bootstrap,context,get,test,class,class,extends,test,context,bootstrapper,clazz,null,try,multi,value,map,string,object,attributes,multi,map,annotated,element,utils,get,all,annotation,attributes,test,class,bootstrap,with,class,get,name,list,object,values,attributes,multi,map,null,null,attributes,multi,map,get,annotation,utils,value,if,values,null,if,values,size,1,string,msg,string,format,configuration,error,found,multiple,declarations,of,bootstrap,with,on,test,class,s,with,values,s,test,class,get,name,values,throw,new,illegal,state,exception,msg,clazz,class,extends,test,context,bootstrapper,values,get,0,else,clazz,class,extends,test,context,bootstrapper,class,utils,for,name,bootstrap,utils,class,get,class,loader,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,test,context,bootstrapper,for,test,class,s,from,class,s,test,class,get,name,clazz,get,name,test,context,bootstrapper,test,context,bootstrapper,instantiate,class,clazz,test,context,bootstrapper,class,test,context,bootstrapper,set,bootstrap,context,bootstrap,context,return,test,context,bootstrapper,catch,throwable,t,if,t,instanceof,illegal,state,exception,throw,illegal,state,exception,t,throw,new,illegal,state,exception,could,not,load,test,context,bootstrapper,clazz,specify,bootstrap,with,s,value,attribute,or,make,the,default,bootstrapper,class,available,t
BootstrapUtils -> static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext);1457446795;Resolve the {@link TestContextBootstrapper} type for the test class in the_supplied {@link BootstrapContext}, instantiate it, and provide it a reference_to the {@link BootstrapContext}.__<p>If the {@link BootstrapWith @BootstrapWith} annotation is present on_the test class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type._Otherwise, either the_{@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} or the_{@link org.springframework.test.context.web.WebTestContextBootstrapper_WebTestContextBootstrapper} will be used, depending on the presence of_{@link org.springframework.test.context.web.WebAppConfiguration @WebAppConfiguration}.__@param bootstrapContext the bootstrap context to use_@return a fully configured {@code TestContextBootstrapper};static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext) {_		Class<?> testClass = bootstrapContext.getTestClass()___		Class<?> clazz = null__		try {_			clazz = resolveExplicitTestContextBootstrapper(testClass)__			if (clazz == null) {_				clazz = resolveDefaultTestContextBootstrapper(testClass)__			}_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating TestContextBootstrapper for test class [%s] from class [%s]",_					testClass.getName(), clazz.getName()))__			}__			TestContextBootstrapper testContextBootstrapper = instantiateClass(clazz, TestContextBootstrapper.class)__			testContextBootstrapper.setBootstrapContext(bootstrapContext)___			return testContextBootstrapper__		}_		catch (Throwable ex) {_			if (ex instanceof IllegalStateException) {_				throw (IllegalStateException) ex__			}_			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz_					+ "]. Specify @BootstrapWith's 'value' attribute "_					+ "or make the default bootstrapper class available.", ex)__		}_	};resolve,the,link,test,context,bootstrapper,type,for,the,test,class,in,the,supplied,link,bootstrap,context,instantiate,it,and,provide,it,a,reference,to,the,link,bootstrap,context,p,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,either,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,or,the,link,org,springframework,test,context,web,web,test,context,bootstrapper,web,test,context,bootstrapper,will,be,used,depending,on,the,presence,of,link,org,springframework,test,context,web,web,app,configuration,web,app,configuration,param,bootstrap,context,the,bootstrap,context,to,use,return,a,fully,configured,code,test,context,bootstrapper;static,test,context,bootstrapper,resolve,test,context,bootstrapper,bootstrap,context,bootstrap,context,class,test,class,bootstrap,context,get,test,class,class,clazz,null,try,clazz,resolve,explicit,test,context,bootstrapper,test,class,if,clazz,null,clazz,resolve,default,test,context,bootstrapper,test,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,test,context,bootstrapper,for,test,class,s,from,class,s,test,class,get,name,clazz,get,name,test,context,bootstrapper,test,context,bootstrapper,instantiate,class,clazz,test,context,bootstrapper,class,test,context,bootstrapper,set,bootstrap,context,bootstrap,context,return,test,context,bootstrapper,catch,throwable,ex,if,ex,instanceof,illegal,state,exception,throw,illegal,state,exception,ex,throw,new,illegal,state,exception,could,not,load,test,context,bootstrapper,clazz,specify,bootstrap,with,s,value,attribute,or,make,the,default,bootstrapper,class,available,ex
BootstrapUtils -> static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext);1459842161;Resolve the {@link TestContextBootstrapper} type for the test class in the_supplied {@link BootstrapContext}, instantiate it, and provide it a reference_to the {@link BootstrapContext}._<p>If the {@link BootstrapWith @BootstrapWith} annotation is present on_the test class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type._Otherwise, either the_{@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} or the_{@link org.springframework.test.context.web.WebTestContextBootstrapper_WebTestContextBootstrapper} will be used, depending on the presence of_{@link org.springframework.test.context.web.WebAppConfiguration @WebAppConfiguration}._@param bootstrapContext the bootstrap context to use_@return a fully configured {@code TestContextBootstrapper};static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext) {_		Class<?> testClass = bootstrapContext.getTestClass()___		Class<?> clazz = null__		try {_			clazz = resolveExplicitTestContextBootstrapper(testClass)__			if (clazz == null) {_				clazz = resolveDefaultTestContextBootstrapper(testClass)__			}_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating TestContextBootstrapper for test class [%s] from class [%s]",_						testClass.getName(), clazz.getName()))__			}_			TestContextBootstrapper testContextBootstrapper = instantiateClass(clazz, TestContextBootstrapper.class)__			testContextBootstrapper.setBootstrapContext(bootstrapContext)__			return testContextBootstrapper__		}_		catch (Throwable ex) {_			if (ex instanceof IllegalStateException) {_				throw (IllegalStateException) ex__			}_			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz +_					"]. Specify @BootstrapWith's 'value' attribute or make the default bootstrapper class available.",_					ex)__		}_	};resolve,the,link,test,context,bootstrapper,type,for,the,test,class,in,the,supplied,link,bootstrap,context,instantiate,it,and,provide,it,a,reference,to,the,link,bootstrap,context,p,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,either,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,or,the,link,org,springframework,test,context,web,web,test,context,bootstrapper,web,test,context,bootstrapper,will,be,used,depending,on,the,presence,of,link,org,springframework,test,context,web,web,app,configuration,web,app,configuration,param,bootstrap,context,the,bootstrap,context,to,use,return,a,fully,configured,code,test,context,bootstrapper;static,test,context,bootstrapper,resolve,test,context,bootstrapper,bootstrap,context,bootstrap,context,class,test,class,bootstrap,context,get,test,class,class,clazz,null,try,clazz,resolve,explicit,test,context,bootstrapper,test,class,if,clazz,null,clazz,resolve,default,test,context,bootstrapper,test,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,test,context,bootstrapper,for,test,class,s,from,class,s,test,class,get,name,clazz,get,name,test,context,bootstrapper,test,context,bootstrapper,instantiate,class,clazz,test,context,bootstrapper,class,test,context,bootstrapper,set,bootstrap,context,bootstrap,context,return,test,context,bootstrapper,catch,throwable,ex,if,ex,instanceof,illegal,state,exception,throw,illegal,state,exception,ex,throw,new,illegal,state,exception,could,not,load,test,context,bootstrapper,clazz,specify,bootstrap,with,s,value,attribute,or,make,the,default,bootstrapper,class,available,ex
BootstrapUtils -> static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext);1459851441;Resolve the {@link TestContextBootstrapper} type for the test class in the_supplied {@link BootstrapContext}, instantiate it, and provide it a reference_to the {@link BootstrapContext}._<p>If the {@link BootstrapWith @BootstrapWith} annotation is present on_the test class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type._Otherwise, either the_{@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} or the_{@link org.springframework.test.context.web.WebTestContextBootstrapper_WebTestContextBootstrapper} will be used, depending on the presence of_{@link org.springframework.test.context.web.WebAppConfiguration @WebAppConfiguration}._@param bootstrapContext the bootstrap context to use_@return a fully configured {@code TestContextBootstrapper};static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext) {_		Class<?> testClass = bootstrapContext.getTestClass()___		Class<?> clazz = null__		try {_			clazz = resolveExplicitTestContextBootstrapper(testClass)__			if (clazz == null) {_				clazz = resolveDefaultTestContextBootstrapper(testClass)__			}_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating TestContextBootstrapper for test class [%s] from class [%s]",_						testClass.getName(), clazz.getName()))__			}_			TestContextBootstrapper testContextBootstrapper =_					BeanUtils.instantiateClass(clazz, TestContextBootstrapper.class)__			testContextBootstrapper.setBootstrapContext(bootstrapContext)__			return testContextBootstrapper__		}_		catch (Throwable ex) {_			if (ex instanceof IllegalStateException) {_				throw (IllegalStateException) ex__			}_			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz +_					"]. Specify @BootstrapWith's 'value' attribute or make the default bootstrapper class available.",_					ex)__		}_	};resolve,the,link,test,context,bootstrapper,type,for,the,test,class,in,the,supplied,link,bootstrap,context,instantiate,it,and,provide,it,a,reference,to,the,link,bootstrap,context,p,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,either,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,or,the,link,org,springframework,test,context,web,web,test,context,bootstrapper,web,test,context,bootstrapper,will,be,used,depending,on,the,presence,of,link,org,springframework,test,context,web,web,app,configuration,web,app,configuration,param,bootstrap,context,the,bootstrap,context,to,use,return,a,fully,configured,code,test,context,bootstrapper;static,test,context,bootstrapper,resolve,test,context,bootstrapper,bootstrap,context,bootstrap,context,class,test,class,bootstrap,context,get,test,class,class,clazz,null,try,clazz,resolve,explicit,test,context,bootstrapper,test,class,if,clazz,null,clazz,resolve,default,test,context,bootstrapper,test,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,test,context,bootstrapper,for,test,class,s,from,class,s,test,class,get,name,clazz,get,name,test,context,bootstrapper,test,context,bootstrapper,bean,utils,instantiate,class,clazz,test,context,bootstrapper,class,test,context,bootstrapper,set,bootstrap,context,bootstrap,context,return,test,context,bootstrapper,catch,throwable,ex,if,ex,instanceof,illegal,state,exception,throw,illegal,state,exception,ex,throw,new,illegal,state,exception,could,not,load,test,context,bootstrapper,clazz,specify,bootstrap,with,s,value,attribute,or,make,the,default,bootstrapper,class,available,ex
BootstrapUtils -> static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext);1462470884;Resolve the {@link TestContextBootstrapper} type for the test class in the_supplied {@link BootstrapContext}, instantiate it, and provide it a reference_to the {@link BootstrapContext}._<p>If the {@link BootstrapWith @BootstrapWith} annotation is present on_the test class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type._Otherwise, either the_{@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} or the_{@link org.springframework.test.context.web.WebTestContextBootstrapper_WebTestContextBootstrapper} will be used, depending on the presence of_{@link org.springframework.test.context.web.WebAppConfiguration @WebAppConfiguration}._@param bootstrapContext the bootstrap context to use_@return a fully configured {@code TestContextBootstrapper};static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext) {_		Class<?> testClass = bootstrapContext.getTestClass()___		Class<?> clazz = null__		try {_			clazz = resolveExplicitTestContextBootstrapper(testClass)__			if (clazz == null) {_				clazz = resolveDefaultTestContextBootstrapper(testClass)__			}_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating TestContextBootstrapper for test class [%s] from class [%s]",_						testClass.getName(), clazz.getName()))__			}_			TestContextBootstrapper testContextBootstrapper =_					BeanUtils.instantiateClass(clazz, TestContextBootstrapper.class)__			testContextBootstrapper.setBootstrapContext(bootstrapContext)__			return testContextBootstrapper__		}_		catch (Throwable ex) {_			if (ex instanceof IllegalStateException) {_				throw (IllegalStateException) ex__			}_			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz +_					"]. Specify @BootstrapWith's 'value' attribute or make the default bootstrapper class available.",_					ex)__		}_	};resolve,the,link,test,context,bootstrapper,type,for,the,test,class,in,the,supplied,link,bootstrap,context,instantiate,it,and,provide,it,a,reference,to,the,link,bootstrap,context,p,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,either,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,or,the,link,org,springframework,test,context,web,web,test,context,bootstrapper,web,test,context,bootstrapper,will,be,used,depending,on,the,presence,of,link,org,springframework,test,context,web,web,app,configuration,web,app,configuration,param,bootstrap,context,the,bootstrap,context,to,use,return,a,fully,configured,code,test,context,bootstrapper;static,test,context,bootstrapper,resolve,test,context,bootstrapper,bootstrap,context,bootstrap,context,class,test,class,bootstrap,context,get,test,class,class,clazz,null,try,clazz,resolve,explicit,test,context,bootstrapper,test,class,if,clazz,null,clazz,resolve,default,test,context,bootstrapper,test,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,test,context,bootstrapper,for,test,class,s,from,class,s,test,class,get,name,clazz,get,name,test,context,bootstrapper,test,context,bootstrapper,bean,utils,instantiate,class,clazz,test,context,bootstrapper,class,test,context,bootstrapper,set,bootstrap,context,bootstrap,context,return,test,context,bootstrapper,catch,throwable,ex,if,ex,instanceof,illegal,state,exception,throw,illegal,state,exception,ex,throw,new,illegal,state,exception,could,not,load,test,context,bootstrapper,clazz,specify,bootstrap,with,s,value,attribute,or,make,the,default,bootstrapper,class,available,ex
BootstrapUtils -> static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext);1465306936;Resolve the {@link TestContextBootstrapper} type for the test class in the_supplied {@link BootstrapContext}, instantiate it, and provide it a reference_to the {@link BootstrapContext}._<p>If the {@link BootstrapWith @BootstrapWith} annotation is present on_the test class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type._Otherwise, either the_{@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} or the_{@link org.springframework.test.context.web.WebTestContextBootstrapper_WebTestContextBootstrapper} will be used, depending on the presence of_{@link org.springframework.test.context.web.WebAppConfiguration @WebAppConfiguration}._@param bootstrapContext the bootstrap context to use_@return a fully configured {@code TestContextBootstrapper};static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext) {_		Class<?> testClass = bootstrapContext.getTestClass()___		Class<?> clazz = null__		try {_			clazz = resolveExplicitTestContextBootstrapper(testClass)__			if (clazz == null) {_				clazz = resolveDefaultTestContextBootstrapper(testClass)__			}_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating TestContextBootstrapper for test class [%s] from class [%s]",_						testClass.getName(), clazz.getName()))__			}_			TestContextBootstrapper testContextBootstrapper =_					BeanUtils.instantiateClass(clazz, TestContextBootstrapper.class)__			testContextBootstrapper.setBootstrapContext(bootstrapContext)__			return testContextBootstrapper__		}_		catch (IllegalStateException ex) {_			throw ex__		}_		catch (Throwable ex) {_			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz +_					"]. Specify @BootstrapWith's 'value' attribute or make the default bootstrapper class available.",_					ex)__		}_	};resolve,the,link,test,context,bootstrapper,type,for,the,test,class,in,the,supplied,link,bootstrap,context,instantiate,it,and,provide,it,a,reference,to,the,link,bootstrap,context,p,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,either,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,or,the,link,org,springframework,test,context,web,web,test,context,bootstrapper,web,test,context,bootstrapper,will,be,used,depending,on,the,presence,of,link,org,springframework,test,context,web,web,app,configuration,web,app,configuration,param,bootstrap,context,the,bootstrap,context,to,use,return,a,fully,configured,code,test,context,bootstrapper;static,test,context,bootstrapper,resolve,test,context,bootstrapper,bootstrap,context,bootstrap,context,class,test,class,bootstrap,context,get,test,class,class,clazz,null,try,clazz,resolve,explicit,test,context,bootstrapper,test,class,if,clazz,null,clazz,resolve,default,test,context,bootstrapper,test,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,test,context,bootstrapper,for,test,class,s,from,class,s,test,class,get,name,clazz,get,name,test,context,bootstrapper,test,context,bootstrapper,bean,utils,instantiate,class,clazz,test,context,bootstrapper,class,test,context,bootstrapper,set,bootstrap,context,bootstrap,context,return,test,context,bootstrapper,catch,illegal,state,exception,ex,throw,ex,catch,throwable,ex,throw,new,illegal,state,exception,could,not,load,test,context,bootstrapper,clazz,specify,bootstrap,with,s,value,attribute,or,make,the,default,bootstrapper,class,available,ex
BootstrapUtils -> static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext);1468334463;Resolve the {@link TestContextBootstrapper} type for the test class in the_supplied {@link BootstrapContext}, instantiate it, and provide it a reference_to the {@link BootstrapContext}._<p>If the {@link BootstrapWith @BootstrapWith} annotation is present on_the test class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type._Otherwise, either the_{@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} or the_{@link org.springframework.test.context.web.WebTestContextBootstrapper_WebTestContextBootstrapper} will be used, depending on the presence of_{@link org.springframework.test.context.web.WebAppConfiguration @WebAppConfiguration}._@param bootstrapContext the bootstrap context to use_@return a fully configured {@code TestContextBootstrapper};static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext) {_		Class<?> testClass = bootstrapContext.getTestClass()___		Class<?> clazz = null__		try {_			clazz = resolveExplicitTestContextBootstrapper(testClass)__			if (clazz == null) {_				clazz = resolveDefaultTestContextBootstrapper(testClass)__			}_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating TestContextBootstrapper for test class [%s] from class [%s]",_						testClass.getName(), clazz.getName()))__			}_			TestContextBootstrapper testContextBootstrapper =_					BeanUtils.instantiateClass(clazz, TestContextBootstrapper.class)__			testContextBootstrapper.setBootstrapContext(bootstrapContext)__			return testContextBootstrapper__		}_		catch (IllegalStateException ex) {_			throw ex__		}_		catch (Throwable ex) {_			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz +_					"]. Specify @BootstrapWith's 'value' attribute or make the default bootstrapper class available.",_					ex)__		}_	};resolve,the,link,test,context,bootstrapper,type,for,the,test,class,in,the,supplied,link,bootstrap,context,instantiate,it,and,provide,it,a,reference,to,the,link,bootstrap,context,p,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,either,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,or,the,link,org,springframework,test,context,web,web,test,context,bootstrapper,web,test,context,bootstrapper,will,be,used,depending,on,the,presence,of,link,org,springframework,test,context,web,web,app,configuration,web,app,configuration,param,bootstrap,context,the,bootstrap,context,to,use,return,a,fully,configured,code,test,context,bootstrapper;static,test,context,bootstrapper,resolve,test,context,bootstrapper,bootstrap,context,bootstrap,context,class,test,class,bootstrap,context,get,test,class,class,clazz,null,try,clazz,resolve,explicit,test,context,bootstrapper,test,class,if,clazz,null,clazz,resolve,default,test,context,bootstrapper,test,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,test,context,bootstrapper,for,test,class,s,from,class,s,test,class,get,name,clazz,get,name,test,context,bootstrapper,test,context,bootstrapper,bean,utils,instantiate,class,clazz,test,context,bootstrapper,class,test,context,bootstrapper,set,bootstrap,context,bootstrap,context,return,test,context,bootstrapper,catch,illegal,state,exception,ex,throw,ex,catch,throwable,ex,throw,new,illegal,state,exception,could,not,load,test,context,bootstrapper,clazz,specify,bootstrap,with,s,value,attribute,or,make,the,default,bootstrapper,class,available,ex
BootstrapUtils -> static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext);1495868221;Resolve the {@link TestContextBootstrapper} type for the test class in the_supplied {@link BootstrapContext}, instantiate it, and provide it a reference_to the {@link BootstrapContext}._<p>If the {@link BootstrapWith @BootstrapWith} annotation is present on_the test class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type._Otherwise, either the_{@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} or the_{@link org.springframework.test.context.web.WebTestContextBootstrapper_WebTestContextBootstrapper} will be used, depending on the presence of_{@link org.springframework.test.context.web.WebAppConfiguration @WebAppConfiguration}._@param bootstrapContext the bootstrap context to use_@return a fully configured {@code TestContextBootstrapper};static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext) {_		Class<?> testClass = bootstrapContext.getTestClass()___		Class<?> clazz = null__		try {_			clazz = resolveExplicitTestContextBootstrapper(testClass)__			if (clazz == null) {_				clazz = resolveDefaultTestContextBootstrapper(testClass)__			}_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating TestContextBootstrapper for test class [%s] from class [%s]",_						testClass.getName(), clazz.getName()))__			}_			TestContextBootstrapper testContextBootstrapper =_					BeanUtils.instantiateClass(clazz, TestContextBootstrapper.class)__			testContextBootstrapper.setBootstrapContext(bootstrapContext)__			return testContextBootstrapper__		}_		catch (IllegalStateException ex) {_			throw ex__		}_		catch (Throwable ex) {_			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz +_					"]. Specify @BootstrapWith's 'value' attribute or make the default bootstrapper class available.",_					ex)__		}_	};resolve,the,link,test,context,bootstrapper,type,for,the,test,class,in,the,supplied,link,bootstrap,context,instantiate,it,and,provide,it,a,reference,to,the,link,bootstrap,context,p,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,either,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,or,the,link,org,springframework,test,context,web,web,test,context,bootstrapper,web,test,context,bootstrapper,will,be,used,depending,on,the,presence,of,link,org,springframework,test,context,web,web,app,configuration,web,app,configuration,param,bootstrap,context,the,bootstrap,context,to,use,return,a,fully,configured,code,test,context,bootstrapper;static,test,context,bootstrapper,resolve,test,context,bootstrapper,bootstrap,context,bootstrap,context,class,test,class,bootstrap,context,get,test,class,class,clazz,null,try,clazz,resolve,explicit,test,context,bootstrapper,test,class,if,clazz,null,clazz,resolve,default,test,context,bootstrapper,test,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,test,context,bootstrapper,for,test,class,s,from,class,s,test,class,get,name,clazz,get,name,test,context,bootstrapper,test,context,bootstrapper,bean,utils,instantiate,class,clazz,test,context,bootstrapper,class,test,context,bootstrapper,set,bootstrap,context,bootstrap,context,return,test,context,bootstrapper,catch,illegal,state,exception,ex,throw,ex,catch,throwable,ex,throw,new,illegal,state,exception,could,not,load,test,context,bootstrapper,clazz,specify,bootstrap,with,s,value,attribute,or,make,the,default,bootstrapper,class,available,ex
BootstrapUtils -> static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext);1518167526;Resolve the {@link TestContextBootstrapper} type for the test class in the_supplied {@link BootstrapContext}, instantiate it, and provide it a reference_to the {@link BootstrapContext}._<p>If the {@link BootstrapWith @BootstrapWith} annotation is present on_the test class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type._Otherwise, either the_{@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} or the_{@link org.springframework.test.context.web.WebTestContextBootstrapper_WebTestContextBootstrapper} will be used, depending on the presence of_{@link org.springframework.test.context.web.WebAppConfiguration @WebAppConfiguration}._@param bootstrapContext the bootstrap context to use_@return a fully configured {@code TestContextBootstrapper};static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext) {_		Class<?> testClass = bootstrapContext.getTestClass()___		Class<?> clazz = null__		try {_			clazz = resolveExplicitTestContextBootstrapper(testClass)__			if (clazz == null) {_				clazz = resolveDefaultTestContextBootstrapper(testClass)__			}_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating TestContextBootstrapper for test class [%s] from class [%s]",_						testClass.getName(), clazz.getName()))__			}_			TestContextBootstrapper testContextBootstrapper =_					BeanUtils.instantiateClass(clazz, TestContextBootstrapper.class)__			testContextBootstrapper.setBootstrapContext(bootstrapContext)__			return testContextBootstrapper__		}_		catch (IllegalStateException ex) {_			throw ex__		}_		catch (Throwable ex) {_			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz +_					"]. Specify @BootstrapWith's 'value' attribute or make the default bootstrapper class available.",_					ex)__		}_	};resolve,the,link,test,context,bootstrapper,type,for,the,test,class,in,the,supplied,link,bootstrap,context,instantiate,it,and,provide,it,a,reference,to,the,link,bootstrap,context,p,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,either,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,or,the,link,org,springframework,test,context,web,web,test,context,bootstrapper,web,test,context,bootstrapper,will,be,used,depending,on,the,presence,of,link,org,springframework,test,context,web,web,app,configuration,web,app,configuration,param,bootstrap,context,the,bootstrap,context,to,use,return,a,fully,configured,code,test,context,bootstrapper;static,test,context,bootstrapper,resolve,test,context,bootstrapper,bootstrap,context,bootstrap,context,class,test,class,bootstrap,context,get,test,class,class,clazz,null,try,clazz,resolve,explicit,test,context,bootstrapper,test,class,if,clazz,null,clazz,resolve,default,test,context,bootstrapper,test,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,test,context,bootstrapper,for,test,class,s,from,class,s,test,class,get,name,clazz,get,name,test,context,bootstrapper,test,context,bootstrapper,bean,utils,instantiate,class,clazz,test,context,bootstrapper,class,test,context,bootstrapper,set,bootstrap,context,bootstrap,context,return,test,context,bootstrapper,catch,illegal,state,exception,ex,throw,ex,catch,throwable,ex,throw,new,illegal,state,exception,could,not,load,test,context,bootstrapper,clazz,specify,bootstrap,with,s,value,attribute,or,make,the,default,bootstrapper,class,available,ex
BootstrapUtils -> static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext);1518167818;Resolve the {@link TestContextBootstrapper} type for the test class in the_supplied {@link BootstrapContext}, instantiate it, and provide it a reference_to the {@link BootstrapContext}._<p>If the {@link BootstrapWith @BootstrapWith} annotation is present on_the test class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type._Otherwise, either the_{@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} or the_{@link org.springframework.test.context.web.WebTestContextBootstrapper_WebTestContextBootstrapper} will be used, depending on the presence of_{@link org.springframework.test.context.web.WebAppConfiguration @WebAppConfiguration}._@param bootstrapContext the bootstrap context to use_@return a fully configured {@code TestContextBootstrapper};static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext) {_		Class<?> testClass = bootstrapContext.getTestClass()___		Class<?> clazz = null__		try {_			clazz = resolveExplicitTestContextBootstrapper(testClass)__			if (clazz == null) {_				clazz = resolveDefaultTestContextBootstrapper(testClass)__			}_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating TestContextBootstrapper for test class [%s] from class [%s]",_						testClass.getName(), clazz.getName()))__			}_			TestContextBootstrapper testContextBootstrapper =_					BeanUtils.instantiateClass(clazz, TestContextBootstrapper.class)__			testContextBootstrapper.setBootstrapContext(bootstrapContext)__			return testContextBootstrapper__		}_		catch (IllegalStateException ex) {_			throw ex__		}_		catch (Throwable ex) {_			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz +_					"]. Specify @BootstrapWith's 'value' attribute or make the default bootstrapper class available.",_					ex)__		}_	};resolve,the,link,test,context,bootstrapper,type,for,the,test,class,in,the,supplied,link,bootstrap,context,instantiate,it,and,provide,it,a,reference,to,the,link,bootstrap,context,p,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,either,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,or,the,link,org,springframework,test,context,web,web,test,context,bootstrapper,web,test,context,bootstrapper,will,be,used,depending,on,the,presence,of,link,org,springframework,test,context,web,web,app,configuration,web,app,configuration,param,bootstrap,context,the,bootstrap,context,to,use,return,a,fully,configured,code,test,context,bootstrapper;static,test,context,bootstrapper,resolve,test,context,bootstrapper,bootstrap,context,bootstrap,context,class,test,class,bootstrap,context,get,test,class,class,clazz,null,try,clazz,resolve,explicit,test,context,bootstrapper,test,class,if,clazz,null,clazz,resolve,default,test,context,bootstrapper,test,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,test,context,bootstrapper,for,test,class,s,from,class,s,test,class,get,name,clazz,get,name,test,context,bootstrapper,test,context,bootstrapper,bean,utils,instantiate,class,clazz,test,context,bootstrapper,class,test,context,bootstrapper,set,bootstrap,context,bootstrap,context,return,test,context,bootstrapper,catch,illegal,state,exception,ex,throw,ex,catch,throwable,ex,throw,new,illegal,state,exception,could,not,load,test,context,bootstrapper,clazz,specify,bootstrap,with,s,value,attribute,or,make,the,default,bootstrapper,class,available,ex
BootstrapUtils -> static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext);1534342625;Resolve the {@link TestContextBootstrapper} type for the test class in the_supplied {@link BootstrapContext}, instantiate it, and provide it a reference_to the {@link BootstrapContext}._<p>If the {@link BootstrapWith @BootstrapWith} annotation is present on_the test class, either directly or as a meta-annotation, then its_{@link BootstrapWith#value value} will be used as the bootstrapper type._Otherwise, either the_{@link org.springframework.test.context.support.DefaultTestContextBootstrapper_DefaultTestContextBootstrapper} or the_{@link org.springframework.test.context.web.WebTestContextBootstrapper_WebTestContextBootstrapper} will be used, depending on the presence of_{@link org.springframework.test.context.web.WebAppConfiguration @WebAppConfiguration}._@param bootstrapContext the bootstrap context to use_@return a fully configured {@code TestContextBootstrapper};static TestContextBootstrapper resolveTestContextBootstrapper(BootstrapContext bootstrapContext) {_		Class<?> testClass = bootstrapContext.getTestClass()___		Class<?> clazz = null__		try {_			clazz = resolveExplicitTestContextBootstrapper(testClass)__			if (clazz == null) {_				clazz = resolveDefaultTestContextBootstrapper(testClass)__			}_			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating TestContextBootstrapper for test class [%s] from class [%s]",_						testClass.getName(), clazz.getName()))__			}_			TestContextBootstrapper testContextBootstrapper =_					BeanUtils.instantiateClass(clazz, TestContextBootstrapper.class)__			testContextBootstrapper.setBootstrapContext(bootstrapContext)__			return testContextBootstrapper__		}_		catch (IllegalStateException ex) {_			throw ex__		}_		catch (Throwable ex) {_			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz +_					"]. Specify @BootstrapWith's 'value' attribute or make the default bootstrapper class available.",_					ex)__		}_	};resolve,the,link,test,context,bootstrapper,type,for,the,test,class,in,the,supplied,link,bootstrap,context,instantiate,it,and,provide,it,a,reference,to,the,link,bootstrap,context,p,if,the,link,bootstrap,with,bootstrap,with,annotation,is,present,on,the,test,class,either,directly,or,as,a,meta,annotation,then,its,link,bootstrap,with,value,value,will,be,used,as,the,bootstrapper,type,otherwise,either,the,link,org,springframework,test,context,support,default,test,context,bootstrapper,default,test,context,bootstrapper,or,the,link,org,springframework,test,context,web,web,test,context,bootstrapper,web,test,context,bootstrapper,will,be,used,depending,on,the,presence,of,link,org,springframework,test,context,web,web,app,configuration,web,app,configuration,param,bootstrap,context,the,bootstrap,context,to,use,return,a,fully,configured,code,test,context,bootstrapper;static,test,context,bootstrapper,resolve,test,context,bootstrapper,bootstrap,context,bootstrap,context,class,test,class,bootstrap,context,get,test,class,class,clazz,null,try,clazz,resolve,explicit,test,context,bootstrapper,test,class,if,clazz,null,clazz,resolve,default,test,context,bootstrapper,test,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,test,context,bootstrapper,for,test,class,s,from,class,s,test,class,get,name,clazz,get,name,test,context,bootstrapper,test,context,bootstrapper,bean,utils,instantiate,class,clazz,test,context,bootstrapper,class,test,context,bootstrapper,set,bootstrap,context,bootstrap,context,return,test,context,bootstrapper,catch,illegal,state,exception,ex,throw,ex,catch,throwable,ex,throw,new,illegal,state,exception,could,not,load,test,context,bootstrapper,clazz,specify,bootstrap,with,s,value,attribute,or,make,the,default,bootstrapper,class,available,ex
BootstrapUtils -> private static Class<?> resolveExplicitTestContextBootstrapper(Class<?> testClass);1457446795;@since 4.3;private static Class<?> resolveExplicitTestContextBootstrapper(Class<?> testClass) {_		MultiValueMap<String, Object> attributesMultiMap = AnnotatedElementUtils.getAllAnnotationAttributes(_				testClass, BootstrapWith.class.getName())__		List<Object> values = (attributesMultiMap == null ? null : attributesMultiMap.get(AnnotationUtils.VALUE))__		if (values == null) {_			return null__		}_		Assert.state(values.size() == 1, String.format("Configuration error: found multiple declarations of "_				+ "@BootstrapWith on test class [%s] with values %s", testClass.getName(), values))__		return (Class<?>) values.get(0)__	};since,4,3;private,static,class,resolve,explicit,test,context,bootstrapper,class,test,class,multi,value,map,string,object,attributes,multi,map,annotated,element,utils,get,all,annotation,attributes,test,class,bootstrap,with,class,get,name,list,object,values,attributes,multi,map,null,null,attributes,multi,map,get,annotation,utils,value,if,values,null,return,null,assert,state,values,size,1,string,format,configuration,error,found,multiple,declarations,of,bootstrap,with,on,test,class,s,with,values,s,test,class,get,name,values,return,class,values,get,0
BootstrapUtils -> private static Class<?> resolveExplicitTestContextBootstrapper(Class<?> testClass);1459842161;@since 4.3;private static Class<?> resolveExplicitTestContextBootstrapper(Class<?> testClass) {_		MultiValueMap<String, Object> attributesMultiMap =_				AnnotatedElementUtils.getAllAnnotationAttributes(testClass, BootstrapWith.class.getName())__		List<Object> values = (attributesMultiMap != null ? attributesMultiMap.get(AnnotationUtils.VALUE) : null)__		if (values == null) {_			return null__		}_		if (values.size() != 1) {_			throw new IllegalStateException(String.format("Configuration error: found multiple declarations of " +_					"@BootstrapWith on test class [%s] with values %s", testClass.getName(), values))__		}_		return (Class<?>) values.get(0)__	};since,4,3;private,static,class,resolve,explicit,test,context,bootstrapper,class,test,class,multi,value,map,string,object,attributes,multi,map,annotated,element,utils,get,all,annotation,attributes,test,class,bootstrap,with,class,get,name,list,object,values,attributes,multi,map,null,attributes,multi,map,get,annotation,utils,value,null,if,values,null,return,null,if,values,size,1,throw,new,illegal,state,exception,string,format,configuration,error,found,multiple,declarations,of,bootstrap,with,on,test,class,s,with,values,s,test,class,get,name,values,return,class,values,get,0
BootstrapUtils -> private static Class<?> resolveExplicitTestContextBootstrapper(Class<?> testClass);1459851441;@since 4.3;private static Class<?> resolveExplicitTestContextBootstrapper(Class<?> testClass) {_		MultiValueMap<String, Object> attributesMultiMap =_				AnnotatedElementUtils.getAllAnnotationAttributes(testClass, BootstrapWith.class.getName())__		List<Object> values = (attributesMultiMap != null ? attributesMultiMap.get(AnnotationUtils.VALUE) : null)__		if (values == null) {_			return null__		}_		if (values.size() != 1) {_			throw new IllegalStateException(String.format("Configuration error: found multiple declarations of " +_					"@BootstrapWith on test class [%s] with values %s", testClass.getName(), values))__		}_		return (Class<?>) values.get(0)__	};since,4,3;private,static,class,resolve,explicit,test,context,bootstrapper,class,test,class,multi,value,map,string,object,attributes,multi,map,annotated,element,utils,get,all,annotation,attributes,test,class,bootstrap,with,class,get,name,list,object,values,attributes,multi,map,null,attributes,multi,map,get,annotation,utils,value,null,if,values,null,return,null,if,values,size,1,throw,new,illegal,state,exception,string,format,configuration,error,found,multiple,declarations,of,bootstrap,with,on,test,class,s,with,values,s,test,class,get,name,values,return,class,values,get,0
BootstrapUtils -> private static Class<?> resolveExplicitTestContextBootstrapper(Class<?> testClass);1462470884;@since 4.3;private static Class<?> resolveExplicitTestContextBootstrapper(Class<?> testClass) {_		Set<BootstrapWith> annotations = AnnotatedElementUtils.findAllMergedAnnotations(testClass, BootstrapWith.class)__		if (annotations.size() < 1) {_			return null__		}_		if (annotations.size() > 1) {_			throw new IllegalStateException(String.format(_				"Configuration error: found multiple declarations of @BootstrapWith for test class [%s]: %s",_				testClass.getName(), annotations))__		}_		return annotations.iterator().next().value()__	};since,4,3;private,static,class,resolve,explicit,test,context,bootstrapper,class,test,class,set,bootstrap,with,annotations,annotated,element,utils,find,all,merged,annotations,test,class,bootstrap,with,class,if,annotations,size,1,return,null,if,annotations,size,1,throw,new,illegal,state,exception,string,format,configuration,error,found,multiple,declarations,of,bootstrap,with,for,test,class,s,s,test,class,get,name,annotations,return,annotations,iterator,next,value
BootstrapUtils -> @SuppressWarnings("unchecked") 	static BootstrapContext createBootstrapContext(Class<?> testClass);1429465455;Create the {@code BootstrapContext} for the specified {@linkplain Class test class}.__<p>Uses reflection to create a {@link org.springframework.test.context.support.DefaultBootstrapContext}_that uses a {@link org.springframework.test.context.support.DefaultCacheAwareContextLoaderDelegate}.__@param testClass the test class for which the bootstrap context should be created_@return a new {@code BootstrapContext}_ never {@code null};@SuppressWarnings("unchecked")_	static BootstrapContext createBootstrapContext(Class<?> testClass) {_		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = createCacheAwareContextLoaderDelegate()___		Class<? extends BootstrapContext> clazz = null__		try {_			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME,_				BootstrapUtils.class.getClassLoader())___			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(Class.class,_				CacheAwareContextLoaderDelegate.class)___			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating BootstrapContext using constructor [%s]", constructor))__			}_			return instantiateClass(constructor, testClass, cacheAwareContextLoaderDelegate)__		}_		catch (Throwable t) {_			throw new IllegalStateException("Could not load BootstrapContext [" + clazz + "]", t)__		}_	};create,the,code,bootstrap,context,for,the,specified,linkplain,class,test,class,p,uses,reflection,to,create,a,link,org,springframework,test,context,support,default,bootstrap,context,that,uses,a,link,org,springframework,test,context,support,default,cache,aware,context,loader,delegate,param,test,class,the,test,class,for,which,the,bootstrap,context,should,be,created,return,a,new,code,bootstrap,context,never,code,null;suppress,warnings,unchecked,static,bootstrap,context,create,bootstrap,context,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,create,cache,aware,context,loader,delegate,class,extends,bootstrap,context,clazz,null,try,clazz,class,extends,bootstrap,context,class,utils,for,name,bootstrap,utils,class,get,class,loader,constructor,extends,bootstrap,context,constructor,clazz,get,constructor,class,class,cache,aware,context,loader,delegate,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,bootstrap,context,using,constructor,s,constructor,return,instantiate,class,constructor,test,class,cache,aware,context,loader,delegate,catch,throwable,t,throw,new,illegal,state,exception,could,not,load,bootstrap,context,clazz,t
BootstrapUtils -> @SuppressWarnings("unchecked") 	static BootstrapContext createBootstrapContext(Class<?> testClass);1429559310;Create the {@code BootstrapContext} for the specified {@linkplain Class test class}.__<p>Uses reflection to create a {@link org.springframework.test.context.support.DefaultBootstrapContext}_that uses a {@link org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate}.__@param testClass the test class for which the bootstrap context should be created_@return a new {@code BootstrapContext}_ never {@code null};@SuppressWarnings("unchecked")_	static BootstrapContext createBootstrapContext(Class<?> testClass) {_		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = createCacheAwareContextLoaderDelegate()___		Class<? extends BootstrapContext> clazz = null__		try {_			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME,_				BootstrapUtils.class.getClassLoader())___			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(Class.class,_				CacheAwareContextLoaderDelegate.class)___			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating BootstrapContext using constructor [%s]", constructor))__			}_			return instantiateClass(constructor, testClass, cacheAwareContextLoaderDelegate)__		}_		catch (Throwable t) {_			throw new IllegalStateException("Could not load BootstrapContext [" + clazz + "]", t)__		}_	};create,the,code,bootstrap,context,for,the,specified,linkplain,class,test,class,p,uses,reflection,to,create,a,link,org,springframework,test,context,support,default,bootstrap,context,that,uses,a,link,org,springframework,test,context,cache,default,cache,aware,context,loader,delegate,param,test,class,the,test,class,for,which,the,bootstrap,context,should,be,created,return,a,new,code,bootstrap,context,never,code,null;suppress,warnings,unchecked,static,bootstrap,context,create,bootstrap,context,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,create,cache,aware,context,loader,delegate,class,extends,bootstrap,context,clazz,null,try,clazz,class,extends,bootstrap,context,class,utils,for,name,bootstrap,utils,class,get,class,loader,constructor,extends,bootstrap,context,constructor,clazz,get,constructor,class,class,cache,aware,context,loader,delegate,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,bootstrap,context,using,constructor,s,constructor,return,instantiate,class,constructor,test,class,cache,aware,context,loader,delegate,catch,throwable,t,throw,new,illegal,state,exception,could,not,load,bootstrap,context,clazz,t
BootstrapUtils -> @SuppressWarnings("unchecked") 	static BootstrapContext createBootstrapContext(Class<?> testClass);1430009887;Create the {@code BootstrapContext} for the specified {@linkplain Class test class}.__<p>Uses reflection to create a {@link org.springframework.test.context.support.DefaultBootstrapContext}_that uses a {@link org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate}.__@param testClass the test class for which the bootstrap context should be created_@return a new {@code BootstrapContext}_ never {@code null};@SuppressWarnings("unchecked")_	static BootstrapContext createBootstrapContext(Class<?> testClass) {_		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = createCacheAwareContextLoaderDelegate()___		Class<? extends BootstrapContext> clazz = null__		try {_			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME,_				BootstrapUtils.class.getClassLoader())___			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(Class.class,_				CacheAwareContextLoaderDelegate.class)___			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating BootstrapContext using constructor [%s]", constructor))__			}_			return instantiateClass(constructor, testClass, cacheAwareContextLoaderDelegate)__		}_		catch (Throwable t) {_			throw new IllegalStateException("Could not load BootstrapContext [" + clazz + "]", t)__		}_	};create,the,code,bootstrap,context,for,the,specified,linkplain,class,test,class,p,uses,reflection,to,create,a,link,org,springframework,test,context,support,default,bootstrap,context,that,uses,a,link,org,springframework,test,context,cache,default,cache,aware,context,loader,delegate,param,test,class,the,test,class,for,which,the,bootstrap,context,should,be,created,return,a,new,code,bootstrap,context,never,code,null;suppress,warnings,unchecked,static,bootstrap,context,create,bootstrap,context,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,create,cache,aware,context,loader,delegate,class,extends,bootstrap,context,clazz,null,try,clazz,class,extends,bootstrap,context,class,utils,for,name,bootstrap,utils,class,get,class,loader,constructor,extends,bootstrap,context,constructor,clazz,get,constructor,class,class,cache,aware,context,loader,delegate,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,bootstrap,context,using,constructor,s,constructor,return,instantiate,class,constructor,test,class,cache,aware,context,loader,delegate,catch,throwable,t,throw,new,illegal,state,exception,could,not,load,bootstrap,context,clazz,t
BootstrapUtils -> @SuppressWarnings("unchecked") 	static BootstrapContext createBootstrapContext(Class<?> testClass);1457446795;Create the {@code BootstrapContext} for the specified {@linkplain Class test class}.__<p>Uses reflection to create a {@link org.springframework.test.context.support.DefaultBootstrapContext}_that uses a {@link org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate}.__@param testClass the test class for which the bootstrap context should be created_@return a new {@code BootstrapContext}_ never {@code null};@SuppressWarnings("unchecked")_	static BootstrapContext createBootstrapContext(Class<?> testClass) {_		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = createCacheAwareContextLoaderDelegate()___		Class<? extends BootstrapContext> clazz = null__		try {_			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME,_				BootstrapUtils.class.getClassLoader())___			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(Class.class,_				CacheAwareContextLoaderDelegate.class)___			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating BootstrapContext using constructor [%s]", constructor))__			}_			return instantiateClass(constructor, testClass, cacheAwareContextLoaderDelegate)__		}_		catch (Throwable t) {_			throw new IllegalStateException("Could not load BootstrapContext [" + clazz + "]", t)__		}_	};create,the,code,bootstrap,context,for,the,specified,linkplain,class,test,class,p,uses,reflection,to,create,a,link,org,springframework,test,context,support,default,bootstrap,context,that,uses,a,link,org,springframework,test,context,cache,default,cache,aware,context,loader,delegate,param,test,class,the,test,class,for,which,the,bootstrap,context,should,be,created,return,a,new,code,bootstrap,context,never,code,null;suppress,warnings,unchecked,static,bootstrap,context,create,bootstrap,context,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,create,cache,aware,context,loader,delegate,class,extends,bootstrap,context,clazz,null,try,clazz,class,extends,bootstrap,context,class,utils,for,name,bootstrap,utils,class,get,class,loader,constructor,extends,bootstrap,context,constructor,clazz,get,constructor,class,class,cache,aware,context,loader,delegate,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,bootstrap,context,using,constructor,s,constructor,return,instantiate,class,constructor,test,class,cache,aware,context,loader,delegate,catch,throwable,t,throw,new,illegal,state,exception,could,not,load,bootstrap,context,clazz,t
BootstrapUtils -> @SuppressWarnings("unchecked") 	static BootstrapContext createBootstrapContext(Class<?> testClass);1459842161;Create the {@code BootstrapContext} for the specified {@linkplain Class test class}._<p>Uses reflection to create a {@link org.springframework.test.context.support.DefaultBootstrapContext}_that uses a {@link org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate}._@param testClass the test class for which the bootstrap context should be created_@return a new {@code BootstrapContext}_ never {@code null};@SuppressWarnings("unchecked")_	static BootstrapContext createBootstrapContext(Class<?> testClass) {_		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = createCacheAwareContextLoaderDelegate()__		Class<? extends BootstrapContext> clazz = null__		try {_			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(_					DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME, BootstrapUtils.class.getClassLoader())__			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(_					Class.class, CacheAwareContextLoaderDelegate.class)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating BootstrapContext using constructor [%s]", constructor))__			}_			return instantiateClass(constructor, testClass, cacheAwareContextLoaderDelegate)__		}_		catch (Throwable ex) {_			throw new IllegalStateException("Could not load BootstrapContext [" + clazz + "]", ex)__		}_	};create,the,code,bootstrap,context,for,the,specified,linkplain,class,test,class,p,uses,reflection,to,create,a,link,org,springframework,test,context,support,default,bootstrap,context,that,uses,a,link,org,springframework,test,context,cache,default,cache,aware,context,loader,delegate,param,test,class,the,test,class,for,which,the,bootstrap,context,should,be,created,return,a,new,code,bootstrap,context,never,code,null;suppress,warnings,unchecked,static,bootstrap,context,create,bootstrap,context,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,create,cache,aware,context,loader,delegate,class,extends,bootstrap,context,clazz,null,try,clazz,class,extends,bootstrap,context,class,utils,for,name,bootstrap,utils,class,get,class,loader,constructor,extends,bootstrap,context,constructor,clazz,get,constructor,class,class,cache,aware,context,loader,delegate,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,bootstrap,context,using,constructor,s,constructor,return,instantiate,class,constructor,test,class,cache,aware,context,loader,delegate,catch,throwable,ex,throw,new,illegal,state,exception,could,not,load,bootstrap,context,clazz,ex
BootstrapUtils -> @SuppressWarnings("unchecked") 	static BootstrapContext createBootstrapContext(Class<?> testClass);1459851441;Create the {@code BootstrapContext} for the specified {@linkplain Class test class}._<p>Uses reflection to create a {@link org.springframework.test.context.support.DefaultBootstrapContext}_that uses a {@link org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate}._@param testClass the test class for which the bootstrap context should be created_@return a new {@code BootstrapContext}_ never {@code null};@SuppressWarnings("unchecked")_	static BootstrapContext createBootstrapContext(Class<?> testClass) {_		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = createCacheAwareContextLoaderDelegate()__		Class<? extends BootstrapContext> clazz = null__		try {_			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(_					DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME, BootstrapUtils.class.getClassLoader())__			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(_					Class.class, CacheAwareContextLoaderDelegate.class)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating BootstrapContext using constructor [%s]", constructor))__			}_			return BeanUtils.instantiateClass(constructor, testClass, cacheAwareContextLoaderDelegate)__		}_		catch (Throwable ex) {_			throw new IllegalStateException("Could not load BootstrapContext [" + clazz + "]", ex)__		}_	};create,the,code,bootstrap,context,for,the,specified,linkplain,class,test,class,p,uses,reflection,to,create,a,link,org,springframework,test,context,support,default,bootstrap,context,that,uses,a,link,org,springframework,test,context,cache,default,cache,aware,context,loader,delegate,param,test,class,the,test,class,for,which,the,bootstrap,context,should,be,created,return,a,new,code,bootstrap,context,never,code,null;suppress,warnings,unchecked,static,bootstrap,context,create,bootstrap,context,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,create,cache,aware,context,loader,delegate,class,extends,bootstrap,context,clazz,null,try,clazz,class,extends,bootstrap,context,class,utils,for,name,bootstrap,utils,class,get,class,loader,constructor,extends,bootstrap,context,constructor,clazz,get,constructor,class,class,cache,aware,context,loader,delegate,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,bootstrap,context,using,constructor,s,constructor,return,bean,utils,instantiate,class,constructor,test,class,cache,aware,context,loader,delegate,catch,throwable,ex,throw,new,illegal,state,exception,could,not,load,bootstrap,context,clazz,ex
BootstrapUtils -> @SuppressWarnings("unchecked") 	static BootstrapContext createBootstrapContext(Class<?> testClass);1462470884;Create the {@code BootstrapContext} for the specified {@linkplain Class test class}._<p>Uses reflection to create a {@link org.springframework.test.context.support.DefaultBootstrapContext}_that uses a {@link org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate}._@param testClass the test class for which the bootstrap context should be created_@return a new {@code BootstrapContext}_ never {@code null};@SuppressWarnings("unchecked")_	static BootstrapContext createBootstrapContext(Class<?> testClass) {_		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = createCacheAwareContextLoaderDelegate()__		Class<? extends BootstrapContext> clazz = null__		try {_			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(_					DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME, BootstrapUtils.class.getClassLoader())__			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(_					Class.class, CacheAwareContextLoaderDelegate.class)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating BootstrapContext using constructor [%s]", constructor))__			}_			return BeanUtils.instantiateClass(constructor, testClass, cacheAwareContextLoaderDelegate)__		}_		catch (Throwable ex) {_			throw new IllegalStateException("Could not load BootstrapContext [" + clazz + "]", ex)__		}_	};create,the,code,bootstrap,context,for,the,specified,linkplain,class,test,class,p,uses,reflection,to,create,a,link,org,springframework,test,context,support,default,bootstrap,context,that,uses,a,link,org,springframework,test,context,cache,default,cache,aware,context,loader,delegate,param,test,class,the,test,class,for,which,the,bootstrap,context,should,be,created,return,a,new,code,bootstrap,context,never,code,null;suppress,warnings,unchecked,static,bootstrap,context,create,bootstrap,context,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,create,cache,aware,context,loader,delegate,class,extends,bootstrap,context,clazz,null,try,clazz,class,extends,bootstrap,context,class,utils,for,name,bootstrap,utils,class,get,class,loader,constructor,extends,bootstrap,context,constructor,clazz,get,constructor,class,class,cache,aware,context,loader,delegate,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,bootstrap,context,using,constructor,s,constructor,return,bean,utils,instantiate,class,constructor,test,class,cache,aware,context,loader,delegate,catch,throwable,ex,throw,new,illegal,state,exception,could,not,load,bootstrap,context,clazz,ex
BootstrapUtils -> @SuppressWarnings("unchecked") 	static BootstrapContext createBootstrapContext(Class<?> testClass);1465306936;Create the {@code BootstrapContext} for the specified {@linkplain Class test class}._<p>Uses reflection to create a {@link org.springframework.test.context.support.DefaultBootstrapContext}_that uses a {@link org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate}._@param testClass the test class for which the bootstrap context should be created_@return a new {@code BootstrapContext}_ never {@code null};@SuppressWarnings("unchecked")_	static BootstrapContext createBootstrapContext(Class<?> testClass) {_		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = createCacheAwareContextLoaderDelegate()__		Class<? extends BootstrapContext> clazz = null__		try {_			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(_					DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME, BootstrapUtils.class.getClassLoader())__			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(_					Class.class, CacheAwareContextLoaderDelegate.class)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating BootstrapContext using constructor [%s]", constructor))__			}_			return BeanUtils.instantiateClass(constructor, testClass, cacheAwareContextLoaderDelegate)__		}_		catch (Throwable ex) {_			throw new IllegalStateException("Could not load BootstrapContext [" + clazz + "]", ex)__		}_	};create,the,code,bootstrap,context,for,the,specified,linkplain,class,test,class,p,uses,reflection,to,create,a,link,org,springframework,test,context,support,default,bootstrap,context,that,uses,a,link,org,springframework,test,context,cache,default,cache,aware,context,loader,delegate,param,test,class,the,test,class,for,which,the,bootstrap,context,should,be,created,return,a,new,code,bootstrap,context,never,code,null;suppress,warnings,unchecked,static,bootstrap,context,create,bootstrap,context,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,create,cache,aware,context,loader,delegate,class,extends,bootstrap,context,clazz,null,try,clazz,class,extends,bootstrap,context,class,utils,for,name,bootstrap,utils,class,get,class,loader,constructor,extends,bootstrap,context,constructor,clazz,get,constructor,class,class,cache,aware,context,loader,delegate,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,bootstrap,context,using,constructor,s,constructor,return,bean,utils,instantiate,class,constructor,test,class,cache,aware,context,loader,delegate,catch,throwable,ex,throw,new,illegal,state,exception,could,not,load,bootstrap,context,clazz,ex
BootstrapUtils -> @SuppressWarnings("unchecked") 	static BootstrapContext createBootstrapContext(Class<?> testClass);1468334463;Create the {@code BootstrapContext} for the specified {@linkplain Class test class}._<p>Uses reflection to create a {@link org.springframework.test.context.support.DefaultBootstrapContext}_that uses a {@link org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate}._@param testClass the test class for which the bootstrap context should be created_@return a new {@code BootstrapContext}_ never {@code null};@SuppressWarnings("unchecked")_	static BootstrapContext createBootstrapContext(Class<?> testClass) {_		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = createCacheAwareContextLoaderDelegate()__		Class<? extends BootstrapContext> clazz = null__		try {_			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(_					DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME, BootstrapUtils.class.getClassLoader())__			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(_					Class.class, CacheAwareContextLoaderDelegate.class)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating BootstrapContext using constructor [%s]", constructor))__			}_			return BeanUtils.instantiateClass(constructor, testClass, cacheAwareContextLoaderDelegate)__		}_		catch (Throwable ex) {_			throw new IllegalStateException("Could not load BootstrapContext [" + clazz + "]", ex)__		}_	};create,the,code,bootstrap,context,for,the,specified,linkplain,class,test,class,p,uses,reflection,to,create,a,link,org,springframework,test,context,support,default,bootstrap,context,that,uses,a,link,org,springframework,test,context,cache,default,cache,aware,context,loader,delegate,param,test,class,the,test,class,for,which,the,bootstrap,context,should,be,created,return,a,new,code,bootstrap,context,never,code,null;suppress,warnings,unchecked,static,bootstrap,context,create,bootstrap,context,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,create,cache,aware,context,loader,delegate,class,extends,bootstrap,context,clazz,null,try,clazz,class,extends,bootstrap,context,class,utils,for,name,bootstrap,utils,class,get,class,loader,constructor,extends,bootstrap,context,constructor,clazz,get,constructor,class,class,cache,aware,context,loader,delegate,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,bootstrap,context,using,constructor,s,constructor,return,bean,utils,instantiate,class,constructor,test,class,cache,aware,context,loader,delegate,catch,throwable,ex,throw,new,illegal,state,exception,could,not,load,bootstrap,context,clazz,ex
BootstrapUtils -> @SuppressWarnings("unchecked") 	static BootstrapContext createBootstrapContext(Class<?> testClass);1495868221;Create the {@code BootstrapContext} for the specified {@linkplain Class test class}._<p>Uses reflection to create a {@link org.springframework.test.context.support.DefaultBootstrapContext}_that uses a {@link org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate}._@param testClass the test class for which the bootstrap context should be created_@return a new {@code BootstrapContext}_ never {@code null};@SuppressWarnings("unchecked")_	static BootstrapContext createBootstrapContext(Class<?> testClass) {_		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = createCacheAwareContextLoaderDelegate()__		Class<? extends BootstrapContext> clazz = null__		try {_			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(_					DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME, BootstrapUtils.class.getClassLoader())__			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(_					Class.class, CacheAwareContextLoaderDelegate.class)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating BootstrapContext using constructor [%s]", constructor))__			}_			return BeanUtils.instantiateClass(constructor, testClass, cacheAwareContextLoaderDelegate)__		}_		catch (Throwable ex) {_			throw new IllegalStateException("Could not load BootstrapContext [" + clazz + "]", ex)__		}_	};create,the,code,bootstrap,context,for,the,specified,linkplain,class,test,class,p,uses,reflection,to,create,a,link,org,springframework,test,context,support,default,bootstrap,context,that,uses,a,link,org,springframework,test,context,cache,default,cache,aware,context,loader,delegate,param,test,class,the,test,class,for,which,the,bootstrap,context,should,be,created,return,a,new,code,bootstrap,context,never,code,null;suppress,warnings,unchecked,static,bootstrap,context,create,bootstrap,context,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,create,cache,aware,context,loader,delegate,class,extends,bootstrap,context,clazz,null,try,clazz,class,extends,bootstrap,context,class,utils,for,name,bootstrap,utils,class,get,class,loader,constructor,extends,bootstrap,context,constructor,clazz,get,constructor,class,class,cache,aware,context,loader,delegate,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,bootstrap,context,using,constructor,s,constructor,return,bean,utils,instantiate,class,constructor,test,class,cache,aware,context,loader,delegate,catch,throwable,ex,throw,new,illegal,state,exception,could,not,load,bootstrap,context,clazz,ex
BootstrapUtils -> @SuppressWarnings("unchecked") 	static BootstrapContext createBootstrapContext(Class<?> testClass);1518167526;Create the {@code BootstrapContext} for the specified {@linkplain Class test class}._<p>Uses reflection to create a {@link org.springframework.test.context.support.DefaultBootstrapContext}_that uses a {@link org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate}._@param testClass the test class for which the bootstrap context should be created_@return a new {@code BootstrapContext}_ never {@code null};@SuppressWarnings("unchecked")_	static BootstrapContext createBootstrapContext(Class<?> testClass) {_		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = createCacheAwareContextLoaderDelegate()__		Class<? extends BootstrapContext> clazz = null__		try {_			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(_					DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME, BootstrapUtils.class.getClassLoader())__			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(_					Class.class, CacheAwareContextLoaderDelegate.class)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating BootstrapContext using constructor [%s]", constructor))__			}_			return BeanUtils.instantiateClass(constructor, testClass, cacheAwareContextLoaderDelegate)__		}_		catch (Throwable ex) {_			throw new IllegalStateException("Could not load BootstrapContext [" + clazz + "]", ex)__		}_	};create,the,code,bootstrap,context,for,the,specified,linkplain,class,test,class,p,uses,reflection,to,create,a,link,org,springframework,test,context,support,default,bootstrap,context,that,uses,a,link,org,springframework,test,context,cache,default,cache,aware,context,loader,delegate,param,test,class,the,test,class,for,which,the,bootstrap,context,should,be,created,return,a,new,code,bootstrap,context,never,code,null;suppress,warnings,unchecked,static,bootstrap,context,create,bootstrap,context,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,create,cache,aware,context,loader,delegate,class,extends,bootstrap,context,clazz,null,try,clazz,class,extends,bootstrap,context,class,utils,for,name,bootstrap,utils,class,get,class,loader,constructor,extends,bootstrap,context,constructor,clazz,get,constructor,class,class,cache,aware,context,loader,delegate,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,bootstrap,context,using,constructor,s,constructor,return,bean,utils,instantiate,class,constructor,test,class,cache,aware,context,loader,delegate,catch,throwable,ex,throw,new,illegal,state,exception,could,not,load,bootstrap,context,clazz,ex
BootstrapUtils -> @SuppressWarnings("unchecked") 	static BootstrapContext createBootstrapContext(Class<?> testClass);1518167818;Create the {@code BootstrapContext} for the specified {@linkplain Class test class}._<p>Uses reflection to create a {@link org.springframework.test.context.support.DefaultBootstrapContext}_that uses a {@link org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate}._@param testClass the test class for which the bootstrap context should be created_@return a new {@code BootstrapContext}_ never {@code null};@SuppressWarnings("unchecked")_	static BootstrapContext createBootstrapContext(Class<?> testClass) {_		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = createCacheAwareContextLoaderDelegate()__		Class<? extends BootstrapContext> clazz = null__		try {_			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(_					DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME, BootstrapUtils.class.getClassLoader())__			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(_					Class.class, CacheAwareContextLoaderDelegate.class)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating BootstrapContext using constructor [%s]", constructor))__			}_			return BeanUtils.instantiateClass(constructor, testClass, cacheAwareContextLoaderDelegate)__		}_		catch (Throwable ex) {_			throw new IllegalStateException("Could not load BootstrapContext [" + clazz + "]", ex)__		}_	};create,the,code,bootstrap,context,for,the,specified,linkplain,class,test,class,p,uses,reflection,to,create,a,link,org,springframework,test,context,support,default,bootstrap,context,that,uses,a,link,org,springframework,test,context,cache,default,cache,aware,context,loader,delegate,param,test,class,the,test,class,for,which,the,bootstrap,context,should,be,created,return,a,new,code,bootstrap,context,never,code,null;suppress,warnings,unchecked,static,bootstrap,context,create,bootstrap,context,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,create,cache,aware,context,loader,delegate,class,extends,bootstrap,context,clazz,null,try,clazz,class,extends,bootstrap,context,class,utils,for,name,bootstrap,utils,class,get,class,loader,constructor,extends,bootstrap,context,constructor,clazz,get,constructor,class,class,cache,aware,context,loader,delegate,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,bootstrap,context,using,constructor,s,constructor,return,bean,utils,instantiate,class,constructor,test,class,cache,aware,context,loader,delegate,catch,throwable,ex,throw,new,illegal,state,exception,could,not,load,bootstrap,context,clazz,ex
BootstrapUtils -> @SuppressWarnings("unchecked") 	static BootstrapContext createBootstrapContext(Class<?> testClass);1534342625;Create the {@code BootstrapContext} for the specified {@linkplain Class test class}._<p>Uses reflection to create a {@link org.springframework.test.context.support.DefaultBootstrapContext}_that uses a {@link org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate}._@param testClass the test class for which the bootstrap context should be created_@return a new {@code BootstrapContext}_ never {@code null};@SuppressWarnings("unchecked")_	static BootstrapContext createBootstrapContext(Class<?> testClass) {_		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = createCacheAwareContextLoaderDelegate()__		Class<? extends BootstrapContext> clazz = null__		try {_			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(_					DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME, BootstrapUtils.class.getClassLoader())__			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(_					Class.class, CacheAwareContextLoaderDelegate.class)__			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Instantiating BootstrapContext using constructor [%s]", constructor))__			}_			return BeanUtils.instantiateClass(constructor, testClass, cacheAwareContextLoaderDelegate)__		}_		catch (Throwable ex) {_			throw new IllegalStateException("Could not load BootstrapContext [" + clazz + "]", ex)__		}_	};create,the,code,bootstrap,context,for,the,specified,linkplain,class,test,class,p,uses,reflection,to,create,a,link,org,springframework,test,context,support,default,bootstrap,context,that,uses,a,link,org,springframework,test,context,cache,default,cache,aware,context,loader,delegate,param,test,class,the,test,class,for,which,the,bootstrap,context,should,be,created,return,a,new,code,bootstrap,context,never,code,null;suppress,warnings,unchecked,static,bootstrap,context,create,bootstrap,context,class,test,class,cache,aware,context,loader,delegate,cache,aware,context,loader,delegate,create,cache,aware,context,loader,delegate,class,extends,bootstrap,context,clazz,null,try,clazz,class,extends,bootstrap,context,class,utils,for,name,bootstrap,utils,class,get,class,loader,constructor,extends,bootstrap,context,constructor,clazz,get,constructor,class,class,cache,aware,context,loader,delegate,class,if,logger,is,debug,enabled,logger,debug,string,format,instantiating,bootstrap,context,using,constructor,s,constructor,return,bean,utils,instantiate,class,constructor,test,class,cache,aware,context,loader,delegate,catch,throwable,ex,throw,new,illegal,state,exception,could,not,load,bootstrap,context,clazz,ex
BootstrapUtils -> private static Class<?> resolveDefaultTestContextBootstrapper(Class<?> testClass) throws Exception;1457446795;@since 4.3;private static Class<?> resolveDefaultTestContextBootstrapper(Class<?> testClass) throws Exception {_		ClassLoader classLoader = BootstrapUtils.class.getClassLoader()__		if (AnnotatedElementUtils.isAnnotated(testClass, WEB_APP_CONFIGURATION_ANNOTATION_CLASS_NAME)) {_			return ClassUtils.forName(DEFAULT_WEB_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME, classLoader)__		}_		return ClassUtils.forName(DEFAULT_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME, classLoader)__	};since,4,3;private,static,class,resolve,default,test,context,bootstrapper,class,test,class,throws,exception,class,loader,class,loader,bootstrap,utils,class,get,class,loader,if,annotated,element,utils,is,annotated,test,class,return,class,utils,for,name,class,loader,return,class,utils,for,name,class,loader
BootstrapUtils -> private static Class<?> resolveDefaultTestContextBootstrapper(Class<?> testClass) throws Exception;1459842161;@since 4.3;private static Class<?> resolveDefaultTestContextBootstrapper(Class<?> testClass) throws Exception {_		ClassLoader classLoader = BootstrapUtils.class.getClassLoader()__		if (AnnotatedElementUtils.isAnnotated(testClass, WEB_APP_CONFIGURATION_ANNOTATION_CLASS_NAME)) {_			return ClassUtils.forName(DEFAULT_WEB_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME, classLoader)__		}_		return ClassUtils.forName(DEFAULT_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME, classLoader)__	};since,4,3;private,static,class,resolve,default,test,context,bootstrapper,class,test,class,throws,exception,class,loader,class,loader,bootstrap,utils,class,get,class,loader,if,annotated,element,utils,is,annotated,test,class,return,class,utils,for,name,class,loader,return,class,utils,for,name,class,loader
BootstrapUtils -> private static Class<?> resolveDefaultTestContextBootstrapper(Class<?> testClass) throws Exception;1459851441;@since 4.3;private static Class<?> resolveDefaultTestContextBootstrapper(Class<?> testClass) throws Exception {_		ClassLoader classLoader = BootstrapUtils.class.getClassLoader()__		if (AnnotatedElementUtils.isAnnotated(testClass, WEB_APP_CONFIGURATION_ANNOTATION_CLASS_NAME)) {_			return ClassUtils.forName(DEFAULT_WEB_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME, classLoader)__		}_		return ClassUtils.forName(DEFAULT_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME, classLoader)__	};since,4,3;private,static,class,resolve,default,test,context,bootstrapper,class,test,class,throws,exception,class,loader,class,loader,bootstrap,utils,class,get,class,loader,if,annotated,element,utils,is,annotated,test,class,return,class,utils,for,name,class,loader,return,class,utils,for,name,class,loader
BootstrapUtils -> private static Class<?> resolveDefaultTestContextBootstrapper(Class<?> testClass) throws Exception;1462470884;@since 4.3;private static Class<?> resolveDefaultTestContextBootstrapper(Class<?> testClass) throws Exception {_		ClassLoader classLoader = BootstrapUtils.class.getClassLoader()__		AnnotationAttributes attributes = AnnotatedElementUtils.findMergedAnnotationAttributes(testClass,_			WEB_APP_CONFIGURATION_ANNOTATION_CLASS_NAME, false, false)__		if (attributes != null) {_			return ClassUtils.forName(DEFAULT_WEB_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME, classLoader)__		}_		return ClassUtils.forName(DEFAULT_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME, classLoader)__	};since,4,3;private,static,class,resolve,default,test,context,bootstrapper,class,test,class,throws,exception,class,loader,class,loader,bootstrap,utils,class,get,class,loader,annotation,attributes,attributes,annotated,element,utils,find,merged,annotation,attributes,test,class,false,false,if,attributes,null,return,class,utils,for,name,class,loader,return,class,utils,for,name,class,loader
