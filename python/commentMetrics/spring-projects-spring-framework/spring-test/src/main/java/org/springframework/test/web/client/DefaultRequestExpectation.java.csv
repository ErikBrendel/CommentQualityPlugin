commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected RequestCount getRequestCount() {     return this.requestCount. }
false;protected;0;3;;protected List<RequestMatcher> getRequestMatchers() {     return this.requestMatchers. }
false;protected;0;4;;@Nullable protected ResponseCreator getResponseCreator() {     return this.responseCreator. }
false;public;1;6;;@Override public ResponseActions andExpect(RequestMatcher requestMatcher) {     Assert.notNull(requestMatcher, "RequestMatcher is required").     this.requestMatchers.add(requestMatcher).     return this. }
false;public;1;5;;@Override public void andRespond(ResponseCreator responseCreator) {     Assert.notNull(responseCreator, "ResponseCreator is required").     this.responseCreator = responseCreator. }
false;public;1;6;;@Override public void match(ClientHttpRequest request) throws IOException {     for (RequestMatcher matcher : getRequestMatchers()) {         matcher.match(request).     } }
true;public;1;6;/**  * Note that as of 5.0.3, the creation of the response, which may block  * intentionally, is separated from request count tracking, and this  * method no longer increments the count transparently. Instead  * {@link #incrementAndValidate()} must be invoked independently.  */ ;/**  * Note that as of 5.0.3, the creation of the response, which may block  * intentionally, is separated from request count tracking, and this  * method no longer increments the count transparently. Instead  * {@link #incrementAndValidate()} must be invoked independently.  */ @Override public ClientHttpResponse createResponse(@Nullable ClientHttpRequest request) throws IOException {     ResponseCreator responseCreator = getResponseCreator().     Assert.state(responseCreator != null, "createResponse() called before ResponseCreator was set").     return responseCreator.createResponse(request). }
false;public;0;4;;@Override public boolean hasRemainingCount() {     return getRequestCount().hasRemainingCount(). }
false;public;0;4;;@Override public void incrementAndValidate() {     getRequestCount().incrementAndValidate(). }
false;public;0;4;;@Override public boolean isSatisfied() {     return getRequestCount().isSatisfied(). }
false;public;0;3;;public ExpectedCount getExpectedCount() {     return this.expectedCount. }
false;public;0;3;;public int getMatchedRequestCount() {     return this.matchedRequestCount. }
false;public;0;6;;public void incrementAndValidate() {     this.matchedRequestCount++.     if (getMatchedRequestCount() > getExpectedCount().getMaxCount()) {         throw new AssertionError("No more calls expected.").     } }
false;public;0;3;;public boolean hasRemainingCount() {     return (getMatchedRequestCount() < getExpectedCount().getMaxCount()). }
false;public;0;4;;public boolean isSatisfied() {     // Only validate min count since max count is checked on every request...     return (getMatchedRequestCount() >= getExpectedCount().getMinCount()). }
