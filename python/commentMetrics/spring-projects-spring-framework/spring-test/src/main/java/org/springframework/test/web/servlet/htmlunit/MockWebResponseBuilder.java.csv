commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public WebResponse build() throws IOException {     WebResponseData webResponseData = webResponseData().     long endTime = System.currentTimeMillis().     return new WebResponse(webResponseData, this.webRequest, endTime - this.startTime). }
false;private;0;7;;private WebResponseData webResponseData() throws IOException {     List<NameValuePair> responseHeaders = responseHeaders().     int statusCode = (this.response.getRedirectedUrl() != null ? HttpStatus.MOVED_PERMANENTLY.value() : this.response.getStatus()).     String statusMessage = statusMessage(statusCode).     return new WebResponseData(this.response.getContentAsByteArray(), statusCode, statusMessage, responseHeaders). }
false;private;1;15;;private String statusMessage(int statusCode) {     String errorMessage = this.response.getErrorMessage().     if (StringUtils.hasText(errorMessage)) {         return errorMessage.     }     try {         return HttpStatus.valueOf(statusCode).getReasonPhrase().     } catch (IllegalArgumentException ex) {     // ignore     }     return DEFAULT_STATUS_MESSAGE. }
false;private;0;15;;private List<NameValuePair> responseHeaders() {     Collection<String> headerNames = this.response.getHeaderNames().     List<NameValuePair> responseHeaders = new ArrayList<>(headerNames.size()).     for (String headerName : headerNames) {         List<Object> headerValues = this.response.getHeaderValues(headerName).         for (Object value : headerValues) {             responseHeaders.add(new NameValuePair(headerName, String.valueOf(value))).         }     }     String location = this.response.getRedirectedUrl().     if (location != null) {         responseHeaders.add(new NameValuePair("Location", location)).     }     return responseHeaders. }
