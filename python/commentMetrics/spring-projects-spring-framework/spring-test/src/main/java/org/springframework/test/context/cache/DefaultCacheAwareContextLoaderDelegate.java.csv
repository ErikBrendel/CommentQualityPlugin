commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;3;/**  * Get the {@link ContextCache} used by this context loader delegate.  */ ;/**  * Get the {@link ContextCache} used by this context loader delegate.  */ protected ContextCache getContextCache() {     return this.contextCache. }
true;protected;1;22;/**  * Load the {@code ApplicationContext} for the supplied merged context configuration.  * <p>Supports both the {@link SmartContextLoader} and {@link ContextLoader} SPIs.  * @throws Exception if an error occurs while loading the application context  */ ;/**  * Load the {@code ApplicationContext} for the supplied merged context configuration.  * <p>Supports both the {@link SmartContextLoader} and {@link ContextLoader} SPIs.  * @throws Exception if an error occurs while loading the application context  */ protected ApplicationContext loadContextInternal(MergedContextConfiguration mergedContextConfiguration) throws Exception {     ContextLoader contextLoader = mergedContextConfiguration.getContextLoader().     Assert.notNull(contextLoader, "Cannot load an ApplicationContext with a NULL 'contextLoader'. " + "Consider annotating your test class with @ContextConfiguration or @ContextHierarchy.").     ApplicationContext applicationContext.     if (contextLoader instanceof SmartContextLoader) {         SmartContextLoader smartContextLoader = (SmartContextLoader) contextLoader.         applicationContext = smartContextLoader.loadContext(mergedContextConfiguration).     } else {         String[] locations = mergedContextConfiguration.getLocations().         Assert.notNull(locations, "Cannot load an ApplicationContext with a NULL 'locations' array. " + "Consider annotating your test class with @ContextConfiguration or @ContextHierarchy.").         applicationContext = contextLoader.loadContext(locations).     }     return applicationContext. }
false;public;1;29;;@Override public ApplicationContext loadContext(MergedContextConfiguration mergedContextConfiguration) {     synchronized (this.contextCache) {         ApplicationContext context = this.contextCache.get(mergedContextConfiguration).         if (context == null) {             try {                 context = loadContextInternal(mergedContextConfiguration).                 if (logger.isDebugEnabled()) {                     logger.debug(String.format("Storing ApplicationContext in cache under key [%s]", mergedContextConfiguration)).                 }                 this.contextCache.put(mergedContextConfiguration, context).             } catch (Exception ex) {                 throw new IllegalStateException("Failed to load ApplicationContext", ex).             }         } else {             if (logger.isDebugEnabled()) {                 logger.debug(String.format("Retrieved ApplicationContext from cache with key [%s]", mergedContextConfiguration)).             }         }         this.contextCache.logStatistics().         return context.     } }
false;public;2;6;;@Override public void closeContext(MergedContextConfiguration mergedContextConfiguration, @Nullable HierarchyMode hierarchyMode) {     synchronized (this.contextCache) {         this.contextCache.remove(mergedContextConfiguration, hierarchyMode).     } }
