commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;8;;public final <T extends B> T addFilters(Filter... filters) {     Assert.notNull(filters, "filters cannot be null").     for (Filter f : filters) {         Assert.notNull(f, "filters cannot contain null values").         this.filters.add(f).     }     return self(). }
false;public,final;2;9;;public final <T extends B> T addFilter(Filter filter, String... urlPatterns) {     Assert.notNull(filter, "filter cannot be null").     Assert.notNull(urlPatterns, "urlPatterns cannot be null").     if (urlPatterns.length > 0) {         filter = new PatternMappingFilterProxy(filter, urlPatterns).     }     this.filters.add(filter).     return self(). }
false;public,final;1;4;;public final <T extends B> T defaultRequest(RequestBuilder requestBuilder) {     this.defaultRequestBuilder = requestBuilder.     return self(). }
false;public,final;1;4;;public final <T extends B> T alwaysExpect(ResultMatcher resultMatcher) {     this.globalResultMatchers.add(resultMatcher).     return self(). }
false;public,final;1;4;;public final <T extends B> T alwaysDo(ResultHandler resultHandler) {     this.globalResultHandlers.add(resultHandler).     return self(). }
false;public,final;1;4;;public final <T extends B> T addDispatcherServletCustomizer(DispatcherServletCustomizer customizer) {     this.dispatcherServletCustomizers.add(customizer).     return self(). }
false;public,final;1;4;;public final <T extends B> T dispatchOptions(boolean dispatchOptions) {     return addDispatcherServletCustomizer(dispatcherServlet -> dispatcherServlet.setDispatchOptionsRequest(dispatchOptions)). }
false;public,final;1;5;;public final <T extends B> T apply(MockMvcConfigurer configurer) {     configurer.afterConfigurerAdded(this).     this.configurers.add(configurer).     return self(). }
false;protected;0;4;;@SuppressWarnings("unchecked") protected <T extends B> T self() {     return (T) this. }
true;public,final;0;24;/**  * Build a {@link org.springframework.test.web.servlet.MockMvc} instance.  */ ;/**  * Build a {@link org.springframework.test.web.servlet.MockMvc} instance.  */ @Override @SuppressWarnings("rawtypes") public final MockMvc build() {     WebApplicationContext wac = initWebAppContext().     ServletContext servletContext = wac.getServletContext().     MockServletConfig mockServletConfig = new MockServletConfig(servletContext).     for (MockMvcConfigurer configurer : this.configurers) {         RequestPostProcessor processor = configurer.beforeMockMvcCreated(this, wac).         if (processor != null) {             if (this.defaultRequestBuilder == null) {                 this.defaultRequestBuilder = MockMvcRequestBuilders.get("/").             }             if (this.defaultRequestBuilder instanceof ConfigurableSmartRequestBuilder) {                 ((ConfigurableSmartRequestBuilder) this.defaultRequestBuilder).with(processor).             }         }     }     Filter[] filterArray = this.filters.toArray(new Filter[0]).     return super.createMockMvc(filterArray, mockServletConfig, wac, this.defaultRequestBuilder, this.globalResultMatchers, this.globalResultHandlers, this.dispatcherServletCustomizers). }
true;protected,abstract;0;1;/**  * A method to obtain the {@code WebApplicationContext} to be passed to the  * {@code DispatcherServlet}. Invoked from {@link #build()} before the  * {@link MockMvc} instance is created.  */ ;/**  * A method to obtain the {@code WebApplicationContext} to be passed to the  * {@code DispatcherServlet}. Invoked from {@link #build()} before the  * {@link MockMvc} instance is created.  */ protected abstract WebApplicationContext initWebAppContext().
