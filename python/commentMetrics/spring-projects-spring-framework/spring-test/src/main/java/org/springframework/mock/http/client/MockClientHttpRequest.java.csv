commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setMethod(HttpMethod httpMethod) {     this.httpMethod = httpMethod. }
false;public;0;4;;@Override public HttpMethod getMethod() {     return this.httpMethod. }
false;public;0;4;;@Override public String getMethodValue() {     return this.httpMethod.name(). }
false;public;1;3;;public void setURI(URI uri) {     this.uri = uri. }
false;public;0;4;;@Override public URI getURI() {     return this.uri. }
false;public;1;3;;public void setResponse(ClientHttpResponse clientHttpResponse) {     this.clientHttpResponse = clientHttpResponse. }
false;public;0;3;;public boolean isExecuted() {     return this.executed. }
true;public,final;0;5;/**  * Set the {@link #isExecuted() executed} flag to {@code true} and return the  * configured {@link #setResponse(ClientHttpResponse) response}.  * @see #executeInternal()  */ ;/**  * Set the {@link #isExecuted() executed} flag to {@code true} and return the  * configured {@link #setResponse(ClientHttpResponse) response}.  * @see #executeInternal()  */ @Override public final ClientHttpResponse execute() throws IOException {     this.executed = true.     return executeInternal(). }
true;protected;0;4;/**  * The default implementation returns the configured  * {@link #setResponse(ClientHttpResponse) response}.  * <p>Override this method to execute the request and provide a response,  * potentially different than the configured response.  */ ;/**  * The default implementation returns the configured  * {@link #setResponse(ClientHttpResponse) response}.  * <p>Override this method to execute the request and provide a response,  * potentially different than the configured response.  */ protected ClientHttpResponse executeInternal() throws IOException {     Assert.state(this.clientHttpResponse != null, "No ClientHttpResponse").     return this.clientHttpResponse. }
false;public;0;13;;@Override public String toString() {     StringBuilder sb = new StringBuilder().     sb.append(this.httpMethod).     sb.append(" ").append(this.uri).     if (!getHeaders().isEmpty()) {         sb.append(", headers: ").append(getHeaders()).     }     if (sb.length() == 0) {         sb.append("Not yet initialized").     }     return sb.toString(). }
