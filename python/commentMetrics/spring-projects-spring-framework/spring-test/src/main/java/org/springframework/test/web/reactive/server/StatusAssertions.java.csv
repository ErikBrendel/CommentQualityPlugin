commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Assert the response status as an {@link HttpStatus}.  */ ;/**  * Assert the response status as an {@link HttpStatus}.  */ public WebTestClient.ResponseSpec isEqualTo(HttpStatus status) {     return isEqualTo(status.value()). }
true;public;1;5;/**  * Assert the response status as an integer.  */ ;/**  * Assert the response status as an integer.  */ public WebTestClient.ResponseSpec isEqualTo(int status) {     int actual = this.exchangeResult.getStatus().value().     this.exchangeResult.assertWithDiagnostics(() -> AssertionErrors.assertEquals("Status", status, actual)).     return this.responseSpec. }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.OK} (200).  */ ;/**  * Assert the response status code is {@code HttpStatus.OK} (200).  */ public WebTestClient.ResponseSpec isOk() {     return assertStatusAndReturn(HttpStatus.OK). }
true;public;0;4;/**  * Assert the response status code is {@code HttpStatus.CREATED} (201).  */ ;/**  * Assert the response status code is {@code HttpStatus.CREATED} (201).  */ public WebTestClient.ResponseSpec isCreated() {     HttpStatus expected = HttpStatus.CREATED.     return assertStatusAndReturn(expected). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.ACCEPTED} (202).  */ ;/**  * Assert the response status code is {@code HttpStatus.ACCEPTED} (202).  */ public WebTestClient.ResponseSpec isAccepted() {     return assertStatusAndReturn(HttpStatus.ACCEPTED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.NO_CONTENT} (204).  */ ;/**  * Assert the response status code is {@code HttpStatus.NO_CONTENT} (204).  */ public WebTestClient.ResponseSpec isNoContent() {     return assertStatusAndReturn(HttpStatus.NO_CONTENT). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.FOUND} (302).  */ ;/**  * Assert the response status code is {@code HttpStatus.FOUND} (302).  */ public WebTestClient.ResponseSpec isFound() {     return assertStatusAndReturn(HttpStatus.FOUND). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.SEE_OTHER} (303).  */ ;/**  * Assert the response status code is {@code HttpStatus.SEE_OTHER} (303).  */ public WebTestClient.ResponseSpec isSeeOther() {     return assertStatusAndReturn(HttpStatus.SEE_OTHER). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.NOT_MODIFIED} (304).  */ ;/**  * Assert the response status code is {@code HttpStatus.NOT_MODIFIED} (304).  */ public WebTestClient.ResponseSpec isNotModified() {     return assertStatusAndReturn(HttpStatus.NOT_MODIFIED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.TEMPORARY_REDIRECT} (307).  */ ;/**  * Assert the response status code is {@code HttpStatus.TEMPORARY_REDIRECT} (307).  */ public WebTestClient.ResponseSpec isTemporaryRedirect() {     return assertStatusAndReturn(HttpStatus.TEMPORARY_REDIRECT). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.PERMANENT_REDIRECT} (308).  */ ;/**  * Assert the response status code is {@code HttpStatus.PERMANENT_REDIRECT} (308).  */ public WebTestClient.ResponseSpec isPermanentRedirect() {     return assertStatusAndReturn(HttpStatus.PERMANENT_REDIRECT). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.BAD_REQUEST} (400).  */ ;/**  * Assert the response status code is {@code HttpStatus.BAD_REQUEST} (400).  */ public WebTestClient.ResponseSpec isBadRequest() {     return assertStatusAndReturn(HttpStatus.BAD_REQUEST). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.UNAUTHORIZED} (401).  */ ;/**  * Assert the response status code is {@code HttpStatus.UNAUTHORIZED} (401).  */ public WebTestClient.ResponseSpec isUnauthorized() {     return assertStatusAndReturn(HttpStatus.UNAUTHORIZED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.FORBIDDEN} (403).  * @since 5.0.2  */ ;/**  * Assert the response status code is {@code HttpStatus.FORBIDDEN} (403).  * @since 5.0.2  */ public WebTestClient.ResponseSpec isForbidden() {     return assertStatusAndReturn(HttpStatus.FORBIDDEN). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.NOT_FOUND} (404).  */ ;/**  * Assert the response status code is {@code HttpStatus.NOT_FOUND} (404).  */ public WebTestClient.ResponseSpec isNotFound() {     return assertStatusAndReturn(HttpStatus.NOT_FOUND). }
true;public;1;6;/**  * Assert the response error message.  */ ;/**  * Assert the response error message.  */ public WebTestClient.ResponseSpec reasonEquals(String reason) {     String actual = this.exchangeResult.getStatus().getReasonPhrase().     String message = "Response status reason".     this.exchangeResult.assertWithDiagnostics(() -> AssertionErrors.assertEquals(message, reason, actual)).     return this.responseSpec. }
true;public;0;3;/**  * Assert the response status code is in the 1xx range.  */ ;/**  * Assert the response status code is in the 1xx range.  */ public WebTestClient.ResponseSpec is1xxInformational() {     return assertSeriesAndReturn(HttpStatus.Series.INFORMATIONAL). }
true;public;0;3;/**  * Assert the response status code is in the 2xx range.  */ ;/**  * Assert the response status code is in the 2xx range.  */ public WebTestClient.ResponseSpec is2xxSuccessful() {     return assertSeriesAndReturn(HttpStatus.Series.SUCCESSFUL). }
true;public;0;3;/**  * Assert the response status code is in the 3xx range.  */ ;/**  * Assert the response status code is in the 3xx range.  */ public WebTestClient.ResponseSpec is3xxRedirection() {     return assertSeriesAndReturn(HttpStatus.Series.REDIRECTION). }
true;public;0;3;/**  * Assert the response status code is in the 4xx range.  */ ;/**  * Assert the response status code is in the 4xx range.  */ public WebTestClient.ResponseSpec is4xxClientError() {     return assertSeriesAndReturn(HttpStatus.Series.CLIENT_ERROR). }
true;public;0;4;/**  * Assert the response status code is in the 5xx range.  */ ;/**  * Assert the response status code is in the 5xx range.  */ public WebTestClient.ResponseSpec is5xxServerError() {     HttpStatus.Series expected = HttpStatus.Series.SERVER_ERROR.     return assertSeriesAndReturn(expected). }
true;public;1;5;/**  * Match the response status value with a Hamcrest matcher.  * @param matcher the matcher to use  * @since 5.1  */ ;/**  * Match the response status value with a Hamcrest matcher.  * @param matcher the matcher to use  * @since 5.1  */ public WebTestClient.ResponseSpec value(Matcher<Integer> matcher) {     int value = this.exchangeResult.getStatus().value().     this.exchangeResult.assertWithDiagnostics(() -> MatcherAssert.assertThat("Response status", value, matcher)).     return this.responseSpec. }
true;public;1;5;/**  * Match the response status value with a Hamcrest matcher.  * @param consumer the matcher to use  * @since 5.1  */ ;/**  * Match the response status value with a Hamcrest matcher.  * @param consumer the matcher to use  * @since 5.1  */ public WebTestClient.ResponseSpec value(Consumer<Integer> consumer) {     int value = this.exchangeResult.getStatus().value().     this.exchangeResult.assertWithDiagnostics(() -> consumer.accept(value)).     return this.responseSpec. }
false;private;1;5;;private WebTestClient.ResponseSpec assertStatusAndReturn(HttpStatus expected) {     HttpStatus actual = this.exchangeResult.getStatus().     this.exchangeResult.assertWithDiagnostics(() -> AssertionErrors.assertEquals("Status", expected, actual)).     return this.responseSpec. }
false;private;1;8;;private WebTestClient.ResponseSpec assertSeriesAndReturn(HttpStatus.Series expected) {     HttpStatus status = this.exchangeResult.getStatus().     this.exchangeResult.assertWithDiagnostics(() -> {         String message = "Range for response status value " + status.         AssertionErrors.assertEquals(message, expected, status.series()).     }).     return this.responseSpec. }
