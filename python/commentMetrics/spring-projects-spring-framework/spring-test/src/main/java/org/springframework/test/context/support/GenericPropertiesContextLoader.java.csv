commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;4;/**  * Creates a new {@link PropertiesBeanDefinitionReader}.  * @return a new PropertiesBeanDefinitionReader  * @see PropertiesBeanDefinitionReader  */ ;/**  * Creates a new {@link PropertiesBeanDefinitionReader}.  * @return a new PropertiesBeanDefinitionReader  * @see PropertiesBeanDefinitionReader  */ @Override protected BeanDefinitionReader createBeanDefinitionReader(final GenericApplicationContext context) {     return new PropertiesBeanDefinitionReader(context). }
true;protected;0;4;/**  * Returns &quot.{@code -context.properties}&quot..  */ ;/**  * Returns &quot.{@code -context.properties}&quot..  */ @Override protected String getResourceSuffix() {     return "-context.properties". }
true;protected;1;11;/**  * Ensure that the supplied {@link MergedContextConfiguration} does not  * contain {@link MergedContextConfiguration#getClasses() classes}.  * @since 4.0.4  * @see AbstractGenericContextLoader#validateMergedContextConfiguration  */ ;/**  * Ensure that the supplied {@link MergedContextConfiguration} does not  * contain {@link MergedContextConfiguration#getClasses() classes}.  * @since 4.0.4  * @see AbstractGenericContextLoader#validateMergedContextConfiguration  */ @Override protected void validateMergedContextConfiguration(MergedContextConfiguration mergedConfig) {     if (mergedConfig.hasClasses()) {         String msg = String.format("Test class [%s] has been configured with @ContextConfiguration's 'classes' attribute %s, " + "but %s does not support annotated classes.", mergedConfig.getTestClass().getName(), ObjectUtils.nullSafeToString(mergedConfig.getClasses()), getClass().getSimpleName()).         logger.error(msg).         throw new IllegalStateException(msg).     } }
