# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1328020251;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1356735495;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1357119239;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1363208506;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1368482696;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1411165756;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1426267150;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1467730834;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1468334463;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1468948866;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1476521730;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1495868221;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1496955179;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1498780456;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1518770299;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1530174524;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1530174524;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public void bind(String name, Object obj);1542748004;Bind the given object under the given name, for all naming contexts_that this context builder will generate._@param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")_@param obj the object to bind (e.g. a DataSource implementation);public void bind(String name, Object obj) {_		if (logger.isInfoEnabled()) {_			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]")__		}_		this.boundObjects.put(name, obj)__	};bind,the,given,object,under,the,given,name,for,all,naming,contexts,that,this,context,builder,will,generate,param,name,the,jndi,name,of,the,object,e,g,java,comp,env,jdbc,myds,param,obj,the,object,to,bind,e,g,a,data,source,implementation;public,void,bind,string,name,object,obj,if,logger,is,info,enabled,logger,info,static,jndi,binding,name,obj,this,bound,objects,put,name,obj
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder getCurrentContextBuilder();1328020251;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or <code>null</code> if none;public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,code,if,none;public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder getCurrentContextBuilder();1356735495;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or {@code null} if none;public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,if,none;public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder getCurrentContextBuilder();1357119239;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or {@code null} if none;public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,if,none;public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder getCurrentContextBuilder();1363208506;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or {@code null} if none;public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,if,none;public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder getCurrentContextBuilder();1368482696;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or {@code null} if none;public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,if,none;public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder getCurrentContextBuilder();1411165756;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or {@code null} if none;public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,if,none;public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder getCurrentContextBuilder();1426267150;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or {@code null} if none;public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,if,none;public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder getCurrentContextBuilder();1467730834;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or {@code null} if none;public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,if,none;public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder getCurrentContextBuilder();1468334463;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or {@code null} if none;public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,if,none;public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder getCurrentContextBuilder();1468948866;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or {@code null} if none;public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,if,none;public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder getCurrentContextBuilder();1476521730;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or {@code null} if none;public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,if,none;public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> @Override 	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment);1356735495;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;@Override_	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass = null__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) icfClass.newInstance()__				}_				catch (Throwable ex) {_					IllegalStateException ise =_							new IllegalStateException("Cannot instantiate specified InitialContextFactory: " + icf)__					ise.initCause(ex)__					throw ise__				}_			}_		}__		_		return new InitialContextFactory() {_			@Override_			@SuppressWarnings("unchecked")_			public Context getInitialContext(Hashtable<?,?> environment) {_				return new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment)__			}_		}__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;override,public,initial,context,factory,create,initial,context,factory,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,null,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,icf,class,new,instance,catch,throwable,ex,illegal,state,exception,ise,new,illegal,state,exception,cannot,instantiate,specified,initial,context,factory,icf,ise,init,cause,ex,throw,ise,return,new,initial,context,factory,override,suppress,warnings,unchecked,public,context,get,initial,context,hashtable,environment,return,new,simple,naming,context,bound,objects,hashtable,string,object,environment
SimpleNamingContextBuilder -> @Override 	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment);1368482696;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;@Override_	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass = null__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) icfClass.newInstance()__				}_				catch (Throwable ex) {_					IllegalStateException ise =_							new IllegalStateException("Cannot instantiate specified InitialContextFactory: " + icf)__					ise.initCause(ex)__					throw ise__				}_			}_		}__		_		return new InitialContextFactory() {_			@Override_			@SuppressWarnings("unchecked")_			public Context getInitialContext(Hashtable<?,?> environment) {_				return new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment)__			}_		}__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;override,public,initial,context,factory,create,initial,context,factory,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,null,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,icf,class,new,instance,catch,throwable,ex,illegal,state,exception,ise,new,illegal,state,exception,cannot,instantiate,specified,initial,context,factory,icf,ise,init,cause,ex,throw,ise,return,new,initial,context,factory,override,suppress,warnings,unchecked,public,context,get,initial,context,hashtable,environment,return,new,simple,naming,context,bound,objects,hashtable,string,object,environment
SimpleNamingContextBuilder -> @Override 	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment);1411165756;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;@Override_	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) icfClass.newInstance()__				}_				catch (Throwable ex) {_					throw new IllegalStateException("Cannot instantiate specified InitialContextFactory: " + icf, ex)__				}_			}_		}__		_		return new InitialContextFactory() {_			@Override_			@SuppressWarnings("unchecked")_			public Context getInitialContext(Hashtable<?,?> environment) {_				return new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment)__			}_		}__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;override,public,initial,context,factory,create,initial,context,factory,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,icf,class,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,cannot,instantiate,specified,initial,context,factory,icf,ex,return,new,initial,context,factory,override,suppress,warnings,unchecked,public,context,get,initial,context,hashtable,environment,return,new,simple,naming,context,bound,objects,hashtable,string,object,environment
SimpleNamingContextBuilder -> @Override 	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment);1426267150;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;@Override_	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) icfClass.newInstance()__				}_				catch (Throwable ex) {_					throw new IllegalStateException("Cannot instantiate specified InitialContextFactory: " + icf, ex)__				}_			}_		}__		_		return new InitialContextFactory() {_			@Override_			@SuppressWarnings("unchecked")_			public Context getInitialContext(Hashtable<?,?> environment) {_				return new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment)__			}_		}__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;override,public,initial,context,factory,create,initial,context,factory,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,icf,class,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,cannot,instantiate,specified,initial,context,factory,icf,ex,return,new,initial,context,factory,override,suppress,warnings,unchecked,public,context,get,initial,context,hashtable,environment,return,new,simple,naming,context,bound,objects,hashtable,string,object,environment
SimpleNamingContextBuilder -> @Override 	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment);1467730834;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;@Override_	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) icfClass.newInstance()__				}_				catch (Throwable ex) {_					throw new IllegalStateException("Cannot instantiate specified InitialContextFactory: " + icf, ex)__				}_			}_		}__		_		return new InitialContextFactory() {_			@Override_			@SuppressWarnings("unchecked")_			public Context getInitialContext(Hashtable<?,?> environment) {_				return new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment)__			}_		}__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;override,public,initial,context,factory,create,initial,context,factory,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,icf,class,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,cannot,instantiate,specified,initial,context,factory,icf,ex,return,new,initial,context,factory,override,suppress,warnings,unchecked,public,context,get,initial,context,hashtable,environment,return,new,simple,naming,context,bound,objects,hashtable,string,object,environment
SimpleNamingContextBuilder -> @Override 	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment);1468334463;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;@Override_	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) icfClass.newInstance()__				}_				catch (Throwable ex) {_					throw new IllegalStateException("Cannot instantiate specified InitialContextFactory: " + icf, ex)__				}_			}_		}__		_		return new InitialContextFactory() {_			@Override_			@SuppressWarnings("unchecked")_			public Context getInitialContext(Hashtable<?,?> environment) {_				return new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment)__			}_		}__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;override,public,initial,context,factory,create,initial,context,factory,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,icf,class,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,cannot,instantiate,specified,initial,context,factory,icf,ex,return,new,initial,context,factory,override,suppress,warnings,unchecked,public,context,get,initial,context,hashtable,environment,return,new,simple,naming,context,bound,objects,hashtable,string,object,environment
SimpleNamingContextBuilder -> @Override 	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment);1468948866;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;@Override_	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) ReflectionUtils.accessibleConstructor(icfClass).newInstance()__				}_				catch (Throwable ex) {_					throw new IllegalStateException("Unable to instantiate specified InitialContextFactory: " + icf, ex)__				}_			}_		}__		_		return new InitialContextFactory() {_			@Override_			@SuppressWarnings("unchecked")_			public Context getInitialContext(Hashtable<?,?> environment) {_				return new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment)__			}_		}__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;override,public,initial,context,factory,create,initial,context,factory,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,reflection,utils,accessible,constructor,icf,class,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,unable,to,instantiate,specified,initial,context,factory,icf,ex,return,new,initial,context,factory,override,suppress,warnings,unchecked,public,context,get,initial,context,hashtable,environment,return,new,simple,naming,context,bound,objects,hashtable,string,object,environment
SimpleNamingContextBuilder -> @Override 	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment);1476521730;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;@Override_	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) ReflectionUtils.accessibleConstructor(icfClass).newInstance()__				}_				catch (Throwable ex) {_					throw new IllegalStateException("Unable to instantiate specified InitialContextFactory: " + icf, ex)__				}_			}_		}__		_		return new InitialContextFactory() {_			@Override_			@SuppressWarnings("unchecked")_			public Context getInitialContext(Hashtable<?,?> environment) {_				return new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment)__			}_		}__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;override,public,initial,context,factory,create,initial,context,factory,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,reflection,utils,accessible,constructor,icf,class,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,unable,to,instantiate,specified,initial,context,factory,icf,ex,return,new,initial,context,factory,override,suppress,warnings,unchecked,public,context,get,initial,context,hashtable,environment,return,new,simple,naming,context,bound,objects,hashtable,string,object,environment
SimpleNamingContextBuilder -> @Override 	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment);1495868221;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;@Override_	public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) ReflectionUtils.accessibleConstructor(icfClass).newInstance()__				}_				catch (Throwable ex) {_					throw new IllegalStateException("Unable to instantiate specified InitialContextFactory: " + icf, ex)__				}_			}_		}__		_		return new InitialContextFactory() {_			@Override_			@SuppressWarnings("unchecked")_			public Context getInitialContext(Hashtable<?,?> environment) {_				return new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment)__			}_		}__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;override,public,initial,context,factory,create,initial,context,factory,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,reflection,utils,accessible,constructor,icf,class,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,unable,to,instantiate,specified,initial,context,factory,icf,ex,return,new,initial,context,factory,override,suppress,warnings,unchecked,public,context,get,initial,context,hashtable,environment,return,new,simple,naming,context,bound,objects,hashtable,string,object,environment
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1328020251;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activate_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		if (activated != null) {_			_			activated.clear()__		}_		else {_			_			SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return activated__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activate,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,if,activated,null,activated,clear,else,simple,naming,context,builder,builder,new,simple,naming,context,builder,builder,activate,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1356735495;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activate_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		if (activated != null) {_			_			activated.clear()__		}_		else {_			_			SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return activated__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activate,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,if,activated,null,activated,clear,else,simple,naming,context,builder,builder,new,simple,naming,context,builder,builder,activate,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1357119239;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activate_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		if (activated != null) {_			_			activated.clear()__		}_		else {_			_			SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return activated__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activate,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,if,activated,null,activated,clear,else,simple,naming,context,builder,builder,new,simple,naming,context,builder,builder,activate,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1363208506;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activate_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		if (activated != null) {_			_			activated.clear()__		}_		else {_			_			SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return activated__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activate,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,if,activated,null,activated,clear,else,simple,naming,context,builder,builder,new,simple,naming,context,builder,builder,activate,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1368482696;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activate_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		if (activated != null) {_			_			activated.clear()__		}_		else {_			_			SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return activated__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activate,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,if,activated,null,activated,clear,else,simple,naming,context,builder,builder,new,simple,naming,context,builder,builder,activate,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1411165756;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activate_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		if (activated != null) {_			_			activated.clear()__		}_		else {_			_			SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return activated__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activate,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,if,activated,null,activated,clear,else,simple,naming,context,builder,builder,new,simple,naming,context,builder,builder,activate,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1426267150;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activate_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		if (activated != null) {_			_			activated.clear()__		}_		else {_			_			SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return activated__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activate,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,if,activated,null,activated,clear,else,simple,naming,context,builder,builder,new,simple,naming,context,builder,builder,activate,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1467730834;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activate_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		if (activated != null) {_			_			activated.clear()__		}_		else {_			_			SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return activated__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activate,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,if,activated,null,activated,clear,else,simple,naming,context,builder,builder,new,simple,naming,context,builder,builder,activate,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1468334463;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activate_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		if (activated != null) {_			_			activated.clear()__		}_		else {_			_			SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return activated__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activate,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,if,activated,null,activated,clear,else,simple,naming,context,builder,builder,new,simple,naming,context,builder,builder,activate,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1468948866;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activate_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		if (activated != null) {_			_			activated.clear()__		}_		else {_			_			SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return activated__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activate,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,if,activated,null,activated,clear,else,simple,naming,context,builder,builder,new,simple,naming,context,builder,builder,activate,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1476521730;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activate_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		if (activated != null) {_			_			activated.clear()__		}_		else {_			_			SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return activated__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activate,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,if,activated,null,activated,clear,else,simple,naming,context,builder,builder,new,simple,naming,context,builder,builder,activate,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1495868221;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activate_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		if (activated != null) {_			_			activated.clear()__		}_		else {_			_			SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return activated__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activate,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,if,activated,null,activated,clear,else,simple,naming,context,builder,builder,new,simple,naming,context,builder,builder,activate,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1496955179;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activate_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		if (activated != null) {_			_			activated.clear()__		}_		else {_			_			SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return activated__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activate,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,if,activated,null,activated,clear,else,simple,naming,context,builder,builder,new,simple,naming,context,builder,builder,activate,return,activated
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1498780456;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activate_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		SimpleNamingContextBuilder builder = activated__		if (builder != null) {_			_			builder.clear()__		}_		else {_			_			builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return builder__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activate,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,simple,naming,context,builder,builder,activated,if,builder,null,builder,clear,else,builder,new,simple,naming,context,builder,builder,activate,return,builder
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1518770299;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activate_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		SimpleNamingContextBuilder builder = activated__		if (builder != null) {_			_			builder.clear()__		}_		else {_			_			builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return builder__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activate,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,simple,naming,context,builder,builder,activated,if,builder,null,builder,clear,else,builder,new,simple,naming,context,builder,builder,activate,return,builder
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1530174524;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activate_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		SimpleNamingContextBuilder builder = activated__		if (builder != null) {_			_			builder.clear()__		}_		else {_			_			builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return builder__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activate,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,simple,naming,context,builder,builder,activated,if,builder,null,builder,clear,else,builder,new,simple,naming,context,builder,builder,activate,return,builder
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1530174524;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activate_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		SimpleNamingContextBuilder builder = activated__		if (builder != null) {_			_			builder.clear()__		}_		else {_			_			builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return builder__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activate,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,simple,naming,context,builder,builder,activated,if,builder,null,builder,clear,else,builder,new,simple,naming,context,builder,builder,activate,return,builder
SimpleNamingContextBuilder -> public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException;1542748004;If no SimpleNamingContextBuilder is already configuring JNDI,_create and activate one. Otherwise take the existing activated_SimpleNamingContextBuilder, clear it and return it._<p>This is mainly intended for test suites that want to_reinitialize JNDI bindings from scratch repeatedly._@return an empty SimpleNamingContextBuilder that can be used_to control JNDI bindings;public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {_		SimpleNamingContextBuilder builder = activated__		if (builder != null) {_			_			builder.clear()__		}_		else {_			_			builder = new SimpleNamingContextBuilder()__			_			builder.activate()__		}_		return builder__	};if,no,simple,naming,context,builder,is,already,configuring,jndi,create,and,activate,one,otherwise,take,the,existing,activated,simple,naming,context,builder,clear,it,and,return,it,p,this,is,mainly,intended,for,test,suites,that,want,to,reinitialize,jndi,bindings,from,scratch,repeatedly,return,an,empty,simple,naming,context,builder,that,can,be,used,to,control,jndi,bindings;public,static,simple,naming,context,builder,empty,activated,context,builder,throws,naming,exception,simple,naming,context,builder,builder,activated,if,builder,null,builder,clear,else,builder,new,simple,naming,context,builder,builder,activate,return,builder
SimpleNamingContextBuilder -> public void clear();1328020251;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public void clear();1356735495;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public void clear();1357119239;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public void clear();1363208506;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public void clear();1368482696;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public void clear();1411165756;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public void clear();1426267150;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public void clear();1467730834;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public void clear();1468334463;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public void clear();1468948866;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public void clear();1476521730;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public void clear();1495868221;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public void clear();1496955179;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public void clear();1498780456;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public void clear();1518770299;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public void clear();1530174524;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public void clear();1530174524;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public void clear();1542748004;Clear all bindings in this context builder, while keeping it active.;public void clear() {_		this.boundObjects.clear()__	};clear,all,bindings,in,this,context,builder,while,keeping,it,active;public,void,clear,this,bound,objects,clear
SimpleNamingContextBuilder -> public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment);1328020251;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass = null__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) icfClass.newInstance()__				}_				catch (Throwable ex) {_					IllegalStateException ise =_							new IllegalStateException("Cannot instantiate specified InitialContextFactory: " + icf)__					ise.initCause(ex)__					throw ise__				}_			}_		}__		_		return new InitialContextFactory() {_			@SuppressWarnings("unchecked")_			public Context getInitialContext(Hashtable<?,?> environment) {_				return new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment)__			}_		}__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;public,initial,context,factory,create,initial,context,factory,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,null,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,icf,class,new,instance,catch,throwable,ex,illegal,state,exception,ise,new,illegal,state,exception,cannot,instantiate,specified,initial,context,factory,icf,ise,init,cause,ex,throw,ise,return,new,initial,context,factory,suppress,warnings,unchecked,public,context,get,initial,context,hashtable,environment,return,new,simple,naming,context,bound,objects,hashtable,string,object,environment
SimpleNamingContextBuilder -> public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment);1357119239;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass = null__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) icfClass.newInstance()__				}_				catch (Throwable ex) {_					IllegalStateException ise =_							new IllegalStateException("Cannot instantiate specified InitialContextFactory: " + icf)__					ise.initCause(ex)__					throw ise__				}_			}_		}__		_		return new InitialContextFactory() {_			@SuppressWarnings("unchecked")_			public Context getInitialContext(Hashtable<?,?> environment) {_				return new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment)__			}_		}__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;public,initial,context,factory,create,initial,context,factory,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,null,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,icf,class,new,instance,catch,throwable,ex,illegal,state,exception,ise,new,illegal,state,exception,cannot,instantiate,specified,initial,context,factory,icf,ise,init,cause,ex,throw,ise,return,new,initial,context,factory,suppress,warnings,unchecked,public,context,get,initial,context,hashtable,environment,return,new,simple,naming,context,bound,objects,hashtable,string,object,environment
SimpleNamingContextBuilder -> public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment);1363208506;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;public InitialContextFactory createInitialContextFactory(Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass = null__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) icfClass.newInstance()__				}_				catch (Throwable ex) {_					IllegalStateException ise =_							new IllegalStateException("Cannot instantiate specified InitialContextFactory: " + icf)__					ise.initCause(ex)__					throw ise__				}_			}_		}__		_		return new InitialContextFactory() {_			@SuppressWarnings("unchecked")_			public Context getInitialContext(Hashtable<?,?> environment) {_				return new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment)__			}_		}__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;public,initial,context,factory,create,initial,context,factory,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,null,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,icf,class,new,instance,catch,throwable,ex,illegal,state,exception,ise,new,illegal,state,exception,cannot,instantiate,specified,initial,context,factory,icf,ise,init,cause,ex,throw,ise,return,new,initial,context,factory,suppress,warnings,unchecked,public,context,get,initial,context,hashtable,environment,return,new,simple,naming,context,bound,objects,hashtable,string,object,environment
SimpleNamingContextBuilder -> @Nullable 	public static SimpleNamingContextBuilder getCurrentContextBuilder();1495868221;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or {@code null} if none;@Nullable_	public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,if,none;nullable,public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> @Nullable 	public static SimpleNamingContextBuilder getCurrentContextBuilder();1496955179;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or {@code null} if none;@Nullable_	public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,if,none;nullable,public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> @Nullable 	public static SimpleNamingContextBuilder getCurrentContextBuilder();1498780456;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or {@code null} if none;@Nullable_	public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,if,none;nullable,public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> @Nullable 	public static SimpleNamingContextBuilder getCurrentContextBuilder();1518770299;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or {@code null} if none;@Nullable_	public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,if,none;nullable,public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> @Nullable 	public static SimpleNamingContextBuilder getCurrentContextBuilder();1530174524;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or {@code null} if none;@Nullable_	public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,if,none;nullable,public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> @Nullable 	public static SimpleNamingContextBuilder getCurrentContextBuilder();1530174524;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or {@code null} if none;@Nullable_	public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,if,none;nullable,public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> @Nullable 	public static SimpleNamingContextBuilder getCurrentContextBuilder();1542748004;Checks if a SimpleNamingContextBuilder is active._@return the current SimpleNamingContextBuilder instance,_or {@code null} if none;@Nullable_	public static SimpleNamingContextBuilder getCurrentContextBuilder() {_		return activated__	};checks,if,a,simple,naming,context,builder,is,active,return,the,current,simple,naming,context,builder,instance,or,code,null,if,none;nullable,public,static,simple,naming,context,builder,get,current,context,builder,return,activated
SimpleNamingContextBuilder -> @Override 	@SuppressWarnings("unchecked") 	public InitialContextFactory createInitialContextFactory(@Nullable Hashtable<?,?> environment);1518770299;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;@Override_	@SuppressWarnings("unchecked")_	public InitialContextFactory createInitialContextFactory(@Nullable Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) ReflectionUtils.accessibleConstructor(icfClass).newInstance()__				}_				catch (Throwable ex) {_					throw new IllegalStateException("Unable to instantiate specified InitialContextFactory: " + icf, ex)__				}_			}_		}__		_		return environment1 -> new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment1)__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;override,suppress,warnings,unchecked,public,initial,context,factory,create,initial,context,factory,nullable,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,reflection,utils,accessible,constructor,icf,class,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,unable,to,instantiate,specified,initial,context,factory,icf,ex,return,environment1,new,simple,naming,context,bound,objects,hashtable,string,object,environment1
SimpleNamingContextBuilder -> @Override 	@SuppressWarnings("unchecked") 	public InitialContextFactory createInitialContextFactory(@Nullable Hashtable<?,?> environment);1530174524;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;@Override_	@SuppressWarnings("unchecked")_	public InitialContextFactory createInitialContextFactory(@Nullable Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) ReflectionUtils.accessibleConstructor(icfClass).newInstance()__				}_				catch (Throwable ex) {_					throw new IllegalStateException("Unable to instantiate specified InitialContextFactory: " + icf, ex)__				}_			}_		}__		_		return environment1 -> new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment1)__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;override,suppress,warnings,unchecked,public,initial,context,factory,create,initial,context,factory,nullable,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,reflection,utils,accessible,constructor,icf,class,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,unable,to,instantiate,specified,initial,context,factory,icf,ex,return,environment1,new,simple,naming,context,bound,objects,hashtable,string,object,environment1
SimpleNamingContextBuilder -> @Override 	@SuppressWarnings("unchecked") 	public InitialContextFactory createInitialContextFactory(@Nullable Hashtable<?,?> environment);1530174524;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;@Override_	@SuppressWarnings("unchecked")_	public InitialContextFactory createInitialContextFactory(@Nullable Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) ReflectionUtils.accessibleConstructor(icfClass).newInstance()__				}_				catch (Throwable ex) {_					throw new IllegalStateException("Unable to instantiate specified InitialContextFactory: " + icf, ex)__				}_			}_		}__		_		return environment1 -> new SimpleNamingContext("", this.boundObjects, (Hashtable<String, Object>) environment1)__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;override,suppress,warnings,unchecked,public,initial,context,factory,create,initial,context,factory,nullable,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,reflection,utils,accessible,constructor,icf,class,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,unable,to,instantiate,specified,initial,context,factory,icf,ex,return,environment1,new,simple,naming,context,this,bound,objects,hashtable,string,object,environment1
SimpleNamingContextBuilder -> @Override 	@SuppressWarnings("unchecked") 	public InitialContextFactory createInitialContextFactory(@Nullable Hashtable<?,?> environment);1542748004;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;@Override_	@SuppressWarnings("unchecked")_	public InitialContextFactory createInitialContextFactory(@Nullable Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) ReflectionUtils.accessibleConstructor(icfClass).newInstance()__				}_				catch (Throwable ex) {_					throw new IllegalStateException("Unable to instantiate specified InitialContextFactory: " + icf, ex)__				}_			}_		}__		_		return env -> new SimpleNamingContext("", this.boundObjects, (Hashtable<String, Object>) env)__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;override,suppress,warnings,unchecked,public,initial,context,factory,create,initial,context,factory,nullable,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,reflection,utils,accessible,constructor,icf,class,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,unable,to,instantiate,specified,initial,context,factory,icf,ex,return,env,new,simple,naming,context,this,bound,objects,hashtable,string,object,env
SimpleNamingContextBuilder -> @Override 	public InitialContextFactory createInitialContextFactory(@Nullable Hashtable<?,?> environment);1496955179;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;@Override_	public InitialContextFactory createInitialContextFactory(@Nullable Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) ReflectionUtils.accessibleConstructor(icfClass).newInstance()__				}_				catch (Throwable ex) {_					throw new IllegalStateException("Unable to instantiate specified InitialContextFactory: " + icf, ex)__				}_			}_		}__		_		return new InitialContextFactory() {_			@Override_			@SuppressWarnings("unchecked")_			public Context getInitialContext(Hashtable<?,?> environment) {_				return new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment)__			}_		}__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;override,public,initial,context,factory,create,initial,context,factory,nullable,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,reflection,utils,accessible,constructor,icf,class,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,unable,to,instantiate,specified,initial,context,factory,icf,ex,return,new,initial,context,factory,override,suppress,warnings,unchecked,public,context,get,initial,context,hashtable,environment,return,new,simple,naming,context,bound,objects,hashtable,string,object,environment
SimpleNamingContextBuilder -> @Override 	public InitialContextFactory createInitialContextFactory(@Nullable Hashtable<?,?> environment);1498780456;Simple InitialContextFactoryBuilder implementation,_creating a new SimpleNamingContext instance._@see SimpleNamingContext;@Override_	public InitialContextFactory createInitialContextFactory(@Nullable Hashtable<?,?> environment) {_		if (activated == null && environment != null) {_			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY)__			if (icf != null) {_				Class<?> icfClass__				if (icf instanceof Class) {_					icfClass = (Class<?>) icf__				}_				else if (icf instanceof String) {_					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader())__				}_				else {_					throw new IllegalArgumentException("Invalid value type for environment key [" +_							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName())__				}_				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {_					throw new IllegalArgumentException(_							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf)__				}_				try {_					return (InitialContextFactory) ReflectionUtils.accessibleConstructor(icfClass).newInstance()__				}_				catch (Throwable ex) {_					throw new IllegalStateException("Unable to instantiate specified InitialContextFactory: " + icf, ex)__				}_			}_		}__		_		return new InitialContextFactory() {_			@Override_			@SuppressWarnings("unchecked")_			public Context getInitialContext(Hashtable<?,?> environment) {_				return new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment)__			}_		}__	};simple,initial,context,factory,builder,implementation,creating,a,new,simple,naming,context,instance,see,simple,naming,context;override,public,initial,context,factory,create,initial,context,factory,nullable,hashtable,environment,if,activated,null,environment,null,object,icf,environment,get,context,if,icf,null,class,icf,class,if,icf,instanceof,class,icf,class,class,icf,else,if,icf,instanceof,string,icf,class,class,utils,resolve,class,name,string,icf,get,class,get,class,loader,else,throw,new,illegal,argument,exception,invalid,value,type,for,environment,key,context,icf,get,class,get,name,if,initial,context,factory,class,is,assignable,from,icf,class,throw,new,illegal,argument,exception,specified,class,does,not,implement,initial,context,factory,class,get,name,icf,try,return,initial,context,factory,reflection,utils,accessible,constructor,icf,class,new,instance,catch,throwable,ex,throw,new,illegal,state,exception,unable,to,instantiate,specified,initial,context,factory,icf,ex,return,new,initial,context,factory,override,suppress,warnings,unchecked,public,context,get,initial,context,hashtable,environment,return,new,simple,naming,context,bound,objects,hashtable,string,object,environment
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1328020251;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, <code>new InitialContext()</code> will always_return a context from this factory. Use the <code>emptyActivatedContextBuilder()</code>_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				if (NamingManager.hasInitialContextFactoryBuilder()) {_					throw new IllegalStateException(_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				}_				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,code,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,code,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,if,naming,manager,has,initial,context,factory,builder,throw,new,illegal,state,exception,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1356735495;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, {@code new InitialContext()} will always_return a context from this factory. Use the {@code emptyActivatedContextBuilder()}_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				if (NamingManager.hasInitialContextFactoryBuilder()) {_					throw new IllegalStateException(_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				}_				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,if,naming,manager,has,initial,context,factory,builder,throw,new,illegal,state,exception,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1357119239;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, {@code new InitialContext()} will always_return a context from this factory. Use the {@code emptyActivatedContextBuilder()}_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				if (NamingManager.hasInitialContextFactoryBuilder()) {_					throw new IllegalStateException(_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				}_				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,if,naming,manager,has,initial,context,factory,builder,throw,new,illegal,state,exception,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1363208506;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, {@code new InitialContext()} will always_return a context from this factory. Use the {@code emptyActivatedContextBuilder()}_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				if (NamingManager.hasInitialContextFactoryBuilder()) {_					throw new IllegalStateException(_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				}_				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,if,naming,manager,has,initial,context,factory,builder,throw,new,illegal,state,exception,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1368482696;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, {@code new InitialContext()} will always_return a context from this factory. Use the {@code emptyActivatedContextBuilder()}_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				if (NamingManager.hasInitialContextFactoryBuilder()) {_					throw new IllegalStateException(_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				}_				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,if,naming,manager,has,initial,context,factory,builder,throw,new,illegal,state,exception,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1411165756;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, {@code new InitialContext()} will always_return a context from this factory. Use the {@code emptyActivatedContextBuilder()}_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				if (NamingManager.hasInitialContextFactoryBuilder()) {_					throw new IllegalStateException(_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				}_				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,if,naming,manager,has,initial,context,factory,builder,throw,new,illegal,state,exception,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1426267150;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, {@code new InitialContext()} will always_return a context from this factory. Use the {@code emptyActivatedContextBuilder()}_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				if (NamingManager.hasInitialContextFactoryBuilder()) {_					throw new IllegalStateException(_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				}_				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,if,naming,manager,has,initial,context,factory,builder,throw,new,illegal,state,exception,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1467730834;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, {@code new InitialContext()} will always_return a context from this factory. Use the {@code emptyActivatedContextBuilder()}_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				if (NamingManager.hasInitialContextFactoryBuilder()) {_					throw new IllegalStateException(_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				}_				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,if,naming,manager,has,initial,context,factory,builder,throw,new,illegal,state,exception,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1468334463;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, {@code new InitialContext()} will always_return a context from this factory. Use the {@code emptyActivatedContextBuilder()}_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				Assert.state(!NamingManager.hasInitialContextFactoryBuilder(),_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,assert,state,naming,manager,has,initial,context,factory,builder,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1468948866;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, {@code new InitialContext()} will always_return a context from this factory. Use the {@code emptyActivatedContextBuilder()}_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				Assert.state(!NamingManager.hasInitialContextFactoryBuilder(),_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,assert,state,naming,manager,has,initial,context,factory,builder,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1476521730;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, {@code new InitialContext()} will always_return a context from this factory. Use the {@code emptyActivatedContextBuilder()}_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				Assert.state(!NamingManager.hasInitialContextFactoryBuilder(),_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,assert,state,naming,manager,has,initial,context,factory,builder,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1495868221;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, {@code new InitialContext()} will always_return a context from this factory. Use the {@code emptyActivatedContextBuilder()}_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				Assert.state(!NamingManager.hasInitialContextFactoryBuilder(),_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,assert,state,naming,manager,has,initial,context,factory,builder,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1496955179;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, {@code new InitialContext()} will always_return a context from this factory. Use the {@code emptyActivatedContextBuilder()}_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				Assert.state(!NamingManager.hasInitialContextFactoryBuilder(),_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,assert,state,naming,manager,has,initial,context,factory,builder,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1498780456;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, {@code new InitialContext()} will always_return a context from this factory. Use the {@code emptyActivatedContextBuilder()}_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				Assert.state(!NamingManager.hasInitialContextFactoryBuilder(),_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,assert,state,naming,manager,has,initial,context,factory,builder,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1518770299;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, {@code new InitialContext()} will always_return a context from this factory. Use the {@code emptyActivatedContextBuilder()}_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				Assert.state(!NamingManager.hasInitialContextFactoryBuilder(),_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,assert,state,naming,manager,has,initial,context,factory,builder,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1530174524;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, {@code new InitialContext()} will always_return a context from this factory. Use the {@code emptyActivatedContextBuilder()}_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				Assert.state(!NamingManager.hasInitialContextFactoryBuilder(),_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,assert,state,naming,manager,has,initial,context,factory,builder,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1530174524;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, {@code new InitialContext()} will always_return a context from this factory. Use the {@code emptyActivatedContextBuilder()}_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				Assert.state(!NamingManager.hasInitialContextFactoryBuilder(),_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,assert,state,naming,manager,has,initial,context,factory,builder,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void activate() throws IllegalStateException, NamingException;1542748004;Register the context builder by registering it with the JNDI NamingManager._Note that once this has been done, {@code new InitialContext()} will always_return a context from this factory. Use the {@code emptyActivatedContextBuilder()}_static method to get an empty context (for example, in test methods)._@throws IllegalStateException if there's already a naming context builder_registered with the JNDI NamingManager;public void activate() throws IllegalStateException, NamingException {_		logger.info("Activating simple JNDI environment")__		synchronized (initializationLock) {_			if (!initialized) {_				Assert.state(!NamingManager.hasInitialContextFactoryBuilder(),_							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +_							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +_							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.")__				NamingManager.setInitialContextFactoryBuilder(this)__				initialized = true__			}_		}_		activated = this__	};register,the,context,builder,by,registering,it,with,the,jndi,naming,manager,note,that,once,this,has,been,done,code,new,initial,context,will,always,return,a,context,from,this,factory,use,the,code,empty,activated,context,builder,static,method,to,get,an,empty,context,for,example,in,test,methods,throws,illegal,state,exception,if,there,s,already,a,naming,context,builder,registered,with,the,jndi,naming,manager;public,void,activate,throws,illegal,state,exception,naming,exception,logger,info,activating,simple,jndi,environment,synchronized,initialization,lock,if,initialized,assert,state,naming,manager,has,initial,context,factory,builder,cannot,activate,simple,naming,context,builder,there,is,already,a,jndi,provider,registered,note,that,jndi,is,a,jvm,wide,service,shared,at,the,jvm,system,class,loader,level,with,no,reset,option,as,a,consequence,a,jndi,provider,must,only,be,registered,once,per,jvm,naming,manager,set,initial,context,factory,builder,this,initialized,true,activated,this
SimpleNamingContextBuilder -> public void deactivate();1328020251;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call <code>activate()</code> again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,code,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
SimpleNamingContextBuilder -> public void deactivate();1356735495;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call {@code activate()} again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
SimpleNamingContextBuilder -> public void deactivate();1357119239;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call {@code activate()} again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
SimpleNamingContextBuilder -> public void deactivate();1363208506;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call {@code activate()} again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
SimpleNamingContextBuilder -> public void deactivate();1368482696;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call {@code activate()} again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
SimpleNamingContextBuilder -> public void deactivate();1411165756;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call {@code activate()} again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
SimpleNamingContextBuilder -> public void deactivate();1426267150;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call {@code activate()} again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
SimpleNamingContextBuilder -> public void deactivate();1467730834;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call {@code activate()} again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
SimpleNamingContextBuilder -> public void deactivate();1468334463;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call {@code activate()} again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
SimpleNamingContextBuilder -> public void deactivate();1468948866;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call {@code activate()} again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
SimpleNamingContextBuilder -> public void deactivate();1476521730;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call {@code activate()} again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
SimpleNamingContextBuilder -> public void deactivate();1495868221;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call {@code activate()} again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
SimpleNamingContextBuilder -> public void deactivate();1496955179;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call {@code activate()} again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
SimpleNamingContextBuilder -> public void deactivate();1498780456;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call {@code activate()} again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
SimpleNamingContextBuilder -> public void deactivate();1518770299;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call {@code activate()} again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
SimpleNamingContextBuilder -> public void deactivate();1530174524;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call {@code activate()} again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
SimpleNamingContextBuilder -> public void deactivate();1530174524;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call {@code activate()} again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
SimpleNamingContextBuilder -> public void deactivate();1542748004;Temporarily deactivate this context builder. It will remain registered with_the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory_(if configured) instead of exposing its own bound objects._<p>Call {@code activate()} again in order to expose this context builder's own_bound objects again. Such activate/deactivate sequences can be applied any number_of times (e.g. within a larger integration test suite running in the same VM)._@see #activate();public void deactivate() {_		logger.info("Deactivating simple JNDI environment")__		activated = null__	};temporarily,deactivate,this,context,builder,it,will,remain,registered,with,the,jndi,naming,manager,but,will,delegate,to,the,standard,jndi,initial,context,factory,if,configured,instead,of,exposing,its,own,bound,objects,p,call,code,activate,again,in,order,to,expose,this,context,builder,s,own,bound,objects,again,such,activate,deactivate,sequences,can,be,applied,any,number,of,times,e,g,within,a,larger,integration,test,suite,running,in,the,same,vm,see,activate;public,void,deactivate,logger,info,deactivating,simple,jndi,environment,activated,null
