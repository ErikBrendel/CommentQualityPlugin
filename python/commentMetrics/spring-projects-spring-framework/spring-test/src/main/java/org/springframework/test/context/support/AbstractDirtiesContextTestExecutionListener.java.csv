commented;modifiers;parameterAmount;loc;comment;code
false;public,abstract;0;2;;@Override public abstract int getOrder().
true;protected;2;4;/**  * Mark the {@linkplain ApplicationContext application context} of the supplied  * {@linkplain TestContext test context} as  * {@linkplain TestContext#markApplicationContextDirty(DirtiesContext.HierarchyMode) dirty}  * and set {@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE  * REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context to {@code true}.  * @param testContext the test context whose application context should  * be marked as dirty  * @param hierarchyMode the context cache clearing mode to be applied if the  * context is part of a hierarchy. may be {@code null}  * @since 3.2.2  */ ;/**  * Mark the {@linkplain ApplicationContext application context} of the supplied  * {@linkplain TestContext test context} as  * {@linkplain TestContext#markApplicationContextDirty(DirtiesContext.HierarchyMode) dirty}  * and set {@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE  * REINJECT_DEPENDENCIES_ATTRIBUTE} in the test context to {@code true}.  * @param testContext the test context whose application context should  * be marked as dirty  * @param hierarchyMode the context cache clearing mode to be applied if the  * context is part of a hierarchy. may be {@code null}  * @since 3.2.2  */ protected void dirtyContext(TestContext testContext, @Nullable HierarchyMode hierarchyMode) {     testContext.markApplicationContextDirty(hierarchyMode).     testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE). }
true;protected;3;31;/**  * Perform the actual work for {@link #beforeTestMethod} and {@link #afterTestMethod}  * by dirtying the context if appropriate (i.e., according to the required modes).  * @param testContext the test context whose application context should  * potentially be marked as dirty. never {@code null}  * @param requiredMethodMode the method mode required for a context to  * be marked dirty in the current phase. never {@code null}  * @param requiredClassMode the class mode required for a context to  * be marked dirty in the current phase. never {@code null}  * @throws Exception allows any exception to propagate  * @since 4.2  * @see #dirtyContext  */ ;/**  * Perform the actual work for {@link #beforeTestMethod} and {@link #afterTestMethod}  * by dirtying the context if appropriate (i.e., according to the required modes).  * @param testContext the test context whose application context should  * potentially be marked as dirty. never {@code null}  * @param requiredMethodMode the method mode required for a context to  * be marked dirty in the current phase. never {@code null}  * @param requiredClassMode the class mode required for a context to  * be marked dirty in the current phase. never {@code null}  * @throws Exception allows any exception to propagate  * @since 4.2  * @see #dirtyContext  */ protected void beforeOrAfterTestMethod(TestContext testContext, MethodMode requiredMethodMode, ClassMode requiredClassMode) throws Exception {     Assert.notNull(testContext, "TestContext must not be null").     Assert.notNull(requiredMethodMode, "requiredMethodMode must not be null").     Assert.notNull(requiredClassMode, "requiredClassMode must not be null").     Class<?> testClass = testContext.getTestClass().     Method testMethod = testContext.getTestMethod().     Assert.notNull(testClass, "The test class of the supplied TestContext must not be null").     Assert.notNull(testMethod, "The test method of the supplied TestContext must not be null").     DirtiesContext methodAnn = AnnotatedElementUtils.findMergedAnnotation(testMethod, DirtiesContext.class).     DirtiesContext classAnn = AnnotatedElementUtils.findMergedAnnotation(testClass, DirtiesContext.class).     boolean methodAnnotated = (methodAnn != null).     boolean classAnnotated = (classAnn != null).     MethodMode methodMode = (methodAnnotated ? methodAnn.methodMode() : null).     ClassMode classMode = (classAnnotated ? classAnn.classMode() : null).     if (logger.isDebugEnabled()) {         String phase = (requiredClassMode.name().startsWith("BEFORE") ? "Before" : "After").         logger.debug(String.format("%s test method: context %s, class annotated with @DirtiesContext [%s] " + "with mode [%s], method annotated with @DirtiesContext [%s] with mode [%s].", phase, testContext, classAnnotated, classMode, methodAnnotated, methodMode)).     }     if ((methodMode == requiredMethodMode) || (classMode == requiredClassMode)) {         HierarchyMode hierarchyMode = (methodAnnotated ? methodAnn.hierarchyMode() : classAnn.hierarchyMode()).         dirtyContext(testContext, hierarchyMode).     } }
true;protected;2;22;/**  * Perform the actual work for {@link #beforeTestClass} and {@link #afterTestClass}  * by dirtying the context if appropriate (i.e., according to the required mode).  * @param testContext the test context whose application context should  * potentially be marked as dirty. never {@code null}  * @param requiredClassMode the class mode required for a context to  * be marked dirty in the current phase. never {@code null}  * @throws Exception allows any exception to propagate  * @since 4.2  * @see #dirtyContext  */ ;/**  * Perform the actual work for {@link #beforeTestClass} and {@link #afterTestClass}  * by dirtying the context if appropriate (i.e., according to the required mode).  * @param testContext the test context whose application context should  * potentially be marked as dirty. never {@code null}  * @param requiredClassMode the class mode required for a context to  * be marked dirty in the current phase. never {@code null}  * @throws Exception allows any exception to propagate  * @since 4.2  * @see #dirtyContext  */ protected void beforeOrAfterTestClass(TestContext testContext, ClassMode requiredClassMode) throws Exception {     Assert.notNull(testContext, "TestContext must not be null").     Assert.notNull(requiredClassMode, "requiredClassMode must not be null").     Class<?> testClass = testContext.getTestClass().     Assert.notNull(testClass, "The test class of the supplied TestContext must not be null").     DirtiesContext dirtiesContext = AnnotatedElementUtils.findMergedAnnotation(testClass, DirtiesContext.class).     boolean classAnnotated = (dirtiesContext != null).     ClassMode classMode = (classAnnotated ? dirtiesContext.classMode() : null).     if (logger.isDebugEnabled()) {         String phase = (requiredClassMode.name().startsWith("BEFORE") ? "Before" : "After").         logger.debug(String.format("%s test class: context %s, class annotated with @DirtiesContext [%s] with mode [%s].", phase, testContext, classAnnotated, classMode)).     }     if (classMode == requiredClassMode) {         dirtyContext(testContext, dirtiesContext.hierarchyMode()).     } }
