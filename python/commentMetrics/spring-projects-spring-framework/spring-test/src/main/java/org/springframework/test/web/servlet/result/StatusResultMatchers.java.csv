commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Assert the response status code with the given Hamcrest {@link Matcher}.  * Use the {@code StatusResultMatchers.isEqualTo} extension in Kotlin.  */ ;/**  * Assert the response status code with the given Hamcrest {@link Matcher}.  * Use the {@code StatusResultMatchers.isEqualTo} extension in Kotlin.  */ public ResultMatcher is(final Matcher<Integer> matcher) {     return result -> assertThat("Response status", result.getResponse().getStatus(), matcher). }
true;public;1;3;/**  * Assert the response status code is equal to an integer value.  * Use the {@code StatusResultMatchers.isEqualTo} extension in Kotlin.  */ ;/**  * Assert the response status code is equal to an integer value.  * Use the {@code StatusResultMatchers.isEqualTo} extension in Kotlin.  */ public ResultMatcher is(final int status) {     return result -> assertEquals("Response status", status, result.getResponse().getStatus()). }
true;public;0;4;/**  * Assert the response status code is in the 1xx range.  */ ;/**  * Assert the response status code is in the 1xx range.  */ public ResultMatcher is1xxInformational() {     return result -> assertEquals("Range for response status value " + result.getResponse().getStatus(), HttpStatus.Series.INFORMATIONAL, getHttpStatusSeries(result)). }
true;public;0;4;/**  * Assert the response status code is in the 2xx range.  */ ;/**  * Assert the response status code is in the 2xx range.  */ public ResultMatcher is2xxSuccessful() {     return result -> assertEquals("Range for response status value " + result.getResponse().getStatus(), HttpStatus.Series.SUCCESSFUL, getHttpStatusSeries(result)). }
true;public;0;4;/**  * Assert the response status code is in the 3xx range.  */ ;/**  * Assert the response status code is in the 3xx range.  */ public ResultMatcher is3xxRedirection() {     return result -> assertEquals("Range for response status value " + result.getResponse().getStatus(), HttpStatus.Series.REDIRECTION, getHttpStatusSeries(result)). }
true;public;0;4;/**  * Assert the response status code is in the 4xx range.  */ ;/**  * Assert the response status code is in the 4xx range.  */ public ResultMatcher is4xxClientError() {     return result -> assertEquals("Range for response status value " + result.getResponse().getStatus(), HttpStatus.Series.CLIENT_ERROR, getHttpStatusSeries(result)). }
true;public;0;4;/**  * Assert the response status code is in the 5xx range.  */ ;/**  * Assert the response status code is in the 5xx range.  */ public ResultMatcher is5xxServerError() {     return result -> assertEquals("Range for response status value " + result.getResponse().getStatus(), HttpStatus.Series.SERVER_ERROR, getHttpStatusSeries(result)). }
false;private;1;5;;private HttpStatus.Series getHttpStatusSeries(MvcResult result) {     int statusValue = result.getResponse().getStatus().     HttpStatus status = HttpStatus.valueOf(statusValue).     return status.series(). }
true;public;1;3;/**  * Assert the Servlet response error message with the given Hamcrest {@link Matcher}.  */ ;/**  * Assert the Servlet response error message with the given Hamcrest {@link Matcher}.  */ public ResultMatcher reason(final Matcher<? super String> matcher) {     return result -> assertThat("Response status reason", result.getResponse().getErrorMessage(), matcher). }
true;public;1;3;/**  * Assert the Servlet response error message.  */ ;/**  * Assert the Servlet response error message.  */ public ResultMatcher reason(final String reason) {     return result -> assertEquals("Response status reason", reason, result.getResponse().getErrorMessage()). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.CONTINUE} (100).  */ ;/**  * Assert the response status code is {@code HttpStatus.CONTINUE} (100).  */ public ResultMatcher isContinue() {     return matcher(HttpStatus.CONTINUE). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.SWITCHING_PROTOCOLS} (101).  */ ;/**  * Assert the response status code is {@code HttpStatus.SWITCHING_PROTOCOLS} (101).  */ public ResultMatcher isSwitchingProtocols() {     return matcher(HttpStatus.SWITCHING_PROTOCOLS). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.PROCESSING} (102).  */ ;/**  * Assert the response status code is {@code HttpStatus.PROCESSING} (102).  */ public ResultMatcher isProcessing() {     return matcher(HttpStatus.PROCESSING). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.CHECKPOINT} (103).  */ ;/**  * Assert the response status code is {@code HttpStatus.CHECKPOINT} (103).  */ public ResultMatcher isCheckpoint() {     return matcher(HttpStatus.valueOf(103)). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.OK} (200).  */ ;/**  * Assert the response status code is {@code HttpStatus.OK} (200).  */ public ResultMatcher isOk() {     return matcher(HttpStatus.OK). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.CREATED} (201).  */ ;/**  * Assert the response status code is {@code HttpStatus.CREATED} (201).  */ public ResultMatcher isCreated() {     return matcher(HttpStatus.CREATED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.ACCEPTED} (202).  */ ;/**  * Assert the response status code is {@code HttpStatus.ACCEPTED} (202).  */ public ResultMatcher isAccepted() {     return matcher(HttpStatus.ACCEPTED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.NON_AUTHORITATIVE_INFORMATION} (203).  */ ;/**  * Assert the response status code is {@code HttpStatus.NON_AUTHORITATIVE_INFORMATION} (203).  */ public ResultMatcher isNonAuthoritativeInformation() {     return matcher(HttpStatus.NON_AUTHORITATIVE_INFORMATION). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.NO_CONTENT} (204).  */ ;/**  * Assert the response status code is {@code HttpStatus.NO_CONTENT} (204).  */ public ResultMatcher isNoContent() {     return matcher(HttpStatus.NO_CONTENT). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.RESET_CONTENT} (205).  */ ;/**  * Assert the response status code is {@code HttpStatus.RESET_CONTENT} (205).  */ public ResultMatcher isResetContent() {     return matcher(HttpStatus.RESET_CONTENT). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.PARTIAL_CONTENT} (206).  */ ;/**  * Assert the response status code is {@code HttpStatus.PARTIAL_CONTENT} (206).  */ public ResultMatcher isPartialContent() {     return matcher(HttpStatus.PARTIAL_CONTENT). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.MULTI_STATUS} (207).  */ ;/**  * Assert the response status code is {@code HttpStatus.MULTI_STATUS} (207).  */ public ResultMatcher isMultiStatus() {     return matcher(HttpStatus.MULTI_STATUS). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.ALREADY_REPORTED} (208).  */ ;/**  * Assert the response status code is {@code HttpStatus.ALREADY_REPORTED} (208).  */ public ResultMatcher isAlreadyReported() {     return matcher(HttpStatus.ALREADY_REPORTED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.IM_USED} (226).  */ ;/**  * Assert the response status code is {@code HttpStatus.IM_USED} (226).  */ public ResultMatcher isImUsed() {     return matcher(HttpStatus.IM_USED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.MULTIPLE_CHOICES} (300).  */ ;/**  * Assert the response status code is {@code HttpStatus.MULTIPLE_CHOICES} (300).  */ public ResultMatcher isMultipleChoices() {     return matcher(HttpStatus.MULTIPLE_CHOICES). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.MOVED_PERMANENTLY} (301).  */ ;/**  * Assert the response status code is {@code HttpStatus.MOVED_PERMANENTLY} (301).  */ public ResultMatcher isMovedPermanently() {     return matcher(HttpStatus.MOVED_PERMANENTLY). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.FOUND} (302).  */ ;/**  * Assert the response status code is {@code HttpStatus.FOUND} (302).  */ public ResultMatcher isFound() {     return matcher(HttpStatus.FOUND). }
true;public;0;4;/**  * Assert the response status code is {@code HttpStatus.MOVED_TEMPORARILY} (302).  * @see #isFound()  * @deprecated in favor of {@link #isFound()}  */ ;/**  * Assert the response status code is {@code HttpStatus.MOVED_TEMPORARILY} (302).  * @see #isFound()  * @deprecated in favor of {@link #isFound()}  */ @Deprecated public ResultMatcher isMovedTemporarily() {     return matcher(HttpStatus.MOVED_TEMPORARILY). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.SEE_OTHER} (303).  */ ;/**  * Assert the response status code is {@code HttpStatus.SEE_OTHER} (303).  */ public ResultMatcher isSeeOther() {     return matcher(HttpStatus.SEE_OTHER). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.NOT_MODIFIED} (304).  */ ;/**  * Assert the response status code is {@code HttpStatus.NOT_MODIFIED} (304).  */ public ResultMatcher isNotModified() {     return matcher(HttpStatus.NOT_MODIFIED). }
true;public;0;4;/**  * Assert the response status code is {@code HttpStatus.USE_PROXY} (305).  * @deprecated matching the deprecation of {@code HttpStatus.USE_PROXY}  */ ;/**  * Assert the response status code is {@code HttpStatus.USE_PROXY} (305).  * @deprecated matching the deprecation of {@code HttpStatus.USE_PROXY}  */ @Deprecated public ResultMatcher isUseProxy() {     return matcher(HttpStatus.USE_PROXY). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.TEMPORARY_REDIRECT} (307).  */ ;/**  * Assert the response status code is {@code HttpStatus.TEMPORARY_REDIRECT} (307).  */ public ResultMatcher isTemporaryRedirect() {     return matcher(HttpStatus.TEMPORARY_REDIRECT). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.PERMANENT_REDIRECT} (308).  */ ;/**  * Assert the response status code is {@code HttpStatus.PERMANENT_REDIRECT} (308).  */ public ResultMatcher isPermanentRedirect() {     return matcher(HttpStatus.valueOf(308)). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.BAD_REQUEST} (400).  */ ;/**  * Assert the response status code is {@code HttpStatus.BAD_REQUEST} (400).  */ public ResultMatcher isBadRequest() {     return matcher(HttpStatus.BAD_REQUEST). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.UNAUTHORIZED} (401).  */ ;/**  * Assert the response status code is {@code HttpStatus.UNAUTHORIZED} (401).  */ public ResultMatcher isUnauthorized() {     return matcher(HttpStatus.UNAUTHORIZED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.PAYMENT_REQUIRED} (402).  */ ;/**  * Assert the response status code is {@code HttpStatus.PAYMENT_REQUIRED} (402).  */ public ResultMatcher isPaymentRequired() {     return matcher(HttpStatus.PAYMENT_REQUIRED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.FORBIDDEN} (403).  */ ;/**  * Assert the response status code is {@code HttpStatus.FORBIDDEN} (403).  */ public ResultMatcher isForbidden() {     return matcher(HttpStatus.FORBIDDEN). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.NOT_FOUND} (404).  */ ;/**  * Assert the response status code is {@code HttpStatus.NOT_FOUND} (404).  */ public ResultMatcher isNotFound() {     return matcher(HttpStatus.NOT_FOUND). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.METHOD_NOT_ALLOWED} (405).  */ ;/**  * Assert the response status code is {@code HttpStatus.METHOD_NOT_ALLOWED} (405).  */ public ResultMatcher isMethodNotAllowed() {     return matcher(HttpStatus.METHOD_NOT_ALLOWED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.NOT_ACCEPTABLE} (406).  */ ;/**  * Assert the response status code is {@code HttpStatus.NOT_ACCEPTABLE} (406).  */ public ResultMatcher isNotAcceptable() {     return matcher(HttpStatus.NOT_ACCEPTABLE). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.PROXY_AUTHENTICATION_REQUIRED} (407).  */ ;/**  * Assert the response status code is {@code HttpStatus.PROXY_AUTHENTICATION_REQUIRED} (407).  */ public ResultMatcher isProxyAuthenticationRequired() {     return matcher(HttpStatus.PROXY_AUTHENTICATION_REQUIRED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.REQUEST_TIMEOUT} (408).  */ ;/**  * Assert the response status code is {@code HttpStatus.REQUEST_TIMEOUT} (408).  */ public ResultMatcher isRequestTimeout() {     return matcher(HttpStatus.REQUEST_TIMEOUT). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.CONFLICT} (409).  */ ;/**  * Assert the response status code is {@code HttpStatus.CONFLICT} (409).  */ public ResultMatcher isConflict() {     return matcher(HttpStatus.CONFLICT). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.GONE} (410).  */ ;/**  * Assert the response status code is {@code HttpStatus.GONE} (410).  */ public ResultMatcher isGone() {     return matcher(HttpStatus.GONE). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.LENGTH_REQUIRED} (411).  */ ;/**  * Assert the response status code is {@code HttpStatus.LENGTH_REQUIRED} (411).  */ public ResultMatcher isLengthRequired() {     return matcher(HttpStatus.LENGTH_REQUIRED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.PRECONDITION_FAILED} (412).  */ ;/**  * Assert the response status code is {@code HttpStatus.PRECONDITION_FAILED} (412).  */ public ResultMatcher isPreconditionFailed() {     return matcher(HttpStatus.PRECONDITION_FAILED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.PAYLOAD_TOO_LARGE} (413).  * @since 4.1  */ ;/**  * Assert the response status code is {@code HttpStatus.PAYLOAD_TOO_LARGE} (413).  * @since 4.1  */ public ResultMatcher isPayloadTooLarge() {     return matcher(HttpStatus.PAYLOAD_TOO_LARGE). }
true;public;0;4;/**  * Assert the response status code is {@code HttpStatus.REQUEST_ENTITY_TOO_LARGE} (413).  * @deprecated matching the deprecation of {@code HttpStatus.REQUEST_ENTITY_TOO_LARGE}  * @see #isPayloadTooLarge()  */ ;/**  * Assert the response status code is {@code HttpStatus.REQUEST_ENTITY_TOO_LARGE} (413).  * @deprecated matching the deprecation of {@code HttpStatus.REQUEST_ENTITY_TOO_LARGE}  * @see #isPayloadTooLarge()  */ @Deprecated public ResultMatcher isRequestEntityTooLarge() {     return matcher(HttpStatus.REQUEST_ENTITY_TOO_LARGE). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.REQUEST_URI_TOO_LONG} (414).  * @since 4.1  */ ;/**  * Assert the response status code is {@code HttpStatus.REQUEST_URI_TOO_LONG} (414).  * @since 4.1  */ public ResultMatcher isUriTooLong() {     return matcher(HttpStatus.URI_TOO_LONG). }
true;public;0;4;/**  * Assert the response status code is {@code HttpStatus.REQUEST_URI_TOO_LONG} (414).  * @deprecated matching the deprecation of {@code HttpStatus.REQUEST_URI_TOO_LONG}  * @see #isUriTooLong()  */ ;/**  * Assert the response status code is {@code HttpStatus.REQUEST_URI_TOO_LONG} (414).  * @deprecated matching the deprecation of {@code HttpStatus.REQUEST_URI_TOO_LONG}  * @see #isUriTooLong()  */ @Deprecated public ResultMatcher isRequestUriTooLong() {     return matcher(HttpStatus.REQUEST_URI_TOO_LONG). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.UNSUPPORTED_MEDIA_TYPE} (415).  */ ;/**  * Assert the response status code is {@code HttpStatus.UNSUPPORTED_MEDIA_TYPE} (415).  */ public ResultMatcher isUnsupportedMediaType() {     return matcher(HttpStatus.UNSUPPORTED_MEDIA_TYPE). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE} (416).  */ ;/**  * Assert the response status code is {@code HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE} (416).  */ public ResultMatcher isRequestedRangeNotSatisfiable() {     return matcher(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.EXPECTATION_FAILED} (417).  */ ;/**  * Assert the response status code is {@code HttpStatus.EXPECTATION_FAILED} (417).  */ public ResultMatcher isExpectationFailed() {     return matcher(HttpStatus.EXPECTATION_FAILED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.I_AM_A_TEAPOT} (418).  */ ;/**  * Assert the response status code is {@code HttpStatus.I_AM_A_TEAPOT} (418).  */ public ResultMatcher isIAmATeapot() {     return matcher(HttpStatus.valueOf(418)). }
true;public;0;4;/**  * Assert the response status code is {@code HttpStatus.INSUFFICIENT_SPACE_ON_RESOURCE} (419).  * @deprecated matching the deprecation of {@code HttpStatus.INSUFFICIENT_SPACE_ON_RESOURCE}  */ ;/**  * Assert the response status code is {@code HttpStatus.INSUFFICIENT_SPACE_ON_RESOURCE} (419).  * @deprecated matching the deprecation of {@code HttpStatus.INSUFFICIENT_SPACE_ON_RESOURCE}  */ @Deprecated public ResultMatcher isInsufficientSpaceOnResource() {     return matcher(HttpStatus.INSUFFICIENT_SPACE_ON_RESOURCE). }
true;public;0;4;/**  * Assert the response status code is {@code HttpStatus.METHOD_FAILURE} (420).  * @deprecated matching the deprecation of {@code HttpStatus.METHOD_FAILURE}  */ ;/**  * Assert the response status code is {@code HttpStatus.METHOD_FAILURE} (420).  * @deprecated matching the deprecation of {@code HttpStatus.METHOD_FAILURE}  */ @Deprecated public ResultMatcher isMethodFailure() {     return matcher(HttpStatus.METHOD_FAILURE). }
true;public;0;4;/**  * Assert the response status code is {@code HttpStatus.DESTINATION_LOCKED} (421).  * @deprecated matching the deprecation of {@code HttpStatus.DESTINATION_LOCKED}  */ ;/**  * Assert the response status code is {@code HttpStatus.DESTINATION_LOCKED} (421).  * @deprecated matching the deprecation of {@code HttpStatus.DESTINATION_LOCKED}  */ @Deprecated public ResultMatcher isDestinationLocked() {     return matcher(HttpStatus.DESTINATION_LOCKED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.UNPROCESSABLE_ENTITY} (422).  */ ;/**  * Assert the response status code is {@code HttpStatus.UNPROCESSABLE_ENTITY} (422).  */ public ResultMatcher isUnprocessableEntity() {     return matcher(HttpStatus.UNPROCESSABLE_ENTITY). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.LOCKED} (423).  */ ;/**  * Assert the response status code is {@code HttpStatus.LOCKED} (423).  */ public ResultMatcher isLocked() {     return matcher(HttpStatus.LOCKED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.FAILED_DEPENDENCY} (424).  */ ;/**  * Assert the response status code is {@code HttpStatus.FAILED_DEPENDENCY} (424).  */ public ResultMatcher isFailedDependency() {     return matcher(HttpStatus.FAILED_DEPENDENCY). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.UPGRADE_REQUIRED} (426).  */ ;/**  * Assert the response status code is {@code HttpStatus.UPGRADE_REQUIRED} (426).  */ public ResultMatcher isUpgradeRequired() {     return matcher(HttpStatus.UPGRADE_REQUIRED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.PRECONDITION_REQUIRED} (428).  */ ;/**  * Assert the response status code is {@code HttpStatus.PRECONDITION_REQUIRED} (428).  */ public ResultMatcher isPreconditionRequired() {     return matcher(HttpStatus.valueOf(428)). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.TOO_MANY_REQUESTS} (429).  */ ;/**  * Assert the response status code is {@code HttpStatus.TOO_MANY_REQUESTS} (429).  */ public ResultMatcher isTooManyRequests() {     return matcher(HttpStatus.valueOf(429)). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.REQUEST_HEADER_FIELDS_TOO_LARGE} (431).  */ ;/**  * Assert the response status code is {@code HttpStatus.REQUEST_HEADER_FIELDS_TOO_LARGE} (431).  */ public ResultMatcher isRequestHeaderFieldsTooLarge() {     return matcher(HttpStatus.valueOf(431)). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.UNAVAILABLE_FOR_LEGAL_REASONS} (451).  * @since 4.3  */ ;/**  * Assert the response status code is {@code HttpStatus.UNAVAILABLE_FOR_LEGAL_REASONS} (451).  * @since 4.3  */ public ResultMatcher isUnavailableForLegalReasons() {     return matcher(HttpStatus.valueOf(451)). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.INTERNAL_SERVER_ERROR} (500).  */ ;/**  * Assert the response status code is {@code HttpStatus.INTERNAL_SERVER_ERROR} (500).  */ public ResultMatcher isInternalServerError() {     return matcher(HttpStatus.INTERNAL_SERVER_ERROR). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.NOT_IMPLEMENTED} (501).  */ ;/**  * Assert the response status code is {@code HttpStatus.NOT_IMPLEMENTED} (501).  */ public ResultMatcher isNotImplemented() {     return matcher(HttpStatus.NOT_IMPLEMENTED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.BAD_GATEWAY} (502).  */ ;/**  * Assert the response status code is {@code HttpStatus.BAD_GATEWAY} (502).  */ public ResultMatcher isBadGateway() {     return matcher(HttpStatus.BAD_GATEWAY). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.SERVICE_UNAVAILABLE} (503).  */ ;/**  * Assert the response status code is {@code HttpStatus.SERVICE_UNAVAILABLE} (503).  */ public ResultMatcher isServiceUnavailable() {     return matcher(HttpStatus.SERVICE_UNAVAILABLE). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.GATEWAY_TIMEOUT} (504).  */ ;/**  * Assert the response status code is {@code HttpStatus.GATEWAY_TIMEOUT} (504).  */ public ResultMatcher isGatewayTimeout() {     return matcher(HttpStatus.GATEWAY_TIMEOUT). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.HTTP_VERSION_NOT_SUPPORTED} (505).  */ ;/**  * Assert the response status code is {@code HttpStatus.HTTP_VERSION_NOT_SUPPORTED} (505).  */ public ResultMatcher isHttpVersionNotSupported() {     return matcher(HttpStatus.HTTP_VERSION_NOT_SUPPORTED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.VARIANT_ALSO_NEGOTIATES} (506).  */ ;/**  * Assert the response status code is {@code HttpStatus.VARIANT_ALSO_NEGOTIATES} (506).  */ public ResultMatcher isVariantAlsoNegotiates() {     return matcher(HttpStatus.VARIANT_ALSO_NEGOTIATES). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.INSUFFICIENT_STORAGE} (507).  */ ;/**  * Assert the response status code is {@code HttpStatus.INSUFFICIENT_STORAGE} (507).  */ public ResultMatcher isInsufficientStorage() {     return matcher(HttpStatus.INSUFFICIENT_STORAGE). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.LOOP_DETECTED} (508).  */ ;/**  * Assert the response status code is {@code HttpStatus.LOOP_DETECTED} (508).  */ public ResultMatcher isLoopDetected() {     return matcher(HttpStatus.LOOP_DETECTED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.BANDWIDTH_LIMIT_EXCEEDED} (509).  */ ;/**  * Assert the response status code is {@code HttpStatus.BANDWIDTH_LIMIT_EXCEEDED} (509).  */ public ResultMatcher isBandwidthLimitExceeded() {     return matcher(HttpStatus.valueOf(509)). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.NOT_EXTENDED} (510).  */ ;/**  * Assert the response status code is {@code HttpStatus.NOT_EXTENDED} (510).  */ public ResultMatcher isNotExtended() {     return matcher(HttpStatus.NOT_EXTENDED). }
true;public;0;3;/**  * Assert the response status code is {@code HttpStatus.NETWORK_AUTHENTICATION_REQUIRED} (511).  */ ;/**  * Assert the response status code is {@code HttpStatus.NETWORK_AUTHENTICATION_REQUIRED} (511).  */ public ResultMatcher isNetworkAuthenticationRequired() {     return matcher(HttpStatus.valueOf(511)). }
true;private;1;3;/**  * Match the expected response status to that of the HttpServletResponse.  */ ;/**  * Match the expected response status to that of the HttpServletResponse.  */ private ResultMatcher matcher(final HttpStatus status) {     return result -> assertEquals("Status", status.value(), result.getResponse().getStatus()). }
