commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Get the {@linkplain Class test class} associated with this  * {@code MergedContextConfiguration}.  */ ;/**  * Get the {@linkplain Class test class} associated with this  * {@code MergedContextConfiguration}.  */ public Class<?> getTestClass() {     return this.testClass. }
true;public;0;3;/**  * Get the merged resource locations for {@code ApplicationContext}  * configuration files for the {@linkplain #getTestClass() test class}.  * <p>Context resource locations typically represent XML configuration  * files or Groovy scripts.  */ ;/**  * Get the merged resource locations for {@code ApplicationContext}  * configuration files for the {@linkplain #getTestClass() test class}.  * <p>Context resource locations typically represent XML configuration  * files or Groovy scripts.  */ public String[] getLocations() {     return this.locations. }
true;public;0;3;/**  * Get the merged annotated classes for the {@linkplain #getTestClass() test class}.  */ ;/**  * Get the merged annotated classes for the {@linkplain #getTestClass() test class}.  */ public Class<?>[] getClasses() {     return this.classes. }
true;public;0;3;/**  * Determine if this {@code MergedContextConfiguration} instance has  * path-based context resource locations.  * @return {@code true} if the {@link #getLocations() locations} array is not empty  * @since 4.0.4  * @see #hasResources()  * @see #hasClasses()  */ ;/**  * Determine if this {@code MergedContextConfiguration} instance has  * path-based context resource locations.  * @return {@code true} if the {@link #getLocations() locations} array is not empty  * @since 4.0.4  * @see #hasResources()  * @see #hasClasses()  */ public boolean hasLocations() {     return !ObjectUtils.isEmpty(getLocations()). }
true;public;0;3;/**  * Determine if this {@code MergedContextConfiguration} instance has  * class-based resources.  * @return {@code true} if the {@link #getClasses() classes} array is not empty  * @since 4.0.4  * @see #hasResources()  * @see #hasLocations()  */ ;/**  * Determine if this {@code MergedContextConfiguration} instance has  * class-based resources.  * @return {@code true} if the {@link #getClasses() classes} array is not empty  * @since 4.0.4  * @see #hasResources()  * @see #hasLocations()  */ public boolean hasClasses() {     return !ObjectUtils.isEmpty(getClasses()). }
true;public;0;3;/**  * Determine if this {@code MergedContextConfiguration} instance has  * either path-based context resource locations or class-based resources.  * @return {@code true} if either the {@link #getLocations() locations}  * or the {@link #getClasses() classes} array is not empty  * @since 4.0.4  * @see #hasLocations()  * @see #hasClasses()  */ ;/**  * Determine if this {@code MergedContextConfiguration} instance has  * either path-based context resource locations or class-based resources.  * @return {@code true} if either the {@link #getLocations() locations}  * or the {@link #getClasses() classes} array is not empty  * @since 4.0.4  * @see #hasLocations()  * @see #hasClasses()  */ public boolean hasResources() {     return (hasLocations() || hasClasses()). }
true;public;0;3;/**  * Get the merged {@code ApplicationContextInitializer} classes for the  * {@linkplain #getTestClass() test class}.  */ ;/**  * Get the merged {@code ApplicationContextInitializer} classes for the  * {@linkplain #getTestClass() test class}.  */ public Set<Class<? extends ApplicationContextInitializer<?>>> getContextInitializerClasses() {     return this.contextInitializerClasses. }
true;public;0;3;/**  * Get the merged active bean definition profiles for the  * {@linkplain #getTestClass() test class}.  * @see ActiveProfiles  */ ;/**  * Get the merged active bean definition profiles for the  * {@linkplain #getTestClass() test class}.  * @see ActiveProfiles  */ public String[] getActiveProfiles() {     return this.activeProfiles. }
true;public;0;3;/**  * Get the merged resource locations for test {@code PropertySources}  * for the {@linkplain #getTestClass() test class}.  * @see TestPropertySource#locations  * @see java.util.Properties  */ ;/**  * Get the merged resource locations for test {@code PropertySources}  * for the {@linkplain #getTestClass() test class}.  * @see TestPropertySource#locations  * @see java.util.Properties  */ public String[] getPropertySourceLocations() {     return this.propertySourceLocations. }
true;public;0;3;/**  * Get the merged test {@code PropertySource} properties for the  * {@linkplain #getTestClass() test class}.  * <p>Properties will be loaded into the {@code Environment}'s set of  * {@code PropertySources}.  * @see TestPropertySource#properties  * @see java.util.Properties  */ ;/**  * Get the merged test {@code PropertySource} properties for the  * {@linkplain #getTestClass() test class}.  * <p>Properties will be loaded into the {@code Environment}'s set of  * {@code PropertySources}.  * @see TestPropertySource#properties  * @see java.util.Properties  */ public String[] getPropertySourceProperties() {     return this.propertySourceProperties. }
true;public;0;3;/**  * Get the merged {@link ContextCustomizer ContextCustomizers} that will be applied  * when the application context is loaded.  */ ;/**  * Get the merged {@link ContextCustomizer ContextCustomizers} that will be applied  * when the application context is loaded.  */ public Set<ContextCustomizer> getContextCustomizers() {     return this.contextCustomizers. }
true;public;0;3;/**  * Get the resolved {@link ContextLoader} for the {@linkplain #getTestClass() test class}.  */ ;/**  * Get the resolved {@link ContextLoader} for the {@linkplain #getTestClass() test class}.  */ public ContextLoader getContextLoader() {     return this.contextLoader. }
true;public;0;4;/**  * Get the {@link MergedContextConfiguration} for the parent application context  * in a context hierarchy.  * @return the parent configuration or {@code null} if there is no parent  * @see #getParentApplicationContext()  * @since 3.2.2  */ ;/**  * Get the {@link MergedContextConfiguration} for the parent application context  * in a context hierarchy.  * @return the parent configuration or {@code null} if there is no parent  * @see #getParentApplicationContext()  * @since 3.2.2  */ @Nullable public MergedContextConfiguration getParent() {     return this.parent. }
true;public;0;9;/**  * Get the parent {@link ApplicationContext} for the context defined by this  * {@code MergedContextConfiguration} from the context cache.  * <p>If the parent context has not yet been loaded, it will be loaded, stored  * in the cache, and then returned.  * @return the parent {@code ApplicationContext} or {@code null} if there is no parent  * @see #getParent()  * @since 3.2.2  */ ;/**  * Get the parent {@link ApplicationContext} for the context defined by this  * {@code MergedContextConfiguration} from the context cache.  * <p>If the parent context has not yet been loaded, it will be loaded, stored  * in the cache, and then returned.  * @return the parent {@code ApplicationContext} or {@code null} if there is no parent  * @see #getParent()  * @since 3.2.2  */ @Nullable public ApplicationContext getParentApplicationContext() {     if (this.parent == null) {         return null.     }     Assert.state(this.cacheAwareContextLoaderDelegate != null, "Cannot retrieve a parent application context without access to the CacheAwareContextLoaderDelegate").     return this.cacheAwareContextLoaderDelegate.loadContext(this.parent). }
true;public;1;47;/**  * Determine if the supplied object is equal to this {@code MergedContextConfiguration}  * instance by comparing both object's {@linkplain #getLocations() locations},  * {@linkplain #getClasses() annotated classes},  * {@linkplain #getContextInitializerClasses() context initializer classes},  * {@linkplain #getActiveProfiles() active profiles},  * {@linkplain #getPropertySourceLocations() property source locations},  * {@linkplain #getPropertySourceProperties() property source properties},  * {@linkplain #getParent() parents}, and the fully qualified names of their  * {@link #getContextLoader() ContextLoaders}.  */ ;/**  * Determine if the supplied object is equal to this {@code MergedContextConfiguration}  * instance by comparing both object's {@linkplain #getLocations() locations},  * {@linkplain #getClasses() annotated classes},  * {@linkplain #getContextInitializerClasses() context initializer classes},  * {@linkplain #getActiveProfiles() active profiles},  * {@linkplain #getPropertySourceLocations() property source locations},  * {@linkplain #getPropertySourceProperties() property source properties},  * {@linkplain #getParent() parents}, and the fully qualified names of their  * {@link #getContextLoader() ContextLoaders}.  */ @Override public boolean equals(@Nullable Object other) {     if (this == other) {         return true.     }     if (other == null || other.getClass() != getClass()) {         return false.     }     MergedContextConfiguration otherConfig = (MergedContextConfiguration) other.     if (!Arrays.equals(this.locations, otherConfig.locations)) {         return false.     }     if (!Arrays.equals(this.classes, otherConfig.classes)) {         return false.     }     if (!this.contextInitializerClasses.equals(otherConfig.contextInitializerClasses)) {         return false.     }     if (!Arrays.equals(this.activeProfiles, otherConfig.activeProfiles)) {         return false.     }     if (!Arrays.equals(this.propertySourceLocations, otherConfig.propertySourceLocations)) {         return false.     }     if (!Arrays.equals(this.propertySourceProperties, otherConfig.propertySourceProperties)) {         return false.     }     if (!this.contextCustomizers.equals(otherConfig.contextCustomizers)) {         return false.     }     if (this.parent == null) {         if (otherConfig.parent != null) {             return false.         }     } else if (!this.parent.equals(otherConfig.parent)) {         return false.     }     if (!nullSafeClassName(this.contextLoader).equals(nullSafeClassName(otherConfig.contextLoader))) {         return false.     }     return true. }
true;public;0;13;/**  * Generate a unique hash code for all properties of this  * {@code MergedContextConfiguration} excluding the  * {@linkplain #getTestClass() test class}.  */ ;/**  * Generate a unique hash code for all properties of this  * {@code MergedContextConfiguration} excluding the  * {@linkplain #getTestClass() test class}.  */ @Override public int hashCode() {     int result = Arrays.hashCode(this.locations).     result = 31 * result + Arrays.hashCode(this.classes).     result = 31 * result + this.contextInitializerClasses.hashCode().     result = 31 * result + Arrays.hashCode(this.activeProfiles).     result = 31 * result + Arrays.hashCode(this.propertySourceLocations).     result = 31 * result + Arrays.hashCode(this.propertySourceProperties).     result = 31 * result + this.contextCustomizers.hashCode().     result = 31 * result + (this.parent != null ? this.parent.hashCode() : 0).     result = 31 * result + nullSafeClassName(this.contextLoader).hashCode().     return result. }
true;public;0;15;/**  * Provide a String representation of the {@linkplain #getTestClass() test class},  * {@linkplain #getLocations() locations}, {@linkplain #getClasses() annotated classes},  * {@linkplain #getContextInitializerClasses() context initializer classes},  * {@linkplain #getActiveProfiles() active profiles},  * {@linkplain #getPropertySourceLocations() property source locations},  * {@linkplain #getPropertySourceProperties() property source properties},  * {@linkplain #getContextCustomizers() context customizers},  * the name of the {@link #getContextLoader() ContextLoader}, and the  * {@linkplain #getParent() parent configuration}.  */ ;/**  * Provide a String representation of the {@linkplain #getTestClass() test class},  * {@linkplain #getLocations() locations}, {@linkplain #getClasses() annotated classes},  * {@linkplain #getContextInitializerClasses() context initializer classes},  * {@linkplain #getActiveProfiles() active profiles},  * {@linkplain #getPropertySourceLocations() property source locations},  * {@linkplain #getPropertySourceProperties() property source properties},  * {@linkplain #getContextCustomizers() context customizers},  * the name of the {@link #getContextLoader() ContextLoader}, and the  * {@linkplain #getParent() parent configuration}.  */ @Override public String toString() {     return new ToStringCreator(this).append("testClass", this.testClass).append("locations", ObjectUtils.nullSafeToString(this.locations)).append("classes", ObjectUtils.nullSafeToString(this.classes)).append("contextInitializerClasses", ObjectUtils.nullSafeToString(this.contextInitializerClasses)).append("activeProfiles", ObjectUtils.nullSafeToString(this.activeProfiles)).append("propertySourceLocations", ObjectUtils.nullSafeToString(this.propertySourceLocations)).append("propertySourceProperties", ObjectUtils.nullSafeToString(this.propertySourceProperties)).append("contextCustomizers", this.contextCustomizers).append("contextLoader", nullSafeClassName(this.contextLoader)).append("parent", this.parent).toString(). }
false;private,static;1;3;;private static String[] processStrings(@Nullable String[] array) {     return (array != null ? array : EMPTY_STRING_ARRAY). }
false;private,static;1;3;;private static Class<?>[] processClasses(@Nullable Class<?>[] classes) {     return (classes != null ? classes : EMPTY_CLASS_ARRAY). }
false;private,static;1;6;;private static Set<Class<? extends ApplicationContextInitializer<?>>> processContextInitializerClasses(@Nullable Set<Class<? extends ApplicationContextInitializer<?>>> contextInitializerClasses) {     return (contextInitializerClasses != null ? Collections.unmodifiableSet(contextInitializerClasses) : EMPTY_INITIALIZER_CLASSES). }
false;private,static;1;6;;private static Set<ContextCustomizer> processContextCustomizers(@Nullable Set<ContextCustomizer> contextCustomizers) {     return (contextCustomizers != null ? Collections.unmodifiableSet(contextCustomizers) : EMPTY_CONTEXT_CUSTOMIZERS). }
false;private,static;1;9;;private static String[] processActiveProfiles(@Nullable String[] activeProfiles) {     if (activeProfiles == null) {         return EMPTY_STRING_ARRAY.     }     // Active profiles must be unique     Set<String> profilesSet = new LinkedHashSet<>(Arrays.asList(activeProfiles)).     return StringUtils.toStringArray(profilesSet). }
true;protected,static;1;3;/**  * Generate a null-safe {@link String} representation of the supplied  * {@link ContextLoader} based solely on the fully qualified name of the  * loader or &quot.null&quot. if the supplied loader is {@code null}.  */ ;/**  * Generate a null-safe {@link String} representation of the supplied  * {@link ContextLoader} based solely on the fully qualified name of the  * loader or &quot.null&quot. if the supplied loader is {@code null}.  */ protected static String nullSafeClassName(@Nullable ContextLoader contextLoader) {     return (contextLoader != null ? contextLoader.getClass().getName() : "null"). }
