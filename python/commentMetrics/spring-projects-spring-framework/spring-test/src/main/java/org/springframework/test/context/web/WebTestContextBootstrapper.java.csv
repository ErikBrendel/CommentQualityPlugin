commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;9;/**  * Returns {@link WebDelegatingSmartContextLoader} if the supplied class is  * annotated with {@link WebAppConfiguration @WebAppConfiguration} and  * otherwise delegates to the superclass.  */ ;/**  * Returns {@link WebDelegatingSmartContextLoader} if the supplied class is  * annotated with {@link WebAppConfiguration @WebAppConfiguration} and  * otherwise delegates to the superclass.  */ @Override protected Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass) {     if (AnnotatedElementUtils.hasAnnotation(testClass, WebAppConfiguration.class)) {         return WebDelegatingSmartContextLoader.class.     } else {         return super.getDefaultContextLoaderClass(testClass).     } }
true;protected;1;11;/**  * Returns a {@link WebMergedContextConfiguration} if the test class in the  * supplied {@code MergedContextConfiguration} is annotated with  * {@link WebAppConfiguration @WebAppConfiguration} and otherwise returns  * the supplied instance unmodified.  */ ;/**  * Returns a {@link WebMergedContextConfiguration} if the test class in the  * supplied {@code MergedContextConfiguration} is annotated with  * {@link WebAppConfiguration @WebAppConfiguration} and otherwise returns  * the supplied instance unmodified.  */ @Override protected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig) {     WebAppConfiguration webAppConfiguration = AnnotatedElementUtils.findMergedAnnotation(mergedConfig.getTestClass(), WebAppConfiguration.class).     if (webAppConfiguration != null) {         return new WebMergedContextConfiguration(mergedConfig, webAppConfiguration.value()).     } else {         return mergedConfig.     } }
