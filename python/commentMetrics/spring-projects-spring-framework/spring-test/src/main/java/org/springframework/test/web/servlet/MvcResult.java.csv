commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the performed request.  * @return the request, never {@code null}  */ ;/**  * Return the performed request.  * @return the request, never {@code null}  */ MockHttpServletRequest getRequest().
true;;0;1;/**  * Return the resulting response.  * @return the response, never {@code null}  */ ;/**  * Return the resulting response.  * @return the response, never {@code null}  */ MockHttpServletResponse getResponse().
true;;0;2;/**  * Return the executed handler.  * @return the handler, possibly {@code null} if none were executed  */ ;/**  * Return the executed handler.  * @return the handler, possibly {@code null} if none were executed  */ @Nullable Object getHandler().
true;;0;2;/**  * Return interceptors around the handler.  * @return interceptors, or {@code null} if none were selected  */ ;/**  * Return interceptors around the handler.  * @return interceptors, or {@code null} if none were selected  */ @Nullable HandlerInterceptor[] getInterceptors().
true;;0;2;/**  * Return the {@code ModelAndView} prepared by the handler.  * @return a {@code ModelAndView}, or {@code null} if none  */ ;/**  * Return the {@code ModelAndView} prepared by the handler.  * @return a {@code ModelAndView}, or {@code null} if none  */ @Nullable ModelAndView getModelAndView().
true;;0;2;/**  * Return any exception raised by a handler and successfully resolved  * through a {@link HandlerExceptionResolver}.  * @return an exception, or {@code null} if none  */ ;/**  * Return any exception raised by a handler and successfully resolved  * through a {@link HandlerExceptionResolver}.  * @return an exception, or {@code null} if none  */ @Nullable Exception getResolvedException().
true;;0;1;/**  * Return the "output" flash attributes saved during request processing.  * @return the {@code FlashMap}, possibly empty  */ ;/**  * Return the "output" flash attributes saved during request processing.  * @return the {@code FlashMap}, possibly empty  */ FlashMap getFlashMap().
true;;0;1;/**  * Get the result of async execution.  * <p>This method will wait for the async result to be set within the  * timeout value associated with the async request, see  * {@link org.springframework.mock.web.MockAsyncContext#setTimeout  * MockAsyncContext#setTimeout}. Alternatively, use  * {@link #getAsyncResult(long)} to specify the amount of time to wait.  * @throws IllegalStateException if the async result was not set  */ ;/**  * Get the result of async execution.  * <p>This method will wait for the async result to be set within the  * timeout value associated with the async request, see  * {@link org.springframework.mock.web.MockAsyncContext#setTimeout  * MockAsyncContext#setTimeout}. Alternatively, use  * {@link #getAsyncResult(long)} to specify the amount of time to wait.  * @throws IllegalStateException if the async result was not set  */ Object getAsyncResult().
true;;1;1;/**  * Get the result of async execution and wait if necessary.  * @param timeToWait how long to wait for the async result to be set, in  * 	milliseconds. if -1, then fall back on the timeout value associated with  * 	the async request, see  * 	{@link org.springframework.mock.web.MockAsyncContext#setTimeout  * 	MockAsyncContext#setTimeout} for more details.  * @throws IllegalStateException if the async result was not set  */ ;/**  * Get the result of async execution and wait if necessary.  * @param timeToWait how long to wait for the async result to be set, in  * 	milliseconds. if -1, then fall back on the timeout value associated with  * 	the async request, see  * 	{@link org.springframework.mock.web.MockAsyncContext#setTimeout  * 	MockAsyncContext#setTimeout} for more details.  * @throws IllegalStateException if the async result was not set  */ Object getAsyncResult(long timeToWait).
