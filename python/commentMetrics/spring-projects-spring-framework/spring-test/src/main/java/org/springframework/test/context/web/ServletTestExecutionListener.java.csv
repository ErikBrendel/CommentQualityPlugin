commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;4;/**  * Returns {@code 1000}.  */ ;/**  * Returns {@code 1000}.  */ @Override public final int getOrder() {     return 1000. }
true;public;1;4;/**  * Sets up thread-local state during the <em>test instance preparation</em>  * callback phase via Spring Web's {@link RequestContextHolder}, but only if  * the {@linkplain TestContext#getTestClass() test class} is annotated with  * {@link WebAppConfiguration @WebAppConfiguration}.  * @see TestExecutionListener#prepareTestInstance(TestContext)  * @see #setUpRequestContextIfNecessary(TestContext)  */ ;/**  * Sets up thread-local state during the <em>test instance preparation</em>  * callback phase via Spring Web's {@link RequestContextHolder}, but only if  * the {@linkplain TestContext#getTestClass() test class} is annotated with  * {@link WebAppConfiguration @WebAppConfiguration}.  * @see TestExecutionListener#prepareTestInstance(TestContext)  * @see #setUpRequestContextIfNecessary(TestContext)  */ @Override public void prepareTestInstance(TestContext testContext) throws Exception {     setUpRequestContextIfNecessary(testContext). }
true;public;1;4;/**  * Sets up thread-local state before each test method via Spring Web's  * {@link RequestContextHolder}, but only if the  * {@linkplain TestContext#getTestClass() test class} is annotated with  * {@link WebAppConfiguration @WebAppConfiguration}.  * @see TestExecutionListener#beforeTestMethod(TestContext)  * @see #setUpRequestContextIfNecessary(TestContext)  */ ;/**  * Sets up thread-local state before each test method via Spring Web's  * {@link RequestContextHolder}, but only if the  * {@linkplain TestContext#getTestClass() test class} is annotated with  * {@link WebAppConfiguration @WebAppConfiguration}.  * @see TestExecutionListener#beforeTestMethod(TestContext)  * @see #setUpRequestContextIfNecessary(TestContext)  */ @Override public void beforeTestMethod(TestContext testContext) throws Exception {     setUpRequestContextIfNecessary(testContext). }
true;public;1;13;/**  * If the {@link #RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE} in the supplied  * {@code TestContext} has a value of {@link Boolean#TRUE}, this method will  * (1) clean up thread-local state after each test method by {@linkplain  * RequestContextHolder#resetRequestAttributes() resetting} Spring Web's  * {@code RequestContextHolder} and (2) ensure that new mocks are injected  * into the test instance for subsequent tests by setting the  * {@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE}  * in the test context to {@code true}.  * <p>The {@link #RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE} and  * {@link #POPULATED_REQUEST_CONTEXT_HOLDER_ATTRIBUTE} will be subsequently  * removed from the test context, regardless of their values.  * @see TestExecutionListener#afterTestMethod(TestContext)  */ ;/**  * If the {@link #RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE} in the supplied  * {@code TestContext} has a value of {@link Boolean#TRUE}, this method will  * (1) clean up thread-local state after each test method by {@linkplain  * RequestContextHolder#resetRequestAttributes() resetting} Spring Web's  * {@code RequestContextHolder} and (2) ensure that new mocks are injected  * into the test instance for subsequent tests by setting the  * {@link DependencyInjectionTestExecutionListener#REINJECT_DEPENDENCIES_ATTRIBUTE}  * in the test context to {@code true}.  * <p>The {@link #RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE} and  * {@link #POPULATED_REQUEST_CONTEXT_HOLDER_ATTRIBUTE} will be subsequently  * removed from the test context, regardless of their values.  * @see TestExecutionListener#afterTestMethod(TestContext)  */ @Override public void afterTestMethod(TestContext testContext) throws Exception {     if (Boolean.TRUE.equals(testContext.getAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE))) {         if (logger.isDebugEnabled()) {             logger.debug(String.format("Resetting RequestContextHolder for test context %s.", testContext)).         }         RequestContextHolder.resetRequestAttributes().         testContext.setAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE, Boolean.TRUE).     }     testContext.removeAttribute(POPULATED_REQUEST_CONTEXT_HOLDER_ATTRIBUTE).     testContext.removeAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE). }
false;private;1;4;;private boolean isActivated(TestContext testContext) {     return (Boolean.TRUE.equals(testContext.getAttribute(ACTIVATE_LISTENER)) || AnnotatedElementUtils.hasAnnotation(testContext.getTestClass(), WebAppConfiguration.class)). }
false;private;1;3;;private boolean alreadyPopulatedRequestContextHolder(TestContext testContext) {     return Boolean.TRUE.equals(testContext.getAttribute(POPULATED_REQUEST_CONTEXT_HOLDER_ATTRIBUTE)). }
false;private;1;39;;private void setUpRequestContextIfNecessary(TestContext testContext) {     if (!isActivated(testContext) || alreadyPopulatedRequestContextHolder(testContext)) {         return.     }     ApplicationContext context = testContext.getApplicationContext().     if (context instanceof WebApplicationContext) {         WebApplicationContext wac = (WebApplicationContext) context.         ServletContext servletContext = wac.getServletContext().         Assert.state(servletContext instanceof MockServletContext, () -> String.format("The WebApplicationContext for test context %s must be configured with a MockServletContext.", testContext)).         if (logger.isDebugEnabled()) {             logger.debug(String.format("Setting up MockHttpServletRequest, MockHttpServletResponse, ServletWebRequest, and RequestContextHolder for test context %s.", testContext)).         }         MockServletContext mockServletContext = (MockServletContext) servletContext.         MockHttpServletRequest request = new MockHttpServletRequest(mockServletContext).         request.setAttribute(CREATED_BY_THE_TESTCONTEXT_FRAMEWORK, Boolean.TRUE).         MockHttpServletResponse response = new MockHttpServletResponse().         ServletWebRequest servletWebRequest = new ServletWebRequest(request, response).         RequestContextHolder.setRequestAttributes(servletWebRequest).         testContext.setAttribute(POPULATED_REQUEST_CONTEXT_HOLDER_ATTRIBUTE, Boolean.TRUE).         testContext.setAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE, Boolean.TRUE).         if (wac instanceof ConfigurableApplicationContext) {             @SuppressWarnings("resource")             ConfigurableApplicationContext configurableApplicationContext = (ConfigurableApplicationContext) wac.             ConfigurableListableBeanFactory bf = configurableApplicationContext.getBeanFactory().             bf.registerResolvableDependency(MockHttpServletResponse.class, response).             bf.registerResolvableDependency(ServletWebRequest.class, servletWebRequest).         }     } }
