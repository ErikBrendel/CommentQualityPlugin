# id;timestamp;commentText;codeText;commentWords;codeWords
TestContextTransactionUtils -> public static DataSource retrieveDataSource(TestContext testContext, String name);1401991965;Retrieve the {@link DataSource} to use for the supplied {@linkplain TestContext_test context}._<p>The following algorithm is used to retrieve the {@code DataSource}_from the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the {@code DataSource} by type and name, if the supplied_{@code name} is non-empty._<li>Look up the {@code DataSource} by type._<li>Look up the {@code DataSource} by type and the_{@linkplain #DEFAULT_DATA_SOURCE_NAME default data source name}._@param testContext the test context for which the {@code DataSource}_should be retrieved_ never {@code null}_@param name the name of the {@code DataSource} to retrieve_ may be {@code null}_or <em>empty</em>_@return the {@code DataSource} to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving the {@code DataSource};public static DataSource retrieveDataSource(TestContext testContext, String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, DataSource.class)__			}__			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, DataSource> dataSources = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					DataSource.class)__				if (dataSources.size() == 1) {_					return dataSources.values().iterator().next()__				}_			}__			_			return bf.getBean(DEFAULT_DATA_SOURCE_NAME, DataSource.class)__		}_		catch (BeansException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Caught exception while retrieving DataSource for test context " + testContext, ex)__			}_			throw ex__		}_	};retrieve,the,link,data,source,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,code,data,source,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,code,data,source,by,type,and,name,if,the,supplied,code,name,is,non,empty,li,look,up,the,code,data,source,by,type,li,look,up,the,code,data,source,by,type,and,the,linkplain,default,data,source,name,param,test,context,the,test,context,for,which,the,code,data,source,should,be,retrieved,never,code,null,param,name,the,name,of,the,code,data,source,to,retrieve,may,be,code,null,or,em,empty,em,return,the,code,data,source,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,the,code,data,source;public,static,data,source,retrieve,data,source,test,context,test,context,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,data,source,class,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,data,source,data,sources,bean,factory,utils,beans,of,type,including,ancestors,lbf,data,source,class,if,data,sources,size,1,return,data,sources,values,iterator,next,return,bf,get,bean,data,source,class,catch,beans,exception,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,retrieving,data,source,for,test,context,test,context,ex,throw,ex
TestContextTransactionUtils -> public static DataSource retrieveDataSource(TestContext testContext, String name);1401995369;Retrieve the {@link DataSource} to use for the supplied {@linkplain TestContext_test context}._<p>The following algorithm is used to retrieve the {@code DataSource}_from the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the {@code DataSource} by type and name, if the supplied_{@code name} is non-empty._<li>Look up the {@code DataSource} by type._<li>Look up the {@code DataSource} by type and the_{@linkplain #DEFAULT_DATA_SOURCE_NAME default data source name}._@param testContext the test context for which the {@code DataSource}_should be retrieved_ never {@code null}_@param name the name of the {@code DataSource} to retrieve_ may be {@code null}_or <em>empty</em>_@return the {@code DataSource} to use_@throws BeansException if an error occurs while retrieving the {@code DataSource};public static DataSource retrieveDataSource(TestContext testContext, String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, DataSource.class)__			}__			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, DataSource> dataSources = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					DataSource.class)__				if (dataSources.size() == 1) {_					return dataSources.values().iterator().next()__				}_			}__			_			return bf.getBean(DEFAULT_DATA_SOURCE_NAME, DataSource.class)__		}_		catch (BeansException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Caught exception while retrieving DataSource for test context " + testContext, ex)__			}_			throw ex__		}_	};retrieve,the,link,data,source,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,code,data,source,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,code,data,source,by,type,and,name,if,the,supplied,code,name,is,non,empty,li,look,up,the,code,data,source,by,type,li,look,up,the,code,data,source,by,type,and,the,linkplain,default,data,source,name,param,test,context,the,test,context,for,which,the,code,data,source,should,be,retrieved,never,code,null,param,name,the,name,of,the,code,data,source,to,retrieve,may,be,code,null,or,em,empty,em,return,the,code,data,source,to,use,throws,beans,exception,if,an,error,occurs,while,retrieving,the,code,data,source;public,static,data,source,retrieve,data,source,test,context,test,context,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,data,source,class,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,data,source,data,sources,bean,factory,utils,beans,of,type,including,ancestors,lbf,data,source,class,if,data,sources,size,1,return,data,sources,values,iterator,next,return,bf,get,bean,data,source,class,catch,beans,exception,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,retrieving,data,source,for,test,context,test,context,ex,throw,ex
TestContextTransactionUtils -> public static DataSource retrieveDataSource(TestContext testContext, String name);1405645143;Retrieve the {@link DataSource} to use for the supplied {@linkplain TestContext_test context}._<p>The following algorithm is used to retrieve the {@code DataSource} from_the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the {@code DataSource} by type and name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_{@code DataSource} does not exist._<li>Attempt to look up a single {@code DataSource} by type._<li>Attempt to look up the {@code DataSource} by type and the_{@linkplain #DEFAULT_DATA_SOURCE_NAME default data source name}._@param testContext the test context for which the {@code DataSource}_should be retrieved_ never {@code null}_@param name the name of the {@code DataSource} to retrieve_ may be {@code null}_or <em>empty</em>_@return the {@code DataSource} to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named {@code DataSource};public static DataSource retrieveDataSource(TestContext testContext, String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, DataSource.class)__			}_		}_		catch (BeansException ex) {_			logger.error(_				String.format("Failed to retrieve DataSource named '%s' for test context %s", name, testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, DataSource> dataSources = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					DataSource.class)__				if (dataSources.size() == 1) {_					return dataSources.values().iterator().next()__				}_			}__			_			return bf.getBean(DEFAULT_DATA_SOURCE_NAME, DataSource.class)__		}_		catch (BeansException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Caught exception while retrieving DataSource for test context " + testContext, ex)__			}_			return null__		}_	};retrieve,the,link,data,source,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,code,data,source,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,code,data,source,by,type,and,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,code,data,source,does,not,exist,li,attempt,to,look,up,a,single,code,data,source,by,type,li,attempt,to,look,up,the,code,data,source,by,type,and,the,linkplain,default,data,source,name,param,test,context,the,test,context,for,which,the,code,data,source,should,be,retrieved,never,code,null,param,name,the,name,of,the,code,data,source,to,retrieve,may,be,code,null,or,em,empty,em,return,the,code,data,source,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,code,data,source;public,static,data,source,retrieve,data,source,test,context,test,context,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,data,source,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,data,source,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,data,source,data,sources,bean,factory,utils,beans,of,type,including,ancestors,lbf,data,source,class,if,data,sources,size,1,return,data,sources,values,iterator,next,return,bf,get,bean,data,source,class,catch,beans,exception,ex,if,logger,is,debug,enabled,logger,debug,caught,exception,while,retrieving,data,source,for,test,context,test,context,ex,return,null
TestContextTransactionUtils -> public static DataSource retrieveDataSource(TestContext testContext, String name);1413848647;Retrieve the {@link DataSource} to use for the supplied {@linkplain TestContext_test context}._<p>The following algorithm is used to retrieve the {@code DataSource} from_the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the {@code DataSource} by type and name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_{@code DataSource} does not exist._<li>Attempt to look up a single {@code DataSource} by type._<li>Attempt to look up the {@code DataSource} by type and the_{@linkplain #DEFAULT_DATA_SOURCE_NAME default data source name}._@param testContext the test context for which the {@code DataSource}_should be retrieved_ never {@code null}_@param name the name of the {@code DataSource} to retrieve_ may be {@code null}_or <em>empty</em>_@return the {@code DataSource} to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named {@code DataSource};public static DataSource retrieveDataSource(TestContext testContext, String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, DataSource.class)__			}_		}_		catch (BeansException ex) {_			logger.error(_				String.format("Failed to retrieve DataSource named '%s' for test context %s", name, testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, DataSource> dataSources = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					DataSource.class)__				if (dataSources.size() == 1) {_					return dataSources.values().iterator().next()__				}_			}__			_			return bf.getBean(DEFAULT_DATA_SOURCE_NAME, DataSource.class)__		}_		catch (BeansException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Caught exception while retrieving DataSource for test context " + testContext, ex)__			}_			return null__		}_	};retrieve,the,link,data,source,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,code,data,source,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,code,data,source,by,type,and,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,code,data,source,does,not,exist,li,attempt,to,look,up,a,single,code,data,source,by,type,li,attempt,to,look,up,the,code,data,source,by,type,and,the,linkplain,default,data,source,name,param,test,context,the,test,context,for,which,the,code,data,source,should,be,retrieved,never,code,null,param,name,the,name,of,the,code,data,source,to,retrieve,may,be,code,null,or,em,empty,em,return,the,code,data,source,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,code,data,source;public,static,data,source,retrieve,data,source,test,context,test,context,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,data,source,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,data,source,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,data,source,data,sources,bean,factory,utils,beans,of,type,including,ancestors,lbf,data,source,class,if,data,sources,size,1,return,data,sources,values,iterator,next,return,bf,get,bean,data,source,class,catch,beans,exception,ex,if,logger,is,debug,enabled,logger,debug,caught,exception,while,retrieving,data,source,for,test,context,test,context,ex,return,null
TestContextTransactionUtils -> public static DataSource retrieveDataSource(TestContext testContext, String name);1437841346;Retrieve the {@link DataSource} to use for the supplied {@linkplain TestContext_test context}._<p>The following algorithm is used to retrieve the {@code DataSource} from_the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the {@code DataSource} by type and name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_{@code DataSource} does not exist._<li>Attempt to look up a single {@code DataSource} by type._<li>Attempt to look up the {@code DataSource} by type and the_{@linkplain #DEFAULT_DATA_SOURCE_NAME default data source name}._@param testContext the test context for which the {@code DataSource}_should be retrieved_ never {@code null}_@param name the name of the {@code DataSource} to retrieve_ may be {@code null}_or <em>empty</em>_@return the {@code DataSource} to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named {@code DataSource};public static DataSource retrieveDataSource(TestContext testContext, String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, DataSource.class)__			}_		}_		catch (BeansException ex) {_			logger.error(_				String.format("Failed to retrieve DataSource named '%s' for test context %s", name, testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, DataSource> dataSources = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					DataSource.class)__				if (dataSources.size() == 1) {_					return dataSources.values().iterator().next()__				}_			}__			_			return bf.getBean(DEFAULT_DATA_SOURCE_NAME, DataSource.class)__		}_		catch (BeansException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Caught exception while retrieving DataSource for test context " + testContext, ex)__			}_			return null__		}_	};retrieve,the,link,data,source,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,code,data,source,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,code,data,source,by,type,and,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,code,data,source,does,not,exist,li,attempt,to,look,up,a,single,code,data,source,by,type,li,attempt,to,look,up,the,code,data,source,by,type,and,the,linkplain,default,data,source,name,param,test,context,the,test,context,for,which,the,code,data,source,should,be,retrieved,never,code,null,param,name,the,name,of,the,code,data,source,to,retrieve,may,be,code,null,or,em,empty,em,return,the,code,data,source,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,code,data,source;public,static,data,source,retrieve,data,source,test,context,test,context,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,data,source,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,data,source,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,data,source,data,sources,bean,factory,utils,beans,of,type,including,ancestors,lbf,data,source,class,if,data,sources,size,1,return,data,sources,values,iterator,next,return,bf,get,bean,data,source,class,catch,beans,exception,ex,if,logger,is,debug,enabled,logger,debug,caught,exception,while,retrieving,data,source,for,test,context,test,context,ex,return,null
TestContextTransactionUtils -> public static DataSource retrieveDataSource(TestContext testContext, String name);1454518713;Retrieve the {@link DataSource} to use for the supplied {@linkplain TestContext_test context}._<p>The following algorithm is used to retrieve the {@code DataSource} from_the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the {@code DataSource} by type and name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_{@code DataSource} does not exist._<li>Attempt to look up the single {@code DataSource} by type._<li>Attempt to look up the <em>primary</em> {@code DataSource} by type._<li>Attempt to look up the {@code DataSource} by type and the_{@linkplain #DEFAULT_DATA_SOURCE_NAME default data source name}._@param testContext the test context for which the {@code DataSource}_should be retrieved_ never {@code null}_@param name the name of the {@code DataSource} to retrieve_ may be {@code null}_or <em>empty</em>_@return the {@code DataSource} to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named {@code DataSource};public static DataSource retrieveDataSource(TestContext testContext, String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, DataSource.class)__			}_		}_		catch (BeansException ex) {_			logger.error(_				String.format("Failed to retrieve DataSource named '%s' for test context %s", name, testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, DataSource> dataSources = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					DataSource.class)__				if (dataSources.size() == 1) {_					return dataSources.values().iterator().next()__				}__				try {_					_					return bf.getBean(DataSource.class)__				}_				catch (BeansException ex) {_					logBeansException(testContext, ex, PlatformTransactionManager.class)__				}_			}__			_			return bf.getBean(DEFAULT_DATA_SOURCE_NAME, DataSource.class)__		}_		catch (BeansException ex) {_			logBeansException(testContext, ex, DataSource.class)__			return null__		}_	};retrieve,the,link,data,source,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,code,data,source,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,code,data,source,by,type,and,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,code,data,source,does,not,exist,li,attempt,to,look,up,the,single,code,data,source,by,type,li,attempt,to,look,up,the,em,primary,em,code,data,source,by,type,li,attempt,to,look,up,the,code,data,source,by,type,and,the,linkplain,default,data,source,name,param,test,context,the,test,context,for,which,the,code,data,source,should,be,retrieved,never,code,null,param,name,the,name,of,the,code,data,source,to,retrieve,may,be,code,null,or,em,empty,em,return,the,code,data,source,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,code,data,source;public,static,data,source,retrieve,data,source,test,context,test,context,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,data,source,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,data,source,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,data,source,data,sources,bean,factory,utils,beans,of,type,including,ancestors,lbf,data,source,class,if,data,sources,size,1,return,data,sources,values,iterator,next,try,return,bf,get,bean,data,source,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,return,bf,get,bean,data,source,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,data,source,class,return,null
TestContextTransactionUtils -> public static DataSource retrieveDataSource(TestContext testContext, String name);1468334463;Retrieve the {@link DataSource} to use for the supplied {@linkplain TestContext_test context}._<p>The following algorithm is used to retrieve the {@code DataSource} from_the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the {@code DataSource} by type and name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_{@code DataSource} does not exist._<li>Attempt to look up the single {@code DataSource} by type._<li>Attempt to look up the <em>primary</em> {@code DataSource} by type._<li>Attempt to look up the {@code DataSource} by type and the_{@linkplain #DEFAULT_DATA_SOURCE_NAME default data source name}._@param testContext the test context for which the {@code DataSource}_should be retrieved_ never {@code null}_@param name the name of the {@code DataSource} to retrieve_ may be {@code null}_or <em>empty</em>_@return the {@code DataSource} to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named {@code DataSource};public static DataSource retrieveDataSource(TestContext testContext, String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, DataSource.class)__			}_		}_		catch (BeansException ex) {_			logger.error(_				String.format("Failed to retrieve DataSource named '%s' for test context %s", name, testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, DataSource> dataSources = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					DataSource.class)__				if (dataSources.size() == 1) {_					return dataSources.values().iterator().next()__				}__				try {_					_					return bf.getBean(DataSource.class)__				}_				catch (BeansException ex) {_					logBeansException(testContext, ex, PlatformTransactionManager.class)__				}_			}__			_			return bf.getBean(DEFAULT_DATA_SOURCE_NAME, DataSource.class)__		}_		catch (BeansException ex) {_			logBeansException(testContext, ex, DataSource.class)__			return null__		}_	};retrieve,the,link,data,source,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,code,data,source,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,code,data,source,by,type,and,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,code,data,source,does,not,exist,li,attempt,to,look,up,the,single,code,data,source,by,type,li,attempt,to,look,up,the,em,primary,em,code,data,source,by,type,li,attempt,to,look,up,the,code,data,source,by,type,and,the,linkplain,default,data,source,name,param,test,context,the,test,context,for,which,the,code,data,source,should,be,retrieved,never,code,null,param,name,the,name,of,the,code,data,source,to,retrieve,may,be,code,null,or,em,empty,em,return,the,code,data,source,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,code,data,source;public,static,data,source,retrieve,data,source,test,context,test,context,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,data,source,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,data,source,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,data,source,data,sources,bean,factory,utils,beans,of,type,including,ancestors,lbf,data,source,class,if,data,sources,size,1,return,data,sources,values,iterator,next,try,return,bf,get,bean,data,source,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,return,bf,get,bean,data,source,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,data,source,class,return,null
TestContextTransactionUtils -> public static DataSource retrieveDataSource(TestContext testContext, String name);1477045587;Retrieve the {@link DataSource} to use for the supplied {@linkplain TestContext_test context}._<p>The following algorithm is used to retrieve the {@code DataSource} from_the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the {@code DataSource} by type and name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_{@code DataSource} does not exist._<li>Attempt to look up the single {@code DataSource} by type._<li>Attempt to look up the <em>primary</em> {@code DataSource} by type._<li>Attempt to look up the {@code DataSource} by type and the_{@linkplain #DEFAULT_DATA_SOURCE_NAME default data source name}._@param testContext the test context for which the {@code DataSource}_should be retrieved_ never {@code null}_@param name the name of the {@code DataSource} to retrieve_ may be {@code null}_or <em>empty</em>_@return the {@code DataSource} to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named {@code DataSource};public static DataSource retrieveDataSource(TestContext testContext, String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, DataSource.class)__			}_		}_		catch (BeansException ex) {_			logger.error(_				String.format("Failed to retrieve DataSource named '%s' for test context %s", name, testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, DataSource> dataSources = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					DataSource.class)__				if (dataSources.size() == 1) {_					return dataSources.values().iterator().next()__				}__				try {_					_					return bf.getBean(DataSource.class)__				}_				catch (BeansException ex) {_					logBeansException(testContext, ex, PlatformTransactionManager.class)__				}_			}__			_			return bf.getBean(DEFAULT_DATA_SOURCE_NAME, DataSource.class)__		}_		catch (BeansException ex) {_			logBeansException(testContext, ex, DataSource.class)__			return null__		}_	};retrieve,the,link,data,source,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,code,data,source,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,code,data,source,by,type,and,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,code,data,source,does,not,exist,li,attempt,to,look,up,the,single,code,data,source,by,type,li,attempt,to,look,up,the,em,primary,em,code,data,source,by,type,li,attempt,to,look,up,the,code,data,source,by,type,and,the,linkplain,default,data,source,name,param,test,context,the,test,context,for,which,the,code,data,source,should,be,retrieved,never,code,null,param,name,the,name,of,the,code,data,source,to,retrieve,may,be,code,null,or,em,empty,em,return,the,code,data,source,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,code,data,source;public,static,data,source,retrieve,data,source,test,context,test,context,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,data,source,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,data,source,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,data,source,data,sources,bean,factory,utils,beans,of,type,including,ancestors,lbf,data,source,class,if,data,sources,size,1,return,data,sources,values,iterator,next,try,return,bf,get,bean,data,source,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,return,bf,get,bean,data,source,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,data,source,class,return,null
TestContextTransactionUtils -> public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext, 			TransactionAttribute targetAttribute);1401991965;Create a delegating {@link TransactionAttribute} for the supplied target_{@link TransactionAttribute} and {@link TestContext}, using the names of_the test class and test method as the name of the transaction.__@param testContext the {@code TestContext} upon which to base the name_ never {@code null}_@param targetAttribute the {@code TransactionAttribute} to delegate to_ never {@code null}_@return the delegating {@code TransactionAttribute};public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext,_			TransactionAttribute targetAttribute) {_		Assert.notNull(testContext, "TestContext must not be null")__		Assert.notNull(targetAttribute, "Target TransactionAttribute must not be null")__		return new TestContextTransactionAttribute(targetAttribute, testContext)__	};create,a,delegating,link,transaction,attribute,for,the,supplied,target,link,transaction,attribute,and,link,test,context,using,the,names,of,the,test,class,and,test,method,as,the,name,of,the,transaction,param,test,context,the,code,test,context,upon,which,to,base,the,name,never,code,null,param,target,attribute,the,code,transaction,attribute,to,delegate,to,never,code,null,return,the,delegating,code,transaction,attribute;public,static,transaction,attribute,create,delegating,transaction,attribute,test,context,test,context,transaction,attribute,target,attribute,assert,not,null,test,context,test,context,must,not,be,null,assert,not,null,target,attribute,target,transaction,attribute,must,not,be,null,return,new,test,context,transaction,attribute,target,attribute,test,context
TestContextTransactionUtils -> public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext, 			TransactionAttribute targetAttribute);1401995369;Create a delegating {@link TransactionAttribute} for the supplied target_{@link TransactionAttribute} and {@link TestContext}, using the names of_the test class and test method to build the name of the transaction.__@param testContext the {@code TestContext} upon which to base the name_ never {@code null}_@param targetAttribute the {@code TransactionAttribute} to delegate to_ never {@code null}_@return the delegating {@code TransactionAttribute};public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext,_			TransactionAttribute targetAttribute) {_		Assert.notNull(testContext, "TestContext must not be null")__		Assert.notNull(targetAttribute, "Target TransactionAttribute must not be null")__		return new TestContextTransactionAttribute(targetAttribute, testContext)__	};create,a,delegating,link,transaction,attribute,for,the,supplied,target,link,transaction,attribute,and,link,test,context,using,the,names,of,the,test,class,and,test,method,to,build,the,name,of,the,transaction,param,test,context,the,code,test,context,upon,which,to,base,the,name,never,code,null,param,target,attribute,the,code,transaction,attribute,to,delegate,to,never,code,null,return,the,delegating,code,transaction,attribute;public,static,transaction,attribute,create,delegating,transaction,attribute,test,context,test,context,transaction,attribute,target,attribute,assert,not,null,test,context,test,context,must,not,be,null,assert,not,null,target,attribute,target,transaction,attribute,must,not,be,null,return,new,test,context,transaction,attribute,target,attribute,test,context
TestContextTransactionUtils -> public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext, 			TransactionAttribute targetAttribute);1405645143;Create a delegating {@link TransactionAttribute} for the supplied target_{@link TransactionAttribute} and {@link TestContext}, using the names of_the test class and test method to build the name of the transaction.__@param testContext the {@code TestContext} upon which to base the name_ never {@code null}_@param targetAttribute the {@code TransactionAttribute} to delegate to_ never {@code null}_@return the delegating {@code TransactionAttribute};public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext,_			TransactionAttribute targetAttribute) {_		Assert.notNull(testContext, "TestContext must not be null")__		Assert.notNull(targetAttribute, "Target TransactionAttribute must not be null")__		return new TestContextTransactionAttribute(targetAttribute, testContext)__	};create,a,delegating,link,transaction,attribute,for,the,supplied,target,link,transaction,attribute,and,link,test,context,using,the,names,of,the,test,class,and,test,method,to,build,the,name,of,the,transaction,param,test,context,the,code,test,context,upon,which,to,base,the,name,never,code,null,param,target,attribute,the,code,transaction,attribute,to,delegate,to,never,code,null,return,the,delegating,code,transaction,attribute;public,static,transaction,attribute,create,delegating,transaction,attribute,test,context,test,context,transaction,attribute,target,attribute,assert,not,null,test,context,test,context,must,not,be,null,assert,not,null,target,attribute,target,transaction,attribute,must,not,be,null,return,new,test,context,transaction,attribute,target,attribute,test,context
TestContextTransactionUtils -> public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext, 			TransactionAttribute targetAttribute);1413848647;Create a delegating {@link TransactionAttribute} for the supplied target_{@link TransactionAttribute} and {@link TestContext}, using the names of_the test class and test method to build the name of the transaction.__@param testContext the {@code TestContext} upon which to base the name_ never {@code null}_@param targetAttribute the {@code TransactionAttribute} to delegate to_ never {@code null}_@return the delegating {@code TransactionAttribute};public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext,_			TransactionAttribute targetAttribute) {_		Assert.notNull(testContext, "TestContext must not be null")__		Assert.notNull(targetAttribute, "Target TransactionAttribute must not be null")__		return new TestContextTransactionAttribute(targetAttribute, testContext)__	};create,a,delegating,link,transaction,attribute,for,the,supplied,target,link,transaction,attribute,and,link,test,context,using,the,names,of,the,test,class,and,test,method,to,build,the,name,of,the,transaction,param,test,context,the,code,test,context,upon,which,to,base,the,name,never,code,null,param,target,attribute,the,code,transaction,attribute,to,delegate,to,never,code,null,return,the,delegating,code,transaction,attribute;public,static,transaction,attribute,create,delegating,transaction,attribute,test,context,test,context,transaction,attribute,target,attribute,assert,not,null,test,context,test,context,must,not,be,null,assert,not,null,target,attribute,target,transaction,attribute,must,not,be,null,return,new,test,context,transaction,attribute,target,attribute,test,context
TestContextTransactionUtils -> public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext, 			TransactionAttribute targetAttribute);1437841346;Create a delegating {@link TransactionAttribute} for the supplied target_{@link TransactionAttribute} and {@link TestContext}, using the names of_the test class and test method to build the name of the transaction.__@param testContext the {@code TestContext} upon which to base the name_ never {@code null}_@param targetAttribute the {@code TransactionAttribute} to delegate to_ never {@code null}_@return the delegating {@code TransactionAttribute};public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext,_			TransactionAttribute targetAttribute) {_		Assert.notNull(testContext, "TestContext must not be null")__		Assert.notNull(targetAttribute, "Target TransactionAttribute must not be null")__		return new TestContextTransactionAttribute(targetAttribute, testContext)__	};create,a,delegating,link,transaction,attribute,for,the,supplied,target,link,transaction,attribute,and,link,test,context,using,the,names,of,the,test,class,and,test,method,to,build,the,name,of,the,transaction,param,test,context,the,code,test,context,upon,which,to,base,the,name,never,code,null,param,target,attribute,the,code,transaction,attribute,to,delegate,to,never,code,null,return,the,delegating,code,transaction,attribute;public,static,transaction,attribute,create,delegating,transaction,attribute,test,context,test,context,transaction,attribute,target,attribute,assert,not,null,test,context,test,context,must,not,be,null,assert,not,null,target,attribute,target,transaction,attribute,must,not,be,null,return,new,test,context,transaction,attribute,target,attribute,test,context
TestContextTransactionUtils -> public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext, 			TransactionAttribute targetAttribute);1454518713;Create a delegating {@link TransactionAttribute} for the supplied target_{@link TransactionAttribute} and {@link TestContext}, using the names of_the test class and test method to build the name of the transaction.__@param testContext the {@code TestContext} upon which to base the name_ never {@code null}_@param targetAttribute the {@code TransactionAttribute} to delegate to_ never {@code null}_@return the delegating {@code TransactionAttribute};public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext,_			TransactionAttribute targetAttribute) {_		Assert.notNull(testContext, "TestContext must not be null")__		Assert.notNull(targetAttribute, "Target TransactionAttribute must not be null")__		return new TestContextTransactionAttribute(targetAttribute, testContext)__	};create,a,delegating,link,transaction,attribute,for,the,supplied,target,link,transaction,attribute,and,link,test,context,using,the,names,of,the,test,class,and,test,method,to,build,the,name,of,the,transaction,param,test,context,the,code,test,context,upon,which,to,base,the,name,never,code,null,param,target,attribute,the,code,transaction,attribute,to,delegate,to,never,code,null,return,the,delegating,code,transaction,attribute;public,static,transaction,attribute,create,delegating,transaction,attribute,test,context,test,context,transaction,attribute,target,attribute,assert,not,null,test,context,test,context,must,not,be,null,assert,not,null,target,attribute,target,transaction,attribute,must,not,be,null,return,new,test,context,transaction,attribute,target,attribute,test,context
TestContextTransactionUtils -> public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext, 			TransactionAttribute targetAttribute);1468334463;Create a delegating {@link TransactionAttribute} for the supplied target_{@link TransactionAttribute} and {@link TestContext}, using the names of_the test class and test method to build the name of the transaction.__@param testContext the {@code TestContext} upon which to base the name_ never {@code null}_@param targetAttribute the {@code TransactionAttribute} to delegate to_ never {@code null}_@return the delegating {@code TransactionAttribute};public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext,_			TransactionAttribute targetAttribute) {_		Assert.notNull(testContext, "TestContext must not be null")__		Assert.notNull(targetAttribute, "Target TransactionAttribute must not be null")__		return new TestContextTransactionAttribute(targetAttribute, testContext)__	};create,a,delegating,link,transaction,attribute,for,the,supplied,target,link,transaction,attribute,and,link,test,context,using,the,names,of,the,test,class,and,test,method,to,build,the,name,of,the,transaction,param,test,context,the,code,test,context,upon,which,to,base,the,name,never,code,null,param,target,attribute,the,code,transaction,attribute,to,delegate,to,never,code,null,return,the,delegating,code,transaction,attribute;public,static,transaction,attribute,create,delegating,transaction,attribute,test,context,test,context,transaction,attribute,target,attribute,assert,not,null,test,context,test,context,must,not,be,null,assert,not,null,target,attribute,target,transaction,attribute,must,not,be,null,return,new,test,context,transaction,attribute,target,attribute,test,context
TestContextTransactionUtils -> public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext, 			TransactionAttribute targetAttribute);1477045587;Create a delegating {@link TransactionAttribute} for the supplied target_{@link TransactionAttribute} and {@link TestContext}, using the names of_the test class and test method to build the name of the transaction.__@param testContext the {@code TestContext} upon which to base the name_ never {@code null}_@param targetAttribute the {@code TransactionAttribute} to delegate to_ never {@code null}_@return the delegating {@code TransactionAttribute};public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext,_			TransactionAttribute targetAttribute) {_		Assert.notNull(testContext, "TestContext must not be null")__		Assert.notNull(targetAttribute, "Target TransactionAttribute must not be null")__		return new TestContextTransactionAttribute(targetAttribute, testContext)__	};create,a,delegating,link,transaction,attribute,for,the,supplied,target,link,transaction,attribute,and,link,test,context,using,the,names,of,the,test,class,and,test,method,to,build,the,name,of,the,transaction,param,test,context,the,code,test,context,upon,which,to,base,the,name,never,code,null,param,target,attribute,the,code,transaction,attribute,to,delegate,to,never,code,null,return,the,delegating,code,transaction,attribute;public,static,transaction,attribute,create,delegating,transaction,attribute,test,context,test,context,transaction,attribute,target,attribute,assert,not,null,test,context,test,context,must,not,be,null,assert,not,null,target,attribute,target,transaction,attribute,must,not,be,null,return,new,test,context,transaction,attribute,target,attribute,test,context
TestContextTransactionUtils -> public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext, 			TransactionAttribute targetAttribute);1495868221;Create a delegating {@link TransactionAttribute} for the supplied target_{@link TransactionAttribute} and {@link TestContext}, using the names of_the test class and test method to build the name of the transaction.__@param testContext the {@code TestContext} upon which to base the name_ never {@code null}_@param targetAttribute the {@code TransactionAttribute} to delegate to_ never {@code null}_@return the delegating {@code TransactionAttribute};public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext,_			TransactionAttribute targetAttribute) {_		Assert.notNull(testContext, "TestContext must not be null")__		Assert.notNull(targetAttribute, "Target TransactionAttribute must not be null")__		return new TestContextTransactionAttribute(targetAttribute, testContext)__	};create,a,delegating,link,transaction,attribute,for,the,supplied,target,link,transaction,attribute,and,link,test,context,using,the,names,of,the,test,class,and,test,method,to,build,the,name,of,the,transaction,param,test,context,the,code,test,context,upon,which,to,base,the,name,never,code,null,param,target,attribute,the,code,transaction,attribute,to,delegate,to,never,code,null,return,the,delegating,code,transaction,attribute;public,static,transaction,attribute,create,delegating,transaction,attribute,test,context,test,context,transaction,attribute,target,attribute,assert,not,null,test,context,test,context,must,not,be,null,assert,not,null,target,attribute,target,transaction,attribute,must,not,be,null,return,new,test,context,transaction,attribute,target,attribute,test,context
TestContextTransactionUtils -> public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext, 			TransactionAttribute targetAttribute);1502974979;Create a delegating {@link TransactionAttribute} for the supplied target_{@link TransactionAttribute} and {@link TestContext}, using the names of_the test class and test method to build the name of the transaction.__@param testContext the {@code TestContext} upon which to base the name_ never {@code null}_@param targetAttribute the {@code TransactionAttribute} to delegate to_ never {@code null}_@return the delegating {@code TransactionAttribute};public static TransactionAttribute createDelegatingTransactionAttribute(TestContext testContext,_			TransactionAttribute targetAttribute) {_		Assert.notNull(testContext, "TestContext must not be null")__		Assert.notNull(targetAttribute, "Target TransactionAttribute must not be null")__		return new TestContextTransactionAttribute(targetAttribute, testContext)__	};create,a,delegating,link,transaction,attribute,for,the,supplied,target,link,transaction,attribute,and,link,test,context,using,the,names,of,the,test,class,and,test,method,to,build,the,name,of,the,transaction,param,test,context,the,code,test,context,upon,which,to,base,the,name,never,code,null,param,target,attribute,the,code,transaction,attribute,to,delegate,to,never,code,null,return,the,delegating,code,transaction,attribute;public,static,transaction,attribute,create,delegating,transaction,attribute,test,context,test,context,transaction,attribute,target,attribute,assert,not,null,test,context,test,context,must,not,be,null,assert,not,null,target,attribute,target,transaction,attribute,must,not,be,null,return,new,test,context,transaction,attribute,target,attribute,test,context
TestContextTransactionUtils -> public static TransactionAttribute createDelegatingTransactionAttribute( 			TestContext testContext, TransactionAttribute targetAttribute);1520251235;Create a delegating {@link TransactionAttribute} for the supplied target_{@link TransactionAttribute} and {@link TestContext}, using the names of_the test class and test method to build the name of the transaction._@param testContext the {@code TestContext} upon which to base the name_@param targetAttribute the {@code TransactionAttribute} to delegate to_@return the delegating {@code TransactionAttribute};public static TransactionAttribute createDelegatingTransactionAttribute(_			TestContext testContext, TransactionAttribute targetAttribute) {__		Assert.notNull(testContext, "TestContext must not be null")__		Assert.notNull(targetAttribute, "Target TransactionAttribute must not be null")__		return new TestContextTransactionAttribute(targetAttribute, testContext)__	};create,a,delegating,link,transaction,attribute,for,the,supplied,target,link,transaction,attribute,and,link,test,context,using,the,names,of,the,test,class,and,test,method,to,build,the,name,of,the,transaction,param,test,context,the,code,test,context,upon,which,to,base,the,name,param,target,attribute,the,code,transaction,attribute,to,delegate,to,return,the,delegating,code,transaction,attribute;public,static,transaction,attribute,create,delegating,transaction,attribute,test,context,test,context,transaction,attribute,target,attribute,assert,not,null,test,context,test,context,must,not,be,null,assert,not,null,target,attribute,target,transaction,attribute,must,not,be,null,return,new,test,context,transaction,attribute,target,attribute,test,context
TestContextTransactionUtils -> public static TransactionAttribute createDelegatingTransactionAttribute( 			TestContext testContext, TransactionAttribute targetAttribute);1530174524;Create a delegating {@link TransactionAttribute} for the supplied target_{@link TransactionAttribute} and {@link TestContext}, using the names of_the test class and test method to build the name of the transaction._@param testContext the {@code TestContext} upon which to base the name_@param targetAttribute the {@code TransactionAttribute} to delegate to_@return the delegating {@code TransactionAttribute};public static TransactionAttribute createDelegatingTransactionAttribute(_			TestContext testContext, TransactionAttribute targetAttribute) {__		Assert.notNull(testContext, "TestContext must not be null")__		Assert.notNull(targetAttribute, "Target TransactionAttribute must not be null")__		return new TestContextTransactionAttribute(targetAttribute, testContext)__	};create,a,delegating,link,transaction,attribute,for,the,supplied,target,link,transaction,attribute,and,link,test,context,using,the,names,of,the,test,class,and,test,method,to,build,the,name,of,the,transaction,param,test,context,the,code,test,context,upon,which,to,base,the,name,param,target,attribute,the,code,transaction,attribute,to,delegate,to,return,the,delegating,code,transaction,attribute;public,static,transaction,attribute,create,delegating,transaction,attribute,test,context,test,context,transaction,attribute,target,attribute,assert,not,null,test,context,test,context,must,not,be,null,assert,not,null,target,attribute,target,transaction,attribute,must,not,be,null,return,new,test,context,transaction,attribute,target,attribute,test,context
TestContextTransactionUtils -> @Nullable 	public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, @Nullable String name);1495868221;Retrieve the {@linkplain PlatformTransactionManager transaction manager}_to use for the supplied {@linkplain TestContext test context}._<p>The following algorithm is used to retrieve the transaction manager_from the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the transaction manager by type and explicit name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_transaction manager does not exist._<li>Attempt to look up the single transaction manager by type._<li>Attempt to look up the <em>primary</em> transaction manager by type._<li>Attempt to look up the transaction manager via a_{@link TransactionManagementConfigurer}, if present._<li>Attempt to look up the transaction manager by type and the_{@linkplain #DEFAULT_TRANSACTION_MANAGER_NAME default transaction manager_name}._@param testContext the test context for which the transaction manager_should be retrieved_ never {@code null}_@param name the name of the transaction manager to retrieve_ may be_{@code null} or <em>empty</em>_@return the transaction manager to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named transaction manager_@throws IllegalStateException if more than one TransactionManagementConfigurer_exists in the ApplicationContext;@Nullable_	public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, @Nullable String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, PlatformTransactionManager.class)__			}_		}_		catch (BeansException ex) {_			logger.error(String.format("Failed to retrieve transaction manager named '%s' for test context %s", name,_				testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, PlatformTransactionManager> txMgrs = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					PlatformTransactionManager.class)__				if (txMgrs.size() == 1) {_					return txMgrs.values().iterator().next()__				}__				try {_					_					return bf.getBean(PlatformTransactionManager.class)__				}_				catch (BeansException ex) {_					logBeansException(testContext, ex, PlatformTransactionManager.class)__				}__				_				Map<String, TransactionManagementConfigurer> configurers = BeanFactoryUtils.beansOfTypeIncludingAncestors(_					lbf, TransactionManagementConfigurer.class)__				Assert.state(configurers.size() <= 1,_						"Only one TransactionManagementConfigurer may exist in the ApplicationContext")__				if (configurers.size() == 1) {_					return configurers.values().iterator().next().annotationDrivenTransactionManager()__				}_			}__			_			return bf.getBean(DEFAULT_TRANSACTION_MANAGER_NAME, PlatformTransactionManager.class)__		}_		catch (BeansException ex) {_			logBeansException(testContext, ex, PlatformTransactionManager.class)__			return null__		}_	};retrieve,the,linkplain,platform,transaction,manager,transaction,manager,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,transaction,manager,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,transaction,manager,by,type,and,explicit,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,transaction,manager,does,not,exist,li,attempt,to,look,up,the,single,transaction,manager,by,type,li,attempt,to,look,up,the,em,primary,em,transaction,manager,by,type,li,attempt,to,look,up,the,transaction,manager,via,a,link,transaction,management,configurer,if,present,li,attempt,to,look,up,the,transaction,manager,by,type,and,the,linkplain,default,transaction,manager,name,param,test,context,the,test,context,for,which,the,transaction,manager,should,be,retrieved,never,code,null,param,name,the,name,of,the,transaction,manager,to,retrieve,may,be,code,null,or,em,empty,em,return,the,transaction,manager,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,transaction,manager,throws,illegal,state,exception,if,more,than,one,transaction,management,configurer,exists,in,the,application,context;nullable,public,static,platform,transaction,manager,retrieve,transaction,manager,test,context,test,context,nullable,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,platform,transaction,manager,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,transaction,manager,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,platform,transaction,manager,tx,mgrs,bean,factory,utils,beans,of,type,including,ancestors,lbf,platform,transaction,manager,class,if,tx,mgrs,size,1,return,tx,mgrs,values,iterator,next,try,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,map,string,transaction,management,configurer,configurers,bean,factory,utils,beans,of,type,including,ancestors,lbf,transaction,management,configurer,class,assert,state,configurers,size,1,only,one,transaction,management,configurer,may,exist,in,the,application,context,if,configurers,size,1,return,configurers,values,iterator,next,annotation,driven,transaction,manager,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,return,null
TestContextTransactionUtils -> @Nullable 	public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, @Nullable String name);1502974979;Retrieve the {@linkplain PlatformTransactionManager transaction manager}_to use for the supplied {@linkplain TestContext test context}._<p>The following algorithm is used to retrieve the transaction manager_from the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the transaction manager by type and explicit name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_transaction manager does not exist._<li>Attempt to look up the single transaction manager by type._<li>Attempt to look up the <em>primary</em> transaction manager by type._<li>Attempt to look up the transaction manager via a_{@link TransactionManagementConfigurer}, if present._<li>Attempt to look up the transaction manager by type and the_{@linkplain #DEFAULT_TRANSACTION_MANAGER_NAME default transaction manager_name}._@param testContext the test context for which the transaction manager_should be retrieved_ never {@code null}_@param name the name of the transaction manager to retrieve_ may be_{@code null} or <em>empty</em>_@return the transaction manager to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named transaction manager_@throws IllegalStateException if more than one TransactionManagementConfigurer_exists in the ApplicationContext;@Nullable_	public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, @Nullable String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, PlatformTransactionManager.class)__			}_		}_		catch (BeansException ex) {_			logger.error(String.format("Failed to retrieve transaction manager named '%s' for test context %s", name,_				testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, PlatformTransactionManager> txMgrs = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					PlatformTransactionManager.class)__				if (txMgrs.size() == 1) {_					return txMgrs.values().iterator().next()__				}__				try {_					_					return bf.getBean(PlatformTransactionManager.class)__				}_				catch (BeansException ex) {_					logBeansException(testContext, ex, PlatformTransactionManager.class)__				}__				_				Map<String, TransactionManagementConfigurer> configurers = BeanFactoryUtils.beansOfTypeIncludingAncestors(_					lbf, TransactionManagementConfigurer.class)__				Assert.state(configurers.size() <= 1,_						"Only one TransactionManagementConfigurer may exist in the ApplicationContext")__				if (configurers.size() == 1) {_					return configurers.values().iterator().next().annotationDrivenTransactionManager()__				}_			}__			_			return bf.getBean(DEFAULT_TRANSACTION_MANAGER_NAME, PlatformTransactionManager.class)__		}_		catch (BeansException ex) {_			logBeansException(testContext, ex, PlatformTransactionManager.class)__			return null__		}_	};retrieve,the,linkplain,platform,transaction,manager,transaction,manager,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,transaction,manager,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,transaction,manager,by,type,and,explicit,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,transaction,manager,does,not,exist,li,attempt,to,look,up,the,single,transaction,manager,by,type,li,attempt,to,look,up,the,em,primary,em,transaction,manager,by,type,li,attempt,to,look,up,the,transaction,manager,via,a,link,transaction,management,configurer,if,present,li,attempt,to,look,up,the,transaction,manager,by,type,and,the,linkplain,default,transaction,manager,name,param,test,context,the,test,context,for,which,the,transaction,manager,should,be,retrieved,never,code,null,param,name,the,name,of,the,transaction,manager,to,retrieve,may,be,code,null,or,em,empty,em,return,the,transaction,manager,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,transaction,manager,throws,illegal,state,exception,if,more,than,one,transaction,management,configurer,exists,in,the,application,context;nullable,public,static,platform,transaction,manager,retrieve,transaction,manager,test,context,test,context,nullable,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,platform,transaction,manager,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,transaction,manager,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,platform,transaction,manager,tx,mgrs,bean,factory,utils,beans,of,type,including,ancestors,lbf,platform,transaction,manager,class,if,tx,mgrs,size,1,return,tx,mgrs,values,iterator,next,try,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,map,string,transaction,management,configurer,configurers,bean,factory,utils,beans,of,type,including,ancestors,lbf,transaction,management,configurer,class,assert,state,configurers,size,1,only,one,transaction,management,configurer,may,exist,in,the,application,context,if,configurers,size,1,return,configurers,values,iterator,next,annotation,driven,transaction,manager,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,return,null
TestContextTransactionUtils -> @Nullable 	public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, @Nullable String name);1520251235;Retrieve the {@linkplain PlatformTransactionManager transaction manager}_to use for the supplied {@linkplain TestContext test context}._<p>The following algorithm is used to retrieve the transaction manager_from the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the transaction manager by type and explicit name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_transaction manager does not exist._<li>Attempt to look up the single transaction manager by type._<li>Attempt to look up the <em>primary</em> transaction manager by type._<li>Attempt to look up the transaction manager via a_{@link TransactionManagementConfigurer}, if present._<li>Attempt to look up the transaction manager by type and the_{@linkplain #DEFAULT_TRANSACTION_MANAGER_NAME default transaction manager_name}._@param testContext the test context for which the transaction manager_should be retrieved_ never {@code null}_@param name the name of the transaction manager to retrieve_(may be {@code null} or <em>empty</em>)_@return the transaction manager to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named transaction manager_@throws IllegalStateException if more than one TransactionManagementConfigurer_exists in the ApplicationContext;@Nullable_	public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, @Nullable String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, PlatformTransactionManager.class)__			}_		}_		catch (BeansException ex) {_			logger.error(String.format("Failed to retrieve transaction manager named '%s' for test context %s",_					name, testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, PlatformTransactionManager> txMgrs =_						BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, PlatformTransactionManager.class)__				if (txMgrs.size() == 1) {_					return txMgrs.values().iterator().next()__				}__				try {_					_					return bf.getBean(PlatformTransactionManager.class)__				}_				catch (BeansException ex) {_					logBeansException(testContext, ex, PlatformTransactionManager.class)__				}__				_				Map<String, TransactionManagementConfigurer> configurers =_						BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, TransactionManagementConfigurer.class)__				Assert.state(configurers.size() <= 1,_						"Only one TransactionManagementConfigurer may exist in the ApplicationContext")__				if (configurers.size() == 1) {_					return configurers.values().iterator().next().annotationDrivenTransactionManager()__				}_			}__			_			return bf.getBean(DEFAULT_TRANSACTION_MANAGER_NAME, PlatformTransactionManager.class)__		}_		catch (BeansException ex) {_			logBeansException(testContext, ex, PlatformTransactionManager.class)__			return null__		}_	};retrieve,the,linkplain,platform,transaction,manager,transaction,manager,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,transaction,manager,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,transaction,manager,by,type,and,explicit,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,transaction,manager,does,not,exist,li,attempt,to,look,up,the,single,transaction,manager,by,type,li,attempt,to,look,up,the,em,primary,em,transaction,manager,by,type,li,attempt,to,look,up,the,transaction,manager,via,a,link,transaction,management,configurer,if,present,li,attempt,to,look,up,the,transaction,manager,by,type,and,the,linkplain,default,transaction,manager,name,param,test,context,the,test,context,for,which,the,transaction,manager,should,be,retrieved,never,code,null,param,name,the,name,of,the,transaction,manager,to,retrieve,may,be,code,null,or,em,empty,em,return,the,transaction,manager,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,transaction,manager,throws,illegal,state,exception,if,more,than,one,transaction,management,configurer,exists,in,the,application,context;nullable,public,static,platform,transaction,manager,retrieve,transaction,manager,test,context,test,context,nullable,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,platform,transaction,manager,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,transaction,manager,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,platform,transaction,manager,tx,mgrs,bean,factory,utils,beans,of,type,including,ancestors,lbf,platform,transaction,manager,class,if,tx,mgrs,size,1,return,tx,mgrs,values,iterator,next,try,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,map,string,transaction,management,configurer,configurers,bean,factory,utils,beans,of,type,including,ancestors,lbf,transaction,management,configurer,class,assert,state,configurers,size,1,only,one,transaction,management,configurer,may,exist,in,the,application,context,if,configurers,size,1,return,configurers,values,iterator,next,annotation,driven,transaction,manager,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,return,null
TestContextTransactionUtils -> @Nullable 	public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, @Nullable String name);1530174524;Retrieve the {@linkplain PlatformTransactionManager transaction manager}_to use for the supplied {@linkplain TestContext test context}._<p>The following algorithm is used to retrieve the transaction manager_from the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the transaction manager by type and explicit name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_transaction manager does not exist._<li>Attempt to look up the single transaction manager by type._<li>Attempt to look up the <em>primary</em> transaction manager by type._<li>Attempt to look up the transaction manager via a_{@link TransactionManagementConfigurer}, if present._<li>Attempt to look up the transaction manager by type and the_{@linkplain #DEFAULT_TRANSACTION_MANAGER_NAME default transaction manager_name}._</ol>_@param testContext the test context for which the transaction manager_should be retrieved_ never {@code null}_@param name the name of the transaction manager to retrieve_(may be {@code null} or <em>empty</em>)_@return the transaction manager to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named transaction manager_@throws IllegalStateException if more than one TransactionManagementConfigurer_exists in the ApplicationContext;@Nullable_	public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, @Nullable String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, PlatformTransactionManager.class)__			}_		}_		catch (BeansException ex) {_			logger.error(String.format("Failed to retrieve transaction manager named '%s' for test context %s",_					name, testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, PlatformTransactionManager> txMgrs =_						BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, PlatformTransactionManager.class)__				if (txMgrs.size() == 1) {_					return txMgrs.values().iterator().next()__				}__				try {_					_					return bf.getBean(PlatformTransactionManager.class)__				}_				catch (BeansException ex) {_					logBeansException(testContext, ex, PlatformTransactionManager.class)__				}__				_				Map<String, TransactionManagementConfigurer> configurers =_						BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, TransactionManagementConfigurer.class)__				Assert.state(configurers.size() <= 1,_						"Only one TransactionManagementConfigurer may exist in the ApplicationContext")__				if (configurers.size() == 1) {_					return configurers.values().iterator().next().annotationDrivenTransactionManager()__				}_			}__			_			return bf.getBean(DEFAULT_TRANSACTION_MANAGER_NAME, PlatformTransactionManager.class)__		}_		catch (BeansException ex) {_			logBeansException(testContext, ex, PlatformTransactionManager.class)__			return null__		}_	};retrieve,the,linkplain,platform,transaction,manager,transaction,manager,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,transaction,manager,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,transaction,manager,by,type,and,explicit,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,transaction,manager,does,not,exist,li,attempt,to,look,up,the,single,transaction,manager,by,type,li,attempt,to,look,up,the,em,primary,em,transaction,manager,by,type,li,attempt,to,look,up,the,transaction,manager,via,a,link,transaction,management,configurer,if,present,li,attempt,to,look,up,the,transaction,manager,by,type,and,the,linkplain,default,transaction,manager,name,ol,param,test,context,the,test,context,for,which,the,transaction,manager,should,be,retrieved,never,code,null,param,name,the,name,of,the,transaction,manager,to,retrieve,may,be,code,null,or,em,empty,em,return,the,transaction,manager,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,transaction,manager,throws,illegal,state,exception,if,more,than,one,transaction,management,configurer,exists,in,the,application,context;nullable,public,static,platform,transaction,manager,retrieve,transaction,manager,test,context,test,context,nullable,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,platform,transaction,manager,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,transaction,manager,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,platform,transaction,manager,tx,mgrs,bean,factory,utils,beans,of,type,including,ancestors,lbf,platform,transaction,manager,class,if,tx,mgrs,size,1,return,tx,mgrs,values,iterator,next,try,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,map,string,transaction,management,configurer,configurers,bean,factory,utils,beans,of,type,including,ancestors,lbf,transaction,management,configurer,class,assert,state,configurers,size,1,only,one,transaction,management,configurer,may,exist,in,the,application,context,if,configurers,size,1,return,configurers,values,iterator,next,annotation,driven,transaction,manager,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,return,null
TestContextTransactionUtils -> public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, String name);1401991965;Retrieve the {@linkplain PlatformTransactionManager transaction manager}_to use for the supplied {@linkplain TestContext test context}._<p>The following algorithm is used to retrieve the transaction manager_from the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the transaction manager by type and name, if the supplied_{@code name} is non-empty._<li>Look up the transaction manager by type._<li>Look up the transaction manager via a {@link TransactionManagementConfigurer},_if present._<li>Look up the transaction manager by type and the_{@linkplain #DEFAULT_TRANSACTION_MANAGER_NAME default transaction manager_name}._@param testContext the test context for which the transaction manager_should be retrieved_ never {@code null}_@param name the name of the transaction manager to retrieve_ may be_{@code null} or <em>empty</em>_@return the transaction manager to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving the transaction manager;public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, PlatformTransactionManager.class)__			}__			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, PlatformTransactionManager> txMgrs = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					PlatformTransactionManager.class)__				if (txMgrs.size() == 1) {_					return txMgrs.values().iterator().next()__				}__				_				Map<String, TransactionManagementConfigurer> configurers = BeanFactoryUtils.beansOfTypeIncludingAncestors(_					lbf, TransactionManagementConfigurer.class)__				if (configurers.size() > 1) {_					throw new IllegalStateException(_						"Only one TransactionManagementConfigurer may exist in the ApplicationContext")__				}_				if (configurers.size() == 1) {_					return configurers.values().iterator().next().annotationDrivenTransactionManager()__				}_			}__			_			return bf.getBean(DEFAULT_TRANSACTION_MANAGER_NAME, PlatformTransactionManager.class)__		}_		catch (BeansException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Caught exception while retrieving transaction manager for test context " + testContext, ex)__			}_			throw ex__		}_	};retrieve,the,linkplain,platform,transaction,manager,transaction,manager,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,transaction,manager,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,transaction,manager,by,type,and,name,if,the,supplied,code,name,is,non,empty,li,look,up,the,transaction,manager,by,type,li,look,up,the,transaction,manager,via,a,link,transaction,management,configurer,if,present,li,look,up,the,transaction,manager,by,type,and,the,linkplain,default,transaction,manager,name,param,test,context,the,test,context,for,which,the,transaction,manager,should,be,retrieved,never,code,null,param,name,the,name,of,the,transaction,manager,to,retrieve,may,be,code,null,or,em,empty,em,return,the,transaction,manager,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,the,transaction,manager;public,static,platform,transaction,manager,retrieve,transaction,manager,test,context,test,context,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,platform,transaction,manager,class,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,platform,transaction,manager,tx,mgrs,bean,factory,utils,beans,of,type,including,ancestors,lbf,platform,transaction,manager,class,if,tx,mgrs,size,1,return,tx,mgrs,values,iterator,next,map,string,transaction,management,configurer,configurers,bean,factory,utils,beans,of,type,including,ancestors,lbf,transaction,management,configurer,class,if,configurers,size,1,throw,new,illegal,state,exception,only,one,transaction,management,configurer,may,exist,in,the,application,context,if,configurers,size,1,return,configurers,values,iterator,next,annotation,driven,transaction,manager,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,retrieving,transaction,manager,for,test,context,test,context,ex,throw,ex
TestContextTransactionUtils -> public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, String name);1401995369;Retrieve the {@linkplain PlatformTransactionManager transaction manager}_to use for the supplied {@linkplain TestContext test context}._<p>The following algorithm is used to retrieve the transaction manager_from the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the transaction manager by type and name, if the supplied_{@code name} is non-empty._<li>Look up the transaction manager by type._<li>Look up the transaction manager via a {@link TransactionManagementConfigurer},_if present._<li>Look up the transaction manager by type and the_{@linkplain #DEFAULT_TRANSACTION_MANAGER_NAME default transaction manager_name}._@param testContext the test context for which the transaction manager_should be retrieved_ never {@code null}_@param name the name of the transaction manager to retrieve_ may be_{@code null} or <em>empty</em>_@return the transaction manager to use_@throws BeansException if an error occurs while retrieving the transaction manager;public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, PlatformTransactionManager.class)__			}__			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, PlatformTransactionManager> txMgrs = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					PlatformTransactionManager.class)__				if (txMgrs.size() == 1) {_					return txMgrs.values().iterator().next()__				}__				_				Map<String, TransactionManagementConfigurer> configurers = BeanFactoryUtils.beansOfTypeIncludingAncestors(_					lbf, TransactionManagementConfigurer.class)__				if (configurers.size() > 1) {_					throw new IllegalStateException(_						"Only one TransactionManagementConfigurer may exist in the ApplicationContext")__				}_				if (configurers.size() == 1) {_					return configurers.values().iterator().next().annotationDrivenTransactionManager()__				}_			}__			_			return bf.getBean(DEFAULT_TRANSACTION_MANAGER_NAME, PlatformTransactionManager.class)__		}_		catch (BeansException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Caught exception while retrieving transaction manager for test context " + testContext, ex)__			}_			throw ex__		}_	};retrieve,the,linkplain,platform,transaction,manager,transaction,manager,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,transaction,manager,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,transaction,manager,by,type,and,name,if,the,supplied,code,name,is,non,empty,li,look,up,the,transaction,manager,by,type,li,look,up,the,transaction,manager,via,a,link,transaction,management,configurer,if,present,li,look,up,the,transaction,manager,by,type,and,the,linkplain,default,transaction,manager,name,param,test,context,the,test,context,for,which,the,transaction,manager,should,be,retrieved,never,code,null,param,name,the,name,of,the,transaction,manager,to,retrieve,may,be,code,null,or,em,empty,em,return,the,transaction,manager,to,use,throws,beans,exception,if,an,error,occurs,while,retrieving,the,transaction,manager;public,static,platform,transaction,manager,retrieve,transaction,manager,test,context,test,context,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,platform,transaction,manager,class,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,platform,transaction,manager,tx,mgrs,bean,factory,utils,beans,of,type,including,ancestors,lbf,platform,transaction,manager,class,if,tx,mgrs,size,1,return,tx,mgrs,values,iterator,next,map,string,transaction,management,configurer,configurers,bean,factory,utils,beans,of,type,including,ancestors,lbf,transaction,management,configurer,class,if,configurers,size,1,throw,new,illegal,state,exception,only,one,transaction,management,configurer,may,exist,in,the,application,context,if,configurers,size,1,return,configurers,values,iterator,next,annotation,driven,transaction,manager,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,if,logger,is,warn,enabled,logger,warn,caught,exception,while,retrieving,transaction,manager,for,test,context,test,context,ex,throw,ex
TestContextTransactionUtils -> public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, String name);1405645143;Retrieve the {@linkplain PlatformTransactionManager transaction manager}_to use for the supplied {@linkplain TestContext test context}._<p>The following algorithm is used to retrieve the transaction manager_from the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the transaction manager by type and explicit name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_transaction manager does not exist._<li>Attempt to look up the transaction manager by type._<li>Attempt to look up the transaction manager via a_{@link TransactionManagementConfigurer}, if present._<li>Attempt to look up the transaction manager by type and the_{@linkplain #DEFAULT_TRANSACTION_MANAGER_NAME default transaction manager_name}._@param testContext the test context for which the transaction manager_should be retrieved_ never {@code null}_@param name the name of the transaction manager to retrieve_ may be_{@code null} or <em>empty</em>_@return the transaction manager to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named transaction manager;public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, PlatformTransactionManager.class)__			}_		}_		catch (BeansException ex) {_			logger.error(String.format("Failed to retrieve transaction manager named '%s' for test context %s", name,_				testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, PlatformTransactionManager> txMgrs = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					PlatformTransactionManager.class)__				if (txMgrs.size() == 1) {_					return txMgrs.values().iterator().next()__				}__				_				Map<String, TransactionManagementConfigurer> configurers = BeanFactoryUtils.beansOfTypeIncludingAncestors(_					lbf, TransactionManagementConfigurer.class)__				if (configurers.size() > 1) {_					throw new IllegalStateException(_						"Only one TransactionManagementConfigurer may exist in the ApplicationContext")__				}_				if (configurers.size() == 1) {_					return configurers.values().iterator().next().annotationDrivenTransactionManager()__				}_			}__			_			return bf.getBean(DEFAULT_TRANSACTION_MANAGER_NAME, PlatformTransactionManager.class)__		}_		catch (BeansException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Caught exception while retrieving transaction manager for test context " + testContext,_					ex)__			}_			return null__		}_	};retrieve,the,linkplain,platform,transaction,manager,transaction,manager,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,transaction,manager,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,transaction,manager,by,type,and,explicit,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,transaction,manager,does,not,exist,li,attempt,to,look,up,the,transaction,manager,by,type,li,attempt,to,look,up,the,transaction,manager,via,a,link,transaction,management,configurer,if,present,li,attempt,to,look,up,the,transaction,manager,by,type,and,the,linkplain,default,transaction,manager,name,param,test,context,the,test,context,for,which,the,transaction,manager,should,be,retrieved,never,code,null,param,name,the,name,of,the,transaction,manager,to,retrieve,may,be,code,null,or,em,empty,em,return,the,transaction,manager,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,transaction,manager;public,static,platform,transaction,manager,retrieve,transaction,manager,test,context,test,context,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,platform,transaction,manager,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,transaction,manager,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,platform,transaction,manager,tx,mgrs,bean,factory,utils,beans,of,type,including,ancestors,lbf,platform,transaction,manager,class,if,tx,mgrs,size,1,return,tx,mgrs,values,iterator,next,map,string,transaction,management,configurer,configurers,bean,factory,utils,beans,of,type,including,ancestors,lbf,transaction,management,configurer,class,if,configurers,size,1,throw,new,illegal,state,exception,only,one,transaction,management,configurer,may,exist,in,the,application,context,if,configurers,size,1,return,configurers,values,iterator,next,annotation,driven,transaction,manager,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,if,logger,is,debug,enabled,logger,debug,caught,exception,while,retrieving,transaction,manager,for,test,context,test,context,ex,return,null
TestContextTransactionUtils -> public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, String name);1413848647;Retrieve the {@linkplain PlatformTransactionManager transaction manager}_to use for the supplied {@linkplain TestContext test context}._<p>The following algorithm is used to retrieve the transaction manager_from the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the transaction manager by type and explicit name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_transaction manager does not exist._<li>Attempt to look up the transaction manager by type._<li>Attempt to look up the transaction manager via a_{@link TransactionManagementConfigurer}, if present._<li>Attempt to look up the transaction manager by type and the_{@linkplain #DEFAULT_TRANSACTION_MANAGER_NAME default transaction manager_name}._@param testContext the test context for which the transaction manager_should be retrieved_ never {@code null}_@param name the name of the transaction manager to retrieve_ may be_{@code null} or <em>empty</em>_@return the transaction manager to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named transaction manager;public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, PlatformTransactionManager.class)__			}_		}_		catch (BeansException ex) {_			logger.error(String.format("Failed to retrieve transaction manager named '%s' for test context %s", name,_				testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, PlatformTransactionManager> txMgrs = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					PlatformTransactionManager.class)__				if (txMgrs.size() == 1) {_					return txMgrs.values().iterator().next()__				}__				_				Map<String, TransactionManagementConfigurer> configurers = BeanFactoryUtils.beansOfTypeIncludingAncestors(_					lbf, TransactionManagementConfigurer.class)__				if (configurers.size() > 1) {_					throw new IllegalStateException(_						"Only one TransactionManagementConfigurer may exist in the ApplicationContext")__				}_				if (configurers.size() == 1) {_					return configurers.values().iterator().next().annotationDrivenTransactionManager()__				}_			}__			_			return bf.getBean(DEFAULT_TRANSACTION_MANAGER_NAME, PlatformTransactionManager.class)__		}_		catch (BeansException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Caught exception while retrieving transaction manager for test context " + testContext,_					ex)__			}_			return null__		}_	};retrieve,the,linkplain,platform,transaction,manager,transaction,manager,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,transaction,manager,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,transaction,manager,by,type,and,explicit,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,transaction,manager,does,not,exist,li,attempt,to,look,up,the,transaction,manager,by,type,li,attempt,to,look,up,the,transaction,manager,via,a,link,transaction,management,configurer,if,present,li,attempt,to,look,up,the,transaction,manager,by,type,and,the,linkplain,default,transaction,manager,name,param,test,context,the,test,context,for,which,the,transaction,manager,should,be,retrieved,never,code,null,param,name,the,name,of,the,transaction,manager,to,retrieve,may,be,code,null,or,em,empty,em,return,the,transaction,manager,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,transaction,manager;public,static,platform,transaction,manager,retrieve,transaction,manager,test,context,test,context,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,platform,transaction,manager,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,transaction,manager,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,platform,transaction,manager,tx,mgrs,bean,factory,utils,beans,of,type,including,ancestors,lbf,platform,transaction,manager,class,if,tx,mgrs,size,1,return,tx,mgrs,values,iterator,next,map,string,transaction,management,configurer,configurers,bean,factory,utils,beans,of,type,including,ancestors,lbf,transaction,management,configurer,class,if,configurers,size,1,throw,new,illegal,state,exception,only,one,transaction,management,configurer,may,exist,in,the,application,context,if,configurers,size,1,return,configurers,values,iterator,next,annotation,driven,transaction,manager,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,if,logger,is,debug,enabled,logger,debug,caught,exception,while,retrieving,transaction,manager,for,test,context,test,context,ex,return,null
TestContextTransactionUtils -> public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, String name);1437841346;Retrieve the {@linkplain PlatformTransactionManager transaction manager}_to use for the supplied {@linkplain TestContext test context}._<p>The following algorithm is used to retrieve the transaction manager_from the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the transaction manager by type and explicit name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_transaction manager does not exist._<li>Attempt to look up the transaction manager by type._<li>Attempt to look up the transaction manager via a_{@link TransactionManagementConfigurer}, if present._<li>Attempt to look up the transaction manager by type and the_{@linkplain #DEFAULT_TRANSACTION_MANAGER_NAME default transaction manager_name}._@param testContext the test context for which the transaction manager_should be retrieved_ never {@code null}_@param name the name of the transaction manager to retrieve_ may be_{@code null} or <em>empty</em>_@return the transaction manager to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named transaction manager_@throws IllegalStateException if more than one TransactionManagementConfigurer_exists in the ApplicationContext;public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, PlatformTransactionManager.class)__			}_		}_		catch (BeansException ex) {_			logger.error(String.format("Failed to retrieve transaction manager named '%s' for test context %s", name,_				testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, PlatformTransactionManager> txMgrs = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					PlatformTransactionManager.class)__				if (txMgrs.size() == 1) {_					return txMgrs.values().iterator().next()__				}__				_				Map<String, TransactionManagementConfigurer> configurers = BeanFactoryUtils.beansOfTypeIncludingAncestors(_					lbf, TransactionManagementConfigurer.class)__				if (configurers.size() > 1) {_					throw new IllegalStateException(_						"Only one TransactionManagementConfigurer may exist in the ApplicationContext")__				}_				if (configurers.size() == 1) {_					return configurers.values().iterator().next().annotationDrivenTransactionManager()__				}_			}__			_			return bf.getBean(DEFAULT_TRANSACTION_MANAGER_NAME, PlatformTransactionManager.class)__		}_		catch (BeansException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Caught exception while retrieving transaction manager for test context " + testContext,_					ex)__			}_			return null__		}_	};retrieve,the,linkplain,platform,transaction,manager,transaction,manager,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,transaction,manager,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,transaction,manager,by,type,and,explicit,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,transaction,manager,does,not,exist,li,attempt,to,look,up,the,transaction,manager,by,type,li,attempt,to,look,up,the,transaction,manager,via,a,link,transaction,management,configurer,if,present,li,attempt,to,look,up,the,transaction,manager,by,type,and,the,linkplain,default,transaction,manager,name,param,test,context,the,test,context,for,which,the,transaction,manager,should,be,retrieved,never,code,null,param,name,the,name,of,the,transaction,manager,to,retrieve,may,be,code,null,or,em,empty,em,return,the,transaction,manager,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,transaction,manager,throws,illegal,state,exception,if,more,than,one,transaction,management,configurer,exists,in,the,application,context;public,static,platform,transaction,manager,retrieve,transaction,manager,test,context,test,context,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,platform,transaction,manager,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,transaction,manager,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,platform,transaction,manager,tx,mgrs,bean,factory,utils,beans,of,type,including,ancestors,lbf,platform,transaction,manager,class,if,tx,mgrs,size,1,return,tx,mgrs,values,iterator,next,map,string,transaction,management,configurer,configurers,bean,factory,utils,beans,of,type,including,ancestors,lbf,transaction,management,configurer,class,if,configurers,size,1,throw,new,illegal,state,exception,only,one,transaction,management,configurer,may,exist,in,the,application,context,if,configurers,size,1,return,configurers,values,iterator,next,annotation,driven,transaction,manager,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,if,logger,is,debug,enabled,logger,debug,caught,exception,while,retrieving,transaction,manager,for,test,context,test,context,ex,return,null
TestContextTransactionUtils -> public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, String name);1454518713;Retrieve the {@linkplain PlatformTransactionManager transaction manager}_to use for the supplied {@linkplain TestContext test context}._<p>The following algorithm is used to retrieve the transaction manager_from the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the transaction manager by type and explicit name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_transaction manager does not exist._<li>Attempt to look up the single transaction manager by type._<li>Attempt to look up the <em>primary</em> transaction manager by type._<li>Attempt to look up the transaction manager via a_{@link TransactionManagementConfigurer}, if present._<li>Attempt to look up the transaction manager by type and the_{@linkplain #DEFAULT_TRANSACTION_MANAGER_NAME default transaction manager_name}._@param testContext the test context for which the transaction manager_should be retrieved_ never {@code null}_@param name the name of the transaction manager to retrieve_ may be_{@code null} or <em>empty</em>_@return the transaction manager to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named transaction manager_@throws IllegalStateException if more than one TransactionManagementConfigurer_exists in the ApplicationContext;public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, PlatformTransactionManager.class)__			}_		}_		catch (BeansException ex) {_			logger.error(String.format("Failed to retrieve transaction manager named '%s' for test context %s", name,_				testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, PlatformTransactionManager> txMgrs = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					PlatformTransactionManager.class)__				if (txMgrs.size() == 1) {_					return txMgrs.values().iterator().next()__				}__				try {_					_					return bf.getBean(PlatformTransactionManager.class)__				}_				catch (BeansException ex) {_					logBeansException(testContext, ex, PlatformTransactionManager.class)__				}__				_				Map<String, TransactionManagementConfigurer> configurers = BeanFactoryUtils.beansOfTypeIncludingAncestors(_					lbf, TransactionManagementConfigurer.class)__				if (configurers.size() > 1) {_					throw new IllegalStateException(_						"Only one TransactionManagementConfigurer may exist in the ApplicationContext")__				}_				if (configurers.size() == 1) {_					return configurers.values().iterator().next().annotationDrivenTransactionManager()__				}_			}__			_			return bf.getBean(DEFAULT_TRANSACTION_MANAGER_NAME, PlatformTransactionManager.class)__		}_		catch (BeansException ex) {_			logBeansException(testContext, ex, PlatformTransactionManager.class)__			return null__		}_	};retrieve,the,linkplain,platform,transaction,manager,transaction,manager,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,transaction,manager,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,transaction,manager,by,type,and,explicit,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,transaction,manager,does,not,exist,li,attempt,to,look,up,the,single,transaction,manager,by,type,li,attempt,to,look,up,the,em,primary,em,transaction,manager,by,type,li,attempt,to,look,up,the,transaction,manager,via,a,link,transaction,management,configurer,if,present,li,attempt,to,look,up,the,transaction,manager,by,type,and,the,linkplain,default,transaction,manager,name,param,test,context,the,test,context,for,which,the,transaction,manager,should,be,retrieved,never,code,null,param,name,the,name,of,the,transaction,manager,to,retrieve,may,be,code,null,or,em,empty,em,return,the,transaction,manager,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,transaction,manager,throws,illegal,state,exception,if,more,than,one,transaction,management,configurer,exists,in,the,application,context;public,static,platform,transaction,manager,retrieve,transaction,manager,test,context,test,context,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,platform,transaction,manager,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,transaction,manager,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,platform,transaction,manager,tx,mgrs,bean,factory,utils,beans,of,type,including,ancestors,lbf,platform,transaction,manager,class,if,tx,mgrs,size,1,return,tx,mgrs,values,iterator,next,try,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,map,string,transaction,management,configurer,configurers,bean,factory,utils,beans,of,type,including,ancestors,lbf,transaction,management,configurer,class,if,configurers,size,1,throw,new,illegal,state,exception,only,one,transaction,management,configurer,may,exist,in,the,application,context,if,configurers,size,1,return,configurers,values,iterator,next,annotation,driven,transaction,manager,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,return,null
TestContextTransactionUtils -> public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, String name);1468334463;Retrieve the {@linkplain PlatformTransactionManager transaction manager}_to use for the supplied {@linkplain TestContext test context}._<p>The following algorithm is used to retrieve the transaction manager_from the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the transaction manager by type and explicit name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_transaction manager does not exist._<li>Attempt to look up the single transaction manager by type._<li>Attempt to look up the <em>primary</em> transaction manager by type._<li>Attempt to look up the transaction manager via a_{@link TransactionManagementConfigurer}, if present._<li>Attempt to look up the transaction manager by type and the_{@linkplain #DEFAULT_TRANSACTION_MANAGER_NAME default transaction manager_name}._@param testContext the test context for which the transaction manager_should be retrieved_ never {@code null}_@param name the name of the transaction manager to retrieve_ may be_{@code null} or <em>empty</em>_@return the transaction manager to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named transaction manager_@throws IllegalStateException if more than one TransactionManagementConfigurer_exists in the ApplicationContext;public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, PlatformTransactionManager.class)__			}_		}_		catch (BeansException ex) {_			logger.error(String.format("Failed to retrieve transaction manager named '%s' for test context %s", name,_				testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, PlatformTransactionManager> txMgrs = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					PlatformTransactionManager.class)__				if (txMgrs.size() == 1) {_					return txMgrs.values().iterator().next()__				}__				try {_					_					return bf.getBean(PlatformTransactionManager.class)__				}_				catch (BeansException ex) {_					logBeansException(testContext, ex, PlatformTransactionManager.class)__				}__				_				Map<String, TransactionManagementConfigurer> configurers = BeanFactoryUtils.beansOfTypeIncludingAncestors(_					lbf, TransactionManagementConfigurer.class)__				Assert.state(configurers.size() <= 1,_						"Only one TransactionManagementConfigurer may exist in the ApplicationContext")__				if (configurers.size() == 1) {_					return configurers.values().iterator().next().annotationDrivenTransactionManager()__				}_			}__			_			return bf.getBean(DEFAULT_TRANSACTION_MANAGER_NAME, PlatformTransactionManager.class)__		}_		catch (BeansException ex) {_			logBeansException(testContext, ex, PlatformTransactionManager.class)__			return null__		}_	};retrieve,the,linkplain,platform,transaction,manager,transaction,manager,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,transaction,manager,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,transaction,manager,by,type,and,explicit,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,transaction,manager,does,not,exist,li,attempt,to,look,up,the,single,transaction,manager,by,type,li,attempt,to,look,up,the,em,primary,em,transaction,manager,by,type,li,attempt,to,look,up,the,transaction,manager,via,a,link,transaction,management,configurer,if,present,li,attempt,to,look,up,the,transaction,manager,by,type,and,the,linkplain,default,transaction,manager,name,param,test,context,the,test,context,for,which,the,transaction,manager,should,be,retrieved,never,code,null,param,name,the,name,of,the,transaction,manager,to,retrieve,may,be,code,null,or,em,empty,em,return,the,transaction,manager,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,transaction,manager,throws,illegal,state,exception,if,more,than,one,transaction,management,configurer,exists,in,the,application,context;public,static,platform,transaction,manager,retrieve,transaction,manager,test,context,test,context,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,platform,transaction,manager,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,transaction,manager,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,platform,transaction,manager,tx,mgrs,bean,factory,utils,beans,of,type,including,ancestors,lbf,platform,transaction,manager,class,if,tx,mgrs,size,1,return,tx,mgrs,values,iterator,next,try,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,map,string,transaction,management,configurer,configurers,bean,factory,utils,beans,of,type,including,ancestors,lbf,transaction,management,configurer,class,assert,state,configurers,size,1,only,one,transaction,management,configurer,may,exist,in,the,application,context,if,configurers,size,1,return,configurers,values,iterator,next,annotation,driven,transaction,manager,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,return,null
TestContextTransactionUtils -> public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, String name);1477045587;Retrieve the {@linkplain PlatformTransactionManager transaction manager}_to use for the supplied {@linkplain TestContext test context}._<p>The following algorithm is used to retrieve the transaction manager_from the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the transaction manager by type and explicit name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_transaction manager does not exist._<li>Attempt to look up the single transaction manager by type._<li>Attempt to look up the <em>primary</em> transaction manager by type._<li>Attempt to look up the transaction manager via a_{@link TransactionManagementConfigurer}, if present._<li>Attempt to look up the transaction manager by type and the_{@linkplain #DEFAULT_TRANSACTION_MANAGER_NAME default transaction manager_name}._@param testContext the test context for which the transaction manager_should be retrieved_ never {@code null}_@param name the name of the transaction manager to retrieve_ may be_{@code null} or <em>empty</em>_@return the transaction manager to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named transaction manager_@throws IllegalStateException if more than one TransactionManagementConfigurer_exists in the ApplicationContext;public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, PlatformTransactionManager.class)__			}_		}_		catch (BeansException ex) {_			logger.error(String.format("Failed to retrieve transaction manager named '%s' for test context %s", name,_				testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, PlatformTransactionManager> txMgrs = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					PlatformTransactionManager.class)__				if (txMgrs.size() == 1) {_					return txMgrs.values().iterator().next()__				}__				try {_					_					return bf.getBean(PlatformTransactionManager.class)__				}_				catch (BeansException ex) {_					logBeansException(testContext, ex, PlatformTransactionManager.class)__				}__				_				Map<String, TransactionManagementConfigurer> configurers = BeanFactoryUtils.beansOfTypeIncludingAncestors(_					lbf, TransactionManagementConfigurer.class)__				Assert.state(configurers.size() <= 1,_						"Only one TransactionManagementConfigurer may exist in the ApplicationContext")__				if (configurers.size() == 1) {_					return configurers.values().iterator().next().annotationDrivenTransactionManager()__				}_			}__			_			return bf.getBean(DEFAULT_TRANSACTION_MANAGER_NAME, PlatformTransactionManager.class)__		}_		catch (BeansException ex) {_			logBeansException(testContext, ex, PlatformTransactionManager.class)__			return null__		}_	};retrieve,the,linkplain,platform,transaction,manager,transaction,manager,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,transaction,manager,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,transaction,manager,by,type,and,explicit,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,transaction,manager,does,not,exist,li,attempt,to,look,up,the,single,transaction,manager,by,type,li,attempt,to,look,up,the,em,primary,em,transaction,manager,by,type,li,attempt,to,look,up,the,transaction,manager,via,a,link,transaction,management,configurer,if,present,li,attempt,to,look,up,the,transaction,manager,by,type,and,the,linkplain,default,transaction,manager,name,param,test,context,the,test,context,for,which,the,transaction,manager,should,be,retrieved,never,code,null,param,name,the,name,of,the,transaction,manager,to,retrieve,may,be,code,null,or,em,empty,em,return,the,transaction,manager,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,transaction,manager,throws,illegal,state,exception,if,more,than,one,transaction,management,configurer,exists,in,the,application,context;public,static,platform,transaction,manager,retrieve,transaction,manager,test,context,test,context,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,platform,transaction,manager,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,transaction,manager,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,platform,transaction,manager,tx,mgrs,bean,factory,utils,beans,of,type,including,ancestors,lbf,platform,transaction,manager,class,if,tx,mgrs,size,1,return,tx,mgrs,values,iterator,next,try,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,map,string,transaction,management,configurer,configurers,bean,factory,utils,beans,of,type,including,ancestors,lbf,transaction,management,configurer,class,assert,state,configurers,size,1,only,one,transaction,management,configurer,may,exist,in,the,application,context,if,configurers,size,1,return,configurers,values,iterator,next,annotation,driven,transaction,manager,return,bf,get,bean,platform,transaction,manager,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,return,null
TestContextTransactionUtils -> @Nullable 	public static DataSource retrieveDataSource(TestContext testContext, @Nullable String name);1495868221;Retrieve the {@link DataSource} to use for the supplied {@linkplain TestContext_test context}._<p>The following algorithm is used to retrieve the {@code DataSource} from_the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the {@code DataSource} by type and name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_{@code DataSource} does not exist._<li>Attempt to look up the single {@code DataSource} by type._<li>Attempt to look up the <em>primary</em> {@code DataSource} by type._<li>Attempt to look up the {@code DataSource} by type and the_{@linkplain #DEFAULT_DATA_SOURCE_NAME default data source name}._@param testContext the test context for which the {@code DataSource}_should be retrieved_ never {@code null}_@param name the name of the {@code DataSource} to retrieve_ may be {@code null}_or <em>empty</em>_@return the {@code DataSource} to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named {@code DataSource};@Nullable_	public static DataSource retrieveDataSource(TestContext testContext, @Nullable String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, DataSource.class)__			}_		}_		catch (BeansException ex) {_			logger.error(_				String.format("Failed to retrieve DataSource named '%s' for test context %s", name, testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, DataSource> dataSources = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					DataSource.class)__				if (dataSources.size() == 1) {_					return dataSources.values().iterator().next()__				}__				try {_					_					return bf.getBean(DataSource.class)__				}_				catch (BeansException ex) {_					logBeansException(testContext, ex, PlatformTransactionManager.class)__				}_			}__			_			return bf.getBean(DEFAULT_DATA_SOURCE_NAME, DataSource.class)__		}_		catch (BeansException ex) {_			logBeansException(testContext, ex, DataSource.class)__			return null__		}_	};retrieve,the,link,data,source,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,code,data,source,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,code,data,source,by,type,and,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,code,data,source,does,not,exist,li,attempt,to,look,up,the,single,code,data,source,by,type,li,attempt,to,look,up,the,em,primary,em,code,data,source,by,type,li,attempt,to,look,up,the,code,data,source,by,type,and,the,linkplain,default,data,source,name,param,test,context,the,test,context,for,which,the,code,data,source,should,be,retrieved,never,code,null,param,name,the,name,of,the,code,data,source,to,retrieve,may,be,code,null,or,em,empty,em,return,the,code,data,source,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,code,data,source;nullable,public,static,data,source,retrieve,data,source,test,context,test,context,nullable,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,data,source,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,data,source,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,data,source,data,sources,bean,factory,utils,beans,of,type,including,ancestors,lbf,data,source,class,if,data,sources,size,1,return,data,sources,values,iterator,next,try,return,bf,get,bean,data,source,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,return,bf,get,bean,data,source,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,data,source,class,return,null
TestContextTransactionUtils -> @Nullable 	public static DataSource retrieveDataSource(TestContext testContext, @Nullable String name);1502974979;Retrieve the {@link DataSource} to use for the supplied {@linkplain TestContext_test context}._<p>The following algorithm is used to retrieve the {@code DataSource} from_the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the {@code DataSource} by type and name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_{@code DataSource} does not exist._<li>Attempt to look up the single {@code DataSource} by type._<li>Attempt to look up the <em>primary</em> {@code DataSource} by type._<li>Attempt to look up the {@code DataSource} by type and the_{@linkplain #DEFAULT_DATA_SOURCE_NAME default data source name}._@param testContext the test context for which the {@code DataSource}_should be retrieved_ never {@code null}_@param name the name of the {@code DataSource} to retrieve_ may be {@code null}_or <em>empty</em>_@return the {@code DataSource} to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named {@code DataSource};@Nullable_	public static DataSource retrieveDataSource(TestContext testContext, @Nullable String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, DataSource.class)__			}_		}_		catch (BeansException ex) {_			logger.error(_				String.format("Failed to retrieve DataSource named '%s' for test context %s", name, testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, DataSource> dataSources = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf,_					DataSource.class)__				if (dataSources.size() == 1) {_					return dataSources.values().iterator().next()__				}__				try {_					_					return bf.getBean(DataSource.class)__				}_				catch (BeansException ex) {_					logBeansException(testContext, ex, PlatformTransactionManager.class)__				}_			}__			_			return bf.getBean(DEFAULT_DATA_SOURCE_NAME, DataSource.class)__		}_		catch (BeansException ex) {_			logBeansException(testContext, ex, DataSource.class)__			return null__		}_	};retrieve,the,link,data,source,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,code,data,source,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,code,data,source,by,type,and,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,code,data,source,does,not,exist,li,attempt,to,look,up,the,single,code,data,source,by,type,li,attempt,to,look,up,the,em,primary,em,code,data,source,by,type,li,attempt,to,look,up,the,code,data,source,by,type,and,the,linkplain,default,data,source,name,param,test,context,the,test,context,for,which,the,code,data,source,should,be,retrieved,never,code,null,param,name,the,name,of,the,code,data,source,to,retrieve,may,be,code,null,or,em,empty,em,return,the,code,data,source,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,code,data,source;nullable,public,static,data,source,retrieve,data,source,test,context,test,context,nullable,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,data,source,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,data,source,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,data,source,data,sources,bean,factory,utils,beans,of,type,including,ancestors,lbf,data,source,class,if,data,sources,size,1,return,data,sources,values,iterator,next,try,return,bf,get,bean,data,source,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,return,bf,get,bean,data,source,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,data,source,class,return,null
TestContextTransactionUtils -> @Nullable 	public static DataSource retrieveDataSource(TestContext testContext, @Nullable String name);1520251235;Retrieve the {@link DataSource} to use for the supplied {@linkplain TestContext_test context}._<p>The following algorithm is used to retrieve the {@code DataSource} from_the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the {@code DataSource} by type and name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_{@code DataSource} does not exist._<li>Attempt to look up the single {@code DataSource} by type._<li>Attempt to look up the <em>primary</em> {@code DataSource} by type._<li>Attempt to look up the {@code DataSource} by type and the_{@linkplain #DEFAULT_DATA_SOURCE_NAME default data source name}._@param testContext the test context for which the {@code DataSource}_should be retrieved_ never {@code null}_@param name the name of the {@code DataSource} to retrieve_(may be {@code null} or <em>empty</em>)_@return the {@code DataSource} to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named {@code DataSource};@Nullable_	public static DataSource retrieveDataSource(TestContext testContext, @Nullable String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, DataSource.class)__			}_		}_		catch (BeansException ex) {_			logger.error(String.format("Failed to retrieve DataSource named '%s' for test context %s",_					name, testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, DataSource> dataSources =_						BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, DataSource.class)__				if (dataSources.size() == 1) {_					return dataSources.values().iterator().next()__				}__				try {_					_					return bf.getBean(DataSource.class)__				}_				catch (BeansException ex) {_					logBeansException(testContext, ex, PlatformTransactionManager.class)__				}_			}__			_			return bf.getBean(DEFAULT_DATA_SOURCE_NAME, DataSource.class)__		}_		catch (BeansException ex) {_			logBeansException(testContext, ex, DataSource.class)__			return null__		}_	};retrieve,the,link,data,source,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,code,data,source,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,code,data,source,by,type,and,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,code,data,source,does,not,exist,li,attempt,to,look,up,the,single,code,data,source,by,type,li,attempt,to,look,up,the,em,primary,em,code,data,source,by,type,li,attempt,to,look,up,the,code,data,source,by,type,and,the,linkplain,default,data,source,name,param,test,context,the,test,context,for,which,the,code,data,source,should,be,retrieved,never,code,null,param,name,the,name,of,the,code,data,source,to,retrieve,may,be,code,null,or,em,empty,em,return,the,code,data,source,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,code,data,source;nullable,public,static,data,source,retrieve,data,source,test,context,test,context,nullable,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,data,source,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,data,source,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,data,source,data,sources,bean,factory,utils,beans,of,type,including,ancestors,lbf,data,source,class,if,data,sources,size,1,return,data,sources,values,iterator,next,try,return,bf,get,bean,data,source,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,return,bf,get,bean,data,source,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,data,source,class,return,null
TestContextTransactionUtils -> @Nullable 	public static DataSource retrieveDataSource(TestContext testContext, @Nullable String name);1530174524;Retrieve the {@link DataSource} to use for the supplied {@linkplain TestContext_test context}._<p>The following algorithm is used to retrieve the {@code DataSource} from_the {@link org.springframework.context.ApplicationContext ApplicationContext}_of the supplied test context:_<ol>_<li>Look up the {@code DataSource} by type and name, if the supplied_{@code name} is non-empty, throwing a {@link BeansException} if the named_{@code DataSource} does not exist._<li>Attempt to look up the single {@code DataSource} by type._<li>Attempt to look up the <em>primary</em> {@code DataSource} by type._<li>Attempt to look up the {@code DataSource} by type and the_{@linkplain #DEFAULT_DATA_SOURCE_NAME default data source name}._</ol>_@param testContext the test context for which the {@code DataSource}_should be retrieved_ never {@code null}_@param name the name of the {@code DataSource} to retrieve_(may be {@code null} or <em>empty</em>)_@return the {@code DataSource} to use, or {@code null} if not found_@throws BeansException if an error occurs while retrieving an explicitly_named {@code DataSource};@Nullable_	public static DataSource retrieveDataSource(TestContext testContext, @Nullable String name) {_		Assert.notNull(testContext, "TestContext must not be null")__		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory()___		try {_			_			if (StringUtils.hasText(name)) {_				return bf.getBean(name, DataSource.class)__			}_		}_		catch (BeansException ex) {_			logger.error(String.format("Failed to retrieve DataSource named '%s' for test context %s",_					name, testContext), ex)__			throw ex__		}__		try {_			if (bf instanceof ListableBeanFactory) {_				ListableBeanFactory lbf = (ListableBeanFactory) bf___				_				Map<String, DataSource> dataSources =_						BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, DataSource.class)__				if (dataSources.size() == 1) {_					return dataSources.values().iterator().next()__				}__				try {_					_					return bf.getBean(DataSource.class)__				}_				catch (BeansException ex) {_					logBeansException(testContext, ex, PlatformTransactionManager.class)__				}_			}__			_			return bf.getBean(DEFAULT_DATA_SOURCE_NAME, DataSource.class)__		}_		catch (BeansException ex) {_			logBeansException(testContext, ex, DataSource.class)__			return null__		}_	};retrieve,the,link,data,source,to,use,for,the,supplied,linkplain,test,context,test,context,p,the,following,algorithm,is,used,to,retrieve,the,code,data,source,from,the,link,org,springframework,context,application,context,application,context,of,the,supplied,test,context,ol,li,look,up,the,code,data,source,by,type,and,name,if,the,supplied,code,name,is,non,empty,throwing,a,link,beans,exception,if,the,named,code,data,source,does,not,exist,li,attempt,to,look,up,the,single,code,data,source,by,type,li,attempt,to,look,up,the,em,primary,em,code,data,source,by,type,li,attempt,to,look,up,the,code,data,source,by,type,and,the,linkplain,default,data,source,name,ol,param,test,context,the,test,context,for,which,the,code,data,source,should,be,retrieved,never,code,null,param,name,the,name,of,the,code,data,source,to,retrieve,may,be,code,null,or,em,empty,em,return,the,code,data,source,to,use,or,code,null,if,not,found,throws,beans,exception,if,an,error,occurs,while,retrieving,an,explicitly,named,code,data,source;nullable,public,static,data,source,retrieve,data,source,test,context,test,context,nullable,string,name,assert,not,null,test,context,test,context,must,not,be,null,bean,factory,bf,test,context,get,application,context,get,autowire,capable,bean,factory,try,if,string,utils,has,text,name,return,bf,get,bean,name,data,source,class,catch,beans,exception,ex,logger,error,string,format,failed,to,retrieve,data,source,named,s,for,test,context,s,name,test,context,ex,throw,ex,try,if,bf,instanceof,listable,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bf,map,string,data,source,data,sources,bean,factory,utils,beans,of,type,including,ancestors,lbf,data,source,class,if,data,sources,size,1,return,data,sources,values,iterator,next,try,return,bf,get,bean,data,source,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,platform,transaction,manager,class,return,bf,get,bean,data,source,class,catch,beans,exception,ex,log,beans,exception,test,context,ex,data,source,class,return,null
