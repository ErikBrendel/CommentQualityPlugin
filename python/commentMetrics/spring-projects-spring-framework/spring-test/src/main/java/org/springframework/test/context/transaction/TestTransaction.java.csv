# id;timestamp;commentText;codeText;commentWords;codeWords
TestTransaction -> public static void flagForCommit();1404334604;Flag the current test-managed transaction for <em>commit</em>._<p>Invoking this method will <em>not</em> end the current transaction._Rather, the value of this flag will be used to determine whether or not_the current test-managed transaction should be rolled back or committed_once it is {@linkplain #end ended}._@throws IllegalStateException if a transaction is not active for the_current test_@see #isActive()_@see #isFlaggedForRollback()_@see #start()_@see #end();public static void flagForCommit() {_		setFlaggedForRollback(false)__	};flag,the,current,test,managed,transaction,for,em,commit,em,p,invoking,this,method,will,em,not,em,end,the,current,transaction,rather,the,value,of,this,flag,will,be,used,to,determine,whether,or,not,the,current,test,managed,transaction,should,be,rolled,back,or,committed,once,it,is,linkplain,end,ended,throws,illegal,state,exception,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,is,flagged,for,rollback,see,start,see,end;public,static,void,flag,for,commit,set,flagged,for,rollback,false
TestTransaction -> public static void flagForCommit();1405759527;Flag the current test-managed transaction for <em>commit</em>._<p>Invoking this method will <em>not</em> end the current transaction._Rather, the value of this flag will be used to determine whether or not_the current test-managed transaction should be rolled back or committed_once it is {@linkplain #end ended}._@throws IllegalStateException if a transaction is not active for the_current test_@see #isActive()_@see #isFlaggedForRollback()_@see #start()_@see #end();public static void flagForCommit() {_		setFlaggedForRollback(false)__	};flag,the,current,test,managed,transaction,for,em,commit,em,p,invoking,this,method,will,em,not,em,end,the,current,transaction,rather,the,value,of,this,flag,will,be,used,to,determine,whether,or,not,the,current,test,managed,transaction,should,be,rolled,back,or,committed,once,it,is,linkplain,end,ended,throws,illegal,state,exception,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,is,flagged,for,rollback,see,start,see,end;public,static,void,flag,for,commit,set,flagged,for,rollback,false
TestTransaction -> public static void flagForCommit();1405760350;Flag the current test-managed transaction for <em>commit</em>._<p>Invoking this method will <em>not</em> end the current transaction._Rather, the value of this flag will be used to determine whether or not_the current test-managed transaction should be rolled back or committed_once it is {@linkplain #end ended}._@throws IllegalStateException if a transaction is not active for the_current test_@see #isActive()_@see #isFlaggedForRollback()_@see #start()_@see #end();public static void flagForCommit() {_		setFlaggedForRollback(false)__	};flag,the,current,test,managed,transaction,for,em,commit,em,p,invoking,this,method,will,em,not,em,end,the,current,transaction,rather,the,value,of,this,flag,will,be,used,to,determine,whether,or,not,the,current,test,managed,transaction,should,be,rolled,back,or,committed,once,it,is,linkplain,end,ended,throws,illegal,state,exception,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,is,flagged,for,rollback,see,start,see,end;public,static,void,flag,for,commit,set,flagged,for,rollback,false
TestTransaction -> public static void flagForCommit();1413848647;Flag the current test-managed transaction for <em>commit</em>._<p>Invoking this method will <em>not</em> end the current transaction._Rather, the value of this flag will be used to determine whether or not_the current test-managed transaction should be rolled back or committed_once it is {@linkplain #end ended}._@throws IllegalStateException if a transaction is not active for the_current test_@see #isActive()_@see #isFlaggedForRollback()_@see #start()_@see #end();public static void flagForCommit() {_		setFlaggedForRollback(false)__	};flag,the,current,test,managed,transaction,for,em,commit,em,p,invoking,this,method,will,em,not,em,end,the,current,transaction,rather,the,value,of,this,flag,will,be,used,to,determine,whether,or,not,the,current,test,managed,transaction,should,be,rolled,back,or,committed,once,it,is,linkplain,end,ended,throws,illegal,state,exception,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,is,flagged,for,rollback,see,start,see,end;public,static,void,flag,for,commit,set,flagged,for,rollback,false
TestTransaction -> public static void flagForCommit();1468334463;Flag the current test-managed transaction for <em>commit</em>._<p>Invoking this method will <em>not</em> end the current transaction._Rather, the value of this flag will be used to determine whether or not_the current test-managed transaction should be rolled back or committed_once it is {@linkplain #end ended}._@throws IllegalStateException if a transaction is not active for the_current test_@see #isActive()_@see #isFlaggedForRollback()_@see #start()_@see #end();public static void flagForCommit() {_		setFlaggedForRollback(false)__	};flag,the,current,test,managed,transaction,for,em,commit,em,p,invoking,this,method,will,em,not,em,end,the,current,transaction,rather,the,value,of,this,flag,will,be,used,to,determine,whether,or,not,the,current,test,managed,transaction,should,be,rolled,back,or,committed,once,it,is,linkplain,end,ended,throws,illegal,state,exception,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,is,flagged,for,rollback,see,start,see,end;public,static,void,flag,for,commit,set,flagged,for,rollback,false
TestTransaction -> public static void flagForCommit();1520251235;Flag the current test-managed transaction for <em>commit</em>._<p>Invoking this method will <em>not</em> end the current transaction._Rather, the value of this flag will be used to determine whether or not_the current test-managed transaction should be rolled back or committed_once it is {@linkplain #end ended}._@throws IllegalStateException if no transaction is active for the current test_@see #isActive()_@see #isFlaggedForRollback()_@see #start()_@see #end();public static void flagForCommit() {_		setFlaggedForRollback(false)__	};flag,the,current,test,managed,transaction,for,em,commit,em,p,invoking,this,method,will,em,not,em,end,the,current,transaction,rather,the,value,of,this,flag,will,be,used,to,determine,whether,or,not,the,current,test,managed,transaction,should,be,rolled,back,or,committed,once,it,is,linkplain,end,ended,throws,illegal,state,exception,if,no,transaction,is,active,for,the,current,test,see,is,active,see,is,flagged,for,rollback,see,start,see,end;public,static,void,flag,for,commit,set,flagged,for,rollback,false
TestTransaction -> public static void flagForCommit();1530174524;Flag the current test-managed transaction for <em>commit</em>._<p>Invoking this method will <em>not</em> end the current transaction._Rather, the value of this flag will be used to determine whether or not_the current test-managed transaction should be rolled back or committed_once it is {@linkplain #end ended}._@throws IllegalStateException if no transaction is active for the current test_@see #isActive()_@see #isFlaggedForRollback()_@see #start()_@see #end();public static void flagForCommit() {_		setFlaggedForRollback(false)__	};flag,the,current,test,managed,transaction,for,em,commit,em,p,invoking,this,method,will,em,not,em,end,the,current,transaction,rather,the,value,of,this,flag,will,be,used,to,determine,whether,or,not,the,current,test,managed,transaction,should,be,rolled,back,or,committed,once,it,is,linkplain,end,ended,throws,illegal,state,exception,if,no,transaction,is,active,for,the,current,test,see,is,active,see,is,flagged,for,rollback,see,start,see,end;public,static,void,flag,for,commit,set,flagged,for,rollback,false
TestTransaction -> public static void end();1404334604;Immediately force a <em>commit</em> or <em>rollback</em> of the current_test-managed transaction, according to the {@linkplain #isFlaggedForRollback_rollback flag}._@throws IllegalStateException if the transaction context could not be_retrieved or if a transaction is not active for the current test_@see #isActive()_@see #start();public static void end() {_		requireCurrentTransactionContext().endTransaction()__	};immediately,force,a,em,commit,em,or,em,rollback,em,of,the,current,test,managed,transaction,according,to,the,linkplain,is,flagged,for,rollback,rollback,flag,throws,illegal,state,exception,if,the,transaction,context,could,not,be,retrieved,or,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,start;public,static,void,end,require,current,transaction,context,end,transaction
TestTransaction -> public static void end();1405759527;Immediately force a <em>commit</em> or <em>rollback</em> of the current_test-managed transaction, according to the {@linkplain #isFlaggedForRollback_rollback flag}._@throws IllegalStateException if the transaction context could not be_retrieved or if a transaction is not active for the current test_@see #isActive()_@see #start();public static void end() {_		requireCurrentTransactionContext().endTransaction()__	};immediately,force,a,em,commit,em,or,em,rollback,em,of,the,current,test,managed,transaction,according,to,the,linkplain,is,flagged,for,rollback,rollback,flag,throws,illegal,state,exception,if,the,transaction,context,could,not,be,retrieved,or,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,start;public,static,void,end,require,current,transaction,context,end,transaction
TestTransaction -> public static void end();1405760350;Immediately force a <em>commit</em> or <em>rollback</em> of the current_test-managed transaction, according to the {@linkplain #isFlaggedForRollback_rollback flag}._@throws IllegalStateException if the transaction context could not be_retrieved or if a transaction is not active for the current test_@see #isActive()_@see #start();public static void end() {_		requireCurrentTransactionContext().endTransaction()__	};immediately,force,a,em,commit,em,or,em,rollback,em,of,the,current,test,managed,transaction,according,to,the,linkplain,is,flagged,for,rollback,rollback,flag,throws,illegal,state,exception,if,the,transaction,context,could,not,be,retrieved,or,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,start;public,static,void,end,require,current,transaction,context,end,transaction
TestTransaction -> public static void end();1413848647;Immediately force a <em>commit</em> or <em>rollback</em> of the current_test-managed transaction, according to the {@linkplain #isFlaggedForRollback_rollback flag}._@throws IllegalStateException if the transaction context could not be_retrieved or if a transaction is not active for the current test_@see #isActive()_@see #start();public static void end() {_		requireCurrentTransactionContext().endTransaction()__	};immediately,force,a,em,commit,em,or,em,rollback,em,of,the,current,test,managed,transaction,according,to,the,linkplain,is,flagged,for,rollback,rollback,flag,throws,illegal,state,exception,if,the,transaction,context,could,not,be,retrieved,or,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,start;public,static,void,end,require,current,transaction,context,end,transaction
TestTransaction -> public static void end();1468334463;Immediately force a <em>commit</em> or <em>rollback</em> of the current_test-managed transaction, according to the {@linkplain #isFlaggedForRollback_rollback flag}._@throws IllegalStateException if the transaction context could not be_retrieved or if a transaction is not active for the current test_@see #isActive()_@see #start();public static void end() {_		requireCurrentTransactionContext().endTransaction()__	};immediately,force,a,em,commit,em,or,em,rollback,em,of,the,current,test,managed,transaction,according,to,the,linkplain,is,flagged,for,rollback,rollback,flag,throws,illegal,state,exception,if,the,transaction,context,could,not,be,retrieved,or,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,start;public,static,void,end,require,current,transaction,context,end,transaction
TestTransaction -> public static void end();1520251235;Immediately force a <em>commit</em> or <em>rollback</em> of the_current test-managed transaction, according to the_{@linkplain #isFlaggedForRollback rollback flag}._@throws IllegalStateException if the transaction context could not be_retrieved or if a transaction is not active for the current test_@see #isActive()_@see #start();public static void end() {_		requireCurrentTransactionContext().endTransaction()__	};immediately,force,a,em,commit,em,or,em,rollback,em,of,the,current,test,managed,transaction,according,to,the,linkplain,is,flagged,for,rollback,rollback,flag,throws,illegal,state,exception,if,the,transaction,context,could,not,be,retrieved,or,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,start;public,static,void,end,require,current,transaction,context,end,transaction
TestTransaction -> public static void end();1530174524;Immediately force a <em>commit</em> or <em>rollback</em> of the_current test-managed transaction, according to the_{@linkplain #isFlaggedForRollback rollback flag}._@throws IllegalStateException if the transaction context could not be_retrieved or if a transaction is not active for the current test_@see #isActive()_@see #start();public static void end() {_		requireCurrentTransactionContext().endTransaction()__	};immediately,force,a,em,commit,em,or,em,rollback,em,of,the,current,test,managed,transaction,according,to,the,linkplain,is,flagged,for,rollback,rollback,flag,throws,illegal,state,exception,if,the,transaction,context,could,not,be,retrieved,or,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,start;public,static,void,end,require,current,transaction,context,end,transaction
TestTransaction -> public static boolean isFlaggedForRollback();1404334604;Determine whether the current test-managed transaction has been_{@linkplain #flagForRollback() flagged for rollback} or_{@linkplain #flagForCommit() flagged for commit}._@return {@code true} if the current test-managed transaction is flagged_to be rolled back_ {@code false} if the current test-managed transaction_is flagged to be committed_@throws IllegalStateException if a transaction is not active for the_current test_@see #isActive()_@see #flagForRollback()_@see #flagForCommit();public static boolean isFlaggedForRollback() {_		return requireCurrentTransactionContext().isFlaggedForRollback()__	};determine,whether,the,current,test,managed,transaction,has,been,linkplain,flag,for,rollback,flagged,for,rollback,or,linkplain,flag,for,commit,flagged,for,commit,return,code,true,if,the,current,test,managed,transaction,is,flagged,to,be,rolled,back,code,false,if,the,current,test,managed,transaction,is,flagged,to,be,committed,throws,illegal,state,exception,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,flag,for,rollback,see,flag,for,commit;public,static,boolean,is,flagged,for,rollback,return,require,current,transaction,context,is,flagged,for,rollback
TestTransaction -> public static boolean isFlaggedForRollback();1405759527;Determine whether the current test-managed transaction has been_{@linkplain #flagForRollback() flagged for rollback} or_{@linkplain #flagForCommit() flagged for commit}._@return {@code true} if the current test-managed transaction is flagged_to be rolled back_ {@code false} if the current test-managed transaction_is flagged to be committed_@throws IllegalStateException if a transaction is not active for the_current test_@see #isActive()_@see #flagForRollback()_@see #flagForCommit();public static boolean isFlaggedForRollback() {_		return requireCurrentTransactionContext().isFlaggedForRollback()__	};determine,whether,the,current,test,managed,transaction,has,been,linkplain,flag,for,rollback,flagged,for,rollback,or,linkplain,flag,for,commit,flagged,for,commit,return,code,true,if,the,current,test,managed,transaction,is,flagged,to,be,rolled,back,code,false,if,the,current,test,managed,transaction,is,flagged,to,be,committed,throws,illegal,state,exception,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,flag,for,rollback,see,flag,for,commit;public,static,boolean,is,flagged,for,rollback,return,require,current,transaction,context,is,flagged,for,rollback
TestTransaction -> public static boolean isFlaggedForRollback();1405760350;Determine whether the current test-managed transaction has been_{@linkplain #flagForRollback() flagged for rollback} or_{@linkplain #flagForCommit() flagged for commit}._@return {@code true} if the current test-managed transaction is flagged_to be rolled back_ {@code false} if the current test-managed transaction_is flagged to be committed_@throws IllegalStateException if a transaction is not active for the_current test_@see #isActive()_@see #flagForRollback()_@see #flagForCommit();public static boolean isFlaggedForRollback() {_		return requireCurrentTransactionContext().isFlaggedForRollback()__	};determine,whether,the,current,test,managed,transaction,has,been,linkplain,flag,for,rollback,flagged,for,rollback,or,linkplain,flag,for,commit,flagged,for,commit,return,code,true,if,the,current,test,managed,transaction,is,flagged,to,be,rolled,back,code,false,if,the,current,test,managed,transaction,is,flagged,to,be,committed,throws,illegal,state,exception,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,flag,for,rollback,see,flag,for,commit;public,static,boolean,is,flagged,for,rollback,return,require,current,transaction,context,is,flagged,for,rollback
TestTransaction -> public static boolean isFlaggedForRollback();1413848647;Determine whether the current test-managed transaction has been_{@linkplain #flagForRollback() flagged for rollback} or_{@linkplain #flagForCommit() flagged for commit}._@return {@code true} if the current test-managed transaction is flagged_to be rolled back_ {@code false} if the current test-managed transaction_is flagged to be committed_@throws IllegalStateException if a transaction is not active for the_current test_@see #isActive()_@see #flagForRollback()_@see #flagForCommit();public static boolean isFlaggedForRollback() {_		return requireCurrentTransactionContext().isFlaggedForRollback()__	};determine,whether,the,current,test,managed,transaction,has,been,linkplain,flag,for,rollback,flagged,for,rollback,or,linkplain,flag,for,commit,flagged,for,commit,return,code,true,if,the,current,test,managed,transaction,is,flagged,to,be,rolled,back,code,false,if,the,current,test,managed,transaction,is,flagged,to,be,committed,throws,illegal,state,exception,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,flag,for,rollback,see,flag,for,commit;public,static,boolean,is,flagged,for,rollback,return,require,current,transaction,context,is,flagged,for,rollback
TestTransaction -> public static boolean isFlaggedForRollback();1468334463;Determine whether the current test-managed transaction has been_{@linkplain #flagForRollback() flagged for rollback} or_{@linkplain #flagForCommit() flagged for commit}._@return {@code true} if the current test-managed transaction is flagged_to be rolled back_ {@code false} if the current test-managed transaction_is flagged to be committed_@throws IllegalStateException if a transaction is not active for the_current test_@see #isActive()_@see #flagForRollback()_@see #flagForCommit();public static boolean isFlaggedForRollback() {_		return requireCurrentTransactionContext().isFlaggedForRollback()__	};determine,whether,the,current,test,managed,transaction,has,been,linkplain,flag,for,rollback,flagged,for,rollback,or,linkplain,flag,for,commit,flagged,for,commit,return,code,true,if,the,current,test,managed,transaction,is,flagged,to,be,rolled,back,code,false,if,the,current,test,managed,transaction,is,flagged,to,be,committed,throws,illegal,state,exception,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,flag,for,rollback,see,flag,for,commit;public,static,boolean,is,flagged,for,rollback,return,require,current,transaction,context,is,flagged,for,rollback
TestTransaction -> public static boolean isFlaggedForRollback();1520251235;Determine whether the current test-managed transaction has been_{@linkplain #flagForRollback() flagged for rollback} or_{@linkplain #flagForCommit() flagged for commit}._@return {@code true} if the current test-managed transaction is flagged_to be rolled back_ {@code false} if the current test-managed transaction_is flagged to be committed_@throws IllegalStateException if a transaction is not active for the_current test_@see #isActive()_@see #flagForRollback()_@see #flagForCommit();public static boolean isFlaggedForRollback() {_		return requireCurrentTransactionContext().isFlaggedForRollback()__	};determine,whether,the,current,test,managed,transaction,has,been,linkplain,flag,for,rollback,flagged,for,rollback,or,linkplain,flag,for,commit,flagged,for,commit,return,code,true,if,the,current,test,managed,transaction,is,flagged,to,be,rolled,back,code,false,if,the,current,test,managed,transaction,is,flagged,to,be,committed,throws,illegal,state,exception,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,flag,for,rollback,see,flag,for,commit;public,static,boolean,is,flagged,for,rollback,return,require,current,transaction,context,is,flagged,for,rollback
TestTransaction -> public static boolean isFlaggedForRollback();1530174524;Determine whether the current test-managed transaction has been_{@linkplain #flagForRollback() flagged for rollback} or_{@linkplain #flagForCommit() flagged for commit}._@return {@code true} if the current test-managed transaction is flagged_to be rolled back_ {@code false} if the current test-managed transaction_is flagged to be committed_@throws IllegalStateException if a transaction is not active for the_current test_@see #isActive()_@see #flagForRollback()_@see #flagForCommit();public static boolean isFlaggedForRollback() {_		return requireCurrentTransactionContext().isFlaggedForRollback()__	};determine,whether,the,current,test,managed,transaction,has,been,linkplain,flag,for,rollback,flagged,for,rollback,or,linkplain,flag,for,commit,flagged,for,commit,return,code,true,if,the,current,test,managed,transaction,is,flagged,to,be,rolled,back,code,false,if,the,current,test,managed,transaction,is,flagged,to,be,committed,throws,illegal,state,exception,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,flag,for,rollback,see,flag,for,commit;public,static,boolean,is,flagged,for,rollback,return,require,current,transaction,context,is,flagged,for,rollback
TestTransaction -> public static void start();1404334604;Start a new test-managed transaction._<p>Only call this method if {@link #end} has been called or if no_transaction has been previously started._@throws IllegalStateException if the transaction context could not be_retrieved or if a transaction is already active for the current test_@see #isActive()_@see #end();public static void start() {_		requireCurrentTransactionContext().startTransaction()__	};start,a,new,test,managed,transaction,p,only,call,this,method,if,link,end,has,been,called,or,if,no,transaction,has,been,previously,started,throws,illegal,state,exception,if,the,transaction,context,could,not,be,retrieved,or,if,a,transaction,is,already,active,for,the,current,test,see,is,active,see,end;public,static,void,start,require,current,transaction,context,start,transaction
TestTransaction -> public static void start();1405759527;Start a new test-managed transaction._<p>Only call this method if {@link #end} has been called or if no_transaction has been previously started._@throws IllegalStateException if the transaction context could not be_retrieved or if a transaction is already active for the current test_@see #isActive()_@see #end();public static void start() {_		requireCurrentTransactionContext().startTransaction()__	};start,a,new,test,managed,transaction,p,only,call,this,method,if,link,end,has,been,called,or,if,no,transaction,has,been,previously,started,throws,illegal,state,exception,if,the,transaction,context,could,not,be,retrieved,or,if,a,transaction,is,already,active,for,the,current,test,see,is,active,see,end;public,static,void,start,require,current,transaction,context,start,transaction
TestTransaction -> public static void start();1405760350;Start a new test-managed transaction._<p>Only call this method if {@link #end} has been called or if no_transaction has been previously started._@throws IllegalStateException if the transaction context could not be_retrieved or if a transaction is already active for the current test_@see #isActive()_@see #end();public static void start() {_		requireCurrentTransactionContext().startTransaction()__	};start,a,new,test,managed,transaction,p,only,call,this,method,if,link,end,has,been,called,or,if,no,transaction,has,been,previously,started,throws,illegal,state,exception,if,the,transaction,context,could,not,be,retrieved,or,if,a,transaction,is,already,active,for,the,current,test,see,is,active,see,end;public,static,void,start,require,current,transaction,context,start,transaction
TestTransaction -> public static void start();1413848647;Start a new test-managed transaction._<p>Only call this method if {@link #end} has been called or if no_transaction has been previously started._@throws IllegalStateException if the transaction context could not be_retrieved or if a transaction is already active for the current test_@see #isActive()_@see #end();public static void start() {_		requireCurrentTransactionContext().startTransaction()__	};start,a,new,test,managed,transaction,p,only,call,this,method,if,link,end,has,been,called,or,if,no,transaction,has,been,previously,started,throws,illegal,state,exception,if,the,transaction,context,could,not,be,retrieved,or,if,a,transaction,is,already,active,for,the,current,test,see,is,active,see,end;public,static,void,start,require,current,transaction,context,start,transaction
TestTransaction -> public static void start();1468334463;Start a new test-managed transaction._<p>Only call this method if {@link #end} has been called or if no_transaction has been previously started._@throws IllegalStateException if the transaction context could not be_retrieved or if a transaction is already active for the current test_@see #isActive()_@see #end();public static void start() {_		requireCurrentTransactionContext().startTransaction()__	};start,a,new,test,managed,transaction,p,only,call,this,method,if,link,end,has,been,called,or,if,no,transaction,has,been,previously,started,throws,illegal,state,exception,if,the,transaction,context,could,not,be,retrieved,or,if,a,transaction,is,already,active,for,the,current,test,see,is,active,see,end;public,static,void,start,require,current,transaction,context,start,transaction
TestTransaction -> public static void start();1520251235;Start a new test-managed transaction._<p>Only call this method if {@link #end} has been called or if no_transaction has been previously started._@throws IllegalStateException if the transaction context could not be_retrieved or if a transaction is already active for the current test_@see #isActive()_@see #end();public static void start() {_		requireCurrentTransactionContext().startTransaction()__	};start,a,new,test,managed,transaction,p,only,call,this,method,if,link,end,has,been,called,or,if,no,transaction,has,been,previously,started,throws,illegal,state,exception,if,the,transaction,context,could,not,be,retrieved,or,if,a,transaction,is,already,active,for,the,current,test,see,is,active,see,end;public,static,void,start,require,current,transaction,context,start,transaction
TestTransaction -> public static void start();1530174524;Start a new test-managed transaction._<p>Only call this method if {@link #end} has been called or if no_transaction has been previously started._@throws IllegalStateException if the transaction context could not be_retrieved or if a transaction is already active for the current test_@see #isActive()_@see #end();public static void start() {_		requireCurrentTransactionContext().startTransaction()__	};start,a,new,test,managed,transaction,p,only,call,this,method,if,link,end,has,been,called,or,if,no,transaction,has,been,previously,started,throws,illegal,state,exception,if,the,transaction,context,could,not,be,retrieved,or,if,a,transaction,is,already,active,for,the,current,test,see,is,active,see,end;public,static,void,start,require,current,transaction,context,start,transaction
TestTransaction -> public static void flagForRollback();1404334604;Flag the current test-managed transaction for <em>rollback</em>._<p>Invoking this method will <em>not</em> end the current transaction._Rather, the value of this flag will be used to determine whether or not_the current test-managed transaction should be rolled back or committed_once it is {@linkplain #end ended}._@throws IllegalStateException if a transaction is not active for the_current test_@see #isActive()_@see #isFlaggedForRollback()_@see #start()_@see #end();public static void flagForRollback() {_		setFlaggedForRollback(true)__	};flag,the,current,test,managed,transaction,for,em,rollback,em,p,invoking,this,method,will,em,not,em,end,the,current,transaction,rather,the,value,of,this,flag,will,be,used,to,determine,whether,or,not,the,current,test,managed,transaction,should,be,rolled,back,or,committed,once,it,is,linkplain,end,ended,throws,illegal,state,exception,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,is,flagged,for,rollback,see,start,see,end;public,static,void,flag,for,rollback,set,flagged,for,rollback,true
TestTransaction -> public static void flagForRollback();1405759527;Flag the current test-managed transaction for <em>rollback</em>._<p>Invoking this method will <em>not</em> end the current transaction._Rather, the value of this flag will be used to determine whether or not_the current test-managed transaction should be rolled back or committed_once it is {@linkplain #end ended}._@throws IllegalStateException if a transaction is not active for the_current test_@see #isActive()_@see #isFlaggedForRollback()_@see #start()_@see #end();public static void flagForRollback() {_		setFlaggedForRollback(true)__	};flag,the,current,test,managed,transaction,for,em,rollback,em,p,invoking,this,method,will,em,not,em,end,the,current,transaction,rather,the,value,of,this,flag,will,be,used,to,determine,whether,or,not,the,current,test,managed,transaction,should,be,rolled,back,or,committed,once,it,is,linkplain,end,ended,throws,illegal,state,exception,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,is,flagged,for,rollback,see,start,see,end;public,static,void,flag,for,rollback,set,flagged,for,rollback,true
TestTransaction -> public static void flagForRollback();1405760350;Flag the current test-managed transaction for <em>rollback</em>._<p>Invoking this method will <em>not</em> end the current transaction._Rather, the value of this flag will be used to determine whether or not_the current test-managed transaction should be rolled back or committed_once it is {@linkplain #end ended}._@throws IllegalStateException if a transaction is not active for the_current test_@see #isActive()_@see #isFlaggedForRollback()_@see #start()_@see #end();public static void flagForRollback() {_		setFlaggedForRollback(true)__	};flag,the,current,test,managed,transaction,for,em,rollback,em,p,invoking,this,method,will,em,not,em,end,the,current,transaction,rather,the,value,of,this,flag,will,be,used,to,determine,whether,or,not,the,current,test,managed,transaction,should,be,rolled,back,or,committed,once,it,is,linkplain,end,ended,throws,illegal,state,exception,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,is,flagged,for,rollback,see,start,see,end;public,static,void,flag,for,rollback,set,flagged,for,rollback,true
TestTransaction -> public static void flagForRollback();1413848647;Flag the current test-managed transaction for <em>rollback</em>._<p>Invoking this method will <em>not</em> end the current transaction._Rather, the value of this flag will be used to determine whether or not_the current test-managed transaction should be rolled back or committed_once it is {@linkplain #end ended}._@throws IllegalStateException if a transaction is not active for the_current test_@see #isActive()_@see #isFlaggedForRollback()_@see #start()_@see #end();public static void flagForRollback() {_		setFlaggedForRollback(true)__	};flag,the,current,test,managed,transaction,for,em,rollback,em,p,invoking,this,method,will,em,not,em,end,the,current,transaction,rather,the,value,of,this,flag,will,be,used,to,determine,whether,or,not,the,current,test,managed,transaction,should,be,rolled,back,or,committed,once,it,is,linkplain,end,ended,throws,illegal,state,exception,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,is,flagged,for,rollback,see,start,see,end;public,static,void,flag,for,rollback,set,flagged,for,rollback,true
TestTransaction -> public static void flagForRollback();1468334463;Flag the current test-managed transaction for <em>rollback</em>._<p>Invoking this method will <em>not</em> end the current transaction._Rather, the value of this flag will be used to determine whether or not_the current test-managed transaction should be rolled back or committed_once it is {@linkplain #end ended}._@throws IllegalStateException if a transaction is not active for the_current test_@see #isActive()_@see #isFlaggedForRollback()_@see #start()_@see #end();public static void flagForRollback() {_		setFlaggedForRollback(true)__	};flag,the,current,test,managed,transaction,for,em,rollback,em,p,invoking,this,method,will,em,not,em,end,the,current,transaction,rather,the,value,of,this,flag,will,be,used,to,determine,whether,or,not,the,current,test,managed,transaction,should,be,rolled,back,or,committed,once,it,is,linkplain,end,ended,throws,illegal,state,exception,if,a,transaction,is,not,active,for,the,current,test,see,is,active,see,is,flagged,for,rollback,see,start,see,end;public,static,void,flag,for,rollback,set,flagged,for,rollback,true
TestTransaction -> public static void flagForRollback();1520251235;Flag the current test-managed transaction for <em>rollback</em>._<p>Invoking this method will <em>not</em> end the current transaction._Rather, the value of this flag will be used to determine whether or not_the current test-managed transaction should be rolled back or committed_once it is {@linkplain #end ended}._@throws IllegalStateException if no transaction is active for the current test_@see #isActive()_@see #isFlaggedForRollback()_@see #start()_@see #end();public static void flagForRollback() {_		setFlaggedForRollback(true)__	};flag,the,current,test,managed,transaction,for,em,rollback,em,p,invoking,this,method,will,em,not,em,end,the,current,transaction,rather,the,value,of,this,flag,will,be,used,to,determine,whether,or,not,the,current,test,managed,transaction,should,be,rolled,back,or,committed,once,it,is,linkplain,end,ended,throws,illegal,state,exception,if,no,transaction,is,active,for,the,current,test,see,is,active,see,is,flagged,for,rollback,see,start,see,end;public,static,void,flag,for,rollback,set,flagged,for,rollback,true
TestTransaction -> public static void flagForRollback();1530174524;Flag the current test-managed transaction for <em>rollback</em>._<p>Invoking this method will <em>not</em> end the current transaction._Rather, the value of this flag will be used to determine whether or not_the current test-managed transaction should be rolled back or committed_once it is {@linkplain #end ended}._@throws IllegalStateException if no transaction is active for the current test_@see #isActive()_@see #isFlaggedForRollback()_@see #start()_@see #end();public static void flagForRollback() {_		setFlaggedForRollback(true)__	};flag,the,current,test,managed,transaction,for,em,rollback,em,p,invoking,this,method,will,em,not,em,end,the,current,transaction,rather,the,value,of,this,flag,will,be,used,to,determine,whether,or,not,the,current,test,managed,transaction,should,be,rolled,back,or,committed,once,it,is,linkplain,end,ended,throws,illegal,state,exception,if,no,transaction,is,active,for,the,current,test,see,is,active,see,is,flagged,for,rollback,see,start,see,end;public,static,void,flag,for,rollback,set,flagged,for,rollback,true
TestTransaction -> public static boolean isActive();1404334604;Determine whether a test-managed transaction is currently <em>active</em>._@return {@code true} if a test-managed transaction is currently active_@see #start()_@see #end();public static boolean isActive() {_		TransactionContext transactionContext = TransactionContextHolder.getCurrentTransactionContext()__		if (transactionContext != null) {_			TransactionStatus transactionStatus = transactionContext.getTransactionStatus()__			return (transactionStatus != null) && (!transactionStatus.isCompleted())__		}__		_		return false__	};determine,whether,a,test,managed,transaction,is,currently,em,active,em,return,code,true,if,a,test,managed,transaction,is,currently,active,see,start,see,end;public,static,boolean,is,active,transaction,context,transaction,context,transaction,context,holder,get,current,transaction,context,if,transaction,context,null,transaction,status,transaction,status,transaction,context,get,transaction,status,return,transaction,status,null,transaction,status,is,completed,return,false
TestTransaction -> public static boolean isActive();1405759527;Determine whether a test-managed transaction is currently <em>active</em>._@return {@code true} if a test-managed transaction is currently active_@see #start()_@see #end();public static boolean isActive() {_		TransactionContext transactionContext = TransactionContextHolder.getCurrentTransactionContext()__		if (transactionContext != null) {_			TransactionStatus transactionStatus = transactionContext.getTransactionStatus()__			return (transactionStatus != null) && (!transactionStatus.isCompleted())__		}__		_		return false__	};determine,whether,a,test,managed,transaction,is,currently,em,active,em,return,code,true,if,a,test,managed,transaction,is,currently,active,see,start,see,end;public,static,boolean,is,active,transaction,context,transaction,context,transaction,context,holder,get,current,transaction,context,if,transaction,context,null,transaction,status,transaction,status,transaction,context,get,transaction,status,return,transaction,status,null,transaction,status,is,completed,return,false
TestTransaction -> public static boolean isActive();1405760350;Determine whether a test-managed transaction is currently <em>active</em>._@return {@code true} if a test-managed transaction is currently active_@see #start()_@see #end();public static boolean isActive() {_		TransactionContext transactionContext = TransactionContextHolder.getCurrentTransactionContext()__		if (transactionContext != null) {_			TransactionStatus transactionStatus = transactionContext.getTransactionStatus()__			return (transactionStatus != null) && (!transactionStatus.isCompleted())__		}__		_		return false__	};determine,whether,a,test,managed,transaction,is,currently,em,active,em,return,code,true,if,a,test,managed,transaction,is,currently,active,see,start,see,end;public,static,boolean,is,active,transaction,context,transaction,context,transaction,context,holder,get,current,transaction,context,if,transaction,context,null,transaction,status,transaction,status,transaction,context,get,transaction,status,return,transaction,status,null,transaction,status,is,completed,return,false
TestTransaction -> public static boolean isActive();1413848647;Determine whether a test-managed transaction is currently <em>active</em>._@return {@code true} if a test-managed transaction is currently active_@see #start()_@see #end();public static boolean isActive() {_		TransactionContext transactionContext = TransactionContextHolder.getCurrentTransactionContext()__		if (transactionContext != null) {_			TransactionStatus transactionStatus = transactionContext.getTransactionStatus()__			return (transactionStatus != null) && (!transactionStatus.isCompleted())__		}__		_		return false__	};determine,whether,a,test,managed,transaction,is,currently,em,active,em,return,code,true,if,a,test,managed,transaction,is,currently,active,see,start,see,end;public,static,boolean,is,active,transaction,context,transaction,context,transaction,context,holder,get,current,transaction,context,if,transaction,context,null,transaction,status,transaction,status,transaction,context,get,transaction,status,return,transaction,status,null,transaction,status,is,completed,return,false
TestTransaction -> public static boolean isActive();1468334463;Determine whether a test-managed transaction is currently <em>active</em>._@return {@code true} if a test-managed transaction is currently active_@see #start()_@see #end();public static boolean isActive() {_		TransactionContext transactionContext = TransactionContextHolder.getCurrentTransactionContext()__		if (transactionContext != null) {_			TransactionStatus transactionStatus = transactionContext.getTransactionStatus()__			return (transactionStatus != null) && (!transactionStatus.isCompleted())__		}__		_		return false__	};determine,whether,a,test,managed,transaction,is,currently,em,active,em,return,code,true,if,a,test,managed,transaction,is,currently,active,see,start,see,end;public,static,boolean,is,active,transaction,context,transaction,context,transaction,context,holder,get,current,transaction,context,if,transaction,context,null,transaction,status,transaction,status,transaction,context,get,transaction,status,return,transaction,status,null,transaction,status,is,completed,return,false
TestTransaction -> public static boolean isActive();1520251235;Determine whether a test-managed transaction is currently <em>active</em>._@return {@code true} if a test-managed transaction is currently active_@see #start()_@see #end();public static boolean isActive() {_		TransactionContext transactionContext = TransactionContextHolder.getCurrentTransactionContext()__		if (transactionContext != null) {_			TransactionStatus transactionStatus = transactionContext.getTransactionStatus()__			return (transactionStatus != null && !transactionStatus.isCompleted())__		}_		return false__	};determine,whether,a,test,managed,transaction,is,currently,em,active,em,return,code,true,if,a,test,managed,transaction,is,currently,active,see,start,see,end;public,static,boolean,is,active,transaction,context,transaction,context,transaction,context,holder,get,current,transaction,context,if,transaction,context,null,transaction,status,transaction,status,transaction,context,get,transaction,status,return,transaction,status,null,transaction,status,is,completed,return,false
TestTransaction -> public static boolean isActive();1530174524;Determine whether a test-managed transaction is currently <em>active</em>._@return {@code true} if a test-managed transaction is currently active_@see #start()_@see #end();public static boolean isActive() {_		TransactionContext transactionContext = TransactionContextHolder.getCurrentTransactionContext()__		if (transactionContext != null) {_			TransactionStatus transactionStatus = transactionContext.getTransactionStatus()__			return (transactionStatus != null && !transactionStatus.isCompleted())__		}_		return false__	};determine,whether,a,test,managed,transaction,is,currently,em,active,em,return,code,true,if,a,test,managed,transaction,is,currently,active,see,start,see,end;public,static,boolean,is,active,transaction,context,transaction,context,transaction,context,holder,get,current,transaction,context,if,transaction,context,null,transaction,status,transaction,status,transaction,context,get,transaction,status,return,transaction,status,null,transaction,status,is,completed,return,false
