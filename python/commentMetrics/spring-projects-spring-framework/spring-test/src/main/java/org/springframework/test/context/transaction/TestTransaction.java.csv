commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;8;/**  * Determine whether a test-managed transaction is currently <em>active</em>.  * @return {@code true} if a test-managed transaction is currently active  * @see #start()  * @see #end()  */ ;/**  * Determine whether a test-managed transaction is currently <em>active</em>.  * @return {@code true} if a test-managed transaction is currently active  * @see #start()  * @see #end()  */ public static boolean isActive() {     TransactionContext transactionContext = TransactionContextHolder.getCurrentTransactionContext().     if (transactionContext != null) {         TransactionStatus transactionStatus = transactionContext.getTransactionStatus().         return (transactionStatus != null && !transactionStatus.isCompleted()).     }     return false. }
true;public,static;0;3;/**  * Determine whether the current test-managed transaction has been  * {@linkplain #flagForRollback() flagged for rollback} or  * {@linkplain #flagForCommit() flagged for commit}.  * @return {@code true} if the current test-managed transaction is flagged  * to be rolled back. {@code false} if the current test-managed transaction  * is flagged to be committed  * @throws IllegalStateException if a transaction is not active for the  * current test  * @see #isActive()  * @see #flagForRollback()  * @see #flagForCommit()  */ ;/**  * Determine whether the current test-managed transaction has been  * {@linkplain #flagForRollback() flagged for rollback} or  * {@linkplain #flagForCommit() flagged for commit}.  * @return {@code true} if the current test-managed transaction is flagged  * to be rolled back. {@code false} if the current test-managed transaction  * is flagged to be committed  * @throws IllegalStateException if a transaction is not active for the  * current test  * @see #isActive()  * @see #flagForRollback()  * @see #flagForCommit()  */ public static boolean isFlaggedForRollback() {     return requireCurrentTransactionContext().isFlaggedForRollback(). }
true;public,static;0;3;/**  * Flag the current test-managed transaction for <em>rollback</em>.  * <p>Invoking this method will <em>not</em> end the current transaction.  * Rather, the value of this flag will be used to determine whether or not  * the current test-managed transaction should be rolled back or committed  * once it is {@linkplain #end ended}.  * @throws IllegalStateException if no transaction is active for the current test  * @see #isActive()  * @see #isFlaggedForRollback()  * @see #start()  * @see #end()  */ ;/**  * Flag the current test-managed transaction for <em>rollback</em>.  * <p>Invoking this method will <em>not</em> end the current transaction.  * Rather, the value of this flag will be used to determine whether or not  * the current test-managed transaction should be rolled back or committed  * once it is {@linkplain #end ended}.  * @throws IllegalStateException if no transaction is active for the current test  * @see #isActive()  * @see #isFlaggedForRollback()  * @see #start()  * @see #end()  */ public static void flagForRollback() {     setFlaggedForRollback(true). }
true;public,static;0;3;/**  * Flag the current test-managed transaction for <em>commit</em>.  * <p>Invoking this method will <em>not</em> end the current transaction.  * Rather, the value of this flag will be used to determine whether or not  * the current test-managed transaction should be rolled back or committed  * once it is {@linkplain #end ended}.  * @throws IllegalStateException if no transaction is active for the current test  * @see #isActive()  * @see #isFlaggedForRollback()  * @see #start()  * @see #end()  */ ;/**  * Flag the current test-managed transaction for <em>commit</em>.  * <p>Invoking this method will <em>not</em> end the current transaction.  * Rather, the value of this flag will be used to determine whether or not  * the current test-managed transaction should be rolled back or committed  * once it is {@linkplain #end ended}.  * @throws IllegalStateException if no transaction is active for the current test  * @see #isActive()  * @see #isFlaggedForRollback()  * @see #start()  * @see #end()  */ public static void flagForCommit() {     setFlaggedForRollback(false). }
true;public,static;0;3;/**  * Start a new test-managed transaction.  * <p>Only call this method if {@link #end} has been called or if no  * transaction has been previously started.  * @throws IllegalStateException if the transaction context could not be  * retrieved or if a transaction is already active for the current test  * @see #isActive()  * @see #end()  */ ;/**  * Start a new test-managed transaction.  * <p>Only call this method if {@link #end} has been called or if no  * transaction has been previously started.  * @throws IllegalStateException if the transaction context could not be  * retrieved or if a transaction is already active for the current test  * @see #isActive()  * @see #end()  */ public static void start() {     requireCurrentTransactionContext().startTransaction(). }
true;public,static;0;3;/**  * Immediately force a <em>commit</em> or <em>rollback</em> of the  * current test-managed transaction, according to the  * {@linkplain #isFlaggedForRollback rollback flag}.  * @throws IllegalStateException if the transaction context could not be  * retrieved or if a transaction is not active for the current test  * @see #isActive()  * @see #start()  */ ;/**  * Immediately force a <em>commit</em> or <em>rollback</em> of the  * current test-managed transaction, according to the  * {@linkplain #isFlaggedForRollback rollback flag}.  * @throws IllegalStateException if the transaction context could not be  * retrieved or if a transaction is not active for the current test  * @see #isActive()  * @see #start()  */ public static void end() {     requireCurrentTransactionContext().endTransaction(). }
false;private,static;0;5;;private static TransactionContext requireCurrentTransactionContext() {     TransactionContext txContext = TransactionContextHolder.getCurrentTransactionContext().     Assert.state(txContext != null, "TransactionContext is not active").     return txContext. }
false;private,static;1;3;;private static void setFlaggedForRollback(boolean flag) {     requireCurrentTransactionContext().setFlaggedForRollback(flag). }
