commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;4;/**  * Create a new {@code MockMvcHtmlUnitDriverBuilder} based on the supplied  * {@link MockMvc} instance.  * @param mockMvc the {@code MockMvc} instance to use (never {@code null})  * @return the MockMvcHtmlUnitDriverBuilder to customize  */ ;/**  * Create a new {@code MockMvcHtmlUnitDriverBuilder} based on the supplied  * {@link MockMvc} instance.  * @param mockMvc the {@code MockMvc} instance to use (never {@code null})  * @return the MockMvcHtmlUnitDriverBuilder to customize  */ public static MockMvcHtmlUnitDriverBuilder mockMvcSetup(MockMvc mockMvc) {     Assert.notNull(mockMvc, "MockMvc must not be null").     return new MockMvcHtmlUnitDriverBuilder(mockMvc). }
true;public,static;1;4;/**  * Create a new {@code MockMvcHtmlUnitDriverBuilder} based on the supplied  * {@link WebApplicationContext}.  * @param context the {@code WebApplicationContext} to create a {@link MockMvc}  * instance from (never {@code null})  * @return the MockMvcHtmlUnitDriverBuilder to customize  */ ;/**  * Create a new {@code MockMvcHtmlUnitDriverBuilder} based on the supplied  * {@link WebApplicationContext}.  * @param context the {@code WebApplicationContext} to create a {@link MockMvc}  * instance from (never {@code null})  * @return the MockMvcHtmlUnitDriverBuilder to customize  */ public static MockMvcHtmlUnitDriverBuilder webAppContextSetup(WebApplicationContext context) {     Assert.notNull(context, "WebApplicationContext must not be null").     return new MockMvcHtmlUnitDriverBuilder(context). }
true;public,static;2;7;/**  * Create a new {@code MockMvcHtmlUnitDriverBuilder} based on the supplied  * {@link WebApplicationContext} and {@link MockMvcConfigurer}.  * @param context the {@code WebApplicationContext} to create a {@link MockMvc}  * instance from (never {@code null})  * @param configurer the {@code MockMvcConfigurer} to apply (never {@code null})  * @return the MockMvcHtmlUnitDriverBuilder to customize  */ ;/**  * Create a new {@code MockMvcHtmlUnitDriverBuilder} based on the supplied  * {@link WebApplicationContext} and {@link MockMvcConfigurer}.  * @param context the {@code WebApplicationContext} to create a {@link MockMvc}  * instance from (never {@code null})  * @param configurer the {@code MockMvcConfigurer} to apply (never {@code null})  * @return the MockMvcHtmlUnitDriverBuilder to customize  */ public static MockMvcHtmlUnitDriverBuilder webAppContextSetup(WebApplicationContext context, MockMvcConfigurer configurer) {     Assert.notNull(context, "WebApplicationContext must not be null").     Assert.notNull(configurer, "MockMvcConfigurer must not be null").     return new MockMvcHtmlUnitDriverBuilder(context, configurer). }
true;public;1;4;/**  * Specify whether JavaScript should be enabled.  * <p>Default is {@code true}.  * @param javascriptEnabled {@code true} if JavaScript should be enabled  * @return this builder for further customizations  * @see #build()  */ ;/**  * Specify whether JavaScript should be enabled.  * <p>Default is {@code true}.  * @param javascriptEnabled {@code true} if JavaScript should be enabled  * @return this builder for further customizations  * @see #build()  */ public MockMvcHtmlUnitDriverBuilder javascriptEnabled(boolean javascriptEnabled) {     this.javascriptEnabled = javascriptEnabled.     return this. }
true;public;1;7;/**  * Supply the {@code WebConnectionHtmlUnitDriver} that the driver  * {@linkplain #build built} by this builder should delegate to when  * processing non-{@linkplain WebRequestMatcher matching} requests.  * @param driver the {@code WebConnectionHtmlUnitDriver} to delegate to  * for requests that do not match (never {@code null})  * @return this builder for further customizations  * @see #build()  */ ;/**  * Supply the {@code WebConnectionHtmlUnitDriver} that the driver  * {@linkplain #build built} by this builder should delegate to when  * processing non-{@linkplain WebRequestMatcher matching} requests.  * @param driver the {@code WebConnectionHtmlUnitDriver} to delegate to  * for requests that do not match (never {@code null})  * @return this builder for further customizations  * @see #build()  */ public MockMvcHtmlUnitDriverBuilder withDelegate(WebConnectionHtmlUnitDriver driver) {     Assert.notNull(driver, "HtmlUnitDriver must not be null").     driver.setJavascriptEnabled(this.javascriptEnabled).     driver.setWebConnection(createConnection(driver.getWebClient())).     this.driver = driver.     return this. }
true;public;0;4;/**  * Build the {@link HtmlUnitDriver} configured via this builder.  * <p>The returned driver will use the configured {@link MockMvc} instance  * for processing any {@linkplain WebRequestMatcher matching} requests  * and a delegate {@code HtmlUnitDriver} for all other requests.  * <p>If a {@linkplain #withDelegate delegate} has been explicitly configured,  * it will be used. otherwise, a default {@code WebConnectionHtmlUnitDriver}  * with the {@link BrowserVersion} set to {@link BrowserVersion#CHROME CHROME}  * will be configured as the delegate.  * @return the {@code HtmlUnitDriver} to use  * @see #withDelegate(WebConnectionHtmlUnitDriver)  */ ;/**  * Build the {@link HtmlUnitDriver} configured via this builder.  * <p>The returned driver will use the configured {@link MockMvc} instance  * for processing any {@linkplain WebRequestMatcher matching} requests  * and a delegate {@code HtmlUnitDriver} for all other requests.  * <p>If a {@linkplain #withDelegate delegate} has been explicitly configured,  * it will be used. otherwise, a default {@code WebConnectionHtmlUnitDriver}  * with the {@link BrowserVersion} set to {@link BrowserVersion#CHROME CHROME}  * will be configured as the delegate.  * @return the {@code HtmlUnitDriver} to use  * @see #withDelegate(WebConnectionHtmlUnitDriver)  */ public HtmlUnitDriver build() {     return (this.driver != null ? this.driver : withDelegate(new WebConnectionHtmlUnitDriver(BrowserVersion.CHROME)).build()). }
