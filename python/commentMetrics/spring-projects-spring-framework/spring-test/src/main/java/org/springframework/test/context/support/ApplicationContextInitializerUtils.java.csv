# id;timestamp;commentText;codeText;commentWords;codeWords
ApplicationContextInitializerUtils -> static Set<Class<? extends ApplicationContextInitializer<?>>> resolveInitializerClasses( 			List<ContextConfigurationAttributes> configAttributesList);1496955179;Resolve the set of merged {@code ApplicationContextInitializer} classes for the_supplied list of {@code ContextConfigurationAttributes}.__<p>Note that the {@link ContextConfiguration#inheritInitializers inheritInitializers}_flag of {@link ContextConfiguration @ContextConfiguration} will be taken into_consideration. Specifically, if the {@code inheritInitializers} flag is set to_{@code true} for a given level in the class hierarchy represented by the provided_configuration attributes, context initializer classes defined at the given level_will be merged with those defined in higher levels of the class hierarchy.__@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the set of merged context initializer classes, including those from_superclasses if appropriate (never {@code null})_@since 3.2;static Set<Class<? extends ApplicationContextInitializer<?>>> resolveInitializerClasses(_			List<ContextConfigurationAttributes> configAttributesList) {_		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		final Set<Class<? extends ApplicationContextInitializer<?>>> initializerClasses = _				new HashSet<>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing context initializers for context configuration attributes %s",_					configAttributes))__			}__			initializerClasses.addAll(Arrays.asList(configAttributes.getInitializers()))___			if (!configAttributes.isInheritInitializers()) {_				break__			}_		}__		return initializerClasses__	};resolve,the,set,of,merged,code,application,context,initializer,classes,for,the,supplied,list,of,code,context,configuration,attributes,p,note,that,the,link,context,configuration,inherit,initializers,inherit,initializers,flag,of,link,context,configuration,context,configuration,will,be,taken,into,consideration,specifically,if,the,code,inherit,initializers,flag,is,set,to,code,true,for,a,given,level,in,the,class,hierarchy,represented,by,the,provided,configuration,attributes,context,initializer,classes,defined,at,the,given,level,will,be,merged,with,those,defined,in,higher,levels,of,the,class,hierarchy,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,set,of,merged,context,initializer,classes,including,those,from,superclasses,if,appropriate,never,code,null,since,3,2;static,set,class,extends,application,context,initializer,resolve,initializer,classes,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,final,set,class,extends,application,context,initializer,initializer,classes,new,hash,set,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,context,initializers,for,context,configuration,attributes,s,config,attributes,initializer,classes,add,all,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,initializers,break,return,initializer,classes
ApplicationContextInitializerUtils -> static Set<Class<? extends ApplicationContextInitializer<?>>> resolveInitializerClasses( 			List<ContextConfigurationAttributes> configAttributesList);1497341594;Resolve the set of merged {@code ApplicationContextInitializer} classes for the_supplied list of {@code ContextConfigurationAttributes}.__<p>Note that the {@link ContextConfiguration#inheritInitializers inheritInitializers}_flag of {@link ContextConfiguration @ContextConfiguration} will be taken into_consideration. Specifically, if the {@code inheritInitializers} flag is set to_{@code true} for a given level in the class hierarchy represented by the provided_configuration attributes, context initializer classes defined at the given level_will be merged with those defined in higher levels of the class hierarchy.__@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the set of merged context initializer classes, including those from_superclasses if appropriate (never {@code null})_@since 3.2;static Set<Class<? extends ApplicationContextInitializer<?>>> resolveInitializerClasses(_			List<ContextConfigurationAttributes> configAttributesList) {_		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		final Set<Class<? extends ApplicationContextInitializer<?>>> initializerClasses = _				new HashSet<>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing context initializers for context configuration attributes %s",_					configAttributes))__			}__			initializerClasses.addAll(Arrays.asList(configAttributes.getInitializers()))___			if (!configAttributes.isInheritInitializers()) {_				break__			}_		}__		return initializerClasses__	};resolve,the,set,of,merged,code,application,context,initializer,classes,for,the,supplied,list,of,code,context,configuration,attributes,p,note,that,the,link,context,configuration,inherit,initializers,inherit,initializers,flag,of,link,context,configuration,context,configuration,will,be,taken,into,consideration,specifically,if,the,code,inherit,initializers,flag,is,set,to,code,true,for,a,given,level,in,the,class,hierarchy,represented,by,the,provided,configuration,attributes,context,initializer,classes,defined,at,the,given,level,will,be,merged,with,those,defined,in,higher,levels,of,the,class,hierarchy,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,set,of,merged,context,initializer,classes,including,those,from,superclasses,if,appropriate,never,code,null,since,3,2;static,set,class,extends,application,context,initializer,resolve,initializer,classes,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,final,set,class,extends,application,context,initializer,initializer,classes,new,hash,set,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,context,initializers,for,context,configuration,attributes,s,config,attributes,initializer,classes,add,all,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,initializers,break,return,initializer,classes
ApplicationContextInitializerUtils -> static Set<Class<? extends ApplicationContextInitializer<?>>> resolveInitializerClasses( 			List<ContextConfigurationAttributes> configAttributesList);1519514499;Resolve the set of merged {@code ApplicationContextInitializer} classes for the_supplied list of {@code ContextConfigurationAttributes}._<p>Note that the {@link ContextConfiguration#inheritInitializers inheritInitializers}_flag of {@link ContextConfiguration @ContextConfiguration} will be taken into_consideration. Specifically, if the {@code inheritInitializers} flag is set to_{@code true} for a given level in the class hierarchy represented by the provided_configuration attributes, context initializer classes defined at the given level_will be merged with those defined in higher levels of the class hierarchy._@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the set of merged context initializer classes, including those from_superclasses if appropriate (never {@code null})_@since 3.2;static Set<Class<? extends ApplicationContextInitializer<?>>> resolveInitializerClasses(_			List<ContextConfigurationAttributes> configAttributesList) {__		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes List must not be empty")__		Set<Class<? extends ApplicationContextInitializer<?>>> initializerClasses = new LinkedHashSet<>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace("Processing context initializers for configuration attributes " + configAttributes)__			}_			Collections.addAll(initializerClasses, configAttributes.getInitializers())__			if (!configAttributes.isInheritInitializers()) {_				break__			}_		}__		return initializerClasses__	};resolve,the,set,of,merged,code,application,context,initializer,classes,for,the,supplied,list,of,code,context,configuration,attributes,p,note,that,the,link,context,configuration,inherit,initializers,inherit,initializers,flag,of,link,context,configuration,context,configuration,will,be,taken,into,consideration,specifically,if,the,code,inherit,initializers,flag,is,set,to,code,true,for,a,given,level,in,the,class,hierarchy,represented,by,the,provided,configuration,attributes,context,initializer,classes,defined,at,the,given,level,will,be,merged,with,those,defined,in,higher,levels,of,the,class,hierarchy,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,set,of,merged,context,initializer,classes,including,those,from,superclasses,if,appropriate,never,code,null,since,3,2;static,set,class,extends,application,context,initializer,resolve,initializer,classes,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,set,class,extends,application,context,initializer,initializer,classes,new,linked,hash,set,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,processing,context,initializers,for,configuration,attributes,config,attributes,collections,add,all,initializer,classes,config,attributes,get,initializers,if,config,attributes,is,inherit,initializers,break,return,initializer,classes
ApplicationContextInitializerUtils -> static Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> resolveInitializerClasses( 			List<ContextConfigurationAttributes> configAttributesList);1397082962;Resolve the set of merged {@code ApplicationContextInitializer} classes for the_supplied list of {@code ContextConfigurationAttributes}.__<p>Note that the {@link ContextConfiguration#inheritInitializers inheritInitializers}_flag of {@link ContextConfiguration @ContextConfiguration} will be taken into_consideration. Specifically, if the {@code inheritInitializers} flag is set to_{@code true} for a given level in the class hierarchy represented by the provided_configuration attributes, context initializer classes defined at the given level_will be merged with those defined in higher levels of the class hierarchy.__@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the set of merged context initializer classes, including those from_superclasses if appropriate (never {@code null})_@since 3.2;static Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> resolveInitializerClasses(_			List<ContextConfigurationAttributes> configAttributesList) {_		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		final Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		new HashSet<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing context initializers for context configuration attributes %s",_					configAttributes))__			}__			initializerClasses.addAll(Arrays.asList(configAttributes.getInitializers()))___			if (!configAttributes.isInheritInitializers()) {_				break__			}_		}__		return initializerClasses__	};resolve,the,set,of,merged,code,application,context,initializer,classes,for,the,supplied,list,of,code,context,configuration,attributes,p,note,that,the,link,context,configuration,inherit,initializers,inherit,initializers,flag,of,link,context,configuration,context,configuration,will,be,taken,into,consideration,specifically,if,the,code,inherit,initializers,flag,is,set,to,code,true,for,a,given,level,in,the,class,hierarchy,represented,by,the,provided,configuration,attributes,context,initializer,classes,defined,at,the,given,level,will,be,merged,with,those,defined,in,higher,levels,of,the,class,hierarchy,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,set,of,merged,context,initializer,classes,including,those,from,superclasses,if,appropriate,never,code,null,since,3,2;static,set,class,extends,application,context,initializer,extends,configurable,application,context,resolve,initializer,classes,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,final,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,new,hash,set,class,extends,application,context,initializer,extends,configurable,application,context,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,context,initializers,for,context,configuration,attributes,s,config,attributes,initializer,classes,add,all,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,initializers,break,return,initializer,classes
ApplicationContextInitializerUtils -> static Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> resolveInitializerClasses( 			List<ContextConfigurationAttributes> configAttributesList);1413848647;Resolve the set of merged {@code ApplicationContextInitializer} classes for the_supplied list of {@code ContextConfigurationAttributes}.__<p>Note that the {@link ContextConfiguration#inheritInitializers inheritInitializers}_flag of {@link ContextConfiguration @ContextConfiguration} will be taken into_consideration. Specifically, if the {@code inheritInitializers} flag is set to_{@code true} for a given level in the class hierarchy represented by the provided_configuration attributes, context initializer classes defined at the given level_will be merged with those defined in higher levels of the class hierarchy.__@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the set of merged context initializer classes, including those from_superclasses if appropriate (never {@code null})_@since 3.2;static Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> resolveInitializerClasses(_			List<ContextConfigurationAttributes> configAttributesList) {_		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		final Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _		new HashSet<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing context initializers for context configuration attributes %s",_					configAttributes))__			}__			initializerClasses.addAll(Arrays.asList(configAttributes.getInitializers()))___			if (!configAttributes.isInheritInitializers()) {_				break__			}_		}__		return initializerClasses__	};resolve,the,set,of,merged,code,application,context,initializer,classes,for,the,supplied,list,of,code,context,configuration,attributes,p,note,that,the,link,context,configuration,inherit,initializers,inherit,initializers,flag,of,link,context,configuration,context,configuration,will,be,taken,into,consideration,specifically,if,the,code,inherit,initializers,flag,is,set,to,code,true,for,a,given,level,in,the,class,hierarchy,represented,by,the,provided,configuration,attributes,context,initializer,classes,defined,at,the,given,level,will,be,merged,with,those,defined,in,higher,levels,of,the,class,hierarchy,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,set,of,merged,context,initializer,classes,including,those,from,superclasses,if,appropriate,never,code,null,since,3,2;static,set,class,extends,application,context,initializer,extends,configurable,application,context,resolve,initializer,classes,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,final,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,new,hash,set,class,extends,application,context,initializer,extends,configurable,application,context,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,context,initializers,for,context,configuration,attributes,s,config,attributes,initializer,classes,add,all,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,initializers,break,return,initializer,classes
ApplicationContextInitializerUtils -> static Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> resolveInitializerClasses( 			List<ContextConfigurationAttributes> configAttributesList);1467730834;Resolve the set of merged {@code ApplicationContextInitializer} classes for the_supplied list of {@code ContextConfigurationAttributes}.__<p>Note that the {@link ContextConfiguration#inheritInitializers inheritInitializers}_flag of {@link ContextConfiguration @ContextConfiguration} will be taken into_consideration. Specifically, if the {@code inheritInitializers} flag is set to_{@code true} for a given level in the class hierarchy represented by the provided_configuration attributes, context initializer classes defined at the given level_will be merged with those defined in higher levels of the class hierarchy.__@param configAttributesList the list of configuration attributes to process_ must_not be {@code null} or <em>empty</em>_ must be ordered <em>bottom-up</em>_(i.e., as if we were traversing up the class hierarchy)_@return the set of merged context initializer classes, including those from_superclasses if appropriate (never {@code null})_@since 3.2;static Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> resolveInitializerClasses(_			List<ContextConfigurationAttributes> configAttributesList) {_		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be empty")___		final Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses = _				new HashSet<>()___		for (ContextConfigurationAttributes configAttributes : configAttributesList) {_			if (logger.isTraceEnabled()) {_				logger.trace(String.format("Processing context initializers for context configuration attributes %s",_					configAttributes))__			}__			initializerClasses.addAll(Arrays.asList(configAttributes.getInitializers()))___			if (!configAttributes.isInheritInitializers()) {_				break__			}_		}__		return initializerClasses__	};resolve,the,set,of,merged,code,application,context,initializer,classes,for,the,supplied,list,of,code,context,configuration,attributes,p,note,that,the,link,context,configuration,inherit,initializers,inherit,initializers,flag,of,link,context,configuration,context,configuration,will,be,taken,into,consideration,specifically,if,the,code,inherit,initializers,flag,is,set,to,code,true,for,a,given,level,in,the,class,hierarchy,represented,by,the,provided,configuration,attributes,context,initializer,classes,defined,at,the,given,level,will,be,merged,with,those,defined,in,higher,levels,of,the,class,hierarchy,param,config,attributes,list,the,list,of,configuration,attributes,to,process,must,not,be,code,null,or,em,empty,em,must,be,ordered,em,bottom,up,em,i,e,as,if,we,were,traversing,up,the,class,hierarchy,return,the,set,of,merged,context,initializer,classes,including,those,from,superclasses,if,appropriate,never,code,null,since,3,2;static,set,class,extends,application,context,initializer,extends,configurable,application,context,resolve,initializer,classes,list,context,configuration,attributes,config,attributes,list,assert,not,empty,config,attributes,list,context,configuration,attributes,list,must,not,be,empty,final,set,class,extends,application,context,initializer,extends,configurable,application,context,initializer,classes,new,hash,set,for,context,configuration,attributes,config,attributes,config,attributes,list,if,logger,is,trace,enabled,logger,trace,string,format,processing,context,initializers,for,context,configuration,attributes,s,config,attributes,initializer,classes,add,all,arrays,as,list,config,attributes,get,initializers,if,config,attributes,is,inherit,initializers,break,return,initializer,classes
