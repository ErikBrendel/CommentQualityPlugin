# id;timestamp;commentText;codeText;commentWords;codeWords
SpringExtension -> @Override 	public void beforeTestExecution(TestExtensionContext context) throws Exception;1468244735;Delegates to {@link TestContextManager#beforeTestExecution}.;@Override_	public void beforeTestExecution(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		getTestContextManager(context).beforeTestExecution(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,execution;override,public,void,before,test,execution,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,get,test,context,manager,context,before,test,execution,test,instance,test,method
SpringExtension -> @Override 	public void beforeTestExecution(TestExtensionContext context) throws Exception;1472411819;Delegates to {@link TestContextManager#beforeTestExecution}.;@Override_	public void beforeTestExecution(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		getTestContextManager(context).beforeTestExecution(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,execution;override,public,void,before,test,execution,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,get,test,context,manager,context,before,test,execution,test,instance,test,method
SpringExtension -> @Override 	public void beforeTestExecution(TestExtensionContext context) throws Exception;1489501124;Delegates to {@link TestContextManager#beforeTestExecution}.;@Override_	public void beforeTestExecution(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		getTestContextManager(context).beforeTestExecution(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,execution;override,public,void,before,test,execution,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,get,test,context,manager,context,before,test,execution,test,instance,test,method
SpringExtension -> @Override 	public void beforeTestExecution(TestExtensionContext context) throws Exception;1496955179;Delegates to {@link TestContextManager#beforeTestExecution}.;@Override_	public void beforeTestExecution(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		getTestContextManager(context).beforeTestExecution(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,execution;override,public,void,before,test,execution,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,get,test,context,manager,context,before,test,execution,test,instance,test,method
SpringExtension -> @Override 	public void afterAll(ContainerExtensionContext context) throws Exception;1467664858;Delegates to {@link TestContextManager#afterTestClass}.;@Override_	public void afterAll(ContainerExtensionContext context) throws Exception {_		try {_			getTestContextManager(context).afterTestClass()__		}_		finally {_			context.getStore(namespace).remove(context.getTestClass().get())__		}_	};delegates,to,link,test,context,manager,after,test,class;override,public,void,after,all,container,extension,context,context,throws,exception,try,get,test,context,manager,context,after,test,class,finally,context,get,store,namespace,remove,context,get,test,class,get
SpringExtension -> @Override 	public void afterAll(ContainerExtensionContext context) throws Exception;1467731358;Delegates to {@link TestContextManager#afterTestClass}.;@Override_	public void afterAll(ContainerExtensionContext context) throws Exception {_		try {_			getTestContextManager(context).afterTestClass()__		}_		finally {_			context.getStore(namespace).remove(context.getTestClass().get())__		}_	};delegates,to,link,test,context,manager,after,test,class;override,public,void,after,all,container,extension,context,context,throws,exception,try,get,test,context,manager,context,after,test,class,finally,context,get,store,namespace,remove,context,get,test,class,get
SpringExtension -> @Override 	public void afterAll(ContainerExtensionContext context) throws Exception;1468244735;Delegates to {@link TestContextManager#afterTestClass}.;@Override_	public void afterAll(ContainerExtensionContext context) throws Exception {_		try {_			getTestContextManager(context).afterTestClass()__		}_		finally {_			context.getStore(namespace).remove(context.getTestClass().get())__		}_	};delegates,to,link,test,context,manager,after,test,class;override,public,void,after,all,container,extension,context,context,throws,exception,try,get,test,context,manager,context,after,test,class,finally,context,get,store,namespace,remove,context,get,test,class,get
SpringExtension -> @Override 	public void afterAll(ContainerExtensionContext context) throws Exception;1472411819;Delegates to {@link TestContextManager#afterTestClass}.;@Override_	public void afterAll(ContainerExtensionContext context) throws Exception {_		try {_			getTestContextManager(context).afterTestClass()__		}_		finally {_			context.getStore(namespace).remove(context.getTestClass().get())__		}_	};delegates,to,link,test,context,manager,after,test,class;override,public,void,after,all,container,extension,context,context,throws,exception,try,get,test,context,manager,context,after,test,class,finally,context,get,store,namespace,remove,context,get,test,class,get
SpringExtension -> @Override 	public void afterAll(ContainerExtensionContext context) throws Exception;1489501124;Delegates to {@link TestContextManager#afterTestClass}.;@Override_	public void afterAll(ContainerExtensionContext context) throws Exception {_		try {_			getTestContextManager(context).afterTestClass()__		}_		finally {_			context.getStore(NAMESPACE).remove(context.getTestClass().get())__		}_	};delegates,to,link,test,context,manager,after,test,class;override,public,void,after,all,container,extension,context,context,throws,exception,try,get,test,context,manager,context,after,test,class,finally,context,get,store,namespace,remove,context,get,test,class,get
SpringExtension -> @Override 	public void afterAll(ContainerExtensionContext context) throws Exception;1496955179;Delegates to {@link TestContextManager#afterTestClass}.;@Override_	public void afterAll(ContainerExtensionContext context) throws Exception {_		try {_			getTestContextManager(context).afterTestClass()__		}_		finally {_			context.getStore(NAMESPACE).remove(context.getTestClass().get())__		}_	};delegates,to,link,test,context,manager,after,test,class;override,public,void,after,all,container,extension,context,context,throws,exception,try,get,test,context,manager,context,after,test,class,finally,context,get,store,namespace,remove,context,get,test,class,get
SpringExtension -> @Override 	public void afterEach(ExtensionContext context) throws Exception;1499199673;Delegates to {@link TestContextManager#afterTestMethod}.;@Override_	public void afterEach(ExtensionContext context) throws Exception {_		Object testInstance = getRequiredTestInstance(context)__		Method testMethod = getRequiredTestMethod(context)__		Throwable testException = context.getExecutionException().orElse(null)__		getTestContextManager(context).afterTestMethod(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,method;override,public,void,after,each,extension,context,context,throws,exception,object,test,instance,get,required,test,instance,context,method,test,method,get,required,test,method,context,throwable,test,exception,context,get,execution,exception,or,else,null,get,test,context,manager,context,after,test,method,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterEach(ExtensionContext context) throws Exception;1501791597;Delegates to {@link TestContextManager#afterTestMethod}.;@Override_	public void afterEach(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		Throwable testException = context.getExecutionException().orElse(null)__		getTestContextManager(context).afterTestMethod(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,method;override,public,void,after,each,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,throwable,test,exception,context,get,execution,exception,or,else,null,get,test,context,manager,context,after,test,method,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterEach(ExtensionContext context) throws Exception;1501791998;Delegates to {@link TestContextManager#afterTestMethod}.;@Override_	public void afterEach(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		Throwable testException = context.getExecutionException().orElse(null)__		getTestContextManager(context).afterTestMethod(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,method;override,public,void,after,each,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,throwable,test,exception,context,get,execution,exception,or,else,null,get,test,context,manager,context,after,test,method,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterEach(ExtensionContext context) throws Exception;1522338465;Delegates to {@link TestContextManager#afterTestMethod}.;@Override_	public void afterEach(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		Throwable testException = context.getExecutionException().orElse(null)__		getTestContextManager(context).afterTestMethod(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,method;override,public,void,after,each,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,throwable,test,exception,context,get,execution,exception,or,else,null,get,test,context,manager,context,after,test,method,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterEach(ExtensionContext context) throws Exception;1551190945;Delegates to {@link TestContextManager#afterTestMethod}.;@Override_	public void afterEach(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		Throwable testException = context.getExecutionException().orElse(null)__		getTestContextManager(context).afterTestMethod(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,method;override,public,void,after,each,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,throwable,test,exception,context,get,execution,exception,or,else,null,get,test,context,manager,context,after,test,method,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterEach(ExtensionContext context) throws Exception;1551276945;Delegates to {@link TestContextManager#afterTestMethod}.;@Override_	public void afterEach(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		Throwable testException = context.getExecutionException().orElse(null)__		getTestContextManager(context).afterTestMethod(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,method;override,public,void,after,each,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,throwable,test,exception,context,get,execution,exception,or,else,null,get,test,context,manager,context,after,test,method,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterEach(TestExtensionContext context) throws Exception;1467664858;Delegates to {@link TestContextManager#afterTestMethod}.;@Override_	public void afterEach(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		Throwable testException = context.getTestException().orElse(null)__		getTestContextManager(context).afterTestMethod(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,method;override,public,void,after,each,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,throwable,test,exception,context,get,test,exception,or,else,null,get,test,context,manager,context,after,test,method,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterEach(TestExtensionContext context) throws Exception;1467731358;Delegates to {@link TestContextManager#afterTestMethod}.;@Override_	public void afterEach(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		Throwable testException = context.getTestException().orElse(null)__		getTestContextManager(context).afterTestMethod(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,method;override,public,void,after,each,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,throwable,test,exception,context,get,test,exception,or,else,null,get,test,context,manager,context,after,test,method,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterEach(TestExtensionContext context) throws Exception;1468244735;Delegates to {@link TestContextManager#afterTestMethod}.;@Override_	public void afterEach(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		Throwable testException = context.getTestException().orElse(null)__		getTestContextManager(context).afterTestMethod(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,method;override,public,void,after,each,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,throwable,test,exception,context,get,test,exception,or,else,null,get,test,context,manager,context,after,test,method,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterEach(TestExtensionContext context) throws Exception;1472411819;Delegates to {@link TestContextManager#afterTestMethod}.;@Override_	public void afterEach(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		Throwable testException = context.getTestException().orElse(null)__		getTestContextManager(context).afterTestMethod(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,method;override,public,void,after,each,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,throwable,test,exception,context,get,test,exception,or,else,null,get,test,context,manager,context,after,test,method,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterEach(TestExtensionContext context) throws Exception;1489501124;Delegates to {@link TestContextManager#afterTestMethod}.;@Override_	public void afterEach(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		Throwable testException = context.getTestException().orElse(null)__		getTestContextManager(context).afterTestMethod(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,method;override,public,void,after,each,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,throwable,test,exception,context,get,test,exception,or,else,null,get,test,context,manager,context,after,test,method,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterEach(TestExtensionContext context) throws Exception;1496955179;Delegates to {@link TestContextManager#afterTestMethod}.;@Override_	public void afterEach(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		Throwable testException = context.getTestException().orElse(null)__		getTestContextManager(context).afterTestMethod(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,method;override,public,void,after,each,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,throwable,test,exception,context,get,test,exception,or,else,null,get,test,context,manager,context,after,test,method,test,instance,test,method,test,exception
SpringExtension -> @Override 	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext);1467664858;Determine if the value for the {@link Parameter} in the supplied_{@link ParameterContext} should be autowired from the test's_{@link ApplicationContext}._<p>Returns {@code true} if the parameter is declared in a {@link Constructor}_that is annotated with {@link Autowired @Autowired} and otherwise delegates_to {@link ParameterAutowireUtils#isAutowirable}._<p><strong>WARNING</strong>: if the parameter is declared in a {@code Constructor}_that is annotated with {@code @Autowired}, Spring will assume the responsibility_for resolving all parameters in the constructor. Consequently, no other_registered {@link ParameterResolver} will be able to resolve parameters.__@see #resolve_@see ParameterAutowireUtils#isAutowirable;@Override_	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		Executable executable = parameter.getDeclaringExecutable()__		return (executable instanceof Constructor && AnnotatedElementUtils.hasAnnotation(executable, Autowired.class))_				|| ParameterAutowireUtils.isAutowirable(parameter)__	};determine,if,the,value,for,the,link,parameter,in,the,supplied,link,parameter,context,should,be,autowired,from,the,test,s,link,application,context,p,returns,code,true,if,the,parameter,is,declared,in,a,link,constructor,that,is,annotated,with,link,autowired,autowired,and,otherwise,delegates,to,link,parameter,autowire,utils,is,autowirable,p,strong,warning,strong,if,the,parameter,is,declared,in,a,code,constructor,that,is,annotated,with,code,autowired,spring,will,assume,the,responsibility,for,resolving,all,parameters,in,the,constructor,consequently,no,other,registered,link,parameter,resolver,will,be,able,to,resolve,parameters,see,resolve,see,parameter,autowire,utils,is,autowirable;override,public,boolean,supports,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,executable,executable,parameter,get,declaring,executable,return,executable,instanceof,constructor,annotated,element,utils,has,annotation,executable,autowired,class,parameter,autowire,utils,is,autowirable,parameter
SpringExtension -> @Override 	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext);1467731358;Determine if the value for the {@link Parameter} in the supplied_{@link ParameterContext} should be autowired from the test's_{@link ApplicationContext}._<p>Returns {@code true} if the parameter is declared in a {@link Constructor}_that is annotated with {@link Autowired @Autowired} and otherwise delegates_to {@link ParameterAutowireUtils#isAutowirable}._<p><strong>WARNING</strong>: if the parameter is declared in a {@code Constructor}_that is annotated with {@code @Autowired}, Spring will assume the responsibility_for resolving all parameters in the constructor. Consequently, no other_registered {@link ParameterResolver} will be able to resolve parameters.__@see #resolve_@see ParameterAutowireUtils#isAutowirable;@Override_	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		Executable executable = parameter.getDeclaringExecutable()__		return (executable instanceof Constructor && AnnotatedElementUtils.hasAnnotation(executable, Autowired.class))_				|| ParameterAutowireUtils.isAutowirable(parameter)__	};determine,if,the,value,for,the,link,parameter,in,the,supplied,link,parameter,context,should,be,autowired,from,the,test,s,link,application,context,p,returns,code,true,if,the,parameter,is,declared,in,a,link,constructor,that,is,annotated,with,link,autowired,autowired,and,otherwise,delegates,to,link,parameter,autowire,utils,is,autowirable,p,strong,warning,strong,if,the,parameter,is,declared,in,a,code,constructor,that,is,annotated,with,code,autowired,spring,will,assume,the,responsibility,for,resolving,all,parameters,in,the,constructor,consequently,no,other,registered,link,parameter,resolver,will,be,able,to,resolve,parameters,see,resolve,see,parameter,autowire,utils,is,autowirable;override,public,boolean,supports,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,executable,executable,parameter,get,declaring,executable,return,executable,instanceof,constructor,annotated,element,utils,has,annotation,executable,autowired,class,parameter,autowire,utils,is,autowirable,parameter
SpringExtension -> @Override 	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext);1468244735;Determine if the value for the {@link Parameter} in the supplied_{@link ParameterContext} should be autowired from the test's_{@link ApplicationContext}._<p>Returns {@code true} if the parameter is declared in a {@link Constructor}_that is annotated with {@link Autowired @Autowired} and otherwise delegates_to {@link ParameterAutowireUtils#isAutowirable}._<p><strong>WARNING</strong>: if the parameter is declared in a {@code Constructor}_that is annotated with {@code @Autowired}, Spring will assume the responsibility_for resolving all parameters in the constructor. Consequently, no other_registered {@link ParameterResolver} will be able to resolve parameters.__@see #resolve_@see ParameterAutowireUtils#isAutowirable;@Override_	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		Executable executable = parameter.getDeclaringExecutable()__		return (executable instanceof Constructor && AnnotatedElementUtils.hasAnnotation(executable, Autowired.class))_				|| ParameterAutowireUtils.isAutowirable(parameter)__	};determine,if,the,value,for,the,link,parameter,in,the,supplied,link,parameter,context,should,be,autowired,from,the,test,s,link,application,context,p,returns,code,true,if,the,parameter,is,declared,in,a,link,constructor,that,is,annotated,with,link,autowired,autowired,and,otherwise,delegates,to,link,parameter,autowire,utils,is,autowirable,p,strong,warning,strong,if,the,parameter,is,declared,in,a,code,constructor,that,is,annotated,with,code,autowired,spring,will,assume,the,responsibility,for,resolving,all,parameters,in,the,constructor,consequently,no,other,registered,link,parameter,resolver,will,be,able,to,resolve,parameters,see,resolve,see,parameter,autowire,utils,is,autowirable;override,public,boolean,supports,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,executable,executable,parameter,get,declaring,executable,return,executable,instanceof,constructor,annotated,element,utils,has,annotation,executable,autowired,class,parameter,autowire,utils,is,autowirable,parameter
SpringExtension -> @Override 	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext);1472411819;Determine if the value for the {@link Parameter} in the supplied_{@link ParameterContext} should be autowired from the test's_{@link ApplicationContext}._<p>Returns {@code true} if the parameter is declared in a {@link Constructor}_that is annotated with {@link Autowired @Autowired} and otherwise delegates_to {@link ParameterAutowireUtils#isAutowirable}._<p><strong>WARNING</strong>: if the parameter is declared in a {@code Constructor}_that is annotated with {@code @Autowired}, Spring will assume the responsibility_for resolving all parameters in the constructor. Consequently, no other_registered {@link ParameterResolver} will be able to resolve parameters.__@see #resolve_@see ParameterAutowireUtils#isAutowirable;@Override_	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		Executable executable = parameter.getDeclaringExecutable()__		return (executable instanceof Constructor && AnnotatedElementUtils.hasAnnotation(executable, Autowired.class))_				|| ParameterAutowireUtils.isAutowirable(parameter)__	};determine,if,the,value,for,the,link,parameter,in,the,supplied,link,parameter,context,should,be,autowired,from,the,test,s,link,application,context,p,returns,code,true,if,the,parameter,is,declared,in,a,link,constructor,that,is,annotated,with,link,autowired,autowired,and,otherwise,delegates,to,link,parameter,autowire,utils,is,autowirable,p,strong,warning,strong,if,the,parameter,is,declared,in,a,code,constructor,that,is,annotated,with,code,autowired,spring,will,assume,the,responsibility,for,resolving,all,parameters,in,the,constructor,consequently,no,other,registered,link,parameter,resolver,will,be,able,to,resolve,parameters,see,resolve,see,parameter,autowire,utils,is,autowirable;override,public,boolean,supports,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,executable,executable,parameter,get,declaring,executable,return,executable,instanceof,constructor,annotated,element,utils,has,annotation,executable,autowired,class,parameter,autowire,utils,is,autowirable,parameter
SpringExtension -> @Override 	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext);1489501124;Determine if the value for the {@link Parameter} in the supplied {@link ParameterContext}_should be autowired from the test's {@link ApplicationContext}._<p>Returns {@code true} if the parameter is declared in a {@link Constructor}_that is annotated with {@link Autowired @Autowired} and otherwise delegates to_{@link ParameterAutowireUtils#isAutowirable}._<p><strong>WARNING</strong>: If the parameter is declared in a {@code Constructor}_that is annotated with {@code @Autowired}, Spring will assume the responsibility_for resolving all parameters in the constructor. Consequently, no other registered_{@link ParameterResolver} will be able to resolve parameters._@see #resolve_@see ParameterAutowireUtils#isAutowirable;@Override_	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		Executable executable = parameter.getDeclaringExecutable()__		return (executable instanceof Constructor &&_				AnnotatedElementUtils.hasAnnotation(executable, Autowired.class)) ||_				ParameterAutowireUtils.isAutowirable(parameter)__	};determine,if,the,value,for,the,link,parameter,in,the,supplied,link,parameter,context,should,be,autowired,from,the,test,s,link,application,context,p,returns,code,true,if,the,parameter,is,declared,in,a,link,constructor,that,is,annotated,with,link,autowired,autowired,and,otherwise,delegates,to,link,parameter,autowire,utils,is,autowirable,p,strong,warning,strong,if,the,parameter,is,declared,in,a,code,constructor,that,is,annotated,with,code,autowired,spring,will,assume,the,responsibility,for,resolving,all,parameters,in,the,constructor,consequently,no,other,registered,link,parameter,resolver,will,be,able,to,resolve,parameters,see,resolve,see,parameter,autowire,utils,is,autowirable;override,public,boolean,supports,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,executable,executable,parameter,get,declaring,executable,return,executable,instanceof,constructor,annotated,element,utils,has,annotation,executable,autowired,class,parameter,autowire,utils,is,autowirable,parameter
SpringExtension -> @Override 	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext);1496955179;Determine if the value for the {@link Parameter} in the supplied {@link ParameterContext}_should be autowired from the test's {@link ApplicationContext}._<p>Returns {@code true} if the parameter is declared in a {@link Constructor}_that is annotated with {@link Autowired @Autowired} and otherwise delegates to_{@link ParameterAutowireUtils#isAutowirable}._<p><strong>WARNING</strong>: If the parameter is declared in a {@code Constructor}_that is annotated with {@code @Autowired}, Spring will assume the responsibility_for resolving all parameters in the constructor. Consequently, no other registered_{@link ParameterResolver} will be able to resolve parameters._@see #resolve_@see ParameterAutowireUtils#isAutowirable;@Override_	public boolean supports(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		Executable executable = parameter.getDeclaringExecutable()__		return (executable instanceof Constructor &&_				AnnotatedElementUtils.hasAnnotation(executable, Autowired.class)) ||_				ParameterAutowireUtils.isAutowirable(parameter)__	};determine,if,the,value,for,the,link,parameter,in,the,supplied,link,parameter,context,should,be,autowired,from,the,test,s,link,application,context,p,returns,code,true,if,the,parameter,is,declared,in,a,link,constructor,that,is,annotated,with,link,autowired,autowired,and,otherwise,delegates,to,link,parameter,autowire,utils,is,autowirable,p,strong,warning,strong,if,the,parameter,is,declared,in,a,code,constructor,that,is,annotated,with,code,autowired,spring,will,assume,the,responsibility,for,resolving,all,parameters,in,the,constructor,consequently,no,other,registered,link,parameter,resolver,will,be,able,to,resolve,parameters,see,resolve,see,parameter,autowire,utils,is,autowirable;override,public,boolean,supports,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,executable,executable,parameter,get,declaring,executable,return,executable,instanceof,constructor,annotated,element,utils,has,annotation,executable,autowired,class,parameter,autowire,utils,is,autowirable,parameter
SpringExtension -> @Override 	@Nullable 	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext);1499199673;Resolve a value for the {@link Parameter} in the supplied {@link ParameterContext} by_retrieving the corresponding dependency from the test's {@link ApplicationContext}._<p>Delegates to {@link ParameterAutowireUtils#resolveDependency}._@see #supportsParameter_@see ParameterAutowireUtils#resolveDependency;@Override_	@Nullable_	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		Class<?> testClass = getRequiredTestClass(extensionContext)__		ApplicationContext applicationContext = getApplicationContext(extensionContext)__		return ParameterAutowireUtils.resolveDependency(parameter, testClass, applicationContext)__	};resolve,a,value,for,the,link,parameter,in,the,supplied,link,parameter,context,by,retrieving,the,corresponding,dependency,from,the,test,s,link,application,context,p,delegates,to,link,parameter,autowire,utils,resolve,dependency,see,supports,parameter,see,parameter,autowire,utils,resolve,dependency;override,nullable,public,object,resolve,parameter,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,class,test,class,get,required,test,class,extension,context,application,context,application,context,get,application,context,extension,context,return,parameter,autowire,utils,resolve,dependency,parameter,test,class,application,context
SpringExtension -> @Override 	@Nullable 	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext);1501791597;Resolve a value for the {@link Parameter} in the supplied {@link ParameterContext} by_retrieving the corresponding dependency from the test's {@link ApplicationContext}._<p>Delegates to {@link ParameterAutowireUtils#resolveDependency}._@see #supportsParameter_@see ParameterAutowireUtils#resolveDependency;@Override_	@Nullable_	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		Class<?> testClass = extensionContext.getRequiredTestClass()__		ApplicationContext applicationContext = getApplicationContext(extensionContext)__		return ParameterAutowireUtils.resolveDependency(parameter, testClass, applicationContext)__	};resolve,a,value,for,the,link,parameter,in,the,supplied,link,parameter,context,by,retrieving,the,corresponding,dependency,from,the,test,s,link,application,context,p,delegates,to,link,parameter,autowire,utils,resolve,dependency,see,supports,parameter,see,parameter,autowire,utils,resolve,dependency;override,nullable,public,object,resolve,parameter,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,class,test,class,extension,context,get,required,test,class,application,context,application,context,get,application,context,extension,context,return,parameter,autowire,utils,resolve,dependency,parameter,test,class,application,context
SpringExtension -> @Override 	@Nullable 	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext);1501791998;Resolve a value for the {@link Parameter} in the supplied {@link ParameterContext} by_retrieving the corresponding dependency from the test's {@link ApplicationContext}._<p>Delegates to {@link ParameterAutowireUtils#resolveDependency}._@see #supportsParameter_@see ParameterAutowireUtils#resolveDependency;@Override_	@Nullable_	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		Class<?> testClass = extensionContext.getRequiredTestClass()__		ApplicationContext applicationContext = getApplicationContext(extensionContext)__		return ParameterAutowireUtils.resolveDependency(parameter, testClass, applicationContext)__	};resolve,a,value,for,the,link,parameter,in,the,supplied,link,parameter,context,by,retrieving,the,corresponding,dependency,from,the,test,s,link,application,context,p,delegates,to,link,parameter,autowire,utils,resolve,dependency,see,supports,parameter,see,parameter,autowire,utils,resolve,dependency;override,nullable,public,object,resolve,parameter,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,class,test,class,extension,context,get,required,test,class,application,context,application,context,get,application,context,extension,context,return,parameter,autowire,utils,resolve,dependency,parameter,test,class,application,context
SpringExtension -> @Override 	@Nullable 	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext);1522338465;Resolve a value for the {@link Parameter} in the supplied {@link ParameterContext} by_retrieving the corresponding dependency from the test's {@link ApplicationContext}._<p>Delegates to {@link ParameterAutowireUtils#resolveDependency}._@see #supportsParameter_@see ParameterAutowireUtils#resolveDependency;@Override_	@Nullable_	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		int index = parameterContext.getIndex()__		Class<?> testClass = extensionContext.getRequiredTestClass()__		ApplicationContext applicationContext = getApplicationContext(extensionContext)__		return ParameterAutowireUtils.resolveDependency(parameter, index, testClass, applicationContext)__	};resolve,a,value,for,the,link,parameter,in,the,supplied,link,parameter,context,by,retrieving,the,corresponding,dependency,from,the,test,s,link,application,context,p,delegates,to,link,parameter,autowire,utils,resolve,dependency,see,supports,parameter,see,parameter,autowire,utils,resolve,dependency;override,nullable,public,object,resolve,parameter,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,int,index,parameter,context,get,index,class,test,class,extension,context,get,required,test,class,application,context,application,context,get,application,context,extension,context,return,parameter,autowire,utils,resolve,dependency,parameter,index,test,class,application,context
SpringExtension -> @Override 	@Nullable 	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext);1551190945;Resolve a value for the {@link Parameter} in the supplied {@link ParameterContext} by_retrieving the corresponding dependency from the test's {@link ApplicationContext}._<p>Delegates to {@link ParameterAutowireUtils#resolveDependency}._@see #supportsParameter_@see ParameterAutowireUtils#resolveDependency;@Override_	@Nullable_	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		int index = parameterContext.getIndex()__		Class<?> testClass = extensionContext.getRequiredTestClass()__		ApplicationContext applicationContext = getApplicationContext(extensionContext)__		return ParameterAutowireUtils.resolveDependency(parameter, index, testClass,_			applicationContext.getAutowireCapableBeanFactory())__	};resolve,a,value,for,the,link,parameter,in,the,supplied,link,parameter,context,by,retrieving,the,corresponding,dependency,from,the,test,s,link,application,context,p,delegates,to,link,parameter,autowire,utils,resolve,dependency,see,supports,parameter,see,parameter,autowire,utils,resolve,dependency;override,nullable,public,object,resolve,parameter,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,int,index,parameter,context,get,index,class,test,class,extension,context,get,required,test,class,application,context,application,context,get,application,context,extension,context,return,parameter,autowire,utils,resolve,dependency,parameter,index,test,class,application,context,get,autowire,capable,bean,factory
SpringExtension -> @Override 	@Nullable 	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext);1551276945;Resolve a value for the {@link Parameter} in the supplied {@link ParameterContext} by_retrieving the corresponding dependency from the test's {@link ApplicationContext}._<p>Delegates to {@link AutowireUtils#resolveDependency}._@see #supportsParameter_@see AutowireUtils#resolveDependency;@Override_	@Nullable_	public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		int index = parameterContext.getIndex()__		Class<?> testClass = extensionContext.getRequiredTestClass()__		ApplicationContext applicationContext = getApplicationContext(extensionContext)__		return AutowireUtils.resolveDependency(parameter, index, testClass,_			applicationContext.getAutowireCapableBeanFactory())__	};resolve,a,value,for,the,link,parameter,in,the,supplied,link,parameter,context,by,retrieving,the,corresponding,dependency,from,the,test,s,link,application,context,p,delegates,to,link,autowire,utils,resolve,dependency,see,supports,parameter,see,autowire,utils,resolve,dependency;override,nullable,public,object,resolve,parameter,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,int,index,parameter,context,get,index,class,test,class,extension,context,get,required,test,class,application,context,application,context,get,application,context,extension,context,return,autowire,utils,resolve,dependency,parameter,index,test,class,application,context,get,autowire,capable,bean,factory
SpringExtension -> public static ApplicationContext getApplicationContext(ExtensionContext context);1489501124;Get the {@link ApplicationContext} associated with the supplied {@code ExtensionContext}._@param context the current {@code ExtensionContext} (never {@code null})_@return the application context_@throws IllegalStateException if an error occurs while retrieving the application context_@see org.springframework.test.context.TestContext#getApplicationContext();public static ApplicationContext getApplicationContext(ExtensionContext context) {_		return getTestContextManager(context).getTestContext().getApplicationContext()__	};get,the,link,application,context,associated,with,the,supplied,code,extension,context,param,context,the,current,code,extension,context,never,code,null,return,the,application,context,throws,illegal,state,exception,if,an,error,occurs,while,retrieving,the,application,context,see,org,springframework,test,context,test,context,get,application,context;public,static,application,context,get,application,context,extension,context,context,return,get,test,context,manager,context,get,test,context,get,application,context
SpringExtension -> public static ApplicationContext getApplicationContext(ExtensionContext context);1496955179;Get the {@link ApplicationContext} associated with the supplied {@code ExtensionContext}._@param context the current {@code ExtensionContext} (never {@code null})_@return the application context_@throws IllegalStateException if an error occurs while retrieving the application context_@see org.springframework.test.context.TestContext#getApplicationContext();public static ApplicationContext getApplicationContext(ExtensionContext context) {_		return getTestContextManager(context).getTestContext().getApplicationContext()__	};get,the,link,application,context,associated,with,the,supplied,code,extension,context,param,context,the,current,code,extension,context,never,code,null,return,the,application,context,throws,illegal,state,exception,if,an,error,occurs,while,retrieving,the,application,context,see,org,springframework,test,context,test,context,get,application,context;public,static,application,context,get,application,context,extension,context,context,return,get,test,context,manager,context,get,test,context,get,application,context
SpringExtension -> public static ApplicationContext getApplicationContext(ExtensionContext context);1499199673;Get the {@link ApplicationContext} associated with the supplied {@code ExtensionContext}._@param context the current {@code ExtensionContext} (never {@code null})_@return the application context_@throws IllegalStateException if an error occurs while retrieving the application context_@see org.springframework.test.context.TestContext#getApplicationContext();public static ApplicationContext getApplicationContext(ExtensionContext context) {_		return getTestContextManager(context).getTestContext().getApplicationContext()__	};get,the,link,application,context,associated,with,the,supplied,code,extension,context,param,context,the,current,code,extension,context,never,code,null,return,the,application,context,throws,illegal,state,exception,if,an,error,occurs,while,retrieving,the,application,context,see,org,springframework,test,context,test,context,get,application,context;public,static,application,context,get,application,context,extension,context,context,return,get,test,context,manager,context,get,test,context,get,application,context
SpringExtension -> public static ApplicationContext getApplicationContext(ExtensionContext context);1501791597;Get the {@link ApplicationContext} associated with the supplied {@code ExtensionContext}._@param context the current {@code ExtensionContext} (never {@code null})_@return the application context_@throws IllegalStateException if an error occurs while retrieving the application context_@see org.springframework.test.context.TestContext#getApplicationContext();public static ApplicationContext getApplicationContext(ExtensionContext context) {_		return getTestContextManager(context).getTestContext().getApplicationContext()__	};get,the,link,application,context,associated,with,the,supplied,code,extension,context,param,context,the,current,code,extension,context,never,code,null,return,the,application,context,throws,illegal,state,exception,if,an,error,occurs,while,retrieving,the,application,context,see,org,springframework,test,context,test,context,get,application,context;public,static,application,context,get,application,context,extension,context,context,return,get,test,context,manager,context,get,test,context,get,application,context
SpringExtension -> public static ApplicationContext getApplicationContext(ExtensionContext context);1501791998;Get the {@link ApplicationContext} associated with the supplied {@code ExtensionContext}._@param context the current {@code ExtensionContext} (never {@code null})_@return the application context_@throws IllegalStateException if an error occurs while retrieving the application context_@see org.springframework.test.context.TestContext#getApplicationContext();public static ApplicationContext getApplicationContext(ExtensionContext context) {_		return getTestContextManager(context).getTestContext().getApplicationContext()__	};get,the,link,application,context,associated,with,the,supplied,code,extension,context,param,context,the,current,code,extension,context,never,code,null,return,the,application,context,throws,illegal,state,exception,if,an,error,occurs,while,retrieving,the,application,context,see,org,springframework,test,context,test,context,get,application,context;public,static,application,context,get,application,context,extension,context,context,return,get,test,context,manager,context,get,test,context,get,application,context
SpringExtension -> public static ApplicationContext getApplicationContext(ExtensionContext context);1522338465;Get the {@link ApplicationContext} associated with the supplied {@code ExtensionContext}._@param context the current {@code ExtensionContext} (never {@code null})_@return the application context_@throws IllegalStateException if an error occurs while retrieving the application context_@see org.springframework.test.context.TestContext#getApplicationContext();public static ApplicationContext getApplicationContext(ExtensionContext context) {_		return getTestContextManager(context).getTestContext().getApplicationContext()__	};get,the,link,application,context,associated,with,the,supplied,code,extension,context,param,context,the,current,code,extension,context,never,code,null,return,the,application,context,throws,illegal,state,exception,if,an,error,occurs,while,retrieving,the,application,context,see,org,springframework,test,context,test,context,get,application,context;public,static,application,context,get,application,context,extension,context,context,return,get,test,context,manager,context,get,test,context,get,application,context
SpringExtension -> public static ApplicationContext getApplicationContext(ExtensionContext context);1551190945;Get the {@link ApplicationContext} associated with the supplied {@code ExtensionContext}._@param context the current {@code ExtensionContext} (never {@code null})_@return the application context_@throws IllegalStateException if an error occurs while retrieving the application context_@see org.springframework.test.context.TestContext#getApplicationContext();public static ApplicationContext getApplicationContext(ExtensionContext context) {_		return getTestContextManager(context).getTestContext().getApplicationContext()__	};get,the,link,application,context,associated,with,the,supplied,code,extension,context,param,context,the,current,code,extension,context,never,code,null,return,the,application,context,throws,illegal,state,exception,if,an,error,occurs,while,retrieving,the,application,context,see,org,springframework,test,context,test,context,get,application,context;public,static,application,context,get,application,context,extension,context,context,return,get,test,context,manager,context,get,test,context,get,application,context
SpringExtension -> public static ApplicationContext getApplicationContext(ExtensionContext context);1551276945;Get the {@link ApplicationContext} associated with the supplied {@code ExtensionContext}._@param context the current {@code ExtensionContext} (never {@code null})_@return the application context_@throws IllegalStateException if an error occurs while retrieving the application context_@see org.springframework.test.context.TestContext#getApplicationContext();public static ApplicationContext getApplicationContext(ExtensionContext context) {_		return getTestContextManager(context).getTestContext().getApplicationContext()__	};get,the,link,application,context,associated,with,the,supplied,code,extension,context,param,context,the,current,code,extension,context,never,code,null,return,the,application,context,throws,illegal,state,exception,if,an,error,occurs,while,retrieving,the,application,context,see,org,springframework,test,context,test,context,get,application,context;public,static,application,context,get,application,context,extension,context,context,return,get,test,context,manager,context,get,test,context,get,application,context
SpringExtension -> @Override 	public void beforeEach(TestExtensionContext context) throws Exception;1467664858;Delegates to {@link TestContextManager#beforeTestMethod}.;@Override_	public void beforeEach(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		getTestContextManager(context).beforeTestMethod(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,method;override,public,void,before,each,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,get,test,context,manager,context,before,test,method,test,instance,test,method
SpringExtension -> @Override 	public void beforeEach(TestExtensionContext context) throws Exception;1467731358;Delegates to {@link TestContextManager#beforeTestMethod}.;@Override_	public void beforeEach(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		getTestContextManager(context).beforeTestMethod(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,method;override,public,void,before,each,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,get,test,context,manager,context,before,test,method,test,instance,test,method
SpringExtension -> @Override 	public void beforeEach(TestExtensionContext context) throws Exception;1468244735;Delegates to {@link TestContextManager#beforeTestMethod}.;@Override_	public void beforeEach(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		getTestContextManager(context).beforeTestMethod(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,method;override,public,void,before,each,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,get,test,context,manager,context,before,test,method,test,instance,test,method
SpringExtension -> @Override 	public void beforeEach(TestExtensionContext context) throws Exception;1472411819;Delegates to {@link TestContextManager#beforeTestMethod}.;@Override_	public void beforeEach(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		getTestContextManager(context).beforeTestMethod(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,method;override,public,void,before,each,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,get,test,context,manager,context,before,test,method,test,instance,test,method
SpringExtension -> @Override 	public void beforeEach(TestExtensionContext context) throws Exception;1489501124;Delegates to {@link TestContextManager#beforeTestMethod}.;@Override_	public void beforeEach(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		getTestContextManager(context).beforeTestMethod(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,method;override,public,void,before,each,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,get,test,context,manager,context,before,test,method,test,instance,test,method
SpringExtension -> @Override 	public void beforeEach(TestExtensionContext context) throws Exception;1496955179;Delegates to {@link TestContextManager#beforeTestMethod}.;@Override_	public void beforeEach(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		getTestContextManager(context).beforeTestMethod(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,method;override,public,void,before,each,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,get,test,context,manager,context,before,test,method,test,instance,test,method
SpringExtension -> @Override 	public void afterTestExecution(ExtensionContext context) throws Exception;1499199673;Delegates to {@link TestContextManager#afterTestExecution}.;@Override_	public void afterTestExecution(ExtensionContext context) throws Exception {_		Object testInstance = getRequiredTestInstance(context)__		Method testMethod = getRequiredTestMethod(context)__		Throwable testException = context.getExecutionException().orElse(null)__		getTestContextManager(context).afterTestExecution(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,execution;override,public,void,after,test,execution,extension,context,context,throws,exception,object,test,instance,get,required,test,instance,context,method,test,method,get,required,test,method,context,throwable,test,exception,context,get,execution,exception,or,else,null,get,test,context,manager,context,after,test,execution,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterTestExecution(ExtensionContext context) throws Exception;1501791597;Delegates to {@link TestContextManager#afterTestExecution}.;@Override_	public void afterTestExecution(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		Throwable testException = context.getExecutionException().orElse(null)__		getTestContextManager(context).afterTestExecution(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,execution;override,public,void,after,test,execution,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,throwable,test,exception,context,get,execution,exception,or,else,null,get,test,context,manager,context,after,test,execution,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterTestExecution(ExtensionContext context) throws Exception;1501791998;Delegates to {@link TestContextManager#afterTestExecution}.;@Override_	public void afterTestExecution(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		Throwable testException = context.getExecutionException().orElse(null)__		getTestContextManager(context).afterTestExecution(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,execution;override,public,void,after,test,execution,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,throwable,test,exception,context,get,execution,exception,or,else,null,get,test,context,manager,context,after,test,execution,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterTestExecution(ExtensionContext context) throws Exception;1522338465;Delegates to {@link TestContextManager#afterTestExecution}.;@Override_	public void afterTestExecution(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		Throwable testException = context.getExecutionException().orElse(null)__		getTestContextManager(context).afterTestExecution(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,execution;override,public,void,after,test,execution,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,throwable,test,exception,context,get,execution,exception,or,else,null,get,test,context,manager,context,after,test,execution,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterTestExecution(ExtensionContext context) throws Exception;1551190945;Delegates to {@link TestContextManager#afterTestExecution}.;@Override_	public void afterTestExecution(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		Throwable testException = context.getExecutionException().orElse(null)__		getTestContextManager(context).afterTestExecution(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,execution;override,public,void,after,test,execution,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,throwable,test,exception,context,get,execution,exception,or,else,null,get,test,context,manager,context,after,test,execution,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterTestExecution(ExtensionContext context) throws Exception;1551276945;Delegates to {@link TestContextManager#afterTestExecution}.;@Override_	public void afterTestExecution(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		Throwable testException = context.getExecutionException().orElse(null)__		getTestContextManager(context).afterTestExecution(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,execution;override,public,void,after,test,execution,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,throwable,test,exception,context,get,execution,exception,or,else,null,get,test,context,manager,context,after,test,execution,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void beforeAll(ExtensionContext context) throws Exception;1499199673;Delegates to {@link TestContextManager#beforeTestClass}.;@Override_	public void beforeAll(ExtensionContext context) throws Exception {_		getTestContextManager(context).beforeTestClass()__	};delegates,to,link,test,context,manager,before,test,class;override,public,void,before,all,extension,context,context,throws,exception,get,test,context,manager,context,before,test,class
SpringExtension -> @Override 	public void beforeAll(ExtensionContext context) throws Exception;1501791597;Delegates to {@link TestContextManager#beforeTestClass}.;@Override_	public void beforeAll(ExtensionContext context) throws Exception {_		getTestContextManager(context).beforeTestClass()__	};delegates,to,link,test,context,manager,before,test,class;override,public,void,before,all,extension,context,context,throws,exception,get,test,context,manager,context,before,test,class
SpringExtension -> @Override 	public void beforeAll(ExtensionContext context) throws Exception;1501791998;Delegates to {@link TestContextManager#beforeTestClass}.;@Override_	public void beforeAll(ExtensionContext context) throws Exception {_		getTestContextManager(context).beforeTestClass()__	};delegates,to,link,test,context,manager,before,test,class;override,public,void,before,all,extension,context,context,throws,exception,get,test,context,manager,context,before,test,class
SpringExtension -> @Override 	public void beforeAll(ExtensionContext context) throws Exception;1522338465;Delegates to {@link TestContextManager#beforeTestClass}.;@Override_	public void beforeAll(ExtensionContext context) throws Exception {_		getTestContextManager(context).beforeTestClass()__	};delegates,to,link,test,context,manager,before,test,class;override,public,void,before,all,extension,context,context,throws,exception,get,test,context,manager,context,before,test,class
SpringExtension -> @Override 	public void beforeAll(ExtensionContext context) throws Exception;1551190945;Delegates to {@link TestContextManager#beforeTestClass}.;@Override_	public void beforeAll(ExtensionContext context) throws Exception {_		getTestContextManager(context).beforeTestClass()__	};delegates,to,link,test,context,manager,before,test,class;override,public,void,before,all,extension,context,context,throws,exception,get,test,context,manager,context,before,test,class
SpringExtension -> @Override 	public void beforeAll(ExtensionContext context) throws Exception;1551276945;Delegates to {@link TestContextManager#beforeTestClass}.;@Override_	public void beforeAll(ExtensionContext context) throws Exception {_		getTestContextManager(context).beforeTestClass()__	};delegates,to,link,test,context,manager,before,test,class;override,public,void,before,all,extension,context,context,throws,exception,get,test,context,manager,context,before,test,class
SpringExtension -> @Override 	public void afterTestExecution(TestExtensionContext context) throws Exception;1468244735;Delegates to {@link TestContextManager#afterTestExecution}.;@Override_	public void afterTestExecution(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		Throwable testException = context.getTestException().orElse(null)__		getTestContextManager(context).afterTestExecution(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,execution;override,public,void,after,test,execution,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,throwable,test,exception,context,get,test,exception,or,else,null,get,test,context,manager,context,after,test,execution,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterTestExecution(TestExtensionContext context) throws Exception;1472411819;Delegates to {@link TestContextManager#afterTestExecution}.;@Override_	public void afterTestExecution(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		Throwable testException = context.getTestException().orElse(null)__		getTestContextManager(context).afterTestExecution(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,execution;override,public,void,after,test,execution,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,throwable,test,exception,context,get,test,exception,or,else,null,get,test,context,manager,context,after,test,execution,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterTestExecution(TestExtensionContext context) throws Exception;1489501124;Delegates to {@link TestContextManager#afterTestExecution}.;@Override_	public void afterTestExecution(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		Throwable testException = context.getTestException().orElse(null)__		getTestContextManager(context).afterTestExecution(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,execution;override,public,void,after,test,execution,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,throwable,test,exception,context,get,test,exception,or,else,null,get,test,context,manager,context,after,test,execution,test,instance,test,method,test,exception
SpringExtension -> @Override 	public void afterTestExecution(TestExtensionContext context) throws Exception;1496955179;Delegates to {@link TestContextManager#afterTestExecution}.;@Override_	public void afterTestExecution(TestExtensionContext context) throws Exception {_		Object testInstance = context.getTestInstance()__		Method testMethod = context.getTestMethod().get()__		Throwable testException = context.getTestException().orElse(null)__		getTestContextManager(context).afterTestExecution(testInstance, testMethod, testException)__	};delegates,to,link,test,context,manager,after,test,execution;override,public,void,after,test,execution,test,extension,context,context,throws,exception,object,test,instance,context,get,test,instance,method,test,method,context,get,test,method,get,throwable,test,exception,context,get,test,exception,or,else,null,get,test,context,manager,context,after,test,execution,test,instance,test,method,test,exception
SpringExtension -> private ApplicationContext getApplicationContext(ExtensionContext context);1467664858;Get the {@link ApplicationContext} associated with the supplied_{@code ExtensionContext}._@param context the current {@code ExtensionContext}_ never {@code null}_@return the application context_@throws IllegalStateException if an error occurs while retrieving the_application context_@see org.springframework.test.context.TestContext#getApplicationContext();private ApplicationContext getApplicationContext(ExtensionContext context) {_		return getTestContextManager(context).getTestContext().getApplicationContext()__	};get,the,link,application,context,associated,with,the,supplied,code,extension,context,param,context,the,current,code,extension,context,never,code,null,return,the,application,context,throws,illegal,state,exception,if,an,error,occurs,while,retrieving,the,application,context,see,org,springframework,test,context,test,context,get,application,context;private,application,context,get,application,context,extension,context,context,return,get,test,context,manager,context,get,test,context,get,application,context
SpringExtension -> private ApplicationContext getApplicationContext(ExtensionContext context);1467731358;Get the {@link ApplicationContext} associated with the supplied_{@code ExtensionContext}._@param context the current {@code ExtensionContext}_ never {@code null}_@return the application context_@throws IllegalStateException if an error occurs while retrieving the_application context_@see org.springframework.test.context.TestContext#getApplicationContext();private ApplicationContext getApplicationContext(ExtensionContext context) {_		return getTestContextManager(context).getTestContext().getApplicationContext()__	};get,the,link,application,context,associated,with,the,supplied,code,extension,context,param,context,the,current,code,extension,context,never,code,null,return,the,application,context,throws,illegal,state,exception,if,an,error,occurs,while,retrieving,the,application,context,see,org,springframework,test,context,test,context,get,application,context;private,application,context,get,application,context,extension,context,context,return,get,test,context,manager,context,get,test,context,get,application,context
SpringExtension -> private ApplicationContext getApplicationContext(ExtensionContext context);1468244735;Get the {@link ApplicationContext} associated with the supplied_{@code ExtensionContext}._@param context the current {@code ExtensionContext}_ never {@code null}_@return the application context_@throws IllegalStateException if an error occurs while retrieving the_application context_@see org.springframework.test.context.TestContext#getApplicationContext();private ApplicationContext getApplicationContext(ExtensionContext context) {_		return getTestContextManager(context).getTestContext().getApplicationContext()__	};get,the,link,application,context,associated,with,the,supplied,code,extension,context,param,context,the,current,code,extension,context,never,code,null,return,the,application,context,throws,illegal,state,exception,if,an,error,occurs,while,retrieving,the,application,context,see,org,springframework,test,context,test,context,get,application,context;private,application,context,get,application,context,extension,context,context,return,get,test,context,manager,context,get,test,context,get,application,context
SpringExtension -> @Override 	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception;1467664858;Delegates to {@link TestContextManager#prepareTestInstance}.;@Override_	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception {_		getTestContextManager(context).prepareTestInstance(testInstance)__	};delegates,to,link,test,context,manager,prepare,test,instance;override,public,void,post,process,test,instance,object,test,instance,extension,context,context,throws,exception,get,test,context,manager,context,prepare,test,instance,test,instance
SpringExtension -> @Override 	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception;1467731358;Delegates to {@link TestContextManager#prepareTestInstance}.;@Override_	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception {_		getTestContextManager(context).prepareTestInstance(testInstance)__	};delegates,to,link,test,context,manager,prepare,test,instance;override,public,void,post,process,test,instance,object,test,instance,extension,context,context,throws,exception,get,test,context,manager,context,prepare,test,instance,test,instance
SpringExtension -> @Override 	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception;1468244735;Delegates to {@link TestContextManager#prepareTestInstance}.;@Override_	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception {_		getTestContextManager(context).prepareTestInstance(testInstance)__	};delegates,to,link,test,context,manager,prepare,test,instance;override,public,void,post,process,test,instance,object,test,instance,extension,context,context,throws,exception,get,test,context,manager,context,prepare,test,instance,test,instance
SpringExtension -> @Override 	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception;1472411819;Delegates to {@link TestContextManager#prepareTestInstance}.;@Override_	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception {_		getTestContextManager(context).prepareTestInstance(testInstance)__	};delegates,to,link,test,context,manager,prepare,test,instance;override,public,void,post,process,test,instance,object,test,instance,extension,context,context,throws,exception,get,test,context,manager,context,prepare,test,instance,test,instance
SpringExtension -> @Override 	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception;1489501124;Delegates to {@link TestContextManager#prepareTestInstance}.;@Override_	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception {_		getTestContextManager(context).prepareTestInstance(testInstance)__	};delegates,to,link,test,context,manager,prepare,test,instance;override,public,void,post,process,test,instance,object,test,instance,extension,context,context,throws,exception,get,test,context,manager,context,prepare,test,instance,test,instance
SpringExtension -> @Override 	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception;1496955179;Delegates to {@link TestContextManager#prepareTestInstance}.;@Override_	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception {_		getTestContextManager(context).prepareTestInstance(testInstance)__	};delegates,to,link,test,context,manager,prepare,test,instance;override,public,void,post,process,test,instance,object,test,instance,extension,context,context,throws,exception,get,test,context,manager,context,prepare,test,instance,test,instance
SpringExtension -> @Override 	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception;1499199673;Delegates to {@link TestContextManager#prepareTestInstance}.;@Override_	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception {_		getTestContextManager(context).prepareTestInstance(testInstance)__	};delegates,to,link,test,context,manager,prepare,test,instance;override,public,void,post,process,test,instance,object,test,instance,extension,context,context,throws,exception,get,test,context,manager,context,prepare,test,instance,test,instance
SpringExtension -> @Override 	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception;1501791597;Delegates to {@link TestContextManager#prepareTestInstance}.;@Override_	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception {_		getTestContextManager(context).prepareTestInstance(testInstance)__	};delegates,to,link,test,context,manager,prepare,test,instance;override,public,void,post,process,test,instance,object,test,instance,extension,context,context,throws,exception,get,test,context,manager,context,prepare,test,instance,test,instance
SpringExtension -> @Override 	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception;1501791998;Delegates to {@link TestContextManager#prepareTestInstance}.;@Override_	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception {_		getTestContextManager(context).prepareTestInstance(testInstance)__	};delegates,to,link,test,context,manager,prepare,test,instance;override,public,void,post,process,test,instance,object,test,instance,extension,context,context,throws,exception,get,test,context,manager,context,prepare,test,instance,test,instance
SpringExtension -> @Override 	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception;1522338465;Delegates to {@link TestContextManager#prepareTestInstance}.;@Override_	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception {_		getTestContextManager(context).prepareTestInstance(testInstance)__	};delegates,to,link,test,context,manager,prepare,test,instance;override,public,void,post,process,test,instance,object,test,instance,extension,context,context,throws,exception,get,test,context,manager,context,prepare,test,instance,test,instance
SpringExtension -> @Override 	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception;1551190945;Delegates to {@link TestContextManager#prepareTestInstance}.;@Override_	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception {_		getTestContextManager(context).prepareTestInstance(testInstance)__	};delegates,to,link,test,context,manager,prepare,test,instance;override,public,void,post,process,test,instance,object,test,instance,extension,context,context,throws,exception,get,test,context,manager,context,prepare,test,instance,test,instance
SpringExtension -> @Override 	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception;1551276945;Delegates to {@link TestContextManager#prepareTestInstance}.;@Override_	public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception {_		getTestContextManager(context).prepareTestInstance(testInstance)__	};delegates,to,link,test,context,manager,prepare,test,instance;override,public,void,post,process,test,instance,object,test,instance,extension,context,context,throws,exception,get,test,context,manager,context,prepare,test,instance,test,instance
SpringExtension -> @Override 	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext);1499199673;Determine if the value for the {@link Parameter} in the supplied {@link ParameterContext}_should be autowired from the test's {@link ApplicationContext}._<p>Returns {@code true} if the parameter is declared in a {@link Constructor}_that is annotated with {@link Autowired @Autowired} and otherwise delegates to_{@link ParameterAutowireUtils#isAutowirable}._<p><strong>WARNING</strong>: If the parameter is declared in a {@code Constructor}_that is annotated with {@code @Autowired}, Spring will assume the responsibility_for resolving all parameters in the constructor. Consequently, no other registered_{@link ParameterResolver} will be able to resolve parameters._@see #resolveParameter_@see ParameterAutowireUtils#isAutowirable;@Override_	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		Executable executable = parameter.getDeclaringExecutable()__		return (executable instanceof Constructor &&_				AnnotatedElementUtils.hasAnnotation(executable, Autowired.class)) ||_				ParameterAutowireUtils.isAutowirable(parameter)__	};determine,if,the,value,for,the,link,parameter,in,the,supplied,link,parameter,context,should,be,autowired,from,the,test,s,link,application,context,p,returns,code,true,if,the,parameter,is,declared,in,a,link,constructor,that,is,annotated,with,link,autowired,autowired,and,otherwise,delegates,to,link,parameter,autowire,utils,is,autowirable,p,strong,warning,strong,if,the,parameter,is,declared,in,a,code,constructor,that,is,annotated,with,code,autowired,spring,will,assume,the,responsibility,for,resolving,all,parameters,in,the,constructor,consequently,no,other,registered,link,parameter,resolver,will,be,able,to,resolve,parameters,see,resolve,parameter,see,parameter,autowire,utils,is,autowirable;override,public,boolean,supports,parameter,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,executable,executable,parameter,get,declaring,executable,return,executable,instanceof,constructor,annotated,element,utils,has,annotation,executable,autowired,class,parameter,autowire,utils,is,autowirable,parameter
SpringExtension -> @Override 	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext);1501791597;Determine if the value for the {@link Parameter} in the supplied {@link ParameterContext}_should be autowired from the test's {@link ApplicationContext}._<p>Returns {@code true} if the parameter is declared in a {@link Constructor}_that is annotated with {@link Autowired @Autowired} and otherwise delegates to_{@link ParameterAutowireUtils#isAutowirable}._<p><strong>WARNING</strong>: If the parameter is declared in a {@code Constructor}_that is annotated with {@code @Autowired}, Spring will assume the responsibility_for resolving all parameters in the constructor. Consequently, no other registered_{@link ParameterResolver} will be able to resolve parameters._@see #resolveParameter_@see ParameterAutowireUtils#isAutowirable;@Override_	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		Executable executable = parameter.getDeclaringExecutable()__		return (executable instanceof Constructor &&_				AnnotatedElementUtils.hasAnnotation(executable, Autowired.class)) ||_				ParameterAutowireUtils.isAutowirable(parameter)__	};determine,if,the,value,for,the,link,parameter,in,the,supplied,link,parameter,context,should,be,autowired,from,the,test,s,link,application,context,p,returns,code,true,if,the,parameter,is,declared,in,a,link,constructor,that,is,annotated,with,link,autowired,autowired,and,otherwise,delegates,to,link,parameter,autowire,utils,is,autowirable,p,strong,warning,strong,if,the,parameter,is,declared,in,a,code,constructor,that,is,annotated,with,code,autowired,spring,will,assume,the,responsibility,for,resolving,all,parameters,in,the,constructor,consequently,no,other,registered,link,parameter,resolver,will,be,able,to,resolve,parameters,see,resolve,parameter,see,parameter,autowire,utils,is,autowirable;override,public,boolean,supports,parameter,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,executable,executable,parameter,get,declaring,executable,return,executable,instanceof,constructor,annotated,element,utils,has,annotation,executable,autowired,class,parameter,autowire,utils,is,autowirable,parameter
SpringExtension -> @Override 	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext);1501791998;Determine if the value for the {@link Parameter} in the supplied {@link ParameterContext}_should be autowired from the test's {@link ApplicationContext}._<p>Returns {@code true} if the parameter is declared in a {@link Constructor}_that is annotated with {@link Autowired @Autowired} and otherwise delegates to_{@link ParameterAutowireUtils#isAutowirable}._<p><strong>WARNING</strong>: If the parameter is declared in a {@code Constructor}_that is annotated with {@code @Autowired}, Spring will assume the responsibility_for resolving all parameters in the constructor. Consequently, no other registered_{@link ParameterResolver} will be able to resolve parameters._@see #resolveParameter_@see ParameterAutowireUtils#isAutowirable;@Override_	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		Executable executable = parameter.getDeclaringExecutable()__		return (executable instanceof Constructor &&_				AnnotatedElementUtils.hasAnnotation(executable, Autowired.class)) ||_				ParameterAutowireUtils.isAutowirable(parameter)__	};determine,if,the,value,for,the,link,parameter,in,the,supplied,link,parameter,context,should,be,autowired,from,the,test,s,link,application,context,p,returns,code,true,if,the,parameter,is,declared,in,a,link,constructor,that,is,annotated,with,link,autowired,autowired,and,otherwise,delegates,to,link,parameter,autowire,utils,is,autowirable,p,strong,warning,strong,if,the,parameter,is,declared,in,a,code,constructor,that,is,annotated,with,code,autowired,spring,will,assume,the,responsibility,for,resolving,all,parameters,in,the,constructor,consequently,no,other,registered,link,parameter,resolver,will,be,able,to,resolve,parameters,see,resolve,parameter,see,parameter,autowire,utils,is,autowirable;override,public,boolean,supports,parameter,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,executable,executable,parameter,get,declaring,executable,return,executable,instanceof,constructor,annotated,element,utils,has,annotation,executable,autowired,class,parameter,autowire,utils,is,autowirable,parameter
SpringExtension -> @Override 	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext);1522338465;Determine if the value for the {@link Parameter} in the supplied {@link ParameterContext}_should be autowired from the test's {@link ApplicationContext}._<p>Returns {@code true} if the parameter is declared in a {@link Constructor}_that is annotated with {@link Autowired @Autowired} and otherwise delegates to_{@link ParameterAutowireUtils#isAutowirable}._<p><strong>WARNING</strong>: If the parameter is declared in a {@code Constructor}_that is annotated with {@code @Autowired}, Spring will assume the responsibility_for resolving all parameters in the constructor. Consequently, no other registered_{@link ParameterResolver} will be able to resolve parameters._@see #resolveParameter_@see ParameterAutowireUtils#isAutowirable;@Override_	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		int index = parameterContext.getIndex()__		Executable executable = parameter.getDeclaringExecutable()__		return (executable instanceof Constructor &&_				AnnotatedElementUtils.hasAnnotation(executable, Autowired.class)) ||_				ParameterAutowireUtils.isAutowirable(parameter, index)__	};determine,if,the,value,for,the,link,parameter,in,the,supplied,link,parameter,context,should,be,autowired,from,the,test,s,link,application,context,p,returns,code,true,if,the,parameter,is,declared,in,a,link,constructor,that,is,annotated,with,link,autowired,autowired,and,otherwise,delegates,to,link,parameter,autowire,utils,is,autowirable,p,strong,warning,strong,if,the,parameter,is,declared,in,a,code,constructor,that,is,annotated,with,code,autowired,spring,will,assume,the,responsibility,for,resolving,all,parameters,in,the,constructor,consequently,no,other,registered,link,parameter,resolver,will,be,able,to,resolve,parameters,see,resolve,parameter,see,parameter,autowire,utils,is,autowirable;override,public,boolean,supports,parameter,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,int,index,parameter,context,get,index,executable,executable,parameter,get,declaring,executable,return,executable,instanceof,constructor,annotated,element,utils,has,annotation,executable,autowired,class,parameter,autowire,utils,is,autowirable,parameter,index
SpringExtension -> @Override 	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext);1551190945;Determine if the value for the {@link Parameter} in the supplied {@link ParameterContext}_should be autowired from the test's {@link ApplicationContext}._<p>Returns {@code true} if the parameter is declared in a {@link Constructor}_that is annotated with {@link Autowired @Autowired} or if the parameter is_of type {@link ApplicationContext} (or a sub-type thereof) and otherwise delegates_to {@link ParameterAutowireUtils#isAutowirable}._<p><strong>WARNING</strong>: If the parameter is declared in a {@code Constructor}_that is annotated with {@code @Autowired}, Spring will assume the responsibility_for resolving all parameters in the constructor. Consequently, no other registered_{@link ParameterResolver} will be able to resolve parameters._@see #resolveParameter_@see ParameterAutowireUtils#isAutowirable;@Override_	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		int index = parameterContext.getIndex()__		Executable executable = parameter.getDeclaringExecutable()__		return (executable instanceof Constructor &&_				AnnotatedElementUtils.hasAnnotation(executable, Autowired.class)) ||_				ApplicationContext.class.isAssignableFrom(parameter.getType()) ||_				ParameterAutowireUtils.isAutowirable(parameter, index)__	};determine,if,the,value,for,the,link,parameter,in,the,supplied,link,parameter,context,should,be,autowired,from,the,test,s,link,application,context,p,returns,code,true,if,the,parameter,is,declared,in,a,link,constructor,that,is,annotated,with,link,autowired,autowired,or,if,the,parameter,is,of,type,link,application,context,or,a,sub,type,thereof,and,otherwise,delegates,to,link,parameter,autowire,utils,is,autowirable,p,strong,warning,strong,if,the,parameter,is,declared,in,a,code,constructor,that,is,annotated,with,code,autowired,spring,will,assume,the,responsibility,for,resolving,all,parameters,in,the,constructor,consequently,no,other,registered,link,parameter,resolver,will,be,able,to,resolve,parameters,see,resolve,parameter,see,parameter,autowire,utils,is,autowirable;override,public,boolean,supports,parameter,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,int,index,parameter,context,get,index,executable,executable,parameter,get,declaring,executable,return,executable,instanceof,constructor,annotated,element,utils,has,annotation,executable,autowired,class,application,context,class,is,assignable,from,parameter,get,type,parameter,autowire,utils,is,autowirable,parameter,index
SpringExtension -> @Override 	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext);1551276945;Determine if the value for the {@link Parameter} in the supplied {@link ParameterContext}_should be autowired from the test's {@link ApplicationContext}._<p>Returns {@code true} if the parameter is declared in a {@link Constructor}_that is annotated with {@link Autowired @Autowired} or if the parameter is_of type {@link ApplicationContext} (or a sub-type thereof) and otherwise delegates_to {@link AutowireUtils#isAutowirable}._<p><strong>WARNING</strong>: If the parameter is declared in a {@code Constructor}_that is annotated with {@code @Autowired}, Spring will assume the responsibility_for resolving all parameters in the constructor. Consequently, no other registered_{@link ParameterResolver} will be able to resolve parameters._@see #resolveParameter_@see AutowireUtils#isAutowirable;@Override_	public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		int index = parameterContext.getIndex()__		Executable executable = parameter.getDeclaringExecutable()__		return (executable instanceof Constructor &&_				AnnotatedElementUtils.hasAnnotation(executable, Autowired.class)) ||_				ApplicationContext.class.isAssignableFrom(parameter.getType()) ||_				AutowireUtils.isAutowirable(parameter, index)__	};determine,if,the,value,for,the,link,parameter,in,the,supplied,link,parameter,context,should,be,autowired,from,the,test,s,link,application,context,p,returns,code,true,if,the,parameter,is,declared,in,a,link,constructor,that,is,annotated,with,link,autowired,autowired,or,if,the,parameter,is,of,type,link,application,context,or,a,sub,type,thereof,and,otherwise,delegates,to,link,autowire,utils,is,autowirable,p,strong,warning,strong,if,the,parameter,is,declared,in,a,code,constructor,that,is,annotated,with,code,autowired,spring,will,assume,the,responsibility,for,resolving,all,parameters,in,the,constructor,consequently,no,other,registered,link,parameter,resolver,will,be,able,to,resolve,parameters,see,resolve,parameter,see,autowire,utils,is,autowirable;override,public,boolean,supports,parameter,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,int,index,parameter,context,get,index,executable,executable,parameter,get,declaring,executable,return,executable,instanceof,constructor,annotated,element,utils,has,annotation,executable,autowired,class,application,context,class,is,assignable,from,parameter,get,type,autowire,utils,is,autowirable,parameter,index
SpringExtension -> @Override 	public void afterAll(ExtensionContext context) throws Exception;1499199673;Delegates to {@link TestContextManager#afterTestClass}.;@Override_	public void afterAll(ExtensionContext context) throws Exception {_		try {_			getTestContextManager(context).afterTestClass()__		}_		finally {_			context.getStore(NAMESPACE).remove(getRequiredTestClass(context))__		}_	};delegates,to,link,test,context,manager,after,test,class;override,public,void,after,all,extension,context,context,throws,exception,try,get,test,context,manager,context,after,test,class,finally,context,get,store,namespace,remove,get,required,test,class,context
SpringExtension -> @Override 	public void afterAll(ExtensionContext context) throws Exception;1501791597;Delegates to {@link TestContextManager#afterTestClass}.;@Override_	public void afterAll(ExtensionContext context) throws Exception {_		try {_			getTestContextManager(context).afterTestClass()__		}_		finally {_			getStore(context).remove(context.getRequiredTestClass())__		}_	};delegates,to,link,test,context,manager,after,test,class;override,public,void,after,all,extension,context,context,throws,exception,try,get,test,context,manager,context,after,test,class,finally,get,store,context,remove,context,get,required,test,class
SpringExtension -> @Override 	public void afterAll(ExtensionContext context) throws Exception;1501791998;Delegates to {@link TestContextManager#afterTestClass}.;@Override_	public void afterAll(ExtensionContext context) throws Exception {_		try {_			getTestContextManager(context).afterTestClass()__		}_		finally {_			getStore(context).remove(context.getRequiredTestClass())__		}_	};delegates,to,link,test,context,manager,after,test,class;override,public,void,after,all,extension,context,context,throws,exception,try,get,test,context,manager,context,after,test,class,finally,get,store,context,remove,context,get,required,test,class
SpringExtension -> @Override 	public void afterAll(ExtensionContext context) throws Exception;1522338465;Delegates to {@link TestContextManager#afterTestClass}.;@Override_	public void afterAll(ExtensionContext context) throws Exception {_		try {_			getTestContextManager(context).afterTestClass()__		}_		finally {_			getStore(context).remove(context.getRequiredTestClass())__		}_	};delegates,to,link,test,context,manager,after,test,class;override,public,void,after,all,extension,context,context,throws,exception,try,get,test,context,manager,context,after,test,class,finally,get,store,context,remove,context,get,required,test,class
SpringExtension -> @Override 	public void afterAll(ExtensionContext context) throws Exception;1551190945;Delegates to {@link TestContextManager#afterTestClass}.;@Override_	public void afterAll(ExtensionContext context) throws Exception {_		try {_			getTestContextManager(context).afterTestClass()__		}_		finally {_			getStore(context).remove(context.getRequiredTestClass())__		}_	};delegates,to,link,test,context,manager,after,test,class;override,public,void,after,all,extension,context,context,throws,exception,try,get,test,context,manager,context,after,test,class,finally,get,store,context,remove,context,get,required,test,class
SpringExtension -> @Override 	public void afterAll(ExtensionContext context) throws Exception;1551276945;Delegates to {@link TestContextManager#afterTestClass}.;@Override_	public void afterAll(ExtensionContext context) throws Exception {_		try {_			getTestContextManager(context).afterTestClass()__		}_		finally {_			getStore(context).remove(context.getRequiredTestClass())__		}_	};delegates,to,link,test,context,manager,after,test,class;override,public,void,after,all,extension,context,context,throws,exception,try,get,test,context,manager,context,after,test,class,finally,get,store,context,remove,context,get,required,test,class
SpringExtension -> @Override 	public void beforeAll(ContainerExtensionContext context) throws Exception;1467664858;Delegates to {@link TestContextManager#beforeTestClass}.;@Override_	public void beforeAll(ContainerExtensionContext context) throws Exception {_		getTestContextManager(context).beforeTestClass()__	};delegates,to,link,test,context,manager,before,test,class;override,public,void,before,all,container,extension,context,context,throws,exception,get,test,context,manager,context,before,test,class
SpringExtension -> @Override 	public void beforeAll(ContainerExtensionContext context) throws Exception;1467731358;Delegates to {@link TestContextManager#beforeTestClass}.;@Override_	public void beforeAll(ContainerExtensionContext context) throws Exception {_		getTestContextManager(context).beforeTestClass()__	};delegates,to,link,test,context,manager,before,test,class;override,public,void,before,all,container,extension,context,context,throws,exception,get,test,context,manager,context,before,test,class
SpringExtension -> @Override 	public void beforeAll(ContainerExtensionContext context) throws Exception;1468244735;Delegates to {@link TestContextManager#beforeTestClass}.;@Override_	public void beforeAll(ContainerExtensionContext context) throws Exception {_		getTestContextManager(context).beforeTestClass()__	};delegates,to,link,test,context,manager,before,test,class;override,public,void,before,all,container,extension,context,context,throws,exception,get,test,context,manager,context,before,test,class
SpringExtension -> @Override 	public void beforeAll(ContainerExtensionContext context) throws Exception;1472411819;Delegates to {@link TestContextManager#beforeTestClass}.;@Override_	public void beforeAll(ContainerExtensionContext context) throws Exception {_		getTestContextManager(context).beforeTestClass()__	};delegates,to,link,test,context,manager,before,test,class;override,public,void,before,all,container,extension,context,context,throws,exception,get,test,context,manager,context,before,test,class
SpringExtension -> @Override 	public void beforeAll(ContainerExtensionContext context) throws Exception;1489501124;Delegates to {@link TestContextManager#beforeTestClass}.;@Override_	public void beforeAll(ContainerExtensionContext context) throws Exception {_		getTestContextManager(context).beforeTestClass()__	};delegates,to,link,test,context,manager,before,test,class;override,public,void,before,all,container,extension,context,context,throws,exception,get,test,context,manager,context,before,test,class
SpringExtension -> @Override 	public void beforeAll(ContainerExtensionContext context) throws Exception;1496955179;Delegates to {@link TestContextManager#beforeTestClass}.;@Override_	public void beforeAll(ContainerExtensionContext context) throws Exception {_		getTestContextManager(context).beforeTestClass()__	};delegates,to,link,test,context,manager,before,test,class;override,public,void,before,all,container,extension,context,context,throws,exception,get,test,context,manager,context,before,test,class
SpringExtension -> @Override 	public void beforeEach(ExtensionContext context) throws Exception;1499199673;Delegates to {@link TestContextManager#beforeTestMethod}.;@Override_	public void beforeEach(ExtensionContext context) throws Exception {_		Object testInstance = getRequiredTestInstance(context)__		Method testMethod = getRequiredTestMethod(context)__		getTestContextManager(context).beforeTestMethod(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,method;override,public,void,before,each,extension,context,context,throws,exception,object,test,instance,get,required,test,instance,context,method,test,method,get,required,test,method,context,get,test,context,manager,context,before,test,method,test,instance,test,method
SpringExtension -> @Override 	public void beforeEach(ExtensionContext context) throws Exception;1501791597;Delegates to {@link TestContextManager#beforeTestMethod}.;@Override_	public void beforeEach(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		getTestContextManager(context).beforeTestMethod(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,method;override,public,void,before,each,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,get,test,context,manager,context,before,test,method,test,instance,test,method
SpringExtension -> @Override 	public void beforeEach(ExtensionContext context) throws Exception;1501791998;Delegates to {@link TestContextManager#beforeTestMethod}.;@Override_	public void beforeEach(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		getTestContextManager(context).beforeTestMethod(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,method;override,public,void,before,each,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,get,test,context,manager,context,before,test,method,test,instance,test,method
SpringExtension -> @Override 	public void beforeEach(ExtensionContext context) throws Exception;1522338465;Delegates to {@link TestContextManager#beforeTestMethod}.;@Override_	public void beforeEach(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		getTestContextManager(context).beforeTestMethod(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,method;override,public,void,before,each,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,get,test,context,manager,context,before,test,method,test,instance,test,method
SpringExtension -> @Override 	public void beforeEach(ExtensionContext context) throws Exception;1551190945;Delegates to {@link TestContextManager#beforeTestMethod}.;@Override_	public void beforeEach(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		getTestContextManager(context).beforeTestMethod(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,method;override,public,void,before,each,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,get,test,context,manager,context,before,test,method,test,instance,test,method
SpringExtension -> @Override 	public void beforeEach(ExtensionContext context) throws Exception;1551276945;Delegates to {@link TestContextManager#beforeTestMethod}.;@Override_	public void beforeEach(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		getTestContextManager(context).beforeTestMethod(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,method;override,public,void,before,each,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,get,test,context,manager,context,before,test,method,test,instance,test,method
SpringExtension -> private TestContextManager getTestContextManager(ExtensionContext context);1467664858;Get the {@link TestContextManager} associated with the supplied_{@code ExtensionContext}._@return the {@code TestContextManager}_ never {@code null};private TestContextManager getTestContextManager(ExtensionContext context) {_		Assert.notNull(context, "ExtensionContext must not be null")__		Class<?> testClass = context.getTestClass().get()__		Store store = context.getStore(namespace)__		return store.getOrComputeIfAbsent(testClass, TestContextManager::new, TestContextManager.class)__	};get,the,link,test,context,manager,associated,with,the,supplied,code,extension,context,return,the,code,test,context,manager,never,code,null;private,test,context,manager,get,test,context,manager,extension,context,context,assert,not,null,context,extension,context,must,not,be,null,class,test,class,context,get,test,class,get,store,store,context,get,store,namespace,return,store,get,or,compute,if,absent,test,class,test,context,manager,new,test,context,manager,class
SpringExtension -> private TestContextManager getTestContextManager(ExtensionContext context);1467731358;Get the {@link TestContextManager} associated with the supplied_{@code ExtensionContext}._@return the {@code TestContextManager}_ never {@code null};private TestContextManager getTestContextManager(ExtensionContext context) {_		Assert.notNull(context, "ExtensionContext must not be null")__		Class<?> testClass = context.getTestClass().get()__		Store store = context.getStore(namespace)__		return store.getOrComputeIfAbsent(testClass, TestContextManager::new, TestContextManager.class)__	};get,the,link,test,context,manager,associated,with,the,supplied,code,extension,context,return,the,code,test,context,manager,never,code,null;private,test,context,manager,get,test,context,manager,extension,context,context,assert,not,null,context,extension,context,must,not,be,null,class,test,class,context,get,test,class,get,store,store,context,get,store,namespace,return,store,get,or,compute,if,absent,test,class,test,context,manager,new,test,context,manager,class
SpringExtension -> private TestContextManager getTestContextManager(ExtensionContext context);1468244735;Get the {@link TestContextManager} associated with the supplied_{@code ExtensionContext}._@return the {@code TestContextManager}_ never {@code null};private TestContextManager getTestContextManager(ExtensionContext context) {_		Assert.notNull(context, "ExtensionContext must not be null")__		Class<?> testClass = context.getTestClass().get()__		Store store = context.getStore(namespace)__		return store.getOrComputeIfAbsent(testClass, TestContextManager::new, TestContextManager.class)__	};get,the,link,test,context,manager,associated,with,the,supplied,code,extension,context,return,the,code,test,context,manager,never,code,null;private,test,context,manager,get,test,context,manager,extension,context,context,assert,not,null,context,extension,context,must,not,be,null,class,test,class,context,get,test,class,get,store,store,context,get,store,namespace,return,store,get,or,compute,if,absent,test,class,test,context,manager,new,test,context,manager,class
SpringExtension -> @Override 	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext);1467664858;Resolve a value for the {@link Parameter} in the supplied_{@link ParameterContext} by retrieving the corresponding dependency_from the test's {@link ApplicationContext}._<p>Delegates to {@link ParameterAutowireUtils#resolveDependency}._@see #supports_@see ParameterAutowireUtils#resolveDependency;@Override_	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		Class<?> testClass = extensionContext.getTestClass().get()__		ApplicationContext applicationContext = getApplicationContext(extensionContext)__		return ParameterAutowireUtils.resolveDependency(parameter, testClass, applicationContext)__	};resolve,a,value,for,the,link,parameter,in,the,supplied,link,parameter,context,by,retrieving,the,corresponding,dependency,from,the,test,s,link,application,context,p,delegates,to,link,parameter,autowire,utils,resolve,dependency,see,supports,see,parameter,autowire,utils,resolve,dependency;override,public,object,resolve,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,class,test,class,extension,context,get,test,class,get,application,context,application,context,get,application,context,extension,context,return,parameter,autowire,utils,resolve,dependency,parameter,test,class,application,context
SpringExtension -> @Override 	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext);1467731358;Resolve a value for the {@link Parameter} in the supplied_{@link ParameterContext} by retrieving the corresponding dependency_from the test's {@link ApplicationContext}._<p>Delegates to {@link ParameterAutowireUtils#resolveDependency}._@see #supports_@see ParameterAutowireUtils#resolveDependency;@Override_	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		Class<?> testClass = extensionContext.getTestClass().get()__		ApplicationContext applicationContext = getApplicationContext(extensionContext)__		return ParameterAutowireUtils.resolveDependency(parameter, testClass, applicationContext)__	};resolve,a,value,for,the,link,parameter,in,the,supplied,link,parameter,context,by,retrieving,the,corresponding,dependency,from,the,test,s,link,application,context,p,delegates,to,link,parameter,autowire,utils,resolve,dependency,see,supports,see,parameter,autowire,utils,resolve,dependency;override,public,object,resolve,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,class,test,class,extension,context,get,test,class,get,application,context,application,context,get,application,context,extension,context,return,parameter,autowire,utils,resolve,dependency,parameter,test,class,application,context
SpringExtension -> @Override 	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext);1468244735;Resolve a value for the {@link Parameter} in the supplied_{@link ParameterContext} by retrieving the corresponding dependency_from the test's {@link ApplicationContext}._<p>Delegates to {@link ParameterAutowireUtils#resolveDependency}._@see #supports_@see ParameterAutowireUtils#resolveDependency;@Override_	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		Class<?> testClass = extensionContext.getTestClass().get()__		ApplicationContext applicationContext = getApplicationContext(extensionContext)__		return ParameterAutowireUtils.resolveDependency(parameter, testClass, applicationContext)__	};resolve,a,value,for,the,link,parameter,in,the,supplied,link,parameter,context,by,retrieving,the,corresponding,dependency,from,the,test,s,link,application,context,p,delegates,to,link,parameter,autowire,utils,resolve,dependency,see,supports,see,parameter,autowire,utils,resolve,dependency;override,public,object,resolve,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,class,test,class,extension,context,get,test,class,get,application,context,application,context,get,application,context,extension,context,return,parameter,autowire,utils,resolve,dependency,parameter,test,class,application,context
SpringExtension -> @Override 	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext);1472411819;Resolve a value for the {@link Parameter} in the supplied_{@link ParameterContext} by retrieving the corresponding dependency_from the test's {@link ApplicationContext}._<p>Delegates to {@link ParameterAutowireUtils#resolveDependency}._@see #supports_@see ParameterAutowireUtils#resolveDependency;@Override_	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		Class<?> testClass = extensionContext.getTestClass().get()__		ApplicationContext applicationContext = getApplicationContext(extensionContext)__		return ParameterAutowireUtils.resolveDependency(parameter, testClass, applicationContext)__	};resolve,a,value,for,the,link,parameter,in,the,supplied,link,parameter,context,by,retrieving,the,corresponding,dependency,from,the,test,s,link,application,context,p,delegates,to,link,parameter,autowire,utils,resolve,dependency,see,supports,see,parameter,autowire,utils,resolve,dependency;override,public,object,resolve,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,class,test,class,extension,context,get,test,class,get,application,context,application,context,get,application,context,extension,context,return,parameter,autowire,utils,resolve,dependency,parameter,test,class,application,context
SpringExtension -> @Override 	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext);1489501124;Resolve a value for the {@link Parameter} in the supplied {@link ParameterContext} by_retrieving the corresponding dependency from the test's {@link ApplicationContext}._<p>Delegates to {@link ParameterAutowireUtils#resolveDependency}._@see #supports_@see ParameterAutowireUtils#resolveDependency;@Override_	public Object resolve(ParameterContext parameterContext, ExtensionContext extensionContext) {_		Parameter parameter = parameterContext.getParameter()__		Class<?> testClass = extensionContext.getTestClass().get()__		ApplicationContext applicationContext = getApplicationContext(extensionContext)__		return ParameterAutowireUtils.resolveDependency(parameter, testClass, applicationContext)__	};resolve,a,value,for,the,link,parameter,in,the,supplied,link,parameter,context,by,retrieving,the,corresponding,dependency,from,the,test,s,link,application,context,p,delegates,to,link,parameter,autowire,utils,resolve,dependency,see,supports,see,parameter,autowire,utils,resolve,dependency;override,public,object,resolve,parameter,context,parameter,context,extension,context,extension,context,parameter,parameter,parameter,context,get,parameter,class,test,class,extension,context,get,test,class,get,application,context,application,context,get,application,context,extension,context,return,parameter,autowire,utils,resolve,dependency,parameter,test,class,application,context
SpringExtension -> private static TestContextManager getTestContextManager(ExtensionContext context);1472411819;Get the {@link TestContextManager} associated with the supplied_{@code ExtensionContext}._@return the {@code TestContextManager}_ never {@code null};private static TestContextManager getTestContextManager(ExtensionContext context) {_		Assert.notNull(context, "ExtensionContext must not be null")__		Class<?> testClass = context.getTestClass().get()__		Store store = context.getStore(namespace)__		return store.getOrComputeIfAbsent(testClass, TestContextManager::new, TestContextManager.class)__	};get,the,link,test,context,manager,associated,with,the,supplied,code,extension,context,return,the,code,test,context,manager,never,code,null;private,static,test,context,manager,get,test,context,manager,extension,context,context,assert,not,null,context,extension,context,must,not,be,null,class,test,class,context,get,test,class,get,store,store,context,get,store,namespace,return,store,get,or,compute,if,absent,test,class,test,context,manager,new,test,context,manager,class
SpringExtension -> private static TestContextManager getTestContextManager(ExtensionContext context);1489501124;Get the {@link TestContextManager} associated with the supplied {@code ExtensionContext}._@return the {@code TestContextManager} (never {@code null});private static TestContextManager getTestContextManager(ExtensionContext context) {_		Assert.notNull(context, "ExtensionContext must not be null")__		Class<?> testClass = context.getTestClass().get()__		Store store = context.getStore(NAMESPACE)__		return store.getOrComputeIfAbsent(testClass, TestContextManager::new, TestContextManager.class)__	};get,the,link,test,context,manager,associated,with,the,supplied,code,extension,context,return,the,code,test,context,manager,never,code,null;private,static,test,context,manager,get,test,context,manager,extension,context,context,assert,not,null,context,extension,context,must,not,be,null,class,test,class,context,get,test,class,get,store,store,context,get,store,namespace,return,store,get,or,compute,if,absent,test,class,test,context,manager,new,test,context,manager,class
SpringExtension -> private static TestContextManager getTestContextManager(ExtensionContext context);1496955179;Get the {@link TestContextManager} associated with the supplied {@code ExtensionContext}._@return the {@code TestContextManager} (never {@code null});private static TestContextManager getTestContextManager(ExtensionContext context) {_		Assert.notNull(context, "ExtensionContext must not be null")__		Class<?> testClass = context.getTestClass().get()__		Store store = context.getStore(NAMESPACE)__		return store.getOrComputeIfAbsent(testClass, TestContextManager::new, TestContextManager.class)__	};get,the,link,test,context,manager,associated,with,the,supplied,code,extension,context,return,the,code,test,context,manager,never,code,null;private,static,test,context,manager,get,test,context,manager,extension,context,context,assert,not,null,context,extension,context,must,not,be,null,class,test,class,context,get,test,class,get,store,store,context,get,store,namespace,return,store,get,or,compute,if,absent,test,class,test,context,manager,new,test,context,manager,class
SpringExtension -> private static TestContextManager getTestContextManager(ExtensionContext context);1499199673;Get the {@link TestContextManager} associated with the supplied {@code ExtensionContext}._@return the {@code TestContextManager} (never {@code null});private static TestContextManager getTestContextManager(ExtensionContext context) {_		Assert.notNull(context, "ExtensionContext must not be null")__		Class<?> testClass = getRequiredTestClass(context)__		Store store = context.getStore(NAMESPACE)__		return store.getOrComputeIfAbsent(testClass, TestContextManager::new, TestContextManager.class)__	};get,the,link,test,context,manager,associated,with,the,supplied,code,extension,context,return,the,code,test,context,manager,never,code,null;private,static,test,context,manager,get,test,context,manager,extension,context,context,assert,not,null,context,extension,context,must,not,be,null,class,test,class,get,required,test,class,context,store,store,context,get,store,namespace,return,store,get,or,compute,if,absent,test,class,test,context,manager,new,test,context,manager,class
SpringExtension -> private static TestContextManager getTestContextManager(ExtensionContext context);1501791597;Get the {@link TestContextManager} associated with the supplied {@code ExtensionContext}._@return the {@code TestContextManager} (never {@code null});private static TestContextManager getTestContextManager(ExtensionContext context) {_		Assert.notNull(context, "ExtensionContext must not be null")__		Class<?> testClass = context.getRequiredTestClass()__		Store store = getStore(context)__		return store.getOrComputeIfAbsent(testClass, TestContextManager::new, TestContextManager.class)__	};get,the,link,test,context,manager,associated,with,the,supplied,code,extension,context,return,the,code,test,context,manager,never,code,null;private,static,test,context,manager,get,test,context,manager,extension,context,context,assert,not,null,context,extension,context,must,not,be,null,class,test,class,context,get,required,test,class,store,store,get,store,context,return,store,get,or,compute,if,absent,test,class,test,context,manager,new,test,context,manager,class
SpringExtension -> private static TestContextManager getTestContextManager(ExtensionContext context);1501791998;Get the {@link TestContextManager} associated with the supplied {@code ExtensionContext}._@return the {@code TestContextManager} (never {@code null});private static TestContextManager getTestContextManager(ExtensionContext context) {_		Assert.notNull(context, "ExtensionContext must not be null")__		Class<?> testClass = context.getRequiredTestClass()__		Store store = getStore(context)__		return store.getOrComputeIfAbsent(testClass, TestContextManager::new, TestContextManager.class)__	};get,the,link,test,context,manager,associated,with,the,supplied,code,extension,context,return,the,code,test,context,manager,never,code,null;private,static,test,context,manager,get,test,context,manager,extension,context,context,assert,not,null,context,extension,context,must,not,be,null,class,test,class,context,get,required,test,class,store,store,get,store,context,return,store,get,or,compute,if,absent,test,class,test,context,manager,new,test,context,manager,class
SpringExtension -> private static TestContextManager getTestContextManager(ExtensionContext context);1522338465;Get the {@link TestContextManager} associated with the supplied {@code ExtensionContext}._@return the {@code TestContextManager} (never {@code null});private static TestContextManager getTestContextManager(ExtensionContext context) {_		Assert.notNull(context, "ExtensionContext must not be null")__		Class<?> testClass = context.getRequiredTestClass()__		Store store = getStore(context)__		return store.getOrComputeIfAbsent(testClass, TestContextManager::new, TestContextManager.class)__	};get,the,link,test,context,manager,associated,with,the,supplied,code,extension,context,return,the,code,test,context,manager,never,code,null;private,static,test,context,manager,get,test,context,manager,extension,context,context,assert,not,null,context,extension,context,must,not,be,null,class,test,class,context,get,required,test,class,store,store,get,store,context,return,store,get,or,compute,if,absent,test,class,test,context,manager,new,test,context,manager,class
SpringExtension -> private static TestContextManager getTestContextManager(ExtensionContext context);1551190945;Get the {@link TestContextManager} associated with the supplied {@code ExtensionContext}._@return the {@code TestContextManager} (never {@code null});private static TestContextManager getTestContextManager(ExtensionContext context) {_		Assert.notNull(context, "ExtensionContext must not be null")__		Class<?> testClass = context.getRequiredTestClass()__		Store store = getStore(context)__		return store.getOrComputeIfAbsent(testClass, TestContextManager::new, TestContextManager.class)__	};get,the,link,test,context,manager,associated,with,the,supplied,code,extension,context,return,the,code,test,context,manager,never,code,null;private,static,test,context,manager,get,test,context,manager,extension,context,context,assert,not,null,context,extension,context,must,not,be,null,class,test,class,context,get,required,test,class,store,store,get,store,context,return,store,get,or,compute,if,absent,test,class,test,context,manager,new,test,context,manager,class
SpringExtension -> private static TestContextManager getTestContextManager(ExtensionContext context);1551276945;Get the {@link TestContextManager} associated with the supplied {@code ExtensionContext}._@return the {@code TestContextManager} (never {@code null});private static TestContextManager getTestContextManager(ExtensionContext context) {_		Assert.notNull(context, "ExtensionContext must not be null")__		Class<?> testClass = context.getRequiredTestClass()__		Store store = getStore(context)__		return store.getOrComputeIfAbsent(testClass, TestContextManager::new, TestContextManager.class)__	};get,the,link,test,context,manager,associated,with,the,supplied,code,extension,context,return,the,code,test,context,manager,never,code,null;private,static,test,context,manager,get,test,context,manager,extension,context,context,assert,not,null,context,extension,context,must,not,be,null,class,test,class,context,get,required,test,class,store,store,get,store,context,return,store,get,or,compute,if,absent,test,class,test,context,manager,new,test,context,manager,class
SpringExtension -> @Override 	public void beforeTestExecution(ExtensionContext context) throws Exception;1499199673;Delegates to {@link TestContextManager#beforeTestExecution}.;@Override_	public void beforeTestExecution(ExtensionContext context) throws Exception {_		Object testInstance = getRequiredTestInstance(context)__		Method testMethod = getRequiredTestMethod(context)__		getTestContextManager(context).beforeTestExecution(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,execution;override,public,void,before,test,execution,extension,context,context,throws,exception,object,test,instance,get,required,test,instance,context,method,test,method,get,required,test,method,context,get,test,context,manager,context,before,test,execution,test,instance,test,method
SpringExtension -> @Override 	public void beforeTestExecution(ExtensionContext context) throws Exception;1501791597;Delegates to {@link TestContextManager#beforeTestExecution}.;@Override_	public void beforeTestExecution(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		getTestContextManager(context).beforeTestExecution(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,execution;override,public,void,before,test,execution,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,get,test,context,manager,context,before,test,execution,test,instance,test,method
SpringExtension -> @Override 	public void beforeTestExecution(ExtensionContext context) throws Exception;1501791998;Delegates to {@link TestContextManager#beforeTestExecution}.;@Override_	public void beforeTestExecution(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		getTestContextManager(context).beforeTestExecution(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,execution;override,public,void,before,test,execution,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,get,test,context,manager,context,before,test,execution,test,instance,test,method
SpringExtension -> @Override 	public void beforeTestExecution(ExtensionContext context) throws Exception;1522338465;Delegates to {@link TestContextManager#beforeTestExecution}.;@Override_	public void beforeTestExecution(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		getTestContextManager(context).beforeTestExecution(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,execution;override,public,void,before,test,execution,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,get,test,context,manager,context,before,test,execution,test,instance,test,method
SpringExtension -> @Override 	public void beforeTestExecution(ExtensionContext context) throws Exception;1551190945;Delegates to {@link TestContextManager#beforeTestExecution}.;@Override_	public void beforeTestExecution(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		getTestContextManager(context).beforeTestExecution(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,execution;override,public,void,before,test,execution,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,get,test,context,manager,context,before,test,execution,test,instance,test,method
SpringExtension -> @Override 	public void beforeTestExecution(ExtensionContext context) throws Exception;1551276945;Delegates to {@link TestContextManager#beforeTestExecution}.;@Override_	public void beforeTestExecution(ExtensionContext context) throws Exception {_		Object testInstance = context.getRequiredTestInstance()__		Method testMethod = context.getRequiredTestMethod()__		getTestContextManager(context).beforeTestExecution(testInstance, testMethod)__	};delegates,to,link,test,context,manager,before,test,execution;override,public,void,before,test,execution,extension,context,context,throws,exception,object,test,instance,context,get,required,test,instance,method,test,method,context,get,required,test,method,get,test,context,manager,context,before,test,execution,test,instance,test,method
