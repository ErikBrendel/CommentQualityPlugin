# id;timestamp;commentText;codeText;commentWords;codeWords
ModelResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1493235170;Assert a model attribute value with the given Hamcrest {@link Matcher}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			assertThat("Model attribute '" + name + "'", (T) mav.getModel().get(name), matcher)__		}__	};assert,a,model,attribute,value,with,the,given,hamcrest,link,matcher;suppress,warnings,unchecked,public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,result,model,and,view,mav,get,model,and,view,result,assert,that,model,attribute,name,t,mav,get,model,get,name,matcher
ModelResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1496955179;Assert a model attribute value with the given Hamcrest {@link Matcher}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			assertThat("Model attribute '" + name + "'", (T) mav.getModel().get(name), matcher)__		}__	};assert,a,model,attribute,value,with,the,given,hamcrest,link,matcher;suppress,warnings,unchecked,public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,result,model,and,view,mav,get,model,and,view,result,assert,that,model,attribute,name,t,mav,get,model,get,name,matcher
ModelResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1518559218;Assert a model attribute value with the given Hamcrest {@link Matcher}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			assertThat("Model attribute '" + name + "'", (T) mav.getModel().get(name), matcher)__		}__	};assert,a,model,attribute,value,with,the,given,hamcrest,link,matcher;suppress,warnings,unchecked,public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,result,model,and,view,mav,get,model,and,view,result,assert,that,model,attribute,name,t,mav,get,model,get,name,matcher
ModelResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1530174524;Assert a model attribute value with the given Hamcrest {@link Matcher}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			assertThat("Model attribute '" + name + "'", (T) mav.getModel().get(name), matcher)__		}__	};assert,a,model,attribute,value,with,the,given,hamcrest,link,matcher;suppress,warnings,unchecked,public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,result,model,and,view,mav,get,model,and,view,result,assert,that,model,attribute,name,t,mav,get,model,get,name,matcher
ModelResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1530174524;Assert a model attribute value with the given Hamcrest {@link Matcher}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			assertThat("Model attribute '" + name + "'", (T) mav.getModel().get(name), matcher)__		}__	};assert,a,model,attribute,value,with,the,given,hamcrest,link,matcher;suppress,warnings,unchecked,public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,result,model,and,view,mav,get,model,and,view,result,assert,that,model,attribute,name,t,mav,get,model,get,name,matcher
ModelResultMatchers -> @SuppressWarnings("unchecked") 	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1530174524;Assert a model attribute value with the given Hamcrest {@link Matcher}.;@SuppressWarnings("unchecked")_	public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			assertThat("Model attribute '" + name + "'", (T) mav.getModel().get(name), matcher)__		}__	};assert,a,model,attribute,value,with,the,given,hamcrest,link,matcher;suppress,warnings,unchecked,public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,result,model,and,view,mav,get,model,and,view,result,assert,that,model,attribute,name,t,mav,get,model,get,name,matcher
ModelResultMatchers -> public ResultMatcher attribute(final String name, final Object value);1383669853;Assert a model attribute value.;public ResultMatcher attribute(final String name, final Object value) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				assertEquals("Model attribute '" + name + "'", value, mav.getModel().get(name))__			}_		}__	};assert,a,model,attribute,value;public,result,matcher,attribute,final,string,name,final,object,value,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,assert,equals,model,attribute,name,value,mav,get,model,get,name
ModelResultMatchers -> public ResultMatcher attribute(final String name, final Object value);1405085769;Assert a model attribute value.;public ResultMatcher attribute(final String name, final Object value) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				assertEquals("Model attribute '" + name + "'", value, mav.getModel().get(name))__			}_		}__	};assert,a,model,attribute,value;public,result,matcher,attribute,final,string,name,final,object,value,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,assert,equals,model,attribute,name,value,mav,get,model,get,name
ModelResultMatchers -> public ResultMatcher attribute(final String name, final Object value);1405525484;Assert a model attribute value.;public ResultMatcher attribute(final String name, final Object value) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				assertEquals("Model attribute '" + name + "'", value, mav.getModel().get(name))__			}_		}__	};assert,a,model,attribute,value;public,result,matcher,attribute,final,string,name,final,object,value,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,assert,equals,model,attribute,name,value,mav,get,model,get,name
ModelResultMatchers -> public ResultMatcher attribute(final String name, final Object value);1413848647;Assert a model attribute value.;public ResultMatcher attribute(final String name, final Object value) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				assertEquals("Model attribute '" + name + "'", value, mav.getModel().get(name))__			}_		}__	};assert,a,model,attribute,value;public,result,matcher,attribute,final,string,name,final,object,value,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,assert,equals,model,attribute,name,value,mav,get,model,get,name
ModelResultMatchers -> public ResultMatcher attribute(final String name, final Object value);1427238287;Assert a model attribute value.;public ResultMatcher attribute(final String name, final Object value) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				assertEquals("Model attribute '" + name + "'", value, mav.getModel().get(name))__			}_		}__	};assert,a,model,attribute,value;public,result,matcher,attribute,final,string,name,final,object,value,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,assert,equals,model,attribute,name,value,mav,get,model,get,name
ModelResultMatchers -> public ResultMatcher attribute(final String name, final Object value);1437424890;Assert a model attribute value.;public ResultMatcher attribute(final String name, final Object value) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				assertEquals("Model attribute '" + name + "'", value, mav.getModel().get(name))__			}_		}__	};assert,a,model,attribute,value;public,result,matcher,attribute,final,string,name,final,object,value,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,assert,equals,model,attribute,name,value,mav,get,model,get,name
ModelResultMatchers -> public ResultMatcher attribute(final String name, final Object value);1493235170;Assert a model attribute value.;public ResultMatcher attribute(final String name, final Object value) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			assertEquals("Model attribute '" + name + "'", value, mav.getModel().get(name))__		}__	};assert,a,model,attribute,value;public,result,matcher,attribute,final,string,name,final,object,value,return,result,model,and,view,mav,get,model,and,view,result,assert,equals,model,attribute,name,value,mav,get,model,get,name
ModelResultMatchers -> public ResultMatcher attribute(final String name, final Object value);1496955179;Assert a model attribute value.;public ResultMatcher attribute(final String name, final Object value) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			assertEquals("Model attribute '" + name + "'", value, mav.getModel().get(name))__		}__	};assert,a,model,attribute,value;public,result,matcher,attribute,final,string,name,final,object,value,return,result,model,and,view,mav,get,model,and,view,result,assert,equals,model,attribute,name,value,mav,get,model,get,name
ModelResultMatchers -> public ResultMatcher attribute(final String name, final Object value);1518559218;Assert a model attribute value.;public ResultMatcher attribute(final String name, final Object value) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			assertEquals("Model attribute '" + name + "'", value, mav.getModel().get(name))__		}__	};assert,a,model,attribute,value;public,result,matcher,attribute,final,string,name,final,object,value,return,result,model,and,view,mav,get,model,and,view,result,assert,equals,model,attribute,name,value,mav,get,model,get,name
ModelResultMatchers -> public ResultMatcher attribute(final String name, final Object value);1530174524;Assert a model attribute value.;public ResultMatcher attribute(final String name, final Object value) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			assertEquals("Model attribute '" + name + "'", value, mav.getModel().get(name))__		}__	};assert,a,model,attribute,value;public,result,matcher,attribute,final,string,name,final,object,value,return,result,model,and,view,mav,get,model,and,view,result,assert,equals,model,attribute,name,value,mav,get,model,get,name
ModelResultMatchers -> public ResultMatcher attribute(final String name, final Object value);1530174524;Assert a model attribute value.;public ResultMatcher attribute(final String name, final Object value) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			assertEquals("Model attribute '" + name + "'", value, mav.getModel().get(name))__		}__	};assert,a,model,attribute,value;public,result,matcher,attribute,final,string,name,final,object,value,return,result,model,and,view,mav,get,model,and,view,result,assert,equals,model,attribute,name,value,mav,get,model,get,name
ModelResultMatchers -> public ResultMatcher attribute(final String name, final Object value);1530174524;Assert a model attribute value.;public ResultMatcher attribute(final String name, final Object value) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			assertEquals("Model attribute '" + name + "'", value, mav.getModel().get(name))__		}__	};assert,a,model,attribute,value;public,result,matcher,attribute,final,string,name,final,object,value,return,result,model,and,view,mav,get,model,and,view,result,assert,equals,model,attribute,name,value,mav,get,model,get,name
ModelResultMatchers -> public ResultMatcher attributeErrorCount(final String name, final int expectedCount);1383669853;Assert the given model attribute(s) have errors.;public ResultMatcher attributeErrorCount(final String name, final int expectedCount) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				Errors errors = getBindingResult(mav, name)__				assertEquals("Binding/validation error count for attribute [" + name + "], ",_						expectedCount, errors.getErrorCount())__			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,error,count,final,string,name,final,int,expected,count,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,errors,errors,get,binding,result,mav,name,assert,equals,binding,validation,error,count,for,attribute,name,expected,count,errors,get,error,count
ModelResultMatchers -> public ResultMatcher attributeErrorCount(final String name, final int expectedCount);1405085769;Assert the given model attribute(s) have errors.;public ResultMatcher attributeErrorCount(final String name, final int expectedCount) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				Errors errors = getBindingResult(mav, name)__				assertEquals("Binding/validation error count for attribute [" + name + "], ",_						expectedCount, errors.getErrorCount())__			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,error,count,final,string,name,final,int,expected,count,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,errors,errors,get,binding,result,mav,name,assert,equals,binding,validation,error,count,for,attribute,name,expected,count,errors,get,error,count
ModelResultMatchers -> public ResultMatcher attributeErrorCount(final String name, final int expectedCount);1405525484;Assert the given model attribute(s) have errors.;public ResultMatcher attributeErrorCount(final String name, final int expectedCount) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				Errors errors = getBindingResult(mav, name)__				assertEquals("Binding/validation error count for attribute [" + name + "], ",_						expectedCount, errors.getErrorCount())__			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,error,count,final,string,name,final,int,expected,count,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,errors,errors,get,binding,result,mav,name,assert,equals,binding,validation,error,count,for,attribute,name,expected,count,errors,get,error,count
ModelResultMatchers -> public ResultMatcher attributeErrorCount(final String name, final int expectedCount);1413848647;Assert the given model attribute(s) have errors.;public ResultMatcher attributeErrorCount(final String name, final int expectedCount) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				Errors errors = getBindingResult(mav, name)__				assertEquals("Binding/validation error count for attribute [" + name + "], ",_						expectedCount, errors.getErrorCount())__			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,error,count,final,string,name,final,int,expected,count,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,errors,errors,get,binding,result,mav,name,assert,equals,binding,validation,error,count,for,attribute,name,expected,count,errors,get,error,count
ModelResultMatchers -> public ResultMatcher attributeErrorCount(final String name, final int expectedCount);1427238287;Assert the given model attribute(s) have errors.;public ResultMatcher attributeErrorCount(final String name, final int expectedCount) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				Errors errors = getBindingResult(mav, name)__				assertEquals("Binding/validation error count for attribute [" + name + "], ",_						expectedCount, errors.getErrorCount())__			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,error,count,final,string,name,final,int,expected,count,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,errors,errors,get,binding,result,mav,name,assert,equals,binding,validation,error,count,for,attribute,name,expected,count,errors,get,error,count
ModelResultMatchers -> public ResultMatcher attributeErrorCount(final String name, final int expectedCount);1437424890;Assert the given model attribute(s) have errors.;public ResultMatcher attributeErrorCount(final String name, final int expectedCount) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				Errors errors = getBindingResult(mav, name)__				assertEquals("Binding/validation error count for attribute [" + name + "], ",_						expectedCount, errors.getErrorCount())__			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,error,count,final,string,name,final,int,expected,count,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,errors,errors,get,binding,result,mav,name,assert,equals,binding,validation,error,count,for,attribute,name,expected,count,errors,get,error,count
ModelResultMatchers -> public ResultMatcher attributeErrorCount(final String name, final int expectedCount);1493235170;Assert the given model attribute(s) have errors.;public ResultMatcher attributeErrorCount(final String name, final int expectedCount) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			Errors errors = getBindingResult(mav, name)__			assertEquals("Binding/validation error count for attribute '" + name + "', ",_					expectedCount, errors.getErrorCount())__		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,error,count,final,string,name,final,int,expected,count,return,result,model,and,view,mav,get,model,and,view,result,errors,errors,get,binding,result,mav,name,assert,equals,binding,validation,error,count,for,attribute,name,expected,count,errors,get,error,count
ModelResultMatchers -> public ResultMatcher attributeErrorCount(final String name, final int expectedCount);1496955179;Assert the given model attribute(s) have errors.;public ResultMatcher attributeErrorCount(final String name, final int expectedCount) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			Errors errors = getBindingResult(mav, name)__			assertEquals("Binding/validation error count for attribute '" + name + "', ",_					expectedCount, errors.getErrorCount())__		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,error,count,final,string,name,final,int,expected,count,return,result,model,and,view,mav,get,model,and,view,result,errors,errors,get,binding,result,mav,name,assert,equals,binding,validation,error,count,for,attribute,name,expected,count,errors,get,error,count
ModelResultMatchers -> public ResultMatcher attributeErrorCount(final String name, final int expectedCount);1518559218;Assert the given model attribute(s) have errors.;public ResultMatcher attributeErrorCount(final String name, final int expectedCount) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			Errors errors = getBindingResult(mav, name)__			assertEquals("Binding/validation error count for attribute '" + name + "', ",_					expectedCount, errors.getErrorCount())__		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,error,count,final,string,name,final,int,expected,count,return,result,model,and,view,mav,get,model,and,view,result,errors,errors,get,binding,result,mav,name,assert,equals,binding,validation,error,count,for,attribute,name,expected,count,errors,get,error,count
ModelResultMatchers -> public ResultMatcher attributeErrorCount(final String name, final int expectedCount);1530174524;Assert the given model attribute(s) have errors.;public ResultMatcher attributeErrorCount(final String name, final int expectedCount) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			Errors errors = getBindingResult(mav, name)__			assertEquals("Binding/validation error count for attribute '" + name + "', ",_					expectedCount, errors.getErrorCount())__		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,error,count,final,string,name,final,int,expected,count,return,result,model,and,view,mav,get,model,and,view,result,errors,errors,get,binding,result,mav,name,assert,equals,binding,validation,error,count,for,attribute,name,expected,count,errors,get,error,count
ModelResultMatchers -> public ResultMatcher attributeErrorCount(final String name, final int expectedCount);1530174524;Assert the given model attribute(s) have errors.;public ResultMatcher attributeErrorCount(final String name, final int expectedCount) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			Errors errors = getBindingResult(mav, name)__			assertEquals("Binding/validation error count for attribute '" + name + "', ",_					expectedCount, errors.getErrorCount())__		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,error,count,final,string,name,final,int,expected,count,return,result,model,and,view,mav,get,model,and,view,result,errors,errors,get,binding,result,mav,name,assert,equals,binding,validation,error,count,for,attribute,name,expected,count,errors,get,error,count
ModelResultMatchers -> public ResultMatcher attributeErrorCount(final String name, final int expectedCount);1530174524;Assert the given model attribute(s) have errors.;public ResultMatcher attributeErrorCount(final String name, final int expectedCount) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			Errors errors = getBindingResult(mav, name)__			assertEquals("Binding/validation error count for attribute '" + name + "', ",_					expectedCount, errors.getErrorCount())__		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,error,count,final,string,name,final,int,expected,count,return,result,model,and,view,mav,get,model,and,view,result,errors,errors,get,binding,result,mav,name,assert,equals,binding,validation,error,count,for,attribute,name,expected,count,errors,get,error,count
ModelResultMatchers -> public <T> ResultMatcher size(final int size);1383669853;Assert the number of model attributes.;public <T> ResultMatcher size(final int size) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				int actual = 0__				for (String key : mav.getModel().keySet()) {_					if (!key.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_						actual++__					}_				}_				assertEquals("Model size", size, actual)__			}_		}__	};assert,the,number,of,model,attributes;public,t,result,matcher,size,final,int,size,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,int,actual,0,for,string,key,mav,get,model,key,set,if,key,starts,with,binding,result,actual,assert,equals,model,size,size,actual
ModelResultMatchers -> public <T> ResultMatcher size(final int size);1405085769;Assert the number of model attributes.;public <T> ResultMatcher size(final int size) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				int actual = 0__				for (String key : mav.getModel().keySet()) {_					if (!key.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_						actual++__					}_				}_				assertEquals("Model size", size, actual)__			}_		}__	};assert,the,number,of,model,attributes;public,t,result,matcher,size,final,int,size,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,int,actual,0,for,string,key,mav,get,model,key,set,if,key,starts,with,binding,result,actual,assert,equals,model,size,size,actual
ModelResultMatchers -> public <T> ResultMatcher size(final int size);1405525484;Assert the number of model attributes.;public <T> ResultMatcher size(final int size) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				int actual = 0__				for (String key : mav.getModel().keySet()) {_					if (!key.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_						actual++__					}_				}_				assertEquals("Model size", size, actual)__			}_		}__	};assert,the,number,of,model,attributes;public,t,result,matcher,size,final,int,size,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,int,actual,0,for,string,key,mav,get,model,key,set,if,key,starts,with,binding,result,actual,assert,equals,model,size,size,actual
ModelResultMatchers -> public <T> ResultMatcher size(final int size);1413848647;Assert the number of model attributes.;public <T> ResultMatcher size(final int size) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				int actual = 0__				for (String key : mav.getModel().keySet()) {_					if (!key.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_						actual++__					}_				}_				assertEquals("Model size", size, actual)__			}_		}__	};assert,the,number,of,model,attributes;public,t,result,matcher,size,final,int,size,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,int,actual,0,for,string,key,mav,get,model,key,set,if,key,starts,with,binding,result,actual,assert,equals,model,size,size,actual
ModelResultMatchers -> public <T> ResultMatcher size(final int size);1427238287;Assert the number of model attributes.;public <T> ResultMatcher size(final int size) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				int actual = 0__				for (String key : mav.getModel().keySet()) {_					if (!key.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_						actual++__					}_				}_				assertEquals("Model size", size, actual)__			}_		}__	};assert,the,number,of,model,attributes;public,t,result,matcher,size,final,int,size,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,int,actual,0,for,string,key,mav,get,model,key,set,if,key,starts,with,binding,result,actual,assert,equals,model,size,size,actual
ModelResultMatchers -> public <T> ResultMatcher size(final int size);1437424890;Assert the number of model attributes.;public <T> ResultMatcher size(final int size) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				int actual = 0__				for (String key : mav.getModel().keySet()) {_					if (!key.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_						actual++__					}_				}_				assertEquals("Model size", size, actual)__			}_		}__	};assert,the,number,of,model,attributes;public,t,result,matcher,size,final,int,size,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,int,actual,0,for,string,key,mav,get,model,key,set,if,key,starts,with,binding,result,actual,assert,equals,model,size,size,actual
ModelResultMatchers -> public <T> ResultMatcher size(final int size);1493235170;Assert the number of model attributes.;public <T> ResultMatcher size(final int size) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			int actual = 0__			for (String key : mav.getModel().keySet()) {_				if (!key.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_					actual++__				}_			}_			assertEquals("Model size", size, actual)__		}__	};assert,the,number,of,model,attributes;public,t,result,matcher,size,final,int,size,return,result,model,and,view,mav,get,model,and,view,result,int,actual,0,for,string,key,mav,get,model,key,set,if,key,starts,with,binding,result,actual,assert,equals,model,size,size,actual
ModelResultMatchers -> public <T> ResultMatcher size(final int size);1496955179;Assert the number of model attributes.;public <T> ResultMatcher size(final int size) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			int actual = 0__			for (String key : mav.getModel().keySet()) {_				if (!key.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_					actual++__				}_			}_			assertEquals("Model size", size, actual)__		}__	};assert,the,number,of,model,attributes;public,t,result,matcher,size,final,int,size,return,result,model,and,view,mav,get,model,and,view,result,int,actual,0,for,string,key,mav,get,model,key,set,if,key,starts,with,binding,result,actual,assert,equals,model,size,size,actual
ModelResultMatchers -> public <T> ResultMatcher size(final int size);1518559218;Assert the number of model attributes.;public <T> ResultMatcher size(final int size) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			int actual = 0__			for (String key : mav.getModel().keySet()) {_				if (!key.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_					actual++__				}_			}_			assertEquals("Model size", size, actual)__		}__	};assert,the,number,of,model,attributes;public,t,result,matcher,size,final,int,size,return,result,model,and,view,mav,get,model,and,view,result,int,actual,0,for,string,key,mav,get,model,key,set,if,key,starts,with,binding,result,actual,assert,equals,model,size,size,actual
ModelResultMatchers -> public <T> ResultMatcher size(final int size);1530174524;Assert the number of model attributes.;public <T> ResultMatcher size(final int size) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			int actual = 0__			for (String key : mav.getModel().keySet()) {_				if (!key.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_					actual++__				}_			}_			assertEquals("Model size", size, actual)__		}__	};assert,the,number,of,model,attributes;public,t,result,matcher,size,final,int,size,return,result,model,and,view,mav,get,model,and,view,result,int,actual,0,for,string,key,mav,get,model,key,set,if,key,starts,with,binding,result,actual,assert,equals,model,size,size,actual
ModelResultMatchers -> public <T> ResultMatcher size(final int size);1530174524;Assert the number of model attributes.;public <T> ResultMatcher size(final int size) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			int actual = 0__			for (String key : mav.getModel().keySet()) {_				if (!key.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_					actual++__				}_			}_			assertEquals("Model size", size, actual)__		}__	};assert,the,number,of,model,attributes;public,t,result,matcher,size,final,int,size,return,result,model,and,view,mav,get,model,and,view,result,int,actual,0,for,string,key,mav,get,model,key,set,if,key,starts,with,binding,result,actual,assert,equals,model,size,size,actual
ModelResultMatchers -> public <T> ResultMatcher size(final int size);1530174524;Assert the number of model attributes.;public <T> ResultMatcher size(final int size) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			int actual = 0__			for (String key : mav.getModel().keySet()) {_				if (!key.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_					actual++__				}_			}_			assertEquals("Model size", size, actual)__		}__	};assert,the,number,of,model,attributes;public,t,result,matcher,size,final,int,size,return,result,model,and,view,mav,get,model,and,view,result,int,actual,0,for,string,key,mav,get,model,key,set,if,key,starts,with,binding,result,actual,assert,equals,model,size,size,actual
ModelResultMatchers -> protected ModelResultMatchers();1383669853;Protected constructor._Use {@link MockMvcResultMatchers#model()}.;protected ModelResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,model;protected,model,result,matchers
ModelResultMatchers -> protected ModelResultMatchers();1405085769;Protected constructor._Use {@link MockMvcResultMatchers#model()}.;protected ModelResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,model;protected,model,result,matchers
ModelResultMatchers -> protected ModelResultMatchers();1405525484;Protected constructor._Use {@link MockMvcResultMatchers#model()}.;protected ModelResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,model;protected,model,result,matchers
ModelResultMatchers -> protected ModelResultMatchers();1413848647;Protected constructor._Use {@link MockMvcResultMatchers#model()}.;protected ModelResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,model;protected,model,result,matchers
ModelResultMatchers -> protected ModelResultMatchers();1427238287;Protected constructor._Use {@link MockMvcResultMatchers#model()}.;protected ModelResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,model;protected,model,result,matchers
ModelResultMatchers -> protected ModelResultMatchers();1437424890;Protected constructor._Use {@link MockMvcResultMatchers#model()}.;protected ModelResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,model;protected,model,result,matchers
ModelResultMatchers -> protected ModelResultMatchers();1493235170;Protected constructor._Use {@link MockMvcResultMatchers#model()}.;protected ModelResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,model;protected,model,result,matchers
ModelResultMatchers -> protected ModelResultMatchers();1496955179;Protected constructor._Use {@link MockMvcResultMatchers#model()}.;protected ModelResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,model;protected,model,result,matchers
ModelResultMatchers -> protected ModelResultMatchers();1518559218;Protected constructor._Use {@link MockMvcResultMatchers#model()}.;protected ModelResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,model;protected,model,result,matchers
ModelResultMatchers -> protected ModelResultMatchers();1530174524;Protected constructor._Use {@link MockMvcResultMatchers#model()}.;protected ModelResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,model;protected,model,result,matchers
ModelResultMatchers -> protected ModelResultMatchers();1530174524;Protected constructor._Use {@link MockMvcResultMatchers#model()}.;protected ModelResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,model;protected,model,result,matchers
ModelResultMatchers -> protected ModelResultMatchers();1530174524;Protected constructor._Use {@link MockMvcResultMatchers#model()}.;protected ModelResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,model;protected,model,result,matchers
ModelResultMatchers -> public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1383669853;Assert a model attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				assertThat("Model attribute '" + name + "'", (T) mav.getModel().get(name), matcher)__			}_		}__	};assert,a,model,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,assert,that,model,attribute,name,t,mav,get,model,get,name,matcher
ModelResultMatchers -> public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1405085769;Assert a model attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				assertThat("Model attribute '" + name + "'", (T) mav.getModel().get(name), matcher)__			}_		}__	};assert,a,model,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,assert,that,model,attribute,name,t,mav,get,model,get,name,matcher
ModelResultMatchers -> public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1405525484;Assert a model attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				assertThat("Model attribute '" + name + "'", (T) mav.getModel().get(name), matcher)__			}_		}__	};assert,a,model,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,assert,that,model,attribute,name,t,mav,get,model,get,name,matcher
ModelResultMatchers -> public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1413848647;Assert a model attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				assertThat("Model attribute '" + name + "'", (T) mav.getModel().get(name), matcher)__			}_		}__	};assert,a,model,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,assert,that,model,attribute,name,t,mav,get,model,get,name,matcher
ModelResultMatchers -> public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1427238287;Assert a model attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				assertThat("Model attribute '" + name + "'", (T) mav.getModel().get(name), matcher)__			}_		}__	};assert,a,model,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,assert,that,model,attribute,name,t,mav,get,model,get,name,matcher
ModelResultMatchers -> public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher);1437424890;Assert a model attribute value with the given Hamcrest {@link Matcher}.;public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {_		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				assertThat("Model attribute '" + name + "'", (T) mav.getModel().get(name), matcher)__			}_		}__	};assert,a,model,attribute,value,with,the,given,hamcrest,link,matcher;public,t,result,matcher,attribute,final,string,name,final,matcher,t,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,assert,that,model,attribute,name,t,mav,get,model,get,name,matcher
ModelResultMatchers -> public ResultMatcher attributeExists(final String... names);1383669853;Assert the given model attributes exist.;public ResultMatcher attributeExists(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				for (String name : names) {_					assertTrue("Model attribute '" + name + "' does not exist", mav.getModel().get(name) != null)__				}_			}_		}__	};assert,the,given,model,attributes,exist;public,result,matcher,attribute,exists,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,does,not,exist,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeExists(final String... names);1405085769;Assert the given model attributes exist.;public ResultMatcher attributeExists(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				for (String name : names) {_					assertTrue("Model attribute '" + name + "' does not exist", mav.getModel().get(name) != null)__				}_			}_		}__	};assert,the,given,model,attributes,exist;public,result,matcher,attribute,exists,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,does,not,exist,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeExists(final String... names);1405525484;Assert the given model attributes exist.;public ResultMatcher attributeExists(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				for (String name : names) {_					assertTrue("Model attribute '" + name + "' does not exist", mav.getModel().get(name) != null)__				}_			}_		}__	};assert,the,given,model,attributes,exist;public,result,matcher,attribute,exists,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,does,not,exist,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeExists(final String... names);1413848647;Assert the given model attributes exist.;public ResultMatcher attributeExists(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				for (String name : names) {_					assertTrue("Model attribute '" + name + "' does not exist", mav.getModel().get(name) != null)__				}_			}_		}__	};assert,the,given,model,attributes,exist;public,result,matcher,attribute,exists,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,does,not,exist,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeExists(final String... names);1427238287;Assert the given model attributes exist.;public ResultMatcher attributeExists(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				for (String name : names) {_					assertTrue("Model attribute '" + name + "' does not exist", mav.getModel().get(name) != null)__				}_			}_		}__	};assert,the,given,model,attributes,exist;public,result,matcher,attribute,exists,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,does,not,exist,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeExists(final String... names);1437424890;Assert the given model attributes exist.;public ResultMatcher attributeExists(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				for (String name : names) {_					assertTrue("Model attribute '" + name + "' does not exist", mav.getModel().get(name) != null)__				}_			}_		}__	};assert,the,given,model,attributes,exist;public,result,matcher,attribute,exists,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,does,not,exist,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeExists(final String... names);1493235170;Assert the given model attributes exist.;public ResultMatcher attributeExists(final String... names) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			for (String name : names) {_				assertTrue("Model attribute '" + name + "' does not exist", mav.getModel().get(name) != null)__			}_		}__	};assert,the,given,model,attributes,exist;public,result,matcher,attribute,exists,final,string,names,return,result,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,does,not,exist,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeExists(final String... names);1496955179;Assert the given model attributes exist.;public ResultMatcher attributeExists(final String... names) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			for (String name : names) {_				assertTrue("Model attribute '" + name + "' does not exist", mav.getModel().get(name) != null)__			}_		}__	};assert,the,given,model,attributes,exist;public,result,matcher,attribute,exists,final,string,names,return,result,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,does,not,exist,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeExists(final String... names);1518559218;Assert the given model attributes exist.;public ResultMatcher attributeExists(final String... names) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			for (String name : names) {_				assertTrue("Model attribute '" + name + "' does not exist", mav.getModel().get(name) != null)__			}_		}__	};assert,the,given,model,attributes,exist;public,result,matcher,attribute,exists,final,string,names,return,result,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,does,not,exist,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeExists(final String... names);1530174524;Assert the given model attributes exist.;public ResultMatcher attributeExists(final String... names) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			for (String name : names) {_				assertTrue("Model attribute '" + name + "' does not exist", mav.getModel().get(name) != null)__			}_		}__	};assert,the,given,model,attributes,exist;public,result,matcher,attribute,exists,final,string,names,return,result,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,does,not,exist,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeExists(final String... names);1530174524;Assert the given model attributes exist.;public ResultMatcher attributeExists(final String... names) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			for (String name : names) {_				assertTrue("Model attribute '" + name + "' does not exist", mav.getModel().get(name) != null)__			}_		}__	};assert,the,given,model,attributes,exist;public,result,matcher,attribute,exists,final,string,names,return,result,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,does,not,exist,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeExists(final String... names);1530174524;Assert the given model attributes exist.;public ResultMatcher attributeExists(final String... names) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			for (String name : names) {_				assertTrue("Model attribute '" + name + "' does not exist", mav.getModel().get(name) != null)__			}_		}__	};assert,the,given,model,attributes,exist;public,result,matcher,attribute,exists,final,string,names,return,result,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,does,not,exist,mav,get,model,get,name,null
ModelResultMatchers -> public <T> ResultMatcher errorCount(final int expectedCount);1383669853;Assert the total number of errors in the model.;public <T> ResultMatcher errorCount(final int expectedCount) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				int actualCount = getErrorCount(getModelAndView(result).getModelMap())__				assertEquals("Binding/validation error count", expectedCount, actualCount)__			}_		}__	};assert,the,total,number,of,errors,in,the,model;public,t,result,matcher,error,count,final,int,expected,count,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,int,actual,count,get,error,count,get,model,and,view,result,get,model,map,assert,equals,binding,validation,error,count,expected,count,actual,count
ModelResultMatchers -> public <T> ResultMatcher errorCount(final int expectedCount);1405085769;Assert the total number of errors in the model.;public <T> ResultMatcher errorCount(final int expectedCount) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				int actualCount = getErrorCount(getModelAndView(result).getModelMap())__				assertEquals("Binding/validation error count", expectedCount, actualCount)__			}_		}__	};assert,the,total,number,of,errors,in,the,model;public,t,result,matcher,error,count,final,int,expected,count,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,int,actual,count,get,error,count,get,model,and,view,result,get,model,map,assert,equals,binding,validation,error,count,expected,count,actual,count
ModelResultMatchers -> public <T> ResultMatcher errorCount(final int expectedCount);1405525484;Assert the total number of errors in the model.;public <T> ResultMatcher errorCount(final int expectedCount) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				int actualCount = getErrorCount(getModelAndView(result).getModelMap())__				assertEquals("Binding/validation error count", expectedCount, actualCount)__			}_		}__	};assert,the,total,number,of,errors,in,the,model;public,t,result,matcher,error,count,final,int,expected,count,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,int,actual,count,get,error,count,get,model,and,view,result,get,model,map,assert,equals,binding,validation,error,count,expected,count,actual,count
ModelResultMatchers -> public <T> ResultMatcher errorCount(final int expectedCount);1413848647;Assert the total number of errors in the model.;public <T> ResultMatcher errorCount(final int expectedCount) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				int actualCount = getErrorCount(getModelAndView(result).getModelMap())__				assertEquals("Binding/validation error count", expectedCount, actualCount)__			}_		}__	};assert,the,total,number,of,errors,in,the,model;public,t,result,matcher,error,count,final,int,expected,count,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,int,actual,count,get,error,count,get,model,and,view,result,get,model,map,assert,equals,binding,validation,error,count,expected,count,actual,count
ModelResultMatchers -> public <T> ResultMatcher errorCount(final int expectedCount);1427238287;Assert the total number of errors in the model.;public <T> ResultMatcher errorCount(final int expectedCount) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				int actualCount = getErrorCount(getModelAndView(result).getModelMap())__				assertEquals("Binding/validation error count", expectedCount, actualCount)__			}_		}__	};assert,the,total,number,of,errors,in,the,model;public,t,result,matcher,error,count,final,int,expected,count,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,int,actual,count,get,error,count,get,model,and,view,result,get,model,map,assert,equals,binding,validation,error,count,expected,count,actual,count
ModelResultMatchers -> public <T> ResultMatcher errorCount(final int expectedCount);1437424890;Assert the total number of errors in the model.;public <T> ResultMatcher errorCount(final int expectedCount) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				int actualCount = getErrorCount(getModelAndView(result).getModelMap())__				assertEquals("Binding/validation error count", expectedCount, actualCount)__			}_		}__	};assert,the,total,number,of,errors,in,the,model;public,t,result,matcher,error,count,final,int,expected,count,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,int,actual,count,get,error,count,get,model,and,view,result,get,model,map,assert,equals,binding,validation,error,count,expected,count,actual,count
ModelResultMatchers -> public <T> ResultMatcher errorCount(final int expectedCount);1493235170;Assert the total number of errors in the model.;public <T> ResultMatcher errorCount(final int expectedCount) {_		return result -> {_			int actualCount = getErrorCount(getModelAndView(result).getModelMap())__			assertEquals("Binding/validation error count", expectedCount, actualCount)__		}__	};assert,the,total,number,of,errors,in,the,model;public,t,result,matcher,error,count,final,int,expected,count,return,result,int,actual,count,get,error,count,get,model,and,view,result,get,model,map,assert,equals,binding,validation,error,count,expected,count,actual,count
ModelResultMatchers -> public <T> ResultMatcher errorCount(final int expectedCount);1496955179;Assert the total number of errors in the model.;public <T> ResultMatcher errorCount(final int expectedCount) {_		return result -> {_			int actualCount = getErrorCount(getModelAndView(result).getModelMap())__			assertEquals("Binding/validation error count", expectedCount, actualCount)__		}__	};assert,the,total,number,of,errors,in,the,model;public,t,result,matcher,error,count,final,int,expected,count,return,result,int,actual,count,get,error,count,get,model,and,view,result,get,model,map,assert,equals,binding,validation,error,count,expected,count,actual,count
ModelResultMatchers -> public <T> ResultMatcher errorCount(final int expectedCount);1518559218;Assert the total number of errors in the model.;public <T> ResultMatcher errorCount(final int expectedCount) {_		return result -> {_			int actualCount = getErrorCount(getModelAndView(result).getModelMap())__			assertEquals("Binding/validation error count", expectedCount, actualCount)__		}__	};assert,the,total,number,of,errors,in,the,model;public,t,result,matcher,error,count,final,int,expected,count,return,result,int,actual,count,get,error,count,get,model,and,view,result,get,model,map,assert,equals,binding,validation,error,count,expected,count,actual,count
ModelResultMatchers -> public <T> ResultMatcher errorCount(final int expectedCount);1530174524;Assert the total number of errors in the model.;public <T> ResultMatcher errorCount(final int expectedCount) {_		return result -> {_			int actualCount = getErrorCount(getModelAndView(result).getModelMap())__			assertEquals("Binding/validation error count", expectedCount, actualCount)__		}__	};assert,the,total,number,of,errors,in,the,model;public,t,result,matcher,error,count,final,int,expected,count,return,result,int,actual,count,get,error,count,get,model,and,view,result,get,model,map,assert,equals,binding,validation,error,count,expected,count,actual,count
ModelResultMatchers -> public <T> ResultMatcher errorCount(final int expectedCount);1530174524;Assert the total number of errors in the model.;public <T> ResultMatcher errorCount(final int expectedCount) {_		return result -> {_			int actualCount = getErrorCount(getModelAndView(result).getModelMap())__			assertEquals("Binding/validation error count", expectedCount, actualCount)__		}__	};assert,the,total,number,of,errors,in,the,model;public,t,result,matcher,error,count,final,int,expected,count,return,result,int,actual,count,get,error,count,get,model,and,view,result,get,model,map,assert,equals,binding,validation,error,count,expected,count,actual,count
ModelResultMatchers -> public <T> ResultMatcher errorCount(final int expectedCount);1530174524;Assert the total number of errors in the model.;public <T> ResultMatcher errorCount(final int expectedCount) {_		return result -> {_			int actualCount = getErrorCount(getModelAndView(result).getModelMap())__			assertEquals("Binding/validation error count", expectedCount, actualCount)__		}__	};assert,the,total,number,of,errors,in,the,model;public,t,result,matcher,error,count,final,int,expected,count,return,result,int,actual,count,get,error,count,get,model,and,view,result,get,model,map,assert,equals,binding,validation,error,count,expected,count,actual,count
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames);1383669853;Assert the given model attribute field(s) have errors.;public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())__				for (final String fieldName : fieldNames) {_					assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]",_							result.hasFieldErrors(fieldName))__				}_			}_		}__	};assert,the,given,model,attribute,field,s,have,errors;public,result,matcher,attribute,has,field,errors,final,string,name,final,string,field,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,for,final,string,field,name,field,names,assert,true,no,errors,for,field,field,name,of,attribute,name,result,has,field,errors,field,name
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames);1405085769;Assert the given model attribute field(s) have errors.;public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())__				for (final String fieldName : fieldNames) {_					boolean hasFieldErrors = result.hasFieldErrors(fieldName)__					assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors)__				}_			}_		}__	};assert,the,given,model,attribute,field,s,have,errors;public,result,matcher,attribute,has,field,errors,final,string,name,final,string,field,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,for,final,string,field,name,field,names,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames);1405525484;Assert the given model attribute field(s) have errors.;public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())__				for (final String fieldName : fieldNames) {_					boolean hasFieldErrors = result.hasFieldErrors(fieldName)__					assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors)__				}_			}_		}__	};assert,the,given,model,attribute,field,s,have,errors;public,result,matcher,attribute,has,field,errors,final,string,name,final,string,field,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,for,final,string,field,name,field,names,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames);1413848647;Assert the given model attribute field(s) have errors.;public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())__				for (final String fieldName : fieldNames) {_					boolean hasFieldErrors = result.hasFieldErrors(fieldName)__					assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors)__				}_			}_		}__	};assert,the,given,model,attribute,field,s,have,errors;public,result,matcher,attribute,has,field,errors,final,string,name,final,string,field,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,for,final,string,field,name,field,names,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames);1427238287;Assert the given model attribute field(s) have errors.;public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())__				for (final String fieldName : fieldNames) {_					boolean hasFieldErrors = result.hasFieldErrors(fieldName)__					assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors)__				}_			}_		}__	};assert,the,given,model,attribute,field,s,have,errors;public,result,matcher,attribute,has,field,errors,final,string,name,final,string,field,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,for,final,string,field,name,field,names,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames);1437424890;Assert the given model attribute field(s) have errors.;public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())__				for (final String fieldName : fieldNames) {_					boolean hasFieldErrors = result.hasFieldErrors(fieldName)__					assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors)__				}_			}_		}__	};assert,the,given,model,attribute,field,s,have,errors;public,result,matcher,attribute,has,field,errors,final,string,name,final,string,field,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,for,final,string,field,name,field,names,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames);1493235170;Assert the given model attribute field(s) have errors.;public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			for (final String fieldName : fieldNames) {_				boolean hasFieldErrors = result.hasFieldErrors(fieldName)__				assertTrue("No errors for field '" + fieldName + "' of attribute '" + name + "'", hasFieldErrors)__			}_		}__	};assert,the,given,model,attribute,field,s,have,errors;public,result,matcher,attribute,has,field,errors,final,string,name,final,string,field,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,for,final,string,field,name,field,names,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames);1496955179;Assert the given model attribute field(s) have errors.;public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			for (final String fieldName : fieldNames) {_				boolean hasFieldErrors = result.hasFieldErrors(fieldName)__				assertTrue("No errors for field '" + fieldName + "' of attribute '" + name + "'", hasFieldErrors)__			}_		}__	};assert,the,given,model,attribute,field,s,have,errors;public,result,matcher,attribute,has,field,errors,final,string,name,final,string,field,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,for,final,string,field,name,field,names,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames);1518559218;Assert the given model attribute field(s) have errors.;public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			for (final String fieldName : fieldNames) {_				boolean hasFieldErrors = result.hasFieldErrors(fieldName)__				assertTrue("No errors for field '" + fieldName + "' of attribute '" + name + "'", hasFieldErrors)__			}_		}__	};assert,the,given,model,attribute,field,s,have,errors;public,result,matcher,attribute,has,field,errors,final,string,name,final,string,field,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,for,final,string,field,name,field,names,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames);1530174524;Assert the given model attribute field(s) have errors.;public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			for (final String fieldName : fieldNames) {_				boolean hasFieldErrors = result.hasFieldErrors(fieldName)__				assertTrue("No errors for field '" + fieldName + "' of attribute '" + name + "'", hasFieldErrors)__			}_		}__	};assert,the,given,model,attribute,field,s,have,errors;public,result,matcher,attribute,has,field,errors,final,string,name,final,string,field,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,for,final,string,field,name,field,names,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames);1530174524;Assert the given model attribute field(s) have errors.;public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			for (final String fieldName : fieldNames) {_				boolean hasFieldErrors = result.hasFieldErrors(fieldName)__				assertTrue("No errors for field '" + fieldName + "' of attribute '" + name + "'", hasFieldErrors)__			}_		}__	};assert,the,given,model,attribute,field,s,have,errors;public,result,matcher,attribute,has,field,errors,final,string,name,final,string,field,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,for,final,string,field,name,field,names,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames);1530174524;Assert the given model attribute field(s) have errors.;public ResultMatcher attributeHasFieldErrors(final String name, final String... fieldNames) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			for (final String fieldName : fieldNames) {_				boolean hasFieldErrors = result.hasFieldErrors(fieldName)__				assertTrue("No errors for field '" + fieldName + "' of attribute '" + name + "'", hasFieldErrors)__			}_		}__	};assert,the,given,model,attribute,field,s,have,errors;public,result,matcher,attribute,has,field,errors,final,string,name,final,string,field,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,for,final,string,field,name,field,names,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error);1405085769;Assert a field error code for a model attribute using exact String match._@since 4.1;public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error) {_		return new ResultMatcher() {_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())___				boolean hasFieldErrors = result.hasFieldErrors(fieldName)__				assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors)___				String code = result.getFieldError(fieldName).getCode()__				assertTrue("Expected error code '" + error + "' but got '" + code + "'", code.equals(error))__			}_		}__	};assert,a,field,error,code,for,a,model,attribute,using,exact,string,match,since,4,1;public,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,string,error,return,new,result,matcher,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors,string,code,result,get,field,error,field,name,get,code,assert,true,expected,error,code,error,but,got,code,code,equals,error
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error);1405525484;Assert a field error code for a model attribute using exact String match._@since 4.1;public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error) {_		return new ResultMatcher() {_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())___				boolean hasFieldErrors = result.hasFieldErrors(fieldName)__				assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors)___				String code = result.getFieldError(fieldName).getCode()__				assertTrue("Expected error code '" + error + "' but got '" + code + "'", code.equals(error))__			}_		}__	};assert,a,field,error,code,for,a,model,attribute,using,exact,string,match,since,4,1;public,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,string,error,return,new,result,matcher,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors,string,code,result,get,field,error,field,name,get,code,assert,true,expected,error,code,error,but,got,code,code,equals,error
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error);1413848647;Assert a field error code for a model attribute using exact String match._@since 4.1;public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error) {_		return new ResultMatcher() {_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())___				boolean hasFieldErrors = result.hasFieldErrors(fieldName)__				assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors)___				String code = result.getFieldError(fieldName).getCode()__				assertTrue("Expected error code '" + error + "' but got '" + code + "'", code.equals(error))__			}_		}__	};assert,a,field,error,code,for,a,model,attribute,using,exact,string,match,since,4,1;public,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,string,error,return,new,result,matcher,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors,string,code,result,get,field,error,field,name,get,code,assert,true,expected,error,code,error,but,got,code,code,equals,error
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error);1427238287;Assert a field error code for a model attribute using exact String match._@since 4.1;public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error) {_		return new ResultMatcher() {_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())___				boolean hasFieldErrors = result.hasFieldErrors(fieldName)__				assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors)___				String code = result.getFieldError(fieldName).getCode()__				assertTrue("Expected error code '" + error + "' but got '" + code + "'", code.equals(error))__			}_		}__	};assert,a,field,error,code,for,a,model,attribute,using,exact,string,match,since,4,1;public,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,string,error,return,new,result,matcher,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors,string,code,result,get,field,error,field,name,get,code,assert,true,expected,error,code,error,but,got,code,code,equals,error
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error);1437424890;Assert a field error code for a model attribute using exact String match._@since 4.1;public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error) {_		return new ResultMatcher() {_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())___				boolean hasFieldErrors = result.hasFieldErrors(fieldName)__				assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors)___				String code = result.getFieldError(fieldName).getCode()__				assertTrue("Expected error code '" + error + "' but got '" + code + "'", code.equals(error))__			}_		}__	};assert,a,field,error,code,for,a,model,attribute,using,exact,string,match,since,4,1;public,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,string,error,return,new,result,matcher,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors,string,code,result,get,field,error,field,name,get,code,assert,true,expected,error,code,error,but,got,code,code,equals,error
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error);1493235170;Assert a field error code for a model attribute using exact String match._@since 4.1;public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			boolean hasFieldErrors = result.hasFieldErrors(fieldName)__			assertTrue("No errors for field '" + fieldName + "' of attribute '" + name + "'", hasFieldErrors)__			String code = result.getFieldError(fieldName).getCode()__			assertTrue("Expected error code '" + error + "' but got '" + code + "'", code.equals(error))__		}__	};assert,a,field,error,code,for,a,model,attribute,using,exact,string,match,since,4,1;public,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,string,error,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors,string,code,result,get,field,error,field,name,get,code,assert,true,expected,error,code,error,but,got,code,code,equals,error
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error);1496955179;Assert a field error code for a model attribute using exact String match._@since 4.1;public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			FieldError fieldError = result.getFieldError(fieldName)__			if (fieldError == null) {_				fail("No errors for field '" + fieldName + "' of attribute '" + name + "'")__			}_			String code = fieldError.getCode()__			assertTrue("Expected error code '" + error + "' but got '" + code + "'", error.equals(code))__		}__	};assert,a,field,error,code,for,a,model,attribute,using,exact,string,match,since,4,1;public,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,string,error,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,field,error,field,error,result,get,field,error,field,name,if,field,error,null,fail,no,errors,for,field,field,name,of,attribute,name,string,code,field,error,get,code,assert,true,expected,error,code,error,but,got,code,error,equals,code
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error);1518559218;Assert a field error code for a model attribute using exact String match._@since 4.1;public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			FieldError fieldError = result.getFieldError(fieldName)__			if (fieldError == null) {_				fail("No errors for field '" + fieldName + "' of attribute '" + name + "'")__			}_			String code = fieldError.getCode()__			assertTrue("Expected error code '" + error + "' but got '" + code + "'", error.equals(code))__		}__	};assert,a,field,error,code,for,a,model,attribute,using,exact,string,match,since,4,1;public,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,string,error,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,field,error,field,error,result,get,field,error,field,name,if,field,error,null,fail,no,errors,for,field,field,name,of,attribute,name,string,code,field,error,get,code,assert,true,expected,error,code,error,but,got,code,error,equals,code
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error);1530174524;Assert a field error code for a model attribute using exact String match._@since 4.1;public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			FieldError fieldError = result.getFieldError(fieldName)__			if (fieldError == null) {_				fail("No errors for field '" + fieldName + "' of attribute '" + name + "'")__			}_			String code = fieldError.getCode()__			assertTrue("Expected error code '" + error + "' but got '" + code + "'", error.equals(code))__		}__	};assert,a,field,error,code,for,a,model,attribute,using,exact,string,match,since,4,1;public,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,string,error,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,field,error,field,error,result,get,field,error,field,name,if,field,error,null,fail,no,errors,for,field,field,name,of,attribute,name,string,code,field,error,get,code,assert,true,expected,error,code,error,but,got,code,error,equals,code
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error);1530174524;Assert a field error code for a model attribute using exact String match._@since 4.1;public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			FieldError fieldError = result.getFieldError(fieldName)__			if (fieldError == null) {_				fail("No errors for field '" + fieldName + "' of attribute '" + name + "'")__			}_			String code = fieldError.getCode()__			assertTrue("Expected error code '" + error + "' but got '" + code + "'", error.equals(code))__		}__	};assert,a,field,error,code,for,a,model,attribute,using,exact,string,match,since,4,1;public,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,string,error,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,field,error,field,error,result,get,field,error,field,name,if,field,error,null,fail,no,errors,for,field,field,name,of,attribute,name,string,code,field,error,get,code,assert,true,expected,error,code,error,but,got,code,error,equals,code
ModelResultMatchers -> public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error);1530174524;Assert a field error code for a model attribute using exact String match._@since 4.1;public ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, final String error) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			FieldError fieldError = result.getFieldError(fieldName)__			if (fieldError == null) {_				fail("No errors for field '" + fieldName + "' of attribute '" + name + "'")__			}_			String code = fieldError.getCode()__			assertTrue("Expected error code '" + error + "' but got '" + code + "'", error.equals(code))__		}__	};assert,a,field,error,code,for,a,model,attribute,using,exact,string,match,since,4,1;public,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,string,error,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,field,error,field,error,result,get,field,error,field,name,if,field,error,null,fail,no,errors,for,field,field,name,of,attribute,name,string,code,field,error,get,code,assert,true,expected,error,code,error,but,got,code,error,equals,code
ModelResultMatchers -> public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, 			final Matcher<? super String> matcher);1405085769;Assert a field error code for a model attribute using a {@link org.hamcrest.Matcher}._@since 4.1;public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName,_			final Matcher<? super String> matcher) {__		return new ResultMatcher() {_			@Override_			@SuppressWarnings("unchecked")_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())___				boolean hasFieldErrors = result.hasFieldErrors(fieldName)__				assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors)___				String code = result.getFieldError(fieldName).getCode()__				assertThat("Field name '" + fieldName + "' of attribute '" + name + "'", code, matcher)__			}_		}__	};assert,a,field,error,code,for,a,model,attribute,using,a,link,org,hamcrest,matcher,since,4,1;public,t,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,matcher,super,string,matcher,return,new,result,matcher,override,suppress,warnings,unchecked,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors,string,code,result,get,field,error,field,name,get,code,assert,that,field,name,field,name,of,attribute,name,code,matcher
ModelResultMatchers -> public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, 			final Matcher<? super String> matcher);1405525484;Assert a field error code for a model attribute using a {@link org.hamcrest.Matcher}._@since 4.1;public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName,_			final Matcher<? super String> matcher) {__		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())___				boolean hasFieldErrors = result.hasFieldErrors(fieldName)__				assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors)___				String code = result.getFieldError(fieldName).getCode()__				assertThat("Field name '" + fieldName + "' of attribute '" + name + "'", code, matcher)__			}_		}__	};assert,a,field,error,code,for,a,model,attribute,using,a,link,org,hamcrest,matcher,since,4,1;public,t,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors,string,code,result,get,field,error,field,name,get,code,assert,that,field,name,field,name,of,attribute,name,code,matcher
ModelResultMatchers -> public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, 			final Matcher<? super String> matcher);1413848647;Assert a field error code for a model attribute using a {@link org.hamcrest.Matcher}._@since 4.1;public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName,_			final Matcher<? super String> matcher) {__		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())___				boolean hasFieldErrors = result.hasFieldErrors(fieldName)__				assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors)___				String code = result.getFieldError(fieldName).getCode()__				assertThat("Field name '" + fieldName + "' of attribute '" + name + "'", code, matcher)__			}_		}__	};assert,a,field,error,code,for,a,model,attribute,using,a,link,org,hamcrest,matcher,since,4,1;public,t,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors,string,code,result,get,field,error,field,name,get,code,assert,that,field,name,field,name,of,attribute,name,code,matcher
ModelResultMatchers -> public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, 			final Matcher<? super String> matcher);1427238287;Assert a field error code for a model attribute using a {@link org.hamcrest.Matcher}._@since 4.1;public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName,_			final Matcher<? super String> matcher) {__		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())___				boolean hasFieldErrors = result.hasFieldErrors(fieldName)__				assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors)___				String code = result.getFieldError(fieldName).getCode()__				assertThat("Field name '" + fieldName + "' of attribute '" + name + "'", code, matcher)__			}_		}__	};assert,a,field,error,code,for,a,model,attribute,using,a,link,org,hamcrest,matcher,since,4,1;public,t,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors,string,code,result,get,field,error,field,name,get,code,assert,that,field,name,field,name,of,attribute,name,code,matcher
ModelResultMatchers -> public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, 			final Matcher<? super String> matcher);1437424890;Assert a field error code for a model attribute using a {@link org.hamcrest.Matcher}._@since 4.1;public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName,_			final Matcher<? super String> matcher) {__		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())___				boolean hasFieldErrors = result.hasFieldErrors(fieldName)__				assertTrue("No errors for field: [" + fieldName + "] of attribute [" + name + "]", hasFieldErrors)___				String code = result.getFieldError(fieldName).getCode()__				assertThat("Field name '" + fieldName + "' of attribute '" + name + "'", code, matcher)__			}_		}__	};assert,a,field,error,code,for,a,model,attribute,using,a,link,org,hamcrest,matcher,since,4,1;public,t,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors,string,code,result,get,field,error,field,name,get,code,assert,that,field,name,field,name,of,attribute,name,code,matcher
ModelResultMatchers -> public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, 			final Matcher<? super String> matcher);1493235170;Assert a field error code for a model attribute using a {@link org.hamcrest.Matcher}._@since 4.1;public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName,_			final Matcher<? super String> matcher) {__		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())__			boolean hasFieldErrors = result.hasFieldErrors(fieldName)__			assertTrue("No errors for field '" + fieldName + "' of attribute '" + name + "'", hasFieldErrors)__			String code = result.getFieldError(fieldName).getCode()__			assertThat("Field name '" + fieldName + "' of attribute '" + name + "'", code, matcher)__		}__	};assert,a,field,error,code,for,a,model,attribute,using,a,link,org,hamcrest,matcher,since,4,1;public,t,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,matcher,super,string,matcher,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,boolean,has,field,errors,result,has,field,errors,field,name,assert,true,no,errors,for,field,field,name,of,attribute,name,has,field,errors,string,code,result,get,field,error,field,name,get,code,assert,that,field,name,field,name,of,attribute,name,code,matcher
ModelResultMatchers -> public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, 			final Matcher<? super String> matcher);1496955179;Assert a field error code for a model attribute using a {@link org.hamcrest.Matcher}._@since 4.1;public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName,_			final Matcher<? super String> matcher) {__		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())__			FieldError fieldError = result.getFieldError(fieldName)__			if (fieldError == null) {_				fail("No errors for field '" + fieldName + "' of attribute '" + name + "'")__			}_			String code = fieldError.getCode()__			assertThat("Field name '" + fieldName + "' of attribute '" + name + "'", code, matcher)__		}__	};assert,a,field,error,code,for,a,model,attribute,using,a,link,org,hamcrest,matcher,since,4,1;public,t,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,matcher,super,string,matcher,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,field,error,field,error,result,get,field,error,field,name,if,field,error,null,fail,no,errors,for,field,field,name,of,attribute,name,string,code,field,error,get,code,assert,that,field,name,field,name,of,attribute,name,code,matcher
ModelResultMatchers -> public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, 			final Matcher<? super String> matcher);1518559218;Assert a field error code for a model attribute using a {@link org.hamcrest.Matcher}._@since 4.1;public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName,_			final Matcher<? super String> matcher) {__		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())__			FieldError fieldError = result.getFieldError(fieldName)__			if (fieldError == null) {_				fail("No errors for field '" + fieldName + "' of attribute '" + name + "'")__			}_			String code = fieldError.getCode()__			assertThat("Field name '" + fieldName + "' of attribute '" + name + "'", code, matcher)__		}__	};assert,a,field,error,code,for,a,model,attribute,using,a,link,org,hamcrest,matcher,since,4,1;public,t,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,matcher,super,string,matcher,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,field,error,field,error,result,get,field,error,field,name,if,field,error,null,fail,no,errors,for,field,field,name,of,attribute,name,string,code,field,error,get,code,assert,that,field,name,field,name,of,attribute,name,code,matcher
ModelResultMatchers -> public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, 			final Matcher<? super String> matcher);1530174524;Assert a field error code for a model attribute using a {@link org.hamcrest.Matcher}._@since 4.1;public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName,_			final Matcher<? super String> matcher) {__		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())__			FieldError fieldError = result.getFieldError(fieldName)__			if (fieldError == null) {_				fail("No errors for field '" + fieldName + "' of attribute '" + name + "'")__			}_			String code = fieldError.getCode()__			assertThat("Field name '" + fieldName + "' of attribute '" + name + "'", code, matcher)__		}__	};assert,a,field,error,code,for,a,model,attribute,using,a,link,org,hamcrest,matcher,since,4,1;public,t,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,matcher,super,string,matcher,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,field,error,field,error,result,get,field,error,field,name,if,field,error,null,fail,no,errors,for,field,field,name,of,attribute,name,string,code,field,error,get,code,assert,that,field,name,field,name,of,attribute,name,code,matcher
ModelResultMatchers -> public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, 			final Matcher<? super String> matcher);1530174524;Assert a field error code for a model attribute using a {@link org.hamcrest.Matcher}._@since 4.1;public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName,_			final Matcher<? super String> matcher) {__		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())__			FieldError fieldError = result.getFieldError(fieldName)__			if (fieldError == null) {_				fail("No errors for field '" + fieldName + "' of attribute '" + name + "'")__			}_			String code = fieldError.getCode()__			assertThat("Field name '" + fieldName + "' of attribute '" + name + "'", code, matcher)__		}__	};assert,a,field,error,code,for,a,model,attribute,using,a,link,org,hamcrest,matcher,since,4,1;public,t,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,matcher,super,string,matcher,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,field,error,field,error,result,get,field,error,field,name,if,field,error,null,fail,no,errors,for,field,field,name,of,attribute,name,string,code,field,error,get,code,assert,that,field,name,field,name,of,attribute,name,code,matcher
ModelResultMatchers -> public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName, 			final Matcher<? super String> matcher);1530174524;Assert a field error code for a model attribute using a {@link org.hamcrest.Matcher}._@since 4.1;public <T> ResultMatcher attributeHasFieldErrorCode(final String name, final String fieldName,_			final Matcher<? super String> matcher) {__		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			BindingResult result = getBindingResult(mav, name)__			assertTrue("No errors for attribute: [" + name + "]", result.hasErrors())__			FieldError fieldError = result.getFieldError(fieldName)__			if (fieldError == null) {_				fail("No errors for field '" + fieldName + "' of attribute '" + name + "'")__			}_			String code = fieldError.getCode()__			assertThat("Field name '" + fieldName + "' of attribute '" + name + "'", code, matcher)__		}__	};assert,a,field,error,code,for,a,model,attribute,using,a,link,org,hamcrest,matcher,since,4,1;public,t,result,matcher,attribute,has,field,error,code,final,string,name,final,string,field,name,final,matcher,super,string,matcher,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors,field,error,field,error,result,get,field,error,field,name,if,field,error,null,fail,no,errors,for,field,field,name,of,attribute,name,string,code,field,error,get,code,assert,that,field,name,field,name,of,attribute,name,code,matcher
ModelResultMatchers -> public <T> ResultMatcher hasErrors();1383669853;Assert the model has errors.;public <T> ResultMatcher hasErrors() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				int count = getErrorCount(getModelAndView(result).getModelMap())__				assertTrue("Expected binding/validation errors", count != 0)__			}_		}__	};assert,the,model,has,errors;public,t,result,matcher,has,errors,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,int,count,get,error,count,get,model,and,view,result,get,model,map,assert,true,expected,binding,validation,errors,count,0
ModelResultMatchers -> public <T> ResultMatcher hasErrors();1405085769;Assert the model has errors.;public <T> ResultMatcher hasErrors() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				int count = getErrorCount(getModelAndView(result).getModelMap())__				assertTrue("Expected binding/validation errors", count != 0)__			}_		}__	};assert,the,model,has,errors;public,t,result,matcher,has,errors,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,int,count,get,error,count,get,model,and,view,result,get,model,map,assert,true,expected,binding,validation,errors,count,0
ModelResultMatchers -> public <T> ResultMatcher hasErrors();1405525484;Assert the model has errors.;public <T> ResultMatcher hasErrors() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				int count = getErrorCount(getModelAndView(result).getModelMap())__				assertTrue("Expected binding/validation errors", count != 0)__			}_		}__	};assert,the,model,has,errors;public,t,result,matcher,has,errors,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,int,count,get,error,count,get,model,and,view,result,get,model,map,assert,true,expected,binding,validation,errors,count,0
ModelResultMatchers -> public <T> ResultMatcher hasErrors();1413848647;Assert the model has errors.;public <T> ResultMatcher hasErrors() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				int count = getErrorCount(getModelAndView(result).getModelMap())__				assertTrue("Expected binding/validation errors", count != 0)__			}_		}__	};assert,the,model,has,errors;public,t,result,matcher,has,errors,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,int,count,get,error,count,get,model,and,view,result,get,model,map,assert,true,expected,binding,validation,errors,count,0
ModelResultMatchers -> public <T> ResultMatcher hasErrors();1427238287;Assert the model has errors.;public <T> ResultMatcher hasErrors() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				int count = getErrorCount(getModelAndView(result).getModelMap())__				assertTrue("Expected binding/validation errors", count != 0)__			}_		}__	};assert,the,model,has,errors;public,t,result,matcher,has,errors,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,int,count,get,error,count,get,model,and,view,result,get,model,map,assert,true,expected,binding,validation,errors,count,0
ModelResultMatchers -> public <T> ResultMatcher hasErrors();1437424890;Assert the model has errors.;public <T> ResultMatcher hasErrors() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				int count = getErrorCount(getModelAndView(result).getModelMap())__				assertTrue("Expected binding/validation errors", count != 0)__			}_		}__	};assert,the,model,has,errors;public,t,result,matcher,has,errors,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,int,count,get,error,count,get,model,and,view,result,get,model,map,assert,true,expected,binding,validation,errors,count,0
ModelResultMatchers -> public <T> ResultMatcher hasErrors();1493235170;Assert the model has errors.;public <T> ResultMatcher hasErrors() {_		return result -> {_			int count = getErrorCount(getModelAndView(result).getModelMap())__			assertTrue("Expected binding/validation errors", count != 0)__		}__	};assert,the,model,has,errors;public,t,result,matcher,has,errors,return,result,int,count,get,error,count,get,model,and,view,result,get,model,map,assert,true,expected,binding,validation,errors,count,0
ModelResultMatchers -> public <T> ResultMatcher hasErrors();1496955179;Assert the model has errors.;public <T> ResultMatcher hasErrors() {_		return result -> {_			int count = getErrorCount(getModelAndView(result).getModelMap())__			assertTrue("Expected binding/validation errors", count != 0)__		}__	};assert,the,model,has,errors;public,t,result,matcher,has,errors,return,result,int,count,get,error,count,get,model,and,view,result,get,model,map,assert,true,expected,binding,validation,errors,count,0
ModelResultMatchers -> public <T> ResultMatcher hasErrors();1518559218;Assert the model has errors.;public <T> ResultMatcher hasErrors() {_		return result -> {_			int count = getErrorCount(getModelAndView(result).getModelMap())__			assertTrue("Expected binding/validation errors", count != 0)__		}__	};assert,the,model,has,errors;public,t,result,matcher,has,errors,return,result,int,count,get,error,count,get,model,and,view,result,get,model,map,assert,true,expected,binding,validation,errors,count,0
ModelResultMatchers -> public <T> ResultMatcher hasErrors();1530174524;Assert the model has errors.;public <T> ResultMatcher hasErrors() {_		return result -> {_			int count = getErrorCount(getModelAndView(result).getModelMap())__			assertTrue("Expected binding/validation errors", count != 0)__		}__	};assert,the,model,has,errors;public,t,result,matcher,has,errors,return,result,int,count,get,error,count,get,model,and,view,result,get,model,map,assert,true,expected,binding,validation,errors,count,0
ModelResultMatchers -> public <T> ResultMatcher hasErrors();1530174524;Assert the model has errors.;public <T> ResultMatcher hasErrors() {_		return result -> {_			int count = getErrorCount(getModelAndView(result).getModelMap())__			assertTrue("Expected binding/validation errors", count != 0)__		}__	};assert,the,model,has,errors;public,t,result,matcher,has,errors,return,result,int,count,get,error,count,get,model,and,view,result,get,model,map,assert,true,expected,binding,validation,errors,count,0
ModelResultMatchers -> public <T> ResultMatcher hasErrors();1530174524;Assert the model has errors.;public <T> ResultMatcher hasErrors() {_		return result -> {_			int count = getErrorCount(getModelAndView(result).getModelMap())__			assertTrue("Expected binding/validation errors", count != 0)__		}__	};assert,the,model,has,errors;public,t,result,matcher,has,errors,return,result,int,count,get,error,count,get,model,and,view,result,get,model,map,assert,true,expected,binding,validation,errors,count,0
ModelResultMatchers -> public ResultMatcher attributeDoesNotExist(final String... names);1383669853;Assert the given model attributes do not exist;public ResultMatcher attributeDoesNotExist(final String... names) {_        return new ResultMatcher() {_            @Override_            public void match(MvcResult result) throws Exception {_                ModelAndView mav = getModelAndView(result)__                for (String name : names) {_                    assertTrue("Model attribute '" + name + "' exists", mav.getModel().get(name) == null)__                }_            }_        }__    };assert,the,given,model,attributes,do,not,exist;public,result,matcher,attribute,does,not,exist,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,exists,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeDoesNotExist(final String... names);1405085769;Assert the given model attributes do not exist;public ResultMatcher attributeDoesNotExist(final String... names) {_        return new ResultMatcher() {_            @Override_            public void match(MvcResult result) throws Exception {_                ModelAndView mav = getModelAndView(result)__                for (String name : names) {_                    assertTrue("Model attribute '" + name + "' exists", mav.getModel().get(name) == null)__                }_            }_        }__    };assert,the,given,model,attributes,do,not,exist;public,result,matcher,attribute,does,not,exist,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,exists,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeDoesNotExist(final String... names);1405525484;Assert the given model attributes do not exist;public ResultMatcher attributeDoesNotExist(final String... names) {_        return new ResultMatcher() {_            @Override_            public void match(MvcResult result) throws Exception {_                ModelAndView mav = getModelAndView(result)__                for (String name : names) {_                    assertTrue("Model attribute '" + name + "' exists", mav.getModel().get(name) == null)__                }_            }_        }__    };assert,the,given,model,attributes,do,not,exist;public,result,matcher,attribute,does,not,exist,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,exists,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeDoesNotExist(final String... names);1413848647;Assert the given model attributes do not exist;public ResultMatcher attributeDoesNotExist(final String... names) {_        return new ResultMatcher() {_            @Override_            public void match(MvcResult result) throws Exception {_                ModelAndView mav = getModelAndView(result)__                for (String name : names) {_                    assertTrue("Model attribute '" + name + "' exists", mav.getModel().get(name) == null)__                }_            }_        }__    };assert,the,given,model,attributes,do,not,exist;public,result,matcher,attribute,does,not,exist,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,exists,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeDoesNotExist(final String... names);1427238287;Assert the given model attributes do not exist;public ResultMatcher attributeDoesNotExist(final String... names) {_        return new ResultMatcher() {_            @Override_            public void match(MvcResult result) throws Exception {_                ModelAndView mav = getModelAndView(result)__                for (String name : names) {_                    assertTrue("Model attribute '" + name + "' exists", mav.getModel().get(name) == null)__                }_            }_        }__    };assert,the,given,model,attributes,do,not,exist;public,result,matcher,attribute,does,not,exist,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,exists,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeDoesNotExist(final String... names);1437424890;Assert the given model attributes do not exist;public ResultMatcher attributeDoesNotExist(final String... names) {_        return new ResultMatcher() {_            @Override_            public void match(MvcResult result) throws Exception {_                ModelAndView mav = getModelAndView(result)__                for (String name : names) {_                    assertTrue("Model attribute '" + name + "' exists", mav.getModel().get(name) == null)__                }_            }_        }__    };assert,the,given,model,attributes,do,not,exist;public,result,matcher,attribute,does,not,exist,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,exists,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeDoesNotExist(final String... names);1493235170;Assert the given model attributes do not exist;public ResultMatcher attributeDoesNotExist(final String... names) {_        return result -> {_			ModelAndView mav = getModelAndView(result)__			for (String name : names) {_				assertTrue("Model attribute '" + name + "' exists", mav.getModel().get(name) == null)__			}_		}__    };assert,the,given,model,attributes,do,not,exist;public,result,matcher,attribute,does,not,exist,final,string,names,return,result,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,exists,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeDoesNotExist(final String... names);1496955179;Assert the given model attributes do not exist;public ResultMatcher attributeDoesNotExist(final String... names) {_        return result -> {_			ModelAndView mav = getModelAndView(result)__			for (String name : names) {_				assertTrue("Model attribute '" + name + "' exists", mav.getModel().get(name) == null)__			}_		}__    };assert,the,given,model,attributes,do,not,exist;public,result,matcher,attribute,does,not,exist,final,string,names,return,result,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,exists,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeDoesNotExist(final String... names);1518559218;Assert the given model attributes do not exist;public ResultMatcher attributeDoesNotExist(final String... names) {_        return result -> {_			ModelAndView mav = getModelAndView(result)__			for (String name : names) {_				assertTrue("Model attribute '" + name + "' exists", mav.getModel().get(name) == null)__			}_		}__    };assert,the,given,model,attributes,do,not,exist;public,result,matcher,attribute,does,not,exist,final,string,names,return,result,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,exists,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeDoesNotExist(final String... names);1530174524;Assert the given model attributes do not exist.;public ResultMatcher attributeDoesNotExist(final String... names) {_        return result -> {_			ModelAndView mav = getModelAndView(result)__			for (String name : names) {_				assertTrue("Model attribute '" + name + "' exists", mav.getModel().get(name) == null)__			}_		}__    };assert,the,given,model,attributes,do,not,exist;public,result,matcher,attribute,does,not,exist,final,string,names,return,result,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,exists,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeDoesNotExist(final String... names);1530174524;Assert the given model attributes do not exist.;public ResultMatcher attributeDoesNotExist(final String... names) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			for (String name : names) {_				assertTrue("Model attribute '" + name + "' exists", mav.getModel().get(name) == null)__			}_		}__	};assert,the,given,model,attributes,do,not,exist;public,result,matcher,attribute,does,not,exist,final,string,names,return,result,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,exists,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeDoesNotExist(final String... names);1530174524;Assert the given model attributes do not exist.;public ResultMatcher attributeDoesNotExist(final String... names) {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			for (String name : names) {_				assertTrue("Model attribute '" + name + "' exists", mav.getModel().get(name) == null)__			}_		}__	};assert,the,given,model,attributes,do,not,exist;public,result,matcher,attribute,does,not,exist,final,string,names,return,result,model,and,view,mav,get,model,and,view,result,for,string,name,names,assert,true,model,attribute,name,exists,mav,get,model,get,name,null
ModelResultMatchers -> public ResultMatcher attributeHasNoErrors(final String... names);1383669853;Assert the given model attribute(s) do not have errors.;public ResultMatcher attributeHasNoErrors(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				for (String name : names) {_					BindingResult result = getBindingResult(mav, name)__					assertTrue("No errors for attribute [" + name + "]", !result.hasErrors())__				}_			}_		}__	};assert,the,given,model,attribute,s,do,not,have,errors;public,result,matcher,attribute,has,no,errors,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasNoErrors(final String... names);1405085769;Assert the given model attribute(s) do not have errors.;public ResultMatcher attributeHasNoErrors(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				for (String name : names) {_					BindingResult result = getBindingResult(mav, name)__					assertTrue("No errors for attribute [" + name + "]", !result.hasErrors())__				}_			}_		}__	};assert,the,given,model,attribute,s,do,not,have,errors;public,result,matcher,attribute,has,no,errors,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasNoErrors(final String... names);1405525484;Assert the given model attribute(s) do not have errors.;public ResultMatcher attributeHasNoErrors(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				for (String name : names) {_					BindingResult result = getBindingResult(mav, name)__					assertTrue("No errors for attribute [" + name + "]", !result.hasErrors())__				}_			}_		}__	};assert,the,given,model,attribute,s,do,not,have,errors;public,result,matcher,attribute,has,no,errors,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasNoErrors(final String... names);1413848647;Assert the given model attribute(s) do not have errors.;public ResultMatcher attributeHasNoErrors(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				for (String name : names) {_					BindingResult result = getBindingResult(mav, name)__					assertTrue("No errors for attribute [" + name + "]", !result.hasErrors())__				}_			}_		}__	};assert,the,given,model,attribute,s,do,not,have,errors;public,result,matcher,attribute,has,no,errors,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasNoErrors(final String... names);1427238287;Assert the given model attribute(s) do not have errors.;public ResultMatcher attributeHasNoErrors(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				for (String name : names) {_					BindingResult result = getBindingResult(mav, name)__					assertTrue("No errors for attribute [" + name + "]", !result.hasErrors())__				}_			}_		}__	};assert,the,given,model,attribute,s,do,not,have,errors;public,result,matcher,attribute,has,no,errors,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasNoErrors(final String... names);1437424890;Assert the given model attribute(s) do not have errors.;public ResultMatcher attributeHasNoErrors(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				for (String name : names) {_					BindingResult result = getBindingResult(mav, name)__					assertTrue("No errors for attribute [" + name + "]", !result.hasErrors())__				}_			}_		}__	};assert,the,given,model,attribute,s,do,not,have,errors;public,result,matcher,attribute,has,no,errors,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasNoErrors(final String... names);1493235170;Assert the given model attribute(s) do not have errors.;public ResultMatcher attributeHasNoErrors(final String... names) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			for (String name : names) {_				BindingResult result = getBindingResult(mav, name)__				assertTrue("Unexpected errors for attribute '" + name + "': " + result.getAllErrors(),_						!result.hasErrors())__			}_		}__	};assert,the,given,model,attribute,s,do,not,have,errors;public,result,matcher,attribute,has,no,errors,final,string,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,unexpected,errors,for,attribute,name,result,get,all,errors,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasNoErrors(final String... names);1496955179;Assert the given model attribute(s) do not have errors.;public ResultMatcher attributeHasNoErrors(final String... names) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			for (String name : names) {_				BindingResult result = getBindingResult(mav, name)__				assertTrue("Unexpected errors for attribute '" + name + "': " + result.getAllErrors(),_						!result.hasErrors())__			}_		}__	};assert,the,given,model,attribute,s,do,not,have,errors;public,result,matcher,attribute,has,no,errors,final,string,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,unexpected,errors,for,attribute,name,result,get,all,errors,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasNoErrors(final String... names);1518559218;Assert the given model attribute(s) do not have errors.;public ResultMatcher attributeHasNoErrors(final String... names) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			for (String name : names) {_				BindingResult result = getBindingResult(mav, name)__				assertTrue("Unexpected errors for attribute '" + name + "': " + result.getAllErrors(),_						!result.hasErrors())__			}_		}__	};assert,the,given,model,attribute,s,do,not,have,errors;public,result,matcher,attribute,has,no,errors,final,string,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,unexpected,errors,for,attribute,name,result,get,all,errors,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasNoErrors(final String... names);1530174524;Assert the given model attribute(s) do not have errors.;public ResultMatcher attributeHasNoErrors(final String... names) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			for (String name : names) {_				BindingResult result = getBindingResult(mav, name)__				assertTrue("Unexpected errors for attribute '" + name + "': " + result.getAllErrors(),_						!result.hasErrors())__			}_		}__	};assert,the,given,model,attribute,s,do,not,have,errors;public,result,matcher,attribute,has,no,errors,final,string,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,unexpected,errors,for,attribute,name,result,get,all,errors,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasNoErrors(final String... names);1530174524;Assert the given model attribute(s) do not have errors.;public ResultMatcher attributeHasNoErrors(final String... names) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			for (String name : names) {_				BindingResult result = getBindingResult(mav, name)__				assertTrue("Unexpected errors for attribute '" + name + "': " + result.getAllErrors(),_						!result.hasErrors())__			}_		}__	};assert,the,given,model,attribute,s,do,not,have,errors;public,result,matcher,attribute,has,no,errors,final,string,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,unexpected,errors,for,attribute,name,result,get,all,errors,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasNoErrors(final String... names);1530174524;Assert the given model attribute(s) do not have errors.;public ResultMatcher attributeHasNoErrors(final String... names) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			for (String name : names) {_				BindingResult result = getBindingResult(mav, name)__				assertTrue("Unexpected errors for attribute '" + name + "': " + result.getAllErrors(),_						!result.hasErrors())__			}_		}__	};assert,the,given,model,attribute,s,do,not,have,errors;public,result,matcher,attribute,has,no,errors,final,string,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,unexpected,errors,for,attribute,name,result,get,all,errors,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasErrors(final String... names);1383669853;Assert the given model attribute(s) have errors.;public ResultMatcher attributeHasErrors(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				for (String name : names) {_					BindingResult result = getBindingResult(mav, name)__					assertTrue("No errors for attribute [" + name + "]", result.hasErrors())__				}_			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,has,errors,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasErrors(final String... names);1405085769;Assert the given model attribute(s) have errors.;public ResultMatcher attributeHasErrors(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				for (String name : names) {_					BindingResult result = getBindingResult(mav, name)__					assertTrue("No errors for attribute [" + name + "]", result.hasErrors())__				}_			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,has,errors,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasErrors(final String... names);1405525484;Assert the given model attribute(s) have errors.;public ResultMatcher attributeHasErrors(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				for (String name : names) {_					BindingResult result = getBindingResult(mav, name)__					assertTrue("No errors for attribute [" + name + "]", result.hasErrors())__				}_			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,has,errors,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasErrors(final String... names);1413848647;Assert the given model attribute(s) have errors.;public ResultMatcher attributeHasErrors(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				for (String name : names) {_					BindingResult result = getBindingResult(mav, name)__					assertTrue("No errors for attribute [" + name + "]", result.hasErrors())__				}_			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,has,errors,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasErrors(final String... names);1427238287;Assert the given model attribute(s) have errors.;public ResultMatcher attributeHasErrors(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				for (String name : names) {_					BindingResult result = getBindingResult(mav, name)__					assertTrue("No errors for attribute [" + name + "]", result.hasErrors())__				}_			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,has,errors,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasErrors(final String... names);1437424890;Assert the given model attribute(s) have errors.;public ResultMatcher attributeHasErrors(final String... names) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult mvcResult) throws Exception {_				ModelAndView mav = getModelAndView(mvcResult)__				for (String name : names) {_					BindingResult result = getBindingResult(mav, name)__					assertTrue("No errors for attribute [" + name + "]", result.hasErrors())__				}_			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,has,errors,final,string,names,return,new,result,matcher,override,public,void,match,mvc,result,mvc,result,throws,exception,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasErrors(final String... names);1493235170;Assert the given model attribute(s) have errors.;public ResultMatcher attributeHasErrors(final String... names) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			for (String name : names) {_				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,has,errors,final,string,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasErrors(final String... names);1496955179;Assert the given model attribute(s) have errors.;public ResultMatcher attributeHasErrors(final String... names) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			for (String name : names) {_				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,has,errors,final,string,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasErrors(final String... names);1518559218;Assert the given model attribute(s) have errors.;public ResultMatcher attributeHasErrors(final String... names) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			for (String name : names) {_				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,has,errors,final,string,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasErrors(final String... names);1530174524;Assert the given model attribute(s) have errors.;public ResultMatcher attributeHasErrors(final String... names) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			for (String name : names) {_				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,has,errors,final,string,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasErrors(final String... names);1530174524;Assert the given model attribute(s) have errors.;public ResultMatcher attributeHasErrors(final String... names) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			for (String name : names) {_				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,has,errors,final,string,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public ResultMatcher attributeHasErrors(final String... names);1530174524;Assert the given model attribute(s) have errors.;public ResultMatcher attributeHasErrors(final String... names) {_		return mvcResult -> {_			ModelAndView mav = getModelAndView(mvcResult)__			for (String name : names) {_				BindingResult result = getBindingResult(mav, name)__				assertTrue("No errors for attribute '" + name + "'", result.hasErrors())__			}_		}__	};assert,the,given,model,attribute,s,have,errors;public,result,matcher,attribute,has,errors,final,string,names,return,mvc,result,model,and,view,mav,get,model,and,view,mvc,result,for,string,name,names,binding,result,result,get,binding,result,mav,name,assert,true,no,errors,for,attribute,name,result,has,errors
ModelResultMatchers -> public <T> ResultMatcher hasNoErrors();1383669853;Assert the model has no errors.;public <T> ResultMatcher hasNoErrors() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				for (Object value : mav.getModel().values()) {_					if (value instanceof Errors) {_						assertTrue("Unexpected binding/validation error(s) [" + value + "]",_								!((Errors) value).hasErrors())__					}_				}_			}_		}__	};assert,the,model,has,no,errors;public,t,result,matcher,has,no,errors,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,object,value,mav,get,model,values,if,value,instanceof,errors,assert,true,unexpected,binding,validation,error,s,value,errors,value,has,errors
ModelResultMatchers -> public <T> ResultMatcher hasNoErrors();1405085769;Assert the model has no errors.;public <T> ResultMatcher hasNoErrors() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				for (Object value : mav.getModel().values()) {_					if (value instanceof Errors) {_						assertTrue("Unexpected binding/validation error(s) [" + value + "]",_								!((Errors) value).hasErrors())__					}_				}_			}_		}__	};assert,the,model,has,no,errors;public,t,result,matcher,has,no,errors,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,object,value,mav,get,model,values,if,value,instanceof,errors,assert,true,unexpected,binding,validation,error,s,value,errors,value,has,errors
ModelResultMatchers -> public <T> ResultMatcher hasNoErrors();1405525484;Assert the model has no errors.;public <T> ResultMatcher hasNoErrors() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				for (Object value : mav.getModel().values()) {_					if (value instanceof Errors) {_						assertTrue("Unexpected binding/validation error(s) [" + value + "]",_								!((Errors) value).hasErrors())__					}_				}_			}_		}__	};assert,the,model,has,no,errors;public,t,result,matcher,has,no,errors,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,object,value,mav,get,model,values,if,value,instanceof,errors,assert,true,unexpected,binding,validation,error,s,value,errors,value,has,errors
ModelResultMatchers -> public <T> ResultMatcher hasNoErrors();1413848647;Assert the model has no errors.;public <T> ResultMatcher hasNoErrors() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				for (Object value : mav.getModel().values()) {_					if (value instanceof Errors) {_						assertTrue("Unexpected binding/validation error(s) [" + value + "]",_								!((Errors) value).hasErrors())__					}_				}_			}_		}__	};assert,the,model,has,no,errors;public,t,result,matcher,has,no,errors,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,object,value,mav,get,model,values,if,value,instanceof,errors,assert,true,unexpected,binding,validation,error,s,value,errors,value,has,errors
ModelResultMatchers -> public <T> ResultMatcher hasNoErrors();1427238287;Assert the model has no errors.;public <T> ResultMatcher hasNoErrors() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				for (Object value : mav.getModel().values()) {_					if (value instanceof Errors) {_						assertTrue("Unexpected binding/validation error(s) [" + value + "]",_								!((Errors) value).hasErrors())__					}_				}_			}_		}__	};assert,the,model,has,no,errors;public,t,result,matcher,has,no,errors,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,object,value,mav,get,model,values,if,value,instanceof,errors,assert,true,unexpected,binding,validation,error,s,value,errors,value,has,errors
ModelResultMatchers -> public <T> ResultMatcher hasNoErrors();1437424890;Assert the model has no errors.;public <T> ResultMatcher hasNoErrors() {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				ModelAndView mav = getModelAndView(result)__				for (Object value : mav.getModel().values()) {_					if (value instanceof Errors) {_						assertTrue("Unexpected binding/validation error(s) [" + value + "]",_								!((Errors) value).hasErrors())__					}_				}_			}_		}__	};assert,the,model,has,no,errors;public,t,result,matcher,has,no,errors,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,model,and,view,mav,get,model,and,view,result,for,object,value,mav,get,model,values,if,value,instanceof,errors,assert,true,unexpected,binding,validation,error,s,value,errors,value,has,errors
ModelResultMatchers -> public <T> ResultMatcher hasNoErrors();1493235170;Assert the model has no errors.;public <T> ResultMatcher hasNoErrors() {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			for (Object value : mav.getModel().values()) {_				if (value instanceof Errors) {_					assertTrue("Unexpected binding/validation errors: " + value, !((Errors) value).hasErrors())__				}_			}_		}__	};assert,the,model,has,no,errors;public,t,result,matcher,has,no,errors,return,result,model,and,view,mav,get,model,and,view,result,for,object,value,mav,get,model,values,if,value,instanceof,errors,assert,true,unexpected,binding,validation,errors,value,errors,value,has,errors
ModelResultMatchers -> public <T> ResultMatcher hasNoErrors();1496955179;Assert the model has no errors.;public <T> ResultMatcher hasNoErrors() {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			for (Object value : mav.getModel().values()) {_				if (value instanceof Errors) {_					assertTrue("Unexpected binding/validation errors: " + value, !((Errors) value).hasErrors())__				}_			}_		}__	};assert,the,model,has,no,errors;public,t,result,matcher,has,no,errors,return,result,model,and,view,mav,get,model,and,view,result,for,object,value,mav,get,model,values,if,value,instanceof,errors,assert,true,unexpected,binding,validation,errors,value,errors,value,has,errors
ModelResultMatchers -> public <T> ResultMatcher hasNoErrors();1518559218;Assert the model has no errors.;public <T> ResultMatcher hasNoErrors() {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			for (Object value : mav.getModel().values()) {_				if (value instanceof Errors) {_					assertTrue("Unexpected binding/validation errors: " + value, !((Errors) value).hasErrors())__				}_			}_		}__	};assert,the,model,has,no,errors;public,t,result,matcher,has,no,errors,return,result,model,and,view,mav,get,model,and,view,result,for,object,value,mav,get,model,values,if,value,instanceof,errors,assert,true,unexpected,binding,validation,errors,value,errors,value,has,errors
ModelResultMatchers -> public <T> ResultMatcher hasNoErrors();1530174524;Assert the model has no errors.;public <T> ResultMatcher hasNoErrors() {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			for (Object value : mav.getModel().values()) {_				if (value instanceof Errors) {_					assertTrue("Unexpected binding/validation errors: " + value, !((Errors) value).hasErrors())__				}_			}_		}__	};assert,the,model,has,no,errors;public,t,result,matcher,has,no,errors,return,result,model,and,view,mav,get,model,and,view,result,for,object,value,mav,get,model,values,if,value,instanceof,errors,assert,true,unexpected,binding,validation,errors,value,errors,value,has,errors
ModelResultMatchers -> public <T> ResultMatcher hasNoErrors();1530174524;Assert the model has no errors.;public <T> ResultMatcher hasNoErrors() {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			for (Object value : mav.getModel().values()) {_				if (value instanceof Errors) {_					assertTrue("Unexpected binding/validation errors: " + value, !((Errors) value).hasErrors())__				}_			}_		}__	};assert,the,model,has,no,errors;public,t,result,matcher,has,no,errors,return,result,model,and,view,mav,get,model,and,view,result,for,object,value,mav,get,model,values,if,value,instanceof,errors,assert,true,unexpected,binding,validation,errors,value,errors,value,has,errors
ModelResultMatchers -> public <T> ResultMatcher hasNoErrors();1530174524;Assert the model has no errors.;public <T> ResultMatcher hasNoErrors() {_		return result -> {_			ModelAndView mav = getModelAndView(result)__			for (Object value : mav.getModel().values()) {_				if (value instanceof Errors) {_					assertTrue("Unexpected binding/validation errors: " + value, !((Errors) value).hasErrors())__				}_			}_		}__	};assert,the,model,has,no,errors;public,t,result,matcher,has,no,errors,return,result,model,and,view,mav,get,model,and,view,result,for,object,value,mav,get,model,values,if,value,instanceof,errors,assert,true,unexpected,binding,validation,errors,value,errors,value,has,errors
