# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1349648958;Get the delegate {@code SmartContextLoader} that supports XML configuration files.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1354573750;Get the delegate {@code SmartContextLoader} that supports XML configuration files.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1356735495;Get the delegate {@code SmartContextLoader} that supports XML configuration files.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1357119239;Get the delegate {@code SmartContextLoader} that supports XML configuration files.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1368482696;Get the delegate {@code SmartContextLoader} that supports XML configuration files.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1392745364;Get the delegate {@code SmartContextLoader} that supports XML configuration files.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1405696918;Get the delegate {@code SmartContextLoader} that supports XML configuration files.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1406214559;Get the delegate {@code SmartContextLoader} that supports XML configuration_files and/or Groovy scripts.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files,and,or,groovy,scripts;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1406218418;Get the delegate {@code SmartContextLoader} that supports XML configuration_files and/or Groovy scripts.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files,and,or,groovy,scripts;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1407972191;Get the delegate {@code SmartContextLoader} that supports XML configuration_files and/or Groovy scripts.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files,and,or,groovy,scripts;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1413848647;Get the delegate {@code SmartContextLoader} that supports XML configuration_files and/or Groovy scripts.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files,and,or,groovy,scripts;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1457462209;Get the delegate {@code SmartContextLoader} that supports XML configuration_files and/or Groovy scripts.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files,and,or,groovy,scripts;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1457727806;Get the delegate {@code SmartContextLoader} that supports XML configuration_files and/or Groovy scripts.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files,and,or,groovy,scripts;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1468334463;Get the delegate {@code SmartContextLoader} that supports XML configuration_files and/or Groovy scripts.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files,and,or,groovy,scripts;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1468426720;Get the delegate {@code SmartContextLoader} that supports XML configuration_files and/or Groovy scripts.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files,and,or,groovy,scripts;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1496242568;Get the delegate {@code SmartContextLoader} that supports XML configuration_files and/or Groovy scripts.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files,and,or,groovy,scripts;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1516617801;Get the delegate {@code SmartContextLoader} that supports XML configuration_files and/or Groovy scripts.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files,and,or,groovy,scripts;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1533204420;Get the delegate {@code SmartContextLoader} that supports XML configuration_files and/or Groovy scripts.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files,and,or,groovy,scripts;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getXmlLoader()_;1533221753;Get the delegate {@code SmartContextLoader} that supports XML configuration_files and/or Groovy scripts.;protected abstract SmartContextLoader getXmlLoader()_;get,the,delegate,code,smart,context,loader,that,supports,xml,configuration,files,and,or,groovy,scripts;protected,abstract,smart,context,loader,get,xml,loader
AbstractDelegatingSmartContextLoader -> public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1349648958;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}.__<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@link #getXmlLoader() XML configuration files} and_{@link #getAnnotationConfigLoader() annotated classes}. Specifically, the_delegation algorithm is as follows:__<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>__@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_<code>null</code>, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {__		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_			"Cannot process locations AND classes for context "_					+ "configuration %s_ configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		} else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		} else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(getXmlLoader()), configAttributes))__				}_			}__			if (configAttributes.hasClasses()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))__			}__			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			if (!xmlLoaderDetectedDefaults && configAttributes.hasLocations()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))__			}__			_			_			if (!configAttributes.hasResources() && ObjectUtils.isEmpty(configAttributes.getInitializers())) {_				throw new IllegalStateException(String.format(_					"Neither %s nor %s was able to detect defaults, and no ApplicationContextInitializers "_							+ "were declared for context configuration %s", name(getXmlLoader()),_					name(getAnnotationConfigLoader()), configAttributes))__			}__			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes "_							+ "were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,link,get,xml,loader,xml,configuration,files,and,link,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,code,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,if,config,attributes,has,classes,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,xml,loader,detected,defaults,config,attributes,has,locations,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,resources,object,utils,is,empty,config,attributes,get,initializers,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,detect,defaults,and,no,application,context,initializers,were,declared,for,context,configuration,s,name,get,xml,loader,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
AbstractDelegatingSmartContextLoader -> public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1354573750;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}.__<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@link #getXmlLoader() XML configuration files} and_{@link #getAnnotationConfigLoader() annotated classes}. Specifically, the_delegation algorithm is as follows:__<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>__@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_<code>null</code>, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {__		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_			"Cannot process locations AND classes for context "_					+ "configuration %s_ configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		} else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		} else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(getXmlLoader()), configAttributes))__				}_			}__			if (configAttributes.hasClasses()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))__			}__			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			if (!xmlLoaderDetectedDefaults && configAttributes.hasLocations()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))__			}__			_			_			if (!configAttributes.hasResources() && ObjectUtils.isEmpty(configAttributes.getInitializers())) {_				throw new IllegalStateException(String.format(_					"Neither %s nor %s was able to detect defaults, and no ApplicationContextInitializers "_							+ "were declared for context configuration %s", name(getXmlLoader()),_					name(getAnnotationConfigLoader()), configAttributes))__			}__			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes "_							+ "were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,link,get,xml,loader,xml,configuration,files,and,link,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,code,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,if,config,attributes,has,classes,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,xml,loader,detected,defaults,config,attributes,has,locations,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,resources,object,utils,is,empty,config,attributes,get,initializers,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,detect,defaults,and,no,application,context,initializers,were,declared,for,context,configuration,s,name,get,xml,loader,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
AbstractDelegatingSmartContextLoader -> public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1357119239;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}.__<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@link #getXmlLoader() XML configuration files} and_{@link #getAnnotationConfigLoader() annotated classes}. Specifically, the_delegation algorithm is as follows:__<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>__@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_{@code null}, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {__		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_			"Cannot process locations AND classes for context "_					+ "configuration %s_ configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		} else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		} else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(getXmlLoader()), configAttributes))__				}_			}__			if (configAttributes.hasClasses()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))__			}__			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			if (!xmlLoaderDetectedDefaults && configAttributes.hasLocations()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))__			}__			_			_			if (!configAttributes.hasResources() && ObjectUtils.isEmpty(configAttributes.getInitializers())) {_				throw new IllegalStateException(String.format(_					"Neither %s nor %s was able to detect defaults, and no ApplicationContextInitializers "_							+ "were declared for context configuration %s", name(getXmlLoader()),_					name(getAnnotationConfigLoader()), configAttributes))__			}__			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes "_							+ "were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,link,get,xml,loader,xml,configuration,files,and,link,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,if,config,attributes,has,classes,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,xml,loader,detected,defaults,config,attributes,has,locations,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,resources,object,utils,is,empty,config,attributes,get,initializers,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,detect,defaults,and,no,application,context,initializers,were,declared,for,context,configuration,s,name,get,xml,loader,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1349648958;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1354573750;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1356735495;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1357119239;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1368482696;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1392745364;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1405696918;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1406214559;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1406218418;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1407972191;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1413848647;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1457462209;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1457727806;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1468334463;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1468426720;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1496242568;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1516617801;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1533204420;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> protected abstract SmartContextLoader getAnnotationConfigLoader()_;1533221753;Get the delegate {@code SmartContextLoader} that supports annotated classes.;protected abstract SmartContextLoader getAnnotationConfigLoader()_;get,the,delegate,code,smart,context,loader,that,supports,annotated,classes;protected,abstract,smart,context,loader,get,annotation,config,loader
AbstractDelegatingSmartContextLoader -> @Override 	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1356735495;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}.__<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@link #getXmlLoader() XML configuration files} and_{@link #getAnnotationConfigLoader() annotated classes}. Specifically, the_delegation algorithm is as follows:__<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>__@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is {@code null}_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;@Override_	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")___		List<SmartContextLoader> candidates = Arrays.asList(getXmlLoader(), getAnnotationConfigLoader())___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_			name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,link,get,xml,loader,xml,configuration,files,and,link,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,get,xml,loader,get,annotation,config,loader,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> @Override 	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1368482696;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}.__<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@link #getXmlLoader() XML configuration files} and_{@link #getAnnotationConfigLoader() annotated classes}. Specifically, the_delegation algorithm is as follows:__<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>__@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is {@code null}_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;@Override_	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")___		List<SmartContextLoader> candidates = Arrays.asList(getXmlLoader(), getAnnotationConfigLoader())___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_			name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,link,get,xml,loader,xml,configuration,files,and,link,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,get,xml,loader,get,annotation,config,loader,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> @Override 	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1392745364;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}.__<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@link #getXmlLoader() XML configuration files} and_{@link #getAnnotationConfigLoader() annotated classes}. Specifically, the_delegation algorithm is as follows:__<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>__@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is {@code null}_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;@Override_	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")___		List<SmartContextLoader> candidates = Arrays.asList(getXmlLoader(), getAnnotationConfigLoader())___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_			name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,link,get,xml,loader,xml,configuration,files,and,link,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,get,xml,loader,get,annotation,config,loader,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> @Override 	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1405696918;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@link #getXmlLoader() XML configuration files} and_{@link #getAnnotationConfigLoader() annotated classes}. Specifically, the_delegation algorithm is as follows:_<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>_@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is {@code null}_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;@Override_	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")__		List<SmartContextLoader> candidates = Arrays.asList(getXmlLoader(), getAnnotationConfigLoader())___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_			name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,link,get,xml,loader,xml,configuration,files,and,link,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,get,xml,loader,get,annotation,config,loader,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> @Override 	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1406214559;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>_@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is {@code null}_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;@Override_	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")__		List<SmartContextLoader> candidates = Arrays.asList(getXmlLoader(), getAnnotationConfigLoader())___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_			name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,get,xml,loader,get,annotation,config,loader,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> @Override 	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1406218418;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>_@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is {@code null}_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;@Override_	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")__		List<SmartContextLoader> candidates = Arrays.asList(getXmlLoader(), getAnnotationConfigLoader())___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_			name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,get,xml,loader,get,annotation,config,loader,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> @Override 	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1407972191;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>_@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is {@code null}_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;@Override_	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")__		List<SmartContextLoader> candidates = Arrays.asList(getXmlLoader(), getAnnotationConfigLoader())___		if (mergedConfig.hasLocations() && mergedConfig.hasClasses()) {_			throw new IllegalStateException(String.format(_				"Neither %s nor %s supports loading an ApplicationContext from %s: "_						+ "declare either 'locations' or 'classes' but not both.", name(getXmlLoader()),_				name(getAnnotationConfigLoader()), mergedConfig))__		}__		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		_		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_			name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,get,xml,loader,get,annotation,config,loader,if,merged,config,has,locations,merged,config,has,classes,throw,new,illegal,state,exception,string,format,neither,s,nor,s,supports,loading,an,application,context,from,s,declare,either,locations,or,classes,but,not,both,name,get,xml,loader,name,get,annotation,config,loader,merged,config,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> @Override 	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1413848647;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>_@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is {@code null}_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;@Override_	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")__		List<SmartContextLoader> candidates = Arrays.asList(getXmlLoader(), getAnnotationConfigLoader())___		if (mergedConfig.hasLocations() && mergedConfig.hasClasses()) {_			throw new IllegalStateException(String.format(_				"Neither %s nor %s supports loading an ApplicationContext from %s: "_						+ "declare either 'locations' or 'classes' but not both.", name(getXmlLoader()),_				name(getAnnotationConfigLoader()), mergedConfig))__		}__		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		_		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_			name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,get,xml,loader,get,annotation,config,loader,if,merged,config,has,locations,merged,config,has,classes,throw,new,illegal,state,exception,string,format,neither,s,nor,s,supports,loading,an,application,context,from,s,declare,either,locations,or,classes,but,not,both,name,get,xml,loader,name,get,annotation,config,loader,merged,config,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> @Override 	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1457462209;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>_@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is {@code null}_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;@Override_	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")__		List<SmartContextLoader> candidates = Arrays.asList(getXmlLoader(), getAnnotationConfigLoader())___		if (mergedConfig.hasLocations() && mergedConfig.hasClasses()) {_			throw new IllegalStateException(String.format(_				"Neither %s nor %s supports loading an ApplicationContext from %s: "_						+ "declare either 'locations' or 'classes' but not both.", name(getXmlLoader()),_				name(getAnnotationConfigLoader()), mergedConfig))__		}__		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		_		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_			name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,get,xml,loader,get,annotation,config,loader,if,merged,config,has,locations,merged,config,has,classes,throw,new,illegal,state,exception,string,format,neither,s,nor,s,supports,loading,an,application,context,from,s,declare,either,locations,or,classes,but,not,both,name,get,xml,loader,name,get,annotation,config,loader,merged,config,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> @Override 	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1457727806;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>_@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is {@code null}_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;@Override_	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")__		List<SmartContextLoader> candidates = Arrays.asList(getXmlLoader(), getAnnotationConfigLoader())___		if (mergedConfig.hasLocations() && mergedConfig.hasClasses()) {_			throw new IllegalStateException(String.format(_				"Neither %s nor %s supports loading an ApplicationContext from %s: "_						+ "declare either 'locations' or 'classes' but not both.", name(getXmlLoader()),_				name(getAnnotationConfigLoader()), mergedConfig))__		}__		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty() || !mergedConfig.getContextCustomizers().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		_		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_			name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,get,xml,loader,get,annotation,config,loader,if,merged,config,has,locations,merged,config,has,classes,throw,new,illegal,state,exception,string,format,neither,s,nor,s,supports,loading,an,application,context,from,s,declare,either,locations,or,classes,but,not,both,name,get,xml,loader,name,get,annotation,config,loader,merged,config,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,merged,config,get,context,customizers,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> @Override 	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1468334463;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>_@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is {@code null}_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;@Override_	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")__		List<SmartContextLoader> candidates = Arrays.asList(getXmlLoader(), getAnnotationConfigLoader())___		Assert.state(!(mergedConfig.hasLocations() && mergedConfig.hasClasses()), () -> String.format(_				"Neither %s nor %s supports loading an ApplicationContext from %s: "_						+ "declare either 'locations' or 'classes' but not both.", name(getXmlLoader()),_				name(getAnnotationConfigLoader()), mergedConfig))___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty() || !mergedConfig.getContextCustomizers().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		_		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_			name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,get,xml,loader,get,annotation,config,loader,assert,state,merged,config,has,locations,merged,config,has,classes,string,format,neither,s,nor,s,supports,loading,an,application,context,from,s,declare,either,locations,or,classes,but,not,both,name,get,xml,loader,name,get,annotation,config,loader,merged,config,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,merged,config,get,context,customizers,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> @Override 	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1468426720;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>_@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is {@code null}_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;@Override_	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")__		List<SmartContextLoader> candidates = Arrays.asList(getXmlLoader(), getAnnotationConfigLoader())___		Assert.state(!(mergedConfig.hasLocations() && mergedConfig.hasClasses()), () -> String.format(_				"Neither %s nor %s supports loading an ApplicationContext from %s: "_						+ "declare either 'locations' or 'classes' but not both.", name(getXmlLoader()),_				name(getAnnotationConfigLoader()), mergedConfig))___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty() || !mergedConfig.getContextCustomizers().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		_		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_			name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,get,xml,loader,get,annotation,config,loader,assert,state,merged,config,has,locations,merged,config,has,classes,string,format,neither,s,nor,s,supports,loading,an,application,context,from,s,declare,either,locations,or,classes,but,not,both,name,get,xml,loader,name,get,annotation,config,loader,merged,config,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,merged,config,get,context,customizers,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> @Override 	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1496242568;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>_@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is {@code null}_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;@Override_	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")__		List<SmartContextLoader> candidates = Arrays.asList(getXmlLoader(), getAnnotationConfigLoader())___		Assert.state(!(mergedConfig.hasLocations() && mergedConfig.hasClasses()), () -> String.format(_				"Neither %s nor %s supports loading an ApplicationContext from %s: "_						+ "declare either 'locations' or 'classes' but not both.", name(getXmlLoader()),_				name(getAnnotationConfigLoader()), mergedConfig))___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty() || !mergedConfig.getContextCustomizers().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		_		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_			name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,get,xml,loader,get,annotation,config,loader,assert,state,merged,config,has,locations,merged,config,has,classes,string,format,neither,s,nor,s,supports,loading,an,application,context,from,s,declare,either,locations,or,classes,but,not,both,name,get,xml,loader,name,get,annotation,config,loader,merged,config,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,merged,config,get,context,customizers,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> @Override 	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1516617801;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>_@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is {@code null}_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;@Override_	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")__		List<SmartContextLoader> candidates = Arrays.asList(getXmlLoader(), getAnnotationConfigLoader())___		Assert.state(!(mergedConfig.hasLocations() && mergedConfig.hasClasses()), () -> String.format(_				"Neither %s nor %s supports loading an ApplicationContext from %s: " +_				"declare either 'locations' or 'classes' but not both.", name(getXmlLoader()),_				name(getAnnotationConfigLoader()), mergedConfig))___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty() || !mergedConfig.getContextCustomizers().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		_		throw new IllegalStateException(String.format(_				"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_				name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,get,xml,loader,get,annotation,config,loader,assert,state,merged,config,has,locations,merged,config,has,classes,string,format,neither,s,nor,s,supports,loading,an,application,context,from,s,declare,either,locations,or,classes,but,not,both,name,get,xml,loader,name,get,annotation,config,loader,merged,config,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,merged,config,get,context,customizers,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> @Override 	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1533204420;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>_@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is {@code null}_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;@Override_	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")___		Assert.state(!(mergedConfig.hasLocations() && mergedConfig.hasClasses()), () -> String.format(_				"Neither %s nor %s supports loading an ApplicationContext from %s: " +_				"declare either 'locations' or 'classes' but not both.", name(getXmlLoader()),_				name(getAnnotationConfigLoader()), mergedConfig))___		SmartContextLoader[] candidates = {getXmlLoader(), getAnnotationConfigLoader()}___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty() || !mergedConfig.getContextCustomizers().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		_		throw new IllegalStateException(String.format(_				"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_				name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,assert,state,merged,config,has,locations,merged,config,has,classes,string,format,neither,s,nor,s,supports,loading,an,application,context,from,s,declare,either,locations,or,classes,but,not,both,name,get,xml,loader,name,get,annotation,config,loader,merged,config,smart,context,loader,candidates,get,xml,loader,get,annotation,config,loader,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,merged,config,get,context,customizers,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> @Override 	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1533221753;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>_@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is {@code null}_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;@Override_	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "MergedContextConfiguration must not be null")___		Assert.state(!(mergedConfig.hasLocations() && mergedConfig.hasClasses()), () -> String.format(_				"Neither %s nor %s supports loading an ApplicationContext from %s: " +_				"declare either 'locations' or 'classes' but not both.", name(getXmlLoader()),_				name(getAnnotationConfigLoader()), mergedConfig))___		SmartContextLoader[] candidates = {getXmlLoader(), getAnnotationConfigLoader()}__		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty() || !mergedConfig.getContextCustomizers().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		_		throw new IllegalStateException(String.format(_				"Neither %s nor %s was able to load an ApplicationContext from %s.",_				name(getXmlLoader()), name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;override,public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,context,configuration,must,not,be,null,assert,state,merged,config,has,locations,merged,config,has,classes,string,format,neither,s,nor,s,supports,loading,an,application,context,from,s,declare,either,locations,or,classes,but,not,both,name,get,xml,loader,name,get,annotation,config,loader,merged,config,smart,context,loader,candidates,get,xml,loader,get,annotation,config,loader,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,merged,config,get,context,customizers,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, @Nullable String... locations);1496242568;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;@Override_	public final String[] processLocations(Class<?> clazz, @Nullable String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;override,public,final,string,process,locations,class,clazz,nullable,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, @Nullable String... locations);1516617801;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException in this implementation;@Override_	public final String[] processLocations(Class<?> clazz, @Nullable String... locations) {_		throw new UnsupportedOperationException(_				"DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +_				"Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception,in,this,implementation;override,public,final,string,process,locations,class,clazz,nullable,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, @Nullable String... locations);1533204420;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException in this implementation;@Override_	public final String[] processLocations(Class<?> clazz, @Nullable String... locations) {_		throw new UnsupportedOperationException(_				"DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +_				"Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception,in,this,implementation;override,public,final,string,process,locations,class,clazz,nullable,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, @Nullable String... locations);1533221753;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException in this implementation;@Override_	public final String[] processLocations(Class<?> clazz, @Nullable String... locations) {_		throw new UnsupportedOperationException(_				"DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +_						"Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception,in,this,implementation;override,public,final,string,process,locations,class,clazz,nullable,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1356735495;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;override,public,final,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1368482696;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;override,public,final,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1392745364;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;override,public,final,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1405696918;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +_				"Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;override,public,final,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1406214559;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +_				"Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;override,public,final,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1406218418;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +_				"Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;override,public,final,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1407972191;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;override,public,final,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1413848647;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;override,public,final,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1457462209;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;override,public,final,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1457727806;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;override,public,final,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1468334463;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;override,public,final,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final String[] processLocations(Class<?> clazz, String... locations);1468426720;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;@Override_	public final String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;override,public,final,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> @Override 	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1356735495;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}.__<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@link #getXmlLoader() XML configuration files} and_{@link #getAnnotationConfigLoader() annotated classes}. Specifically, the_delegation algorithm is as follows:__<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>__@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_{@code null}, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;@Override_	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {__		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_			"Cannot process locations AND classes for context "_					+ "configuration %s_ configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		} else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		} else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(getXmlLoader()), configAttributes))__				}_			}__			if (configAttributes.hasClasses()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))__			}__			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			if (!xmlLoaderDetectedDefaults && configAttributes.hasLocations()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))__			}__			_			_			if (!configAttributes.hasResources() && ObjectUtils.isEmpty(configAttributes.getInitializers())) {_				throw new IllegalStateException(String.format(_					"Neither %s nor %s was able to detect defaults, and no ApplicationContextInitializers "_							+ "were declared for context configuration %s", name(getXmlLoader()),_					name(getAnnotationConfigLoader()), configAttributes))__			}__			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes "_							+ "were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,link,get,xml,loader,xml,configuration,files,and,link,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;override,public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,if,config,attributes,has,classes,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,xml,loader,detected,defaults,config,attributes,has,locations,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,resources,object,utils,is,empty,config,attributes,get,initializers,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,detect,defaults,and,no,application,context,initializers,were,declared,for,context,configuration,s,name,get,xml,loader,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
AbstractDelegatingSmartContextLoader -> @Override 	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1368482696;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}.__<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@link #getXmlLoader() XML configuration files} and_{@link #getAnnotationConfigLoader() annotated classes}. Specifically, the_delegation algorithm is as follows:__<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>__@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_{@code null}, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;@Override_	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {__		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_			"Cannot process locations AND classes for context "_					+ "configuration %s_ configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		} else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		} else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(getXmlLoader()), configAttributes))__				}_			}__			if (configAttributes.hasClasses()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))__			}__			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			if (!xmlLoaderDetectedDefaults && configAttributes.hasLocations()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))__			}__			_			_			if (!configAttributes.hasResources() && ObjectUtils.isEmpty(configAttributes.getInitializers())) {_				throw new IllegalStateException(String.format(_					"Neither %s nor %s was able to detect defaults, and no ApplicationContextInitializers "_							+ "were declared for context configuration %s", name(getXmlLoader()),_					name(getAnnotationConfigLoader()), configAttributes))__			}__			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes "_							+ "were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,link,get,xml,loader,xml,configuration,files,and,link,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;override,public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,if,config,attributes,has,classes,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,xml,loader,detected,defaults,config,attributes,has,locations,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,resources,object,utils,is,empty,config,attributes,get,initializers,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,detect,defaults,and,no,application,context,initializers,were,declared,for,context,configuration,s,name,get,xml,loader,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
AbstractDelegatingSmartContextLoader -> @Override 	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1392745364;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}.__<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@link #getXmlLoader() XML configuration files} and_{@link #getAnnotationConfigLoader() annotated classes}. Specifically, the_delegation algorithm is as follows:__<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>__@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_{@code null}, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;@Override_	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {__		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_			"Cannot process locations AND classes for context "_					+ "configuration %s_ configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		} else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		} else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(getXmlLoader()), configAttributes))__				}_			}__			if (configAttributes.hasClasses()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))__			}__			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			if (!xmlLoaderDetectedDefaults && configAttributes.hasLocations()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))__			}__			_			_			if (!configAttributes.hasResources() && ObjectUtils.isEmpty(configAttributes.getInitializers())) {_				throw new IllegalStateException(String.format(_					"Neither %s nor %s was able to detect defaults, and no ApplicationContextInitializers "_							+ "were declared for context configuration %s", name(getXmlLoader()),_					name(getAnnotationConfigLoader()), configAttributes))__			}__			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes "_							+ "were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,link,get,xml,loader,xml,configuration,files,and,link,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;override,public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,if,config,attributes,has,classes,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,xml,loader,detected,defaults,config,attributes,has,locations,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,resources,object,utils,is,empty,config,attributes,get,initializers,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,detect,defaults,and,no,application,context,initializers,were,declared,for,context,configuration,s,name,get,xml,loader,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
AbstractDelegatingSmartContextLoader -> @Override 	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1405696918;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@link #getXmlLoader() XML configuration files} and_{@link #getAnnotationConfigLoader() annotated classes}. Specifically, the_delegation algorithm is as follows:_<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>_@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_{@code null}, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;@Override_	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {__		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_				"Cannot process locations AND classes for context configuration %s_ configure one or the other, but not both.",_				configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		}_		else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		}_		else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(getXmlLoader()), configAttributes))__				}_			}__			if (configAttributes.hasClasses()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))__			}__			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			if (!xmlLoaderDetectedDefaults && configAttributes.hasLocations()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))__			}__			_			_			if (!configAttributes.hasResources() && ObjectUtils.isEmpty(configAttributes.getInitializers())) {_				throw new IllegalStateException(String.format(_					"Neither %s nor %s was able to detect defaults, and no ApplicationContextInitializers " +_							"were declared for context configuration %s", name(getXmlLoader()),_					name(getAnnotationConfigLoader()), configAttributes))__			}__			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes " +_							"were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,link,get,xml,loader,xml,configuration,files,and,link,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;override,public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,if,config,attributes,has,classes,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,xml,loader,detected,defaults,config,attributes,has,locations,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,resources,object,utils,is,empty,config,attributes,get,initializers,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,detect,defaults,and,no,application,context,initializers,were,declared,for,context,configuration,s,name,get,xml,loader,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
AbstractDelegatingSmartContextLoader -> @Override 	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1406214559;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>_@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_{@code null}, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;@Override_	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {__		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_				"Cannot process locations AND classes for context configuration %s_ configure one or the other, but not both.",_				configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		}_		else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		}_		else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(getXmlLoader()), configAttributes))__				}_			}__			if (configAttributes.hasClasses()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))__			}__			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			if (!xmlLoaderDetectedDefaults && configAttributes.hasLocations()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))__			}__			_			_			if (!configAttributes.hasResources() && ObjectUtils.isEmpty(configAttributes.getInitializers())) {_				throw new IllegalStateException(String.format(_					"Neither %s nor %s was able to detect defaults, and no ApplicationContextInitializers " +_							"were declared for context configuration %s", name(getXmlLoader()),_					name(getAnnotationConfigLoader()), configAttributes))__			}__			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes " +_							"were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;override,public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,if,config,attributes,has,classes,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,xml,loader,detected,defaults,config,attributes,has,locations,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,resources,object,utils,is,empty,config,attributes,get,initializers,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,detect,defaults,and,no,application,context,initializers,were,declared,for,context,configuration,s,name,get,xml,loader,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
AbstractDelegatingSmartContextLoader -> @Override 	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1406218418;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>_@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_{@code null}, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;@Override_	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {__		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_				"Cannot process locations AND classes for context configuration %s_ configure one or the other, but not both.",_				configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		}_		else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		}_		else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(getXmlLoader()), configAttributes))__				}_			}__			if (configAttributes.hasClasses()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))__			}__			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			if (!xmlLoaderDetectedDefaults && configAttributes.hasLocations()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))__			}__			_			_			if (!configAttributes.hasResources() && ObjectUtils.isEmpty(configAttributes.getInitializers())) {_				throw new IllegalStateException(String.format(_					"Neither %s nor %s was able to detect defaults, and no ApplicationContextInitializers " +_							"were declared for context configuration %s", name(getXmlLoader()),_					name(getAnnotationConfigLoader()), configAttributes))__			}__			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes " +_							"were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;override,public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,if,config,attributes,has,classes,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,xml,loader,detected,defaults,config,attributes,has,locations,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,resources,object,utils,is,empty,config,attributes,get,initializers,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,detect,defaults,and,no,application,context,initializers,were,declared,for,context,configuration,s,name,get,xml,loader,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
AbstractDelegatingSmartContextLoader -> @Override 	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1407972191;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>_@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_{@code null}, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;@Override_	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {_		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_			"Cannot process locations AND classes for context configuration %s: "_					+ "configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		}_		else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		}_		else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(getXmlLoader()), configAttributes))__				}_			}__			if (configAttributes.hasClasses()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))__			}__			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			if (!xmlLoaderDetectedDefaults && configAttributes.hasLocations()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))__			}__			_			_			if (!configAttributes.hasResources() && ObjectUtils.isEmpty(configAttributes.getInitializers())) {_				throw new IllegalStateException(String.format(_					"Neither %s nor %s was able to detect defaults, and no ApplicationContextInitializers "_							+ "were declared for context configuration %s", name(getXmlLoader()),_					name(getAnnotationConfigLoader()), configAttributes))__			}__			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes "_							+ "were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;override,public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,if,config,attributes,has,classes,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,xml,loader,detected,defaults,config,attributes,has,locations,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,resources,object,utils,is,empty,config,attributes,get,initializers,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,detect,defaults,and,no,application,context,initializers,were,declared,for,context,configuration,s,name,get,xml,loader,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
AbstractDelegatingSmartContextLoader -> @Override 	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1413848647;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>_@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_{@code null}, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;@Override_	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {_		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_			"Cannot process locations AND classes for context configuration %s: "_					+ "configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		}_		else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		}_		else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(getXmlLoader()), configAttributes))__				}_			}__			if (configAttributes.hasClasses()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))__			}__			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			if (!xmlLoaderDetectedDefaults && configAttributes.hasLocations()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))__			}__			_			_			if (!configAttributes.hasResources() && ObjectUtils.isEmpty(configAttributes.getInitializers())) {_				throw new IllegalStateException(String.format(_					"Neither %s nor %s was able to detect defaults, and no ApplicationContextInitializers "_							+ "were declared for context configuration %s", name(getXmlLoader()),_					name(getAnnotationConfigLoader()), configAttributes))__			}__			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes "_							+ "were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;override,public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,if,config,attributes,has,classes,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,xml,loader,detected,defaults,config,attributes,has,locations,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,resources,object,utils,is,empty,config,attributes,get,initializers,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,detect,defaults,and,no,application,context,initializers,were,declared,for,context,configuration,s,name,get,xml,loader,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
AbstractDelegatingSmartContextLoader -> @Override 	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1457462209;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>_@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_{@code null}, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;@Override_	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {_		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_			"Cannot process locations AND classes for context configuration %s: "_					+ "configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		}_		else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		}_		else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(getXmlLoader()), configAttributes))__				}_			}__			if (configAttributes.hasClasses()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))__			}__			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			if (!xmlLoaderDetectedDefaults && configAttributes.hasLocations()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))__			}__			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes "_							+ "were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;override,public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,if,config,attributes,has,classes,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,xml,loader,detected,defaults,config,attributes,has,locations,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
AbstractDelegatingSmartContextLoader -> @Override 	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1457727806;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>_@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_{@code null}, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;@Override_	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {_		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_			"Cannot process locations AND classes for context configuration %s: "_					+ "configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		}_		else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		}_		else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(getXmlLoader()), configAttributes))__				}_			}__			if (configAttributes.hasClasses()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))__			}__			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			if (!xmlLoaderDetectedDefaults && configAttributes.hasLocations()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))__			}__			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes "_							+ "were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;override,public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,if,config,attributes,has,classes,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,xml,loader,detected,defaults,config,attributes,has,locations,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
AbstractDelegatingSmartContextLoader -> @Override 	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1468334463;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>_@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_{@code null}, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;@Override_	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {_		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_			"Cannot process locations AND classes for context configuration %s: "_					+ "configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		}_		else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		}_		else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(getXmlLoader()), configAttributes))__				}_			}__			Assert.state(!configAttributes.hasClasses(), () -> String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))___			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			Assert.state(xmlLoaderDetectedDefaults || !configAttributes.hasLocations(), () -> String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))___			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes "_							+ "were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;override,public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,assert,state,config,attributes,has,classes,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,assert,state,xml,loader,detected,defaults,config,attributes,has,locations,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
AbstractDelegatingSmartContextLoader -> @Override 	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1468426720;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>_@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_{@code null}, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;@Override_	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {_		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), () -> String.format(_			"Cannot process locations AND classes for context configuration %s: "_					+ "configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		}_		else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		}_		else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(getXmlLoader()), configAttributes))__				}_			}__			Assert.state(!configAttributes.hasClasses(), () -> String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))___			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			Assert.state(xmlLoaderDetectedDefaults || !configAttributes.hasLocations(), () -> String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))___			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes "_							+ "were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;override,public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,assert,state,config,attributes,has,classes,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,assert,state,xml,loader,detected,defaults,config,attributes,has,locations,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
AbstractDelegatingSmartContextLoader -> @Override 	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1496242568;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>_@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_{@code null}, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;@Override_	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {_		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), () -> String.format(_			"Cannot process locations AND classes for context configuration %s: "_					+ "configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		}_		else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		}_		else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(getXmlLoader()), configAttributes))__				}_			}__			Assert.state(!configAttributes.hasClasses(), () -> String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))___			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			Assert.state(xmlLoaderDetectedDefaults || !configAttributes.hasLocations(), () -> String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))___			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes "_							+ "were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;override,public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,assert,state,config,attributes,has,classes,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,assert,state,xml,loader,detected,defaults,config,attributes,has,locations,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
AbstractDelegatingSmartContextLoader -> @Override 	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1516617801;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>_@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_{@code null}, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;@Override_	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {_		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()),_				() -> String.format("Cannot process locations AND classes for context configuration %s: " +_						"configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		}_		else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		}_		else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_							name(getXmlLoader()), configAttributes))__				}_			}__			Assert.state(!configAttributes.hasClasses(), () -> String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))___			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default configuration classes for context configuration %s.",_							name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			Assert.state(xmlLoaderDetectedDefaults || !configAttributes.hasLocations(), () -> String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))___			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String msg = String.format(_						"Configuration error: both default locations AND default configuration classes " +_						"were detected for context configuration %s_ configure one or the other, but not both.",_						configAttributes)__				logger.error(msg)__				throw new IllegalStateException(msg)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;override,public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,assert,state,config,attributes,has,classes,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,assert,state,xml,loader,detected,defaults,config,attributes,has,locations,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,msg,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,msg,throw,new,illegal,state,exception,msg
AbstractDelegatingSmartContextLoader -> @Override 	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1533204420;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>_@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_{@code null}, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;@Override_	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {_		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()),_				() -> String.format("Cannot process locations AND classes for context configuration %s: " +_						"configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		}_		else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		}_		else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_							name(getXmlLoader()), configAttributes))__				}_			}__			Assert.state(!configAttributes.hasClasses(), () -> String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))___			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default configuration classes for context configuration %s.",_							name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			Assert.state(xmlLoaderDetectedDefaults || !configAttributes.hasLocations(), () -> String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))___			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String msg = String.format(_						"Configuration error: both default locations AND default configuration classes " +_						"were detected for context configuration %s_ configure one or the other, but not both.",_						configAttributes)__				logger.error(msg)__				throw new IllegalStateException(msg)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;override,public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,assert,state,config,attributes,has,classes,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,assert,state,xml,loader,detected,defaults,config,attributes,has,locations,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,msg,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,msg,throw,new,illegal,state,exception,msg
AbstractDelegatingSmartContextLoader -> @Override 	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1533221753;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}._<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@linkplain #getXmlLoader() XML configuration files and_Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}._Specifically, the delegation algorithm is as follows:_<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, the XML-based loader will be allowed to process_the configuration in order to detect default resource locations. If_the XML-based loader detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, the annotation-based loader will be allowed to_process the configuration in order to detect default configuration classes._If the annotation-based loader detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>_@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_{@code null}, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if the XML-based loader detects default_configuration classes_ if the annotation-based loader detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;@Override_	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {_		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()),_				() -> String.format("Cannot process locations AND classes for context configuration %s: " +_						"configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(getXmlLoader(), configAttributes)__		}_		else if (configAttributes.hasClasses()) {_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)__		}_		else {_			__			_			delegateProcessing(getXmlLoader(), configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_							name(getXmlLoader()), configAttributes))__				}_			}__			Assert.state(!configAttributes.hasClasses(), () -> String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(getXmlLoader()), configAttributes))___			_			delegateProcessing(getAnnotationConfigLoader(), configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default configuration classes for context configuration %s.",_							name(getAnnotationConfigLoader()), configAttributes))__				}_			}__			Assert.state(xmlLoaderDetectedDefaults || !configAttributes.hasLocations(), () -> String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(getAnnotationConfigLoader()), configAttributes))___			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String msg = String.format(_						"Configuration error: both default locations AND default configuration classes " +_						"were detected for context configuration %s_ configure one or the other, but not both.",_						configAttributes)__				logger.error(msg)__				throw new IllegalStateException(msg)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,linkplain,get,xml,loader,xml,configuration,files,and,groovy,scripts,and,linkplain,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,the,xml,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,the,xml,based,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,the,annotation,based,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,the,annotation,based,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,the,xml,based,loader,detects,default,configuration,classes,if,the,annotation,based,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;override,public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,get,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,get,annotation,config,loader,config,attributes,else,delegate,processing,get,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,get,xml,loader,config,attributes,assert,state,config,attributes,has,classes,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,get,xml,loader,config,attributes,delegate,processing,get,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,assert,state,xml,loader,detected,defaults,config,attributes,has,locations,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,get,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,msg,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,msg,throw,new,illegal,state,exception,msg
AbstractDelegatingSmartContextLoader -> @Override 	public final ApplicationContext loadContext(String... locations) throws Exception;1356735495;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;@Override_	public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;override,public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final ApplicationContext loadContext(String... locations) throws Exception;1368482696;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;@Override_	public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;override,public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final ApplicationContext loadContext(String... locations) throws Exception;1392745364;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;@Override_	public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;override,public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final ApplicationContext loadContext(String... locations) throws Exception;1405696918;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;@Override_	public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +_				"Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;override,public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final ApplicationContext loadContext(String... locations) throws Exception;1406214559;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;@Override_	public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +_				"Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;override,public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final ApplicationContext loadContext(String... locations) throws Exception;1406218418;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;@Override_	public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +_				"Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;override,public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final ApplicationContext loadContext(String... locations) throws Exception;1407972191;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;@Override_	public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;override,public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final ApplicationContext loadContext(String... locations) throws Exception;1413848647;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;@Override_	public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;override,public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final ApplicationContext loadContext(String... locations) throws Exception;1457462209;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;@Override_	public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;override,public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final ApplicationContext loadContext(String... locations) throws Exception;1457727806;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;@Override_	public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;override,public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final ApplicationContext loadContext(String... locations) throws Exception;1468334463;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;@Override_	public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;override,public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final ApplicationContext loadContext(String... locations) throws Exception;1468426720;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;@Override_	public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;override,public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final ApplicationContext loadContext(String... locations) throws Exception;1496242568;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;@Override_	public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;override,public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final ApplicationContext loadContext(String... locations) throws Exception;1516617801;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException in this implementation;@Override_	public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException(_				"DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +_				"Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception,in,this,implementation;override,public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final ApplicationContext loadContext(String... locations) throws Exception;1533204420;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException in this implementation;@Override_	public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException(_				"DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +_				"Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception,in,this,implementation;override,public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> @Override 	public final ApplicationContext loadContext(String... locations) throws Exception;1533221753;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException in this implementation;@Override_	public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException(_				"DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +_						"Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception,in,this,implementation;override,public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> public final ApplicationContext loadContext(String... locations) throws Exception;1349648958;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> public final ApplicationContext loadContext(String... locations) throws Exception;1354573750;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> public final ApplicationContext loadContext(String... locations) throws Exception;1357119239;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;public final ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call loadContext(MergedContextConfiguration) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;public,final,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
AbstractDelegatingSmartContextLoader -> public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1349648958;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}.__<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@link #getXmlLoader() XML configuration files} and_{@link #getAnnotationConfigLoader() annotated classes}. Specifically, the_delegation algorithm is as follows:__<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>__@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is <code>null</code>_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")___		List<SmartContextLoader> candidates = Arrays.asList(getXmlLoader(), getAnnotationConfigLoader())___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_			name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,link,get,xml,loader,xml,configuration,files,and,link,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,code,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,get,xml,loader,get,annotation,config,loader,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1354573750;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}.__<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@link #getXmlLoader() XML configuration files} and_{@link #getAnnotationConfigLoader() annotated classes}. Specifically, the_delegation algorithm is as follows:__<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>__@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is <code>null</code>_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")___		List<SmartContextLoader> candidates = Arrays.asList(getXmlLoader(), getAnnotationConfigLoader())___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_			name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,link,get,xml,loader,xml,configuration,files,and,link,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,code,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,get,xml,loader,get,annotation,config,loader,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1357119239;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}.__<p>Delegation is based on explicit knowledge of the implementations of the_default loaders for {@link #getXmlLoader() XML configuration files} and_{@link #getAnnotationConfigLoader() annotated classes}. Specifically, the_delegation algorithm is as follows:__<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_the XML-based loader will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_the annotation-based loader will load the {@code ApplicationContext}.</li>_</ul>__@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is {@code null}_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")___		List<SmartContextLoader> candidates = Arrays.asList(getXmlLoader(), getAnnotationConfigLoader())___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty()) {_			return delegateLoading(getAnnotationConfigLoader(), mergedConfig)__		}__		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(getXmlLoader()),_			name(getAnnotationConfigLoader()), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,the,default,loaders,for,link,get,xml,loader,xml,configuration,files,and,link,get,annotation,config,loader,annotated,classes,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,the,xml,based,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,the,annotation,based,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,get,xml,loader,get,annotation,config,loader,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,return,delegate,loading,get,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,get,xml,loader,name,get,annotation,config,loader,merged,config
AbstractDelegatingSmartContextLoader -> public final String[] processLocations(Class<?> clazz, String... locations);1349648958;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;public final String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;public,final,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> public final String[] processLocations(Class<?> clazz, String... locations);1354573750;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;public final String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;public,final,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
AbstractDelegatingSmartContextLoader -> public final String[] processLocations(Class<?> clazz, String... locations);1357119239;{@code AbstractDelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;public final String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoaders do not support the ContextLoader SPI. "_				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,abstract,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;public,final,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loaders,do,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
