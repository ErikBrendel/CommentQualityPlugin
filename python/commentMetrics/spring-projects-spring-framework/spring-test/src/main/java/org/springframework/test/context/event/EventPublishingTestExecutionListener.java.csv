commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Returns {@link Ordered#HIGHEST_PRECEDENCE}.  */ ;/**  * Returns {@link Ordered#HIGHEST_PRECEDENCE}.  */ @Override public int getOrder() {     return Ordered.HIGHEST_PRECEDENCE. }
true;public;1;4;/**  * Publishes a {@link BeforeTestClassEvent} to the {@code ApplicationContext}  * for the supplied {@link TestContext}.  */ ;/**  * Publishes a {@link BeforeTestClassEvent} to the {@code ApplicationContext}  * for the supplied {@link TestContext}.  */ @Override public void beforeTestClass(TestContext testContext) {     testContext.getApplicationContext().publishEvent(new BeforeTestClassEvent(testContext)). }
true;public;1;4;/**  * Publishes a {@link PrepareTestInstanceEvent} to the {@code ApplicationContext}  * for the supplied {@link TestContext}.  */ ;/**  * Publishes a {@link PrepareTestInstanceEvent} to the {@code ApplicationContext}  * for the supplied {@link TestContext}.  */ @Override public void prepareTestInstance(TestContext testContext) {     testContext.getApplicationContext().publishEvent(new PrepareTestInstanceEvent(testContext)). }
true;public;1;4;/**  * Publishes a {@link BeforeTestMethodEvent} to the {@code ApplicationContext}  * for the supplied {@link TestContext}.  */ ;/**  * Publishes a {@link BeforeTestMethodEvent} to the {@code ApplicationContext}  * for the supplied {@link TestContext}.  */ @Override public void beforeTestMethod(TestContext testContext) {     testContext.getApplicationContext().publishEvent(new BeforeTestMethodEvent(testContext)). }
true;public;1;4;/**  * Publishes a {@link BeforeTestExecutionEvent} to the {@code ApplicationContext}  * for the supplied {@link TestContext}.  */ ;/**  * Publishes a {@link BeforeTestExecutionEvent} to the {@code ApplicationContext}  * for the supplied {@link TestContext}.  */ @Override public void beforeTestExecution(TestContext testContext) {     testContext.getApplicationContext().publishEvent(new BeforeTestExecutionEvent(testContext)). }
true;public;1;4;/**  * Publishes an {@link AfterTestExecutionEvent} to the {@code ApplicationContext}  * for the supplied {@link TestContext}.  */ ;/**  * Publishes an {@link AfterTestExecutionEvent} to the {@code ApplicationContext}  * for the supplied {@link TestContext}.  */ @Override public void afterTestExecution(TestContext testContext) {     testContext.getApplicationContext().publishEvent(new AfterTestExecutionEvent(testContext)). }
true;public;1;4;/**  * Publishes an {@link AfterTestMethodEvent} to the {@code ApplicationContext}  * for the supplied {@link TestContext}.  */ ;/**  * Publishes an {@link AfterTestMethodEvent} to the {@code ApplicationContext}  * for the supplied {@link TestContext}.  */ @Override public void afterTestMethod(TestContext testContext) {     testContext.getApplicationContext().publishEvent(new AfterTestMethodEvent(testContext)). }
true;public;1;4;/**  * Publishes an {@link AfterTestClassEvent} to the {@code ApplicationContext}  * for the supplied {@link TestContext}.  */ ;/**  * Publishes an {@link AfterTestClassEvent} to the {@code ApplicationContext}  * for the supplied {@link TestContext}.  */ @Override public void afterTestClass(TestContext testContext) {     testContext.getApplicationContext().publishEvent(new AfterTestClassEvent(testContext)). }
