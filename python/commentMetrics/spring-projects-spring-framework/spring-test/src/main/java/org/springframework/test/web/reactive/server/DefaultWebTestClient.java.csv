commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private Duration getTimeout() {     return this.timeout. }
false;public;0;4;;@Override public RequestHeadersUriSpec<?> get() {     return methodInternal(HttpMethod.GET). }
false;public;0;4;;@Override public RequestHeadersUriSpec<?> head() {     return methodInternal(HttpMethod.HEAD). }
false;public;0;4;;@Override public RequestBodyUriSpec post() {     return methodInternal(HttpMethod.POST). }
false;public;0;4;;@Override public RequestBodyUriSpec put() {     return methodInternal(HttpMethod.PUT). }
false;public;0;4;;@Override public RequestBodyUriSpec patch() {     return methodInternal(HttpMethod.PATCH). }
false;public;0;4;;@Override public RequestHeadersUriSpec<?> delete() {     return methodInternal(HttpMethod.DELETE). }
false;public;0;4;;@Override public RequestHeadersUriSpec<?> options() {     return methodInternal(HttpMethod.OPTIONS). }
false;public;1;4;;@Override public RequestBodyUriSpec method(HttpMethod method) {     return methodInternal(method). }
false;private;1;3;;private RequestBodyUriSpec methodInternal(HttpMethod method) {     return new DefaultRequestBodyUriSpec(this.webClient.method(method)). }
false;public;0;4;;@Override public Builder mutate() {     return new DefaultWebTestClientBuilder(this.builder). }
false;public;1;4;;@Override public WebTestClient mutateWith(WebTestClientConfigurer configurer) {     return mutate().apply(configurer).build(). }
false;public;2;6;;@Override public RequestBodySpec uri(String uriTemplate, Object... uriVariables) {     this.bodySpec.uri(uriTemplate, uriVariables).     this.uriTemplate = uriTemplate.     return this. }
false;public;2;6;;@Override public RequestBodySpec uri(String uriTemplate, Map<String, ?> uriVariables) {     this.bodySpec.uri(uriTemplate, uriVariables).     this.uriTemplate = uriTemplate.     return this. }
false;public;1;6;;@Override public RequestBodySpec uri(Function<UriBuilder, URI> uriFunction) {     this.bodySpec.uri(uriFunction).     this.uriTemplate = null.     return this. }
false;public;1;6;;@Override public RequestBodySpec uri(URI uri) {     this.bodySpec.uri(uri).     this.uriTemplate = null.     return this. }
false;public;2;5;;@Override public RequestBodySpec header(String headerName, String... headerValues) {     this.bodySpec.header(headerName, headerValues).     return this. }
false;public;1;5;;@Override public RequestBodySpec headers(Consumer<HttpHeaders> headersConsumer) {     this.bodySpec.headers(headersConsumer).     return this. }
false;public;2;5;;@Override public RequestBodySpec attribute(String name, Object value) {     this.bodySpec.attribute(name, value).     return this. }
false;public;1;6;;@Override public RequestBodySpec attributes(Consumer<Map<String, Object>> attributesConsumer) {     this.bodySpec.attributes(attributesConsumer).     return this. }
false;public;1;5;;@Override public RequestBodySpec accept(MediaType... acceptableMediaTypes) {     this.bodySpec.accept(acceptableMediaTypes).     return this. }
false;public;1;5;;@Override public RequestBodySpec acceptCharset(Charset... acceptableCharsets) {     this.bodySpec.acceptCharset(acceptableCharsets).     return this. }
false;public;1;5;;@Override public RequestBodySpec contentType(MediaType contentType) {     this.bodySpec.contentType(contentType).     return this. }
false;public;1;5;;@Override public RequestBodySpec contentLength(long contentLength) {     this.bodySpec.contentLength(contentLength).     return this. }
false;public;2;5;;@Override public RequestBodySpec cookie(String name, String value) {     this.bodySpec.cookie(name, value).     return this. }
false;public;1;6;;@Override public RequestBodySpec cookies(Consumer<MultiValueMap<String, String>> cookiesConsumer) {     this.bodySpec.cookies(cookiesConsumer).     return this. }
false;public;1;5;;@Override public RequestBodySpec ifModifiedSince(ZonedDateTime ifModifiedSince) {     this.bodySpec.ifModifiedSince(ifModifiedSince).     return this. }
false;public;1;5;;@Override public RequestBodySpec ifNoneMatch(String... ifNoneMatches) {     this.bodySpec.ifNoneMatch(ifNoneMatches).     return this. }
false;public;1;5;;@Override public RequestHeadersSpec<?> body(BodyInserter<?, ? super ClientHttpRequest> inserter) {     this.bodySpec.body(inserter).     return this. }
false;public;2;5;;@Override public <T, S extends Publisher<T>> RequestHeadersSpec<?> body(S publisher, Class<T> elementClass) {     this.bodySpec.body(publisher, elementClass).     return this. }
false;public;1;5;;@Override public RequestHeadersSpec<?> syncBody(Object body) {     this.bodySpec.syncBody(body).     return this. }
false;public;0;7;;@Override public ResponseSpec exchange() {     ClientResponse clientResponse = this.bodySpec.exchange().block(getTimeout()).     Assert.state(clientResponse != null, "No ClientResponse").     WiretapConnector.Info info = wiretapConnector.claimRequest(this.requestId).     return new DefaultResponseSpec(info, clientResponse, this.uriTemplate, getTimeout()). }
false;public;0;4;;@Override public StatusAssertions expectStatus() {     return new StatusAssertions(this.exchangeResult, this). }
false;public;0;4;;@Override public HeaderAssertions expectHeader() {     return new HeaderAssertions(this.exchangeResult, this). }
false;public;1;6;;@Override public <B> BodySpec<B, ?> expectBody(Class<B> bodyType) {     B body = this.response.bodyToMono(bodyType).block(this.timeout).     EntityExchangeResult<B> entityResult = new EntityExchangeResult<>(this.exchangeResult, body).     return new DefaultBodySpec<>(entityResult). }
false;public;1;6;;@Override public <B> BodySpec<B, ?> expectBody(ParameterizedTypeReference<B> bodyType) {     B body = this.response.bodyToMono(bodyType).block(this.timeout).     EntityExchangeResult<B> entityResult = new EntityExchangeResult<>(this.exchangeResult, body).     return new DefaultBodySpec<>(entityResult). }
false;public;1;4;;@Override public <E> ListBodySpec<E> expectBodyList(Class<E> elementType) {     return getListBodySpec(this.response.bodyToFlux(elementType)). }
false;public;1;5;;@Override public <E> ListBodySpec<E> expectBodyList(ParameterizedTypeReference<E> elementType) {     Flux<E> flux = this.response.bodyToFlux(elementType).     return getListBodySpec(flux). }
false;private;1;5;;private <E> ListBodySpec<E> getListBodySpec(Flux<E> flux) {     List<E> body = flux.collectList().block(this.timeout).     EntityExchangeResult<List<E>> entityResult = new EntityExchangeResult<>(this.exchangeResult, body).     return new DefaultListBodySpec<>(entityResult). }
false;public;0;7;;@Override public BodyContentSpec expectBody() {     ByteArrayResource resource = this.response.bodyToMono(ByteArrayResource.class).block(this.timeout).     byte[] body = (resource != null ? resource.getByteArray() : null).     EntityExchangeResult<byte[]> entityResult = new EntityExchangeResult<>(this.exchangeResult, body).     return new DefaultBodyContentSpec(entityResult). }
false;public;1;5;;@Override public <T> FluxExchangeResult<T> returnResult(Class<T> elementType) {     Flux<T> body = this.response.bodyToFlux(elementType).     return new FluxExchangeResult<>(this.exchangeResult, body). }
false;public;1;5;;@Override public <T> FluxExchangeResult<T> returnResult(ParameterizedTypeReference<T> elementType) {     Flux<T> body = this.response.bodyToFlux(elementType).     return new FluxExchangeResult<>(this.exchangeResult, body). }
false;protected;0;3;;protected EntityExchangeResult<B> getResult() {     return this.result. }
false;public;1;6;;@Override public <T extends S> T isEqualTo(B expected) {     this.result.assertWithDiagnostics(() -> AssertionErrors.assertEquals("Response body", expected, this.result.getResponseBody())).     return self(). }
false;public;1;5;;@Override public <T extends S> T value(Matcher<B> matcher) {     this.result.assertWithDiagnostics(() -> MatcherAssert.assertThat(this.result.getResponseBody(), matcher)).     return self(). }
false;public;2;8;;@Override public <T extends S, R> T value(Function<B, R> bodyMapper, Matcher<R> matcher) {     this.result.assertWithDiagnostics(() -> {         B body = this.result.getResponseBody().         MatcherAssert.assertThat(bodyMapper.apply(body), matcher).     }).     return self(). }
false;public;1;5;;@Override public <T extends S> T value(Consumer<B> consumer) {     this.result.assertWithDiagnostics(() -> consumer.accept(this.result.getResponseBody())).     return self(). }
false;public;1;5;;@Override public <T extends S> T consumeWith(Consumer<EntityExchangeResult<B>> consumer) {     this.result.assertWithDiagnostics(() -> consumer.accept(this.result)).     return self(). }
false;private;0;4;;@SuppressWarnings("unchecked") private <T extends S> T self() {     return (T) this. }
false;public;0;4;;@Override public EntityExchangeResult<B> returnResult() {     return this.result. }
false;public;1;8;;@Override public ListBodySpec<E> hasSize(int size) {     List<E> actual = getResult().getResponseBody().     String message = "Response body does not contain " + size + " elements".     getResult().assertWithDiagnostics(() -> AssertionErrors.assertEquals(message, size, (actual != null ? actual.size() : 0))).     return this. }
false;public;1;10;;@Override @SuppressWarnings("unchecked") public ListBodySpec<E> contains(E... elements) {     List<E> expected = Arrays.asList(elements).     List<E> actual = getResult().getResponseBody().     String message = "Response body does not contain " + expected.     getResult().assertWithDiagnostics(() -> AssertionErrors.assertTrue(message, (actual != null && actual.containsAll(expected)))).     return this. }
false;public;1;10;;@Override @SuppressWarnings("unchecked") public ListBodySpec<E> doesNotContain(E... elements) {     List<E> expected = Arrays.asList(elements).     List<E> actual = getResult().getResponseBody().     String message = "Response body should not have contained " + expected.     getResult().assertWithDiagnostics(() -> AssertionErrors.assertTrue(message, (actual == null || !actual.containsAll(expected)))).     return this. }
false;public;0;4;;@Override public EntityExchangeResult<List<E>> returnResult() {     return getResult(). }
false;public;0;6;;@Override public EntityExchangeResult<Void> isEmpty() {     this.result.assertWithDiagnostics(() -> AssertionErrors.assertTrue("Expected empty body", this.isEmpty)).     return new EntityExchangeResult<>(this.result, null). }
false;public;1;12;;@Override public BodyContentSpec json(String json) {     this.result.assertWithDiagnostics(() -> {         try {             new JsonExpectationsHelper().assertJsonEqual(json, getBodyAsString()).         } catch (Exception ex) {             throw new AssertionError("JSON parsing error", ex).         }     }).     return this. }
false;public;1;12;;@Override public BodyContentSpec xml(String expectedXml) {     this.result.assertWithDiagnostics(() -> {         try {             new XmlExpectationsHelper().assertXmlEqual(expectedXml, getBodyAsString()).         } catch (Exception ex) {             throw new AssertionError("XML parsing error", ex).         }     }).     return this. }
false;public;2;4;;@Override public JsonPathAssertions jsonPath(String expression, Object... args) {     return new JsonPathAssertions(this, getBodyAsString(), expression, args). }
false;public;3;4;;@Override public XpathAssertions xpath(String expression, @Nullable Map<String, String> namespaces, Object... args) {     return new XpathAssertions(this, expression, namespaces, args). }
false;private;0;9;;private String getBodyAsString() {     byte[] body = this.result.getResponseBody().     if (body == null || body.length == 0) {         return "".     }     Charset charset = Optional.ofNullable(this.result.getResponseHeaders().getContentType()).map(MimeType::getCharset).orElse(StandardCharsets.UTF_8).     return new String(body, charset). }
false;public;1;5;;@Override public BodyContentSpec consumeWith(Consumer<EntityExchangeResult<byte[]>> consumer) {     this.result.assertWithDiagnostics(() -> consumer.accept(this.result)).     return this. }
false;public;0;4;;@Override public EntityExchangeResult<byte[]> returnResult() {     return this.result. }
