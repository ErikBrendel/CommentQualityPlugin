commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Returns an instance that can initialize {@link ApplicationContextAware} beans.  */ ;/**  * Returns an instance that can initialize {@link ApplicationContextAware} beans.  */ @Override public AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException {     return this.beanFactory. }
false;public;0;4;;@Override public ServletContext getServletContext() {     return this.servletContext. }
false;public;0;4;;// --------------------------------------------------------------------- // Implementation of ApplicationContext interface // --------------------------------------------------------------------- @Override public String getId() {     return this.id. }
false;public;0;4;;@Override public String getApplicationName() {     return "". }
false;public;0;4;;@Override public String getDisplayName() {     return this.displayName. }
false;public;0;4;;@Override public long getStartupDate() {     return this.startupDate. }
false;public;0;4;;@Override public ApplicationContext getParent() {     return null. }
false;public;0;4;;@Override public Environment getEnvironment() {     return this.environment. }
false;public;2;3;;public void addBean(String name, Object bean) {     this.beanFactory.addBean(name, bean). }
false;public;1;8;;public void addBeans(@Nullable List<?> beans) {     if (beans != null) {         for (Object bean : beans) {             String name = bean.getClass().getName() + "#" + ObjectUtils.getIdentityHexString(bean).             this.beanFactory.addBean(name, bean).         }     } }
false;public;1;4;;// --------------------------------------------------------------------- // Implementation of BeanFactory interface // --------------------------------------------------------------------- @Override public Object getBean(String name) throws BeansException {     return this.beanFactory.getBean(name). }
false;public;2;4;;@Override public <T> T getBean(String name, Class<T> requiredType) throws BeansException {     return this.beanFactory.getBean(name, requiredType). }
false;public;2;4;;@Override public Object getBean(String name, Object... args) throws BeansException {     return this.beanFactory.getBean(name, args). }
false;public;1;4;;@Override public <T> T getBean(Class<T> requiredType) throws BeansException {     return this.beanFactory.getBean(requiredType). }
false;public;2;4;;@Override public <T> T getBean(Class<T> requiredType, Object... args) throws BeansException {     return this.beanFactory.getBean(requiredType, args). }
false;public;1;4;;@Override public <T> ObjectProvider<T> getBeanProvider(Class<T> requiredType) {     return this.beanFactory.getBeanProvider(requiredType). }
false;public;1;4;;@Override public <T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType) {     return this.beanFactory.getBeanProvider(requiredType). }
false;public;1;4;;@Override public boolean containsBean(String name) {     return this.beanFactory.containsBean(name). }
false;public;1;4;;@Override public boolean isSingleton(String name) throws NoSuchBeanDefinitionException {     return this.beanFactory.isSingleton(name). }
false;public;1;4;;@Override public boolean isPrototype(String name) throws NoSuchBeanDefinitionException {     return this.beanFactory.isPrototype(name). }
false;public;2;4;;@Override public boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException {     return this.beanFactory.isTypeMatch(name, typeToMatch). }
false;public;2;4;;@Override public boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException {     return this.beanFactory.isTypeMatch(name, typeToMatch). }
false;public;1;4;;@Override public Class<?> getType(String name) throws NoSuchBeanDefinitionException {     return this.beanFactory.getType(name). }
false;public;1;4;;@Override public String[] getAliases(String name) {     return this.beanFactory.getAliases(name). }
false;public;1;4;;// --------------------------------------------------------------------- // Implementation of ListableBeanFactory interface // --------------------------------------------------------------------- @Override public boolean containsBeanDefinition(String beanName) {     return this.beanFactory.containsBeanDefinition(beanName). }
false;public;0;4;;@Override public int getBeanDefinitionCount() {     return this.beanFactory.getBeanDefinitionCount(). }
false;public;0;4;;@Override public String[] getBeanDefinitionNames() {     return this.beanFactory.getBeanDefinitionNames(). }
false;public;1;4;;@Override public String[] getBeanNamesForType(@Nullable ResolvableType type) {     return this.beanFactory.getBeanNamesForType(type). }
false;public;1;4;;@Override public String[] getBeanNamesForType(@Nullable Class<?> type) {     return this.beanFactory.getBeanNamesForType(type). }
false;public;3;4;;@Override public String[] getBeanNamesForType(@Nullable Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) {     return this.beanFactory.getBeanNamesForType(type, includeNonSingletons, allowEagerInit). }
false;public;1;4;;@Override public <T> Map<String, T> getBeansOfType(@Nullable Class<T> type) throws BeansException {     return this.beanFactory.getBeansOfType(type). }
false;public;3;6;;@Override public <T> Map<String, T> getBeansOfType(@Nullable Class<T> type, boolean includeNonSingletons, boolean allowEagerInit) throws BeansException {     return this.beanFactory.getBeansOfType(type, includeNonSingletons, allowEagerInit). }
false;public;1;4;;@Override public String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType) {     return this.beanFactory.getBeanNamesForAnnotation(annotationType). }
false;public;1;6;;@Override public Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException {     return this.beanFactory.getBeansWithAnnotation(annotationType). }
false;public;2;7;;@Override @Nullable public <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) throws NoSuchBeanDefinitionException {     return this.beanFactory.findAnnotationOnBean(beanName, annotationType). }
false;public;0;4;;// --------------------------------------------------------------------- // Implementation of HierarchicalBeanFactory interface // --------------------------------------------------------------------- @Override public BeanFactory getParentBeanFactory() {     return null. }
false;public;1;4;;@Override public boolean containsLocalBean(String name) {     return this.beanFactory.containsBean(name). }
false;public;4;4;;// --------------------------------------------------------------------- // Implementation of MessageSource interface // --------------------------------------------------------------------- @Override public String getMessage(String code, @Nullable Object[] args, @Nullable String defaultMessage, Locale locale) {     return this.messageSource.getMessage(code, args, defaultMessage, locale). }
false;public;3;4;;@Override public String getMessage(String code, @Nullable Object[] args, Locale locale) throws NoSuchMessageException {     return this.messageSource.getMessage(code, args, locale). }
false;public;2;4;;@Override public String getMessage(MessageSourceResolvable resolvable, Locale locale) throws NoSuchMessageException {     return this.messageSource.getMessage(resolvable, locale). }
false;public;0;5;;// --------------------------------------------------------------------- // Implementation of ResourceLoader interface // --------------------------------------------------------------------- @Override @Nullable public ClassLoader getClassLoader() {     return ClassUtils.getDefaultClassLoader(). }
false;public;1;4;;@Override public Resource getResource(String location) {     return this.resourcePatternResolver.getResource(location). }
false;public;1;3;;// --------------------------------------------------------------------- // Other // --------------------------------------------------------------------- @Override public void publishEvent(ApplicationEvent event) { }
false;public;1;3;;@Override public void publishEvent(Object event) { }
false;public;1;4;;@Override public Resource[] getResources(String locationPattern) throws IOException {     return this.resourcePatternResolver.getResources(locationPattern). }
false;public;2;7;;@Override public Object initializeBean(Object existingBean, String beanName) throws BeansException {     if (existingBean instanceof ApplicationContextAware) {         ((ApplicationContextAware) existingBean).setApplicationContext(StubWebApplicationContext.this).     }     return existingBean. }
false;public;1;4;;@Override public <T> T createBean(Class<T> beanClass) {     return BeanUtils.instantiateClass(beanClass). }
false;public;3;4;;@Override public Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {     return BeanUtils.instantiateClass(beanClass). }
false;public;3;4;;@Override public Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {     return BeanUtils.instantiateClass(beanClass). }
false;public;1;3;;@Override public void autowireBean(Object existingBean) throws BeansException { }
false;public;3;3;;@Override public void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) { }
false;public;2;4;;@Override public Object configureBean(Object existingBean, String beanName) {     return existingBean. }
false;public;1;4;;@Override public <T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException {     throw new UnsupportedOperationException("Dependency resolution not supported"). }
false;public;2;4;;@Override public Object resolveBeanByName(String name, DependencyDescriptor descriptor) throws BeansException {     throw new UnsupportedOperationException("Dependency resolution not supported"). }
false;public;2;5;;@Override @Nullable public Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) {     throw new UnsupportedOperationException("Dependency resolution not supported"). }
false;public;4;6;;@Override @Nullable public Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName, @Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) {     throw new UnsupportedOperationException("Dependency resolution not supported"). }
false;public;2;3;;@Override public void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException { }
false;public;2;4;;@Override public Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) {     return existingBean. }
false;public;2;4;;@Override public Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) {     return existingBean. }
false;public;1;3;;@Override public void destroyBean(Object existingBean) { }
