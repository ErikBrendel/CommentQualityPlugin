commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public ClientHttpResponse executeInternal() throws IOException {     return getClientHttpResponse(httpMethod, uri, getHeaders(), getBodyAsBytes()). }
false;public;2;9;;@Override public ClientHttpRequest createRequest(final URI uri, final HttpMethod httpMethod) {     return new MockClientHttpRequest(httpMethod, uri) {          @Override         public ClientHttpResponse executeInternal() throws IOException {             return getClientHttpResponse(httpMethod, uri, getHeaders(), getBodyAsBytes()).         }     }. }
false;protected;0;4;;@Override protected ClientHttpResponse executeInternal() throws IOException {     return getClientHttpResponse(method, uri, getHeaders(), getBodyAsBytes()). }
false;public;2;9;;@Override public org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod method) {     return new org.springframework.mock.http.client.MockAsyncClientHttpRequest(method, uri) {          @Override         protected ClientHttpResponse executeInternal() throws IOException {             return getClientHttpResponse(method, uri, getHeaders(), getBodyAsBytes()).         }     }. }
false;private;4;20;;private ClientHttpResponse getClientHttpResponse(HttpMethod httpMethod, URI uri, HttpHeaders requestHeaders, byte[] requestBody) {     try {         MockHttpServletResponse servletResponse = this.mockMvc.perform(request(httpMethod, uri).content(requestBody).headers(requestHeaders)).andReturn().getResponse().         HttpStatus status = HttpStatus.valueOf(servletResponse.getStatus()).         byte[] body = servletResponse.getContentAsByteArray().         MockClientHttpResponse clientResponse = new MockClientHttpResponse(body, status).         clientResponse.getHeaders().putAll(getResponseHeaders(servletResponse)).         return clientResponse.     } catch (Exception ex) {         byte[] body = ex.toString().getBytes(StandardCharsets.UTF_8).         return new MockClientHttpResponse(body, HttpStatus.INTERNAL_SERVER_ERROR).     } }
false;private;1;10;;private HttpHeaders getResponseHeaders(MockHttpServletResponse response) {     HttpHeaders headers = new HttpHeaders().     for (String name : response.getHeaderNames()) {         List<String> values = response.getHeaders(name).         for (String value : values) {             headers.add(name, value).         }     }     return headers. }
