# id;timestamp;commentText;codeText;commentWords;codeWords
DelegatingSmartContextLoader -> public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1328020251;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}.__<p>Delegation is based on explicit knowledge of the implementations of_{@link GenericXmlContextLoader} and {@link AnnotationConfigContextLoader}._Specifically, the delegation algorithm is as follows:__<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the configuration classes are empty,_{@code GenericXmlContextLoader} will load the {@code ApplicationContext}.</li>_<li>If the configuration classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_{@code AnnotationConfigContextLoader} will load the {@code ApplicationContext}.</li>_</ul>__@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is <code>null</code>_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")___		List<SmartContextLoader> candidates = Arrays.asList(xmlLoader, annotationConfigLoader)___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Delegating to %s to load context from %s.", name(loader), mergedConfig))__				}_				return loader.loadContext(mergedConfig)__			}_		}__		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(xmlLoader),_			name(annotationConfigLoader), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,link,generic,xml,context,loader,and,link,annotation,config,context,loader,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,configuration,classes,are,empty,code,generic,xml,context,loader,will,load,the,code,application,context,li,li,if,the,configuration,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,code,annotation,config,context,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,code,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,xml,loader,annotation,config,loader,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,if,logger,is,debug,enabled,logger,debug,string,format,delegating,to,s,to,load,context,from,s,name,loader,merged,config,return,loader,load,context,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,xml,loader,name,annotation,config,loader,merged,config
DelegatingSmartContextLoader -> public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1335773184;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}.__<p>Delegation is based on explicit knowledge of the implementations of_{@link GenericXmlContextLoader} and {@link AnnotationConfigContextLoader}._Specifically, the delegation algorithm is as follows:__<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the configuration classes are empty,_{@code GenericXmlContextLoader} will load the {@code ApplicationContext}.</li>_<li>If the configuration classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_{@code AnnotationConfigContextLoader} will load the {@code ApplicationContext}.</li>_</ul>__@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is <code>null</code>_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")___		List<SmartContextLoader> candidates = Arrays.asList(xmlLoader, annotationConfigLoader)___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Delegating to %s to load context from %s.", name(loader), mergedConfig))__				}_				return loader.loadContext(mergedConfig)__			}_		}__		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(xmlLoader),_			name(annotationConfigLoader), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,link,generic,xml,context,loader,and,link,annotation,config,context,loader,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,configuration,classes,are,empty,code,generic,xml,context,loader,will,load,the,code,application,context,li,li,if,the,configuration,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,code,annotation,config,context,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,code,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,xml,loader,annotation,config,loader,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,if,logger,is,debug,enabled,logger,debug,string,format,delegating,to,s,to,load,context,from,s,name,loader,merged,config,return,loader,load,context,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,xml,loader,name,annotation,config,loader,merged,config
DelegatingSmartContextLoader -> public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1337278668;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}.__<p>Delegation is based on explicit knowledge of the implementations of_{@link GenericXmlContextLoader} and {@link AnnotationConfigContextLoader}._Specifically, the delegation algorithm is as follows:__<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_{@code GenericXmlContextLoader} will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_{@code AnnotationConfigContextLoader} will load the {@code ApplicationContext}.</li>_</ul>__@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is <code>null</code>_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")___		List<SmartContextLoader> candidates = Arrays.asList(xmlLoader, annotationConfigLoader)___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Delegating to %s to load context from %s.", name(loader), mergedConfig))__				}_				return loader.loadContext(mergedConfig)__			}_		}__		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(xmlLoader),_			name(annotationConfigLoader), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,link,generic,xml,context,loader,and,link,annotation,config,context,loader,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,code,generic,xml,context,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,code,annotation,config,context,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,code,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,xml,loader,annotation,config,loader,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,if,logger,is,debug,enabled,logger,debug,string,format,delegating,to,s,to,load,context,from,s,name,loader,merged,config,return,loader,load,context,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,xml,loader,name,annotation,config,loader,merged,config
DelegatingSmartContextLoader -> public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;1345469597;Delegates to an appropriate candidate {@code SmartContextLoader} to load_an {@link ApplicationContext}.__<p>Delegation is based on explicit knowledge of the implementations of_{@link GenericXmlContextLoader} and {@link AnnotationConfigContextLoader}._Specifically, the delegation algorithm is as follows:__<ul>_<li>If the resource locations in the supplied {@code MergedContextConfiguration}_are not empty and the annotated classes are empty,_{@code GenericXmlContextLoader} will load the {@code ApplicationContext}.</li>_<li>If the annotated classes in the supplied {@code MergedContextConfiguration}_are not empty and the resource locations are empty,_{@code AnnotationConfigContextLoader} will load the {@code ApplicationContext}.</li>_</ul>__@param mergedConfig the merged context configuration to use to load the application context_@throws IllegalArgumentException if the supplied merged configuration is <code>null</code>_@throws IllegalStateException if neither candidate loader is capable of loading an_{@code ApplicationContext} from the supplied merged context configuration;public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {_		Assert.notNull(mergedConfig, "mergedConfig must not be null")___		List<SmartContextLoader> candidates = Arrays.asList(xmlLoader, annotationConfigLoader)___		for (SmartContextLoader loader : candidates) {_			_			_			if (supports(loader, mergedConfig)) {_				return delegateLoading(loader, mergedConfig)__			}_		}__		_		_		if (!mergedConfig.getContextInitializerClasses().isEmpty()) {_			return delegateLoading(annotationConfigLoader, mergedConfig)__		}__		throw new IllegalStateException(String.format(_			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(xmlLoader),_			name(annotationConfigLoader), mergedConfig))__	};delegates,to,an,appropriate,candidate,code,smart,context,loader,to,load,an,link,application,context,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,link,generic,xml,context,loader,and,link,annotation,config,context,loader,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,annotated,classes,are,empty,code,generic,xml,context,loader,will,load,the,code,application,context,li,li,if,the,annotated,classes,in,the,supplied,code,merged,context,configuration,are,not,empty,and,the,resource,locations,are,empty,code,annotation,config,context,loader,will,load,the,code,application,context,li,ul,param,merged,config,the,merged,context,configuration,to,use,to,load,the,application,context,throws,illegal,argument,exception,if,the,supplied,merged,configuration,is,code,null,code,throws,illegal,state,exception,if,neither,candidate,loader,is,capable,of,loading,an,code,application,context,from,the,supplied,merged,context,configuration;public,application,context,load,context,merged,context,configuration,merged,config,throws,exception,assert,not,null,merged,config,merged,config,must,not,be,null,list,smart,context,loader,candidates,arrays,as,list,xml,loader,annotation,config,loader,for,smart,context,loader,loader,candidates,if,supports,loader,merged,config,return,delegate,loading,loader,merged,config,if,merged,config,get,context,initializer,classes,is,empty,return,delegate,loading,annotation,config,loader,merged,config,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,load,an,application,context,from,s,name,xml,loader,name,annotation,config,loader,merged,config
DelegatingSmartContextLoader -> public ApplicationContext loadContext(String... locations) throws Exception;1328020251;{@code DelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;public ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoader does not support the ContextLoader SPI. "_				+ "Call loadContext(MergedContextConfiguration) instead.")__	};code,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;public,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loader,does,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
DelegatingSmartContextLoader -> public ApplicationContext loadContext(String... locations) throws Exception;1335773184;{@code DelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;public ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoader does not support the ContextLoader SPI. "_				+ "Call loadContext(MergedContextConfiguration) instead.")__	};code,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;public,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loader,does,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
DelegatingSmartContextLoader -> public ApplicationContext loadContext(String... locations) throws Exception;1337278668;{@code DelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;public ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoader does not support the ContextLoader SPI. "_				+ "Call loadContext(MergedContextConfiguration) instead.")__	};code,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;public,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loader,does,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
DelegatingSmartContextLoader -> public ApplicationContext loadContext(String... locations) throws Exception;1345469597;{@code DelegatingSmartContextLoader} does not support the_{@link ContextLoader#loadContext(String...) } method. Call_{@link #loadContext(MergedContextConfiguration)} instead._@throws UnsupportedOperationException;public ApplicationContext loadContext(String... locations) throws Exception {_		throw new UnsupportedOperationException("DelegatingSmartContextLoader does not support the ContextLoader SPI. "_				+ "Call loadContext(MergedContextConfiguration) instead.")__	};code,delegating,smart,context,loader,does,not,support,the,link,context,loader,load,context,string,method,call,link,load,context,merged,context,configuration,instead,throws,unsupported,operation,exception;public,application,context,load,context,string,locations,throws,exception,throw,new,unsupported,operation,exception,delegating,smart,context,loader,does,not,support,the,context,loader,spi,call,load,context,merged,context,configuration,instead
DelegatingSmartContextLoader -> public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1328020251;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}.__<p>Delegation is based on explicit knowledge of the implementations of_{@link GenericXmlContextLoader} and {@link AnnotationConfigContextLoader}._Specifically, the delegation algorithm is as follows:__<ul>_<li>If the resource locations or configuration classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, {@code GenericXmlContextLoader} will be allowed to process_the configuration in order to detect default resource locations. If_{@code GenericXmlContextLoader} detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, {@code AnnotationConfigContextLoader} will be allowed to_process the configuration in order to detect default configuration classes._If {@code AnnotationConfigContextLoader} detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>__@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_<code>null</code>, or if the supplied configuration attributes include both_resource locations and configuration classes_@throws IllegalStateException if {@code GenericXmlContextLoader} detects default_configuration classes_ if {@code AnnotationConfigContextLoader} detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {__		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_			"Cannot process locations AND configuration classes for context "_					+ "configuration %s_ configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(xmlLoader, configAttributes)__		}_		else if (configAttributes.hasClasses()) {_			delegateProcessing(annotationConfigLoader, configAttributes)__		}_		else {_			__			_			delegateProcessing(xmlLoader, configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(xmlLoader), configAttributes))__				}_			}__			if (configAttributes.hasClasses()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(xmlLoader), configAttributes))__			}__			_			delegateProcessing(annotationConfigLoader, configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(annotationConfigLoader), configAttributes))__				}_			}__			if (!xmlLoaderDetectedDefaults && configAttributes.hasLocations()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(annotationConfigLoader), configAttributes))__			}__			_			if (!configAttributes.hasResources()) {_				throw new IllegalStateException(String.format(_					"Neither %s nor %s was able to detect defaults for context configuration %s.", name(xmlLoader),_					name(annotationConfigLoader), configAttributes))__			}__			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes "_							+ "were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,link,generic,xml,context,loader,and,link,annotation,config,context,loader,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,configuration,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,code,generic,xml,context,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,code,generic,xml,context,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,code,annotation,config,context,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,code,annotation,config,context,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,code,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,configuration,classes,throws,illegal,state,exception,if,code,generic,xml,context,loader,detects,default,configuration,classes,if,code,annotation,config,context,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,configuration,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,annotation,config,loader,config,attributes,else,delegate,processing,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,xml,loader,config,attributes,if,config,attributes,has,classes,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,xml,loader,config,attributes,delegate,processing,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,annotation,config,loader,config,attributes,if,xml,loader,detected,defaults,config,attributes,has,locations,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,annotation,config,loader,config,attributes,if,config,attributes,has,resources,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,detect,defaults,for,context,configuration,s,name,xml,loader,name,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
DelegatingSmartContextLoader -> public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1335773184;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}.__<p>Delegation is based on explicit knowledge of the implementations of_{@link GenericXmlContextLoader} and {@link AnnotationConfigContextLoader}._Specifically, the delegation algorithm is as follows:__<ul>_<li>If the resource locations or configuration classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, {@code GenericXmlContextLoader} will be allowed to process_the configuration in order to detect default resource locations. If_{@code GenericXmlContextLoader} detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, {@code AnnotationConfigContextLoader} will be allowed to_process the configuration in order to detect default configuration classes._If {@code AnnotationConfigContextLoader} detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>__@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_<code>null</code>, or if the supplied configuration attributes include both_resource locations and configuration classes_@throws IllegalStateException if {@code GenericXmlContextLoader} detects default_configuration classes_ if {@code AnnotationConfigContextLoader} detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {__		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_			"Cannot process locations AND configuration classes for context "_					+ "configuration %s_ configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(xmlLoader, configAttributes)__		}_		else if (configAttributes.hasClasses()) {_			delegateProcessing(annotationConfigLoader, configAttributes)__		}_		else {_			__			_			delegateProcessing(xmlLoader, configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(xmlLoader), configAttributes))__				}_			}__			if (configAttributes.hasClasses()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(xmlLoader), configAttributes))__			}__			_			delegateProcessing(annotationConfigLoader, configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(annotationConfigLoader), configAttributes))__				}_			}__			if (!xmlLoaderDetectedDefaults && configAttributes.hasLocations()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(annotationConfigLoader), configAttributes))__			}__			_			if (!configAttributes.hasResources()) {_				throw new IllegalStateException(String.format(_					"Neither %s nor %s was able to detect defaults for context configuration %s.", name(xmlLoader),_					name(annotationConfigLoader), configAttributes))__			}__			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes "_							+ "were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,link,generic,xml,context,loader,and,link,annotation,config,context,loader,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,configuration,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,code,generic,xml,context,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,code,generic,xml,context,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,code,annotation,config,context,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,code,annotation,config,context,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,code,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,configuration,classes,throws,illegal,state,exception,if,code,generic,xml,context,loader,detects,default,configuration,classes,if,code,annotation,config,context,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,configuration,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,annotation,config,loader,config,attributes,else,delegate,processing,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,xml,loader,config,attributes,if,config,attributes,has,classes,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,xml,loader,config,attributes,delegate,processing,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,annotation,config,loader,config,attributes,if,xml,loader,detected,defaults,config,attributes,has,locations,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,annotation,config,loader,config,attributes,if,config,attributes,has,resources,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,detect,defaults,for,context,configuration,s,name,xml,loader,name,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
DelegatingSmartContextLoader -> public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1337278668;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}.__<p>Delegation is based on explicit knowledge of the implementations of_{@link GenericXmlContextLoader} and {@link AnnotationConfigContextLoader}._Specifically, the delegation algorithm is as follows:__<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, {@code GenericXmlContextLoader} will be allowed to process_the configuration in order to detect default resource locations. If_{@code GenericXmlContextLoader} detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, {@code AnnotationConfigContextLoader} will be allowed to_process the configuration in order to detect default configuration classes._If {@code AnnotationConfigContextLoader} detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>__@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_<code>null</code>, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if {@code GenericXmlContextLoader} detects default_configuration classes_ if {@code AnnotationConfigContextLoader} detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {__		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_			"Cannot process locations AND classes for context "_					+ "configuration %s_ configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(xmlLoader, configAttributes)__		}_		else if (configAttributes.hasClasses()) {_			delegateProcessing(annotationConfigLoader, configAttributes)__		}_		else {_			__			_			delegateProcessing(xmlLoader, configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(xmlLoader), configAttributes))__				}_			}__			if (configAttributes.hasClasses()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(xmlLoader), configAttributes))__			}__			_			delegateProcessing(annotationConfigLoader, configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(annotationConfigLoader), configAttributes))__				}_			}__			if (!xmlLoaderDetectedDefaults && configAttributes.hasLocations()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(annotationConfigLoader), configAttributes))__			}__			_			if (!configAttributes.hasResources()) {_				throw new IllegalStateException(String.format(_					"Neither %s nor %s was able to detect defaults for context configuration %s.", name(xmlLoader),_					name(annotationConfigLoader), configAttributes))__			}__			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes "_							+ "were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,link,generic,xml,context,loader,and,link,annotation,config,context,loader,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,code,generic,xml,context,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,code,generic,xml,context,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,code,annotation,config,context,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,code,annotation,config,context,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,code,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,code,generic,xml,context,loader,detects,default,configuration,classes,if,code,annotation,config,context,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,annotation,config,loader,config,attributes,else,delegate,processing,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,xml,loader,config,attributes,if,config,attributes,has,classes,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,xml,loader,config,attributes,delegate,processing,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,annotation,config,loader,config,attributes,if,xml,loader,detected,defaults,config,attributes,has,locations,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,annotation,config,loader,config,attributes,if,config,attributes,has,resources,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,detect,defaults,for,context,configuration,s,name,xml,loader,name,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
DelegatingSmartContextLoader -> public void processContextConfiguration(final ContextConfigurationAttributes configAttributes);1345469597;Delegates to candidate {@code SmartContextLoaders} to process the supplied_{@link ContextConfigurationAttributes}.__<p>Delegation is based on explicit knowledge of the implementations of_{@link GenericXmlContextLoader} and {@link AnnotationConfigContextLoader}._Specifically, the delegation algorithm is as follows:__<ul>_<li>If the resource locations or annotated classes in the supplied_{@code ContextConfigurationAttributes} are not empty, the appropriate_candidate loader will be allowed to process the configuration <em>as is</em>,_without any checks for detection of defaults.</li>_<li>Otherwise, {@code GenericXmlContextLoader} will be allowed to process_the configuration in order to detect default resource locations. If_{@code GenericXmlContextLoader} detects default resource locations,_an {@code info} message will be logged.</li>_<li>Subsequently, {@code AnnotationConfigContextLoader} will be allowed to_process the configuration in order to detect default configuration classes._If {@code AnnotationConfigContextLoader} detects default configuration_classes, an {@code info} message will be logged.</li>_</ul>__@param configAttributes the context configuration attributes to process_@throws IllegalArgumentException if the supplied configuration attributes are_<code>null</code>, or if the supplied configuration attributes include both_resource locations and annotated classes_@throws IllegalStateException if {@code GenericXmlContextLoader} detects default_configuration classes_ if {@code AnnotationConfigContextLoader} detects default_resource locations_ if neither candidate loader detects defaults for the supplied_context configuration_ or if both candidate loaders detect defaults for the_supplied context configuration;public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {__		Assert.notNull(configAttributes, "configAttributes must not be null")__		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()), String.format(_			"Cannot process locations AND classes for context "_					+ "configuration %s_ configure one or the other, but not both.", configAttributes))___		_		_		_		if (configAttributes.hasLocations()) {_			delegateProcessing(xmlLoader, configAttributes)__		} else if (configAttributes.hasClasses()) {_			delegateProcessing(annotationConfigLoader, configAttributes)__		} else {_			__			_			delegateProcessing(xmlLoader, configAttributes)__			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations()___			if (xmlLoaderDetectedDefaults) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format("%s detected default locations for context configuration %s.",_						name(xmlLoader), configAttributes))__				}_			}__			if (configAttributes.hasClasses()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default configuration classes for context configuration %s.",_					name(xmlLoader), configAttributes))__			}__			_			delegateProcessing(annotationConfigLoader, configAttributes)___			if (configAttributes.hasClasses()) {_				if (logger.isInfoEnabled()) {_					logger.info(String.format(_						"%s detected default configuration classes for context configuration %s.",_						name(annotationConfigLoader), configAttributes))__				}_			}__			if (!xmlLoaderDetectedDefaults && configAttributes.hasLocations()) {_				throw new IllegalStateException(String.format(_					"%s should NOT have detected default locations for context configuration %s.",_					name(annotationConfigLoader), configAttributes))__			}__			_			_			if (!configAttributes.hasResources() && ObjectUtils.isEmpty(configAttributes.getInitializers())) {_				throw new IllegalStateException(String.format(_					"Neither %s nor %s was able to detect defaults, and no ApplicationContextInitializers "_							+ "were declared for context configuration %s", name(xmlLoader),_					name(annotationConfigLoader), configAttributes))__			}__			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {_				String message = String.format(_					"Configuration error: both default locations AND default configuration classes "_							+ "were detected for context configuration %s_ configure one or the other, but not both.",_					configAttributes)__				logger.error(message)__				throw new IllegalStateException(message)__			}_		}_	};delegates,to,candidate,code,smart,context,loaders,to,process,the,supplied,link,context,configuration,attributes,p,delegation,is,based,on,explicit,knowledge,of,the,implementations,of,link,generic,xml,context,loader,and,link,annotation,config,context,loader,specifically,the,delegation,algorithm,is,as,follows,ul,li,if,the,resource,locations,or,annotated,classes,in,the,supplied,code,context,configuration,attributes,are,not,empty,the,appropriate,candidate,loader,will,be,allowed,to,process,the,configuration,em,as,is,em,without,any,checks,for,detection,of,defaults,li,li,otherwise,code,generic,xml,context,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,resource,locations,if,code,generic,xml,context,loader,detects,default,resource,locations,an,code,info,message,will,be,logged,li,li,subsequently,code,annotation,config,context,loader,will,be,allowed,to,process,the,configuration,in,order,to,detect,default,configuration,classes,if,code,annotation,config,context,loader,detects,default,configuration,classes,an,code,info,message,will,be,logged,li,ul,param,config,attributes,the,context,configuration,attributes,to,process,throws,illegal,argument,exception,if,the,supplied,configuration,attributes,are,code,null,code,or,if,the,supplied,configuration,attributes,include,both,resource,locations,and,annotated,classes,throws,illegal,state,exception,if,code,generic,xml,context,loader,detects,default,configuration,classes,if,code,annotation,config,context,loader,detects,default,resource,locations,if,neither,candidate,loader,detects,defaults,for,the,supplied,context,configuration,or,if,both,candidate,loaders,detect,defaults,for,the,supplied,context,configuration;public,void,process,context,configuration,final,context,configuration,attributes,config,attributes,assert,not,null,config,attributes,config,attributes,must,not,be,null,assert,is,true,config,attributes,has,locations,config,attributes,has,classes,string,format,cannot,process,locations,and,classes,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,if,config,attributes,has,locations,delegate,processing,xml,loader,config,attributes,else,if,config,attributes,has,classes,delegate,processing,annotation,config,loader,config,attributes,else,delegate,processing,xml,loader,config,attributes,boolean,xml,loader,detected,defaults,config,attributes,has,locations,if,xml,loader,detected,defaults,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,locations,for,context,configuration,s,name,xml,loader,config,attributes,if,config,attributes,has,classes,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,configuration,classes,for,context,configuration,s,name,xml,loader,config,attributes,delegate,processing,annotation,config,loader,config,attributes,if,config,attributes,has,classes,if,logger,is,info,enabled,logger,info,string,format,s,detected,default,configuration,classes,for,context,configuration,s,name,annotation,config,loader,config,attributes,if,xml,loader,detected,defaults,config,attributes,has,locations,throw,new,illegal,state,exception,string,format,s,should,not,have,detected,default,locations,for,context,configuration,s,name,annotation,config,loader,config,attributes,if,config,attributes,has,resources,object,utils,is,empty,config,attributes,get,initializers,throw,new,illegal,state,exception,string,format,neither,s,nor,s,was,able,to,detect,defaults,and,no,application,context,initializers,were,declared,for,context,configuration,s,name,xml,loader,name,annotation,config,loader,config,attributes,if,config,attributes,has,locations,config,attributes,has,classes,string,message,string,format,configuration,error,both,default,locations,and,default,configuration,classes,were,detected,for,context,configuration,s,configure,one,or,the,other,but,not,both,config,attributes,logger,error,message,throw,new,illegal,state,exception,message
DelegatingSmartContextLoader -> public String[] processLocations(Class<?> clazz, String... locations);1328020251;{@code DelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;public String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoader does not support the ContextLoader SPI. "_				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;public,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loader,does,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
DelegatingSmartContextLoader -> public String[] processLocations(Class<?> clazz, String... locations);1335773184;{@code DelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;public String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoader does not support the ContextLoader SPI. "_				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;public,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loader,does,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
DelegatingSmartContextLoader -> public String[] processLocations(Class<?> clazz, String... locations);1337278668;{@code DelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;public String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoader does not support the ContextLoader SPI. "_				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;public,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loader,does,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
DelegatingSmartContextLoader -> public String[] processLocations(Class<?> clazz, String... locations);1345469597;{@code DelegatingSmartContextLoader} does not support the_{@link ContextLoader#processLocations(Class, String...)} method. Call_{@link #processContextConfiguration(ContextConfigurationAttributes)} instead._@throws UnsupportedOperationException;public String[] processLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException("DelegatingSmartContextLoader does not support the ContextLoader SPI. "_				+ "Call processContextConfiguration(ContextConfigurationAttributes) instead.")__	};code,delegating,smart,context,loader,does,not,support,the,link,context,loader,process,locations,class,string,method,call,link,process,context,configuration,context,configuration,attributes,instead,throws,unsupported,operation,exception;public,string,process,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,delegating,smart,context,loader,does,not,support,the,context,loader,spi,call,process,context,configuration,context,configuration,attributes,instead
