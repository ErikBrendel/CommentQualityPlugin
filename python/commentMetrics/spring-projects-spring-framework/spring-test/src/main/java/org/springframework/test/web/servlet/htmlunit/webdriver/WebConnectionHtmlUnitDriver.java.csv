commented;modifiers;parameterAmount;loc;comment;code
true;protected,final;1;6;/**  * Modify the supplied {@link WebClient} and retain a reference to it so that its  * {@link WebConnection} is {@linkplain #getWebConnection accessible} for later use.  * <p>Delegates to {@link HtmlUnitDriver#modifyWebClient} for default behavior  * and to {@link #modifyWebClientInternal} for further customization.  * @param webClient the client to modify  * @return the modified client  * @see HtmlUnitDriver#modifyWebClient(WebClient)  * @see #modifyWebClientInternal(WebClient)  */ ;/**  * Modify the supplied {@link WebClient} and retain a reference to it so that its  * {@link WebConnection} is {@linkplain #getWebConnection accessible} for later use.  * <p>Delegates to {@link HtmlUnitDriver#modifyWebClient} for default behavior  * and to {@link #modifyWebClientInternal} for further customization.  * @param webClient the client to modify  * @return the modified client  * @see HtmlUnitDriver#modifyWebClient(WebClient)  * @see #modifyWebClientInternal(WebClient)  */ @Override protected final WebClient modifyWebClient(WebClient webClient) {     this.webClient = super.modifyWebClient(webClient).     this.webClient = modifyWebClientInternal(this.webClient).     return this.webClient. }
true;protected;1;3;/**  * Modify the supplied {@link WebClient}.  * <p>The default implementation simply returns the supplied client unmodified.  * <p>Subclasses can override this method to customize the {@code WebClient}  * that the {@link HtmlUnitDriver} uses.  * @param webClient the client to modify  * @return the modified client  */ ;/**  * Modify the supplied {@link WebClient}.  * <p>The default implementation simply returns the supplied client unmodified.  * <p>Subclasses can override this method to customize the {@code WebClient}  * that the {@link HtmlUnitDriver} uses.  * @param webClient the client to modify  * @return the modified client  */ protected WebClient modifyWebClientInternal(WebClient webClient) {     return webClient. }
true;public;0;5;/**  * Return the current {@link WebClient}.  * @since 4.3  */ ;/**  * Return the current {@link WebClient}.  * @since 4.3  */ @Override public WebClient getWebClient() {     Assert.state(this.webClient != null, "No WebClient set").     return this.webClient. }
true;public;1;4;/**  * Set the {@link WebConnection} to be used with the {@link WebClient}.  * @param webConnection the {@code WebConnection} to use  */ ;/**  * Set the {@link WebConnection} to be used with the {@link WebClient}.  * @param webConnection the {@code WebConnection} to use  */ public void setWebConnection(WebConnection webConnection) {     Assert.notNull(webConnection, "WebConnection must not be null").     getWebClient().setWebConnection(webConnection). }
true;public;0;3;/**  * Access the current {@link WebConnection} for the {@link WebClient}.  * @return the current {@code WebConnection}  */ ;/**  * Access the current {@link WebConnection} for the {@link WebClient}.  * @return the current {@code WebConnection}  */ public WebConnection getWebConnection() {     return getWebClient().getWebConnection(). }
