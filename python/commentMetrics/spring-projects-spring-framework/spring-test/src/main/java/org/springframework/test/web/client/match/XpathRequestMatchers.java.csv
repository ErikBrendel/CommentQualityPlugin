commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected void matchInternal(MockClientHttpRequest request) throws Exception {     xpathHelper.assertNode(request.getBodyAsBytes(), DEFAULT_ENCODING, matcher). }
true;public;1;8;/**  * Apply the XPath and assert it with the given {@code Matcher<Node>}.  */ ;/**  * Apply the XPath and assert it with the given {@code Matcher<Node>}.  */ public <T> RequestMatcher node(final Matcher<? super Node> matcher) {     return new AbstractXpathRequestMatcher() {          @Override         protected void matchInternal(MockClientHttpRequest request) throws Exception {             xpathHelper.assertNode(request.getBodyAsBytes(), DEFAULT_ENCODING, matcher).         }     }. }
false;protected;1;4;;@Override protected void matchInternal(MockClientHttpRequest request) throws Exception {     xpathHelper.exists(request.getBodyAsBytes(), DEFAULT_ENCODING). }
true;public;0;8;/**  * Assert that content exists at the given XPath.  */ ;/**  * Assert that content exists at the given XPath.  */ public <T> RequestMatcher exists() {     return new AbstractXpathRequestMatcher() {          @Override         protected void matchInternal(MockClientHttpRequest request) throws Exception {             xpathHelper.exists(request.getBodyAsBytes(), DEFAULT_ENCODING).         }     }. }
false;protected;1;4;;@Override protected void matchInternal(MockClientHttpRequest request) throws Exception {     xpathHelper.doesNotExist(request.getBodyAsBytes(), DEFAULT_ENCODING). }
true;public;0;8;/**  * Assert that content does not exist at the given XPath.  */ ;/**  * Assert that content does not exist at the given XPath.  */ public <T> RequestMatcher doesNotExist() {     return new AbstractXpathRequestMatcher() {          @Override         protected void matchInternal(MockClientHttpRequest request) throws Exception {             xpathHelper.doesNotExist(request.getBodyAsBytes(), DEFAULT_ENCODING).         }     }. }
false;protected;1;4;;@Override protected void matchInternal(MockClientHttpRequest request) throws Exception {     xpathHelper.assertNodeCount(request.getBodyAsBytes(), DEFAULT_ENCODING, matcher). }
true;public;1;8;/**  * Apply the XPath and assert the number of nodes found with the given  * {@code Matcher<Integer>}.  */ ;/**  * Apply the XPath and assert the number of nodes found with the given  * {@code Matcher<Integer>}.  */ public <T> RequestMatcher nodeCount(final Matcher<Integer> matcher) {     return new AbstractXpathRequestMatcher() {          @Override         protected void matchInternal(MockClientHttpRequest request) throws Exception {             xpathHelper.assertNodeCount(request.getBodyAsBytes(), DEFAULT_ENCODING, matcher).         }     }. }
false;protected;1;4;;@Override protected void matchInternal(MockClientHttpRequest request) throws Exception {     xpathHelper.assertNodeCount(request.getBodyAsBytes(), DEFAULT_ENCODING, expectedCount). }
true;public;1;8;/**  * Apply the XPath and assert the number of nodes found.  */ ;/**  * Apply the XPath and assert the number of nodes found.  */ public <T> RequestMatcher nodeCount(final int expectedCount) {     return new AbstractXpathRequestMatcher() {          @Override         protected void matchInternal(MockClientHttpRequest request) throws Exception {             xpathHelper.assertNodeCount(request.getBodyAsBytes(), DEFAULT_ENCODING, expectedCount).         }     }. }
false;protected;1;4;;@Override protected void matchInternal(MockClientHttpRequest request) throws Exception {     xpathHelper.assertString(request.getBodyAsBytes(), DEFAULT_ENCODING, matcher). }
true;public;1;8;/**  * Apply the XPath and assert the String content found with the given matcher.  */ ;/**  * Apply the XPath and assert the String content found with the given matcher.  */ public <T> RequestMatcher string(final Matcher<? super String> matcher) {     return new AbstractXpathRequestMatcher() {          @Override         protected void matchInternal(MockClientHttpRequest request) throws Exception {             xpathHelper.assertString(request.getBodyAsBytes(), DEFAULT_ENCODING, matcher).         }     }. }
false;protected;1;4;;@Override protected void matchInternal(MockClientHttpRequest request) throws Exception {     xpathHelper.assertString(request.getBodyAsBytes(), DEFAULT_ENCODING, value). }
true;public;1;8;/**  * Apply the XPath and assert the String content found.  */ ;/**  * Apply the XPath and assert the String content found.  */ public RequestMatcher string(final String value) {     return new AbstractXpathRequestMatcher() {          @Override         protected void matchInternal(MockClientHttpRequest request) throws Exception {             xpathHelper.assertString(request.getBodyAsBytes(), DEFAULT_ENCODING, value).         }     }. }
false;protected;1;4;;@Override protected void matchInternal(MockClientHttpRequest request) throws Exception {     xpathHelper.assertNumber(request.getBodyAsBytes(), DEFAULT_ENCODING, matcher). }
true;public;1;8;/**  * Apply the XPath and assert the number found with the given matcher.  */ ;/**  * Apply the XPath and assert the number found with the given matcher.  */ public <T> RequestMatcher number(final Matcher<? super Double> matcher) {     return new AbstractXpathRequestMatcher() {          @Override         protected void matchInternal(MockClientHttpRequest request) throws Exception {             xpathHelper.assertNumber(request.getBodyAsBytes(), DEFAULT_ENCODING, matcher).         }     }. }
false;protected;1;4;;@Override protected void matchInternal(MockClientHttpRequest request) throws Exception {     xpathHelper.assertNumber(request.getBodyAsBytes(), DEFAULT_ENCODING, value). }
true;public;1;8;/**  * Apply the XPath and assert the number of nodes found.  */ ;/**  * Apply the XPath and assert the number of nodes found.  */ public RequestMatcher number(final Double value) {     return new AbstractXpathRequestMatcher() {          @Override         protected void matchInternal(MockClientHttpRequest request) throws Exception {             xpathHelper.assertNumber(request.getBodyAsBytes(), DEFAULT_ENCODING, value).         }     }. }
false;protected;1;4;;@Override protected void matchInternal(MockClientHttpRequest request) throws Exception {     xpathHelper.assertBoolean(request.getBodyAsBytes(), DEFAULT_ENCODING, value). }
true;public;1;8;/**  * Apply the XPath and assert the boolean value found.  */ ;/**  * Apply the XPath and assert the boolean value found.  */ public <T> RequestMatcher booleanValue(final Boolean value) {     return new AbstractXpathRequestMatcher() {          @Override         protected void matchInternal(MockClientHttpRequest request) throws Exception {             xpathHelper.assertBoolean(request.getBodyAsBytes(), DEFAULT_ENCODING, value).         }     }. }
false;public,final;1;10;;@Override public final void match(ClientHttpRequest request) throws IOException, AssertionError {     try {         MockClientHttpRequest mockRequest = (MockClientHttpRequest) request.         matchInternal(mockRequest).     } catch (Exception ex) {         throw new AssertionError("Failed to parse XML request content", ex).     } }
false;protected,abstract;1;1;;protected abstract void matchInternal(MockClientHttpRequest request) throws Exception.
