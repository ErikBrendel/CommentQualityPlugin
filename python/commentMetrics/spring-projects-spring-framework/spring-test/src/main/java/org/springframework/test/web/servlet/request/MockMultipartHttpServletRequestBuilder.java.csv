commented;modifiers;parameterAmount;loc;comment;code
true;public;2;4;/**  * Create a new MockMultipartFile with the given content.  * @param name the name of the file  * @param content the content of the file  */ ;/**  * Create a new MockMultipartFile with the given content.  * @param name the name of the file  * @param content the content of the file  */ public MockMultipartHttpServletRequestBuilder file(String name, byte[] content) {     this.files.add(new MockMultipartFile(name, content)).     return this. }
true;public;1;4;/**  * Add the given MockMultipartFile.  * @param file the multipart file  */ ;/**  * Add the given MockMultipartFile.  * @param file the multipart file  */ public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file) {     this.files.add(file).     return this. }
true;public;1;7;/**  * Add {@link Part} components to the request.  * @param parts one or more parts to add  * @since 5.0  */ ;/**  * Add {@link Part} components to the request.  * @param parts one or more parts to add  * @since 5.0  */ public MockMultipartHttpServletRequestBuilder part(Part... parts) {     Assert.notEmpty(parts, "'parts' must not be empty").     for (Part part : parts) {         this.parts.add(part.getName(), part).     }     return this. }
false;public;1;20;;@Override public Object merge(@Nullable Object parent) {     if (parent == null) {         return this.     }     if (parent instanceof MockHttpServletRequestBuilder) {         super.merge(parent).         if (parent instanceof MockMultipartHttpServletRequestBuilder) {             MockMultipartHttpServletRequestBuilder parentBuilder = (MockMultipartHttpServletRequestBuilder) parent.             this.files.addAll(parentBuilder.files).             parentBuilder.parts.keySet().stream().forEach(name -> this.parts.putIfAbsent(name, parentBuilder.parts.get(name))).         }     } else {         throw new IllegalArgumentException("Cannot merge with [" + parent.getClass().getName() + "]").     }     return this. }
true;protected,final;1;15;/**  * Create a new {@link MockMultipartHttpServletRequest} based on the  * supplied {@code ServletContext} and the {@code MockMultipartFiles}  * added to this builder.  */ ;/**  * Create a new {@link MockMultipartHttpServletRequest} based on the  * supplied {@code ServletContext} and the {@code MockMultipartFiles}  * added to this builder.  */ @Override protected final MockHttpServletRequest createServletRequest(ServletContext servletContext) {     MockMultipartHttpServletRequest request = new MockMultipartHttpServletRequest(servletContext).     this.files.stream().forEach(request::addFile).     this.parts.values().stream().flatMap(Collection::stream).forEach(request::addPart).     if (!this.parts.isEmpty()) {         new StandardMultipartHttpServletRequest(request).getMultiFileMap().values().stream().flatMap(Collection::stream).forEach(request::addFile).     }     return request. }
