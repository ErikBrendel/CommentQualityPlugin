# id;timestamp;commentText;codeText;commentWords;codeWords
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(String name, byte[] content);1383669853;Create a new MockMultipartFile with the given content.__@param name the name of the file_@param content the content of the file;public MockMultipartHttpServletRequestBuilder file(String name, byte[] content) {_		this.files.add(new MockMultipartFile(name, content))__		return this__	};create,a,new,mock,multipart,file,with,the,given,content,param,name,the,name,of,the,file,param,content,the,content,of,the,file;public,mock,multipart,http,servlet,request,builder,file,string,name,byte,content,this,files,add,new,mock,multipart,file,name,content,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(String name, byte[] content);1389648334;Create a new MockMultipartFile with the given content._@param name the name of the file_@param content the content of the file;public MockMultipartHttpServletRequestBuilder file(String name, byte[] content) {_		this.files.add(new MockMultipartFile(name, content))__		return this__	};create,a,new,mock,multipart,file,with,the,given,content,param,name,the,name,of,the,file,param,content,the,content,of,the,file;public,mock,multipart,http,servlet,request,builder,file,string,name,byte,content,this,files,add,new,mock,multipart,file,name,content,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(String name, byte[] content);1395669695;Create a new MockMultipartFile with the given content._@param name the name of the file_@param content the content of the file;public MockMultipartHttpServletRequestBuilder file(String name, byte[] content) {_		this.files.add(new MockMultipartFile(name, content))__		return this__	};create,a,new,mock,multipart,file,with,the,given,content,param,name,the,name,of,the,file,param,content,the,content,of,the,file;public,mock,multipart,http,servlet,request,builder,file,string,name,byte,content,this,files,add,new,mock,multipart,file,name,content,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(String name, byte[] content);1395669695;Create a new MockMultipartFile with the given content._@param name the name of the file_@param content the content of the file;public MockMultipartHttpServletRequestBuilder file(String name, byte[] content) {_		this.files.add(new MockMultipartFile(name, content))__		return this__	};create,a,new,mock,multipart,file,with,the,given,content,param,name,the,name,of,the,file,param,content,the,content,of,the,file;public,mock,multipart,http,servlet,request,builder,file,string,name,byte,content,this,files,add,new,mock,multipart,file,name,content,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(String name, byte[] content);1437424889;Create a new MockMultipartFile with the given content._@param name the name of the file_@param content the content of the file;public MockMultipartHttpServletRequestBuilder file(String name, byte[] content) {_		this.files.add(new MockMultipartFile(name, content))__		return this__	};create,a,new,mock,multipart,file,with,the,given,content,param,name,the,name,of,the,file,param,content,the,content,of,the,file;public,mock,multipart,http,servlet,request,builder,file,string,name,byte,content,this,files,add,new,mock,multipart,file,name,content,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(String name, byte[] content);1437580205;Create a new MockMultipartFile with the given content._@param name the name of the file_@param content the content of the file;public MockMultipartHttpServletRequestBuilder file(String name, byte[] content) {_		this.files.add(new MockMultipartFile(name, content))__		return this__	};create,a,new,mock,multipart,file,with,the,given,content,param,name,the,name,of,the,file,param,content,the,content,of,the,file;public,mock,multipart,http,servlet,request,builder,file,string,name,byte,content,this,files,add,new,mock,multipart,file,name,content,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(String name, byte[] content);1467730834;Create a new MockMultipartFile with the given content._@param name the name of the file_@param content the content of the file;public MockMultipartHttpServletRequestBuilder file(String name, byte[] content) {_		this.files.add(new MockMultipartFile(name, content))__		return this__	};create,a,new,mock,multipart,file,with,the,given,content,param,name,the,name,of,the,file,param,content,the,content,of,the,file;public,mock,multipart,http,servlet,request,builder,file,string,name,byte,content,this,files,add,new,mock,multipart,file,name,content,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(String name, byte[] content);1480591810;Create a new MockMultipartFile with the given content._@param name the name of the file_@param content the content of the file;public MockMultipartHttpServletRequestBuilder file(String name, byte[] content) {_		this.files.add(new MockMultipartFile(name, content))__		return this__	};create,a,new,mock,multipart,file,with,the,given,content,param,name,the,name,of,the,file,param,content,the,content,of,the,file;public,mock,multipart,http,servlet,request,builder,file,string,name,byte,content,this,files,add,new,mock,multipart,file,name,content,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(String name, byte[] content);1485381930;Create a new MockMultipartFile with the given content._@param name the name of the file_@param content the content of the file;public MockMultipartHttpServletRequestBuilder file(String name, byte[] content) {_		this.files.add(new MockMultipartFile(name, content))__		return this__	};create,a,new,mock,multipart,file,with,the,given,content,param,name,the,name,of,the,file,param,content,the,content,of,the,file;public,mock,multipart,http,servlet,request,builder,file,string,name,byte,content,this,files,add,new,mock,multipart,file,name,content,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(String name, byte[] content);1496242568;Create a new MockMultipartFile with the given content._@param name the name of the file_@param content the content of the file;public MockMultipartHttpServletRequestBuilder file(String name, byte[] content) {_		this.files.add(new MockMultipartFile(name, content))__		return this__	};create,a,new,mock,multipart,file,with,the,given,content,param,name,the,name,of,the,file,param,content,the,content,of,the,file;public,mock,multipart,http,servlet,request,builder,file,string,name,byte,content,this,files,add,new,mock,multipart,file,name,content,return,this
MockMultipartHttpServletRequestBuilder -> MockMultipartHttpServletRequestBuilder(URI uri);1395669695;Package-private constructor. Use static factory methods in_{@link MockMvcRequestBuilders}._<p>For other ways to initialize a {@code MockMultipartHttpServletRequest},_see {@link #with(RequestPostProcessor)} and the_{@link RequestPostProcessor} extension point._@param uri the URL_@since 4.0.3;MockMultipartHttpServletRequestBuilder(URI uri) {_		super(HttpMethod.POST, uri)__		super.contentType(MediaType.MULTIPART_FORM_DATA)__	};package,private,constructor,use,static,factory,methods,in,link,mock,mvc,request,builders,p,for,other,ways,to,initialize,a,code,mock,multipart,http,servlet,request,see,link,with,request,post,processor,and,the,link,request,post,processor,extension,point,param,uri,the,url,since,4,0,3;mock,multipart,http,servlet,request,builder,uri,uri,super,http,method,post,uri,super,content,type,media,type
MockMultipartHttpServletRequestBuilder -> MockMultipartHttpServletRequestBuilder(URI uri);1437424889;Package-private constructor. Use static factory methods in_{@link MockMvcRequestBuilders}._<p>For other ways to initialize a {@code MockMultipartHttpServletRequest},_see {@link #with(RequestPostProcessor)} and the_{@link RequestPostProcessor} extension point._@param uri the URL_@since 4.0.3;MockMultipartHttpServletRequestBuilder(URI uri) {_		super(HttpMethod.POST, uri)__		super.contentType(MediaType.MULTIPART_FORM_DATA)__	};package,private,constructor,use,static,factory,methods,in,link,mock,mvc,request,builders,p,for,other,ways,to,initialize,a,code,mock,multipart,http,servlet,request,see,link,with,request,post,processor,and,the,link,request,post,processor,extension,point,param,uri,the,url,since,4,0,3;mock,multipart,http,servlet,request,builder,uri,uri,super,http,method,post,uri,super,content,type,media,type
MockMultipartHttpServletRequestBuilder -> MockMultipartHttpServletRequestBuilder(URI uri);1437580205;Package-private constructor. Use static factory methods in_{@link MockMvcRequestBuilders}._<p>For other ways to initialize a {@code MockMultipartHttpServletRequest},_see {@link #with(RequestPostProcessor)} and the_{@link RequestPostProcessor} extension point._@param uri the URL_@since 4.0.3;MockMultipartHttpServletRequestBuilder(URI uri) {_		super(HttpMethod.POST, uri)__		super.contentType(MediaType.MULTIPART_FORM_DATA)__	};package,private,constructor,use,static,factory,methods,in,link,mock,mvc,request,builders,p,for,other,ways,to,initialize,a,code,mock,multipart,http,servlet,request,see,link,with,request,post,processor,and,the,link,request,post,processor,extension,point,param,uri,the,url,since,4,0,3;mock,multipart,http,servlet,request,builder,uri,uri,super,http,method,post,uri,super,content,type,media,type
MockMultipartHttpServletRequestBuilder -> MockMultipartHttpServletRequestBuilder(URI uri);1467730834;Package-private constructor. Use static factory methods in_{@link MockMvcRequestBuilders}._<p>For other ways to initialize a {@code MockMultipartHttpServletRequest},_see {@link #with(RequestPostProcessor)} and the_{@link RequestPostProcessor} extension point._@param uri the URL_@since 4.0.3;MockMultipartHttpServletRequestBuilder(URI uri) {_		super(HttpMethod.POST, uri)__		super.contentType(MediaType.MULTIPART_FORM_DATA)__	};package,private,constructor,use,static,factory,methods,in,link,mock,mvc,request,builders,p,for,other,ways,to,initialize,a,code,mock,multipart,http,servlet,request,see,link,with,request,post,processor,and,the,link,request,post,processor,extension,point,param,uri,the,url,since,4,0,3;mock,multipart,http,servlet,request,builder,uri,uri,super,http,method,post,uri,super,content,type,media,type
MockMultipartHttpServletRequestBuilder -> MockMultipartHttpServletRequestBuilder(URI uri);1480591810;Package-private constructor. Use static factory methods in_{@link MockMvcRequestBuilders}._<p>For other ways to initialize a {@code MockMultipartHttpServletRequest},_see {@link #with(RequestPostProcessor)} and the_{@link RequestPostProcessor} extension point._@param uri the URL_@since 4.0.3;MockMultipartHttpServletRequestBuilder(URI uri) {_		super(HttpMethod.POST, uri)__		super.contentType(MediaType.MULTIPART_FORM_DATA)__	};package,private,constructor,use,static,factory,methods,in,link,mock,mvc,request,builders,p,for,other,ways,to,initialize,a,code,mock,multipart,http,servlet,request,see,link,with,request,post,processor,and,the,link,request,post,processor,extension,point,param,uri,the,url,since,4,0,3;mock,multipart,http,servlet,request,builder,uri,uri,super,http,method,post,uri,super,content,type,media,type
MockMultipartHttpServletRequestBuilder -> MockMultipartHttpServletRequestBuilder(URI uri);1485381930;Package-private constructor. Use static factory methods in_{@link MockMvcRequestBuilders}._<p>For other ways to initialize a {@code MockMultipartHttpServletRequest},_see {@link #with(RequestPostProcessor)} and the_{@link RequestPostProcessor} extension point._@param uri the URL_@since 4.0.3;MockMultipartHttpServletRequestBuilder(URI uri) {_		super(HttpMethod.POST, uri)__		super.contentType(MediaType.MULTIPART_FORM_DATA)__	};package,private,constructor,use,static,factory,methods,in,link,mock,mvc,request,builders,p,for,other,ways,to,initialize,a,code,mock,multipart,http,servlet,request,see,link,with,request,post,processor,and,the,link,request,post,processor,extension,point,param,uri,the,url,since,4,0,3;mock,multipart,http,servlet,request,builder,uri,uri,super,http,method,post,uri,super,content,type,media,type
MockMultipartHttpServletRequestBuilder -> MockMultipartHttpServletRequestBuilder(URI uri);1496242568;Package-private constructor. Use static factory methods in_{@link MockMvcRequestBuilders}._<p>For other ways to initialize a {@code MockMultipartHttpServletRequest},_see {@link #with(RequestPostProcessor)} and the_{@link RequestPostProcessor} extension point._@param uri the URL_@since 4.0.3;MockMultipartHttpServletRequestBuilder(URI uri) {_		super(HttpMethod.POST, uri)__		super.contentType(MediaType.MULTIPART_FORM_DATA)__	};package,private,constructor,use,static,factory,methods,in,link,mock,mvc,request,builders,p,for,other,ways,to,initialize,a,code,mock,multipart,http,servlet,request,see,link,with,request,post,processor,and,the,link,request,post,processor,extension,point,param,uri,the,url,since,4,0,3;mock,multipart,http,servlet,request,builder,uri,uri,super,http,method,post,uri,super,content,type,media,type
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file);1383669853;Add the given MockMultipartFile.__@param file the multipart file;public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file) {_		this.files.add(file)__		return this__	};add,the,given,mock,multipart,file,param,file,the,multipart,file;public,mock,multipart,http,servlet,request,builder,file,mock,multipart,file,file,this,files,add,file,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file);1389648334;Add the given MockMultipartFile._@param file the multipart file;public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file) {_		this.files.add(file)__		return this__	};add,the,given,mock,multipart,file,param,file,the,multipart,file;public,mock,multipart,http,servlet,request,builder,file,mock,multipart,file,file,this,files,add,file,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file);1395669695;Add the given MockMultipartFile._@param file the multipart file;public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file) {_		this.files.add(file)__		return this__	};add,the,given,mock,multipart,file,param,file,the,multipart,file;public,mock,multipart,http,servlet,request,builder,file,mock,multipart,file,file,this,files,add,file,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file);1395669695;Add the given MockMultipartFile._@param file the multipart file;public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file) {_		this.files.add(file)__		return this__	};add,the,given,mock,multipart,file,param,file,the,multipart,file;public,mock,multipart,http,servlet,request,builder,file,mock,multipart,file,file,this,files,add,file,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file);1437424889;Add the given MockMultipartFile._@param file the multipart file;public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file) {_		this.files.add(file)__		return this__	};add,the,given,mock,multipart,file,param,file,the,multipart,file;public,mock,multipart,http,servlet,request,builder,file,mock,multipart,file,file,this,files,add,file,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file);1437580205;Add the given MockMultipartFile._@param file the multipart file;public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file) {_		this.files.add(file)__		return this__	};add,the,given,mock,multipart,file,param,file,the,multipart,file;public,mock,multipart,http,servlet,request,builder,file,mock,multipart,file,file,this,files,add,file,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file);1467730834;Add the given MockMultipartFile._@param file the multipart file;public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file) {_		this.files.add(file)__		return this__	};add,the,given,mock,multipart,file,param,file,the,multipart,file;public,mock,multipart,http,servlet,request,builder,file,mock,multipart,file,file,this,files,add,file,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file);1480591810;Add the given MockMultipartFile._@param file the multipart file;public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file) {_		this.files.add(file)__		return this__	};add,the,given,mock,multipart,file,param,file,the,multipart,file;public,mock,multipart,http,servlet,request,builder,file,mock,multipart,file,file,this,files,add,file,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file);1485381930;Add the given MockMultipartFile._@param file the multipart file;public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file) {_		this.files.add(file)__		return this__	};add,the,given,mock,multipart,file,param,file,the,multipart,file;public,mock,multipart,http,servlet,request,builder,file,mock,multipart,file,file,this,files,add,file,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file);1496242568;Add the given MockMultipartFile._@param file the multipart file;public MockMultipartHttpServletRequestBuilder file(MockMultipartFile file) {_		this.files.add(file)__		return this__	};add,the,given,mock,multipart,file,param,file,the,multipart,file;public,mock,multipart,http,servlet,request,builder,file,mock,multipart,file,file,this,files,add,file,return,this
MockMultipartHttpServletRequestBuilder -> MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... uriVariables);1480591810;Package-private constructor. Use static factory methods in_{@link MockMvcRequestBuilders}._<p>For other ways to initialize a {@code MockMultipartHttpServletRequest},_see {@link #with(RequestPostProcessor)} and the_{@link RequestPostProcessor} extension point._@param urlTemplate a URL template_ the resulting URL will be encoded_@param uriVariables zero or more URI variables;MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... uriVariables) {_		super(HttpMethod.POST, urlTemplate, uriVariables)__		super.contentType(MediaType.MULTIPART_FORM_DATA)__	};package,private,constructor,use,static,factory,methods,in,link,mock,mvc,request,builders,p,for,other,ways,to,initialize,a,code,mock,multipart,http,servlet,request,see,link,with,request,post,processor,and,the,link,request,post,processor,extension,point,param,url,template,a,url,template,the,resulting,url,will,be,encoded,param,uri,variables,zero,or,more,uri,variables;mock,multipart,http,servlet,request,builder,string,url,template,object,uri,variables,super,http,method,post,url,template,uri,variables,super,content,type,media,type
MockMultipartHttpServletRequestBuilder -> MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... uriVariables);1485381930;Package-private constructor. Use static factory methods in_{@link MockMvcRequestBuilders}._<p>For other ways to initialize a {@code MockMultipartHttpServletRequest},_see {@link #with(RequestPostProcessor)} and the_{@link RequestPostProcessor} extension point._@param urlTemplate a URL template_ the resulting URL will be encoded_@param uriVariables zero or more URI variables;MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... uriVariables) {_		super(HttpMethod.POST, urlTemplate, uriVariables)__		super.contentType(MediaType.MULTIPART_FORM_DATA)__	};package,private,constructor,use,static,factory,methods,in,link,mock,mvc,request,builders,p,for,other,ways,to,initialize,a,code,mock,multipart,http,servlet,request,see,link,with,request,post,processor,and,the,link,request,post,processor,extension,point,param,url,template,a,url,template,the,resulting,url,will,be,encoded,param,uri,variables,zero,or,more,uri,variables;mock,multipart,http,servlet,request,builder,string,url,template,object,uri,variables,super,http,method,post,url,template,uri,variables,super,content,type,media,type
MockMultipartHttpServletRequestBuilder -> MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... uriVariables);1496242568;Package-private constructor. Use static factory methods in_{@link MockMvcRequestBuilders}._<p>For other ways to initialize a {@code MockMultipartHttpServletRequest},_see {@link #with(RequestPostProcessor)} and the_{@link RequestPostProcessor} extension point._@param urlTemplate a URL template_ the resulting URL will be encoded_@param uriVariables zero or more URI variables;MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... uriVariables) {_		super(HttpMethod.POST, urlTemplate, uriVariables)__		super.contentType(MediaType.MULTIPART_FORM_DATA)__	};package,private,constructor,use,static,factory,methods,in,link,mock,mvc,request,builders,p,for,other,ways,to,initialize,a,code,mock,multipart,http,servlet,request,see,link,with,request,post,processor,and,the,link,request,post,processor,extension,point,param,url,template,a,url,template,the,resulting,url,will,be,encoded,param,uri,variables,zero,or,more,uri,variables;mock,multipart,http,servlet,request,builder,string,url,template,object,uri,variables,super,http,method,post,url,template,uri,variables,super,content,type,media,type
MockMultipartHttpServletRequestBuilder -> MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... urlVariables);1383669853;Package private constructor. Use static factory methods in_{@link MockMvcRequestBuilders}.__<p>For other ways to initialize a {@code MockMultipartHttpServletRequest},_see {@link #with(RequestPostProcessor)} and the_{@link RequestPostProcessor} extension point.__@param urlTemplate a URL template_ the resulting URL will be encoded_@param urlVariables zero or more URL variables;MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... urlVariables) {_		super(HttpMethod.POST, urlTemplate, urlVariables)__		super.contentType(MediaType.MULTIPART_FORM_DATA)__	};package,private,constructor,use,static,factory,methods,in,link,mock,mvc,request,builders,p,for,other,ways,to,initialize,a,code,mock,multipart,http,servlet,request,see,link,with,request,post,processor,and,the,link,request,post,processor,extension,point,param,url,template,a,url,template,the,resulting,url,will,be,encoded,param,url,variables,zero,or,more,url,variables;mock,multipart,http,servlet,request,builder,string,url,template,object,url,variables,super,http,method,post,url,template,url,variables,super,content,type,media,type
MockMultipartHttpServletRequestBuilder -> MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... urlVariables);1389648334;Package-private constructor. Use static factory methods in_{@link MockMvcRequestBuilders}._<p>For other ways to initialize a {@code MockMultipartHttpServletRequest},_see {@link #with(RequestPostProcessor)} and the_{@link RequestPostProcessor} extension point._@param urlTemplate a URL template_ the resulting URL will be encoded_@param urlVariables zero or more URL variables;MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... urlVariables) {_		super(HttpMethod.POST, urlTemplate, urlVariables)__		super.contentType(MediaType.MULTIPART_FORM_DATA)__	};package,private,constructor,use,static,factory,methods,in,link,mock,mvc,request,builders,p,for,other,ways,to,initialize,a,code,mock,multipart,http,servlet,request,see,link,with,request,post,processor,and,the,link,request,post,processor,extension,point,param,url,template,a,url,template,the,resulting,url,will,be,encoded,param,url,variables,zero,or,more,url,variables;mock,multipart,http,servlet,request,builder,string,url,template,object,url,variables,super,http,method,post,url,template,url,variables,super,content,type,media,type
MockMultipartHttpServletRequestBuilder -> MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... urlVariables);1395669695;Package-private constructor. Use static factory methods in_{@link MockMvcRequestBuilders}._<p>For other ways to initialize a {@code MockMultipartHttpServletRequest},_see {@link #with(RequestPostProcessor)} and the_{@link RequestPostProcessor} extension point._@param urlTemplate a URL template_ the resulting URL will be encoded_@param urlVariables zero or more URL variables;MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... urlVariables) {_		super(HttpMethod.POST, urlTemplate, urlVariables)__		super.contentType(MediaType.MULTIPART_FORM_DATA)__	};package,private,constructor,use,static,factory,methods,in,link,mock,mvc,request,builders,p,for,other,ways,to,initialize,a,code,mock,multipart,http,servlet,request,see,link,with,request,post,processor,and,the,link,request,post,processor,extension,point,param,url,template,a,url,template,the,resulting,url,will,be,encoded,param,url,variables,zero,or,more,url,variables;mock,multipart,http,servlet,request,builder,string,url,template,object,url,variables,super,http,method,post,url,template,url,variables,super,content,type,media,type
MockMultipartHttpServletRequestBuilder -> MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... urlVariables);1395669695;Package-private constructor. Use static factory methods in_{@link MockMvcRequestBuilders}._<p>For other ways to initialize a {@code MockMultipartHttpServletRequest},_see {@link #with(RequestPostProcessor)} and the_{@link RequestPostProcessor} extension point._@param urlTemplate a URL template_ the resulting URL will be encoded_@param urlVariables zero or more URL variables;MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... urlVariables) {_		super(HttpMethod.POST, urlTemplate, urlVariables)__		super.contentType(MediaType.MULTIPART_FORM_DATA)__	};package,private,constructor,use,static,factory,methods,in,link,mock,mvc,request,builders,p,for,other,ways,to,initialize,a,code,mock,multipart,http,servlet,request,see,link,with,request,post,processor,and,the,link,request,post,processor,extension,point,param,url,template,a,url,template,the,resulting,url,will,be,encoded,param,url,variables,zero,or,more,url,variables;mock,multipart,http,servlet,request,builder,string,url,template,object,url,variables,super,http,method,post,url,template,url,variables,super,content,type,media,type
MockMultipartHttpServletRequestBuilder -> MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... urlVariables);1437424889;Package-private constructor. Use static factory methods in_{@link MockMvcRequestBuilders}._<p>For other ways to initialize a {@code MockMultipartHttpServletRequest},_see {@link #with(RequestPostProcessor)} and the_{@link RequestPostProcessor} extension point._@param urlTemplate a URL template_ the resulting URL will be encoded_@param urlVariables zero or more URL variables;MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... urlVariables) {_		super(HttpMethod.POST, urlTemplate, urlVariables)__		super.contentType(MediaType.MULTIPART_FORM_DATA)__	};package,private,constructor,use,static,factory,methods,in,link,mock,mvc,request,builders,p,for,other,ways,to,initialize,a,code,mock,multipart,http,servlet,request,see,link,with,request,post,processor,and,the,link,request,post,processor,extension,point,param,url,template,a,url,template,the,resulting,url,will,be,encoded,param,url,variables,zero,or,more,url,variables;mock,multipart,http,servlet,request,builder,string,url,template,object,url,variables,super,http,method,post,url,template,url,variables,super,content,type,media,type
MockMultipartHttpServletRequestBuilder -> MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... urlVariables);1437580205;Package-private constructor. Use static factory methods in_{@link MockMvcRequestBuilders}._<p>For other ways to initialize a {@code MockMultipartHttpServletRequest},_see {@link #with(RequestPostProcessor)} and the_{@link RequestPostProcessor} extension point._@param urlTemplate a URL template_ the resulting URL will be encoded_@param urlVariables zero or more URL variables;MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... urlVariables) {_		super(HttpMethod.POST, urlTemplate, urlVariables)__		super.contentType(MediaType.MULTIPART_FORM_DATA)__	};package,private,constructor,use,static,factory,methods,in,link,mock,mvc,request,builders,p,for,other,ways,to,initialize,a,code,mock,multipart,http,servlet,request,see,link,with,request,post,processor,and,the,link,request,post,processor,extension,point,param,url,template,a,url,template,the,resulting,url,will,be,encoded,param,url,variables,zero,or,more,url,variables;mock,multipart,http,servlet,request,builder,string,url,template,object,url,variables,super,http,method,post,url,template,url,variables,super,content,type,media,type
MockMultipartHttpServletRequestBuilder -> MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... urlVariables);1467730834;Package-private constructor. Use static factory methods in_{@link MockMvcRequestBuilders}._<p>For other ways to initialize a {@code MockMultipartHttpServletRequest},_see {@link #with(RequestPostProcessor)} and the_{@link RequestPostProcessor} extension point._@param urlTemplate a URL template_ the resulting URL will be encoded_@param urlVariables zero or more URL variables;MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... urlVariables) {_		super(HttpMethod.POST, urlTemplate, urlVariables)__		super.contentType(MediaType.MULTIPART_FORM_DATA)__	};package,private,constructor,use,static,factory,methods,in,link,mock,mvc,request,builders,p,for,other,ways,to,initialize,a,code,mock,multipart,http,servlet,request,see,link,with,request,post,processor,and,the,link,request,post,processor,extension,point,param,url,template,a,url,template,the,resulting,url,will,be,encoded,param,url,variables,zero,or,more,url,variables;mock,multipart,http,servlet,request,builder,string,url,template,object,url,variables,super,http,method,post,url,template,url,variables,super,content,type,media,type
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder part(Part... parts);1485381930;Add {@link Part} components to the request._@param parts one or more parts to add_@since 5.0;public MockMultipartHttpServletRequestBuilder part(Part... parts) {_		Assert.notEmpty(parts, "'parts' must not be empty")__		for (Part part : parts) {_			this.parts.add(part.getName(), part)__		}_		return this__	};add,link,part,components,to,the,request,param,parts,one,or,more,parts,to,add,since,5,0;public,mock,multipart,http,servlet,request,builder,part,part,parts,assert,not,empty,parts,parts,must,not,be,empty,for,part,part,parts,this,parts,add,part,get,name,part,return,this
MockMultipartHttpServletRequestBuilder -> public MockMultipartHttpServletRequestBuilder part(Part... parts);1496242568;Add {@link Part} components to the request._@param parts one or more parts to add_@since 5.0;public MockMultipartHttpServletRequestBuilder part(Part... parts) {_		Assert.notEmpty(parts, "'parts' must not be empty")__		for (Part part : parts) {_			this.parts.add(part.getName(), part)__		}_		return this__	};add,link,part,components,to,the,request,param,parts,one,or,more,parts,to,add,since,5,0;public,mock,multipart,http,servlet,request,builder,part,part,parts,assert,not,empty,parts,parts,must,not,be,empty,for,part,part,parts,this,parts,add,part,get,name,part,return,this
MockMultipartHttpServletRequestBuilder -> @Override 	protected final MockHttpServletRequest createServletRequest(ServletContext servletContext);1437424889;Create a new {@link MockMultipartHttpServletRequest} based on the_supplied {@code ServletContext} and the {@code MockMultipartFiles}_added to this builder._<p>Can be overridden in subclasses.;@Override_	protected final MockHttpServletRequest createServletRequest(ServletContext servletContext) {_		MockMultipartHttpServletRequest request = new MockMultipartHttpServletRequest(servletContext)__		for (MockMultipartFile file : this.files) {_			request.addFile(file)__		}_		return request__	};create,a,new,link,mock,multipart,http,servlet,request,based,on,the,supplied,code,servlet,context,and,the,code,mock,multipart,files,added,to,this,builder,p,can,be,overridden,in,subclasses;override,protected,final,mock,http,servlet,request,create,servlet,request,servlet,context,servlet,context,mock,multipart,http,servlet,request,request,new,mock,multipart,http,servlet,request,servlet,context,for,mock,multipart,file,file,this,files,request,add,file,file,return,request
MockMultipartHttpServletRequestBuilder -> @Override 	protected final MockHttpServletRequest createServletRequest(ServletContext servletContext);1437580205;Create a new {@link MockMultipartHttpServletRequest} based on the_supplied {@code ServletContext} and the {@code MockMultipartFiles}_added to this builder.;@Override_	protected final MockHttpServletRequest createServletRequest(ServletContext servletContext) {_		MockMultipartHttpServletRequest request = new MockMultipartHttpServletRequest(servletContext)__		for (MockMultipartFile file : this.files) {_			request.addFile(file)__		}_		return request__	};create,a,new,link,mock,multipart,http,servlet,request,based,on,the,supplied,code,servlet,context,and,the,code,mock,multipart,files,added,to,this,builder;override,protected,final,mock,http,servlet,request,create,servlet,request,servlet,context,servlet,context,mock,multipart,http,servlet,request,request,new,mock,multipart,http,servlet,request,servlet,context,for,mock,multipart,file,file,this,files,request,add,file,file,return,request
MockMultipartHttpServletRequestBuilder -> @Override 	protected final MockHttpServletRequest createServletRequest(ServletContext servletContext);1467730834;Create a new {@link MockMultipartHttpServletRequest} based on the_supplied {@code ServletContext} and the {@code MockMultipartFiles}_added to this builder.;@Override_	protected final MockHttpServletRequest createServletRequest(ServletContext servletContext) {_		MockMultipartHttpServletRequest request = new MockMultipartHttpServletRequest(servletContext)__		for (MockMultipartFile file : this.files) {_			request.addFile(file)__		}_		return request__	};create,a,new,link,mock,multipart,http,servlet,request,based,on,the,supplied,code,servlet,context,and,the,code,mock,multipart,files,added,to,this,builder;override,protected,final,mock,http,servlet,request,create,servlet,request,servlet,context,servlet,context,mock,multipart,http,servlet,request,request,new,mock,multipart,http,servlet,request,servlet,context,for,mock,multipart,file,file,this,files,request,add,file,file,return,request
MockMultipartHttpServletRequestBuilder -> @Override 	protected final MockHttpServletRequest createServletRequest(ServletContext servletContext);1480591810;Create a new {@link MockMultipartHttpServletRequest} based on the_supplied {@code ServletContext} and the {@code MockMultipartFiles}_added to this builder.;@Override_	protected final MockHttpServletRequest createServletRequest(ServletContext servletContext) {_		MockMultipartHttpServletRequest request = new MockMultipartHttpServletRequest(servletContext)__		for (MockMultipartFile file : this.files) {_			request.addFile(file)__		}_		return request__	};create,a,new,link,mock,multipart,http,servlet,request,based,on,the,supplied,code,servlet,context,and,the,code,mock,multipart,files,added,to,this,builder;override,protected,final,mock,http,servlet,request,create,servlet,request,servlet,context,servlet,context,mock,multipart,http,servlet,request,request,new,mock,multipart,http,servlet,request,servlet,context,for,mock,multipart,file,file,this,files,request,add,file,file,return,request
MockMultipartHttpServletRequestBuilder -> @Override 	protected final MockHttpServletRequest createServletRequest(ServletContext servletContext);1485381930;Create a new {@link MockMultipartHttpServletRequest} based on the_supplied {@code ServletContext} and the {@code MockMultipartFiles}_added to this builder.;@Override_	protected final MockHttpServletRequest createServletRequest(ServletContext servletContext) {__		MockMultipartHttpServletRequest request = new MockMultipartHttpServletRequest(servletContext)__		this.files.stream().forEach(request::addFile)__		this.parts.values().stream().flatMap(Collection::stream).forEach(request::addPart)___		if (!this.parts.isEmpty()) {_			new StandardMultipartHttpServletRequest(request)_					.getMultiFileMap().values().stream().flatMap(Collection::stream)_					.forEach(request::addFile)__		}__		return request__	};create,a,new,link,mock,multipart,http,servlet,request,based,on,the,supplied,code,servlet,context,and,the,code,mock,multipart,files,added,to,this,builder;override,protected,final,mock,http,servlet,request,create,servlet,request,servlet,context,servlet,context,mock,multipart,http,servlet,request,request,new,mock,multipart,http,servlet,request,servlet,context,this,files,stream,for,each,request,add,file,this,parts,values,stream,flat,map,collection,stream,for,each,request,add,part,if,this,parts,is,empty,new,standard,multipart,http,servlet,request,request,get,multi,file,map,values,stream,flat,map,collection,stream,for,each,request,add,file,return,request
MockMultipartHttpServletRequestBuilder -> @Override 	protected final MockHttpServletRequest createServletRequest(ServletContext servletContext);1496242568;Create a new {@link MockMultipartHttpServletRequest} based on the_supplied {@code ServletContext} and the {@code MockMultipartFiles}_added to this builder.;@Override_	protected final MockHttpServletRequest createServletRequest(ServletContext servletContext) {__		MockMultipartHttpServletRequest request = new MockMultipartHttpServletRequest(servletContext)__		this.files.stream().forEach(request::addFile)__		this.parts.values().stream().flatMap(Collection::stream).forEach(request::addPart)___		if (!this.parts.isEmpty()) {_			new StandardMultipartHttpServletRequest(request)_					.getMultiFileMap().values().stream().flatMap(Collection::stream)_					.forEach(request::addFile)__		}__		return request__	};create,a,new,link,mock,multipart,http,servlet,request,based,on,the,supplied,code,servlet,context,and,the,code,mock,multipart,files,added,to,this,builder;override,protected,final,mock,http,servlet,request,create,servlet,request,servlet,context,servlet,context,mock,multipart,http,servlet,request,request,new,mock,multipart,http,servlet,request,servlet,context,this,files,stream,for,each,request,add,file,this,parts,values,stream,flat,map,collection,stream,for,each,request,add,part,if,this,parts,is,empty,new,standard,multipart,http,servlet,request,request,get,multi,file,map,values,stream,flat,map,collection,stream,for,each,request,add,file,return,request
