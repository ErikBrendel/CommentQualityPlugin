commented;modifiers;parameterAmount;loc;comment;code
false;public;1;30;;public MockHttpServletRequest buildRequest(ServletContext servletContext) {     Charset charset = getCharset().     String httpMethod = this.webRequest.getHttpMethod().name().     UriComponents uriComponents = uriComponents().     String path = uriComponents.getPath().     MockHttpServletRequest request = new HtmlUnitMockHttpServletRequest(servletContext, httpMethod, (path != null ? path : "")).     parent(request, this.parentBuilder).     String host = uriComponents.getHost().     // needs to be first for additional headers     request.setServerName(host != null ? host : "").     authType(request).     request.setCharacterEncoding(charset.name()).     content(request, charset).     contextPath(request, uriComponents).     contentType(request).     cookies(request).     headers(request).     locales(request).     servletPath(uriComponents, request).     params(request, uriComponents).     ports(uriComponents, request).     request.setProtocol("HTTP/1.1").     request.setQueryString(uriComponents.getQuery()).     String scheme = uriComponents.getScheme().     request.setScheme(scheme != null ? scheme : "").     request.setPathInfo(null).     return postProcess(request). }
false;private;0;4;;private Charset getCharset() {     Charset charset = this.webRequest.getCharset().     return (charset != null ? charset : StandardCharsets.ISO_8859_1). }
false;private;1;9;;private MockHttpServletRequest postProcess(MockHttpServletRequest request) {     if (this.parentPostProcessor != null) {         request = this.parentPostProcessor.postProcessRequest(request).     }     if (this.forwardPostProcessor != null) {         request = this.forwardPostProcessor.postProcessRequest(request).     }     return request. }
false;private;2;48;;private void parent(MockHttpServletRequest request, @Nullable RequestBuilder parent) {     if (parent == null) {         return.     }     MockHttpServletRequest parentRequest = parent.buildRequest(request.getServletContext()).     // session     HttpSession parentSession = parentRequest.getSession(false).     if (parentSession != null) {         HttpSession localSession = request.getSession().         Assert.state(localSession != null, "No local HttpSession").         Enumeration<String> attrNames = parentSession.getAttributeNames().         while (attrNames.hasMoreElements()) {             String attrName = attrNames.nextElement().             Object attrValue = parentSession.getAttribute(attrName).             localSession.setAttribute(attrName, attrValue).         }     }     // header     Enumeration<String> headerNames = parentRequest.getHeaderNames().     while (headerNames.hasMoreElements()) {         String attrName = headerNames.nextElement().         Enumeration<String> attrValues = parentRequest.getHeaders(attrName).         while (attrValues.hasMoreElements()) {             String attrValue = attrValues.nextElement().             request.addHeader(attrName, attrValue).         }     }     // parameter     Map<String, String[]> parentParams = parentRequest.getParameterMap().     parentParams.forEach(request::addParameter).     // cookie     Cookie[] parentCookies = parentRequest.getCookies().     if (!ObjectUtils.isEmpty(parentCookies)) {         request.setCookies(parentCookies).     }     // request attribute     Enumeration<String> parentAttrNames = parentRequest.getAttributeNames().     while (parentAttrNames.hasMoreElements()) {         String parentAttrName = parentAttrNames.nextElement().         request.setAttribute(parentAttrName, parentRequest.getAttribute(parentAttrName)).     } }
true;public;1;4;/**  * Set the contextPath to be used.  * <p>The value may be null in which case the first path segment of the  * URL is turned into the contextPath. Otherwise it must conform to  * {@link HttpServletRequest#getContextPath()} which states it can be  * an empty string, or it must start with a "/" and not end with a "/".  * @param contextPath a valid contextPath  * @throws IllegalArgumentException if the contextPath is not a valid  * {@link HttpServletRequest#getContextPath()}  */ ;/**  * Set the contextPath to be used.  * <p>The value may be null in which case the first path segment of the  * URL is turned into the contextPath. Otherwise it must conform to  * {@link HttpServletRequest#getContextPath()} which states it can be  * an empty string, or it must start with a "/" and not end with a "/".  * @param contextPath a valid contextPath  * @throws IllegalArgumentException if the contextPath is not a valid  * {@link HttpServletRequest#getContextPath()}  */ public void setContextPath(@Nullable String contextPath) {     MockMvcWebConnection.validateContextPath(contextPath).     this.contextPath = contextPath. }
false;public;1;3;;public void setForwardPostProcessor(RequestPostProcessor forwardPostProcessor) {     this.forwardPostProcessor = forwardPostProcessor. }
false;private;1;7;;private void authType(MockHttpServletRequest request) {     String authorization = header("Authorization").     String[] authSplit = StringUtils.split(authorization, ": ").     if (authSplit != null) {         request.setAuthType(authSplit[0]).     } }
false;private;2;7;;private void content(MockHttpServletRequest request, Charset charset) {     String requestBody = this.webRequest.getRequestBody().     if (requestBody == null) {         return.     }     request.setContent(requestBody.getBytes(charset)). }
false;private;1;10;;private void contentType(MockHttpServletRequest request) {     String contentType = header("Content-Type").     if (contentType == null) {         FormEncodingType encodingType = this.webRequest.getEncodingType().         if (encodingType != null) {             contentType = encodingType.getName().         }     }     request.setContentType(contentType != null ? contentType : MediaType.ALL_VALUE). }
false;private;2;18;;private void contextPath(MockHttpServletRequest request, UriComponents uriComponents) {     if (this.contextPath == null) {         List<String> pathSegments = uriComponents.getPathSegments().         if (pathSegments.isEmpty()) {             request.setContextPath("").         } else {             request.setContextPath("/" + pathSegments.get(0)).         }     } else {         String path = uriComponents.getPath().         Assert.isTrue(path != null && path.startsWith(this.contextPath), () -> "\"" + uriComponents.getPath() + "\" should start with context path \"" + this.contextPath + "\"").         request.setContextPath(this.contextPath).     } }
false;private;1;32;;private void cookies(MockHttpServletRequest request) {     List<Cookie> cookies = new ArrayList<>().     String cookieHeaderValue = header("Cookie").     if (cookieHeaderValue != null) {         StringTokenizer tokens = new StringTokenizer(cookieHeaderValue, "=.").         while (tokens.hasMoreTokens()) {             String cookieName = tokens.nextToken().trim().             Assert.isTrue(tokens.hasMoreTokens(), () -> "Expected value for cookie name '" + cookieName + "': full cookie header was [" + cookieHeaderValue + "]").             String cookieValue = tokens.nextToken().trim().             processCookie(request, cookies, new Cookie(cookieName, cookieValue)).         }     }     Set<com.gargoylesoftware.htmlunit.util.Cookie> managedCookies = this.webClient.getCookies(this.webRequest.getUrl()).     for (com.gargoylesoftware.htmlunit.util.Cookie cookie : managedCookies) {         processCookie(request, cookies, new Cookie(cookie.getName(), cookie.getValue())).     }     Cookie[] parentCookies = request.getCookies().     if (parentCookies != null) {         for (Cookie cookie : parentCookies) {             cookies.add(cookie).         }     }     if (!ObjectUtils.isEmpty(cookies)) {         request.setCookies(cookies.toArray(new Cookie[0])).     } }
false;private;3;7;;private void processCookie(MockHttpServletRequest request, List<Cookie> cookies, Cookie cookie) {     cookies.add(cookie).     if ("JSESSIONID".equals(cookie.getName())) {         request.setRequestedSessionId(cookie.getValue()).         request.setSession(httpSession(request, cookie.getValue())).     } }
false;private;1;4;;@Nullable private String header(String headerName) {     return this.webRequest.getAdditionalHeaders().get(headerName). }
false;private;1;3;;private void headers(MockHttpServletRequest request) {     this.webRequest.getAdditionalHeaders().forEach(request::addHeader). }
false;private;2;18;;private MockHttpSession httpSession(MockHttpServletRequest request, final String sessionid) {     MockHttpSession session.     synchronized (this.sessions) {         session = this.sessions.get(sessionid).         if (session == null) {             session = new HtmlUnitMockHttpSession(request, sessionid).             session.setNew(true).             synchronized (this.sessions) {                 this.sessions.put(sessionid, session).             }             addSessionCookie(request, sessionid).         } else {             session.setNew(false).         }     }     return session. }
false;private;2;3;;private void addSessionCookie(MockHttpServletRequest request, String sessionid) {     getCookieManager().addCookie(createCookie(request, sessionid)). }
false;private;2;3;;private void removeSessionCookie(MockHttpServletRequest request, String sessionid) {     getCookieManager().removeCookie(createCookie(request, sessionid)). }
false;private;2;4;;private com.gargoylesoftware.htmlunit.util.Cookie createCookie(MockHttpServletRequest request, String sessionid) {     return new com.gargoylesoftware.htmlunit.util.Cookie(request.getServerName(), "JSESSIONID", sessionid, request.getContextPath() + "/", null, request.isSecure(), true). }
false;private;1;6;;private void locales(MockHttpServletRequest request) {     String locale = header("Accept-Language").     if (locale == null) {         request.addPreferredLocale(Locale.getDefault()).     } }
false;private;2;12;;private void params(MockHttpServletRequest request, UriComponents uriComponents) {     uriComponents.getQueryParams().forEach((name, values) -> {         String urlDecodedName = urlDecode(name).         values.forEach(value -> {             value = (value != null ? urlDecode(value) : "").             request.addParameter(urlDecodedName, value).         }).     }).     for (NameValuePair param : this.webRequest.getRequestParameters()) {         request.addParameter(param.getName(), param.getValue()).     } }
false;private;1;8;;private String urlDecode(String value) {     try {         return URLDecoder.decode(value, "UTF-8").     } catch (UnsupportedEncodingException ex) {         throw new IllegalStateException(ex).     } }
false;private;2;4;;private void servletPath(MockHttpServletRequest request, String requestPath) {     String servletPath = requestPath.substring(request.getContextPath().length()).     request.setServletPath(servletPath). }
false;private;2;7;;private void servletPath(UriComponents uriComponents, MockHttpServletRequest request) {     if ("".equals(request.getPathInfo())) {         request.setPathInfo(null).     }     String path = uriComponents.getPath().     servletPath(request, (path != null ? path : "")). }
false;private;2;12;;private void ports(UriComponents uriComponents, MockHttpServletRequest request) {     int serverPort = uriComponents.getPort().     request.setServerPort(serverPort).     if (serverPort == -1) {         int portConnection = this.webRequest.getUrl().getDefaultPort().         request.setLocalPort(serverPort).         request.setRemotePort(portConnection).     } else {         request.setRemotePort(serverPort).     } }
false;private;0;4;;private UriComponents uriComponents() {     URL url = this.webRequest.getUrl().     return UriComponentsBuilder.fromUriString(url.toExternalForm()).build(). }
false;public;0;4;;@Override public boolean isMergeEnabled() {     return true. }
false;public;1;17;;@Override public Object merge(@Nullable Object parent) {     if (parent instanceof RequestBuilder) {         if (parent instanceof MockHttpServletRequestBuilder) {             MockHttpServletRequestBuilder copiedParent = MockMvcRequestBuilders.get("/").             copiedParent.merge(parent).             this.parentBuilder = copiedParent.         } else {             this.parentBuilder = (RequestBuilder) parent.         }         if (parent instanceof SmartRequestBuilder) {             this.parentPostProcessor = (SmartRequestBuilder) parent.         }     }     return this. }
false;private;0;3;;private CookieManager getCookieManager() {     return this.webClient.getCookieManager(). }
false;public;1;16;;@Override public HttpSession getSession(boolean create) {     HttpSession session = super.getSession(false).     if (session == null && create) {         HtmlUnitMockHttpSession newSession = new HtmlUnitMockHttpSession(this).         setSession(newSession).         newSession.setNew(true).         String sessionid = newSession.getId().         synchronized (HtmlUnitRequestBuilder.this.sessions) {             HtmlUnitRequestBuilder.this.sessions.put(sessionid, newSession).         }         addSessionCookie(this, sessionid).         session = newSession.     }     return session. }
false;public;0;8;;@Override public void invalidate() {     super.invalidate().     synchronized (HtmlUnitRequestBuilder.this.sessions) {         HtmlUnitRequestBuilder.this.sessions.remove(getId()).     }     removeSessionCookie(this.request, getId()). }
