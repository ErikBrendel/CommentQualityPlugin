# id;timestamp;commentText;codeText;commentWords;codeWords
ContentResultMatchers -> public ResultMatcher source(final Matcher<? super Source> matcher);1383669853;Parse the response content as {@link DOMSource} and apply the given_Hamcrest {@link Matcher}.__@see <a href="http://code.google.com/p/xml-matchers/">xml-matchers</a>;public ResultMatcher source(final Matcher<? super Source> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertSource(content, matcher)__			}_		}__	};parse,the,response,content,as,link,domsource,and,apply,the,given,hamcrest,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,xml,matchers,a;public,result,matcher,source,final,matcher,super,source,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,source,content,matcher
ContentResultMatchers -> public ResultMatcher source(final Matcher<? super Source> matcher);1404269222;Parse the response content as {@link DOMSource} and apply the given_Hamcrest {@link Matcher}.__@see <a href="http://code.google.com/p/xml-matchers/">xml-matchers</a>;public ResultMatcher source(final Matcher<? super Source> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertSource(content, matcher)__			}_		}__	};parse,the,response,content,as,link,domsource,and,apply,the,given,hamcrest,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,xml,matchers,a;public,result,matcher,source,final,matcher,super,source,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,source,content,matcher
ContentResultMatchers -> public ResultMatcher source(final Matcher<? super Source> matcher);1413848647;Parse the response content as {@link DOMSource} and apply the given_Hamcrest {@link Matcher}.__@see <a href="http://code.google.com/p/xml-matchers/">xml-matchers</a>;public ResultMatcher source(final Matcher<? super Source> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertSource(content, matcher)__			}_		}__	};parse,the,response,content,as,link,domsource,and,apply,the,given,hamcrest,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,xml,matchers,a;public,result,matcher,source,final,matcher,super,source,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,source,content,matcher
ContentResultMatchers -> public ResultMatcher source(final Matcher<? super Source> matcher);1427238287;Parse the response content as {@link DOMSource} and apply the given_Hamcrest {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">xml-matchers</a>;public ResultMatcher source(final Matcher<? super Source> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertSource(content, matcher)__			}_		}__	};parse,the,response,content,as,link,domsource,and,apply,the,given,hamcrest,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,xml,matchers,a;public,result,matcher,source,final,matcher,super,source,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,source,content,matcher
ContentResultMatchers -> public ResultMatcher source(final Matcher<? super Source> matcher);1437424890;Parse the response content as {@link DOMSource} and apply the given_Hamcrest {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">xml-matchers</a>;public ResultMatcher source(final Matcher<? super Source> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertSource(content, matcher)__			}_		}__	};parse,the,response,content,as,link,domsource,and,apply,the,given,hamcrest,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,xml,matchers,a;public,result,matcher,source,final,matcher,super,source,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,source,content,matcher
ContentResultMatchers -> public ResultMatcher source(final Matcher<? super Source> matcher);1446134737;Parse the response content as {@link DOMSource} and apply the given_Hamcrest {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">xml-matchers</a>;public ResultMatcher source(final Matcher<? super Source> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertSource(content, matcher)__			}_		}__	};parse,the,response,content,as,link,domsource,and,apply,the,given,hamcrest,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,xml,matchers,a;public,result,matcher,source,final,matcher,super,source,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,source,content,matcher
ContentResultMatchers -> public ResultMatcher source(final Matcher<? super Source> matcher);1486652772;Parse the response content as {@link DOMSource} and apply the given_Hamcrest {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">xml-matchers</a>;public ResultMatcher source(final Matcher<? super Source> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertSource(content, matcher)__			}_		}__	};parse,the,response,content,as,link,domsource,and,apply,the,given,hamcrest,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,xml,matchers,a;public,result,matcher,source,final,matcher,super,source,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,source,content,matcher
ContentResultMatchers -> public ResultMatcher source(final Matcher<? super Source> matcher);1493235170;Parse the response content as {@link DOMSource} and apply the given_Hamcrest {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">xml-matchers</a>;public ResultMatcher source(final Matcher<? super Source> matcher) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			xmlHelper.assertSource(content, matcher)__		}__	};parse,the,response,content,as,link,domsource,and,apply,the,given,hamcrest,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,xml,matchers,a;public,result,matcher,source,final,matcher,super,source,matcher,return,result,string,content,result,get,response,get,content,as,string,xml,helper,assert,source,content,matcher
ContentResultMatchers -> public ResultMatcher source(final Matcher<? super Source> matcher);1496955179;Parse the response content as {@link DOMSource} and apply the given_Hamcrest {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">xml-matchers</a>;public ResultMatcher source(final Matcher<? super Source> matcher) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			xmlHelper.assertSource(content, matcher)__		}__	};parse,the,response,content,as,link,domsource,and,apply,the,given,hamcrest,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,xml,matchers,a;public,result,matcher,source,final,matcher,super,source,matcher,return,result,string,content,result,get,response,get,content,as,string,xml,helper,assert,source,content,matcher
ContentResultMatchers -> public ResultMatcher source(final Matcher<? super Source> matcher);1530174524;Parse the response content as {@link DOMSource} and apply the given_Hamcrest {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">xml-matchers</a>;public ResultMatcher source(final Matcher<? super Source> matcher) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			xmlHelper.assertSource(content, matcher)__		}__	};parse,the,response,content,as,link,domsource,and,apply,the,given,hamcrest,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,xml,matchers,a;public,result,matcher,source,final,matcher,super,source,matcher,return,result,string,content,result,get,response,get,content,as,string,xml,helper,assert,source,content,matcher
ContentResultMatchers -> public ResultMatcher source(final Matcher<? super Source> matcher);1530174524;Parse the response content as {@link DOMSource} and apply the given_Hamcrest {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">xml-matchers</a>;public ResultMatcher source(final Matcher<? super Source> matcher) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			this.xmlHelper.assertSource(content, matcher)__		}__	};parse,the,response,content,as,link,domsource,and,apply,the,given,hamcrest,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,xml,matchers,a;public,result,matcher,source,final,matcher,super,source,matcher,return,result,string,content,result,get,response,get,content,as,string,this,xml,helper,assert,source,content,matcher
ContentResultMatchers -> public ResultMatcher source(final Matcher<? super Source> matcher);1530174524;Parse the response content as {@link DOMSource} and apply the given_Hamcrest {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">xml-matchers</a>;public ResultMatcher source(final Matcher<? super Source> matcher) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			this.xmlHelper.assertSource(content, matcher)__		}__	};parse,the,response,content,as,link,domsource,and,apply,the,given,hamcrest,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,xml,matchers,a;public,result,matcher,source,final,matcher,super,source,matcher,return,result,string,content,result,get,response,get,content,as,string,this,xml,helper,assert,source,content,matcher
ContentResultMatchers -> public ResultMatcher encoding(final String characterEncoding);1383669853;Assert the character encoding in the ServletResponse._@see HttpServletResponse#getCharacterEncoding();public ResultMatcher encoding(final String characterEncoding) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				String actual = result.getResponse().getCharacterEncoding()__				assertEquals("Character encoding", characterEncoding, actual)__			}_		}__	};assert,the,character,encoding,in,the,servlet,response,see,http,servlet,response,get,character,encoding;public,result,matcher,encoding,final,string,character,encoding,return,new,result,matcher,override,public,void,match,mvc,result,result,string,actual,result,get,response,get,character,encoding,assert,equals,character,encoding,character,encoding,actual
ContentResultMatchers -> public ResultMatcher encoding(final String characterEncoding);1404269222;Assert the character encoding in the ServletResponse._@see HttpServletResponse#getCharacterEncoding();public ResultMatcher encoding(final String characterEncoding) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				String actual = result.getResponse().getCharacterEncoding()__				assertEquals("Character encoding", characterEncoding, actual)__			}_		}__	};assert,the,character,encoding,in,the,servlet,response,see,http,servlet,response,get,character,encoding;public,result,matcher,encoding,final,string,character,encoding,return,new,result,matcher,override,public,void,match,mvc,result,result,string,actual,result,get,response,get,character,encoding,assert,equals,character,encoding,character,encoding,actual
ContentResultMatchers -> public ResultMatcher encoding(final String characterEncoding);1413848647;Assert the character encoding in the ServletResponse._@see HttpServletResponse#getCharacterEncoding();public ResultMatcher encoding(final String characterEncoding) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				String actual = result.getResponse().getCharacterEncoding()__				assertEquals("Character encoding", characterEncoding, actual)__			}_		}__	};assert,the,character,encoding,in,the,servlet,response,see,http,servlet,response,get,character,encoding;public,result,matcher,encoding,final,string,character,encoding,return,new,result,matcher,override,public,void,match,mvc,result,result,string,actual,result,get,response,get,character,encoding,assert,equals,character,encoding,character,encoding,actual
ContentResultMatchers -> public ResultMatcher encoding(final String characterEncoding);1427238287;Assert the character encoding in the ServletResponse._@see HttpServletResponse#getCharacterEncoding();public ResultMatcher encoding(final String characterEncoding) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				String actual = result.getResponse().getCharacterEncoding()__				assertEquals("Character encoding", characterEncoding, actual)__			}_		}__	};assert,the,character,encoding,in,the,servlet,response,see,http,servlet,response,get,character,encoding;public,result,matcher,encoding,final,string,character,encoding,return,new,result,matcher,override,public,void,match,mvc,result,result,string,actual,result,get,response,get,character,encoding,assert,equals,character,encoding,character,encoding,actual
ContentResultMatchers -> public ResultMatcher encoding(final String characterEncoding);1437424890;Assert the character encoding in the ServletResponse._@see HttpServletResponse#getCharacterEncoding();public ResultMatcher encoding(final String characterEncoding) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				String actual = result.getResponse().getCharacterEncoding()__				assertEquals("Character encoding", characterEncoding, actual)__			}_		}__	};assert,the,character,encoding,in,the,servlet,response,see,http,servlet,response,get,character,encoding;public,result,matcher,encoding,final,string,character,encoding,return,new,result,matcher,override,public,void,match,mvc,result,result,string,actual,result,get,response,get,character,encoding,assert,equals,character,encoding,character,encoding,actual
ContentResultMatchers -> public ResultMatcher encoding(final String characterEncoding);1446134737;Assert the character encoding in the ServletResponse._@see HttpServletResponse#getCharacterEncoding();public ResultMatcher encoding(final String characterEncoding) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				String actual = result.getResponse().getCharacterEncoding()__				assertEquals("Character encoding", characterEncoding, actual)__			}_		}__	};assert,the,character,encoding,in,the,servlet,response,see,http,servlet,response,get,character,encoding;public,result,matcher,encoding,final,string,character,encoding,return,new,result,matcher,override,public,void,match,mvc,result,result,string,actual,result,get,response,get,character,encoding,assert,equals,character,encoding,character,encoding,actual
ContentResultMatchers -> public ResultMatcher encoding(final String characterEncoding);1486652772;Assert the character encoding in the ServletResponse._@see HttpServletResponse#getCharacterEncoding();public ResultMatcher encoding(final String characterEncoding) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) {_				String actual = result.getResponse().getCharacterEncoding()__				assertEquals("Character encoding", characterEncoding, actual)__			}_		}__	};assert,the,character,encoding,in,the,servlet,response,see,http,servlet,response,get,character,encoding;public,result,matcher,encoding,final,string,character,encoding,return,new,result,matcher,override,public,void,match,mvc,result,result,string,actual,result,get,response,get,character,encoding,assert,equals,character,encoding,character,encoding,actual
ContentResultMatchers -> public ResultMatcher encoding(final String characterEncoding);1493235170;Assert the character encoding in the ServletResponse._@see HttpServletResponse#getCharacterEncoding();public ResultMatcher encoding(final String characterEncoding) {_		return result -> {_			String actual = result.getResponse().getCharacterEncoding()__			assertEquals("Character encoding", characterEncoding, actual)__		}__	};assert,the,character,encoding,in,the,servlet,response,see,http,servlet,response,get,character,encoding;public,result,matcher,encoding,final,string,character,encoding,return,result,string,actual,result,get,response,get,character,encoding,assert,equals,character,encoding,character,encoding,actual
ContentResultMatchers -> public ResultMatcher encoding(final String characterEncoding);1496955179;Assert the character encoding in the ServletResponse._@see HttpServletResponse#getCharacterEncoding();public ResultMatcher encoding(final String characterEncoding) {_		return result -> {_			String actual = result.getResponse().getCharacterEncoding()__			assertEquals("Character encoding", characterEncoding, actual)__		}__	};assert,the,character,encoding,in,the,servlet,response,see,http,servlet,response,get,character,encoding;public,result,matcher,encoding,final,string,character,encoding,return,result,string,actual,result,get,response,get,character,encoding,assert,equals,character,encoding,character,encoding,actual
ContentResultMatchers -> public ResultMatcher encoding(final String characterEncoding);1530174524;Assert the character encoding in the ServletResponse._@see HttpServletResponse#getCharacterEncoding();public ResultMatcher encoding(final String characterEncoding) {_		return result -> {_			String actual = result.getResponse().getCharacterEncoding()__			assertEquals("Character encoding", characterEncoding, actual)__		}__	};assert,the,character,encoding,in,the,servlet,response,see,http,servlet,response,get,character,encoding;public,result,matcher,encoding,final,string,character,encoding,return,result,string,actual,result,get,response,get,character,encoding,assert,equals,character,encoding,character,encoding,actual
ContentResultMatchers -> public ResultMatcher encoding(final String characterEncoding);1530174524;Assert the character encoding in the ServletResponse._@see HttpServletResponse#getCharacterEncoding();public ResultMatcher encoding(final String characterEncoding) {_		return result -> {_			String actual = result.getResponse().getCharacterEncoding()__			assertEquals("Character encoding", characterEncoding, actual)__		}__	};assert,the,character,encoding,in,the,servlet,response,see,http,servlet,response,get,character,encoding;public,result,matcher,encoding,final,string,character,encoding,return,result,string,actual,result,get,response,get,character,encoding,assert,equals,character,encoding,character,encoding,actual
ContentResultMatchers -> public ResultMatcher encoding(final String characterEncoding);1530174524;Assert the character encoding in the ServletResponse._@see HttpServletResponse#getCharacterEncoding();public ResultMatcher encoding(final String characterEncoding) {_		return result -> {_			String actual = result.getResponse().getCharacterEncoding()__			assertEquals("Character encoding", characterEncoding, actual)__		}__	};assert,the,character,encoding,in,the,servlet,response,see,http,servlet,response,get,character,encoding;public,result,matcher,encoding,final,string,character,encoding,return,result,string,actual,result,get,response,get,character,encoding,assert,equals,character,encoding,character,encoding,actual
ContentResultMatchers -> public ResultMatcher string(final String expectedContent);1383669853;Assert the response body content as a String.;public ResultMatcher string(final String expectedContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertEquals("Response content", expectedContent, result.getResponse().getContentAsString())__			}_		}__	};assert,the,response,body,content,as,a,string;public,result,matcher,string,final,string,expected,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,equals,response,content,expected,content,result,get,response,get,content,as,string
ContentResultMatchers -> public ResultMatcher string(final String expectedContent);1404269222;Assert the response body content as a String.;public ResultMatcher string(final String expectedContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertEquals("Response content", expectedContent, result.getResponse().getContentAsString())__			}_		}__	};assert,the,response,body,content,as,a,string;public,result,matcher,string,final,string,expected,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,equals,response,content,expected,content,result,get,response,get,content,as,string
ContentResultMatchers -> public ResultMatcher string(final String expectedContent);1413848647;Assert the response body content as a String.;public ResultMatcher string(final String expectedContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertEquals("Response content", expectedContent, result.getResponse().getContentAsString())__			}_		}__	};assert,the,response,body,content,as,a,string;public,result,matcher,string,final,string,expected,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,equals,response,content,expected,content,result,get,response,get,content,as,string
ContentResultMatchers -> public ResultMatcher string(final String expectedContent);1427238287;Assert the response body content as a String.;public ResultMatcher string(final String expectedContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertEquals("Response content", expectedContent, result.getResponse().getContentAsString())__			}_		}__	};assert,the,response,body,content,as,a,string;public,result,matcher,string,final,string,expected,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,equals,response,content,expected,content,result,get,response,get,content,as,string
ContentResultMatchers -> public ResultMatcher string(final String expectedContent);1437424890;Assert the response body content as a String.;public ResultMatcher string(final String expectedContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertEquals("Response content", expectedContent, result.getResponse().getContentAsString())__			}_		}__	};assert,the,response,body,content,as,a,string;public,result,matcher,string,final,string,expected,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,equals,response,content,expected,content,result,get,response,get,content,as,string
ContentResultMatchers -> public ResultMatcher string(final String expectedContent);1446134737;Assert the response body content as a String.;public ResultMatcher string(final String expectedContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertEquals("Response content", expectedContent, result.getResponse().getContentAsString())__			}_		}__	};assert,the,response,body,content,as,a,string;public,result,matcher,string,final,string,expected,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,equals,response,content,expected,content,result,get,response,get,content,as,string
ContentResultMatchers -> public ResultMatcher string(final String expectedContent);1486652772;Assert the response body content as a String.;public ResultMatcher string(final String expectedContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertEquals("Response content", expectedContent, result.getResponse().getContentAsString())__			}_		}__	};assert,the,response,body,content,as,a,string;public,result,matcher,string,final,string,expected,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,equals,response,content,expected,content,result,get,response,get,content,as,string
ContentResultMatchers -> public ResultMatcher string(final String expectedContent);1493235170;Assert the response body content as a String.;public ResultMatcher string(final String expectedContent) {_		return result -> assertEquals("Response content", expectedContent, result.getResponse().getContentAsString())__	};assert,the,response,body,content,as,a,string;public,result,matcher,string,final,string,expected,content,return,result,assert,equals,response,content,expected,content,result,get,response,get,content,as,string
ContentResultMatchers -> public ResultMatcher string(final String expectedContent);1496955179;Assert the response body content as a String.;public ResultMatcher string(final String expectedContent) {_		return result -> assertEquals("Response content", expectedContent, result.getResponse().getContentAsString())__	};assert,the,response,body,content,as,a,string;public,result,matcher,string,final,string,expected,content,return,result,assert,equals,response,content,expected,content,result,get,response,get,content,as,string
ContentResultMatchers -> public ResultMatcher string(final String expectedContent);1530174524;Assert the response body content as a String.;public ResultMatcher string(final String expectedContent) {_		return result -> assertEquals("Response content", expectedContent, result.getResponse().getContentAsString())__	};assert,the,response,body,content,as,a,string;public,result,matcher,string,final,string,expected,content,return,result,assert,equals,response,content,expected,content,result,get,response,get,content,as,string
ContentResultMatchers -> public ResultMatcher string(final String expectedContent);1530174524;Assert the response body content as a String.;public ResultMatcher string(final String expectedContent) {_		return result -> assertEquals("Response content", expectedContent, result.getResponse().getContentAsString())__	};assert,the,response,body,content,as,a,string;public,result,matcher,string,final,string,expected,content,return,result,assert,equals,response,content,expected,content,result,get,response,get,content,as,string
ContentResultMatchers -> public ResultMatcher string(final String expectedContent);1530174524;Assert the response body content as a String.;public ResultMatcher string(final String expectedContent) {_		return result -> assertEquals("Response content", expectedContent, result.getResponse().getContentAsString())__	};assert,the,response,body,content,as,a,string;public,result,matcher,string,final,string,expected,content,return,result,assert,equals,response,content,expected,content,result,get,response,get,content,as,string
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(final MediaType contentType);1383669853;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String actual = result.getResponse().getContentType()__				assertTrue("Content type not set", actual != null)__				MediaType actualContentType = MediaType.parseMediaType(actual)__				assertTrue("Content type [" + actual + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,final,media,type,content,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,media,type,actual,content,type,media,type,parse,media,type,actual,assert,true,content,type,actual,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(final MediaType contentType);1404269222;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String actual = result.getResponse().getContentType()__				assertTrue("Content type not set", actual != null)__				MediaType actualContentType = MediaType.parseMediaType(actual)__				assertTrue("Content type [" + actual + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,final,media,type,content,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,media,type,actual,content,type,media,type,parse,media,type,actual,assert,true,content,type,actual,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(final MediaType contentType);1413848647;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String actual = result.getResponse().getContentType()__				assertTrue("Content type not set", actual != null)__				MediaType actualContentType = MediaType.parseMediaType(actual)__				assertTrue("Content type [" + actual + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,final,media,type,content,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,media,type,actual,content,type,media,type,parse,media,type,actual,assert,true,content,type,actual,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(final MediaType contentType);1427238287;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String actual = result.getResponse().getContentType()__				assertTrue("Content type not set", actual != null)__				MediaType actualContentType = MediaType.parseMediaType(actual)__				assertTrue("Content type [" + actual + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,final,media,type,content,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,media,type,actual,content,type,media,type,parse,media,type,actual,assert,true,content,type,actual,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(final MediaType contentType);1437424890;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String actual = result.getResponse().getContentType()__				assertTrue("Content type not set", actual != null)__				MediaType actualContentType = MediaType.parseMediaType(actual)__				assertTrue("Content type [" + actual + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,final,media,type,content,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,media,type,actual,content,type,media,type,parse,media,type,actual,assert,true,content,type,actual,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(final MediaType contentType);1446134737;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String actual = result.getResponse().getContentType()__				assertTrue("Content type not set", actual != null)__				MediaType actualContentType = MediaType.parseMediaType(actual)__				assertTrue("Content type [" + actual + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,final,media,type,content,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,media,type,actual,content,type,media,type,parse,media,type,actual,assert,true,content,type,actual,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(final MediaType contentType);1486652772;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String actual = result.getResponse().getContentType()__				assertTrue("Content type not set", actual != null)__				MediaType actualContentType = MediaType.parseMediaType(actual)__				assertTrue("Content type [" + actual + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,final,media,type,content,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,media,type,actual,content,type,media,type,parse,media,type,actual,assert,true,content,type,actual,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(final MediaType contentType);1493235170;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return result -> {_			String actual = result.getResponse().getContentType()__			assertTrue("Content type not set", actual != null)__			MediaType actualContentType = MediaType.parseMediaType(actual)__			assertTrue("Content type [" + actual + "] is not compatible with [" + contentType + "]",_					actualContentType.isCompatibleWith(contentType))__		}__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,final,media,type,content,type,return,result,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,media,type,actual,content,type,media,type,parse,media,type,actual,assert,true,content,type,actual,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(final MediaType contentType);1496955179;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return result -> {_			String actual = result.getResponse().getContentType()__			assertTrue("Content type not set", actual != null)__			if (actual != null) {_				MediaType actualContentType = MediaType.parseMediaType(actual)__				assertTrue("Content type [" + actual + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,final,media,type,content,type,return,result,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,if,actual,null,media,type,actual,content,type,media,type,parse,media,type,actual,assert,true,content,type,actual,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(final MediaType contentType);1530174524;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return result -> {_			String actual = result.getResponse().getContentType()__			assertTrue("Content type not set", actual != null)__			if (actual != null) {_				MediaType actualContentType = MediaType.parseMediaType(actual)__				assertTrue("Content type [" + actual + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,final,media,type,content,type,return,result,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,if,actual,null,media,type,actual,content,type,media,type,parse,media,type,actual,assert,true,content,type,actual,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(final MediaType contentType);1530174524;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return result -> {_			String actual = result.getResponse().getContentType()__			assertTrue("Content type not set", actual != null)__			if (actual != null) {_				MediaType actualContentType = MediaType.parseMediaType(actual)__				assertTrue("Content type [" + actual + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,final,media,type,content,type,return,result,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,if,actual,null,media,type,actual,content,type,media,type,parse,media,type,actual,assert,true,content,type,actual,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(final MediaType contentType);1530174524;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return result -> {_			String actual = result.getResponse().getContentType()__			assertTrue("Content type not set", actual != null)__			if (actual != null) {_				MediaType actualContentType = MediaType.parseMediaType(actual)__				assertTrue("Content type [" + actual + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,final,media,type,content,type,return,result,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,if,actual,null,media,type,actual,content,type,media,type,parse,media,type,actual,assert,true,content,type,actual,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentResultMatchers -> public ResultMatcher bytes(final byte[] expectedContent);1383669853;Assert the response body content as a byte array.;public ResultMatcher bytes(final byte[] expectedContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertEquals("Response content", expectedContent, result.getResponse().getContentAsByteArray())__			}_		}__	};assert,the,response,body,content,as,a,byte,array;public,result,matcher,bytes,final,byte,expected,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,equals,response,content,expected,content,result,get,response,get,content,as,byte,array
ContentResultMatchers -> public ResultMatcher bytes(final byte[] expectedContent);1404269222;Assert the response body content as a byte array.;public ResultMatcher bytes(final byte[] expectedContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertEquals("Response content", expectedContent, result.getResponse().getContentAsByteArray())__			}_		}__	};assert,the,response,body,content,as,a,byte,array;public,result,matcher,bytes,final,byte,expected,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,equals,response,content,expected,content,result,get,response,get,content,as,byte,array
ContentResultMatchers -> public ResultMatcher bytes(final byte[] expectedContent);1413848647;Assert the response body content as a byte array.;public ResultMatcher bytes(final byte[] expectedContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertEquals("Response content", expectedContent, result.getResponse().getContentAsByteArray())__			}_		}__	};assert,the,response,body,content,as,a,byte,array;public,result,matcher,bytes,final,byte,expected,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,equals,response,content,expected,content,result,get,response,get,content,as,byte,array
ContentResultMatchers -> public ResultMatcher bytes(final byte[] expectedContent);1427238287;Assert the response body content as a byte array.;public ResultMatcher bytes(final byte[] expectedContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertEquals("Response content", expectedContent, result.getResponse().getContentAsByteArray())__			}_		}__	};assert,the,response,body,content,as,a,byte,array;public,result,matcher,bytes,final,byte,expected,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,equals,response,content,expected,content,result,get,response,get,content,as,byte,array
ContentResultMatchers -> public ResultMatcher bytes(final byte[] expectedContent);1437424890;Assert the response body content as a byte array.;public ResultMatcher bytes(final byte[] expectedContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertEquals("Response content", expectedContent, result.getResponse().getContentAsByteArray())__			}_		}__	};assert,the,response,body,content,as,a,byte,array;public,result,matcher,bytes,final,byte,expected,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,equals,response,content,expected,content,result,get,response,get,content,as,byte,array
ContentResultMatchers -> public ResultMatcher bytes(final byte[] expectedContent);1446134737;Assert the response body content as a byte array.;public ResultMatcher bytes(final byte[] expectedContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertEquals("Response content", expectedContent, result.getResponse().getContentAsByteArray())__			}_		}__	};assert,the,response,body,content,as,a,byte,array;public,result,matcher,bytes,final,byte,expected,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,equals,response,content,expected,content,result,get,response,get,content,as,byte,array
ContentResultMatchers -> public ResultMatcher bytes(final byte[] expectedContent);1486652772;Assert the response body content as a byte array.;public ResultMatcher bytes(final byte[] expectedContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertEquals("Response content", expectedContent, result.getResponse().getContentAsByteArray())__			}_		}__	};assert,the,response,body,content,as,a,byte,array;public,result,matcher,bytes,final,byte,expected,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,equals,response,content,expected,content,result,get,response,get,content,as,byte,array
ContentResultMatchers -> public ResultMatcher bytes(final byte[] expectedContent);1493235170;Assert the response body content as a byte array.;public ResultMatcher bytes(final byte[] expectedContent) {_		return result -> assertEquals("Response content", expectedContent, result.getResponse().getContentAsByteArray())__	};assert,the,response,body,content,as,a,byte,array;public,result,matcher,bytes,final,byte,expected,content,return,result,assert,equals,response,content,expected,content,result,get,response,get,content,as,byte,array
ContentResultMatchers -> public ResultMatcher bytes(final byte[] expectedContent);1496955179;Assert the response body content as a byte array.;public ResultMatcher bytes(final byte[] expectedContent) {_		return result -> assertEquals("Response content", expectedContent, result.getResponse().getContentAsByteArray())__	};assert,the,response,body,content,as,a,byte,array;public,result,matcher,bytes,final,byte,expected,content,return,result,assert,equals,response,content,expected,content,result,get,response,get,content,as,byte,array
ContentResultMatchers -> public ResultMatcher bytes(final byte[] expectedContent);1530174524;Assert the response body content as a byte array.;public ResultMatcher bytes(final byte[] expectedContent) {_		return result -> assertEquals("Response content", expectedContent, result.getResponse().getContentAsByteArray())__	};assert,the,response,body,content,as,a,byte,array;public,result,matcher,bytes,final,byte,expected,content,return,result,assert,equals,response,content,expected,content,result,get,response,get,content,as,byte,array
ContentResultMatchers -> public ResultMatcher bytes(final byte[] expectedContent);1530174524;Assert the response body content as a byte array.;public ResultMatcher bytes(final byte[] expectedContent) {_		return result -> assertEquals("Response content", expectedContent, result.getResponse().getContentAsByteArray())__	};assert,the,response,body,content,as,a,byte,array;public,result,matcher,bytes,final,byte,expected,content,return,result,assert,equals,response,content,expected,content,result,get,response,get,content,as,byte,array
ContentResultMatchers -> public ResultMatcher bytes(final byte[] expectedContent);1530174524;Assert the response body content as a byte array.;public ResultMatcher bytes(final byte[] expectedContent) {_		return result -> assertEquals("Response content", expectedContent, result.getResponse().getContentAsByteArray())__	};assert,the,response,body,content,as,a,byte,array;public,result,matcher,bytes,final,byte,expected,content,return,result,assert,equals,response,content,expected,content,result,get,response,get,content,as,byte,array
ContentResultMatchers -> public ResultMatcher json(final String jsonContent, final boolean strict);1446134737;Parse the response content and the given string as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting.__<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>__<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert<a/> library.__@param jsonContent the expected JSON content_@param strict enables strict checking_@since 4.2;public ResultMatcher json(final String jsonContent, final boolean strict) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				jsonHelper.assertJsonEqual(jsonContent, content, strict)__			}_		}__	};parse,the,response,content,and,the,given,string,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,json,content,the,expected,json,content,param,strict,enables,strict,checking,since,4,2;public,result,matcher,json,final,string,json,content,final,boolean,strict,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,json,helper,assert,json,equal,json,content,content,strict
ContentResultMatchers -> public ResultMatcher json(final String jsonContent, final boolean strict);1486652772;Parse the response content and the given string as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting.__<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>__<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert<a/> library.__@param jsonContent the expected JSON content_@param strict enables strict checking_@since 4.2;public ResultMatcher json(final String jsonContent, final boolean strict) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				jsonHelper.assertJsonEqual(jsonContent, content, strict)__			}_		}__	};parse,the,response,content,and,the,given,string,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,json,content,the,expected,json,content,param,strict,enables,strict,checking,since,4,2;public,result,matcher,json,final,string,json,content,final,boolean,strict,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,json,helper,assert,json,equal,json,content,content,strict
ContentResultMatchers -> public ResultMatcher json(final String jsonContent, final boolean strict);1493235170;Parse the response content and the given string as JSON and assert the two are "similar" -_i.e. they contain the same attribute-value pairs regardless of formatting._<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>_<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert<a/> library._@param jsonContent the expected JSON content_@param strict enables strict checking_@since 4.2;public ResultMatcher json(final String jsonContent, final boolean strict) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			jsonHelper.assertJsonEqual(jsonContent, content, strict)__		}__	};parse,the,response,content,and,the,given,string,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,json,content,the,expected,json,content,param,strict,enables,strict,checking,since,4,2;public,result,matcher,json,final,string,json,content,final,boolean,strict,return,result,string,content,result,get,response,get,content,as,string,json,helper,assert,json,equal,json,content,content,strict
ContentResultMatchers -> public ResultMatcher json(final String jsonContent, final boolean strict);1496955179;Parse the response content and the given string as JSON and assert the two are "similar" -_i.e. they contain the same attribute-value pairs regardless of formatting._<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>_<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert<a/> library._@param jsonContent the expected JSON content_@param strict enables strict checking_@since 4.2;public ResultMatcher json(final String jsonContent, final boolean strict) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			jsonHelper.assertJsonEqual(jsonContent, content, strict)__		}__	};parse,the,response,content,and,the,given,string,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,json,content,the,expected,json,content,param,strict,enables,strict,checking,since,4,2;public,result,matcher,json,final,string,json,content,final,boolean,strict,return,result,string,content,result,get,response,get,content,as,string,json,helper,assert,json,equal,json,content,content,strict
ContentResultMatchers -> public ResultMatcher json(final String jsonContent, final boolean strict);1530174524;Parse the response content and the given string as JSON and assert the two are "similar" -_i.e. they contain the same attribute-value pairs regardless of formatting._<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>_<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert</a> library._@param jsonContent the expected JSON content_@param strict enables strict checking_@since 4.2;public ResultMatcher json(final String jsonContent, final boolean strict) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			jsonHelper.assertJsonEqual(jsonContent, content, strict)__		}__	};parse,the,response,content,and,the,given,string,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,json,content,the,expected,json,content,param,strict,enables,strict,checking,since,4,2;public,result,matcher,json,final,string,json,content,final,boolean,strict,return,result,string,content,result,get,response,get,content,as,string,json,helper,assert,json,equal,json,content,content,strict
ContentResultMatchers -> public ResultMatcher json(final String jsonContent, final boolean strict);1530174524;Parse the response content and the given string as JSON and assert the two are "similar" -_i.e. they contain the same attribute-value pairs regardless of formatting._<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>_<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert</a> library._@param jsonContent the expected JSON content_@param strict enables strict checking_@since 4.2;public ResultMatcher json(final String jsonContent, final boolean strict) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			this.jsonHelper.assertJsonEqual(jsonContent, content, strict)__		}__	};parse,the,response,content,and,the,given,string,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,json,content,the,expected,json,content,param,strict,enables,strict,checking,since,4,2;public,result,matcher,json,final,string,json,content,final,boolean,strict,return,result,string,content,result,get,response,get,content,as,string,this,json,helper,assert,json,equal,json,content,content,strict
ContentResultMatchers -> public ResultMatcher json(final String jsonContent, final boolean strict);1530174524;Parse the response content and the given string as JSON and assert the two are "similar" -_i.e. they contain the same attribute-value pairs regardless of formatting._<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>_<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert</a> library._@param jsonContent the expected JSON content_@param strict enables strict checking_@since 4.2;public ResultMatcher json(final String jsonContent, final boolean strict) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			this.jsonHelper.assertJsonEqual(jsonContent, content, strict)__		}__	};parse,the,response,content,and,the,given,string,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,json,content,the,expected,json,content,param,strict,enables,strict,checking,since,4,2;public,result,matcher,json,final,string,json,content,final,boolean,strict,return,result,string,content,result,get,response,get,content,as,string,this,json,helper,assert,json,equal,json,content,content,strict
ContentResultMatchers -> public ResultMatcher node(final Matcher<? super Node> matcher);1383669853;Parse the response content as {@link Node} and apply the given Hamcrest_{@link Matcher}.;public ResultMatcher node(final Matcher<? super Node> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertNode(content, matcher)__			}_		}__	};parse,the,response,content,as,link,node,and,apply,the,given,hamcrest,link,matcher;public,result,matcher,node,final,matcher,super,node,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,node,content,matcher
ContentResultMatchers -> public ResultMatcher node(final Matcher<? super Node> matcher);1404269222;Parse the response content as {@link Node} and apply the given Hamcrest_{@link Matcher}.;public ResultMatcher node(final Matcher<? super Node> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertNode(content, matcher)__			}_		}__	};parse,the,response,content,as,link,node,and,apply,the,given,hamcrest,link,matcher;public,result,matcher,node,final,matcher,super,node,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,node,content,matcher
ContentResultMatchers -> public ResultMatcher node(final Matcher<? super Node> matcher);1413848647;Parse the response content as {@link Node} and apply the given Hamcrest_{@link Matcher}.;public ResultMatcher node(final Matcher<? super Node> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertNode(content, matcher)__			}_		}__	};parse,the,response,content,as,link,node,and,apply,the,given,hamcrest,link,matcher;public,result,matcher,node,final,matcher,super,node,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,node,content,matcher
ContentResultMatchers -> public ResultMatcher node(final Matcher<? super Node> matcher);1427238287;Parse the response content as {@link Node} and apply the given Hamcrest_{@link Matcher}.;public ResultMatcher node(final Matcher<? super Node> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertNode(content, matcher)__			}_		}__	};parse,the,response,content,as,link,node,and,apply,the,given,hamcrest,link,matcher;public,result,matcher,node,final,matcher,super,node,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,node,content,matcher
ContentResultMatchers -> public ResultMatcher node(final Matcher<? super Node> matcher);1437424890;Parse the response content as {@link Node} and apply the given Hamcrest_{@link Matcher}.;public ResultMatcher node(final Matcher<? super Node> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertNode(content, matcher)__			}_		}__	};parse,the,response,content,as,link,node,and,apply,the,given,hamcrest,link,matcher;public,result,matcher,node,final,matcher,super,node,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,node,content,matcher
ContentResultMatchers -> public ResultMatcher node(final Matcher<? super Node> matcher);1446134737;Parse the response content as {@link Node} and apply the given Hamcrest_{@link Matcher}.;public ResultMatcher node(final Matcher<? super Node> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertNode(content, matcher)__			}_		}__	};parse,the,response,content,as,link,node,and,apply,the,given,hamcrest,link,matcher;public,result,matcher,node,final,matcher,super,node,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,node,content,matcher
ContentResultMatchers -> public ResultMatcher node(final Matcher<? super Node> matcher);1486652772;Parse the response content as {@link Node} and apply the given Hamcrest_{@link Matcher}.;public ResultMatcher node(final Matcher<? super Node> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertNode(content, matcher)__			}_		}__	};parse,the,response,content,as,link,node,and,apply,the,given,hamcrest,link,matcher;public,result,matcher,node,final,matcher,super,node,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,node,content,matcher
ContentResultMatchers -> public ResultMatcher node(final Matcher<? super Node> matcher);1493235170;Parse the response content as {@link Node} and apply the given Hamcrest_{@link Matcher}.;public ResultMatcher node(final Matcher<? super Node> matcher) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			xmlHelper.assertNode(content, matcher)__		}__	};parse,the,response,content,as,link,node,and,apply,the,given,hamcrest,link,matcher;public,result,matcher,node,final,matcher,super,node,matcher,return,result,string,content,result,get,response,get,content,as,string,xml,helper,assert,node,content,matcher
ContentResultMatchers -> public ResultMatcher node(final Matcher<? super Node> matcher);1496955179;Parse the response content as {@link Node} and apply the given Hamcrest_{@link Matcher}.;public ResultMatcher node(final Matcher<? super Node> matcher) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			xmlHelper.assertNode(content, matcher)__		}__	};parse,the,response,content,as,link,node,and,apply,the,given,hamcrest,link,matcher;public,result,matcher,node,final,matcher,super,node,matcher,return,result,string,content,result,get,response,get,content,as,string,xml,helper,assert,node,content,matcher
ContentResultMatchers -> public ResultMatcher node(final Matcher<? super Node> matcher);1530174524;Parse the response content as {@link Node} and apply the given Hamcrest_{@link Matcher}.;public ResultMatcher node(final Matcher<? super Node> matcher) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			xmlHelper.assertNode(content, matcher)__		}__	};parse,the,response,content,as,link,node,and,apply,the,given,hamcrest,link,matcher;public,result,matcher,node,final,matcher,super,node,matcher,return,result,string,content,result,get,response,get,content,as,string,xml,helper,assert,node,content,matcher
ContentResultMatchers -> public ResultMatcher node(final Matcher<? super Node> matcher);1530174524;Parse the response content as {@link Node} and apply the given Hamcrest_{@link Matcher}.;public ResultMatcher node(final Matcher<? super Node> matcher) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			this.xmlHelper.assertNode(content, matcher)__		}__	};parse,the,response,content,as,link,node,and,apply,the,given,hamcrest,link,matcher;public,result,matcher,node,final,matcher,super,node,matcher,return,result,string,content,result,get,response,get,content,as,string,this,xml,helper,assert,node,content,matcher
ContentResultMatchers -> public ResultMatcher node(final Matcher<? super Node> matcher);1530174524;Parse the response content as {@link Node} and apply the given Hamcrest_{@link Matcher}.;public ResultMatcher node(final Matcher<? super Node> matcher) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			this.xmlHelper.assertNode(content, matcher)__		}__	};parse,the,response,content,as,link,node,and,apply,the,given,hamcrest,link,matcher;public,result,matcher,node,final,matcher,super,node,matcher,return,result,string,content,result,get,response,get,content,as,string,this,xml,helper,assert,node,content,matcher
ContentResultMatchers -> public ResultMatcher contentType(String contentType);1383669853;Assert the ServletResponse content type. The given content type must_fully match including type, sub-type, and parameters. For checking_only the type and sub-type see {@link #contentTypeCompatibleWith(String)}.;public ResultMatcher contentType(String contentType) {_		return contentType(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,string;public,result,matcher,content,type,string,content,type,return,content,type,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentType(String contentType);1404269222;Assert the ServletResponse content type. The given content type must_fully match including type, sub-type, and parameters. For checking_only the type and sub-type see {@link #contentTypeCompatibleWith(String)}.;public ResultMatcher contentType(String contentType) {_		return contentType(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,string;public,result,matcher,content,type,string,content,type,return,content,type,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentType(String contentType);1413848647;Assert the ServletResponse content type. The given content type must_fully match including type, sub-type, and parameters. For checking_only the type and sub-type see {@link #contentTypeCompatibleWith(String)}.;public ResultMatcher contentType(String contentType) {_		return contentType(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,string;public,result,matcher,content,type,string,content,type,return,content,type,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentType(String contentType);1427238287;Assert the ServletResponse content type. The given content type must_fully match including type, sub-type, and parameters. For checking_only the type and sub-type see {@link #contentTypeCompatibleWith(String)}.;public ResultMatcher contentType(String contentType) {_		return contentType(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,string;public,result,matcher,content,type,string,content,type,return,content,type,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentType(String contentType);1437424890;Assert the ServletResponse content type. The given content type must_fully match including type, sub-type, and parameters. For checking_only the type and sub-type see {@link #contentTypeCompatibleWith(String)}.;public ResultMatcher contentType(String contentType) {_		return contentType(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,string;public,result,matcher,content,type,string,content,type,return,content,type,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentType(String contentType);1446134737;Assert the ServletResponse content type. The given content type must_fully match including type, sub-type, and parameters. For checking_only the type and sub-type see {@link #contentTypeCompatibleWith(String)}.;public ResultMatcher contentType(String contentType) {_		return contentType(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,string;public,result,matcher,content,type,string,content,type,return,content,type,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentType(String contentType);1486652772;Assert the ServletResponse content type. The given content type must_fully match including type, sub-type, and parameters. For checking_only the type and sub-type see {@link #contentTypeCompatibleWith(String)}.;public ResultMatcher contentType(String contentType) {_		return contentType(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,string;public,result,matcher,content,type,string,content,type,return,content,type,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentType(String contentType);1493235170;Assert the ServletResponse content type. The given content type must_fully match including type, sub-type, and parameters. For checking_only the type and sub-type see {@link #contentTypeCompatibleWith(String)}.;public ResultMatcher contentType(String contentType) {_		return contentType(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,string;public,result,matcher,content,type,string,content,type,return,content,type,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentType(String contentType);1496955179;Assert the ServletResponse content type. The given content type must_fully match including type, sub-type, and parameters. For checking_only the type and sub-type see {@link #contentTypeCompatibleWith(String)}.;public ResultMatcher contentType(String contentType) {_		return contentType(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,string;public,result,matcher,content,type,string,content,type,return,content,type,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentType(String contentType);1530174524;Assert the ServletResponse content type. The given content type must_fully match including type, sub-type, and parameters. For checking_only the type and sub-type see {@link #contentTypeCompatibleWith(String)}.;public ResultMatcher contentType(String contentType) {_		return contentType(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,string;public,result,matcher,content,type,string,content,type,return,content,type,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentType(String contentType);1530174524;Assert the ServletResponse content type. The given content type must_fully match including type, sub-type, and parameters. For checking_only the type and sub-type see {@link #contentTypeCompatibleWith(String)}.;public ResultMatcher contentType(String contentType) {_		return contentType(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,string;public,result,matcher,content,type,string,content,type,return,content,type,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentType(String contentType);1530174524;Assert the ServletResponse content type. The given content type must_fully match including type, sub-type, and parameters. For checking_only the type and sub-type see {@link #contentTypeCompatibleWith(String)}.;public ResultMatcher contentType(String contentType) {_		return contentType(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,string;public,result,matcher,content,type,string,content,type,return,content,type,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher xml(final String xmlContent);1383669853;Parse the response content and the given string as XML and assert the two_are "similar" - i.e. they contain the same elements and attributes_regardless of order.__<p>Use of this matcher requires the <a_href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library.__@param xmlContent the expected XML content_@see MockMvcResultMatchers#xpath(String, Object...)_@see MockMvcResultMatchers#xpath(String, Map, Object...);public ResultMatcher xml(final String xmlContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertXmlEqual(xmlContent, content)__			}_		}__	};parse,the,response,content,and,the,given,string,as,xml,and,assert,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,requires,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,param,xml,content,the,expected,xml,content,see,mock,mvc,result,matchers,xpath,string,object,see,mock,mvc,result,matchers,xpath,string,map,object;public,result,matcher,xml,final,string,xml,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,xml,equal,xml,content,content
ContentResultMatchers -> public ResultMatcher xml(final String xmlContent);1404269222;Parse the response content and the given string as XML and assert the two_are "similar" - i.e. they contain the same elements and attributes_regardless of order.__<p>Use of this matcher requires the <a_href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library.__@param xmlContent the expected XML content_@see MockMvcResultMatchers#xpath(String, Object...)_@see MockMvcResultMatchers#xpath(String, Map, Object...);public ResultMatcher xml(final String xmlContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertXmlEqual(xmlContent, content)__			}_		}__	};parse,the,response,content,and,the,given,string,as,xml,and,assert,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,requires,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,param,xml,content,the,expected,xml,content,see,mock,mvc,result,matchers,xpath,string,object,see,mock,mvc,result,matchers,xpath,string,map,object;public,result,matcher,xml,final,string,xml,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,xml,equal,xml,content,content
ContentResultMatchers -> public ResultMatcher xml(final String xmlContent);1413848647;Parse the response content and the given string as XML and assert the two_are "similar" - i.e. they contain the same elements and attributes_regardless of order.__<p>Use of this matcher requires the <a_href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library.__@param xmlContent the expected XML content_@see MockMvcResultMatchers#xpath(String, Object...)_@see MockMvcResultMatchers#xpath(String, Map, Object...);public ResultMatcher xml(final String xmlContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertXmlEqual(xmlContent, content)__			}_		}__	};parse,the,response,content,and,the,given,string,as,xml,and,assert,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,requires,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,param,xml,content,the,expected,xml,content,see,mock,mvc,result,matchers,xpath,string,object,see,mock,mvc,result,matchers,xpath,string,map,object;public,result,matcher,xml,final,string,xml,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,xml,equal,xml,content,content
ContentResultMatchers -> public ResultMatcher xml(final String xmlContent);1427238287;Parse the response content and the given string as XML and assert the two_are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher requires the <a_href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library._@param xmlContent the expected XML content_@see MockMvcResultMatchers#xpath(String, Object...)_@see MockMvcResultMatchers#xpath(String, Map, Object...);public ResultMatcher xml(final String xmlContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertXmlEqual(xmlContent, content)__			}_		}__	};parse,the,response,content,and,the,given,string,as,xml,and,assert,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,requires,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,param,xml,content,the,expected,xml,content,see,mock,mvc,result,matchers,xpath,string,object,see,mock,mvc,result,matchers,xpath,string,map,object;public,result,matcher,xml,final,string,xml,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,xml,equal,xml,content,content
ContentResultMatchers -> public ResultMatcher xml(final String xmlContent);1437424890;Parse the response content and the given string as XML and assert the two_are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher requires the <a_href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library._@param xmlContent the expected XML content_@see MockMvcResultMatchers#xpath(String, Object...)_@see MockMvcResultMatchers#xpath(String, Map, Object...);public ResultMatcher xml(final String xmlContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertXmlEqual(xmlContent, content)__			}_		}__	};parse,the,response,content,and,the,given,string,as,xml,and,assert,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,requires,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,param,xml,content,the,expected,xml,content,see,mock,mvc,result,matchers,xpath,string,object,see,mock,mvc,result,matchers,xpath,string,map,object;public,result,matcher,xml,final,string,xml,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,xml,equal,xml,content,content
ContentResultMatchers -> public ResultMatcher xml(final String xmlContent);1446134737;Parse the response content and the given string as XML and assert the two_are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher requires the <a_href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library._@param xmlContent the expected XML content_@see MockMvcResultMatchers#xpath(String, Object...)_@see MockMvcResultMatchers#xpath(String, Map, Object...);public ResultMatcher xml(final String xmlContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertXmlEqual(xmlContent, content)__			}_		}__	};parse,the,response,content,and,the,given,string,as,xml,and,assert,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,requires,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,param,xml,content,the,expected,xml,content,see,mock,mvc,result,matchers,xpath,string,object,see,mock,mvc,result,matchers,xpath,string,map,object;public,result,matcher,xml,final,string,xml,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,xml,equal,xml,content,content
ContentResultMatchers -> public ResultMatcher xml(final String xmlContent);1486652772;Parse the response content and the given string as XML and assert the two_are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher requires the <a_href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library._@param xmlContent the expected XML content_@see MockMvcResultMatchers#xpath(String, Object...)_@see MockMvcResultMatchers#xpath(String, Map, Object...);public ResultMatcher xml(final String xmlContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				xmlHelper.assertXmlEqual(xmlContent, content)__			}_		}__	};parse,the,response,content,and,the,given,string,as,xml,and,assert,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,requires,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,param,xml,content,the,expected,xml,content,see,mock,mvc,result,matchers,xpath,string,object,see,mock,mvc,result,matchers,xpath,string,map,object;public,result,matcher,xml,final,string,xml,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,xml,helper,assert,xml,equal,xml,content,content
ContentResultMatchers -> public ResultMatcher xml(final String xmlContent);1493235170;Parse the response content and the given string as XML and assert the two_are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher requires the <a_href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library._@param xmlContent the expected XML content_@see MockMvcResultMatchers#xpath(String, Object...)_@see MockMvcResultMatchers#xpath(String, Map, Object...);public ResultMatcher xml(final String xmlContent) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			xmlHelper.assertXmlEqual(xmlContent, content)__		}__	};parse,the,response,content,and,the,given,string,as,xml,and,assert,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,requires,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,param,xml,content,the,expected,xml,content,see,mock,mvc,result,matchers,xpath,string,object,see,mock,mvc,result,matchers,xpath,string,map,object;public,result,matcher,xml,final,string,xml,content,return,result,string,content,result,get,response,get,content,as,string,xml,helper,assert,xml,equal,xml,content,content
ContentResultMatchers -> public ResultMatcher xml(final String xmlContent);1496955179;Parse the response content and the given string as XML and assert the two_are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher requires the <a_href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library._@param xmlContent the expected XML content_@see MockMvcResultMatchers#xpath(String, Object...)_@see MockMvcResultMatchers#xpath(String, Map, Object...);public ResultMatcher xml(final String xmlContent) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			xmlHelper.assertXmlEqual(xmlContent, content)__		}__	};parse,the,response,content,and,the,given,string,as,xml,and,assert,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,requires,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,param,xml,content,the,expected,xml,content,see,mock,mvc,result,matchers,xpath,string,object,see,mock,mvc,result,matchers,xpath,string,map,object;public,result,matcher,xml,final,string,xml,content,return,result,string,content,result,get,response,get,content,as,string,xml,helper,assert,xml,equal,xml,content,content
ContentResultMatchers -> public ResultMatcher xml(final String xmlContent);1530174524;Parse the response content and the given string as XML and assert the two_are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher requires the <a_href="http://xmlunit.sourceforge.net/">XMLUnit</a> library._@param xmlContent the expected XML content_@see MockMvcResultMatchers#xpath(String, Object...)_@see MockMvcResultMatchers#xpath(String, Map, Object...);public ResultMatcher xml(final String xmlContent) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			xmlHelper.assertXmlEqual(xmlContent, content)__		}__	};parse,the,response,content,and,the,given,string,as,xml,and,assert,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,requires,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,param,xml,content,the,expected,xml,content,see,mock,mvc,result,matchers,xpath,string,object,see,mock,mvc,result,matchers,xpath,string,map,object;public,result,matcher,xml,final,string,xml,content,return,result,string,content,result,get,response,get,content,as,string,xml,helper,assert,xml,equal,xml,content,content
ContentResultMatchers -> public ResultMatcher xml(final String xmlContent);1530174524;Parse the response content and the given string as XML and assert the two_are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher requires the <a_href="http://xmlunit.sourceforge.net/">XMLUnit</a> library._@param xmlContent the expected XML content_@see MockMvcResultMatchers#xpath(String, Object...)_@see MockMvcResultMatchers#xpath(String, Map, Object...);public ResultMatcher xml(final String xmlContent) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			this.xmlHelper.assertXmlEqual(xmlContent, content)__		}__	};parse,the,response,content,and,the,given,string,as,xml,and,assert,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,requires,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,param,xml,content,the,expected,xml,content,see,mock,mvc,result,matchers,xpath,string,object,see,mock,mvc,result,matchers,xpath,string,map,object;public,result,matcher,xml,final,string,xml,content,return,result,string,content,result,get,response,get,content,as,string,this,xml,helper,assert,xml,equal,xml,content,content
ContentResultMatchers -> public ResultMatcher xml(final String xmlContent);1530174524;Parse the response content and the given string as XML and assert the two_are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher requires the <a_href="http://xmlunit.sourceforge.net/">XMLUnit</a> library._@param xmlContent the expected XML content_@see MockMvcResultMatchers#xpath(String, Object...)_@see MockMvcResultMatchers#xpath(String, Map, Object...);public ResultMatcher xml(final String xmlContent) {_		return result -> {_			String content = result.getResponse().getContentAsString()__			this.xmlHelper.assertXmlEqual(xmlContent, content)__		}__	};parse,the,response,content,and,the,given,string,as,xml,and,assert,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,requires,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,param,xml,content,the,expected,xml,content,see,mock,mvc,result,matchers,xpath,string,object,see,mock,mvc,result,matchers,xpath,string,map,object;public,result,matcher,xml,final,string,xml,content,return,result,string,content,result,get,response,get,content,as,string,this,xml,helper,assert,xml,equal,xml,content,content
ContentResultMatchers -> public ResultMatcher json(final String jsonContent);1404269222;Parse the response content and the given string as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of order and formatting.__<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert<a/> library.__@param jsonContent the expected JSON content_@since 4.1;public ResultMatcher json(final String jsonContent) {_		return new ResultMatcher() {__			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				jsonHelper.assertJsonEqual(jsonContent, content)__			}_		}__	};parse,the,response,content,and,the,given,string,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,order,and,formatting,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,json,content,the,expected,json,content,since,4,1;public,result,matcher,json,final,string,json,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,json,helper,assert,json,equal,json,content,content
ContentResultMatchers -> public ResultMatcher json(final String jsonContent);1413848647;Parse the response content and the given string as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of order and formatting.__<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert<a/> library.__@param jsonContent the expected JSON content_@since 4.1;public ResultMatcher json(final String jsonContent) {_		return new ResultMatcher() {__			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				jsonHelper.assertJsonEqual(jsonContent, content)__			}_		}__	};parse,the,response,content,and,the,given,string,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,order,and,formatting,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,json,content,the,expected,json,content,since,4,1;public,result,matcher,json,final,string,json,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,json,helper,assert,json,equal,json,content,content
ContentResultMatchers -> public ResultMatcher json(final String jsonContent);1427238287;Parse the response content and the given string as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of order and formatting._<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert<a/> library._@param jsonContent the expected JSON content_@since 4.1;public ResultMatcher json(final String jsonContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				jsonHelper.assertJsonEqual(jsonContent, content)__			}_		}__	};parse,the,response,content,and,the,given,string,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,order,and,formatting,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,json,content,the,expected,json,content,since,4,1;public,result,matcher,json,final,string,json,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,json,helper,assert,json,equal,json,content,content
ContentResultMatchers -> public ResultMatcher json(final String jsonContent);1437424890;Parse the response content and the given string as JSON and assert the two_are "similar" &mdash_ i.e. they contain the same attribute-value pairs_regardless of order and formatting._<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert<a/> library._@param jsonContent the expected JSON content_@since 4.1;public ResultMatcher json(final String jsonContent) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String content = result.getResponse().getContentAsString()__				jsonHelper.assertJsonEqual(jsonContent, content)__			}_		}__	};parse,the,response,content,and,the,given,string,as,json,and,assert,the,two,are,similar,mdash,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,order,and,formatting,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,json,content,the,expected,json,content,since,4,1;public,result,matcher,json,final,string,json,content,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,content,result,get,response,get,content,as,string,json,helper,assert,json,equal,json,content,content
ContentResultMatchers -> public ResultMatcher json(final String jsonContent);1446134737;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict array_ordering).__@param jsonContent the expected JSON content_@since 4.1;public ResultMatcher json(final String jsonContent) {_		return json(jsonContent, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,param,json,content,the,expected,json,content,since,4,1;public,result,matcher,json,final,string,json,content,return,json,json,content,false
ContentResultMatchers -> public ResultMatcher json(final String jsonContent);1486652772;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict array_ordering).__@param jsonContent the expected JSON content_@since 4.1;public ResultMatcher json(final String jsonContent) {_		return json(jsonContent, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,param,json,content,the,expected,json,content,since,4,1;public,result,matcher,json,final,string,json,content,return,json,json,content,false
ContentResultMatchers -> public ResultMatcher json(final String jsonContent);1493235170;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict array_ordering)._@param jsonContent the expected JSON content_@since 4.1;public ResultMatcher json(final String jsonContent) {_		return json(jsonContent, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,param,json,content,the,expected,json,content,since,4,1;public,result,matcher,json,final,string,json,content,return,json,json,content,false
ContentResultMatchers -> public ResultMatcher json(final String jsonContent);1496955179;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict array_ordering)._@param jsonContent the expected JSON content_@since 4.1;public ResultMatcher json(final String jsonContent) {_		return json(jsonContent, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,param,json,content,the,expected,json,content,since,4,1;public,result,matcher,json,final,string,json,content,return,json,json,content,false
ContentResultMatchers -> public ResultMatcher json(final String jsonContent);1530174524;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict array_ordering)._@param jsonContent the expected JSON content_@since 4.1;public ResultMatcher json(final String jsonContent) {_		return json(jsonContent, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,param,json,content,the,expected,json,content,since,4,1;public,result,matcher,json,final,string,json,content,return,json,json,content,false
ContentResultMatchers -> public ResultMatcher json(final String jsonContent);1530174524;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict array_ordering)._@param jsonContent the expected JSON content_@since 4.1;public ResultMatcher json(final String jsonContent) {_		return json(jsonContent, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,param,json,content,the,expected,json,content,since,4,1;public,result,matcher,json,final,string,json,content,return,json,json,content,false
ContentResultMatchers -> public ResultMatcher json(final String jsonContent);1530174524;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict array_ordering)._@param jsonContent the expected JSON content_@since 4.1;public ResultMatcher json(final String jsonContent) {_		return json(jsonContent, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,param,json,content,the,expected,json,content,since,4,1;public,result,matcher,json,final,string,json,content,return,json,json,content,false
ContentResultMatchers -> public ResultMatcher contentType(final MediaType contentType);1383669853;Assert the ServletResponse content type after parsing it as a MediaType._The given content type must fully match including type, sub-type, and_parameters. For checking only the type and sub-type see_{@link #contentTypeCompatibleWith(MediaType)}.;public ResultMatcher contentType(final MediaType contentType) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String actual = result.getResponse().getContentType()__				assertTrue("Content type not set", actual != null)__				assertEquals("Content type", contentType, MediaType.parseMediaType(actual))__			}_		}__	};assert,the,servlet,response,content,type,after,parsing,it,as,a,media,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,media,type;public,result,matcher,content,type,final,media,type,content,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,assert,equals,content,type,content,type,media,type,parse,media,type,actual
ContentResultMatchers -> public ResultMatcher contentType(final MediaType contentType);1404269222;Assert the ServletResponse content type after parsing it as a MediaType._The given content type must fully match including type, sub-type, and_parameters. For checking only the type and sub-type see_{@link #contentTypeCompatibleWith(MediaType)}.;public ResultMatcher contentType(final MediaType contentType) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String actual = result.getResponse().getContentType()__				assertTrue("Content type not set", actual != null)__				assertEquals("Content type", contentType, MediaType.parseMediaType(actual))__			}_		}__	};assert,the,servlet,response,content,type,after,parsing,it,as,a,media,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,media,type;public,result,matcher,content,type,final,media,type,content,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,assert,equals,content,type,content,type,media,type,parse,media,type,actual
ContentResultMatchers -> public ResultMatcher contentType(final MediaType contentType);1413848647;Assert the ServletResponse content type after parsing it as a MediaType._The given content type must fully match including type, sub-type, and_parameters. For checking only the type and sub-type see_{@link #contentTypeCompatibleWith(MediaType)}.;public ResultMatcher contentType(final MediaType contentType) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String actual = result.getResponse().getContentType()__				assertTrue("Content type not set", actual != null)__				assertEquals("Content type", contentType, MediaType.parseMediaType(actual))__			}_		}__	};assert,the,servlet,response,content,type,after,parsing,it,as,a,media,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,media,type;public,result,matcher,content,type,final,media,type,content,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,assert,equals,content,type,content,type,media,type,parse,media,type,actual
ContentResultMatchers -> public ResultMatcher contentType(final MediaType contentType);1427238287;Assert the ServletResponse content type after parsing it as a MediaType._The given content type must fully match including type, sub-type, and_parameters. For checking only the type and sub-type see_{@link #contentTypeCompatibleWith(MediaType)}.;public ResultMatcher contentType(final MediaType contentType) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String actual = result.getResponse().getContentType()__				assertTrue("Content type not set", actual != null)__				assertEquals("Content type", contentType, MediaType.parseMediaType(actual))__			}_		}__	};assert,the,servlet,response,content,type,after,parsing,it,as,a,media,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,media,type;public,result,matcher,content,type,final,media,type,content,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,assert,equals,content,type,content,type,media,type,parse,media,type,actual
ContentResultMatchers -> public ResultMatcher contentType(final MediaType contentType);1437424890;Assert the ServletResponse content type after parsing it as a MediaType._The given content type must fully match including type, sub-type, and_parameters. For checking only the type and sub-type see_{@link #contentTypeCompatibleWith(MediaType)}.;public ResultMatcher contentType(final MediaType contentType) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String actual = result.getResponse().getContentType()__				assertTrue("Content type not set", actual != null)__				assertEquals("Content type", contentType, MediaType.parseMediaType(actual))__			}_		}__	};assert,the,servlet,response,content,type,after,parsing,it,as,a,media,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,media,type;public,result,matcher,content,type,final,media,type,content,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,assert,equals,content,type,content,type,media,type,parse,media,type,actual
ContentResultMatchers -> public ResultMatcher contentType(final MediaType contentType);1446134737;Assert the ServletResponse content type after parsing it as a MediaType._The given content type must fully match including type, sub-type, and_parameters. For checking only the type and sub-type see_{@link #contentTypeCompatibleWith(MediaType)}.;public ResultMatcher contentType(final MediaType contentType) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String actual = result.getResponse().getContentType()__				assertTrue("Content type not set", actual != null)__				assertEquals("Content type", contentType, MediaType.parseMediaType(actual))__			}_		}__	};assert,the,servlet,response,content,type,after,parsing,it,as,a,media,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,media,type;public,result,matcher,content,type,final,media,type,content,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,assert,equals,content,type,content,type,media,type,parse,media,type,actual
ContentResultMatchers -> public ResultMatcher contentType(final MediaType contentType);1486652772;Assert the ServletResponse content type after parsing it as a MediaType._The given content type must fully match including type, sub-type, and_parameters. For checking only the type and sub-type see_{@link #contentTypeCompatibleWith(MediaType)}.;public ResultMatcher contentType(final MediaType contentType) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				String actual = result.getResponse().getContentType()__				assertTrue("Content type not set", actual != null)__				assertEquals("Content type", contentType, MediaType.parseMediaType(actual))__			}_		}__	};assert,the,servlet,response,content,type,after,parsing,it,as,a,media,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,media,type;public,result,matcher,content,type,final,media,type,content,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,assert,equals,content,type,content,type,media,type,parse,media,type,actual
ContentResultMatchers -> public ResultMatcher contentType(final MediaType contentType);1493235170;Assert the ServletResponse content type after parsing it as a MediaType._The given content type must fully match including type, sub-type, and_parameters. For checking only the type and sub-type see_{@link #contentTypeCompatibleWith(MediaType)}.;public ResultMatcher contentType(final MediaType contentType) {_		return result -> {_			String actual = result.getResponse().getContentType()__			assertTrue("Content type not set", actual != null)__			assertEquals("Content type", contentType, MediaType.parseMediaType(actual))__		}__	};assert,the,servlet,response,content,type,after,parsing,it,as,a,media,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,media,type;public,result,matcher,content,type,final,media,type,content,type,return,result,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,assert,equals,content,type,content,type,media,type,parse,media,type,actual
ContentResultMatchers -> public ResultMatcher contentType(final MediaType contentType);1496955179;Assert the ServletResponse content type after parsing it as a MediaType._The given content type must fully match including type, sub-type, and_parameters. For checking only the type and sub-type see_{@link #contentTypeCompatibleWith(MediaType)}.;public ResultMatcher contentType(final MediaType contentType) {_		return result -> {_			String actual = result.getResponse().getContentType()__			assertTrue("Content type not set", actual != null)__			if (actual != null) {_				assertEquals("Content type", contentType, MediaType.parseMediaType(actual))__			}_		}__	};assert,the,servlet,response,content,type,after,parsing,it,as,a,media,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,media,type;public,result,matcher,content,type,final,media,type,content,type,return,result,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,if,actual,null,assert,equals,content,type,content,type,media,type,parse,media,type,actual
ContentResultMatchers -> public ResultMatcher contentType(final MediaType contentType);1530174524;Assert the ServletResponse content type after parsing it as a MediaType._The given content type must fully match including type, sub-type, and_parameters. For checking only the type and sub-type see_{@link #contentTypeCompatibleWith(MediaType)}.;public ResultMatcher contentType(final MediaType contentType) {_		return result -> {_			String actual = result.getResponse().getContentType()__			assertTrue("Content type not set", actual != null)__			if (actual != null) {_				assertEquals("Content type", contentType, MediaType.parseMediaType(actual))__			}_		}__	};assert,the,servlet,response,content,type,after,parsing,it,as,a,media,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,media,type;public,result,matcher,content,type,final,media,type,content,type,return,result,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,if,actual,null,assert,equals,content,type,content,type,media,type,parse,media,type,actual
ContentResultMatchers -> public ResultMatcher contentType(final MediaType contentType);1530174524;Assert the ServletResponse content type after parsing it as a MediaType._The given content type must fully match including type, sub-type, and_parameters. For checking only the type and sub-type see_{@link #contentTypeCompatibleWith(MediaType)}.;public ResultMatcher contentType(final MediaType contentType) {_		return result -> {_			String actual = result.getResponse().getContentType()__			assertTrue("Content type not set", actual != null)__			if (actual != null) {_				assertEquals("Content type", contentType, MediaType.parseMediaType(actual))__			}_		}__	};assert,the,servlet,response,content,type,after,parsing,it,as,a,media,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,media,type;public,result,matcher,content,type,final,media,type,content,type,return,result,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,if,actual,null,assert,equals,content,type,content,type,media,type,parse,media,type,actual
ContentResultMatchers -> public ResultMatcher contentType(final MediaType contentType);1530174524;Assert the ServletResponse content type after parsing it as a MediaType._The given content type must fully match including type, sub-type, and_parameters. For checking only the type and sub-type see_{@link #contentTypeCompatibleWith(MediaType)}.;public ResultMatcher contentType(final MediaType contentType) {_		return result -> {_			String actual = result.getResponse().getContentType()__			assertTrue("Content type not set", actual != null)__			if (actual != null) {_				assertEquals("Content type", contentType, MediaType.parseMediaType(actual))__			}_		}__	};assert,the,servlet,response,content,type,after,parsing,it,as,a,media,type,the,given,content,type,must,fully,match,including,type,sub,type,and,parameters,for,checking,only,the,type,and,sub,type,see,link,content,type,compatible,with,media,type;public,result,matcher,content,type,final,media,type,content,type,return,result,string,actual,result,get,response,get,content,type,assert,true,content,type,not,set,actual,null,if,actual,null,assert,equals,content,type,content,type,media,type,parse,media,type,actual
ContentResultMatchers -> public ResultMatcher string(final Matcher<? super String> matcher);1383669853;Assert the response body content with a Hamcrest {@link Matcher}._<pre class="code">_mockMvc.perform(get("/path"))_.andExpect(content(containsString("text")))__</pre>;public ResultMatcher string(final Matcher<? super String> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertThat("Response content", result.getResponse().getContentAsString(), matcher)__			}_		}__	};assert,the,response,body,content,with,a,hamcrest,link,matcher,pre,class,code,mock,mvc,perform,get,path,and,expect,content,contains,string,text,pre;public,result,matcher,string,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,that,response,content,result,get,response,get,content,as,string,matcher
ContentResultMatchers -> public ResultMatcher string(final Matcher<? super String> matcher);1404269222;Assert the response body content with a Hamcrest {@link Matcher}._<pre class="code">_mockMvc.perform(get("/path"))_.andExpect(content(containsString("text")))__</pre>;public ResultMatcher string(final Matcher<? super String> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertThat("Response content", result.getResponse().getContentAsString(), matcher)__			}_		}__	};assert,the,response,body,content,with,a,hamcrest,link,matcher,pre,class,code,mock,mvc,perform,get,path,and,expect,content,contains,string,text,pre;public,result,matcher,string,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,that,response,content,result,get,response,get,content,as,string,matcher
ContentResultMatchers -> public ResultMatcher string(final Matcher<? super String> matcher);1413848647;Assert the response body content with a Hamcrest {@link Matcher}._<pre class="code">_mockMvc.perform(get("/path"))_.andExpect(content(containsString("text")))__</pre>;public ResultMatcher string(final Matcher<? super String> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertThat("Response content", result.getResponse().getContentAsString(), matcher)__			}_		}__	};assert,the,response,body,content,with,a,hamcrest,link,matcher,pre,class,code,mock,mvc,perform,get,path,and,expect,content,contains,string,text,pre;public,result,matcher,string,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,that,response,content,result,get,response,get,content,as,string,matcher
ContentResultMatchers -> public ResultMatcher string(final Matcher<? super String> matcher);1427238287;Assert the response body content with a Hamcrest {@link Matcher}._<pre class="code">_mockMvc.perform(get("/path"))_.andExpect(content(containsString("text")))__</pre>;public ResultMatcher string(final Matcher<? super String> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertThat("Response content", result.getResponse().getContentAsString(), matcher)__			}_		}__	};assert,the,response,body,content,with,a,hamcrest,link,matcher,pre,class,code,mock,mvc,perform,get,path,and,expect,content,contains,string,text,pre;public,result,matcher,string,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,that,response,content,result,get,response,get,content,as,string,matcher
ContentResultMatchers -> public ResultMatcher string(final Matcher<? super String> matcher);1437424890;Assert the response body content with a Hamcrest {@link Matcher}._<pre class="code">_mockMvc.perform(get("/path"))_.andExpect(content(containsString("text")))__</pre>;public ResultMatcher string(final Matcher<? super String> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertThat("Response content", result.getResponse().getContentAsString(), matcher)__			}_		}__	};assert,the,response,body,content,with,a,hamcrest,link,matcher,pre,class,code,mock,mvc,perform,get,path,and,expect,content,contains,string,text,pre;public,result,matcher,string,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,that,response,content,result,get,response,get,content,as,string,matcher
ContentResultMatchers -> public ResultMatcher string(final Matcher<? super String> matcher);1446134737;Assert the response body content with a Hamcrest {@link Matcher}._<pre class="code">_mockMvc.perform(get("/path"))_.andExpect(content(containsString("text")))__</pre>;public ResultMatcher string(final Matcher<? super String> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertThat("Response content", result.getResponse().getContentAsString(), matcher)__			}_		}__	};assert,the,response,body,content,with,a,hamcrest,link,matcher,pre,class,code,mock,mvc,perform,get,path,and,expect,content,contains,string,text,pre;public,result,matcher,string,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,that,response,content,result,get,response,get,content,as,string,matcher
ContentResultMatchers -> public ResultMatcher string(final Matcher<? super String> matcher);1486652772;Assert the response body content with a Hamcrest {@link Matcher}._<pre class="code">_mockMvc.perform(get("/path"))_.andExpect(content().string(containsString("text")))__</pre>;public ResultMatcher string(final Matcher<? super String> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				assertThat("Response content", result.getResponse().getContentAsString(), matcher)__			}_		}__	};assert,the,response,body,content,with,a,hamcrest,link,matcher,pre,class,code,mock,mvc,perform,get,path,and,expect,content,string,contains,string,text,pre;public,result,matcher,string,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,assert,that,response,content,result,get,response,get,content,as,string,matcher
ContentResultMatchers -> public ResultMatcher string(final Matcher<? super String> matcher);1493235170;Assert the response body content with a Hamcrest {@link Matcher}._<pre class="code">_mockMvc.perform(get("/path"))_.andExpect(content().string(containsString("text")))__</pre>;public ResultMatcher string(final Matcher<? super String> matcher) {_		return result -> assertThat("Response content", result.getResponse().getContentAsString(), matcher)__	};assert,the,response,body,content,with,a,hamcrest,link,matcher,pre,class,code,mock,mvc,perform,get,path,and,expect,content,string,contains,string,text,pre;public,result,matcher,string,final,matcher,super,string,matcher,return,result,assert,that,response,content,result,get,response,get,content,as,string,matcher
ContentResultMatchers -> public ResultMatcher string(final Matcher<? super String> matcher);1496955179;Assert the response body content with a Hamcrest {@link Matcher}._<pre class="code">_mockMvc.perform(get("/path"))_.andExpect(content().string(containsString("text")))__</pre>;public ResultMatcher string(final Matcher<? super String> matcher) {_		return result -> assertThat("Response content", result.getResponse().getContentAsString(), matcher)__	};assert,the,response,body,content,with,a,hamcrest,link,matcher,pre,class,code,mock,mvc,perform,get,path,and,expect,content,string,contains,string,text,pre;public,result,matcher,string,final,matcher,super,string,matcher,return,result,assert,that,response,content,result,get,response,get,content,as,string,matcher
ContentResultMatchers -> public ResultMatcher string(final Matcher<? super String> matcher);1530174524;Assert the response body content with a Hamcrest {@link Matcher}._<pre class="code">_mockMvc.perform(get("/path"))_.andExpect(content().string(containsString("text")))__</pre>;public ResultMatcher string(final Matcher<? super String> matcher) {_		return result -> assertThat("Response content", result.getResponse().getContentAsString(), matcher)__	};assert,the,response,body,content,with,a,hamcrest,link,matcher,pre,class,code,mock,mvc,perform,get,path,and,expect,content,string,contains,string,text,pre;public,result,matcher,string,final,matcher,super,string,matcher,return,result,assert,that,response,content,result,get,response,get,content,as,string,matcher
ContentResultMatchers -> public ResultMatcher string(final Matcher<? super String> matcher);1530174524;Assert the response body content with a Hamcrest {@link Matcher}._<pre class="code">_mockMvc.perform(get("/path"))_.andExpect(content().string(containsString("text")))__</pre>;public ResultMatcher string(final Matcher<? super String> matcher) {_		return result -> assertThat("Response content", result.getResponse().getContentAsString(), matcher)__	};assert,the,response,body,content,with,a,hamcrest,link,matcher,pre,class,code,mock,mvc,perform,get,path,and,expect,content,string,contains,string,text,pre;public,result,matcher,string,final,matcher,super,string,matcher,return,result,assert,that,response,content,result,get,response,get,content,as,string,matcher
ContentResultMatchers -> public ResultMatcher string(final Matcher<? super String> matcher);1530174524;Assert the response body content with a Hamcrest {@link Matcher}._<pre class="code">_mockMvc.perform(get("/path"))_.andExpect(content().string(containsString("text")))__</pre>;public ResultMatcher string(final Matcher<? super String> matcher) {_		return result -> assertThat("Response content", result.getResponse().getContentAsString(), matcher)__	};assert,the,response,body,content,with,a,hamcrest,link,matcher,pre,class,code,mock,mvc,perform,get,path,and,expect,content,string,contains,string,text,pre;public,result,matcher,string,final,matcher,super,string,matcher,return,result,assert,that,response,content,result,get,response,get,content,as,string,matcher
ContentResultMatchers -> protected ContentResultMatchers();1383669853;Protected constructor._Use {@link MockMvcResultMatchers#content()}.;protected ContentResultMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__	};protected,constructor,use,link,mock,mvc,result,matchers,content;protected,content,result,matchers,this,xml,helper,new,xml,expectations,helper
ContentResultMatchers -> protected ContentResultMatchers();1404269222;Protected constructor._Use {@link MockMvcResultMatchers#content()}.;protected ContentResultMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__		this.jsonHelper = new JsonExpectationsHelper()__	};protected,constructor,use,link,mock,mvc,result,matchers,content;protected,content,result,matchers,this,xml,helper,new,xml,expectations,helper,this,json,helper,new,json,expectations,helper
ContentResultMatchers -> protected ContentResultMatchers();1413848647;Protected constructor._Use {@link MockMvcResultMatchers#content()}.;protected ContentResultMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__		this.jsonHelper = new JsonExpectationsHelper()__	};protected,constructor,use,link,mock,mvc,result,matchers,content;protected,content,result,matchers,this,xml,helper,new,xml,expectations,helper,this,json,helper,new,json,expectations,helper
ContentResultMatchers -> protected ContentResultMatchers();1427238287;Protected constructor._Use {@link MockMvcResultMatchers#content()}.;protected ContentResultMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__		this.jsonHelper = new JsonExpectationsHelper()__	};protected,constructor,use,link,mock,mvc,result,matchers,content;protected,content,result,matchers,this,xml,helper,new,xml,expectations,helper,this,json,helper,new,json,expectations,helper
ContentResultMatchers -> protected ContentResultMatchers();1437424890;Protected constructor._Use {@link MockMvcResultMatchers#content()}.;protected ContentResultMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__		this.jsonHelper = new JsonExpectationsHelper()__	};protected,constructor,use,link,mock,mvc,result,matchers,content;protected,content,result,matchers,this,xml,helper,new,xml,expectations,helper,this,json,helper,new,json,expectations,helper
ContentResultMatchers -> protected ContentResultMatchers();1446134737;Protected constructor._Use {@link MockMvcResultMatchers#content()}.;protected ContentResultMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__		this.jsonHelper = new JsonExpectationsHelper()__	};protected,constructor,use,link,mock,mvc,result,matchers,content;protected,content,result,matchers,this,xml,helper,new,xml,expectations,helper,this,json,helper,new,json,expectations,helper
ContentResultMatchers -> protected ContentResultMatchers();1486652772;Protected constructor._Use {@link MockMvcResultMatchers#content()}.;protected ContentResultMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__		this.jsonHelper = new JsonExpectationsHelper()__	};protected,constructor,use,link,mock,mvc,result,matchers,content;protected,content,result,matchers,this,xml,helper,new,xml,expectations,helper,this,json,helper,new,json,expectations,helper
ContentResultMatchers -> protected ContentResultMatchers();1493235170;Protected constructor._Use {@link MockMvcResultMatchers#content()}.;protected ContentResultMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__		this.jsonHelper = new JsonExpectationsHelper()__	};protected,constructor,use,link,mock,mvc,result,matchers,content;protected,content,result,matchers,this,xml,helper,new,xml,expectations,helper,this,json,helper,new,json,expectations,helper
ContentResultMatchers -> protected ContentResultMatchers();1496955179;Protected constructor._Use {@link MockMvcResultMatchers#content()}.;protected ContentResultMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__		this.jsonHelper = new JsonExpectationsHelper()__	};protected,constructor,use,link,mock,mvc,result,matchers,content;protected,content,result,matchers,this,xml,helper,new,xml,expectations,helper,this,json,helper,new,json,expectations,helper
ContentResultMatchers -> protected ContentResultMatchers();1530174524;Protected constructor._Use {@link MockMvcResultMatchers#content()}.;protected ContentResultMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__		this.jsonHelper = new JsonExpectationsHelper()__	};protected,constructor,use,link,mock,mvc,result,matchers,content;protected,content,result,matchers,this,xml,helper,new,xml,expectations,helper,this,json,helper,new,json,expectations,helper
ContentResultMatchers -> protected ContentResultMatchers();1530174524;Protected constructor._Use {@link MockMvcResultMatchers#content()}.;protected ContentResultMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__		this.jsonHelper = new JsonExpectationsHelper()__	};protected,constructor,use,link,mock,mvc,result,matchers,content;protected,content,result,matchers,this,xml,helper,new,xml,expectations,helper,this,json,helper,new,json,expectations,helper
ContentResultMatchers -> protected ContentResultMatchers();1530174524;Protected constructor._Use {@link MockMvcResultMatchers#content()}.;protected ContentResultMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__		this.jsonHelper = new JsonExpectationsHelper()__	};protected,constructor,use,link,mock,mvc,result,matchers,content;protected,content,result,matchers,this,xml,helper,new,xml,expectations,helper,this,json,helper,new,json,expectations,helper
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(String contentType);1383669853;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(String contentType);1404269222;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(String contentType);1413848647;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(String contentType);1427238287;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(String contentType);1437424890;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(String contentType);1446134737;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(String contentType);1486652772;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(String contentType);1493235170;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(String contentType);1496955179;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(String contentType);1530174524;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(String contentType);1530174524;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentResultMatchers -> public ResultMatcher contentTypeCompatibleWith(String contentType);1530174524;Assert the ServletResponse content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public ResultMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,servlet,response,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,result,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
