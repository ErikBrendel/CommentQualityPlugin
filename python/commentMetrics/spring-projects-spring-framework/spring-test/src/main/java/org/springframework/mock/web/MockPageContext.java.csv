commented;modifiers;parameterAmount;loc;comment;code
false;public;7;7;;@Override public void initialize(Servlet servlet, ServletRequest request, ServletResponse response, String errorPageURL, boolean needsSession, int bufferSize, boolean autoFlush) {     throw new UnsupportedOperationException("Use appropriate constructor"). }
false;public;0;3;;@Override public void release() { }
false;public;2;10;;@Override public void setAttribute(String name, @Nullable Object value) {     Assert.notNull(name, "Attribute name must not be null").     if (value != null) {         this.attributes.put(name, value).     } else {         this.attributes.remove(name).     } }
false;public;3;20;;@Override public void setAttribute(String name, @Nullable Object value, int scope) {     Assert.notNull(name, "Attribute name must not be null").     switch(scope) {         case PAGE_SCOPE:             setAttribute(name, value).             break.         case REQUEST_SCOPE:             this.request.setAttribute(name, value).             break.         case SESSION_SCOPE:             this.request.getSession().setAttribute(name, value).             break.         case APPLICATION_SCOPE:             this.servletContext.setAttribute(name, value).             break.         default:             throw new IllegalArgumentException("Invalid scope: " + scope).     } }
false;public;1;6;;@Override @Nullable public Object getAttribute(String name) {     Assert.notNull(name, "Attribute name must not be null").     return this.attributes.get(name). }
false;public;2;18;;@Override @Nullable public Object getAttribute(String name, int scope) {     Assert.notNull(name, "Attribute name must not be null").     switch(scope) {         case PAGE_SCOPE:             return getAttribute(name).         case REQUEST_SCOPE:             return this.request.getAttribute(name).         case SESSION_SCOPE:             HttpSession session = this.request.getSession(false).             return (session != null ? session.getAttribute(name) : null).         case APPLICATION_SCOPE:             return this.servletContext.getAttribute(name).         default:             throw new IllegalArgumentException("Invalid scope: " + scope).     } }
false;public;1;15;;@Override @Nullable public Object findAttribute(String name) {     Object value = getAttribute(name).     if (value == null) {         value = getAttribute(name, REQUEST_SCOPE).         if (value == null) {             value = getAttribute(name, SESSION_SCOPE).             if (value == null) {                 value = getAttribute(name, APPLICATION_SCOPE).             }         }     }     return value. }
false;public;1;8;;@Override public void removeAttribute(String name) {     Assert.notNull(name, "Attribute name must not be null").     this.removeAttribute(name, PageContext.PAGE_SCOPE).     this.removeAttribute(name, PageContext.REQUEST_SCOPE).     this.removeAttribute(name, PageContext.SESSION_SCOPE).     this.removeAttribute(name, PageContext.APPLICATION_SCOPE). }
false;public;2;20;;@Override public void removeAttribute(String name, int scope) {     Assert.notNull(name, "Attribute name must not be null").     switch(scope) {         case PAGE_SCOPE:             this.attributes.remove(name).             break.         case REQUEST_SCOPE:             this.request.removeAttribute(name).             break.         case SESSION_SCOPE:             this.request.getSession().removeAttribute(name).             break.         case APPLICATION_SCOPE:             this.servletContext.removeAttribute(name).             break.         default:             throw new IllegalArgumentException("Invalid scope: " + scope).     } }
false;public;1;18;;@Override public int getAttributesScope(String name) {     if (getAttribute(name) != null) {         return PAGE_SCOPE.     } else if (getAttribute(name, REQUEST_SCOPE) != null) {         return REQUEST_SCOPE.     } else if (getAttribute(name, SESSION_SCOPE) != null) {         return SESSION_SCOPE.     } else if (getAttribute(name, APPLICATION_SCOPE) != null) {         return APPLICATION_SCOPE.     } else {         return 0.     } }
false;public;0;3;;public Enumeration<String> getAttributeNames() {     return Collections.enumeration(new LinkedHashSet<>(this.attributes.keySet())). }
false;public;1;16;;@Override public Enumeration<String> getAttributeNamesInScope(int scope) {     switch(scope) {         case PAGE_SCOPE:             return getAttributeNames().         case REQUEST_SCOPE:             return this.request.getAttributeNames().         case SESSION_SCOPE:             HttpSession session = this.request.getSession(false).             return (session != null ? session.getAttributeNames() : Collections.emptyEnumeration()).         case APPLICATION_SCOPE:             return this.servletContext.getAttributeNames().         default:             throw new IllegalArgumentException("Invalid scope: " + scope).     } }
false;public;0;7;;@Override public JspWriter getOut() {     if (this.out == null) {         this.out = new MockJspWriter(this.response).     }     return this.out. }
false;public;0;5;;@Override @Deprecated public javax.servlet.jsp.el.ExpressionEvaluator getExpressionEvaluator() {     return new MockExpressionEvaluator(this). }
false;public;0;5;;@Override @Nullable public ELContext getELContext() {     return null. }
false;public;0;6;;@Override @Deprecated @Nullable public javax.servlet.jsp.el.VariableResolver getVariableResolver() {     return null. }
false;public;0;4;;@Override public HttpSession getSession() {     return this.request.getSession(). }
false;public;0;4;;@Override public Object getPage() {     return this. }
false;public;0;4;;@Override public ServletRequest getRequest() {     return this.request. }
false;public;0;4;;@Override public ServletResponse getResponse() {     return this.response. }
false;public;0;5;;@Override @Nullable public Exception getException() {     return null. }
false;public;0;4;;@Override public ServletConfig getServletConfig() {     return this.servletConfig. }
false;public;0;4;;@Override public ServletContext getServletContext() {     return this.servletContext. }
false;public;1;4;;@Override public void forward(String path) throws ServletException, IOException {     this.request.getRequestDispatcher(path).forward(this.request, this.response). }
false;public;1;4;;@Override public void include(String path) throws ServletException, IOException {     this.request.getRequestDispatcher(path).include(this.request, this.response). }
false;public;2;7;;@Override public void include(String path, boolean flush) throws ServletException, IOException {     this.request.getRequestDispatcher(path).include(this.request, this.response).     if (flush) {         this.response.flushBuffer().     } }
false;public;0;4;;public byte[] getContentAsByteArray() {     Assert.state(this.response instanceof MockHttpServletResponse, "MockHttpServletResponse required").     return ((MockHttpServletResponse) this.response).getContentAsByteArray(). }
false;public;0;4;;public String getContentAsString() throws UnsupportedEncodingException {     Assert.state(this.response instanceof MockHttpServletResponse, "MockHttpServletResponse required").     return ((MockHttpServletResponse) this.response).getContentAsString(). }
false;public;1;4;;@Override public void handlePageException(Exception ex) throws ServletException, IOException {     throw new ServletException("Page exception", ex). }
false;public;1;4;;@Override public void handlePageException(Throwable ex) throws ServletException, IOException {     throw new ServletException("Page exception", ex). }
