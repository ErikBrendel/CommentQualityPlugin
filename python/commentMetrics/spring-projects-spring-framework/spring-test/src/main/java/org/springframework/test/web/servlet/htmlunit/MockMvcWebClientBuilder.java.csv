commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;4;/**  * Create a new {@code MockMvcWebClientBuilder} based on the supplied  * {@link MockMvc} instance.  * @param mockMvc the {@code MockMvc} instance to use. never {@code null}  * @return the MockMvcWebClientBuilder to customize  */ ;/**  * Create a new {@code MockMvcWebClientBuilder} based on the supplied  * {@link MockMvc} instance.  * @param mockMvc the {@code MockMvc} instance to use. never {@code null}  * @return the MockMvcWebClientBuilder to customize  */ public static MockMvcWebClientBuilder mockMvcSetup(MockMvc mockMvc) {     Assert.notNull(mockMvc, "MockMvc must not be null").     return new MockMvcWebClientBuilder(mockMvc). }
true;public,static;1;4;/**  * Create a new {@code MockMvcWebClientBuilder} based on the supplied  * {@link WebApplicationContext}.  * @param context the {@code WebApplicationContext} to create a {@link MockMvc}  * instance from. never {@code null}  * @return the MockMvcWebClientBuilder to customize  */ ;/**  * Create a new {@code MockMvcWebClientBuilder} based on the supplied  * {@link WebApplicationContext}.  * @param context the {@code WebApplicationContext} to create a {@link MockMvc}  * instance from. never {@code null}  * @return the MockMvcWebClientBuilder to customize  */ public static MockMvcWebClientBuilder webAppContextSetup(WebApplicationContext context) {     Assert.notNull(context, "WebApplicationContext must not be null").     return new MockMvcWebClientBuilder(context). }
true;public,static;2;5;/**  * Create a new {@code MockMvcWebClientBuilder} based on the supplied  * {@link WebApplicationContext} and {@link MockMvcConfigurer}.  * @param context the {@code WebApplicationContext} to create a {@link MockMvc}  * instance from. never {@code null}  * @param configurer the {@code MockMvcConfigurer} to apply. never {@code null}  * @return the MockMvcWebClientBuilder to customize  */ ;/**  * Create a new {@code MockMvcWebClientBuilder} based on the supplied  * {@link WebApplicationContext} and {@link MockMvcConfigurer}.  * @param context the {@code WebApplicationContext} to create a {@link MockMvc}  * instance from. never {@code null}  * @param configurer the {@code MockMvcConfigurer} to apply. never {@code null}  * @return the MockMvcWebClientBuilder to customize  */ public static MockMvcWebClientBuilder webAppContextSetup(WebApplicationContext context, MockMvcConfigurer configurer) {     Assert.notNull(context, "WebApplicationContext must not be null").     Assert.notNull(configurer, "MockMvcConfigurer must not be null").     return new MockMvcWebClientBuilder(context, configurer). }
true;public;1;6;/**  * Supply the {@code WebClient} that the client {@linkplain #build built}  * by this builder should delegate to when processing  * non-{@linkplain WebRequestMatcher matching} requests.  * @param webClient the {@code WebClient} to delegate to for requests  * that do not match. never {@code null}  * @return this builder for further customization  * @see #build()  */ ;/**  * Supply the {@code WebClient} that the client {@linkplain #build built}  * by this builder should delegate to when processing  * non-{@linkplain WebRequestMatcher matching} requests.  * @param webClient the {@code WebClient} to delegate to for requests  * that do not match. never {@code null}  * @return this builder for further customization  * @see #build()  */ public MockMvcWebClientBuilder withDelegate(WebClient webClient) {     Assert.notNull(webClient, "WebClient must not be null").     webClient.setWebConnection(createConnection(webClient)).     this.webClient = webClient.     return this. }
true;public;0;3;/**  * Build the {@link WebClient} configured via this builder.  * <p>The returned client will use the configured {@link MockMvc} instance  * for processing any {@linkplain WebRequestMatcher matching} requests  * and a delegate {@code WebClient} for all other requests.  * <p>If a {@linkplain #withDelegate delegate} has been explicitly configured,  * it will be used. otherwise, a default {@code WebClient} will be configured  * as the delegate.  * @return the {@code WebClient} to use  * @see #withDelegate(WebClient)  */ ;/**  * Build the {@link WebClient} configured via this builder.  * <p>The returned client will use the configured {@link MockMvc} instance  * for processing any {@linkplain WebRequestMatcher matching} requests  * and a delegate {@code WebClient} for all other requests.  * <p>If a {@linkplain #withDelegate delegate} has been explicitly configured,  * it will be used. otherwise, a default {@code WebClient} will be configured  * as the delegate.  * @return the {@code WebClient} to use  * @see #withDelegate(WebClient)  */ public WebClient build() {     return (this.webClient != null ? this.webClient : withDelegate(new WebClient()).build()). }
