# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotationConfigContextLoaderUtils -> public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1354573750;Detect the default configuration classes for the supplied test class.__<p>The returned class array will contain all static inner classes of_the supplied class that meet the requirements for {@code @Configuration}_class implementations as specified in the documentation for_{@link Configuration @Configuration}.__<p>The implementation of this method adheres to the contract defined in the_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader}_SPI. Specifically, this method uses introspection to detect default_configuration classes that comply with the constraints required of_{@code @Configuration} class implementations. If a potential candidate_configuration class does not meet these requirements, this method will log a_warning, and the potential candidate class will be ignored._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never <code>null</code>;public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		Assert.notNull(declaringClass, "Declaring class must not be null")___		List<Class<?>> configClasses = new ArrayList<Class<?>>()___		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {_			if (isDefaultConfigurationClassCandidate(candidate)) {_				configClasses.add(candidate)__			} else {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Ignoring class [%s]_ it must be static, non-private, non-final, and annotated "_								+ "with @Configuration to be considered a default configuration class.",_						candidate.getName()))__				}_			}_		}__		if (configClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default configuration classes for test class [%s]: "_						+ "%s does not declare any static, non-private, non-final, inner classes "_						+ "annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))__			}_		}__		return configClasses.toArray(new Class<?>[configClasses.size()])__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,returned,class,array,will,contain,all,static,inner,classes,of,the,supplied,class,that,meet,the,requirements,for,code,configuration,class,implementations,as,specified,in,the,documentation,for,link,configuration,configuration,p,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,org,springframework,test,context,smart,context,loader,smart,context,loader,spi,specifically,this,method,uses,introspection,to,detect,default,configuration,classes,that,comply,with,the,constraints,required,of,code,configuration,class,implementations,if,a,potential,candidate,configuration,class,does,not,meet,these,requirements,this,method,will,log,a,warning,and,the,potential,candidate,class,will,be,ignored,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,code;public,static,class,detect,default,configuration,classes,class,declaring,class,assert,not,null,declaring,class,declaring,class,must,not,be,null,list,class,config,classes,new,array,list,class,for,class,candidate,declaring,class,get,declared,classes,if,is,default,configuration,class,candidate,candidate,config,classes,add,candidate,else,if,logger,is,debug,enabled,logger,debug,string,format,ignoring,class,s,it,must,be,static,non,private,non,final,and,annotated,with,configuration,to,be,considered,a,default,configuration,class,candidate,get,name,if,config,classes,is,empty,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,configuration,classes,for,test,class,s,s,does,not,declare,any,static,non,private,non,final,inner,classes,annotated,with,configuration,declaring,class,get,name,declaring,class,get,simple,name,return,config,classes,to,array,new,class,config,classes,size
AnnotationConfigContextLoaderUtils -> public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1355187490;Detect the default configuration classes for the supplied test class.__<p>The returned class array will contain all static inner classes of_the supplied class that meet the requirements for {@code @Configuration}_class implementations as specified in the documentation for_{@link Configuration @Configuration}.__<p>The implementation of this method adheres to the contract defined in the_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader}_SPI. Specifically, this method uses introspection to detect default_configuration classes that comply with the constraints required of_{@code @Configuration} class implementations. If a potential candidate_configuration class does not meet these requirements, this method will log a_warning, and the potential candidate class will be ignored._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never <code>null</code>;public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		Assert.notNull(declaringClass, "Declaring class must not be null")___		List<Class<?>> configClasses = new ArrayList<Class<?>>()___		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {_			if (isDefaultConfigurationClassCandidate(candidate)) {_				configClasses.add(candidate)__			} else {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Ignoring class [%s]_ it must be static, non-private, non-final, and annotated "_								+ "with @Configuration to be considered a default configuration class.",_						candidate.getName()))__				}_			}_		}__		if (configClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default configuration classes for test class [%s]: "_						+ "%s does not declare any static, non-private, non-final, inner classes "_						+ "annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))__			}_		}__		return configClasses.toArray(new Class<?>[configClasses.size()])__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,returned,class,array,will,contain,all,static,inner,classes,of,the,supplied,class,that,meet,the,requirements,for,code,configuration,class,implementations,as,specified,in,the,documentation,for,link,configuration,configuration,p,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,org,springframework,test,context,smart,context,loader,smart,context,loader,spi,specifically,this,method,uses,introspection,to,detect,default,configuration,classes,that,comply,with,the,constraints,required,of,code,configuration,class,implementations,if,a,potential,candidate,configuration,class,does,not,meet,these,requirements,this,method,will,log,a,warning,and,the,potential,candidate,class,will,be,ignored,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,code;public,static,class,detect,default,configuration,classes,class,declaring,class,assert,not,null,declaring,class,declaring,class,must,not,be,null,list,class,config,classes,new,array,list,class,for,class,candidate,declaring,class,get,declared,classes,if,is,default,configuration,class,candidate,candidate,config,classes,add,candidate,else,if,logger,is,debug,enabled,logger,debug,string,format,ignoring,class,s,it,must,be,static,non,private,non,final,and,annotated,with,configuration,to,be,considered,a,default,configuration,class,candidate,get,name,if,config,classes,is,empty,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,configuration,classes,for,test,class,s,s,does,not,declare,any,static,non,private,non,final,inner,classes,annotated,with,configuration,declaring,class,get,name,declaring,class,get,simple,name,return,config,classes,to,array,new,class,config,classes,size
AnnotationConfigContextLoaderUtils -> public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1356735495;Detect the default configuration classes for the supplied test class.__<p>The returned class array will contain all static inner classes of_the supplied class that meet the requirements for {@code @Configuration}_class implementations as specified in the documentation for_{@link Configuration @Configuration}.__<p>The implementation of this method adheres to the contract defined in the_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader}_SPI. Specifically, this method uses introspection to detect default_configuration classes that comply with the constraints required of_{@code @Configuration} class implementations. If a potential candidate_configuration class does not meet these requirements, this method will log a_warning, and the potential candidate class will be ignored._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null};public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		Assert.notNull(declaringClass, "Declaring class must not be null")___		List<Class<?>> configClasses = new ArrayList<Class<?>>()___		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {_			if (isDefaultConfigurationClassCandidate(candidate)) {_				configClasses.add(candidate)__			} else {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Ignoring class [%s]_ it must be static, non-private, non-final, and annotated "_								+ "with @Configuration to be considered a default configuration class.",_						candidate.getName()))__				}_			}_		}__		if (configClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default configuration classes for test class [%s]: "_						+ "%s does not declare any static, non-private, non-final, inner classes "_						+ "annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))__			}_		}__		return configClasses.toArray(new Class<?>[configClasses.size()])__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,returned,class,array,will,contain,all,static,inner,classes,of,the,supplied,class,that,meet,the,requirements,for,code,configuration,class,implementations,as,specified,in,the,documentation,for,link,configuration,configuration,p,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,org,springframework,test,context,smart,context,loader,smart,context,loader,spi,specifically,this,method,uses,introspection,to,detect,default,configuration,classes,that,comply,with,the,constraints,required,of,code,configuration,class,implementations,if,a,potential,candidate,configuration,class,does,not,meet,these,requirements,this,method,will,log,a,warning,and,the,potential,candidate,class,will,be,ignored,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null;public,static,class,detect,default,configuration,classes,class,declaring,class,assert,not,null,declaring,class,declaring,class,must,not,be,null,list,class,config,classes,new,array,list,class,for,class,candidate,declaring,class,get,declared,classes,if,is,default,configuration,class,candidate,candidate,config,classes,add,candidate,else,if,logger,is,debug,enabled,logger,debug,string,format,ignoring,class,s,it,must,be,static,non,private,non,final,and,annotated,with,configuration,to,be,considered,a,default,configuration,class,candidate,get,name,if,config,classes,is,empty,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,configuration,classes,for,test,class,s,s,does,not,declare,any,static,non,private,non,final,inner,classes,annotated,with,configuration,declaring,class,get,name,declaring,class,get,simple,name,return,config,classes,to,array,new,class,config,classes,size
AnnotationConfigContextLoaderUtils -> public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1396374528;Detect the default configuration classes for the supplied test class.__<p>The returned class array will contain all static inner classes of_the supplied class that meet the requirements for {@code @Configuration}_class implementations as specified in the documentation for_{@link Configuration @Configuration}.__<p>The implementation of this method adheres to the contract defined in the_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader}_SPI. Specifically, this method uses introspection to detect default_configuration classes that comply with the constraints required of_{@code @Configuration} class implementations. If a potential candidate_configuration class does not meet these requirements, this method will log a_debug message, and the potential candidate class will be ignored._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null};public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		Assert.notNull(declaringClass, "Declaring class must not be null")___		List<Class<?>> configClasses = new ArrayList<Class<?>>()___		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {_			if (isDefaultConfigurationClassCandidate(candidate)) {_				configClasses.add(candidate)__			} else {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Ignoring class [%s]_ it must be static, non-private, non-final, and annotated "_								+ "with @Configuration to be considered a default configuration class.",_						candidate.getName()))__				}_			}_		}__		if (configClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default configuration classes for test class [%s]: "_						+ "%s does not declare any static, non-private, non-final, inner classes "_						+ "annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))__			}_		}__		return configClasses.toArray(new Class<?>[configClasses.size()])__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,returned,class,array,will,contain,all,static,inner,classes,of,the,supplied,class,that,meet,the,requirements,for,code,configuration,class,implementations,as,specified,in,the,documentation,for,link,configuration,configuration,p,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,org,springframework,test,context,smart,context,loader,smart,context,loader,spi,specifically,this,method,uses,introspection,to,detect,default,configuration,classes,that,comply,with,the,constraints,required,of,code,configuration,class,implementations,if,a,potential,candidate,configuration,class,does,not,meet,these,requirements,this,method,will,log,a,debug,message,and,the,potential,candidate,class,will,be,ignored,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null;public,static,class,detect,default,configuration,classes,class,declaring,class,assert,not,null,declaring,class,declaring,class,must,not,be,null,list,class,config,classes,new,array,list,class,for,class,candidate,declaring,class,get,declared,classes,if,is,default,configuration,class,candidate,candidate,config,classes,add,candidate,else,if,logger,is,debug,enabled,logger,debug,string,format,ignoring,class,s,it,must,be,static,non,private,non,final,and,annotated,with,configuration,to,be,considered,a,default,configuration,class,candidate,get,name,if,config,classes,is,empty,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,configuration,classes,for,test,class,s,s,does,not,declare,any,static,non,private,non,final,inner,classes,annotated,with,configuration,declaring,class,get,name,declaring,class,get,simple,name,return,config,classes,to,array,new,class,config,classes,size
AnnotationConfigContextLoaderUtils -> public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1405696918;Detect the default configuration classes for the supplied test class._<p>The returned class array will contain all static inner classes of_the supplied class that meet the requirements for {@code @Configuration}_class implementations as specified in the documentation for_{@link Configuration @Configuration}._<p>The implementation of this method adheres to the contract defined in the_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader}_SPI. Specifically, this method uses introspection to detect default_configuration classes that comply with the constraints required of_{@code @Configuration} class implementations. If a potential candidate_configuration class does not meet these requirements, this method will log a_debug message, and the potential candidate class will be ignored._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null};public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		Assert.notNull(declaringClass, "Declaring class must not be null")___		List<Class<?>> configClasses = new ArrayList<Class<?>>()___		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {_			if (isDefaultConfigurationClassCandidate(candidate)) {_				configClasses.add(candidate)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Ignoring class [%s]_ it must be static, non-private, non-final, and annotated "_								+ "with @Configuration to be considered a default configuration class.",_						candidate.getName()))__				}_			}_		}__		if (configClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default configuration classes for test class [%s]: "_						+ "%s does not declare any static, non-private, non-final, inner classes "_						+ "annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))__			}_		}__		return configClasses.toArray(new Class<?>[configClasses.size()])__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,returned,class,array,will,contain,all,static,inner,classes,of,the,supplied,class,that,meet,the,requirements,for,code,configuration,class,implementations,as,specified,in,the,documentation,for,link,configuration,configuration,p,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,org,springframework,test,context,smart,context,loader,smart,context,loader,spi,specifically,this,method,uses,introspection,to,detect,default,configuration,classes,that,comply,with,the,constraints,required,of,code,configuration,class,implementations,if,a,potential,candidate,configuration,class,does,not,meet,these,requirements,this,method,will,log,a,debug,message,and,the,potential,candidate,class,will,be,ignored,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null;public,static,class,detect,default,configuration,classes,class,declaring,class,assert,not,null,declaring,class,declaring,class,must,not,be,null,list,class,config,classes,new,array,list,class,for,class,candidate,declaring,class,get,declared,classes,if,is,default,configuration,class,candidate,candidate,config,classes,add,candidate,else,if,logger,is,debug,enabled,logger,debug,string,format,ignoring,class,s,it,must,be,static,non,private,non,final,and,annotated,with,configuration,to,be,considered,a,default,configuration,class,candidate,get,name,if,config,classes,is,empty,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,configuration,classes,for,test,class,s,s,does,not,declare,any,static,non,private,non,final,inner,classes,annotated,with,configuration,declaring,class,get,name,declaring,class,get,simple,name,return,config,classes,to,array,new,class,config,classes,size
AnnotationConfigContextLoaderUtils -> public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1406626957;Detect the default configuration classes for the supplied test class._<p>The returned class array will contain all static inner classes of_the supplied class that meet the requirements for {@code @Configuration}_class implementations as specified in the documentation for_{@link Configuration @Configuration}._<p>The implementation of this method adheres to the contract defined in the_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader}_SPI. Specifically, this method uses introspection to detect default_configuration classes that comply with the constraints required of_{@code @Configuration} class implementations. If a potential candidate_configuration class does not meet these requirements, this method will log a_debug message, and the potential candidate class will be ignored._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null};public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		Assert.notNull(declaringClass, "Declaring class must not be null")___		List<Class<?>> configClasses = new ArrayList<Class<?>>()___		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {_			if (isDefaultConfigurationClassCandidate(candidate)) {_				configClasses.add(candidate)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Ignoring class [%s]_ it must be static, non-private, non-final, and annotated " +_								"with @Configuration to be considered a default configuration class.",_						candidate.getName()))__				}_			}_		}__		if (configClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default configuration classes for test class [%s]: " +_						"%s does not declare any static, non-private, non-final, inner classes " +_						"annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))__			}_		}__		return configClasses.toArray(new Class<?>[configClasses.size()])__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,returned,class,array,will,contain,all,static,inner,classes,of,the,supplied,class,that,meet,the,requirements,for,code,configuration,class,implementations,as,specified,in,the,documentation,for,link,configuration,configuration,p,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,org,springframework,test,context,smart,context,loader,smart,context,loader,spi,specifically,this,method,uses,introspection,to,detect,default,configuration,classes,that,comply,with,the,constraints,required,of,code,configuration,class,implementations,if,a,potential,candidate,configuration,class,does,not,meet,these,requirements,this,method,will,log,a,debug,message,and,the,potential,candidate,class,will,be,ignored,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null;public,static,class,detect,default,configuration,classes,class,declaring,class,assert,not,null,declaring,class,declaring,class,must,not,be,null,list,class,config,classes,new,array,list,class,for,class,candidate,declaring,class,get,declared,classes,if,is,default,configuration,class,candidate,candidate,config,classes,add,candidate,else,if,logger,is,debug,enabled,logger,debug,string,format,ignoring,class,s,it,must,be,static,non,private,non,final,and,annotated,with,configuration,to,be,considered,a,default,configuration,class,candidate,get,name,if,config,classes,is,empty,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,configuration,classes,for,test,class,s,s,does,not,declare,any,static,non,private,non,final,inner,classes,annotated,with,configuration,declaring,class,get,name,declaring,class,get,simple,name,return,config,classes,to,array,new,class,config,classes,size
AnnotationConfigContextLoaderUtils -> public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1422045672;Detect the default configuration classes for the supplied test class._<p>The returned class array will contain all static nested classes of_the supplied class that meet the requirements for {@code @Configuration}_class implementations as specified in the documentation for_{@link Configuration @Configuration}._<p>The implementation of this method adheres to the contract defined in the_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader}_SPI. Specifically, this method uses introspection to detect default_configuration classes that comply with the constraints required of_{@code @Configuration} class implementations. If a potential candidate_configuration class does not meet these requirements, this method will log a_debug message, and the potential candidate class will be ignored._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null};public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		Assert.notNull(declaringClass, "Declaring class must not be null")___		List<Class<?>> configClasses = new ArrayList<Class<?>>()___		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {_			if (isDefaultConfigurationClassCandidate(candidate)) {_				configClasses.add(candidate)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Ignoring class [%s]_ it must be static, non-private, non-final, and annotated " +_								"with @Configuration to be considered a default configuration class.",_						candidate.getName()))__				}_			}_		}__		if (configClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default configuration classes for test class [%s]: " +_						"%s does not declare any static, non-private, non-final, nested classes " +_						"annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))__			}_		}__		return configClasses.toArray(new Class<?>[configClasses.size()])__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,returned,class,array,will,contain,all,static,nested,classes,of,the,supplied,class,that,meet,the,requirements,for,code,configuration,class,implementations,as,specified,in,the,documentation,for,link,configuration,configuration,p,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,org,springframework,test,context,smart,context,loader,smart,context,loader,spi,specifically,this,method,uses,introspection,to,detect,default,configuration,classes,that,comply,with,the,constraints,required,of,code,configuration,class,implementations,if,a,potential,candidate,configuration,class,does,not,meet,these,requirements,this,method,will,log,a,debug,message,and,the,potential,candidate,class,will,be,ignored,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null;public,static,class,detect,default,configuration,classes,class,declaring,class,assert,not,null,declaring,class,declaring,class,must,not,be,null,list,class,config,classes,new,array,list,class,for,class,candidate,declaring,class,get,declared,classes,if,is,default,configuration,class,candidate,candidate,config,classes,add,candidate,else,if,logger,is,debug,enabled,logger,debug,string,format,ignoring,class,s,it,must,be,static,non,private,non,final,and,annotated,with,configuration,to,be,considered,a,default,configuration,class,candidate,get,name,if,config,classes,is,empty,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,configuration,classes,for,test,class,s,s,does,not,declare,any,static,non,private,non,final,nested,classes,annotated,with,configuration,declaring,class,get,name,declaring,class,get,simple,name,return,config,classes,to,array,new,class,config,classes,size
AnnotationConfigContextLoaderUtils -> public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1422047584;Detect the default configuration classes for the supplied test class._<p>The returned class array will contain all static nested classes of_the supplied class that meet the requirements for {@code @Configuration}_class implementations as specified in the documentation for_{@link Configuration @Configuration}._<p>The implementation of this method adheres to the contract defined in the_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader}_SPI. Specifically, this method uses introspection to detect default_configuration classes that comply with the constraints required of_{@code @Configuration} class implementations. If a potential candidate_configuration class does not meet these requirements, this method will log a_debug message, and the potential candidate class will be ignored._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null};public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		Assert.notNull(declaringClass, "Declaring class must not be null")___		List<Class<?>> configClasses = new ArrayList<Class<?>>()___		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {_			if (isDefaultConfigurationClassCandidate(candidate)) {_				configClasses.add(candidate)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Ignoring class [%s]_ it must be static, non-private, non-final, and annotated " +_								"with @Configuration to be considered a default configuration class.",_						candidate.getName()))__				}_			}_		}__		if (configClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default configuration classes for test class [%s]: " +_						"%s does not declare any static, non-private, non-final, nested classes " +_						"annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))__			}_		}__		return configClasses.toArray(new Class<?>[configClasses.size()])__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,returned,class,array,will,contain,all,static,nested,classes,of,the,supplied,class,that,meet,the,requirements,for,code,configuration,class,implementations,as,specified,in,the,documentation,for,link,configuration,configuration,p,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,org,springframework,test,context,smart,context,loader,smart,context,loader,spi,specifically,this,method,uses,introspection,to,detect,default,configuration,classes,that,comply,with,the,constraints,required,of,code,configuration,class,implementations,if,a,potential,candidate,configuration,class,does,not,meet,these,requirements,this,method,will,log,a,debug,message,and,the,potential,candidate,class,will,be,ignored,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null;public,static,class,detect,default,configuration,classes,class,declaring,class,assert,not,null,declaring,class,declaring,class,must,not,be,null,list,class,config,classes,new,array,list,class,for,class,candidate,declaring,class,get,declared,classes,if,is,default,configuration,class,candidate,candidate,config,classes,add,candidate,else,if,logger,is,debug,enabled,logger,debug,string,format,ignoring,class,s,it,must,be,static,non,private,non,final,and,annotated,with,configuration,to,be,considered,a,default,configuration,class,candidate,get,name,if,config,classes,is,empty,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,configuration,classes,for,test,class,s,s,does,not,declare,any,static,non,private,non,final,nested,classes,annotated,with,configuration,declaring,class,get,name,declaring,class,get,simple,name,return,config,classes,to,array,new,class,config,classes,size
AnnotationConfigContextLoaderUtils -> public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1458754760;Detect the default configuration classes for the supplied test class._<p>The returned class array will contain all static nested classes of_the supplied class that meet the requirements for {@code @Configuration}_class implementations as specified in the documentation for_{@link Configuration @Configuration}._<p>The implementation of this method adheres to the contract defined in the_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader}_SPI. Specifically, this method uses introspection to detect default_configuration classes that comply with the constraints required of_{@code @Configuration} class implementations. If a potential candidate_configuration class does not meet these requirements, this method will log a_debug message, and the potential candidate class will be ignored._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null};public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		Assert.notNull(declaringClass, "Declaring class must not be null")___		List<Class<?>> configClasses = new ArrayList<Class<?>>()___		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {_			if (isDefaultConfigurationClassCandidate(candidate)) {_				configClasses.add(candidate)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Ignoring class [%s]_ it must be static, non-private, non-final, and annotated " +_								"with @Configuration to be considered a default configuration class.",_						candidate.getName()))__				}_			}_		}__		if (configClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default configuration classes for test class [%s]: " +_						"%s does not declare any static, non-private, non-final, nested classes " +_						"annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))__			}_		}__		return configClasses.toArray(new Class<?>[configClasses.size()])__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,returned,class,array,will,contain,all,static,nested,classes,of,the,supplied,class,that,meet,the,requirements,for,code,configuration,class,implementations,as,specified,in,the,documentation,for,link,configuration,configuration,p,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,org,springframework,test,context,smart,context,loader,smart,context,loader,spi,specifically,this,method,uses,introspection,to,detect,default,configuration,classes,that,comply,with,the,constraints,required,of,code,configuration,class,implementations,if,a,potential,candidate,configuration,class,does,not,meet,these,requirements,this,method,will,log,a,debug,message,and,the,potential,candidate,class,will,be,ignored,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null;public,static,class,detect,default,configuration,classes,class,declaring,class,assert,not,null,declaring,class,declaring,class,must,not,be,null,list,class,config,classes,new,array,list,class,for,class,candidate,declaring,class,get,declared,classes,if,is,default,configuration,class,candidate,candidate,config,classes,add,candidate,else,if,logger,is,debug,enabled,logger,debug,string,format,ignoring,class,s,it,must,be,static,non,private,non,final,and,annotated,with,configuration,to,be,considered,a,default,configuration,class,candidate,get,name,if,config,classes,is,empty,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,configuration,classes,for,test,class,s,s,does,not,declare,any,static,non,private,non,final,nested,classes,annotated,with,configuration,declaring,class,get,name,declaring,class,get,simple,name,return,config,classes,to,array,new,class,config,classes,size
AnnotationConfigContextLoaderUtils -> public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1467730834;Detect the default configuration classes for the supplied test class._<p>The returned class array will contain all static nested classes of_the supplied class that meet the requirements for {@code @Configuration}_class implementations as specified in the documentation for_{@link Configuration @Configuration}._<p>The implementation of this method adheres to the contract defined in the_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader}_SPI. Specifically, this method uses introspection to detect default_configuration classes that comply with the constraints required of_{@code @Configuration} class implementations. If a potential candidate_configuration class does not meet these requirements, this method will log a_debug message, and the potential candidate class will be ignored._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null};public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		Assert.notNull(declaringClass, "Declaring class must not be null")___		List<Class<?>> configClasses = new ArrayList<>()___		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {_			if (isDefaultConfigurationClassCandidate(candidate)) {_				configClasses.add(candidate)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Ignoring class [%s]_ it must be static, non-private, non-final, and annotated " +_								"with @Configuration to be considered a default configuration class.",_						candidate.getName()))__				}_			}_		}__		if (configClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default configuration classes for test class [%s]: " +_						"%s does not declare any static, non-private, non-final, nested classes " +_						"annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))__			}_		}__		return configClasses.toArray(new Class<?>[configClasses.size()])__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,returned,class,array,will,contain,all,static,nested,classes,of,the,supplied,class,that,meet,the,requirements,for,code,configuration,class,implementations,as,specified,in,the,documentation,for,link,configuration,configuration,p,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,org,springframework,test,context,smart,context,loader,smart,context,loader,spi,specifically,this,method,uses,introspection,to,detect,default,configuration,classes,that,comply,with,the,constraints,required,of,code,configuration,class,implementations,if,a,potential,candidate,configuration,class,does,not,meet,these,requirements,this,method,will,log,a,debug,message,and,the,potential,candidate,class,will,be,ignored,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null;public,static,class,detect,default,configuration,classes,class,declaring,class,assert,not,null,declaring,class,declaring,class,must,not,be,null,list,class,config,classes,new,array,list,for,class,candidate,declaring,class,get,declared,classes,if,is,default,configuration,class,candidate,candidate,config,classes,add,candidate,else,if,logger,is,debug,enabled,logger,debug,string,format,ignoring,class,s,it,must,be,static,non,private,non,final,and,annotated,with,configuration,to,be,considered,a,default,configuration,class,candidate,get,name,if,config,classes,is,empty,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,configuration,classes,for,test,class,s,s,does,not,declare,any,static,non,private,non,final,nested,classes,annotated,with,configuration,declaring,class,get,name,declaring,class,get,simple,name,return,config,classes,to,array,new,class,config,classes,size
AnnotationConfigContextLoaderUtils -> public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1496955179;Detect the default configuration classes for the supplied test class._<p>The returned class array will contain all static nested classes of_the supplied class that meet the requirements for {@code @Configuration}_class implementations as specified in the documentation for_{@link Configuration @Configuration}._<p>The implementation of this method adheres to the contract defined in the_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader}_SPI. Specifically, this method uses introspection to detect default_configuration classes that comply with the constraints required of_{@code @Configuration} class implementations. If a potential candidate_configuration class does not meet these requirements, this method will log a_debug message, and the potential candidate class will be ignored._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null};public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		Assert.notNull(declaringClass, "Declaring class must not be null")___		List<Class<?>> configClasses = new ArrayList<>()___		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {_			if (isDefaultConfigurationClassCandidate(candidate)) {_				configClasses.add(candidate)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Ignoring class [%s]_ it must be static, non-private, non-final, and annotated " +_								"with @Configuration to be considered a default configuration class.",_						candidate.getName()))__				}_			}_		}__		if (configClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default configuration classes for test class [%s]: " +_						"%s does not declare any static, non-private, non-final, nested classes " +_						"annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))__			}_		}__		return configClasses.toArray(new Class<?>[configClasses.size()])__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,returned,class,array,will,contain,all,static,nested,classes,of,the,supplied,class,that,meet,the,requirements,for,code,configuration,class,implementations,as,specified,in,the,documentation,for,link,configuration,configuration,p,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,org,springframework,test,context,smart,context,loader,smart,context,loader,spi,specifically,this,method,uses,introspection,to,detect,default,configuration,classes,that,comply,with,the,constraints,required,of,code,configuration,class,implementations,if,a,potential,candidate,configuration,class,does,not,meet,these,requirements,this,method,will,log,a,debug,message,and,the,potential,candidate,class,will,be,ignored,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null;public,static,class,detect,default,configuration,classes,class,declaring,class,assert,not,null,declaring,class,declaring,class,must,not,be,null,list,class,config,classes,new,array,list,for,class,candidate,declaring,class,get,declared,classes,if,is,default,configuration,class,candidate,candidate,config,classes,add,candidate,else,if,logger,is,debug,enabled,logger,debug,string,format,ignoring,class,s,it,must,be,static,non,private,non,final,and,annotated,with,configuration,to,be,considered,a,default,configuration,class,candidate,get,name,if,config,classes,is,empty,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,configuration,classes,for,test,class,s,s,does,not,declare,any,static,non,private,non,final,nested,classes,annotated,with,configuration,declaring,class,get,name,declaring,class,get,simple,name,return,config,classes,to,array,new,class,config,classes,size
AnnotationConfigContextLoaderUtils -> public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1519295386;Detect the default configuration classes for the supplied test class._<p>The returned class array will contain all static nested classes of_the supplied class that meet the requirements for {@code @Configuration}_class implementations as specified in the documentation for_{@link Configuration @Configuration}._<p>The implementation of this method adheres to the contract defined in the_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader}_SPI. Specifically, this method uses introspection to detect default_configuration classes that comply with the constraints required of_{@code @Configuration} class implementations. If a potential candidate_configuration class does not meet these requirements, this method will log a_debug message, and the potential candidate class will be ignored._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null};public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		Assert.notNull(declaringClass, "Declaring class must not be null")___		List<Class<?>> configClasses = new ArrayList<>()___		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {_			if (isDefaultConfigurationClassCandidate(candidate)) {_				configClasses.add(candidate)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Ignoring class [%s]_ it must be static, non-private, non-final, and annotated " +_								"with @Configuration to be considered a default configuration class.",_						candidate.getName()))__				}_			}_		}__		if (configClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default configuration classes for test class [%s]: " +_						"%s does not declare any static, non-private, non-final, nested classes " +_						"annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))__			}_		}__		return ClassUtils.toClassArray(configClasses)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,returned,class,array,will,contain,all,static,nested,classes,of,the,supplied,class,that,meet,the,requirements,for,code,configuration,class,implementations,as,specified,in,the,documentation,for,link,configuration,configuration,p,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,org,springframework,test,context,smart,context,loader,smart,context,loader,spi,specifically,this,method,uses,introspection,to,detect,default,configuration,classes,that,comply,with,the,constraints,required,of,code,configuration,class,implementations,if,a,potential,candidate,configuration,class,does,not,meet,these,requirements,this,method,will,log,a,debug,message,and,the,potential,candidate,class,will,be,ignored,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null;public,static,class,detect,default,configuration,classes,class,declaring,class,assert,not,null,declaring,class,declaring,class,must,not,be,null,list,class,config,classes,new,array,list,for,class,candidate,declaring,class,get,declared,classes,if,is,default,configuration,class,candidate,candidate,config,classes,add,candidate,else,if,logger,is,debug,enabled,logger,debug,string,format,ignoring,class,s,it,must,be,static,non,private,non,final,and,annotated,with,configuration,to,be,considered,a,default,configuration,class,candidate,get,name,if,config,classes,is,empty,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,configuration,classes,for,test,class,s,s,does,not,declare,any,static,non,private,non,final,nested,classes,annotated,with,configuration,declaring,class,get,name,declaring,class,get,simple,name,return,class,utils,to,class,array,config,classes
AnnotationConfigContextLoaderUtils -> private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz);1349648958;Determine if the supplied {@link Class} meets the criteria for being_considered a <em>default configuration class</em> candidate.__<p>Specifically, such candidates:__<ul>_<li>must not be <code>null</code></li>_<li>must not be <code>private</code></li>_<li>must not be <code>final</code></li>_<li>must be <code>static</code></li>_<li>must be annotated with {@code @Configuration}</li>_</ul>__@param clazz the class to check_@return <code>true</code> if the supplied class meets the candidate criteria;private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz) {_		return clazz != null && isStaticNonPrivateAndNonFinal(clazz) && clazz.isAnnotationPresent(Configuration.class)__	};determine,if,the,supplied,link,class,meets,the,criteria,for,being,considered,a,em,default,configuration,class,em,candidate,p,specifically,such,candidates,ul,li,must,not,be,code,null,code,li,li,must,not,be,code,private,code,li,li,must,not,be,code,final,code,li,li,must,be,code,static,code,li,li,must,be,annotated,with,code,configuration,li,ul,param,clazz,the,class,to,check,return,code,true,code,if,the,supplied,class,meets,the,candidate,criteria;private,static,boolean,is,default,configuration,class,candidate,class,clazz,return,clazz,null,is,static,non,private,and,non,final,clazz,clazz,is,annotation,present,configuration,class
AnnotationConfigContextLoaderUtils -> private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz);1350146630;Determine if the supplied {@link Class} meets the criteria for being_considered a <em>default configuration class</em> candidate.__<p>Specifically, such candidates:__<ul>_<li>must not be <code>null</code></li>_<li>must not be <code>private</code></li>_<li>must not be <code>final</code></li>_<li>must be <code>static</code></li>_<li>must be annotated with {@code @Configuration}</li>_</ul>__@param clazz the class to check_@return <code>true</code> if the supplied class meets the candidate criteria;private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz) {_		return clazz != null && isStaticNonPrivateAndNonFinal(clazz) && clazz.isAnnotationPresent(Configuration.class)__	};determine,if,the,supplied,link,class,meets,the,criteria,for,being,considered,a,em,default,configuration,class,em,candidate,p,specifically,such,candidates,ul,li,must,not,be,code,null,code,li,li,must,not,be,code,private,code,li,li,must,not,be,code,final,code,li,li,must,be,code,static,code,li,li,must,be,annotated,with,code,configuration,li,ul,param,clazz,the,class,to,check,return,code,true,code,if,the,supplied,class,meets,the,candidate,criteria;private,static,boolean,is,default,configuration,class,candidate,class,clazz,return,clazz,null,is,static,non,private,and,non,final,clazz,clazz,is,annotation,present,configuration,class
AnnotationConfigContextLoaderUtils -> private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz);1354573750;Determine if the supplied {@link Class} meets the criteria for being_considered a <em>default configuration class</em> candidate.__<p>Specifically, such candidates:__<ul>_<li>must not be <code>null</code></li>_<li>must not be <code>private</code></li>_<li>must not be <code>final</code></li>_<li>must be <code>static</code></li>_<li>must be annotated with {@code @Configuration}</li>_</ul>__@param clazz the class to check_@return <code>true</code> if the supplied class meets the candidate criteria;private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz) {_		return clazz != null && isStaticNonPrivateAndNonFinal(clazz) && clazz.isAnnotationPresent(Configuration.class)__	};determine,if,the,supplied,link,class,meets,the,criteria,for,being,considered,a,em,default,configuration,class,em,candidate,p,specifically,such,candidates,ul,li,must,not,be,code,null,code,li,li,must,not,be,code,private,code,li,li,must,not,be,code,final,code,li,li,must,be,code,static,code,li,li,must,be,annotated,with,code,configuration,li,ul,param,clazz,the,class,to,check,return,code,true,code,if,the,supplied,class,meets,the,candidate,criteria;private,static,boolean,is,default,configuration,class,candidate,class,clazz,return,clazz,null,is,static,non,private,and,non,final,clazz,clazz,is,annotation,present,configuration,class
AnnotationConfigContextLoaderUtils -> private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz);1355187490;Determine if the supplied {@link Class} meets the criteria for being_considered a <em>default configuration class</em> candidate.__<p>Specifically, such candidates:__<ul>_<li>must not be <code>null</code></li>_<li>must not be <code>private</code></li>_<li>must not be <code>final</code></li>_<li>must be <code>static</code></li>_<li>must be annotated with {@code @Configuration}</li>_</ul>__@param clazz the class to check_@return <code>true</code> if the supplied class meets the candidate criteria;private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz) {_		return clazz != null && isStaticNonPrivateAndNonFinal(clazz) && clazz.isAnnotationPresent(Configuration.class)__	};determine,if,the,supplied,link,class,meets,the,criteria,for,being,considered,a,em,default,configuration,class,em,candidate,p,specifically,such,candidates,ul,li,must,not,be,code,null,code,li,li,must,not,be,code,private,code,li,li,must,not,be,code,final,code,li,li,must,be,code,static,code,li,li,must,be,annotated,with,code,configuration,li,ul,param,clazz,the,class,to,check,return,code,true,code,if,the,supplied,class,meets,the,candidate,criteria;private,static,boolean,is,default,configuration,class,candidate,class,clazz,return,clazz,null,is,static,non,private,and,non,final,clazz,clazz,is,annotation,present,configuration,class
AnnotationConfigContextLoaderUtils -> private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz);1356735495;Determine if the supplied {@link Class} meets the criteria for being_considered a <em>default configuration class</em> candidate.__<p>Specifically, such candidates:__<ul>_<li>must not be {@code null}</li>_<li>must not be {@code private}</li>_<li>must not be {@code final}</li>_<li>must be {@code static}</li>_<li>must be annotated with {@code @Configuration}</li>_</ul>__@param clazz the class to check_@return {@code true} if the supplied class meets the candidate criteria;private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz) {_		return clazz != null && isStaticNonPrivateAndNonFinal(clazz) && clazz.isAnnotationPresent(Configuration.class)__	};determine,if,the,supplied,link,class,meets,the,criteria,for,being,considered,a,em,default,configuration,class,em,candidate,p,specifically,such,candidates,ul,li,must,not,be,code,null,li,li,must,not,be,code,private,li,li,must,not,be,code,final,li,li,must,be,code,static,li,li,must,be,annotated,with,code,configuration,li,ul,param,clazz,the,class,to,check,return,code,true,if,the,supplied,class,meets,the,candidate,criteria;private,static,boolean,is,default,configuration,class,candidate,class,clazz,return,clazz,null,is,static,non,private,and,non,final,clazz,clazz,is,annotation,present,configuration,class
AnnotationConfigContextLoaderUtils -> private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz);1396374528;Determine if the supplied {@link Class} meets the criteria for being_considered a <em>default configuration class</em> candidate.__<p>Specifically, such candidates:__<ul>_<li>must not be {@code null}</li>_<li>must not be {@code private}</li>_<li>must not be {@code final}</li>_<li>must be {@code static}</li>_<li>must be annotated with {@code @Configuration}</li>_</ul>__@param clazz the class to check_@return {@code true} if the supplied class meets the candidate criteria;private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz) {_		return clazz != null && isStaticNonPrivateAndNonFinal(clazz) && clazz.isAnnotationPresent(Configuration.class)__	};determine,if,the,supplied,link,class,meets,the,criteria,for,being,considered,a,em,default,configuration,class,em,candidate,p,specifically,such,candidates,ul,li,must,not,be,code,null,li,li,must,not,be,code,private,li,li,must,not,be,code,final,li,li,must,be,code,static,li,li,must,be,annotated,with,code,configuration,li,ul,param,clazz,the,class,to,check,return,code,true,if,the,supplied,class,meets,the,candidate,criteria;private,static,boolean,is,default,configuration,class,candidate,class,clazz,return,clazz,null,is,static,non,private,and,non,final,clazz,clazz,is,annotation,present,configuration,class
AnnotationConfigContextLoaderUtils -> private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz);1405696918;Determine if the supplied {@link Class} meets the criteria for being_considered a <em>default configuration class</em> candidate._<p>Specifically, such candidates:_<ul>_<li>must not be {@code null}</li>_<li>must not be {@code private}</li>_<li>must not be {@code final}</li>_<li>must be {@code static}</li>_<li>must be annotated with {@code @Configuration}</li>_</ul>_@param clazz the class to check_@return {@code true} if the supplied class meets the candidate criteria;private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz) {_		return (clazz != null && isStaticNonPrivateAndNonFinal(clazz) && clazz.isAnnotationPresent(Configuration.class))__	};determine,if,the,supplied,link,class,meets,the,criteria,for,being,considered,a,em,default,configuration,class,em,candidate,p,specifically,such,candidates,ul,li,must,not,be,code,null,li,li,must,not,be,code,private,li,li,must,not,be,code,final,li,li,must,be,code,static,li,li,must,be,annotated,with,code,configuration,li,ul,param,clazz,the,class,to,check,return,code,true,if,the,supplied,class,meets,the,candidate,criteria;private,static,boolean,is,default,configuration,class,candidate,class,clazz,return,clazz,null,is,static,non,private,and,non,final,clazz,clazz,is,annotation,present,configuration,class
AnnotationConfigContextLoaderUtils -> private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz);1406626957;Determine if the supplied {@link Class} meets the criteria for being_considered a <em>default configuration class</em> candidate._<p>Specifically, such candidates:_<ul>_<li>must not be {@code null}</li>_<li>must not be {@code private}</li>_<li>must not be {@code final}</li>_<li>must be {@code static}</li>_<li>must be annotated with {@code @Configuration}</li>_</ul>_@param clazz the class to check_@return {@code true} if the supplied class meets the candidate criteria;private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz) {_		return (clazz != null && isStaticNonPrivateAndNonFinal(clazz) && clazz.isAnnotationPresent(Configuration.class))__	};determine,if,the,supplied,link,class,meets,the,criteria,for,being,considered,a,em,default,configuration,class,em,candidate,p,specifically,such,candidates,ul,li,must,not,be,code,null,li,li,must,not,be,code,private,li,li,must,not,be,code,final,li,li,must,be,code,static,li,li,must,be,annotated,with,code,configuration,li,ul,param,clazz,the,class,to,check,return,code,true,if,the,supplied,class,meets,the,candidate,criteria;private,static,boolean,is,default,configuration,class,candidate,class,clazz,return,clazz,null,is,static,non,private,and,non,final,clazz,clazz,is,annotation,present,configuration,class
AnnotationConfigContextLoaderUtils -> private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz);1422045672;Determine if the supplied {@link Class} meets the criteria for being_considered a <em>default configuration class</em> candidate._<p>Specifically, such candidates:_<ul>_<li>must not be {@code null}</li>_<li>must not be {@code private}</li>_<li>must not be {@code final}</li>_<li>must be {@code static}</li>_<li>must be annotated with {@code @Configuration}</li>_</ul>_@param clazz the class to check_@return {@code true} if the supplied class meets the candidate criteria;private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz) {_		return (clazz != null && isStaticNonPrivateAndNonFinal(clazz) && clazz.isAnnotationPresent(Configuration.class))__	};determine,if,the,supplied,link,class,meets,the,criteria,for,being,considered,a,em,default,configuration,class,em,candidate,p,specifically,such,candidates,ul,li,must,not,be,code,null,li,li,must,not,be,code,private,li,li,must,not,be,code,final,li,li,must,be,code,static,li,li,must,be,annotated,with,code,configuration,li,ul,param,clazz,the,class,to,check,return,code,true,if,the,supplied,class,meets,the,candidate,criteria;private,static,boolean,is,default,configuration,class,candidate,class,clazz,return,clazz,null,is,static,non,private,and,non,final,clazz,clazz,is,annotation,present,configuration,class
AnnotationConfigContextLoaderUtils -> private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz);1422047584;Determine if the supplied {@link Class} meets the criteria for being_considered a <em>default configuration class</em> candidate._<p>Specifically, such candidates:_<ul>_<li>must not be {@code null}</li>_<li>must not be {@code private}</li>_<li>must not be {@code final}</li>_<li>must be {@code static}</li>_<li>must be annotated or meta-annotated with {@code @Configuration}</li>_</ul>_@param clazz the class to check_@return {@code true} if the supplied class meets the candidate criteria;private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz) {_		return (clazz != null && isStaticNonPrivateAndNonFinal(clazz) &&_				(AnnotationUtils.findAnnotation(clazz, Configuration.class) != null))__	};determine,if,the,supplied,link,class,meets,the,criteria,for,being,considered,a,em,default,configuration,class,em,candidate,p,specifically,such,candidates,ul,li,must,not,be,code,null,li,li,must,not,be,code,private,li,li,must,not,be,code,final,li,li,must,be,code,static,li,li,must,be,annotated,or,meta,annotated,with,code,configuration,li,ul,param,clazz,the,class,to,check,return,code,true,if,the,supplied,class,meets,the,candidate,criteria;private,static,boolean,is,default,configuration,class,candidate,class,clazz,return,clazz,null,is,static,non,private,and,non,final,clazz,annotation,utils,find,annotation,clazz,configuration,class,null
AnnotationConfigContextLoaderUtils -> private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz);1458754760;Determine if the supplied {@link Class} meets the criteria for being_considered a <em>default configuration class</em> candidate._<p>Specifically, such candidates:_<ul>_<li>must not be {@code null}</li>_<li>must not be {@code private}</li>_<li>must not be {@code final}</li>_<li>must be {@code static}</li>_<li>must be annotated or meta-annotated with {@code @Configuration}</li>_</ul>_@param clazz the class to check_@return {@code true} if the supplied class meets the candidate criteria;private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz) {_		return (clazz != null && isStaticNonPrivateAndNonFinal(clazz) &&_				AnnotatedElementUtils.hasAnnotation(clazz, Configuration.class))__	};determine,if,the,supplied,link,class,meets,the,criteria,for,being,considered,a,em,default,configuration,class,em,candidate,p,specifically,such,candidates,ul,li,must,not,be,code,null,li,li,must,not,be,code,private,li,li,must,not,be,code,final,li,li,must,be,code,static,li,li,must,be,annotated,or,meta,annotated,with,code,configuration,li,ul,param,clazz,the,class,to,check,return,code,true,if,the,supplied,class,meets,the,candidate,criteria;private,static,boolean,is,default,configuration,class,candidate,class,clazz,return,clazz,null,is,static,non,private,and,non,final,clazz,annotated,element,utils,has,annotation,clazz,configuration,class
AnnotationConfigContextLoaderUtils -> private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz);1467730834;Determine if the supplied {@link Class} meets the criteria for being_considered a <em>default configuration class</em> candidate._<p>Specifically, such candidates:_<ul>_<li>must not be {@code null}</li>_<li>must not be {@code private}</li>_<li>must not be {@code final}</li>_<li>must be {@code static}</li>_<li>must be annotated or meta-annotated with {@code @Configuration}</li>_</ul>_@param clazz the class to check_@return {@code true} if the supplied class meets the candidate criteria;private static boolean isDefaultConfigurationClassCandidate(Class<?> clazz) {_		return (clazz != null && isStaticNonPrivateAndNonFinal(clazz) &&_				AnnotatedElementUtils.hasAnnotation(clazz, Configuration.class))__	};determine,if,the,supplied,link,class,meets,the,criteria,for,being,considered,a,em,default,configuration,class,em,candidate,p,specifically,such,candidates,ul,li,must,not,be,code,null,li,li,must,not,be,code,private,li,li,must,not,be,code,final,li,li,must,be,code,static,li,li,must,be,annotated,or,meta,annotated,with,code,configuration,li,ul,param,clazz,the,class,to,check,return,code,true,if,the,supplied,class,meets,the,candidate,criteria;private,static,boolean,is,default,configuration,class,candidate,class,clazz,return,clazz,null,is,static,non,private,and,non,final,clazz,annotated,element,utils,has,annotation,clazz,configuration,class
AnnotationConfigContextLoaderUtils -> private static boolean isDefaultConfigurationClassCandidate(@Nullable Class<?> clazz);1496955179;Determine if the supplied {@link Class} meets the criteria for being_considered a <em>default configuration class</em> candidate._<p>Specifically, such candidates:_<ul>_<li>must not be {@code null}</li>_<li>must not be {@code private}</li>_<li>must not be {@code final}</li>_<li>must be {@code static}</li>_<li>must be annotated or meta-annotated with {@code @Configuration}</li>_</ul>_@param clazz the class to check_@return {@code true} if the supplied class meets the candidate criteria;private static boolean isDefaultConfigurationClassCandidate(@Nullable Class<?> clazz) {_		return (clazz != null && isStaticNonPrivateAndNonFinal(clazz) &&_				AnnotatedElementUtils.hasAnnotation(clazz, Configuration.class))__	};determine,if,the,supplied,link,class,meets,the,criteria,for,being,considered,a,em,default,configuration,class,em,candidate,p,specifically,such,candidates,ul,li,must,not,be,code,null,li,li,must,not,be,code,private,li,li,must,not,be,code,final,li,li,must,be,code,static,li,li,must,be,annotated,or,meta,annotated,with,code,configuration,li,ul,param,clazz,the,class,to,check,return,code,true,if,the,supplied,class,meets,the,candidate,criteria;private,static,boolean,is,default,configuration,class,candidate,nullable,class,clazz,return,clazz,null,is,static,non,private,and,non,final,clazz,annotated,element,utils,has,annotation,clazz,configuration,class
AnnotationConfigContextLoaderUtils -> private static boolean isDefaultConfigurationClassCandidate(@Nullable Class<?> clazz);1519295386;Determine if the supplied {@link Class} meets the criteria for being_considered a <em>default configuration class</em> candidate._<p>Specifically, such candidates:_<ul>_<li>must not be {@code null}</li>_<li>must not be {@code private}</li>_<li>must not be {@code final}</li>_<li>must be {@code static}</li>_<li>must be annotated or meta-annotated with {@code @Configuration}</li>_</ul>_@param clazz the class to check_@return {@code true} if the supplied class meets the candidate criteria;private static boolean isDefaultConfigurationClassCandidate(@Nullable Class<?> clazz) {_		return (clazz != null && isStaticNonPrivateAndNonFinal(clazz) &&_				AnnotatedElementUtils.hasAnnotation(clazz, Configuration.class))__	};determine,if,the,supplied,link,class,meets,the,criteria,for,being,considered,a,em,default,configuration,class,em,candidate,p,specifically,such,candidates,ul,li,must,not,be,code,null,li,li,must,not,be,code,private,li,li,must,not,be,code,final,li,li,must,be,code,static,li,li,must,be,annotated,or,meta,annotated,with,code,configuration,li,ul,param,clazz,the,class,to,check,return,code,true,if,the,supplied,class,meets,the,candidate,criteria;private,static,boolean,is,default,configuration,class,candidate,nullable,class,clazz,return,clazz,null,is,static,non,private,and,non,final,clazz,annotated,element,utils,has,annotation,clazz,configuration,class
AnnotationConfigContextLoaderUtils -> static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1349648958;Detect the default configuration classes for the supplied test class.__<p>The returned class array will contain all static inner classes of_the supplied class that meet the requirements for {@code @Configuration}_class implementations as specified in the documentation for_{@link Configuration @Configuration}.__<p>The implementation of this method adheres to the contract defined in the_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader}_SPI. Specifically, this method uses introspection to detect default_configuration classes that comply with the constraints required of_{@code @Configuration} class implementations. If a potential candidate_configuration class does not meet these requirements, this method will log a_warning, and the potential candidate class will be ignored._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never <code>null</code>;static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		Assert.notNull(declaringClass, "Declaring class must not be null")___		List<Class<?>> configClasses = new ArrayList<Class<?>>()___		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {_			if (isDefaultConfigurationClassCandidate(candidate)) {_				configClasses.add(candidate)__			} else {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Ignoring class [%s]_ it must be static, non-private, non-final, and annotated "_								+ "with @Configuration to be considered a default configuration class.",_						candidate.getName()))__				}_			}_		}__		if (configClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default configuration classes for test class [%s]: "_						+ "%s does not declare any static, non-private, non-final, inner classes "_						+ "annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))__			}_		}__		return configClasses.toArray(new Class<?>[configClasses.size()])__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,returned,class,array,will,contain,all,static,inner,classes,of,the,supplied,class,that,meet,the,requirements,for,code,configuration,class,implementations,as,specified,in,the,documentation,for,link,configuration,configuration,p,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,org,springframework,test,context,smart,context,loader,smart,context,loader,spi,specifically,this,method,uses,introspection,to,detect,default,configuration,classes,that,comply,with,the,constraints,required,of,code,configuration,class,implementations,if,a,potential,candidate,configuration,class,does,not,meet,these,requirements,this,method,will,log,a,warning,and,the,potential,candidate,class,will,be,ignored,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,code;static,class,detect,default,configuration,classes,class,declaring,class,assert,not,null,declaring,class,declaring,class,must,not,be,null,list,class,config,classes,new,array,list,class,for,class,candidate,declaring,class,get,declared,classes,if,is,default,configuration,class,candidate,candidate,config,classes,add,candidate,else,if,logger,is,debug,enabled,logger,debug,string,format,ignoring,class,s,it,must,be,static,non,private,non,final,and,annotated,with,configuration,to,be,considered,a,default,configuration,class,candidate,get,name,if,config,classes,is,empty,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,configuration,classes,for,test,class,s,s,does,not,declare,any,static,non,private,non,final,inner,classes,annotated,with,configuration,declaring,class,get,name,declaring,class,get,simple,name,return,config,classes,to,array,new,class,config,classes,size
AnnotationConfigContextLoaderUtils -> static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1350146630;Detect the default configuration classes for the supplied test class.__<p>The returned class array will contain all static inner classes of_the supplied class that meet the requirements for {@code @Configuration}_class implementations as specified in the documentation for_{@link Configuration @Configuration}.__<p>The implementation of this method adheres to the contract defined in the_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader}_SPI. Specifically, this method uses introspection to detect default_configuration classes that comply with the constraints required of_{@code @Configuration} class implementations. If a potential candidate_configuration class does not meet these requirements, this method will log a_warning, and the potential candidate class will be ignored._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never <code>null</code>;static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		Assert.notNull(declaringClass, "Declaring class must not be null")___		List<Class<?>> configClasses = new ArrayList<Class<?>>()___		for (Class<?> candidate : declaringClass.getDeclaredClasses()) {_			if (isDefaultConfigurationClassCandidate(candidate)) {_				configClasses.add(candidate)__			} else {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format(_						"Ignoring class [%s]_ it must be static, non-private, non-final, and annotated "_								+ "with @Configuration to be considered a default configuration class.",_						candidate.getName()))__				}_			}_		}__		if (configClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Could not detect default configuration classes for test class [%s]: "_						+ "%s does not declare any static, non-private, non-final, inner classes "_						+ "annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))__			}_		}__		return configClasses.toArray(new Class<?>[configClasses.size()])__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,returned,class,array,will,contain,all,static,inner,classes,of,the,supplied,class,that,meet,the,requirements,for,code,configuration,class,implementations,as,specified,in,the,documentation,for,link,configuration,configuration,p,the,implementation,of,this,method,adheres,to,the,contract,defined,in,the,link,org,springframework,test,context,smart,context,loader,smart,context,loader,spi,specifically,this,method,uses,introspection,to,detect,default,configuration,classes,that,comply,with,the,constraints,required,of,code,configuration,class,implementations,if,a,potential,candidate,configuration,class,does,not,meet,these,requirements,this,method,will,log,a,warning,and,the,potential,candidate,class,will,be,ignored,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,code;static,class,detect,default,configuration,classes,class,declaring,class,assert,not,null,declaring,class,declaring,class,must,not,be,null,list,class,config,classes,new,array,list,class,for,class,candidate,declaring,class,get,declared,classes,if,is,default,configuration,class,candidate,candidate,config,classes,add,candidate,else,if,logger,is,debug,enabled,logger,debug,string,format,ignoring,class,s,it,must,be,static,non,private,non,final,and,annotated,with,configuration,to,be,considered,a,default,configuration,class,candidate,get,name,if,config,classes,is,empty,if,logger,is,info,enabled,logger,info,string,format,could,not,detect,default,configuration,classes,for,test,class,s,s,does,not,declare,any,static,non,private,non,final,inner,classes,annotated,with,configuration,declaring,class,get,name,declaring,class,get,simple,name,return,config,classes,to,array,new,class,config,classes,size
