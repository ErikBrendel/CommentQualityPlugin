commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;3;/**  * Return the result value printer.  * @return the printer  */ ;/**  * Return the result value printer.  * @return the printer  */ protected ResultValuePrinter getPrinter() {     return this.printer. }
true;public,final;1;23;/**  * Print {@link MvcResult} details.  */ ;/**  * Print {@link MvcResult} details.  */ @Override public final void handle(MvcResult result) throws Exception {     this.printer.printHeading("MockHttpServletRequest").     printRequest(result.getRequest()).     this.printer.printHeading("Handler").     printHandler(result.getHandler(), result.getInterceptors()).     this.printer.printHeading("Async").     printAsyncResult(result).     this.printer.printHeading("Resolved Exception").     printResolvedException(result.getResolvedException()).     this.printer.printHeading("ModelAndView").     printModelAndView(result.getModelAndView()).     this.printer.printHeading("FlashMap").     printFlashMap(RequestContextUtils.getOutputFlashMap(result.getRequest())).     this.printer.printHeading("MockHttpServletResponse").     printResponse(result.getResponse()). }
true;protected;1;11;/**  * Print the request.  */ ;/**  * Print the request.  */ protected void printRequest(MockHttpServletRequest request) throws Exception {     String body = (request.getCharacterEncoding() != null ? request.getContentAsString() : MISSING_CHARACTER_ENCODING).     this.printer.printValue("HTTP Method", request.getMethod()).     this.printer.printValue("Request URI", request.getRequestURI()).     this.printer.printValue("Parameters", getParamsMultiValueMap(request)).     this.printer.printValue("Headers", getRequestHeaders(request)).     this.printer.printValue("Body", body).     this.printer.printValue("Session Attrs", getSessionAttributes(request)). }
false;protected,final;1;12;;protected final HttpHeaders getRequestHeaders(MockHttpServletRequest request) {     HttpHeaders headers = new HttpHeaders().     Enumeration<?> names = request.getHeaderNames().     while (names.hasMoreElements()) {         String name = (String) names.nextElement().         Enumeration<String> values = request.getHeaders(name).         while (values.hasMoreElements()) {             headers.add(name, values.nextElement()).         }     }     return headers. }
false;protected,final;1;12;;protected final MultiValueMap<String, String> getParamsMultiValueMap(MockHttpServletRequest request) {     Map<String, String[]> params = request.getParameterMap().     MultiValueMap<String, String> multiValueMap = new LinkedMultiValueMap<>().     params.forEach((name, values) -> {         if (params.get(name) != null) {             for (String value : values) {                 multiValueMap.add(name, value).             }         }     }).     return multiValueMap. }
false;protected,final;1;11;;protected final Map<String, Object> getSessionAttributes(MockHttpServletRequest request) {     HttpSession session = request.getSession(false).     if (session != null) {         Enumeration<String> attrNames = session.getAttributeNames().         if (attrNames != null) {             return Collections.list(attrNames).stream().collect(Collectors.toMap(n -> n, session::getAttribute)).         }     }     return Collections.emptyMap(). }
false;protected;1;12;;protected void printAsyncResult(MvcResult result) throws Exception {     HttpServletRequest request = result.getRequest().     this.printer.printValue("Async started", request.isAsyncStarted()).     Object asyncResult = null.     try {         asyncResult = result.getAsyncResult(0).     } catch (IllegalStateException ex) {     // Not set     }     this.printer.printValue("Async result", asyncResult). }
true;protected;2;17;/**  * Print the handler.  */ ;/**  * Print the handler.  */ protected void printHandler(@Nullable Object handler, @Nullable HandlerInterceptor[] interceptors) throws Exception {     if (handler == null) {         this.printer.printValue("Type", null).     } else {         if (handler instanceof HandlerMethod) {             HandlerMethod handlerMethod = (HandlerMethod) handler.             this.printer.printValue("Type", handlerMethod.getBeanType().getName()).             this.printer.printValue("Method", handlerMethod).         } else {             this.printer.printValue("Type", handler.getClass().getName()).         }     } }
true;protected;1;8;/**  * Print exceptions resolved through a HandlerExceptionResolver.  */ ;/**  * Print exceptions resolved through a HandlerExceptionResolver.  */ protected void printResolvedException(@Nullable Exception resolvedException) throws Exception {     if (resolvedException == null) {         this.printer.printValue("Type", null).     } else {         this.printer.printValue("Type", resolvedException.getClass().getName()).     } }
true;protected;1;20;/**  * Print the ModelAndView.  */ ;/**  * Print the ModelAndView.  */ protected void printModelAndView(@Nullable ModelAndView mav) throws Exception {     this.printer.printValue("View name", (mav != null) ? mav.getViewName() : null).     this.printer.printValue("View", (mav != null) ? mav.getView() : null).     if (mav == null || mav.getModel().size() == 0) {         this.printer.printValue("Model", null).     } else {         for (String name : mav.getModel().keySet()) {             if (!name.startsWith(BindingResult.MODEL_KEY_PREFIX)) {                 Object value = mav.getModel().get(name).                 this.printer.printValue("Attribute", name).                 this.printer.printValue("value", value).                 Errors errors = (Errors) mav.getModel().get(BindingResult.MODEL_KEY_PREFIX + name).                 if (errors != null) {                     this.printer.printValue("errors", errors.getAllErrors()).                 }             }         }     } }
true;protected;1;11;/**  * Print "output" flash attributes.  */ ;/**  * Print "output" flash attributes.  */ protected void printFlashMap(FlashMap flashMap) throws Exception {     if (ObjectUtils.isEmpty(flashMap)) {         this.printer.printValue("Attributes", null).     } else {         flashMap.forEach((name, value) -> {             this.printer.printValue("Attribute", name).             this.printer.printValue("value", value).         }).     } }
true;protected;1;13;/**  * Print the response.  */ ;/**  * Print the response.  */ protected void printResponse(MockHttpServletResponse response) throws Exception {     String body = (response.getCharacterEncoding() != null ? response.getContentAsString() : MISSING_CHARACTER_ENCODING).     this.printer.printValue("Status", response.getStatus()).     this.printer.printValue("Error message", response.getErrorMessage()).     this.printer.printValue("Headers", getResponseHeaders(response)).     this.printer.printValue("Content type", response.getContentType()).     this.printer.printValue("Body", body).     this.printer.printValue("Forwarded URL", response.getForwardedUrl()).     this.printer.printValue("Redirected URL", response.getRedirectedUrl()).     printCookies(response.getCookies()). }
true;private;1;18;/**  * Print the supplied cookies in a human-readable form, assuming the  * {@link Cookie} implementation does not provide its own {@code toString()}.  * @since 4.2  */ ;/**  * Print the supplied cookies in a human-readable form, assuming the  * {@link Cookie} implementation does not provide its own {@code toString()}.  * @since 4.2  */ private void printCookies(Cookie[] cookies) {     String[] cookieStrings = new String[cookies.length].     for (int i = 0. i < cookies.length. i++) {         Cookie cookie = cookies[i].         cookieStrings[i] = new ToStringCreator(cookie).append("name", cookie.getName()).append("value", cookie.getValue()).append("comment", cookie.getComment()).append("domain", cookie.getDomain()).append("maxAge", cookie.getMaxAge()).append("path", cookie.getPath()).append("secure", cookie.getSecure()).append("version", cookie.getVersion()).append("httpOnly", cookie.isHttpOnly()).toString().     }     this.printer.printValue("Cookies", cookieStrings). }
false;protected,final;1;7;;protected final HttpHeaders getResponseHeaders(MockHttpServletResponse response) {     HttpHeaders headers = new HttpHeaders().     for (String name : response.getHeaderNames()) {         headers.put(name, response.getHeaders(name)).     }     return headers. }
false;;1;1;;void printHeading(String heading).
false;;2;1;;void printValue(String label, @Nullable Object value).
