commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;7;;private static List<Object> instantiateIfNecessary(Object[] specified) {     List<Object> instances = new ArrayList<>(specified.length).     for (Object obj : specified) {         instances.add(obj instanceof Class ? BeanUtils.instantiateClass((Class<?>) obj) : obj).     }     return instances. }
true;public;1;4;/**  * Register one or more {@link org.springframework.web.bind.annotation.ControllerAdvice}  * instances to be used in tests (specified {@code Class} will be turned into instance).  * <p>Normally {@code @ControllerAdvice} are auto-detected as long as they're declared  * as Spring beans. However since the standalone setup does not load any Spring config,  * they need to be registered explicitly here instead much like controllers.  * @since 4.2  */ ;/**  * Register one or more {@link org.springframework.web.bind.annotation.ControllerAdvice}  * instances to be used in tests (specified {@code Class} will be turned into instance).  * <p>Normally {@code @ControllerAdvice} are auto-detected as long as they're declared  * as Spring beans. However since the standalone setup does not load any Spring config,  * they need to be registered explicitly here instead much like controllers.  * @since 4.2  */ public StandaloneMockMvcBuilder setControllerAdvice(Object... controllerAdvice) {     this.controllerAdvice = instantiateIfNecessary(controllerAdvice).     return this. }
true;public;1;4;/**  * Set the message converters to use in argument resolvers and in return value  * handlers, which support reading and/or writing to the body of the request  * and response. If no message converters are added to the list, a default  * list of converters is added instead.  */ ;/**  * Set the message converters to use in argument resolvers and in return value  * handlers, which support reading and/or writing to the body of the request  * and response. If no message converters are added to the list, a default  * list of converters is added instead.  */ public StandaloneMockMvcBuilder setMessageConverters(HttpMessageConverter<?>... messageConverters) {     this.messageConverters = Arrays.asList(messageConverters).     return this. }
true;public;1;4;/**  * Provide a custom {@link Validator} instead of the one created by default.  * The default implementation used, assuming JSR-303 is on the classpath, is  * {@link org.springframework.validation.beanvalidation.LocalValidatorFactoryBean}.  */ ;/**  * Provide a custom {@link Validator} instead of the one created by default.  * The default implementation used, assuming JSR-303 is on the classpath, is  * {@link org.springframework.validation.beanvalidation.LocalValidatorFactoryBean}.  */ public StandaloneMockMvcBuilder setValidator(Validator validator) {     this.validator = validator.     return this. }
true;public;1;4;/**  * Provide a conversion service with custom formatters and converters.  * If not set, a {@link DefaultFormattingConversionService} is used by default.  */ ;/**  * Provide a conversion service with custom formatters and converters.  * If not set, a {@link DefaultFormattingConversionService} is used by default.  */ public StandaloneMockMvcBuilder setConversionService(FormattingConversionService conversionService) {     this.conversionService = conversionService.     return this. }
true;public;1;4;/**  * Add interceptors mapped to all incoming requests.  */ ;/**  * Add interceptors mapped to all incoming requests.  */ public StandaloneMockMvcBuilder addInterceptors(HandlerInterceptor... interceptors) {     addMappedInterceptors(null, interceptors).     return this. }
true;public;2;8;/**  * Add interceptors mapped to a set of path patterns.  */ ;/**  * Add interceptors mapped to a set of path patterns.  */ public StandaloneMockMvcBuilder addMappedInterceptors(@Nullable String[] pathPatterns, HandlerInterceptor... interceptors) {     for (HandlerInterceptor interceptor : interceptors) {         this.mappedInterceptors.add(new MappedInterceptor(pathPatterns, interceptor)).     }     return this. }
true;public;1;4;/**  * Set a ContentNegotiationManager.  */ ;/**  * Set a ContentNegotiationManager.  */ public StandaloneMockMvcBuilder setContentNegotiationManager(ContentNegotiationManager manager) {     this.contentNegotiationManager = manager.     return this. }
true;public;1;4;/**  * Specify the timeout value for async execution. In Spring MVC Test, this  * value is used to determine how to long to wait for async execution to  * complete so that a test can verify the results synchronously.  * @param timeout the timeout value in milliseconds  */ ;/**  * Specify the timeout value for async execution. In Spring MVC Test, this  * value is used to determine how to long to wait for async execution to  * complete so that a test can verify the results synchronously.  * @param timeout the timeout value in milliseconds  */ public StandaloneMockMvcBuilder setAsyncRequestTimeout(long timeout) {     this.asyncRequestTimeout = timeout.     return this. }
true;public;1;4;/**  * Provide custom resolvers for controller method arguments.  */ ;/**  * Provide custom resolvers for controller method arguments.  */ public StandaloneMockMvcBuilder setCustomArgumentResolvers(HandlerMethodArgumentResolver... argumentResolvers) {     this.customArgumentResolvers = Arrays.asList(argumentResolvers).     return this. }
true;public;1;4;/**  * Provide custom handlers for controller method return values.  */ ;/**  * Provide custom handlers for controller method return values.  */ public StandaloneMockMvcBuilder setCustomReturnValueHandlers(HandlerMethodReturnValueHandler... handlers) {     this.customReturnValueHandlers = Arrays.asList(handlers).     return this. }
true;public;1;4;/**  * Set the HandlerExceptionResolver types to use as a list.  */ ;/**  * Set the HandlerExceptionResolver types to use as a list.  */ public StandaloneMockMvcBuilder setHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {     this.handlerExceptionResolvers = exceptionResolvers.     return this. }
true;public;1;4;/**  * Set the HandlerExceptionResolver types to use as an array.  */ ;/**  * Set the HandlerExceptionResolver types to use as an array.  */ public StandaloneMockMvcBuilder setHandlerExceptionResolvers(HandlerExceptionResolver... exceptionResolvers) {     this.handlerExceptionResolvers = Arrays.asList(exceptionResolvers).     return this. }
true;public;1;4;/**  * Set up view resolution with the given {@link ViewResolver ViewResolvers}.  * If not set, an {@link InternalResourceViewResolver} is used by default.  */ ;/**  * Set up view resolution with the given {@link ViewResolver ViewResolvers}.  * If not set, an {@link InternalResourceViewResolver} is used by default.  */ public StandaloneMockMvcBuilder setViewResolvers(ViewResolver... resolvers) {     this.viewResolvers = Arrays.asList(resolvers).     return this. }
true;public;1;4;/**  * Sets up a single {@link ViewResolver} that always returns the provided  * view instance. This is a convenient shortcut if you need to use one  * View instance only -- e.g. rendering generated content (JSON, XML, Atom).  */ ;/**  * Sets up a single {@link ViewResolver} that always returns the provided  * view instance. This is a convenient shortcut if you need to use one  * View instance only -- e.g. rendering generated content (JSON, XML, Atom).  */ public StandaloneMockMvcBuilder setSingleView(View view) {     this.viewResolvers = Collections.<ViewResolver>singletonList(new StaticViewResolver(view)).     return this. }
true;public;1;4;/**  * Provide a LocaleResolver instance.  * If not provided, the default one used is {@link AcceptHeaderLocaleResolver}.  */ ;/**  * Provide a LocaleResolver instance.  * If not provided, the default one used is {@link AcceptHeaderLocaleResolver}.  */ public StandaloneMockMvcBuilder setLocaleResolver(LocaleResolver localeResolver) {     this.localeResolver = localeResolver.     return this. }
true;public;1;4;/**  * Provide a custom FlashMapManager instance.  * If not provided, {@code SessionFlashMapManager} is used by default.  */ ;/**  * Provide a custom FlashMapManager instance.  * If not provided, {@code SessionFlashMapManager} is used by default.  */ public StandaloneMockMvcBuilder setFlashMapManager(FlashMapManager flashMapManager) {     this.flashMapManager = flashMapManager.     return this. }
true;public;1;4;/**  * Whether to use suffix pattern match (".*") when matching patterns to  * requests. If enabled a method mapped to "/users" also matches to "/users.*".  * <p>The default value is {@code true}.  */ ;/**  * Whether to use suffix pattern match (".*") when matching patterns to  * requests. If enabled a method mapped to "/users" also matches to "/users.*".  * <p>The default value is {@code true}.  */ public StandaloneMockMvcBuilder setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {     this.useSuffixPatternMatch = useSuffixPatternMatch.     return this. }
true;public;1;4;/**  * Whether to match to URLs irrespective of the presence of a trailing slash.  * If enabled a method mapped to "/users" also matches to "/users/".  * <p>The default value is {@code true}.  */ ;/**  * Whether to match to URLs irrespective of the presence of a trailing slash.  * If enabled a method mapped to "/users" also matches to "/users/".  * <p>The default value is {@code true}.  */ public StandaloneMockMvcBuilder setUseTrailingSlashPatternMatch(boolean useTrailingSlashPatternMatch) {     this.useTrailingSlashPatternMatch = useTrailingSlashPatternMatch.     return this. }
true;public;1;4;/**  * Set if "." (semicolon) content should be stripped from the request URI. The value,  * if provided, is in turn set on  * {@link AbstractHandlerMapping#setRemoveSemicolonContent(boolean)}.  */ ;/**  * Set if "." (semicolon) content should be stripped from the request URI. The value,  * if provided, is in turn set on  * {@link AbstractHandlerMapping#setRemoveSemicolonContent(boolean)}.  */ public StandaloneMockMvcBuilder setRemoveSemicolonContent(boolean removeSemicolonContent) {     this.removeSemicolonContent = removeSemicolonContent.     return this. }
true;public;2;4;/**  * In a standalone setup there is no support for placeholder values embedded in  * request mappings. This method allows manually provided placeholder values so they  * can be resolved. Alternatively consider creating a test that initializes a  * {@link WebApplicationContext}.  * @since 4.2.8  */ ;/**  * In a standalone setup there is no support for placeholder values embedded in  * request mappings. This method allows manually provided placeholder values so they  * can be resolved. Alternatively consider creating a test that initializes a  * {@link WebApplicationContext}.  * @since 4.2.8  */ public StandaloneMockMvcBuilder addPlaceholderValue(String name, String value) {     this.placeholderValues.put(name, value).     return this. }
true;public;1;4;/**  * Configure factory to create a custom {@link RequestMappingHandlerMapping}.  * @param factory the factory  * @since 5.0  */ ;/**  * Configure factory to create a custom {@link RequestMappingHandlerMapping}.  * @param factory the factory  * @since 5.0  */ public StandaloneMockMvcBuilder setCustomHandlerMapping(Supplier<RequestMappingHandlerMapping> factory) {     this.handlerMappingFactory = factory.     return this. }
false;protected;0;8;;@Override protected WebApplicationContext initWebAppContext() {     MockServletContext servletContext = new MockServletContext().     StubWebApplicationContext wac = new StubWebApplicationContext(servletContext).     registerMvcSingletons(wac).     servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, wac).     return wac. }
false;private;1;36;;private void registerMvcSingletons(StubWebApplicationContext wac) {     StandaloneConfiguration config = new StandaloneConfiguration().     config.setApplicationContext(wac).     ServletContext sc = wac.getServletContext().     wac.addBeans(this.controllers).     wac.addBeans(this.controllerAdvice).     RequestMappingHandlerMapping hm = config.getHandlerMapping().     if (sc != null) {         hm.setServletContext(sc).     }     hm.setApplicationContext(wac).     hm.afterPropertiesSet().     wac.addBean("requestMappingHandlerMapping", hm).     RequestMappingHandlerAdapter ha = config.requestMappingHandlerAdapter().     if (sc != null) {         ha.setServletContext(sc).     }     ha.setApplicationContext(wac).     ha.afterPropertiesSet().     wac.addBean("requestMappingHandlerAdapter", ha).     wac.addBean("handlerExceptionResolver", config.handlerExceptionResolver()).     wac.addBeans(initViewResolvers(wac)).     wac.addBean(DispatcherServlet.LOCALE_RESOLVER_BEAN_NAME, this.localeResolver).     wac.addBean(DispatcherServlet.THEME_RESOLVER_BEAN_NAME, new FixedThemeResolver()).     wac.addBean(DispatcherServlet.REQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME, new DefaultRequestToViewNameTranslator()).     this.flashMapManager = new SessionFlashMapManager().     wac.addBean(DispatcherServlet.FLASH_MAP_MANAGER_BEAN_NAME, this.flashMapManager).     extendMvcSingletons(sc).forEach(wac::addBean). }
false;private;1;10;;private List<ViewResolver> initViewResolvers(WebApplicationContext wac) {     this.viewResolvers = (this.viewResolvers != null ? this.viewResolvers : Collections.singletonList(new InternalResourceViewResolver())).     for (Object viewResolver : this.viewResolvers) {         if (viewResolver instanceof WebApplicationObjectSupport) {             ((WebApplicationObjectSupport) viewResolver).setApplicationContext(wac).         }     }     return this.viewResolvers. }
true;protected;1;3;/**  * This method could be used from a sub-class to register additional Spring  * MVC infrastructure such as additional {@code HandlerMapping},  * {@code HandlerAdapter}, and others.  * @param servletContext the ServletContext  * @return a map with additional MVC infrastructure object instances  * @since 5.1.4  */ ;/**  * This method could be used from a sub-class to register additional Spring  * MVC infrastructure such as additional {@code HandlerMapping},  * {@code HandlerAdapter}, and others.  * @param servletContext the ServletContext  * @return a map with additional MVC infrastructure object instances  * @since 5.1.4  */ protected Map<String, Object> extendMvcSingletons(@Nullable ServletContext servletContext) {     return Collections.emptyMap(). }
false;public;0;12;;public RequestMappingHandlerMapping getHandlerMapping() {     RequestMappingHandlerMapping handlerMapping = handlerMappingFactory.get().     handlerMapping.setEmbeddedValueResolver(new StaticStringValueResolver(placeholderValues)).     handlerMapping.setUseSuffixPatternMatch(useSuffixPatternMatch).     handlerMapping.setUseTrailingSlashMatch(useTrailingSlashPatternMatch).     handlerMapping.setOrder(0).     handlerMapping.setInterceptors(getInterceptors()).     if (removeSemicolonContent != null) {         handlerMapping.setRemoveSemicolonContent(removeSemicolonContent).     }     return handlerMapping. }
false;protected;1;4;;@Override protected void configureMessageConverters(List<HttpMessageConverter<?>> converters) {     converters.addAll(messageConverters). }
false;protected;1;4;;@Override protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {     argumentResolvers.addAll(customArgumentResolvers). }
false;protected;1;4;;@Override protected void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {     returnValueHandlers.addAll(customReturnValueHandlers). }
false;protected;1;9;;@Override protected void addInterceptors(InterceptorRegistry registry) {     for (MappedInterceptor interceptor : mappedInterceptors) {         InterceptorRegistration registration = registry.addInterceptor(interceptor.getInterceptor()).         if (interceptor.getPathPatterns() != null) {             registration.addPathPatterns(interceptor.getPathPatterns()).         }     } }
false;public;0;4;;@Override public ContentNegotiationManager mvcContentNegotiationManager() {     return (contentNegotiationManager != null) ? contentNegotiationManager : super.mvcContentNegotiationManager(). }
false;public;0;4;;@Override public FormattingConversionService mvcConversionService() {     return (conversionService != null ? conversionService : super.mvcConversionService()). }
false;public;1;6;;@Override public void configureAsyncSupport(AsyncSupportConfigurer configurer) {     if (asyncRequestTimeout != null) {         configurer.setDefaultTimeout(asyncRequestTimeout).     } }
false;public;0;13;;@Override public Validator mvcValidator() {     Validator mvcValidator = (validator != null) ? validator : super.mvcValidator().     if (mvcValidator instanceof InitializingBean) {         try {             ((InitializingBean) mvcValidator).afterPropertiesSet().         } catch (Exception ex) {             throw new BeanInitializationException("Failed to initialize Validator", ex).         }     }     return mvcValidator. }
false;protected;1;23;;@Override protected void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {     if (handlerExceptionResolvers == null) {         return.     }     for (HandlerExceptionResolver resolver : handlerExceptionResolvers) {         if (resolver instanceof ApplicationContextAware) {             ApplicationContext applicationContext = getApplicationContext().             if (applicationContext != null) {                 ((ApplicationContextAware) resolver).setApplicationContext(applicationContext).             }         }         if (resolver instanceof InitializingBean) {             try {                 ((InitializingBean) resolver).afterPropertiesSet().             } catch (Exception ex) {                 throw new IllegalStateException("Failure from afterPropertiesSet", ex).             }         }         exceptionResolvers.add(resolver).     } }
false;public;1;4;;@Override public String resolveStringValue(String strVal) throws BeansException {     return this.helper.replacePlaceholders(strVal, this.resolver). }
false;public;2;5;;@Override @Nullable public View resolveViewName(String viewName, Locale locale) {     return this.view. }
