commented;modifiers;parameterAmount;loc;comment;code
true;public;1;13;/**  * Assert the type of the handler that processed the request.  */ ;/**  * Assert the type of the handler that processed the request.  */ public ResultMatcher handlerType(final Class<?> type) {     return result -> {         Object handler = result.getHandler().         assertTrue("No handler", handler != null).         if (handler != null) {             Class<?> actual = handler.getClass().             if (HandlerMethod.class.isInstance(handler)) {                 actual = ((HandlerMethod) handler).getBeanType().             }             assertEquals("Handler type", type, ClassUtils.getUserClass(actual)).         }     }. }
true;public;1;13;/**  * Assert the controller method used to process the request.  * <p>The expected method is specified through a "mock" controller method  * invocation similar to {@link MvcUriComponentsBuilder#fromMethodCall(Object)}.  * <p>For example, given this controller:  * <pre class="code">  * &#064.RestController  * public class SimpleController {  *  *     &#064.RequestMapping("/")  *     public ResponseEntity&lt.Void&gt. handle() {  *         return ResponseEntity.ok().build().  *     }  * }  * </pre>  * <p>A test that has statically imported {@link MvcUriComponentsBuilder#on}  * can be performed as follows:  * <pre class="code">  * mockMvc.perform(get("/"))  *     .andExpect(handler().methodCall(on(SimpleController.class).handle())).  * </pre>  * @param obj either the value returned from a "mock" controller invocation  * or the "mock" controller itself after an invocation  */ ;/**  * Assert the controller method used to process the request.  * <p>The expected method is specified through a "mock" controller method  * invocation similar to {@link MvcUriComponentsBuilder#fromMethodCall(Object)}.  * <p>For example, given this controller:  * <pre class="code">  * &#064.RestController  * public class SimpleController {  *  *     &#064.RequestMapping("/")  *     public ResponseEntity&lt.Void&gt. handle() {  *         return ResponseEntity.ok().build().  *     }  * }  * </pre>  * <p>A test that has statically imported {@link MvcUriComponentsBuilder#on}  * can be performed as follows:  * <pre class="code">  * mockMvc.perform(get("/"))  *     .andExpect(handler().methodCall(on(SimpleController.class).handle())).  * </pre>  * @param obj either the value returned from a "mock" controller invocation  * or the "mock" controller itself after an invocation  */ public ResultMatcher methodCall(final Object obj) {     return result -> {         if (!(obj instanceof MethodInvocationInfo)) {             fail(String.format("The supplied object [%s] is not an instance of %s. " + "Ensure that you invoke the handler method via MvcUriComponentsBuilder.on().", obj, MethodInvocationInfo.class.getName())).         }         MethodInvocationInfo invocationInfo = (MethodInvocationInfo) obj.         Method expected = invocationInfo.getControllerMethod().         Method actual = getHandlerMethod(result).getMethod().         assertEquals("Handler method", expected, actual).     }. }
true;public;1;6;/**  * Assert the name of the controller method used to process the request  * using the given Hamcrest {@link Matcher}.  */ ;/**  * Assert the name of the controller method used to process the request  * using the given Hamcrest {@link Matcher}.  */ public ResultMatcher methodName(final Matcher<? super String> matcher) {     return result -> {         HandlerMethod handlerMethod = getHandlerMethod(result).         assertThat("Handler method", handlerMethod.getMethod().getName(), matcher).     }. }
true;public;1;6;/**  * Assert the name of the controller method used to process the request.  */ ;/**  * Assert the name of the controller method used to process the request.  */ public ResultMatcher methodName(final String name) {     return result -> {         HandlerMethod handlerMethod = getHandlerMethod(result).         assertEquals("Handler method", name, handlerMethod.getMethod().getName()).     }. }
true;public;1;6;/**  * Assert the controller method used to process the request.  */ ;/**  * Assert the controller method used to process the request.  */ public ResultMatcher method(final Method method) {     return result -> {         HandlerMethod handlerMethod = getHandlerMethod(result).         assertEquals("Handler method", method, handlerMethod.getMethod()).     }. }
false;private,static;1;8;;private static HandlerMethod getHandlerMethod(MvcResult result) {     Object handler = result.getHandler().     assertTrue("No handler", handler != null).     if (!(handler instanceof HandlerMethod)) {         fail("Not a HandlerMethod: " + handler).     }     return (HandlerMethod) handler. }
