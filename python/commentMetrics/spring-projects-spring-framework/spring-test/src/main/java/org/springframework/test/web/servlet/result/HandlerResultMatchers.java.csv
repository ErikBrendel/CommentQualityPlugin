# id;timestamp;commentText;codeText;commentWords;codeWords
HandlerResultMatchers -> public ResultMatcher methodName(final Matcher<? super String> matcher);1383669853;Assert the name of the controller method that processed the request with_the given Hamcrest {@link Matcher}.__<p>Use of this method implies annotated controllers are processed with_{@link RequestMappingHandlerMapping} and {@link RequestMappingHandlerAdapter}.;public ResultMatcher methodName(final Matcher<? super String> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = assertHandlerMethod(result)__				assertThat("HandlerMethod", ((HandlerMethod) handler).getMethod().getName(), matcher)__			}_		}__	};assert,the,name,of,the,controller,method,that,processed,the,request,with,the,given,hamcrest,link,matcher,p,use,of,this,method,implies,annotated,controllers,are,processed,with,link,request,mapping,handler,mapping,and,link,request,mapping,handler,adapter;public,result,matcher,method,name,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,assert,handler,method,result,assert,that,handler,method,handler,method,handler,get,method,get,name,matcher
HandlerResultMatchers -> public ResultMatcher methodName(final Matcher<? super String> matcher);1413848647;Assert the name of the controller method that processed the request with_the given Hamcrest {@link Matcher}.__<p>Use of this method implies annotated controllers are processed with_{@link RequestMappingHandlerMapping} and {@link RequestMappingHandlerAdapter}.;public ResultMatcher methodName(final Matcher<? super String> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = assertHandlerMethod(result)__				assertThat("HandlerMethod", ((HandlerMethod) handler).getMethod().getName(), matcher)__			}_		}__	};assert,the,name,of,the,controller,method,that,processed,the,request,with,the,given,hamcrest,link,matcher,p,use,of,this,method,implies,annotated,controllers,are,processed,with,link,request,mapping,handler,mapping,and,link,request,mapping,handler,adapter;public,result,matcher,method,name,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,assert,handler,method,result,assert,that,handler,method,handler,method,handler,get,method,get,name,matcher
HandlerResultMatchers -> public ResultMatcher methodName(final Matcher<? super String> matcher);1427238287;Assert the name of the controller method that processed the request with_the given Hamcrest {@link Matcher}._<p>Use of this method implies annotated controllers are processed with_{@link RequestMappingHandlerMapping} and {@link RequestMappingHandlerAdapter}.;public ResultMatcher methodName(final Matcher<? super String> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = assertHandlerMethod(result)__				assertThat("HandlerMethod", ((HandlerMethod) handler).getMethod().getName(), matcher)__			}_		}__	};assert,the,name,of,the,controller,method,that,processed,the,request,with,the,given,hamcrest,link,matcher,p,use,of,this,method,implies,annotated,controllers,are,processed,with,link,request,mapping,handler,mapping,and,link,request,mapping,handler,adapter;public,result,matcher,method,name,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,assert,handler,method,result,assert,that,handler,method,handler,method,handler,get,method,get,name,matcher
HandlerResultMatchers -> public ResultMatcher methodName(final Matcher<? super String> matcher);1437424890;Assert the name of the controller method that processed the request with_the given Hamcrest {@link Matcher}._<p>Use of this method implies annotated controllers are processed with_{@link RequestMappingHandlerMapping} and {@link RequestMappingHandlerAdapter}.;public ResultMatcher methodName(final Matcher<? super String> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = assertHandlerMethod(result)__				assertThat("HandlerMethod", ((HandlerMethod) handler).getMethod().getName(), matcher)__			}_		}__	};assert,the,name,of,the,controller,method,that,processed,the,request,with,the,given,hamcrest,link,matcher,p,use,of,this,method,implies,annotated,controllers,are,processed,with,link,request,mapping,handler,mapping,and,link,request,mapping,handler,adapter;public,result,matcher,method,name,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,assert,handler,method,result,assert,that,handler,method,handler,method,handler,get,method,get,name,matcher
HandlerResultMatchers -> public ResultMatcher methodName(final Matcher<? super String> matcher);1452879840;Assert the name of the controller method used to process the request_using the given Hamcrest {@link Matcher}.;public ResultMatcher methodName(final Matcher<? super String> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				HandlerMethod handlerMethod = getHandlerMethod(result)__				assertThat("HandlerMethod", handlerMethod.getMethod().getName(), matcher)__			}_		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request,using,the,given,hamcrest,link,matcher;public,result,matcher,method,name,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,handler,method,handler,method,get,handler,method,result,assert,that,handler,method,handler,method,get,method,get,name,matcher
HandlerResultMatchers -> public ResultMatcher methodName(final Matcher<? super String> matcher);1452879840;Assert the name of the controller method used to process the request_using the given Hamcrest {@link Matcher}.;public ResultMatcher methodName(final Matcher<? super String> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				HandlerMethod handlerMethod = getHandlerMethod(result)__				assertThat("HandlerMethod", handlerMethod.getMethod().getName(), matcher)__			}_		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request,using,the,given,hamcrest,link,matcher;public,result,matcher,method,name,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,handler,method,handler,method,get,handler,method,result,assert,that,handler,method,handler,method,get,method,get,name,matcher
HandlerResultMatchers -> public ResultMatcher methodName(final Matcher<? super String> matcher);1465308822;Assert the name of the controller method used to process the request_using the given Hamcrest {@link Matcher}.;public ResultMatcher methodName(final Matcher<? super String> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				HandlerMethod handlerMethod = getHandlerMethod(result)__				assertThat("HandlerMethod", handlerMethod.getMethod().getName(), matcher)__			}_		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request,using,the,given,hamcrest,link,matcher;public,result,matcher,method,name,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,handler,method,handler,method,get,handler,method,result,assert,that,handler,method,handler,method,get,method,get,name,matcher
HandlerResultMatchers -> public ResultMatcher methodName(final Matcher<? super String> matcher);1465309490;Assert the name of the controller method used to process the request_using the given Hamcrest {@link Matcher}.;public ResultMatcher methodName(final Matcher<? super String> matcher) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				HandlerMethod handlerMethod = getHandlerMethod(result)__				assertThat("Handler method", handlerMethod.getMethod().getName(), matcher)__			}_		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request,using,the,given,hamcrest,link,matcher;public,result,matcher,method,name,final,matcher,super,string,matcher,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,handler,method,handler,method,get,handler,method,result,assert,that,handler,method,handler,method,get,method,get,name,matcher
HandlerResultMatchers -> public ResultMatcher methodName(final Matcher<? super String> matcher);1493235170;Assert the name of the controller method used to process the request_using the given Hamcrest {@link Matcher}.;public ResultMatcher methodName(final Matcher<? super String> matcher) {_		return result -> {_			HandlerMethod handlerMethod = getHandlerMethod(result)__			assertThat("Handler method", handlerMethod.getMethod().getName(), matcher)__		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request,using,the,given,hamcrest,link,matcher;public,result,matcher,method,name,final,matcher,super,string,matcher,return,result,handler,method,handler,method,get,handler,method,result,assert,that,handler,method,handler,method,get,method,get,name,matcher
HandlerResultMatchers -> public ResultMatcher methodName(final Matcher<? super String> matcher);1493929656;Assert the name of the controller method used to process the request_using the given Hamcrest {@link Matcher}.;public ResultMatcher methodName(final Matcher<? super String> matcher) {_		return result -> {_			HandlerMethod handlerMethod = getHandlerMethod(result)__			assertThat("Handler method", handlerMethod.getMethod().getName(), matcher)__		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request,using,the,given,hamcrest,link,matcher;public,result,matcher,method,name,final,matcher,super,string,matcher,return,result,handler,method,handler,method,get,handler,method,result,assert,that,handler,method,handler,method,get,method,get,name,matcher
HandlerResultMatchers -> public ResultMatcher methodName(final Matcher<? super String> matcher);1496955179;Assert the name of the controller method used to process the request_using the given Hamcrest {@link Matcher}.;public ResultMatcher methodName(final Matcher<? super String> matcher) {_		return result -> {_			HandlerMethod handlerMethod = getHandlerMethod(result)__			assertThat("Handler method", handlerMethod.getMethod().getName(), matcher)__		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request,using,the,given,hamcrest,link,matcher;public,result,matcher,method,name,final,matcher,super,string,matcher,return,result,handler,method,handler,method,get,handler,method,result,assert,that,handler,method,handler,method,get,method,get,name,matcher
HandlerResultMatchers -> public ResultMatcher methodName(final Matcher<? super String> matcher);1530174524;Assert the name of the controller method used to process the request_using the given Hamcrest {@link Matcher}.;public ResultMatcher methodName(final Matcher<? super String> matcher) {_		return result -> {_			HandlerMethod handlerMethod = getHandlerMethod(result)__			assertThat("Handler method", handlerMethod.getMethod().getName(), matcher)__		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request,using,the,given,hamcrest,link,matcher;public,result,matcher,method,name,final,matcher,super,string,matcher,return,result,handler,method,handler,method,get,handler,method,result,assert,that,handler,method,handler,method,get,method,get,name,matcher
HandlerResultMatchers -> public ResultMatcher methodName(final Matcher<? super String> matcher);1530174524;Assert the name of the controller method used to process the request_using the given Hamcrest {@link Matcher}.;public ResultMatcher methodName(final Matcher<? super String> matcher) {_		return result -> {_			HandlerMethod handlerMethod = getHandlerMethod(result)__			assertThat("Handler method", handlerMethod.getMethod().getName(), matcher)__		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request,using,the,given,hamcrest,link,matcher;public,result,matcher,method,name,final,matcher,super,string,matcher,return,result,handler,method,handler,method,get,handler,method,result,assert,that,handler,method,handler,method,get,method,get,name,matcher
HandlerResultMatchers -> public ResultMatcher methodName(final String name);1383669853;Assert the name of the controller method that processed the request.__<p>Use of this method implies annotated controllers are processed with_{@link RequestMappingHandlerMapping} and {@link RequestMappingHandlerAdapter}.;public ResultMatcher methodName(final String name) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = assertHandlerMethod(result)__				assertEquals("HandlerMethod", name, ((HandlerMethod) handler).getMethod().getName())__			}_		}__	};assert,the,name,of,the,controller,method,that,processed,the,request,p,use,of,this,method,implies,annotated,controllers,are,processed,with,link,request,mapping,handler,mapping,and,link,request,mapping,handler,adapter;public,result,matcher,method,name,final,string,name,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,assert,handler,method,result,assert,equals,handler,method,name,handler,method,handler,get,method,get,name
HandlerResultMatchers -> public ResultMatcher methodName(final String name);1413848647;Assert the name of the controller method that processed the request.__<p>Use of this method implies annotated controllers are processed with_{@link RequestMappingHandlerMapping} and {@link RequestMappingHandlerAdapter}.;public ResultMatcher methodName(final String name) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = assertHandlerMethod(result)__				assertEquals("HandlerMethod", name, ((HandlerMethod) handler).getMethod().getName())__			}_		}__	};assert,the,name,of,the,controller,method,that,processed,the,request,p,use,of,this,method,implies,annotated,controllers,are,processed,with,link,request,mapping,handler,mapping,and,link,request,mapping,handler,adapter;public,result,matcher,method,name,final,string,name,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,assert,handler,method,result,assert,equals,handler,method,name,handler,method,handler,get,method,get,name
HandlerResultMatchers -> public ResultMatcher methodName(final String name);1427238287;Assert the name of the controller method that processed the request._<p>Use of this method implies annotated controllers are processed with_{@link RequestMappingHandlerMapping} and {@link RequestMappingHandlerAdapter}.;public ResultMatcher methodName(final String name) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = assertHandlerMethod(result)__				assertEquals("HandlerMethod", name, ((HandlerMethod) handler).getMethod().getName())__			}_		}__	};assert,the,name,of,the,controller,method,that,processed,the,request,p,use,of,this,method,implies,annotated,controllers,are,processed,with,link,request,mapping,handler,mapping,and,link,request,mapping,handler,adapter;public,result,matcher,method,name,final,string,name,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,assert,handler,method,result,assert,equals,handler,method,name,handler,method,handler,get,method,get,name
HandlerResultMatchers -> public ResultMatcher methodName(final String name);1437424890;Assert the name of the controller method that processed the request._<p>Use of this method implies annotated controllers are processed with_{@link RequestMappingHandlerMapping} and {@link RequestMappingHandlerAdapter}.;public ResultMatcher methodName(final String name) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = assertHandlerMethod(result)__				assertEquals("HandlerMethod", name, ((HandlerMethod) handler).getMethod().getName())__			}_		}__	};assert,the,name,of,the,controller,method,that,processed,the,request,p,use,of,this,method,implies,annotated,controllers,are,processed,with,link,request,mapping,handler,mapping,and,link,request,mapping,handler,adapter;public,result,matcher,method,name,final,string,name,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,assert,handler,method,result,assert,equals,handler,method,name,handler,method,handler,get,method,get,name
HandlerResultMatchers -> public ResultMatcher methodName(final String name);1452879840;Assert the name of the controller method used to process the request.;public ResultMatcher methodName(final String name) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				HandlerMethod handlerMethod = getHandlerMethod(result)__				assertEquals("HandlerMethod", name, handlerMethod.getMethod().getName())__			}_		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request;public,result,matcher,method,name,final,string,name,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,name,handler,method,get,method,get,name
HandlerResultMatchers -> public ResultMatcher methodName(final String name);1452879840;Assert the name of the controller method used to process the request.;public ResultMatcher methodName(final String name) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				HandlerMethod handlerMethod = getHandlerMethod(result)__				assertEquals("HandlerMethod", name, handlerMethod.getMethod().getName())__			}_		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request;public,result,matcher,method,name,final,string,name,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,name,handler,method,get,method,get,name
HandlerResultMatchers -> public ResultMatcher methodName(final String name);1465308822;Assert the name of the controller method used to process the request.;public ResultMatcher methodName(final String name) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				HandlerMethod handlerMethod = getHandlerMethod(result)__				assertEquals("HandlerMethod", name, handlerMethod.getMethod().getName())__			}_		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request;public,result,matcher,method,name,final,string,name,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,name,handler,method,get,method,get,name
HandlerResultMatchers -> public ResultMatcher methodName(final String name);1465309490;Assert the name of the controller method used to process the request.;public ResultMatcher methodName(final String name) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				HandlerMethod handlerMethod = getHandlerMethod(result)__				assertEquals("Handler method", name, handlerMethod.getMethod().getName())__			}_		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request;public,result,matcher,method,name,final,string,name,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,name,handler,method,get,method,get,name
HandlerResultMatchers -> public ResultMatcher methodName(final String name);1493235170;Assert the name of the controller method used to process the request.;public ResultMatcher methodName(final String name) {_		return result -> {_			HandlerMethod handlerMethod = getHandlerMethod(result)__			assertEquals("Handler method", name, handlerMethod.getMethod().getName())__		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request;public,result,matcher,method,name,final,string,name,return,result,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,name,handler,method,get,method,get,name
HandlerResultMatchers -> public ResultMatcher methodName(final String name);1493929656;Assert the name of the controller method used to process the request.;public ResultMatcher methodName(final String name) {_		return result -> {_			HandlerMethod handlerMethod = getHandlerMethod(result)__			assertEquals("Handler method", name, handlerMethod.getMethod().getName())__		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request;public,result,matcher,method,name,final,string,name,return,result,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,name,handler,method,get,method,get,name
HandlerResultMatchers -> public ResultMatcher methodName(final String name);1496955179;Assert the name of the controller method used to process the request.;public ResultMatcher methodName(final String name) {_		return result -> {_			HandlerMethod handlerMethod = getHandlerMethod(result)__			assertEquals("Handler method", name, handlerMethod.getMethod().getName())__		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request;public,result,matcher,method,name,final,string,name,return,result,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,name,handler,method,get,method,get,name
HandlerResultMatchers -> public ResultMatcher methodName(final String name);1530174524;Assert the name of the controller method used to process the request.;public ResultMatcher methodName(final String name) {_		return result -> {_			HandlerMethod handlerMethod = getHandlerMethod(result)__			assertEquals("Handler method", name, handlerMethod.getMethod().getName())__		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request;public,result,matcher,method,name,final,string,name,return,result,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,name,handler,method,get,method,get,name
HandlerResultMatchers -> public ResultMatcher methodName(final String name);1530174524;Assert the name of the controller method used to process the request.;public ResultMatcher methodName(final String name) {_		return result -> {_			HandlerMethod handlerMethod = getHandlerMethod(result)__			assertEquals("Handler method", name, handlerMethod.getMethod().getName())__		}__	};assert,the,name,of,the,controller,method,used,to,process,the,request;public,result,matcher,method,name,final,string,name,return,result,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,name,handler,method,get,method,get,name
HandlerResultMatchers -> public ResultMatcher methodCall(final Object obj);1465308822;Assert the controller method used to process the request._<p>The expected method is specified through a "mock" controller method_invocation similar to {@link MvcUriComponentsBuilder#fromMethodCall(Object)}._<p>For example, given this controller:_<pre class="code">_&#064_RestController_public class SimpleController {__&#064_RequestMapping("/")_public ResponseEntity<Void> handle() {_return ResponseEntity.ok().build()____</pre>_<p>A test that has statically imported {@link MvcUriComponentsBuilder#on}_can be performed as follows:_<pre class="code">_mockMvc.perform(get("/"))_.andExpect(handler().methodCall(on(SimpleController.class).handle()))__</pre>__@param obj either the value returned from a "mock" controller invocation_or the "mock" controller itself after an invocation;public ResultMatcher methodCall(final Object obj) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				if (!MethodInvocationInfo.class.isInstance(obj)) {_					fail(String.format("The supplied object [%s] is not an instance of %s. "_							+ "Ensure that you invoke the handler method via MvcUriComponentsBuilder.on().",_							obj, MethodInvocationInfo.class.getName()))__				}_				MethodInvocationInfo invocationInfo = (MethodInvocationInfo) obj__				Method expected = invocationInfo.getControllerMethod()__				Method actual = getHandlerMethod(result).getMethod()__				assertEquals("Handler method", expected, actual)__			}_		}__	};assert,the,controller,method,used,to,process,the,request,p,the,expected,method,is,specified,through,a,mock,controller,method,invocation,similar,to,link,mvc,uri,components,builder,from,method,call,object,p,for,example,given,this,controller,pre,class,code,064,rest,controller,public,class,simple,controller,064,request,mapping,public,response,entity,void,handle,return,response,entity,ok,build,pre,p,a,test,that,has,statically,imported,link,mvc,uri,components,builder,on,can,be,performed,as,follows,pre,class,code,mock,mvc,perform,get,and,expect,handler,method,call,on,simple,controller,class,handle,pre,param,obj,either,the,value,returned,from,a,mock,controller,invocation,or,the,mock,controller,itself,after,an,invocation;public,result,matcher,method,call,final,object,obj,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,if,method,invocation,info,class,is,instance,obj,fail,string,format,the,supplied,object,s,is,not,an,instance,of,s,ensure,that,you,invoke,the,handler,method,via,mvc,uri,components,builder,on,obj,method,invocation,info,class,get,name,method,invocation,info,invocation,info,method,invocation,info,obj,method,expected,invocation,info,get,controller,method,method,actual,get,handler,method,result,get,method,assert,equals,handler,method,expected,actual
HandlerResultMatchers -> public ResultMatcher methodCall(final Object obj);1465309490;Assert the controller method used to process the request._<p>The expected method is specified through a "mock" controller method_invocation similar to {@link MvcUriComponentsBuilder#fromMethodCall(Object)}._<p>For example, given this controller:_<pre class="code">_&#064_RestController_public class SimpleController {__&#064_RequestMapping("/")_public ResponseEntity<Void> handle() {_return ResponseEntity.ok().build()____</pre>_<p>A test that has statically imported {@link MvcUriComponentsBuilder#on}_can be performed as follows:_<pre class="code">_mockMvc.perform(get("/"))_.andExpect(handler().methodCall(on(SimpleController.class).handle()))__</pre>__@param obj either the value returned from a "mock" controller invocation_or the "mock" controller itself after an invocation;public ResultMatcher methodCall(final Object obj) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				if (!MethodInvocationInfo.class.isInstance(obj)) {_					fail(String.format("The supplied object [%s] is not an instance of %s. "_							+ "Ensure that you invoke the handler method via MvcUriComponentsBuilder.on().",_							obj, MethodInvocationInfo.class.getName()))__				}_				MethodInvocationInfo invocationInfo = (MethodInvocationInfo) obj__				Method expected = invocationInfo.getControllerMethod()__				Method actual = getHandlerMethod(result).getMethod()__				assertEquals("Handler method", expected, actual)__			}_		}__	};assert,the,controller,method,used,to,process,the,request,p,the,expected,method,is,specified,through,a,mock,controller,method,invocation,similar,to,link,mvc,uri,components,builder,from,method,call,object,p,for,example,given,this,controller,pre,class,code,064,rest,controller,public,class,simple,controller,064,request,mapping,public,response,entity,void,handle,return,response,entity,ok,build,pre,p,a,test,that,has,statically,imported,link,mvc,uri,components,builder,on,can,be,performed,as,follows,pre,class,code,mock,mvc,perform,get,and,expect,handler,method,call,on,simple,controller,class,handle,pre,param,obj,either,the,value,returned,from,a,mock,controller,invocation,or,the,mock,controller,itself,after,an,invocation;public,result,matcher,method,call,final,object,obj,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,if,method,invocation,info,class,is,instance,obj,fail,string,format,the,supplied,object,s,is,not,an,instance,of,s,ensure,that,you,invoke,the,handler,method,via,mvc,uri,components,builder,on,obj,method,invocation,info,class,get,name,method,invocation,info,invocation,info,method,invocation,info,obj,method,expected,invocation,info,get,controller,method,method,actual,get,handler,method,result,get,method,assert,equals,handler,method,expected,actual
HandlerResultMatchers -> public ResultMatcher methodCall(final Object obj);1493235170;Assert the controller method used to process the request._<p>The expected method is specified through a "mock" controller method_invocation similar to {@link MvcUriComponentsBuilder#fromMethodCall(Object)}._<p>For example, given this controller:_<pre class="code">_&#064_RestController_public class SimpleController {__&#064_RequestMapping("/")_public ResponseEntity<Void> handle() {_return ResponseEntity.ok().build()____</pre>_<p>A test that has statically imported {@link MvcUriComponentsBuilder#on}_can be performed as follows:_<pre class="code">_mockMvc.perform(get("/"))_.andExpect(handler().methodCall(on(SimpleController.class).handle()))__</pre>__@param obj either the value returned from a "mock" controller invocation_or the "mock" controller itself after an invocation;public ResultMatcher methodCall(final Object obj) {_		return result -> {_			if (!(obj instanceof MethodInvocationInfo)) {_				fail(String.format("The supplied object [%s] is not an instance of %s. " +_						"Ensure that you invoke the handler method via MvcUriComponentsBuilder.on().",_						obj, MethodInvocationInfo.class.getName()))__			}_			MethodInvocationInfo invocationInfo = (MethodInvocationInfo) obj__			Method expected = invocationInfo.getControllerMethod()__			Method actual = getHandlerMethod(result).getMethod()__			assertEquals("Handler method", expected, actual)__		}__	};assert,the,controller,method,used,to,process,the,request,p,the,expected,method,is,specified,through,a,mock,controller,method,invocation,similar,to,link,mvc,uri,components,builder,from,method,call,object,p,for,example,given,this,controller,pre,class,code,064,rest,controller,public,class,simple,controller,064,request,mapping,public,response,entity,void,handle,return,response,entity,ok,build,pre,p,a,test,that,has,statically,imported,link,mvc,uri,components,builder,on,can,be,performed,as,follows,pre,class,code,mock,mvc,perform,get,and,expect,handler,method,call,on,simple,controller,class,handle,pre,param,obj,either,the,value,returned,from,a,mock,controller,invocation,or,the,mock,controller,itself,after,an,invocation;public,result,matcher,method,call,final,object,obj,return,result,if,obj,instanceof,method,invocation,info,fail,string,format,the,supplied,object,s,is,not,an,instance,of,s,ensure,that,you,invoke,the,handler,method,via,mvc,uri,components,builder,on,obj,method,invocation,info,class,get,name,method,invocation,info,invocation,info,method,invocation,info,obj,method,expected,invocation,info,get,controller,method,method,actual,get,handler,method,result,get,method,assert,equals,handler,method,expected,actual
HandlerResultMatchers -> public ResultMatcher methodCall(final Object obj);1493929656;Assert the controller method used to process the request._<p>The expected method is specified through a "mock" controller method_invocation similar to {@link MvcUriComponentsBuilder#fromMethodCall(Object)}._<p>For example, given this controller:_<pre class="code">_&#064_RestController_public class SimpleController {__&#064_RequestMapping("/")_public ResponseEntity<Void> handle() {_return ResponseEntity.ok().build()____</pre>_<p>A test that has statically imported {@link MvcUriComponentsBuilder#on}_can be performed as follows:_<pre class="code">_mockMvc.perform(get("/"))_.andExpect(handler().methodCall(on(SimpleController.class).handle()))__</pre>_@param obj either the value returned from a "mock" controller invocation_or the "mock" controller itself after an invocation;public ResultMatcher methodCall(final Object obj) {_		return result -> {_			if (!(obj instanceof MethodInvocationInfo)) {_				fail(String.format("The supplied object [%s] is not an instance of %s. " +_						"Ensure that you invoke the handler method via MvcUriComponentsBuilder.on().",_						obj, MethodInvocationInfo.class.getName()))__			}_			MethodInvocationInfo invocationInfo = (MethodInvocationInfo) obj__			Method expected = invocationInfo.getControllerMethod()__			Method actual = getHandlerMethod(result).getMethod()__			assertEquals("Handler method", expected, actual)__		}__	};assert,the,controller,method,used,to,process,the,request,p,the,expected,method,is,specified,through,a,mock,controller,method,invocation,similar,to,link,mvc,uri,components,builder,from,method,call,object,p,for,example,given,this,controller,pre,class,code,064,rest,controller,public,class,simple,controller,064,request,mapping,public,response,entity,void,handle,return,response,entity,ok,build,pre,p,a,test,that,has,statically,imported,link,mvc,uri,components,builder,on,can,be,performed,as,follows,pre,class,code,mock,mvc,perform,get,and,expect,handler,method,call,on,simple,controller,class,handle,pre,param,obj,either,the,value,returned,from,a,mock,controller,invocation,or,the,mock,controller,itself,after,an,invocation;public,result,matcher,method,call,final,object,obj,return,result,if,obj,instanceof,method,invocation,info,fail,string,format,the,supplied,object,s,is,not,an,instance,of,s,ensure,that,you,invoke,the,handler,method,via,mvc,uri,components,builder,on,obj,method,invocation,info,class,get,name,method,invocation,info,invocation,info,method,invocation,info,obj,method,expected,invocation,info,get,controller,method,method,actual,get,handler,method,result,get,method,assert,equals,handler,method,expected,actual
HandlerResultMatchers -> public ResultMatcher methodCall(final Object obj);1496955179;Assert the controller method used to process the request._<p>The expected method is specified through a "mock" controller method_invocation similar to {@link MvcUriComponentsBuilder#fromMethodCall(Object)}._<p>For example, given this controller:_<pre class="code">_&#064_RestController_public class SimpleController {__&#064_RequestMapping("/")_public ResponseEntity<Void> handle() {_return ResponseEntity.ok().build()____</pre>_<p>A test that has statically imported {@link MvcUriComponentsBuilder#on}_can be performed as follows:_<pre class="code">_mockMvc.perform(get("/"))_.andExpect(handler().methodCall(on(SimpleController.class).handle()))__</pre>_@param obj either the value returned from a "mock" controller invocation_or the "mock" controller itself after an invocation;public ResultMatcher methodCall(final Object obj) {_		return result -> {_			if (!(obj instanceof MethodInvocationInfo)) {_				fail(String.format("The supplied object [%s] is not an instance of %s. " +_						"Ensure that you invoke the handler method via MvcUriComponentsBuilder.on().",_						obj, MethodInvocationInfo.class.getName()))__			}_			MethodInvocationInfo invocationInfo = (MethodInvocationInfo) obj__			Method expected = invocationInfo.getControllerMethod()__			Method actual = getHandlerMethod(result).getMethod()__			assertEquals("Handler method", expected, actual)__		}__	};assert,the,controller,method,used,to,process,the,request,p,the,expected,method,is,specified,through,a,mock,controller,method,invocation,similar,to,link,mvc,uri,components,builder,from,method,call,object,p,for,example,given,this,controller,pre,class,code,064,rest,controller,public,class,simple,controller,064,request,mapping,public,response,entity,void,handle,return,response,entity,ok,build,pre,p,a,test,that,has,statically,imported,link,mvc,uri,components,builder,on,can,be,performed,as,follows,pre,class,code,mock,mvc,perform,get,and,expect,handler,method,call,on,simple,controller,class,handle,pre,param,obj,either,the,value,returned,from,a,mock,controller,invocation,or,the,mock,controller,itself,after,an,invocation;public,result,matcher,method,call,final,object,obj,return,result,if,obj,instanceof,method,invocation,info,fail,string,format,the,supplied,object,s,is,not,an,instance,of,s,ensure,that,you,invoke,the,handler,method,via,mvc,uri,components,builder,on,obj,method,invocation,info,class,get,name,method,invocation,info,invocation,info,method,invocation,info,obj,method,expected,invocation,info,get,controller,method,method,actual,get,handler,method,result,get,method,assert,equals,handler,method,expected,actual
HandlerResultMatchers -> public ResultMatcher methodCall(final Object obj);1530174524;Assert the controller method used to process the request._<p>The expected method is specified through a "mock" controller method_invocation similar to {@link MvcUriComponentsBuilder#fromMethodCall(Object)}._<p>For example, given this controller:_<pre class="code">_&#064_RestController_public class SimpleController {__&#064_RequestMapping("/")_public ResponseEntity&lt_Void&gt_ handle() {_return ResponseEntity.ok().build()____</pre>_<p>A test that has statically imported {@link MvcUriComponentsBuilder#on}_can be performed as follows:_<pre class="code">_mockMvc.perform(get("/"))_.andExpect(handler().methodCall(on(SimpleController.class).handle()))__</pre>_@param obj either the value returned from a "mock" controller invocation_or the "mock" controller itself after an invocation;public ResultMatcher methodCall(final Object obj) {_		return result -> {_			if (!(obj instanceof MethodInvocationInfo)) {_				fail(String.format("The supplied object [%s] is not an instance of %s. " +_						"Ensure that you invoke the handler method via MvcUriComponentsBuilder.on().",_						obj, MethodInvocationInfo.class.getName()))__			}_			MethodInvocationInfo invocationInfo = (MethodInvocationInfo) obj__			Method expected = invocationInfo.getControllerMethod()__			Method actual = getHandlerMethod(result).getMethod()__			assertEquals("Handler method", expected, actual)__		}__	};assert,the,controller,method,used,to,process,the,request,p,the,expected,method,is,specified,through,a,mock,controller,method,invocation,similar,to,link,mvc,uri,components,builder,from,method,call,object,p,for,example,given,this,controller,pre,class,code,064,rest,controller,public,class,simple,controller,064,request,mapping,public,response,entity,lt,void,gt,handle,return,response,entity,ok,build,pre,p,a,test,that,has,statically,imported,link,mvc,uri,components,builder,on,can,be,performed,as,follows,pre,class,code,mock,mvc,perform,get,and,expect,handler,method,call,on,simple,controller,class,handle,pre,param,obj,either,the,value,returned,from,a,mock,controller,invocation,or,the,mock,controller,itself,after,an,invocation;public,result,matcher,method,call,final,object,obj,return,result,if,obj,instanceof,method,invocation,info,fail,string,format,the,supplied,object,s,is,not,an,instance,of,s,ensure,that,you,invoke,the,handler,method,via,mvc,uri,components,builder,on,obj,method,invocation,info,class,get,name,method,invocation,info,invocation,info,method,invocation,info,obj,method,expected,invocation,info,get,controller,method,method,actual,get,handler,method,result,get,method,assert,equals,handler,method,expected,actual
HandlerResultMatchers -> public ResultMatcher methodCall(final Object obj);1530174524;Assert the controller method used to process the request._<p>The expected method is specified through a "mock" controller method_invocation similar to {@link MvcUriComponentsBuilder#fromMethodCall(Object)}._<p>For example, given this controller:_<pre class="code">_&#064_RestController_public class SimpleController {__&#064_RequestMapping("/")_public ResponseEntity&lt_Void&gt_ handle() {_return ResponseEntity.ok().build()____</pre>_<p>A test that has statically imported {@link MvcUriComponentsBuilder#on}_can be performed as follows:_<pre class="code">_mockMvc.perform(get("/"))_.andExpect(handler().methodCall(on(SimpleController.class).handle()))__</pre>_@param obj either the value returned from a "mock" controller invocation_or the "mock" controller itself after an invocation;public ResultMatcher methodCall(final Object obj) {_		return result -> {_			if (!(obj instanceof MethodInvocationInfo)) {_				fail(String.format("The supplied object [%s] is not an instance of %s. " +_						"Ensure that you invoke the handler method via MvcUriComponentsBuilder.on().",_						obj, MethodInvocationInfo.class.getName()))__			}_			MethodInvocationInfo invocationInfo = (MethodInvocationInfo) obj__			Method expected = invocationInfo.getControllerMethod()__			Method actual = getHandlerMethod(result).getMethod()__			assertEquals("Handler method", expected, actual)__		}__	};assert,the,controller,method,used,to,process,the,request,p,the,expected,method,is,specified,through,a,mock,controller,method,invocation,similar,to,link,mvc,uri,components,builder,from,method,call,object,p,for,example,given,this,controller,pre,class,code,064,rest,controller,public,class,simple,controller,064,request,mapping,public,response,entity,lt,void,gt,handle,return,response,entity,ok,build,pre,p,a,test,that,has,statically,imported,link,mvc,uri,components,builder,on,can,be,performed,as,follows,pre,class,code,mock,mvc,perform,get,and,expect,handler,method,call,on,simple,controller,class,handle,pre,param,obj,either,the,value,returned,from,a,mock,controller,invocation,or,the,mock,controller,itself,after,an,invocation;public,result,matcher,method,call,final,object,obj,return,result,if,obj,instanceof,method,invocation,info,fail,string,format,the,supplied,object,s,is,not,an,instance,of,s,ensure,that,you,invoke,the,handler,method,via,mvc,uri,components,builder,on,obj,method,invocation,info,class,get,name,method,invocation,info,invocation,info,method,invocation,info,obj,method,expected,invocation,info,get,controller,method,method,actual,get,handler,method,result,get,method,assert,equals,handler,method,expected,actual
HandlerResultMatchers -> public ResultMatcher method(final Method method);1383669853;Assert the controller method that processed the request.__<p>Use of this method implies annotated controllers are processed with_{@link RequestMappingHandlerMapping} and {@link RequestMappingHandlerAdapter}.;public ResultMatcher method(final Method method) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = assertHandlerMethod(result)__				assertEquals("HandlerMethod", method, ((HandlerMethod) handler).getMethod())__			}_		}__	};assert,the,controller,method,that,processed,the,request,p,use,of,this,method,implies,annotated,controllers,are,processed,with,link,request,mapping,handler,mapping,and,link,request,mapping,handler,adapter;public,result,matcher,method,final,method,method,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,assert,handler,method,result,assert,equals,handler,method,method,handler,method,handler,get,method
HandlerResultMatchers -> public ResultMatcher method(final Method method);1413848647;Assert the controller method that processed the request.__<p>Use of this method implies annotated controllers are processed with_{@link RequestMappingHandlerMapping} and {@link RequestMappingHandlerAdapter}.;public ResultMatcher method(final Method method) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = assertHandlerMethod(result)__				assertEquals("HandlerMethod", method, ((HandlerMethod) handler).getMethod())__			}_		}__	};assert,the,controller,method,that,processed,the,request,p,use,of,this,method,implies,annotated,controllers,are,processed,with,link,request,mapping,handler,mapping,and,link,request,mapping,handler,adapter;public,result,matcher,method,final,method,method,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,assert,handler,method,result,assert,equals,handler,method,method,handler,method,handler,get,method
HandlerResultMatchers -> public ResultMatcher method(final Method method);1427238287;Assert the controller method that processed the request._<p>Use of this method implies annotated controllers are processed with_{@link RequestMappingHandlerMapping} and {@link RequestMappingHandlerAdapter}.;public ResultMatcher method(final Method method) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = assertHandlerMethod(result)__				assertEquals("HandlerMethod", method, ((HandlerMethod) handler).getMethod())__			}_		}__	};assert,the,controller,method,that,processed,the,request,p,use,of,this,method,implies,annotated,controllers,are,processed,with,link,request,mapping,handler,mapping,and,link,request,mapping,handler,adapter;public,result,matcher,method,final,method,method,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,assert,handler,method,result,assert,equals,handler,method,method,handler,method,handler,get,method
HandlerResultMatchers -> public ResultMatcher method(final Method method);1437424890;Assert the controller method that processed the request._<p>Use of this method implies annotated controllers are processed with_{@link RequestMappingHandlerMapping} and {@link RequestMappingHandlerAdapter}.;public ResultMatcher method(final Method method) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = assertHandlerMethod(result)__				assertEquals("HandlerMethod", method, ((HandlerMethod) handler).getMethod())__			}_		}__	};assert,the,controller,method,that,processed,the,request,p,use,of,this,method,implies,annotated,controllers,are,processed,with,link,request,mapping,handler,mapping,and,link,request,mapping,handler,adapter;public,result,matcher,method,final,method,method,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,assert,handler,method,result,assert,equals,handler,method,method,handler,method,handler,get,method
HandlerResultMatchers -> public ResultMatcher method(final Method method);1452879840;Assert the controller method used to process the request.;public ResultMatcher method(final Method method) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				HandlerMethod handlerMethod = getHandlerMethod(result)__				assertEquals("HandlerMethod", method, handlerMethod.getMethod())__			}_		}__	};assert,the,controller,method,used,to,process,the,request;public,result,matcher,method,final,method,method,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,method,handler,method,get,method
HandlerResultMatchers -> public ResultMatcher method(final Method method);1452879840;Assert the controller method used to process the request.;public ResultMatcher method(final Method method) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				HandlerMethod handlerMethod = getHandlerMethod(result)__				assertEquals("HandlerMethod", method, handlerMethod.getMethod())__			}_		}__	};assert,the,controller,method,used,to,process,the,request;public,result,matcher,method,final,method,method,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,method,handler,method,get,method
HandlerResultMatchers -> public ResultMatcher method(final Method method);1465308822;Assert the controller method used to process the request.;public ResultMatcher method(final Method method) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				HandlerMethod handlerMethod = getHandlerMethod(result)__				assertEquals("HandlerMethod", method, handlerMethod.getMethod())__			}_		}__	};assert,the,controller,method,used,to,process,the,request;public,result,matcher,method,final,method,method,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,method,handler,method,get,method
HandlerResultMatchers -> public ResultMatcher method(final Method method);1465309490;Assert the controller method used to process the request.;public ResultMatcher method(final Method method) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				HandlerMethod handlerMethod = getHandlerMethod(result)__				assertEquals("Handler method", method, handlerMethod.getMethod())__			}_		}__	};assert,the,controller,method,used,to,process,the,request;public,result,matcher,method,final,method,method,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,method,handler,method,get,method
HandlerResultMatchers -> public ResultMatcher method(final Method method);1493235170;Assert the controller method used to process the request.;public ResultMatcher method(final Method method) {_		return result -> {_			HandlerMethod handlerMethod = getHandlerMethod(result)__			assertEquals("Handler method", method, handlerMethod.getMethod())__		}__	};assert,the,controller,method,used,to,process,the,request;public,result,matcher,method,final,method,method,return,result,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,method,handler,method,get,method
HandlerResultMatchers -> public ResultMatcher method(final Method method);1493929656;Assert the controller method used to process the request.;public ResultMatcher method(final Method method) {_		return result -> {_			HandlerMethod handlerMethod = getHandlerMethod(result)__			assertEquals("Handler method", method, handlerMethod.getMethod())__		}__	};assert,the,controller,method,used,to,process,the,request;public,result,matcher,method,final,method,method,return,result,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,method,handler,method,get,method
HandlerResultMatchers -> public ResultMatcher method(final Method method);1496955179;Assert the controller method used to process the request.;public ResultMatcher method(final Method method) {_		return result -> {_			HandlerMethod handlerMethod = getHandlerMethod(result)__			assertEquals("Handler method", method, handlerMethod.getMethod())__		}__	};assert,the,controller,method,used,to,process,the,request;public,result,matcher,method,final,method,method,return,result,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,method,handler,method,get,method
HandlerResultMatchers -> public ResultMatcher method(final Method method);1530174524;Assert the controller method used to process the request.;public ResultMatcher method(final Method method) {_		return result -> {_			HandlerMethod handlerMethod = getHandlerMethod(result)__			assertEquals("Handler method", method, handlerMethod.getMethod())__		}__	};assert,the,controller,method,used,to,process,the,request;public,result,matcher,method,final,method,method,return,result,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,method,handler,method,get,method
HandlerResultMatchers -> public ResultMatcher method(final Method method);1530174524;Assert the controller method used to process the request.;public ResultMatcher method(final Method method) {_		return result -> {_			HandlerMethod handlerMethod = getHandlerMethod(result)__			assertEquals("Handler method", method, handlerMethod.getMethod())__		}__	};assert,the,controller,method,used,to,process,the,request;public,result,matcher,method,final,method,method,return,result,handler,method,handler,method,get,handler,method,result,assert,equals,handler,method,method,handler,method,get,method
HandlerResultMatchers -> public ResultMatcher handlerType(final Class<?> type);1383669853;Assert the type of the handler that processed the request.;public ResultMatcher handlerType(final Class<?> type) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = result.getHandler()__				assertTrue("No handler: ", handler != null)__				Class<?> actual = handler.getClass()__				if (HandlerMethod.class.isInstance(handler)) {_					actual = ((HandlerMethod) handler).getBeanType()__				}_				assertEquals("Handler type", type, ClassUtils.getUserClass(actual))__			}_		}__	};assert,the,type,of,the,handler,that,processed,the,request;public,result,matcher,handler,type,final,class,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,result,get,handler,assert,true,no,handler,handler,null,class,actual,handler,get,class,if,handler,method,class,is,instance,handler,actual,handler,method,handler,get,bean,type,assert,equals,handler,type,type,class,utils,get,user,class,actual
HandlerResultMatchers -> public ResultMatcher handlerType(final Class<?> type);1413848647;Assert the type of the handler that processed the request.;public ResultMatcher handlerType(final Class<?> type) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = result.getHandler()__				assertTrue("No handler: ", handler != null)__				Class<?> actual = handler.getClass()__				if (HandlerMethod.class.isInstance(handler)) {_					actual = ((HandlerMethod) handler).getBeanType()__				}_				assertEquals("Handler type", type, ClassUtils.getUserClass(actual))__			}_		}__	};assert,the,type,of,the,handler,that,processed,the,request;public,result,matcher,handler,type,final,class,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,result,get,handler,assert,true,no,handler,handler,null,class,actual,handler,get,class,if,handler,method,class,is,instance,handler,actual,handler,method,handler,get,bean,type,assert,equals,handler,type,type,class,utils,get,user,class,actual
HandlerResultMatchers -> public ResultMatcher handlerType(final Class<?> type);1427238287;Assert the type of the handler that processed the request.;public ResultMatcher handlerType(final Class<?> type) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = result.getHandler()__				assertTrue("No handler: ", handler != null)__				Class<?> actual = handler.getClass()__				if (HandlerMethod.class.isInstance(handler)) {_					actual = ((HandlerMethod) handler).getBeanType()__				}_				assertEquals("Handler type", type, ClassUtils.getUserClass(actual))__			}_		}__	};assert,the,type,of,the,handler,that,processed,the,request;public,result,matcher,handler,type,final,class,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,result,get,handler,assert,true,no,handler,handler,null,class,actual,handler,get,class,if,handler,method,class,is,instance,handler,actual,handler,method,handler,get,bean,type,assert,equals,handler,type,type,class,utils,get,user,class,actual
HandlerResultMatchers -> public ResultMatcher handlerType(final Class<?> type);1437424890;Assert the type of the handler that processed the request.;public ResultMatcher handlerType(final Class<?> type) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = result.getHandler()__				assertTrue("No handler: ", handler != null)__				Class<?> actual = handler.getClass()__				if (HandlerMethod.class.isInstance(handler)) {_					actual = ((HandlerMethod) handler).getBeanType()__				}_				assertEquals("Handler type", type, ClassUtils.getUserClass(actual))__			}_		}__	};assert,the,type,of,the,handler,that,processed,the,request;public,result,matcher,handler,type,final,class,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,result,get,handler,assert,true,no,handler,handler,null,class,actual,handler,get,class,if,handler,method,class,is,instance,handler,actual,handler,method,handler,get,bean,type,assert,equals,handler,type,type,class,utils,get,user,class,actual
HandlerResultMatchers -> public ResultMatcher handlerType(final Class<?> type);1452879840;Assert the type of the handler that processed the request.;public ResultMatcher handlerType(final Class<?> type) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = result.getHandler()__				assertTrue("No handler: ", handler != null)__				Class<?> actual = handler.getClass()__				if (HandlerMethod.class.isInstance(handler)) {_					actual = ((HandlerMethod) handler).getBeanType()__				}_				assertEquals("Handler type", type, ClassUtils.getUserClass(actual))__			}_		}__	};assert,the,type,of,the,handler,that,processed,the,request;public,result,matcher,handler,type,final,class,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,result,get,handler,assert,true,no,handler,handler,null,class,actual,handler,get,class,if,handler,method,class,is,instance,handler,actual,handler,method,handler,get,bean,type,assert,equals,handler,type,type,class,utils,get,user,class,actual
HandlerResultMatchers -> public ResultMatcher handlerType(final Class<?> type);1452879840;Assert the type of the handler that processed the request.;public ResultMatcher handlerType(final Class<?> type) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = result.getHandler()__				assertTrue("No handler: ", handler != null)__				Class<?> actual = handler.getClass()__				if (HandlerMethod.class.isInstance(handler)) {_					actual = ((HandlerMethod) handler).getBeanType()__				}_				assertEquals("Handler type", type, ClassUtils.getUserClass(actual))__			}_		}__	};assert,the,type,of,the,handler,that,processed,the,request;public,result,matcher,handler,type,final,class,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,result,get,handler,assert,true,no,handler,handler,null,class,actual,handler,get,class,if,handler,method,class,is,instance,handler,actual,handler,method,handler,get,bean,type,assert,equals,handler,type,type,class,utils,get,user,class,actual
HandlerResultMatchers -> public ResultMatcher handlerType(final Class<?> type);1465308822;Assert the type of the handler that processed the request.;public ResultMatcher handlerType(final Class<?> type) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = result.getHandler()__				assertTrue("No handler: ", handler != null)__				Class<?> actual = handler.getClass()__				if (HandlerMethod.class.isInstance(handler)) {_					actual = ((HandlerMethod) handler).getBeanType()__				}_				assertEquals("Handler type", type, ClassUtils.getUserClass(actual))__			}_		}__	};assert,the,type,of,the,handler,that,processed,the,request;public,result,matcher,handler,type,final,class,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,result,get,handler,assert,true,no,handler,handler,null,class,actual,handler,get,class,if,handler,method,class,is,instance,handler,actual,handler,method,handler,get,bean,type,assert,equals,handler,type,type,class,utils,get,user,class,actual
HandlerResultMatchers -> public ResultMatcher handlerType(final Class<?> type);1465309490;Assert the type of the handler that processed the request.;public ResultMatcher handlerType(final Class<?> type) {_		return new ResultMatcher() {_			@Override_			public void match(MvcResult result) throws Exception {_				Object handler = result.getHandler()__				assertTrue("No handler: ", handler != null)__				Class<?> actual = handler.getClass()__				if (HandlerMethod.class.isInstance(handler)) {_					actual = ((HandlerMethod) handler).getBeanType()__				}_				assertEquals("Handler type", type, ClassUtils.getUserClass(actual))__			}_		}__	};assert,the,type,of,the,handler,that,processed,the,request;public,result,matcher,handler,type,final,class,type,return,new,result,matcher,override,public,void,match,mvc,result,result,throws,exception,object,handler,result,get,handler,assert,true,no,handler,handler,null,class,actual,handler,get,class,if,handler,method,class,is,instance,handler,actual,handler,method,handler,get,bean,type,assert,equals,handler,type,type,class,utils,get,user,class,actual
HandlerResultMatchers -> public ResultMatcher handlerType(final Class<?> type);1493235170;Assert the type of the handler that processed the request.;public ResultMatcher handlerType(final Class<?> type) {_		return result -> {_			Object handler = result.getHandler()__			assertTrue("No handler", handler != null)__			Class<?> actual = handler.getClass()__			if (HandlerMethod.class.isInstance(handler)) {_				actual = ((HandlerMethod) handler).getBeanType()__			}_			assertEquals("Handler type", type, ClassUtils.getUserClass(actual))__		}__	};assert,the,type,of,the,handler,that,processed,the,request;public,result,matcher,handler,type,final,class,type,return,result,object,handler,result,get,handler,assert,true,no,handler,handler,null,class,actual,handler,get,class,if,handler,method,class,is,instance,handler,actual,handler,method,handler,get,bean,type,assert,equals,handler,type,type,class,utils,get,user,class,actual
HandlerResultMatchers -> public ResultMatcher handlerType(final Class<?> type);1493929656;Assert the type of the handler that processed the request.;public ResultMatcher handlerType(final Class<?> type) {_		return result -> {_			Object handler = result.getHandler()__			assertTrue("No handler", handler != null)__			Class<?> actual = handler.getClass()__			if (HandlerMethod.class.isInstance(handler)) {_				actual = ((HandlerMethod) handler).getBeanType()__			}_			assertEquals("Handler type", type, ClassUtils.getUserClass(actual))__		}__	};assert,the,type,of,the,handler,that,processed,the,request;public,result,matcher,handler,type,final,class,type,return,result,object,handler,result,get,handler,assert,true,no,handler,handler,null,class,actual,handler,get,class,if,handler,method,class,is,instance,handler,actual,handler,method,handler,get,bean,type,assert,equals,handler,type,type,class,utils,get,user,class,actual
HandlerResultMatchers -> public ResultMatcher handlerType(final Class<?> type);1496955179;Assert the type of the handler that processed the request.;public ResultMatcher handlerType(final Class<?> type) {_		return result -> {_			Object handler = result.getHandler()__			assertTrue("No handler", handler != null)__			if (handler != null) {_				Class<?> actual = handler.getClass()__				if (HandlerMethod.class.isInstance(handler)) {_					actual = ((HandlerMethod) handler).getBeanType()__				}_				assertEquals("Handler type", type, ClassUtils.getUserClass(actual))__			}_		}__	};assert,the,type,of,the,handler,that,processed,the,request;public,result,matcher,handler,type,final,class,type,return,result,object,handler,result,get,handler,assert,true,no,handler,handler,null,if,handler,null,class,actual,handler,get,class,if,handler,method,class,is,instance,handler,actual,handler,method,handler,get,bean,type,assert,equals,handler,type,type,class,utils,get,user,class,actual
HandlerResultMatchers -> public ResultMatcher handlerType(final Class<?> type);1530174524;Assert the type of the handler that processed the request.;public ResultMatcher handlerType(final Class<?> type) {_		return result -> {_			Object handler = result.getHandler()__			assertTrue("No handler", handler != null)__			if (handler != null) {_				Class<?> actual = handler.getClass()__				if (HandlerMethod.class.isInstance(handler)) {_					actual = ((HandlerMethod) handler).getBeanType()__				}_				assertEquals("Handler type", type, ClassUtils.getUserClass(actual))__			}_		}__	};assert,the,type,of,the,handler,that,processed,the,request;public,result,matcher,handler,type,final,class,type,return,result,object,handler,result,get,handler,assert,true,no,handler,handler,null,if,handler,null,class,actual,handler,get,class,if,handler,method,class,is,instance,handler,actual,handler,method,handler,get,bean,type,assert,equals,handler,type,type,class,utils,get,user,class,actual
HandlerResultMatchers -> public ResultMatcher handlerType(final Class<?> type);1530174524;Assert the type of the handler that processed the request.;public ResultMatcher handlerType(final Class<?> type) {_		return result -> {_			Object handler = result.getHandler()__			assertTrue("No handler", handler != null)__			if (handler != null) {_				Class<?> actual = handler.getClass()__				if (HandlerMethod.class.isInstance(handler)) {_					actual = ((HandlerMethod) handler).getBeanType()__				}_				assertEquals("Handler type", type, ClassUtils.getUserClass(actual))__			}_		}__	};assert,the,type,of,the,handler,that,processed,the,request;public,result,matcher,handler,type,final,class,type,return,result,object,handler,result,get,handler,assert,true,no,handler,handler,null,if,handler,null,class,actual,handler,get,class,if,handler,method,class,is,instance,handler,actual,handler,method,handler,get,bean,type,assert,equals,handler,type,type,class,utils,get,user,class,actual
HandlerResultMatchers -> protected HandlerResultMatchers();1383669853;Protected constructor._Use {@link MockMvcResultMatchers#handler()}.;protected HandlerResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,handler;protected,handler,result,matchers
HandlerResultMatchers -> protected HandlerResultMatchers();1413848647;Protected constructor._Use {@link MockMvcResultMatchers#handler()}.;protected HandlerResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,handler;protected,handler,result,matchers
HandlerResultMatchers -> protected HandlerResultMatchers();1427238287;Protected constructor._Use {@link MockMvcResultMatchers#handler()}.;protected HandlerResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,handler;protected,handler,result,matchers
HandlerResultMatchers -> protected HandlerResultMatchers();1437424890;Protected constructor._Use {@link MockMvcResultMatchers#handler()}.;protected HandlerResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,handler;protected,handler,result,matchers
HandlerResultMatchers -> protected HandlerResultMatchers();1452879840;Protected constructor._Use {@link MockMvcResultMatchers#handler()}.;protected HandlerResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,handler;protected,handler,result,matchers
HandlerResultMatchers -> protected HandlerResultMatchers();1452879840;Protected constructor._Use {@link MockMvcResultMatchers#handler()}.;protected HandlerResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,handler;protected,handler,result,matchers
HandlerResultMatchers -> protected HandlerResultMatchers();1465308822;Protected constructor._Use {@link MockMvcResultMatchers#handler()}.;protected HandlerResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,handler;protected,handler,result,matchers
HandlerResultMatchers -> protected HandlerResultMatchers();1465309490;Protected constructor._Use {@link MockMvcResultMatchers#handler()}.;protected HandlerResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,handler;protected,handler,result,matchers
HandlerResultMatchers -> protected HandlerResultMatchers();1493235170;Protected constructor._Use {@link MockMvcResultMatchers#handler()}.;protected HandlerResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,handler;protected,handler,result,matchers
HandlerResultMatchers -> protected HandlerResultMatchers();1493929656;Protected constructor._Use {@link MockMvcResultMatchers#handler()}.;protected HandlerResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,handler;protected,handler,result,matchers
HandlerResultMatchers -> protected HandlerResultMatchers();1496955179;Protected constructor._Use {@link MockMvcResultMatchers#handler()}.;protected HandlerResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,handler;protected,handler,result,matchers
HandlerResultMatchers -> protected HandlerResultMatchers();1530174524;Protected constructor._Use {@link MockMvcResultMatchers#handler()}.;protected HandlerResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,handler;protected,handler,result,matchers
HandlerResultMatchers -> protected HandlerResultMatchers();1530174524;Protected constructor._Use {@link MockMvcResultMatchers#handler()}.;protected HandlerResultMatchers() {_	};protected,constructor,use,link,mock,mvc,result,matchers,handler;protected,handler,result,matchers
