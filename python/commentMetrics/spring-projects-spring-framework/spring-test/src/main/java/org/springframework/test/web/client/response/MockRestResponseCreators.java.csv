commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * {@code ResponseCreator} for a 200 response (OK).  */ ;/**  * {@code ResponseCreator} for a 200 response (OK).  */ public static DefaultResponseCreator withSuccess() {     return new DefaultResponseCreator(HttpStatus.OK). }
true;public,static;2;4;/**  * {@code ResponseCreator} for a 200 response (OK) with String body.  * @param body the response body, a "UTF-8" string  * @param contentType the type of the content (may be {@code null})  */ ;/**  * {@code ResponseCreator} for a 200 response (OK) with String body.  * @param body the response body, a "UTF-8" string  * @param contentType the type of the content (may be {@code null})  */ public static DefaultResponseCreator withSuccess(String body, @Nullable MediaType contentType) {     DefaultResponseCreator creator = new DefaultResponseCreator(HttpStatus.OK).body(body).     return (contentType != null ? creator.contentType(contentType) : creator). }
true;public,static;2;4;/**  * {@code ResponseCreator} for a 200 response (OK) with byte[] body.  * @param body the response body  * @param contentType the type of the content (may be {@code null})  */ ;/**  * {@code ResponseCreator} for a 200 response (OK) with byte[] body.  * @param body the response body  * @param contentType the type of the content (may be {@code null})  */ public static DefaultResponseCreator withSuccess(byte[] body, @Nullable MediaType contentType) {     DefaultResponseCreator creator = new DefaultResponseCreator(HttpStatus.OK).body(body).     return (contentType != null ? creator.contentType(contentType) : creator). }
true;public,static;2;4;/**  * {@code ResponseCreator} for a 200 response (OK) content with {@link Resource}-based body.  * @param body the response body  * @param contentType the type of the content (may be {@code null})  */ ;/**  * {@code ResponseCreator} for a 200 response (OK) content with {@link Resource}-based body.  * @param body the response body  * @param contentType the type of the content (may be {@code null})  */ public static DefaultResponseCreator withSuccess(Resource body, @Nullable MediaType contentType) {     DefaultResponseCreator creator = new DefaultResponseCreator(HttpStatus.OK).body(body).     return (contentType != null ? creator.contentType(contentType) : creator). }
true;public,static;1;3;/**  * {@code ResponseCreator} for a 201 response (CREATED) with a 'Location' header.  * @param location the value for the {@code Location} header  */ ;/**  * {@code ResponseCreator} for a 201 response (CREATED) with a 'Location' header.  * @param location the value for the {@code Location} header  */ public static DefaultResponseCreator withCreatedEntity(URI location) {     return new DefaultResponseCreator(HttpStatus.CREATED).location(location). }
true;public,static;0;3;/**  * {@code ResponseCreator} for a 204 response (NO_CONTENT).  */ ;/**  * {@code ResponseCreator} for a 204 response (NO_CONTENT).  */ public static DefaultResponseCreator withNoContent() {     return new DefaultResponseCreator(HttpStatus.NO_CONTENT). }
true;public,static;0;3;/**  * {@code ResponseCreator} for a 400 response (BAD_REQUEST).  */ ;/**  * {@code ResponseCreator} for a 400 response (BAD_REQUEST).  */ public static DefaultResponseCreator withBadRequest() {     return new DefaultResponseCreator(HttpStatus.BAD_REQUEST). }
true;public,static;0;3;/**  * {@code ResponseCreator} for a 401 response (UNAUTHORIZED).  */ ;/**  * {@code ResponseCreator} for a 401 response (UNAUTHORIZED).  */ public static DefaultResponseCreator withUnauthorizedRequest() {     return new DefaultResponseCreator(HttpStatus.UNAUTHORIZED). }
true;public,static;0;3;/**  * {@code ResponseCreator} for a 500 response (SERVER_ERROR).  */ ;/**  * {@code ResponseCreator} for a 500 response (SERVER_ERROR).  */ public static DefaultResponseCreator withServerError() {     return new DefaultResponseCreator(HttpStatus.INTERNAL_SERVER_ERROR). }
true;public,static;1;3;/**  * {@code ResponseCreator} with a specific HTTP status.  * @param status the response status  */ ;/**  * {@code ResponseCreator} with a specific HTTP status.  * @param status the response status  */ public static DefaultResponseCreator withStatus(HttpStatus status) {     return new DefaultResponseCreator(status). }
