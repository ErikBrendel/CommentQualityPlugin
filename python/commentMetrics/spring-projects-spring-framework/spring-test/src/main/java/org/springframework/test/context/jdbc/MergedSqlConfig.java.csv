commented;modifiers;parameterAmount;loc;comment;code
true;;0;3;/**  * @see SqlConfig#dataSource()  */ ;/**  * @see SqlConfig#dataSource()  */ String getDataSource() {     return this.dataSource. }
true;;0;3;/**  * @see SqlConfig#transactionManager()  */ ;/**  * @see SqlConfig#transactionManager()  */ String getTransactionManager() {     return this.transactionManager. }
true;;0;3;/**  * @see SqlConfig#transactionMode()  */ ;/**  * @see SqlConfig#transactionMode()  */ TransactionMode getTransactionMode() {     return this.transactionMode. }
true;;0;3;/**  * @see SqlConfig#encoding()  */ ;/**  * @see SqlConfig#encoding()  */ String getEncoding() {     return this.encoding. }
true;;0;3;/**  * @see SqlConfig#separator()  */ ;/**  * @see SqlConfig#separator()  */ String getSeparator() {     return this.separator. }
true;;0;3;/**  * @see SqlConfig#commentPrefix()  */ ;/**  * @see SqlConfig#commentPrefix()  */ String getCommentPrefix() {     return this.commentPrefix. }
true;;0;3;/**  * @see SqlConfig#blockCommentStartDelimiter()  */ ;/**  * @see SqlConfig#blockCommentStartDelimiter()  */ String getBlockCommentStartDelimiter() {     return this.blockCommentStartDelimiter. }
true;;0;3;/**  * @see SqlConfig#blockCommentEndDelimiter()  */ ;/**  * @see SqlConfig#blockCommentEndDelimiter()  */ String getBlockCommentEndDelimiter() {     return this.blockCommentEndDelimiter. }
true;;0;3;/**  * @see SqlConfig#errorMode()  */ ;/**  * @see SqlConfig#errorMode()  */ ErrorMode getErrorMode() {     return this.errorMode. }
true;public;0;14;/**  * Provide a String representation of the merged SQL script configuration.  */ ;/**  * Provide a String representation of the merged SQL script configuration.  */ @Override public String toString() {     return new ToStringCreator(this).append("dataSource", this.dataSource).append("transactionManager", this.transactionManager).append("transactionMode", this.transactionMode).append("encoding", this.encoding).append("separator", this.separator).append("commentPrefix", this.commentPrefix).append("blockCommentStartDelimiter", this.blockCommentStartDelimiter).append("blockCommentEndDelimiter", this.blockCommentEndDelimiter).append("errorMode", this.errorMode).toString(). }
false;private,static;4;9;;private static <E extends Enum<?>> E getEnum(AnnotationAttributes attributes, String attributeName, E inheritedOrDefaultValue, E defaultValue) {     E value = attributes.getEnum(attributeName).     if (value == inheritedOrDefaultValue) {         value = defaultValue.     }     return value. }
false;private,static;3;7;;private static String getString(AnnotationAttributes attributes, String attributeName, String defaultValue) {     String value = attributes.getString(attributeName).     if ("".equals(value)) {         value = defaultValue.     }     return value. }
