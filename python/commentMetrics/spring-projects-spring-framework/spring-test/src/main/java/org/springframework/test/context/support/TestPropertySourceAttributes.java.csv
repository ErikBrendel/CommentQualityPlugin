commented;modifiers;parameterAmount;loc;comment;code
true;;0;3;/**  * Get the {@linkplain Class class} that declared {@code @TestPropertySource}.  * @return the declaring class. never {@code null}  */ ;/**  * Get the {@linkplain Class class} that declared {@code @TestPropertySource}.  * @return the declaring class. never {@code null}  */ Class<?> getDeclaringClass() {     return this.declaringClass. }
true;;0;3;/**  * Get the resource locations that were declared via {@code @TestPropertySource}.  * <p>Note: The returned value may represent a <em>detected default</em>  * that does not match the original value declared via {@code @TestPropertySource}.  * @return the resource locations. potentially <em>empty</em>  * @see TestPropertySource#value  * @see TestPropertySource#locations  */ ;/**  * Get the resource locations that were declared via {@code @TestPropertySource}.  * <p>Note: The returned value may represent a <em>detected default</em>  * that does not match the original value declared via {@code @TestPropertySource}.  * @return the resource locations. potentially <em>empty</em>  * @see TestPropertySource#value  * @see TestPropertySource#locations  */ String[] getLocations() {     return this.locations. }
true;;0;3;/**  * Get the {@code inheritLocations} flag that was declared via {@code @TestPropertySource}.  * @return the {@code inheritLocations} flag  * @see TestPropertySource#inheritLocations  */ ;/**  * Get the {@code inheritLocations} flag that was declared via {@code @TestPropertySource}.  * @return the {@code inheritLocations} flag  * @see TestPropertySource#inheritLocations  */ boolean isInheritLocations() {     return this.inheritLocations. }
true;;0;4;/**  * Get the inlined properties that were declared via {@code @TestPropertySource}.  * @return the inlined properties. potentially {@code null} or <em>empty</em>  * @see TestPropertySource#properties  */ ;/**  * Get the inlined properties that were declared via {@code @TestPropertySource}.  * @return the inlined properties. potentially {@code null} or <em>empty</em>  * @see TestPropertySource#properties  */ @Nullable String[] getProperties() {     return this.properties. }
true;;0;3;/**  * Get the {@code inheritProperties} flag that was declared via {@code @TestPropertySource}.  * @return the {@code inheritProperties} flag  * @see TestPropertySource#inheritProperties  */ ;/**  * Get the {@code inheritProperties} flag that was declared via {@code @TestPropertySource}.  * @return the {@code inheritProperties} flag  * @see TestPropertySource#inheritProperties  */ boolean isInheritProperties() {     return this.inheritProperties. }
true;public;0;10;/**  * Provide a String representation of the {@code @TestPropertySource}  * attributes and declaring class.  */ ;/**  * Provide a String representation of the {@code @TestPropertySource}  * attributes and declaring class.  */ @Override public String toString() {     return //      new ToStringCreator(this).append("declaringClass", //      this.declaringClass.getName()).append("locations", //      ObjectUtils.nullSafeToString(this.locations)).append("inheritLocations", //      this.inheritLocations).append("properties", //      ObjectUtils.nullSafeToString(this.properties)).append("inheritProperties", //      this.inheritProperties).toString(). }
true;private,static;1;21;/**  * Detect a default properties file for the supplied class, as specified  * in the class-level Javadoc for {@link TestPropertySource}.  */ ;/**  * Detect a default properties file for the supplied class, as specified  * in the class-level Javadoc for {@link TestPropertySource}.  */ private static String detectDefaultPropertiesFile(Class<?> testClass) {     String resourcePath = ClassUtils.convertClassNameToResourcePath(testClass.getName()) + ".properties".     String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath.     ClassPathResource classPathResource = new ClassPathResource(resourcePath).     if (classPathResource.exists()) {         if (logger.isInfoEnabled()) {             logger.info(String.format("Detected default properties file \"%s\" for test class [%s]", prefixedResourcePath, testClass.getName())).         }         return prefixedResourcePath.     } else {         String msg = String.format("Could not detect default properties file for test [%s]: " + "%s does not exist. Either declare the 'locations' or 'properties' attributes " + "of @TestPropertySource or make the default properties file available.", testClass.getName(), classPathResource).         logger.error(msg).         throw new IllegalStateException(msg).     } }
