# id;timestamp;commentText;codeText;commentWords;codeWords
TestPropertySourceAttributes -> TestPropertySourceAttributes(Class<?> declaringClass, AnnotationAttributes annAttrs);1407967503;Create a new {@code TestPropertySourceAttributes} instance for the_supplied {@link AnnotationAttributes} (parsed from a_{@link TestPropertySource @TestPropertySource} annotation) and_the {@linkplain Class test class} that declared them, enforcing_configuration rules and detecting a default properties file if_necessary._@param declaringClass the class that declared {@code @TestPropertySource}_@param annAttrs the annotation attributes from which to retrieve the attributes;TestPropertySourceAttributes(Class<?> declaringClass, AnnotationAttributes annAttrs) {_		this(declaringClass, resolveLocations(declaringClass, annAttrs.getStringArray("locations"),_			annAttrs.getStringArray("value")), annAttrs.getBoolean("inheritLocations"),_			annAttrs.getStringArray("properties"), annAttrs.getBoolean("inheritProperties"))__	};create,a,new,code,test,property,source,attributes,instance,for,the,supplied,link,annotation,attributes,parsed,from,a,link,test,property,source,test,property,source,annotation,and,the,linkplain,class,test,class,that,declared,them,enforcing,configuration,rules,and,detecting,a,default,properties,file,if,necessary,param,declaring,class,the,class,that,declared,code,test,property,source,param,ann,attrs,the,annotation,attributes,from,which,to,retrieve,the,attributes;test,property,source,attributes,class,declaring,class,annotation,attributes,ann,attrs,this,declaring,class,resolve,locations,declaring,class,ann,attrs,get,string,array,locations,ann,attrs,get,string,array,value,ann,attrs,get,boolean,inherit,locations,ann,attrs,get,string,array,properties,ann,attrs,get,boolean,inherit,properties
TestPropertySourceAttributes -> TestPropertySourceAttributes(Class<?> declaringClass, AnnotationAttributes annAttrs);1413848647;Create a new {@code TestPropertySourceAttributes} instance for the_supplied {@link AnnotationAttributes} (parsed from a_{@link TestPropertySource @TestPropertySource} annotation) and_the {@linkplain Class test class} that declared them, enforcing_configuration rules and detecting a default properties file if_necessary._@param declaringClass the class that declared {@code @TestPropertySource}_@param annAttrs the annotation attributes from which to retrieve the attributes;TestPropertySourceAttributes(Class<?> declaringClass, AnnotationAttributes annAttrs) {_		this(declaringClass, resolveLocations(declaringClass, annAttrs.getStringArray("locations"),_			annAttrs.getStringArray("value")), annAttrs.getBoolean("inheritLocations"),_			annAttrs.getStringArray("properties"), annAttrs.getBoolean("inheritProperties"))__	};create,a,new,code,test,property,source,attributes,instance,for,the,supplied,link,annotation,attributes,parsed,from,a,link,test,property,source,test,property,source,annotation,and,the,linkplain,class,test,class,that,declared,them,enforcing,configuration,rules,and,detecting,a,default,properties,file,if,necessary,param,declaring,class,the,class,that,declared,code,test,property,source,param,ann,attrs,the,annotation,attributes,from,which,to,retrieve,the,attributes;test,property,source,attributes,class,declaring,class,annotation,attributes,ann,attrs,this,declaring,class,resolve,locations,declaring,class,ann,attrs,get,string,array,locations,ann,attrs,get,string,array,value,ann,attrs,get,boolean,inherit,locations,ann,attrs,get,string,array,properties,ann,attrs,get,boolean,inherit,properties
TestPropertySourceAttributes -> TestPropertySourceAttributes(Class<?> declaringClass, AnnotationAttributes annAttrs);1432246071;Create a new {@code TestPropertySourceAttributes} instance for the_supplied {@link AnnotationAttributes} (parsed from a_{@link TestPropertySource @TestPropertySource} annotation) and_the {@linkplain Class test class} that declared them, enforcing_configuration rules and detecting a default properties file if_necessary._@param declaringClass the class that declared {@code @TestPropertySource}_@param annAttrs the annotation attributes from which to retrieve the attributes;TestPropertySourceAttributes(Class<?> declaringClass, AnnotationAttributes annAttrs) {_		this(declaringClass, annAttrs.getStringArray("locations"), annAttrs.getBoolean("inheritLocations"),_			annAttrs.getStringArray("properties"), annAttrs.getBoolean("inheritProperties"))__	};create,a,new,code,test,property,source,attributes,instance,for,the,supplied,link,annotation,attributes,parsed,from,a,link,test,property,source,test,property,source,annotation,and,the,linkplain,class,test,class,that,declared,them,enforcing,configuration,rules,and,detecting,a,default,properties,file,if,necessary,param,declaring,class,the,class,that,declared,code,test,property,source,param,ann,attrs,the,annotation,attributes,from,which,to,retrieve,the,attributes;test,property,source,attributes,class,declaring,class,annotation,attributes,ann,attrs,this,declaring,class,ann,attrs,get,string,array,locations,ann,attrs,get,boolean,inherit,locations,ann,attrs,get,string,array,properties,ann,attrs,get,boolean,inherit,properties
TestPropertySourceAttributes -> String[] getLocations();1407967503;Get the resource locations that were declared via {@code @TestPropertySource}.__<p>Note: The returned value may represent a <em>detected default</em>_that does not match the original value declared via {@code @TestPropertySource}.__@return the resource locations_ potentially {@code null} or <em>empty</em>_@see TestPropertySource#value_@see TestPropertySource#locations_@see #setLocations(String[]);String[] getLocations() {_		return locations__	};get,the,resource,locations,that,were,declared,via,code,test,property,source,p,note,the,returned,value,may,represent,a,em,detected,default,em,that,does,not,match,the,original,value,declared,via,code,test,property,source,return,the,resource,locations,potentially,code,null,or,em,empty,em,see,test,property,source,value,see,test,property,source,locations,see,set,locations,string;string,get,locations,return,locations
TestPropertySourceAttributes -> String[] getLocations();1413848647;Get the resource locations that were declared via {@code @TestPropertySource}.__<p>Note: The returned value may represent a <em>detected default</em>_that does not match the original value declared via {@code @TestPropertySource}.__@return the resource locations_ potentially {@code null} or <em>empty</em>_@see TestPropertySource#value_@see TestPropertySource#locations_@see #setLocations(String[]);String[] getLocations() {_		return locations__	};get,the,resource,locations,that,were,declared,via,code,test,property,source,p,note,the,returned,value,may,represent,a,em,detected,default,em,that,does,not,match,the,original,value,declared,via,code,test,property,source,return,the,resource,locations,potentially,code,null,or,em,empty,em,see,test,property,source,value,see,test,property,source,locations,see,set,locations,string;string,get,locations,return,locations
TestPropertySourceAttributes -> String[] getLocations();1432246071;Get the resource locations that were declared via {@code @TestPropertySource}.__<p>Note: The returned value may represent a <em>detected default</em>_that does not match the original value declared via {@code @TestPropertySource}.__@return the resource locations_ potentially {@code null} or <em>empty</em>_@see TestPropertySource#value_@see TestPropertySource#locations_@see #setLocations(String[]);String[] getLocations() {_		return locations__	};get,the,resource,locations,that,were,declared,via,code,test,property,source,p,note,the,returned,value,may,represent,a,em,detected,default,em,that,does,not,match,the,original,value,declared,via,code,test,property,source,return,the,resource,locations,potentially,code,null,or,em,empty,em,see,test,property,source,value,see,test,property,source,locations,see,set,locations,string;string,get,locations,return,locations
TestPropertySourceAttributes -> String[] getLocations();1432856630;Get the resource locations that were declared via {@code @TestPropertySource}.__<p>Note: The returned value may represent a <em>detected default</em>_that does not match the original value declared via {@code @TestPropertySource}.__@return the resource locations_ potentially {@code null} or <em>empty</em>_@see TestPropertySource#value_@see TestPropertySource#locations_@see #setLocations(String[]);String[] getLocations() {_		return locations__	};get,the,resource,locations,that,were,declared,via,code,test,property,source,p,note,the,returned,value,may,represent,a,em,detected,default,em,that,does,not,match,the,original,value,declared,via,code,test,property,source,return,the,resource,locations,potentially,code,null,or,em,empty,em,see,test,property,source,value,see,test,property,source,locations,see,set,locations,string;string,get,locations,return,locations
TestPropertySourceAttributes -> String[] getLocations();1496955179;Get the resource locations that were declared via {@code @TestPropertySource}._<p>Note: The returned value may represent a <em>detected default</em>_that does not match the original value declared via {@code @TestPropertySource}._@return the resource locations_ potentially <em>empty</em>_@see TestPropertySource#value_@see TestPropertySource#locations;String[] getLocations() {_		return this.locations__	};get,the,resource,locations,that,were,declared,via,code,test,property,source,p,note,the,returned,value,may,represent,a,em,detected,default,em,that,does,not,match,the,original,value,declared,via,code,test,property,source,return,the,resource,locations,potentially,em,empty,em,see,test,property,source,value,see,test,property,source,locations;string,get,locations,return,this,locations
TestPropertySourceAttributes -> String[] getLocations();1530174524;Get the resource locations that were declared via {@code @TestPropertySource}._<p>Note: The returned value may represent a <em>detected default</em>_that does not match the original value declared via {@code @TestPropertySource}._@return the resource locations_ potentially <em>empty</em>_@see TestPropertySource#value_@see TestPropertySource#locations;String[] getLocations() {_		return this.locations__	};get,the,resource,locations,that,were,declared,via,code,test,property,source,p,note,the,returned,value,may,represent,a,em,detected,default,em,that,does,not,match,the,original,value,declared,via,code,test,property,source,return,the,resource,locations,potentially,em,empty,em,see,test,property,source,value,see,test,property,source,locations;string,get,locations,return,this,locations
TestPropertySourceAttributes -> boolean isInheritProperties();1407967503;Get the {@code inheritProperties} flag that was declared via {@code @TestPropertySource}.__@return the {@code inheritProperties} flag_@see TestPropertySource#inheritProperties;boolean isInheritProperties() {_		return this.inheritProperties__	};get,the,code,inherit,properties,flag,that,was,declared,via,code,test,property,source,return,the,code,inherit,properties,flag,see,test,property,source,inherit,properties;boolean,is,inherit,properties,return,this,inherit,properties
TestPropertySourceAttributes -> boolean isInheritProperties();1413848647;Get the {@code inheritProperties} flag that was declared via {@code @TestPropertySource}.__@return the {@code inheritProperties} flag_@see TestPropertySource#inheritProperties;boolean isInheritProperties() {_		return this.inheritProperties__	};get,the,code,inherit,properties,flag,that,was,declared,via,code,test,property,source,return,the,code,inherit,properties,flag,see,test,property,source,inherit,properties;boolean,is,inherit,properties,return,this,inherit,properties
TestPropertySourceAttributes -> boolean isInheritProperties();1432246071;Get the {@code inheritProperties} flag that was declared via {@code @TestPropertySource}.__@return the {@code inheritProperties} flag_@see TestPropertySource#inheritProperties;boolean isInheritProperties() {_		return this.inheritProperties__	};get,the,code,inherit,properties,flag,that,was,declared,via,code,test,property,source,return,the,code,inherit,properties,flag,see,test,property,source,inherit,properties;boolean,is,inherit,properties,return,this,inherit,properties
TestPropertySourceAttributes -> boolean isInheritProperties();1432856630;Get the {@code inheritProperties} flag that was declared via {@code @TestPropertySource}.__@return the {@code inheritProperties} flag_@see TestPropertySource#inheritProperties;boolean isInheritProperties() {_		return this.inheritProperties__	};get,the,code,inherit,properties,flag,that,was,declared,via,code,test,property,source,return,the,code,inherit,properties,flag,see,test,property,source,inherit,properties;boolean,is,inherit,properties,return,this,inherit,properties
TestPropertySourceAttributes -> boolean isInheritProperties();1495868221;Get the {@code inheritProperties} flag that was declared via {@code @TestPropertySource}.__@return the {@code inheritProperties} flag_@see TestPropertySource#inheritProperties;boolean isInheritProperties() {_		return this.inheritProperties__	};get,the,code,inherit,properties,flag,that,was,declared,via,code,test,property,source,return,the,code,inherit,properties,flag,see,test,property,source,inherit,properties;boolean,is,inherit,properties,return,this,inherit,properties
TestPropertySourceAttributes -> boolean isInheritProperties();1496955179;Get the {@code inheritProperties} flag that was declared via {@code @TestPropertySource}._@return the {@code inheritProperties} flag_@see TestPropertySource#inheritProperties;boolean isInheritProperties() {_		return this.inheritProperties__	};get,the,code,inherit,properties,flag,that,was,declared,via,code,test,property,source,return,the,code,inherit,properties,flag,see,test,property,source,inherit,properties;boolean,is,inherit,properties,return,this,inherit,properties
TestPropertySourceAttributes -> boolean isInheritProperties();1530174524;Get the {@code inheritProperties} flag that was declared via {@code @TestPropertySource}._@return the {@code inheritProperties} flag_@see TestPropertySource#inheritProperties;boolean isInheritProperties() {_		return this.inheritProperties__	};get,the,code,inherit,properties,flag,that,was,declared,via,code,test,property,source,return,the,code,inherit,properties,flag,see,test,property,source,inherit,properties;boolean,is,inherit,properties,return,this,inherit,properties
TestPropertySourceAttributes -> private static String[] resolveLocations(Class<?> declaringClass, String[] locations, String[] value);1407967503;Resolve resource locations from the supplied {@code locations} and_{@code value} arrays, which correspond to attributes of the same names in_the {@link TestPropertySource} annotation.__@throws IllegalStateException if both the locations and value attributes have been declared;private static String[] resolveLocations(Class<?> declaringClass, String[] locations, String[] value) {_		Assert.notNull(declaringClass, "declaringClass must not be null")___		if (!ObjectUtils.isEmpty(value) && !ObjectUtils.isEmpty(locations)) {_			String msg = String.format("Class [%s] has been configured with @TestPropertySource's 'value' [%s] "_					+ "and 'locations' [%s] attributes. Only one declaration of resource "_					+ "locations is permitted per @TestPropertySource annotation.", declaringClass.getName(),_				ObjectUtils.nullSafeToString(value), ObjectUtils.nullSafeToString(locations))__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (!ObjectUtils.isEmpty(value)) {_			locations = value__		}__		return locations__	};resolve,resource,locations,from,the,supplied,code,locations,and,code,value,arrays,which,correspond,to,attributes,of,the,same,names,in,the,link,test,property,source,annotation,throws,illegal,state,exception,if,both,the,locations,and,value,attributes,have,been,declared;private,static,string,resolve,locations,class,declaring,class,string,locations,string,value,assert,not,null,declaring,class,declaring,class,must,not,be,null,if,object,utils,is,empty,value,object,utils,is,empty,locations,string,msg,string,format,class,s,has,been,configured,with,test,property,source,s,value,s,and,locations,s,attributes,only,one,declaration,of,resource,locations,is,permitted,per,test,property,source,annotation,declaring,class,get,name,object,utils,null,safe,to,string,value,object,utils,null,safe,to,string,locations,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,object,utils,is,empty,value,locations,value,return,locations
TestPropertySourceAttributes -> private static String[] resolveLocations(Class<?> declaringClass, String[] locations, String[] value);1413848647;Resolve resource locations from the supplied {@code locations} and_{@code value} arrays, which correspond to attributes of the same names in_the {@link TestPropertySource} annotation.__@throws IllegalStateException if both the locations and value attributes have been declared;private static String[] resolveLocations(Class<?> declaringClass, String[] locations, String[] value) {_		Assert.notNull(declaringClass, "declaringClass must not be null")___		if (!ObjectUtils.isEmpty(value) && !ObjectUtils.isEmpty(locations)) {_			String msg = String.format("Class [%s] has been configured with @TestPropertySource's 'value' [%s] "_					+ "and 'locations' [%s] attributes. Only one declaration of resource "_					+ "locations is permitted per @TestPropertySource annotation.", declaringClass.getName(),_				ObjectUtils.nullSafeToString(value), ObjectUtils.nullSafeToString(locations))__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (!ObjectUtils.isEmpty(value)) {_			locations = value__		}__		return locations__	};resolve,resource,locations,from,the,supplied,code,locations,and,code,value,arrays,which,correspond,to,attributes,of,the,same,names,in,the,link,test,property,source,annotation,throws,illegal,state,exception,if,both,the,locations,and,value,attributes,have,been,declared;private,static,string,resolve,locations,class,declaring,class,string,locations,string,value,assert,not,null,declaring,class,declaring,class,must,not,be,null,if,object,utils,is,empty,value,object,utils,is,empty,locations,string,msg,string,format,class,s,has,been,configured,with,test,property,source,s,value,s,and,locations,s,attributes,only,one,declaration,of,resource,locations,is,permitted,per,test,property,source,annotation,declaring,class,get,name,object,utils,null,safe,to,string,value,object,utils,null,safe,to,string,locations,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,object,utils,is,empty,value,locations,value,return,locations
TestPropertySourceAttributes -> @Override 	public String toString();1407967503;Provide a String representation of the {@code @TestPropertySource}_attributes and declaring class.;@Override_	public String toString() {_		return new ToStringCreator(this)_		.append("declaringClass", declaringClass.getName())_		.append("locations", ObjectUtils.nullSafeToString(locations))_		.append("inheritLocations", inheritLocations)_		.append("properties", ObjectUtils.nullSafeToString(properties))_		.append("inheritProperties", inheritProperties)_		.toString()__	};provide,a,string,representation,of,the,code,test,property,source,attributes,and,declaring,class;override,public,string,to,string,return,new,to,string,creator,this,append,declaring,class,declaring,class,get,name,append,locations,object,utils,null,safe,to,string,locations,append,inherit,locations,inherit,locations,append,properties,object,utils,null,safe,to,string,properties,append,inherit,properties,inherit,properties,to,string
TestPropertySourceAttributes -> @Override 	public String toString();1413848647;Provide a String representation of the {@code @TestPropertySource}_attributes and declaring class.;@Override_	public String toString() {_		return new ToStringCreator(this)_		.append("declaringClass", declaringClass.getName())_		.append("locations", ObjectUtils.nullSafeToString(locations))_		.append("inheritLocations", inheritLocations)_		.append("properties", ObjectUtils.nullSafeToString(properties))_		.append("inheritProperties", inheritProperties)_		.toString()__	};provide,a,string,representation,of,the,code,test,property,source,attributes,and,declaring,class;override,public,string,to,string,return,new,to,string,creator,this,append,declaring,class,declaring,class,get,name,append,locations,object,utils,null,safe,to,string,locations,append,inherit,locations,inherit,locations,append,properties,object,utils,null,safe,to,string,properties,append,inherit,properties,inherit,properties,to,string
TestPropertySourceAttributes -> @Override 	public String toString();1432246071;Provide a String representation of the {@code @TestPropertySource}_attributes and declaring class.;@Override_	public String toString() {_		return new ToStringCreator(this)_		.append("declaringClass", declaringClass.getName())_		.append("locations", ObjectUtils.nullSafeToString(locations))_		.append("inheritLocations", inheritLocations)_		.append("properties", ObjectUtils.nullSafeToString(properties))_		.append("inheritProperties", inheritProperties)_		.toString()__	};provide,a,string,representation,of,the,code,test,property,source,attributes,and,declaring,class;override,public,string,to,string,return,new,to,string,creator,this,append,declaring,class,declaring,class,get,name,append,locations,object,utils,null,safe,to,string,locations,append,inherit,locations,inherit,locations,append,properties,object,utils,null,safe,to,string,properties,append,inherit,properties,inherit,properties,to,string
TestPropertySourceAttributes -> @Override 	public String toString();1432856630;Provide a String representation of the {@code @TestPropertySource}_attributes and declaring class.;@Override_	public String toString() {_		return new ToStringCreator(this)_		.append("declaringClass", declaringClass.getName())_		.append("locations", ObjectUtils.nullSafeToString(locations))_		.append("inheritLocations", inheritLocations)_		.append("properties", ObjectUtils.nullSafeToString(properties))_		.append("inheritProperties", inheritProperties)_		.toString()__	};provide,a,string,representation,of,the,code,test,property,source,attributes,and,declaring,class;override,public,string,to,string,return,new,to,string,creator,this,append,declaring,class,declaring,class,get,name,append,locations,object,utils,null,safe,to,string,locations,append,inherit,locations,inherit,locations,append,properties,object,utils,null,safe,to,string,properties,append,inherit,properties,inherit,properties,to,string
TestPropertySourceAttributes -> @Override 	public String toString();1495868221;Provide a String representation of the {@code @TestPropertySource}_attributes and declaring class.;@Override_	public String toString() {_		return new ToStringCreator(this)_		.append("declaringClass", declaringClass.getName())_		.append("locations", ObjectUtils.nullSafeToString(locations))_		.append("inheritLocations", inheritLocations)_		.append("properties", ObjectUtils.nullSafeToString(properties))_		.append("inheritProperties", inheritProperties)_		.toString()__	};provide,a,string,representation,of,the,code,test,property,source,attributes,and,declaring,class;override,public,string,to,string,return,new,to,string,creator,this,append,declaring,class,declaring,class,get,name,append,locations,object,utils,null,safe,to,string,locations,append,inherit,locations,inherit,locations,append,properties,object,utils,null,safe,to,string,properties,append,inherit,properties,inherit,properties,to,string
TestPropertySourceAttributes -> @Override 	public String toString();1496955179;Provide a String representation of the {@code @TestPropertySource}_attributes and declaring class.;@Override_	public String toString() {_		return new ToStringCreator(this)_		.append("declaringClass", declaringClass.getName())_		.append("locations", ObjectUtils.nullSafeToString(locations))_		.append("inheritLocations", inheritLocations)_		.append("properties", ObjectUtils.nullSafeToString(properties))_		.append("inheritProperties", inheritProperties)_		.toString()__	};provide,a,string,representation,of,the,code,test,property,source,attributes,and,declaring,class;override,public,string,to,string,return,new,to,string,creator,this,append,declaring,class,declaring,class,get,name,append,locations,object,utils,null,safe,to,string,locations,append,inherit,locations,inherit,locations,append,properties,object,utils,null,safe,to,string,properties,append,inherit,properties,inherit,properties,to,string
TestPropertySourceAttributes -> @Override 	public String toString();1530174524;Provide a String representation of the {@code @TestPropertySource}_attributes and declaring class.;@Override_	public String toString() {_		return new ToStringCreator(this)_		.append("declaringClass", this.declaringClass.getName())_		.append("locations", ObjectUtils.nullSafeToString(this.locations))_		.append("inheritLocations", this.inheritLocations)_		.append("properties", ObjectUtils.nullSafeToString(this.properties))_		.append("inheritProperties", this.inheritProperties)_		.toString()__	};provide,a,string,representation,of,the,code,test,property,source,attributes,and,declaring,class;override,public,string,to,string,return,new,to,string,creator,this,append,declaring,class,this,declaring,class,get,name,append,locations,object,utils,null,safe,to,string,this,locations,append,inherit,locations,this,inherit,locations,append,properties,object,utils,null,safe,to,string,this,properties,append,inherit,properties,this,inherit,properties,to,string
TestPropertySourceAttributes -> @Nullable 	String[] getProperties();1495868221;Get the inlined properties that were declared via {@code @TestPropertySource}.__@return the inlined properties_ potentially {@code null} or <em>empty</em>_@see TestPropertySource#properties;@Nullable_	String[] getProperties() {_		return this.properties__	};get,the,inlined,properties,that,were,declared,via,code,test,property,source,return,the,inlined,properties,potentially,code,null,or,em,empty,em,see,test,property,source,properties;nullable,string,get,properties,return,this,properties
TestPropertySourceAttributes -> @Nullable 	String[] getProperties();1496955179;Get the inlined properties that were declared via {@code @TestPropertySource}._@return the inlined properties_ potentially {@code null} or <em>empty</em>_@see TestPropertySource#properties;@Nullable_	String[] getProperties() {_		return this.properties__	};get,the,inlined,properties,that,were,declared,via,code,test,property,source,return,the,inlined,properties,potentially,code,null,or,em,empty,em,see,test,property,source,properties;nullable,string,get,properties,return,this,properties
TestPropertySourceAttributes -> @Nullable 	String[] getProperties();1530174524;Get the inlined properties that were declared via {@code @TestPropertySource}._@return the inlined properties_ potentially {@code null} or <em>empty</em>_@see TestPropertySource#properties;@Nullable_	String[] getProperties() {_		return this.properties__	};get,the,inlined,properties,that,were,declared,via,code,test,property,source,return,the,inlined,properties,potentially,code,null,or,em,empty,em,see,test,property,source,properties;nullable,string,get,properties,return,this,properties
TestPropertySourceAttributes -> private static String detectDefaultPropertiesFile(Class<?> testClass);1407967503;Detect a default properties file for the supplied class, as specified_in the class-level Javadoc for {@link TestPropertySource}.;private static String detectDefaultPropertiesFile(Class<?> testClass) {_		String resourcePath = ClassUtils.convertClassNameToResourcePath(testClass.getName()) + ".properties"__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default properties file \"%s\" for test class [%s]",_					prefixedResourcePath, testClass.getName()))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default properties file for test [%s]: "_					+ "%s does not exist. Either declare the 'locations' or 'properties' attributes "_					+ "of @TestPropertySource or make the default properties file available.", testClass.getName(),_				classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,properties,file,for,the,supplied,class,as,specified,in,the,class,level,javadoc,for,link,test,property,source;private,static,string,detect,default,properties,file,class,test,class,string,resource,path,class,utils,convert,class,name,to,resource,path,test,class,get,name,properties,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,properties,file,s,for,test,class,s,prefixed,resource,path,test,class,get,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,properties,file,for,test,s,s,does,not,exist,either,declare,the,locations,or,properties,attributes,of,test,property,source,or,make,the,default,properties,file,available,test,class,get,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
TestPropertySourceAttributes -> private static String detectDefaultPropertiesFile(Class<?> testClass);1413848647;Detect a default properties file for the supplied class, as specified_in the class-level Javadoc for {@link TestPropertySource}.;private static String detectDefaultPropertiesFile(Class<?> testClass) {_		String resourcePath = ClassUtils.convertClassNameToResourcePath(testClass.getName()) + ".properties"__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default properties file \"%s\" for test class [%s]",_					prefixedResourcePath, testClass.getName()))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default properties file for test [%s]: "_					+ "%s does not exist. Either declare the 'locations' or 'properties' attributes "_					+ "of @TestPropertySource or make the default properties file available.", testClass.getName(),_				classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,properties,file,for,the,supplied,class,as,specified,in,the,class,level,javadoc,for,link,test,property,source;private,static,string,detect,default,properties,file,class,test,class,string,resource,path,class,utils,convert,class,name,to,resource,path,test,class,get,name,properties,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,properties,file,s,for,test,class,s,prefixed,resource,path,test,class,get,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,properties,file,for,test,s,s,does,not,exist,either,declare,the,locations,or,properties,attributes,of,test,property,source,or,make,the,default,properties,file,available,test,class,get,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
TestPropertySourceAttributes -> private static String detectDefaultPropertiesFile(Class<?> testClass);1432246071;Detect a default properties file for the supplied class, as specified_in the class-level Javadoc for {@link TestPropertySource}.;private static String detectDefaultPropertiesFile(Class<?> testClass) {_		String resourcePath = ClassUtils.convertClassNameToResourcePath(testClass.getName()) + ".properties"__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default properties file \"%s\" for test class [%s]",_					prefixedResourcePath, testClass.getName()))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default properties file for test [%s]: "_					+ "%s does not exist. Either declare the 'locations' or 'properties' attributes "_					+ "of @TestPropertySource or make the default properties file available.", testClass.getName(),_				classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,properties,file,for,the,supplied,class,as,specified,in,the,class,level,javadoc,for,link,test,property,source;private,static,string,detect,default,properties,file,class,test,class,string,resource,path,class,utils,convert,class,name,to,resource,path,test,class,get,name,properties,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,properties,file,s,for,test,class,s,prefixed,resource,path,test,class,get,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,properties,file,for,test,s,s,does,not,exist,either,declare,the,locations,or,properties,attributes,of,test,property,source,or,make,the,default,properties,file,available,test,class,get,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
TestPropertySourceAttributes -> private static String detectDefaultPropertiesFile(Class<?> testClass);1432856630;Detect a default properties file for the supplied class, as specified_in the class-level Javadoc for {@link TestPropertySource}.;private static String detectDefaultPropertiesFile(Class<?> testClass) {_		String resourcePath = ClassUtils.convertClassNameToResourcePath(testClass.getName()) + ".properties"__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default properties file \"%s\" for test class [%s]",_					prefixedResourcePath, testClass.getName()))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default properties file for test [%s]: "_					+ "%s does not exist. Either declare the 'locations' or 'properties' attributes "_					+ "of @TestPropertySource or make the default properties file available.", testClass.getName(),_				classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,properties,file,for,the,supplied,class,as,specified,in,the,class,level,javadoc,for,link,test,property,source;private,static,string,detect,default,properties,file,class,test,class,string,resource,path,class,utils,convert,class,name,to,resource,path,test,class,get,name,properties,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,properties,file,s,for,test,class,s,prefixed,resource,path,test,class,get,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,properties,file,for,test,s,s,does,not,exist,either,declare,the,locations,or,properties,attributes,of,test,property,source,or,make,the,default,properties,file,available,test,class,get,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
TestPropertySourceAttributes -> private static String detectDefaultPropertiesFile(Class<?> testClass);1495868221;Detect a default properties file for the supplied class, as specified_in the class-level Javadoc for {@link TestPropertySource}.;private static String detectDefaultPropertiesFile(Class<?> testClass) {_		String resourcePath = ClassUtils.convertClassNameToResourcePath(testClass.getName()) + ".properties"__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default properties file \"%s\" for test class [%s]",_					prefixedResourcePath, testClass.getName()))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default properties file for test [%s]: "_					+ "%s does not exist. Either declare the 'locations' or 'properties' attributes "_					+ "of @TestPropertySource or make the default properties file available.", testClass.getName(),_				classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,properties,file,for,the,supplied,class,as,specified,in,the,class,level,javadoc,for,link,test,property,source;private,static,string,detect,default,properties,file,class,test,class,string,resource,path,class,utils,convert,class,name,to,resource,path,test,class,get,name,properties,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,properties,file,s,for,test,class,s,prefixed,resource,path,test,class,get,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,properties,file,for,test,s,s,does,not,exist,either,declare,the,locations,or,properties,attributes,of,test,property,source,or,make,the,default,properties,file,available,test,class,get,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
TestPropertySourceAttributes -> private static String detectDefaultPropertiesFile(Class<?> testClass);1496955179;Detect a default properties file for the supplied class, as specified_in the class-level Javadoc for {@link TestPropertySource}.;private static String detectDefaultPropertiesFile(Class<?> testClass) {_		String resourcePath = ClassUtils.convertClassNameToResourcePath(testClass.getName()) + ".properties"__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default properties file \"%s\" for test class [%s]",_					prefixedResourcePath, testClass.getName()))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default properties file for test [%s]: " +_					"%s does not exist. Either declare the 'locations' or 'properties' attributes " +_					"of @TestPropertySource or make the default properties file available.", testClass.getName(),_					classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,properties,file,for,the,supplied,class,as,specified,in,the,class,level,javadoc,for,link,test,property,source;private,static,string,detect,default,properties,file,class,test,class,string,resource,path,class,utils,convert,class,name,to,resource,path,test,class,get,name,properties,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,properties,file,s,for,test,class,s,prefixed,resource,path,test,class,get,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,properties,file,for,test,s,s,does,not,exist,either,declare,the,locations,or,properties,attributes,of,test,property,source,or,make,the,default,properties,file,available,test,class,get,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
TestPropertySourceAttributes -> private static String detectDefaultPropertiesFile(Class<?> testClass);1530174524;Detect a default properties file for the supplied class, as specified_in the class-level Javadoc for {@link TestPropertySource}.;private static String detectDefaultPropertiesFile(Class<?> testClass) {_		String resourcePath = ClassUtils.convertClassNameToResourcePath(testClass.getName()) + ".properties"__		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath__		ClassPathResource classPathResource = new ClassPathResource(resourcePath)___		if (classPathResource.exists()) {_			if (logger.isInfoEnabled()) {_				logger.info(String.format("Detected default properties file \"%s\" for test class [%s]",_					prefixedResourcePath, testClass.getName()))__			}_			return prefixedResourcePath__		}_		else {_			String msg = String.format("Could not detect default properties file for test [%s]: " +_					"%s does not exist. Either declare the 'locations' or 'properties' attributes " +_					"of @TestPropertySource or make the default properties file available.", testClass.getName(),_					classPathResource)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};detect,a,default,properties,file,for,the,supplied,class,as,specified,in,the,class,level,javadoc,for,link,test,property,source;private,static,string,detect,default,properties,file,class,test,class,string,resource,path,class,utils,convert,class,name,to,resource,path,test,class,get,name,properties,string,prefixed,resource,path,resource,utils,resource,path,class,path,resource,class,path,resource,new,class,path,resource,resource,path,if,class,path,resource,exists,if,logger,is,info,enabled,logger,info,string,format,detected,default,properties,file,s,for,test,class,s,prefixed,resource,path,test,class,get,name,return,prefixed,resource,path,else,string,msg,string,format,could,not,detect,default,properties,file,for,test,s,s,does,not,exist,either,declare,the,locations,or,properties,attributes,of,test,property,source,or,make,the,default,properties,file,available,test,class,get,name,class,path,resource,logger,error,msg,throw,new,illegal,state,exception,msg
TestPropertySourceAttributes -> String[] getProperties();1407967503;Get the inlined properties that were declared via {@code @TestPropertySource}.__@return the inlined properties_ potentially {@code null} or <em>empty</em>_@see TestPropertySource#properties;String[] getProperties() {_		return this.properties__	};get,the,inlined,properties,that,were,declared,via,code,test,property,source,return,the,inlined,properties,potentially,code,null,or,em,empty,em,see,test,property,source,properties;string,get,properties,return,this,properties
TestPropertySourceAttributes -> String[] getProperties();1413848647;Get the inlined properties that were declared via {@code @TestPropertySource}.__@return the inlined properties_ potentially {@code null} or <em>empty</em>_@see TestPropertySource#properties;String[] getProperties() {_		return this.properties__	};get,the,inlined,properties,that,were,declared,via,code,test,property,source,return,the,inlined,properties,potentially,code,null,or,em,empty,em,see,test,property,source,properties;string,get,properties,return,this,properties
TestPropertySourceAttributes -> String[] getProperties();1432246071;Get the inlined properties that were declared via {@code @TestPropertySource}.__@return the inlined properties_ potentially {@code null} or <em>empty</em>_@see TestPropertySource#properties;String[] getProperties() {_		return this.properties__	};get,the,inlined,properties,that,were,declared,via,code,test,property,source,return,the,inlined,properties,potentially,code,null,or,em,empty,em,see,test,property,source,properties;string,get,properties,return,this,properties
TestPropertySourceAttributes -> String[] getProperties();1432856630;Get the inlined properties that were declared via {@code @TestPropertySource}.__@return the inlined properties_ potentially {@code null} or <em>empty</em>_@see TestPropertySource#properties;String[] getProperties() {_		return this.properties__	};get,the,inlined,properties,that,were,declared,via,code,test,property,source,return,the,inlined,properties,potentially,code,null,or,em,empty,em,see,test,property,source,properties;string,get,properties,return,this,properties
TestPropertySourceAttributes -> boolean isInheritLocations();1407967503;Get the {@code inheritLocations} flag that was declared via {@code @TestPropertySource}.__@return the {@code inheritLocations} flag_@see TestPropertySource#inheritLocations;boolean isInheritLocations() {_		return inheritLocations__	};get,the,code,inherit,locations,flag,that,was,declared,via,code,test,property,source,return,the,code,inherit,locations,flag,see,test,property,source,inherit,locations;boolean,is,inherit,locations,return,inherit,locations
TestPropertySourceAttributes -> boolean isInheritLocations();1413848647;Get the {@code inheritLocations} flag that was declared via {@code @TestPropertySource}.__@return the {@code inheritLocations} flag_@see TestPropertySource#inheritLocations;boolean isInheritLocations() {_		return inheritLocations__	};get,the,code,inherit,locations,flag,that,was,declared,via,code,test,property,source,return,the,code,inherit,locations,flag,see,test,property,source,inherit,locations;boolean,is,inherit,locations,return,inherit,locations
TestPropertySourceAttributes -> boolean isInheritLocations();1432246071;Get the {@code inheritLocations} flag that was declared via {@code @TestPropertySource}.__@return the {@code inheritLocations} flag_@see TestPropertySource#inheritLocations;boolean isInheritLocations() {_		return inheritLocations__	};get,the,code,inherit,locations,flag,that,was,declared,via,code,test,property,source,return,the,code,inherit,locations,flag,see,test,property,source,inherit,locations;boolean,is,inherit,locations,return,inherit,locations
TestPropertySourceAttributes -> boolean isInheritLocations();1432856630;Get the {@code inheritLocations} flag that was declared via {@code @TestPropertySource}.__@return the {@code inheritLocations} flag_@see TestPropertySource#inheritLocations;boolean isInheritLocations() {_		return inheritLocations__	};get,the,code,inherit,locations,flag,that,was,declared,via,code,test,property,source,return,the,code,inherit,locations,flag,see,test,property,source,inherit,locations;boolean,is,inherit,locations,return,inherit,locations
TestPropertySourceAttributes -> boolean isInheritLocations();1495868221;Get the {@code inheritLocations} flag that was declared via {@code @TestPropertySource}.__@return the {@code inheritLocations} flag_@see TestPropertySource#inheritLocations;boolean isInheritLocations() {_		return inheritLocations__	};get,the,code,inherit,locations,flag,that,was,declared,via,code,test,property,source,return,the,code,inherit,locations,flag,see,test,property,source,inherit,locations;boolean,is,inherit,locations,return,inherit,locations
TestPropertySourceAttributes -> boolean isInheritLocations();1496955179;Get the {@code inheritLocations} flag that was declared via {@code @TestPropertySource}._@return the {@code inheritLocations} flag_@see TestPropertySource#inheritLocations;boolean isInheritLocations() {_		return this.inheritLocations__	};get,the,code,inherit,locations,flag,that,was,declared,via,code,test,property,source,return,the,code,inherit,locations,flag,see,test,property,source,inherit,locations;boolean,is,inherit,locations,return,this,inherit,locations
TestPropertySourceAttributes -> boolean isInheritLocations();1530174524;Get the {@code inheritLocations} flag that was declared via {@code @TestPropertySource}._@return the {@code inheritLocations} flag_@see TestPropertySource#inheritLocations;boolean isInheritLocations() {_		return this.inheritLocations__	};get,the,code,inherit,locations,flag,that,was,declared,via,code,test,property,source,return,the,code,inherit,locations,flag,see,test,property,source,inherit,locations;boolean,is,inherit,locations,return,this,inherit,locations
TestPropertySourceAttributes -> TestPropertySourceAttributes(Class<?> declaringClass, TestPropertySource testPropertySource);1432856630;Create a new {@code TestPropertySourceAttributes} instance for the_supplied {@link TestPropertySource @TestPropertySource} annotation and_the {@linkplain Class test class} that declared it, enforcing_configuration rules and detecting a default properties file if_necessary._@param declaringClass the class that declared {@code @TestPropertySource}_@param testPropertySource the annotation from which to retrieve the attributes_@since 4.2;TestPropertySourceAttributes(Class<?> declaringClass, TestPropertySource testPropertySource) {_		this(declaringClass, testPropertySource.locations(), testPropertySource.inheritLocations(),_			testPropertySource.properties(), testPropertySource.inheritProperties())__	};create,a,new,code,test,property,source,attributes,instance,for,the,supplied,link,test,property,source,test,property,source,annotation,and,the,linkplain,class,test,class,that,declared,it,enforcing,configuration,rules,and,detecting,a,default,properties,file,if,necessary,param,declaring,class,the,class,that,declared,code,test,property,source,param,test,property,source,the,annotation,from,which,to,retrieve,the,attributes,since,4,2;test,property,source,attributes,class,declaring,class,test,property,source,test,property,source,this,declaring,class,test,property,source,locations,test,property,source,inherit,locations,test,property,source,properties,test,property,source,inherit,properties
TestPropertySourceAttributes -> TestPropertySourceAttributes(Class<?> declaringClass, TestPropertySource testPropertySource);1495868221;Create a new {@code TestPropertySourceAttributes} instance for the_supplied {@link TestPropertySource @TestPropertySource} annotation and_the {@linkplain Class test class} that declared it, enforcing_configuration rules and detecting a default properties file if_necessary._@param declaringClass the class that declared {@code @TestPropertySource}_@param testPropertySource the annotation from which to retrieve the attributes_@since 4.2;TestPropertySourceAttributes(Class<?> declaringClass, TestPropertySource testPropertySource) {_		this(declaringClass, testPropertySource.locations(), testPropertySource.inheritLocations(),_			testPropertySource.properties(), testPropertySource.inheritProperties())__	};create,a,new,code,test,property,source,attributes,instance,for,the,supplied,link,test,property,source,test,property,source,annotation,and,the,linkplain,class,test,class,that,declared,it,enforcing,configuration,rules,and,detecting,a,default,properties,file,if,necessary,param,declaring,class,the,class,that,declared,code,test,property,source,param,test,property,source,the,annotation,from,which,to,retrieve,the,attributes,since,4,2;test,property,source,attributes,class,declaring,class,test,property,source,test,property,source,this,declaring,class,test,property,source,locations,test,property,source,inherit,locations,test,property,source,properties,test,property,source,inherit,properties
TestPropertySourceAttributes -> TestPropertySourceAttributes(Class<?> declaringClass, TestPropertySource testPropertySource);1496955179;Create a new {@code TestPropertySourceAttributes} instance for the_supplied {@link TestPropertySource @TestPropertySource} annotation and_the {@linkplain Class test class} that declared it, enforcing_configuration rules and detecting a default properties file if_necessary._@param declaringClass the class that declared {@code @TestPropertySource}_@param testPropertySource the annotation from which to retrieve the attributes_@since 4.2;TestPropertySourceAttributes(Class<?> declaringClass, TestPropertySource testPropertySource) {_		this(declaringClass, testPropertySource.locations(), testPropertySource.inheritLocations(),_			testPropertySource.properties(), testPropertySource.inheritProperties())__	};create,a,new,code,test,property,source,attributes,instance,for,the,supplied,link,test,property,source,test,property,source,annotation,and,the,linkplain,class,test,class,that,declared,it,enforcing,configuration,rules,and,detecting,a,default,properties,file,if,necessary,param,declaring,class,the,class,that,declared,code,test,property,source,param,test,property,source,the,annotation,from,which,to,retrieve,the,attributes,since,4,2;test,property,source,attributes,class,declaring,class,test,property,source,test,property,source,this,declaring,class,test,property,source,locations,test,property,source,inherit,locations,test,property,source,properties,test,property,source,inherit,properties
TestPropertySourceAttributes -> TestPropertySourceAttributes(Class<?> declaringClass, TestPropertySource testPropertySource);1530174524;Create a new {@code TestPropertySourceAttributes} instance for the_supplied {@link TestPropertySource @TestPropertySource} annotation and_the {@linkplain Class test class} that declared it, enforcing_configuration rules and detecting a default properties file if_necessary._@param declaringClass the class that declared {@code @TestPropertySource}_@param testPropertySource the annotation from which to retrieve the attributes_@since 4.2;TestPropertySourceAttributes(Class<?> declaringClass, TestPropertySource testPropertySource) {_		this(declaringClass, testPropertySource.locations(), testPropertySource.inheritLocations(),_			testPropertySource.properties(), testPropertySource.inheritProperties())__	};create,a,new,code,test,property,source,attributes,instance,for,the,supplied,link,test,property,source,test,property,source,annotation,and,the,linkplain,class,test,class,that,declared,it,enforcing,configuration,rules,and,detecting,a,default,properties,file,if,necessary,param,declaring,class,the,class,that,declared,code,test,property,source,param,test,property,source,the,annotation,from,which,to,retrieve,the,attributes,since,4,2;test,property,source,attributes,class,declaring,class,test,property,source,test,property,source,this,declaring,class,test,property,source,locations,test,property,source,inherit,locations,test,property,source,properties,test,property,source,inherit,properties
TestPropertySourceAttributes -> Class<?> getDeclaringClass();1407967503;Get the {@linkplain Class class} that declared {@code @TestPropertySource}.__@return the declaring class_ never {@code null};Class<?> getDeclaringClass() {_		return declaringClass__	};get,the,linkplain,class,class,that,declared,code,test,property,source,return,the,declaring,class,never,code,null;class,get,declaring,class,return,declaring,class
TestPropertySourceAttributes -> Class<?> getDeclaringClass();1413848647;Get the {@linkplain Class class} that declared {@code @TestPropertySource}.__@return the declaring class_ never {@code null};Class<?> getDeclaringClass() {_		return declaringClass__	};get,the,linkplain,class,class,that,declared,code,test,property,source,return,the,declaring,class,never,code,null;class,get,declaring,class,return,declaring,class
TestPropertySourceAttributes -> Class<?> getDeclaringClass();1432246071;Get the {@linkplain Class class} that declared {@code @TestPropertySource}.__@return the declaring class_ never {@code null};Class<?> getDeclaringClass() {_		return declaringClass__	};get,the,linkplain,class,class,that,declared,code,test,property,source,return,the,declaring,class,never,code,null;class,get,declaring,class,return,declaring,class
TestPropertySourceAttributes -> Class<?> getDeclaringClass();1432856630;Get the {@linkplain Class class} that declared {@code @TestPropertySource}.__@return the declaring class_ never {@code null};Class<?> getDeclaringClass() {_		return declaringClass__	};get,the,linkplain,class,class,that,declared,code,test,property,source,return,the,declaring,class,never,code,null;class,get,declaring,class,return,declaring,class
TestPropertySourceAttributes -> Class<?> getDeclaringClass();1495868221;Get the {@linkplain Class class} that declared {@code @TestPropertySource}.__@return the declaring class_ never {@code null};Class<?> getDeclaringClass() {_		return declaringClass__	};get,the,linkplain,class,class,that,declared,code,test,property,source,return,the,declaring,class,never,code,null;class,get,declaring,class,return,declaring,class
TestPropertySourceAttributes -> Class<?> getDeclaringClass();1496955179;Get the {@linkplain Class class} that declared {@code @TestPropertySource}._@return the declaring class_ never {@code null};Class<?> getDeclaringClass() {_		return this.declaringClass__	};get,the,linkplain,class,class,that,declared,code,test,property,source,return,the,declaring,class,never,code,null;class,get,declaring,class,return,this,declaring,class
TestPropertySourceAttributes -> Class<?> getDeclaringClass();1530174524;Get the {@linkplain Class class} that declared {@code @TestPropertySource}._@return the declaring class_ never {@code null};Class<?> getDeclaringClass() {_		return this.declaringClass__	};get,the,linkplain,class,class,that,declared,code,test,property,source,return,the,declaring,class,never,code,null;class,get,declaring,class,return,this,declaring,class
