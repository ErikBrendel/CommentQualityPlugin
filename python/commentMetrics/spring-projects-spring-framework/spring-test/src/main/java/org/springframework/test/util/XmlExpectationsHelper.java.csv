commented;modifiers;parameterAmount;loc;comment;code
true;public;2;4;/**  * Parse the content as {@link Node} and apply a {@link Matcher}.  */ ;/**  * Parse the content as {@link Node} and apply a {@link Matcher}.  */ public void assertNode(String content, Matcher<? super Node> matcher) throws Exception {     Document document = parseXmlString(content).     assertThat("Body content", document, matcher). }
false;private;1;7;;private Document parseXmlString(String xml) throws Exception {     DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance().     factory.setNamespaceAware(true).     DocumentBuilder documentBuilder = factory.newDocumentBuilder().     InputSource inputSource = new InputSource(new StringReader(xml)).     return documentBuilder.parse(inputSource). }
true;public;2;4;/**  * Parse the content as {@link DOMSource} and apply a {@link Matcher}.  * @see <a href="https://github.com/davidehringer/xml-matchers">xml-matchers</a>  */ ;/**  * Parse the content as {@link DOMSource} and apply a {@link Matcher}.  * @see <a href="https://github.com/davidehringer/xml-matchers">xml-matchers</a>  */ public void assertSource(String content, Matcher<? super Source> matcher) throws Exception {     Document document = parseXmlString(content).     assertThat("Body content", new DOMSource(document), matcher). }
true;public;2;6;/**  * Parse the expected and actual content strings as XML and assert that the  * two are "similar" -- i.e. they contain the same elements and attributes  * regardless of order.  * <p>Use of this method assumes the  * <a href="https://github.com/xmlunit/xmlunit">XMLUnit</a> library is available.  * @param expected the expected XML content  * @param actual the actual XML content  * @see org.springframework.test.web.servlet.result.MockMvcResultMatchers#xpath(String, Object...)  * @see org.springframework.test.web.servlet.result.MockMvcResultMatchers#xpath(String, Map, Object...)  */ ;/**  * Parse the expected and actual content strings as XML and assert that the  * two are "similar" -- i.e. they contain the same elements and attributes  * regardless of order.  * <p>Use of this method assumes the  * <a href="https://github.com/xmlunit/xmlunit">XMLUnit</a> library is available.  * @param expected the expected XML content  * @param actual the actual XML content  * @see org.springframework.test.web.servlet.result.MockMvcResultMatchers#xpath(String, Object...)  * @see org.springframework.test.web.servlet.result.MockMvcResultMatchers#xpath(String, Map, Object...)  */ public void assertXmlEqual(String expected, String actual) throws Exception {     XmlUnitDiff diff = new XmlUnitDiff(expected, actual).     if (diff.hasDifferences()) {         AssertionErrors.fail("Body content " + diff.toString()).     } }
false;public;0;3;;public boolean hasDifferences() {     return this.diff.hasDifferences(). }
false;public;0;4;;@Override public String toString() {     return this.diff.toString(). }
