commented;modifiers;parameterAmount;loc;comment;code
false;public;3;28;;@Override public Mono<ClientHttpResponse> connect(HttpMethod httpMethod, URI uri, Function<? super ClientHttpRequest, Mono<Void>> requestCallback) {     MonoProcessor<ClientHttpResponse> result = MonoProcessor.create().     MockClientHttpRequest mockClientRequest = new MockClientHttpRequest(httpMethod, uri).     MockServerHttpResponse mockServerResponse = new MockServerHttpResponse().     mockClientRequest.setWriteHandler(requestBody -> {         log("Invoking HttpHandler for ", httpMethod, uri).         ServerHttpRequest mockServerRequest = adaptRequest(mockClientRequest, requestBody).         ServerHttpResponse responseToUse = prepareResponse(mockServerResponse, mockServerRequest).         this.handler.handle(mockServerRequest, responseToUse).subscribe(aVoid -> {         }, result::onError).         return Mono.empty().     }).     mockServerResponse.setWriteHandler(responseBody -> Mono.fromRunnable(() -> {         log("Creating client response for ", httpMethod, uri).         result.onNext(adaptResponse(mockServerResponse, responseBody)).     })).     log("Writing client request for ", httpMethod, uri).     requestCallback.apply(mockClientRequest).subscribe(aVoid -> {     }, result::onError).     return result. }
false;private;3;5;;private void log(String message, HttpMethod httpMethod, URI uri) {     if (logger.isDebugEnabled()) {         logger.debug(String.format("%s %s \"%s\"", message, httpMethod, uri)).     } }
false;private;2;7;;private ServerHttpRequest adaptRequest(MockClientHttpRequest request, Publisher<DataBuffer> body) {     HttpMethod method = request.getMethod().     URI uri = request.getURI().     HttpHeaders headers = request.getHeaders().     MultiValueMap<String, HttpCookie> cookies = request.getCookies().     return MockServerHttpRequest.method(method, uri).headers(headers).cookies(cookies).body(body). }
false;private;2;3;;private ServerHttpResponse prepareResponse(ServerHttpResponse response, ServerHttpRequest request) {     return (request.getMethod() == HttpMethod.HEAD ? new HttpHeadResponseDecorator(response) : response). }
false;private;2;8;;private ClientHttpResponse adaptResponse(MockServerHttpResponse response, Flux<DataBuffer> body) {     HttpStatus status = Optional.ofNullable(response.getStatusCode()).orElse(HttpStatus.OK).     MockClientHttpResponse clientResponse = new MockClientHttpResponse(status).     clientResponse.getHeaders().putAll(response.getHeaders()).     clientResponse.getCookies().putAll(response.getCookies()).     clientResponse.setBody(body).     return clientResponse. }
