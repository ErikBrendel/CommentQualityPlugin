commented;modifiers;parameterAmount;loc;comment;code
true;public;1;6;/**  * Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.  * <p>If the <em>annotated classes</em> are {@code null} or empty and  * {@link #isGenerateDefaultLocations()} returns {@code true}, this  * {@code SmartContextLoader} will attempt to {@linkplain  * #detectDefaultConfigurationClasses detect default configuration classes}.  * If defaults are detected they will be  * {@linkplain ContextConfigurationAttributes#setClasses(Class[]) set} in the  * supplied configuration attributes. Otherwise, properties in the supplied  * configuration attributes will not be modified.  * @param configAttributes the context configuration attributes to process  * @see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)  * @see #isGenerateDefaultLocations()  * @see #detectDefaultConfigurationClasses(Class)  */ ;// SmartContextLoader /**  * Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.  * <p>If the <em>annotated classes</em> are {@code null} or empty and  * {@link #isGenerateDefaultLocations()} returns {@code true}, this  * {@code SmartContextLoader} will attempt to {@linkplain  * #detectDefaultConfigurationClasses detect default configuration classes}.  * If defaults are detected they will be  * {@linkplain ContextConfigurationAttributes#setClasses(Class[]) set} in the  * supplied configuration attributes. Otherwise, properties in the supplied  * configuration attributes will not be modified.  * @param configAttributes the context configuration attributes to process  * @see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)  * @see #isGenerateDefaultLocations()  * @see #detectDefaultConfigurationClasses(Class)  */ @Override public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {     if (!configAttributes.hasClasses() && isGenerateDefaultLocations()) {         configAttributes.setClasses(detectDefaultConfigurationClasses(configAttributes.getDeclaringClass())).     } }
true;protected;1;3;/**  * Detect the default configuration classes for the supplied test class.  * <p>The default implementation simply delegates to  * {@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.  * @param declaringClass the test class that declared {@code @ContextConfiguration}  * @return an array of default configuration classes, potentially empty but never {@code null}  * @see AnnotationConfigContextLoaderUtils  */ ;/**  * Detect the default configuration classes for the supplied test class.  * <p>The default implementation simply delegates to  * {@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.  * @param declaringClass the test class that declared {@code @ContextConfiguration}  * @return an array of default configuration classes, potentially empty but never {@code null}  * @see AnnotationConfigContextLoaderUtils  */ protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {     return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass). }
true;protected;2;5;/**  * {@code AnnotationConfigWebContextLoader} should be used as a  * {@link org.springframework.test.context.SmartContextLoader SmartContextLoader},  * not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}.  * Consequently, this method is not supported.  * @throws UnsupportedOperationException in this implementation  * @see org.springframework.test.context.support.AbstractContextLoader#modifyLocations  */ ;// AbstractContextLoader /**  * {@code AnnotationConfigWebContextLoader} should be used as a  * {@link org.springframework.test.context.SmartContextLoader SmartContextLoader},  * not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}.  * Consequently, this method is not supported.  * @throws UnsupportedOperationException in this implementation  * @see org.springframework.test.context.support.AbstractContextLoader#modifyLocations  */ @Override protected String[] modifyLocations(Class<?> clazz, String... locations) {     throw new UnsupportedOperationException("AnnotationConfigWebContextLoader does not support the modifyLocations(Class, String...) method"). }
true;protected;1;5;/**  * {@code AnnotationConfigWebContextLoader} should be used as a  * {@link org.springframework.test.context.SmartContextLoader SmartContextLoader},  * not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}.  * Consequently, this method is not supported.  * @throws UnsupportedOperationException in this implementation  * @see org.springframework.test.context.support.AbstractContextLoader#generateDefaultLocations  */ ;/**  * {@code AnnotationConfigWebContextLoader} should be used as a  * {@link org.springframework.test.context.SmartContextLoader SmartContextLoader},  * not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}.  * Consequently, this method is not supported.  * @throws UnsupportedOperationException in this implementation  * @see org.springframework.test.context.support.AbstractContextLoader#generateDefaultLocations  */ @Override protected String[] generateDefaultLocations(Class<?> clazz) {     throw new UnsupportedOperationException("AnnotationConfigWebContextLoader does not support the generateDefaultLocations(Class) method"). }
true;protected;0;5;/**  * {@code AnnotationConfigWebContextLoader} should be used as a  * {@link org.springframework.test.context.SmartContextLoader SmartContextLoader},  * not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}.  * Consequently, this method is not supported.  * @throws UnsupportedOperationException in this implementation  * @see org.springframework.test.context.support.AbstractContextLoader#getResourceSuffix  */ ;/**  * {@code AnnotationConfigWebContextLoader} should be used as a  * {@link org.springframework.test.context.SmartContextLoader SmartContextLoader},  * not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}.  * Consequently, this method is not supported.  * @throws UnsupportedOperationException in this implementation  * @see org.springframework.test.context.support.AbstractContextLoader#getResourceSuffix  */ @Override protected String getResourceSuffix() {     throw new UnsupportedOperationException("AnnotationConfigWebContextLoader does not support the getResourceSuffix() method"). }
true;protected;2;10;/**  * Register classes in the supplied {@linkplain GenericWebApplicationContext context}  * from the classes in the supplied {@link WebMergedContextConfiguration}.  * <p>Each class must represent an <em>annotated class</em>. An  * {@link AnnotatedBeanDefinitionReader} is used to register the appropriate  * bean definitions.  * @param context the context in which the annotated classes should be registered  * @param webMergedConfig the merged configuration from which the classes should be retrieved  * @see AbstractGenericWebContextLoader#loadBeanDefinitions  */ ;// AbstractGenericWebContextLoader /**  * Register classes in the supplied {@linkplain GenericWebApplicationContext context}  * from the classes in the supplied {@link WebMergedContextConfiguration}.  * <p>Each class must represent an <em>annotated class</em>. An  * {@link AnnotatedBeanDefinitionReader} is used to register the appropriate  * bean definitions.  * @param context the context in which the annotated classes should be registered  * @param webMergedConfig the merged configuration from which the classes should be retrieved  * @see AbstractGenericWebContextLoader#loadBeanDefinitions  */ @Override protected void loadBeanDefinitions(GenericWebApplicationContext context, WebMergedContextConfiguration webMergedConfig) {     Class<?>[] annotatedClasses = webMergedConfig.getClasses().     if (logger.isDebugEnabled()) {         logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses)).     }     new AnnotatedBeanDefinitionReader(context).register(annotatedClasses). }
true;protected;1;11;/**  * Ensure that the supplied {@link WebMergedContextConfiguration} does not  * contain {@link MergedContextConfiguration#getLocations() locations}.  * @since 4.0.4  * @see AbstractGenericWebContextLoader#validateMergedContextConfiguration  */ ;/**  * Ensure that the supplied {@link WebMergedContextConfiguration} does not  * contain {@link MergedContextConfiguration#getLocations() locations}.  * @since 4.0.4  * @see AbstractGenericWebContextLoader#validateMergedContextConfiguration  */ @Override protected void validateMergedContextConfiguration(WebMergedContextConfiguration webMergedConfig) {     if (webMergedConfig.hasLocations()) {         String msg = String.format("Test class [%s] has been configured with @ContextConfiguration's 'locations' " + "(or 'value') attribute %s, but %s does not support resource locations.", webMergedConfig.getTestClass().getName(), ObjectUtils.nullSafeToString(webMergedConfig.getLocations()), getClass().getSimpleName()).         logger.error(msg).         throw new IllegalStateException(msg).     } }
