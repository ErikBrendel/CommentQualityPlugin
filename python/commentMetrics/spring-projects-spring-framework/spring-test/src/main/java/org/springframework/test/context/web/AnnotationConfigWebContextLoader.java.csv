# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotationConfigWebContextLoader -> public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1354573750;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are <code>null</code> or empty and_{@link #isGenerateDefaultLocations()} returns <code>true</code>, this_<code>SmartContextLoader</code> will attempt to {@link_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@link ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (ObjectUtils.isEmpty(configAttributes.getClasses()) && isGenerateDefaultLocations()) {_			Class<?>[] defaultConfigClasses = detectDefaultConfigurationClasses(configAttributes.getDeclaringClass())__			configAttributes.setClasses(defaultConfigClasses)__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,code,or,empty,and,link,is,generate,default,locations,returns,code,true,code,this,code,smart,context,loader,code,will,attempt,to,link,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,link,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,object,utils,is,empty,config,attributes,get,classes,is,generate,default,locations,class,default,config,classes,detect,default,configuration,classes,config,attributes,get,declaring,class,config,attributes,set,classes,default,config,classes
AnnotationConfigWebContextLoader -> public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1355187490;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are <code>null</code> or empty and_{@link #isGenerateDefaultLocations()} returns <code>true</code>, this_<code>SmartContextLoader</code> will attempt to {@linkplain_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@linkplain ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (ObjectUtils.isEmpty(configAttributes.getClasses()) && isGenerateDefaultLocations()) {_			Class<?>[] defaultConfigClasses = detectDefaultConfigurationClasses(configAttributes.getDeclaringClass())__			configAttributes.setClasses(defaultConfigClasses)__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,code,or,empty,and,link,is,generate,default,locations,returns,code,true,code,this,code,smart,context,loader,code,will,attempt,to,linkplain,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,linkplain,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,object,utils,is,empty,config,attributes,get,classes,is,generate,default,locations,class,default,config,classes,detect,default,configuration,classes,config,attributes,get,declaring,class,config,attributes,set,classes,default,config,classes
AnnotationConfigWebContextLoader -> public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1357119239;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are {@code null} or empty and_{@link #isGenerateDefaultLocations()} returns {@code true}, this_{@code SmartContextLoader} will attempt to {@linkplain_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@linkplain ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (ObjectUtils.isEmpty(configAttributes.getClasses()) && isGenerateDefaultLocations()) {_			Class<?>[] defaultConfigClasses = detectDefaultConfigurationClasses(configAttributes.getDeclaringClass())__			configAttributes.setClasses(defaultConfigClasses)__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,or,empty,and,link,is,generate,default,locations,returns,code,true,this,code,smart,context,loader,will,attempt,to,linkplain,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,linkplain,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,object,utils,is,empty,config,attributes,get,classes,is,generate,default,locations,class,default,config,classes,detect,default,configuration,classes,config,attributes,get,declaring,class,config,attributes,set,classes,default,config,classes
AnnotationConfigWebContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1354573750;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1355187490;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1356735495;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1357119239;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1368482696;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1396374528;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1406214559;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1413848647;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1496242568;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1496955179;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#generateDefaultLocations_@throws UnsupportedOperationException;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,generate,default,locations,throws,unsupported,operation,exception;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] generateDefaultLocations(Class<?> clazz);1516617801;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported._@throws UnsupportedOperationException in this implementation_@see org.springframework.test.context.support.AbstractContextLoader#generateDefaultLocations;@Override_	protected String[] generateDefaultLocations(Class<?> clazz) {_		throw new UnsupportedOperationException(_				"AnnotationConfigWebContextLoader does not support the generateDefaultLocations(Class) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,throws,unsupported,operation,exception,in,this,implementation,see,org,springframework,test,context,support,abstract,context,loader,generate,default,locations;override,protected,string,generate,default,locations,class,clazz,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,generate,default,locations,class,method
AnnotationConfigWebContextLoader -> @Override 	protected void loadBeanDefinitions(GenericWebApplicationContext context, 			WebMergedContextConfiguration webMergedConfig);1354573750;Register classes in the supplied {@link GenericWebApplicationContext context}_from the classes in the supplied {@link WebMergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__@param context the context in which the annotated classes should be registered_@param webMergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericWebContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericWebApplicationContext context,_			WebMergedContextConfiguration webMergedConfig) {_		Class<?>[] annotatedClasses = webMergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,link,generic,web,application,context,context,from,the,classes,in,the,supplied,link,web,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,web,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,web,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,web,application,context,context,web,merged,context,configuration,web,merged,config,class,annotated,classes,web,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigWebContextLoader -> @Override 	protected void loadBeanDefinitions(GenericWebApplicationContext context, 			WebMergedContextConfiguration webMergedConfig);1355187490;Register classes in the supplied {@linkplain GenericWebApplicationContext context}_from the classes in the supplied {@link WebMergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__@param context the context in which the annotated classes should be registered_@param webMergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericWebContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericWebApplicationContext context,_			WebMergedContextConfiguration webMergedConfig) {_		Class<?>[] annotatedClasses = webMergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,linkplain,generic,web,application,context,context,from,the,classes,in,the,supplied,link,web,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,web,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,web,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,web,application,context,context,web,merged,context,configuration,web,merged,config,class,annotated,classes,web,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigWebContextLoader -> @Override 	protected void loadBeanDefinitions(GenericWebApplicationContext context, 			WebMergedContextConfiguration webMergedConfig);1356735495;Register classes in the supplied {@linkplain GenericWebApplicationContext context}_from the classes in the supplied {@link WebMergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__@param context the context in which the annotated classes should be registered_@param webMergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericWebContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericWebApplicationContext context,_			WebMergedContextConfiguration webMergedConfig) {_		Class<?>[] annotatedClasses = webMergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,linkplain,generic,web,application,context,context,from,the,classes,in,the,supplied,link,web,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,web,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,web,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,web,application,context,context,web,merged,context,configuration,web,merged,config,class,annotated,classes,web,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigWebContextLoader -> @Override 	protected void loadBeanDefinitions(GenericWebApplicationContext context, 			WebMergedContextConfiguration webMergedConfig);1357119239;Register classes in the supplied {@linkplain GenericWebApplicationContext context}_from the classes in the supplied {@link WebMergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__@param context the context in which the annotated classes should be registered_@param webMergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericWebContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericWebApplicationContext context,_			WebMergedContextConfiguration webMergedConfig) {_		Class<?>[] annotatedClasses = webMergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,linkplain,generic,web,application,context,context,from,the,classes,in,the,supplied,link,web,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,web,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,web,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,web,application,context,context,web,merged,context,configuration,web,merged,config,class,annotated,classes,web,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigWebContextLoader -> @Override 	protected void loadBeanDefinitions(GenericWebApplicationContext context, 			WebMergedContextConfiguration webMergedConfig);1368482696;Register classes in the supplied {@linkplain GenericWebApplicationContext context}_from the classes in the supplied {@link WebMergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__@param context the context in which the annotated classes should be registered_@param webMergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericWebContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericWebApplicationContext context,_			WebMergedContextConfiguration webMergedConfig) {_		Class<?>[] annotatedClasses = webMergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,linkplain,generic,web,application,context,context,from,the,classes,in,the,supplied,link,web,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,web,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,web,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,web,application,context,context,web,merged,context,configuration,web,merged,config,class,annotated,classes,web,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigWebContextLoader -> @Override 	protected void loadBeanDefinitions(GenericWebApplicationContext context, 			WebMergedContextConfiguration webMergedConfig);1396374528;Register classes in the supplied {@linkplain GenericWebApplicationContext context}_from the classes in the supplied {@link WebMergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__@param context the context in which the annotated classes should be registered_@param webMergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericWebContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericWebApplicationContext context,_			WebMergedContextConfiguration webMergedConfig) {_		Class<?>[] annotatedClasses = webMergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,linkplain,generic,web,application,context,context,from,the,classes,in,the,supplied,link,web,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,web,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,web,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,web,application,context,context,web,merged,context,configuration,web,merged,config,class,annotated,classes,web,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigWebContextLoader -> @Override 	protected void loadBeanDefinitions(GenericWebApplicationContext context, 			WebMergedContextConfiguration webMergedConfig);1406214559;Register classes in the supplied {@linkplain GenericWebApplicationContext context}_from the classes in the supplied {@link WebMergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__@param context the context in which the annotated classes should be registered_@param webMergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericWebContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericWebApplicationContext context,_			WebMergedContextConfiguration webMergedConfig) {_		Class<?>[] annotatedClasses = webMergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,linkplain,generic,web,application,context,context,from,the,classes,in,the,supplied,link,web,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,web,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,web,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,web,application,context,context,web,merged,context,configuration,web,merged,config,class,annotated,classes,web,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigWebContextLoader -> @Override 	protected void loadBeanDefinitions(GenericWebApplicationContext context, 			WebMergedContextConfiguration webMergedConfig);1413848647;Register classes in the supplied {@linkplain GenericWebApplicationContext context}_from the classes in the supplied {@link WebMergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__@param context the context in which the annotated classes should be registered_@param webMergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericWebContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericWebApplicationContext context,_			WebMergedContextConfiguration webMergedConfig) {_		Class<?>[] annotatedClasses = webMergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,linkplain,generic,web,application,context,context,from,the,classes,in,the,supplied,link,web,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,web,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,web,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,web,application,context,context,web,merged,context,configuration,web,merged,config,class,annotated,classes,web,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigWebContextLoader -> @Override 	protected void loadBeanDefinitions(GenericWebApplicationContext context, 			WebMergedContextConfiguration webMergedConfig);1496242568;Register classes in the supplied {@linkplain GenericWebApplicationContext context}_from the classes in the supplied {@link WebMergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__@param context the context in which the annotated classes should be registered_@param webMergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericWebContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericWebApplicationContext context,_			WebMergedContextConfiguration webMergedConfig) {_		Class<?>[] annotatedClasses = webMergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,linkplain,generic,web,application,context,context,from,the,classes,in,the,supplied,link,web,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,web,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,web,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,web,application,context,context,web,merged,context,configuration,web,merged,config,class,annotated,classes,web,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigWebContextLoader -> @Override 	protected void loadBeanDefinitions(GenericWebApplicationContext context, 			WebMergedContextConfiguration webMergedConfig);1496955179;Register classes in the supplied {@linkplain GenericWebApplicationContext context}_from the classes in the supplied {@link WebMergedContextConfiguration}.__<p>Each class must represent an <em>annotated class</em>. An_{@link AnnotatedBeanDefinitionReader} is used to register the appropriate_bean definitions.__@param context the context in which the annotated classes should be registered_@param webMergedConfig the merged configuration from which the classes should be retrieved__@see AbstractGenericWebContextLoader#loadBeanDefinitions;@Override_	protected void loadBeanDefinitions(GenericWebApplicationContext context,_			WebMergedContextConfiguration webMergedConfig) {_		Class<?>[] annotatedClasses = webMergedConfig.getClasses()__		if (logger.isDebugEnabled()) {_			logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses))__		}_		new AnnotatedBeanDefinitionReader(context).register(annotatedClasses)__	};register,classes,in,the,supplied,linkplain,generic,web,application,context,context,from,the,classes,in,the,supplied,link,web,merged,context,configuration,p,each,class,must,represent,an,em,annotated,class,em,an,link,annotated,bean,definition,reader,is,used,to,register,the,appropriate,bean,definitions,param,context,the,context,in,which,the,annotated,classes,should,be,registered,param,web,merged,config,the,merged,configuration,from,which,the,classes,should,be,retrieved,see,abstract,generic,web,context,loader,load,bean,definitions;override,protected,void,load,bean,definitions,generic,web,application,context,context,web,merged,context,configuration,web,merged,config,class,annotated,classes,web,merged,config,get,classes,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,object,utils,null,safe,to,string,annotated,classes,new,annotated,bean,definition,reader,context,register,annotated,classes
AnnotationConfigWebContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1356735495;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are {@code null} or empty and_{@link #isGenerateDefaultLocations()} returns {@code true}, this_{@code SmartContextLoader} will attempt to {@linkplain_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@linkplain ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (ObjectUtils.isEmpty(configAttributes.getClasses()) && isGenerateDefaultLocations()) {_			Class<?>[] defaultConfigClasses = detectDefaultConfigurationClasses(configAttributes.getDeclaringClass())__			configAttributes.setClasses(defaultConfigClasses)__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,or,empty,and,link,is,generate,default,locations,returns,code,true,this,code,smart,context,loader,will,attempt,to,linkplain,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,linkplain,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,object,utils,is,empty,config,attributes,get,classes,is,generate,default,locations,class,default,config,classes,detect,default,configuration,classes,config,attributes,get,declaring,class,config,attributes,set,classes,default,config,classes
AnnotationConfigWebContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1368482696;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are {@code null} or empty and_{@link #isGenerateDefaultLocations()} returns {@code true}, this_{@code SmartContextLoader} will attempt to {@linkplain_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@linkplain ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (ObjectUtils.isEmpty(configAttributes.getClasses()) && isGenerateDefaultLocations()) {_			Class<?>[] defaultConfigClasses = detectDefaultConfigurationClasses(configAttributes.getDeclaringClass())__			configAttributes.setClasses(defaultConfigClasses)__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,or,empty,and,link,is,generate,default,locations,returns,code,true,this,code,smart,context,loader,will,attempt,to,linkplain,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,linkplain,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,object,utils,is,empty,config,attributes,get,classes,is,generate,default,locations,class,default,config,classes,detect,default,configuration,classes,config,attributes,get,declaring,class,config,attributes,set,classes,default,config,classes
AnnotationConfigWebContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1396374528;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are {@code null} or empty and_{@link #isGenerateDefaultLocations()} returns {@code true}, this_{@code SmartContextLoader} will attempt to {@linkplain_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@linkplain ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (!configAttributes.hasClasses() && isGenerateDefaultLocations()) {_			configAttributes.setClasses(detectDefaultConfigurationClasses(configAttributes.getDeclaringClass()))__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,or,empty,and,link,is,generate,default,locations,returns,code,true,this,code,smart,context,loader,will,attempt,to,linkplain,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,linkplain,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,config,attributes,has,classes,is,generate,default,locations,config,attributes,set,classes,detect,default,configuration,classes,config,attributes,get,declaring,class
AnnotationConfigWebContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1406214559;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are {@code null} or empty and_{@link #isGenerateDefaultLocations()} returns {@code true}, this_{@code SmartContextLoader} will attempt to {@linkplain_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@linkplain ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (!configAttributes.hasClasses() && isGenerateDefaultLocations()) {_			configAttributes.setClasses(detectDefaultConfigurationClasses(configAttributes.getDeclaringClass()))__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,or,empty,and,link,is,generate,default,locations,returns,code,true,this,code,smart,context,loader,will,attempt,to,linkplain,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,linkplain,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,config,attributes,has,classes,is,generate,default,locations,config,attributes,set,classes,detect,default,configuration,classes,config,attributes,get,declaring,class
AnnotationConfigWebContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1413848647;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are {@code null} or empty and_{@link #isGenerateDefaultLocations()} returns {@code true}, this_{@code SmartContextLoader} will attempt to {@linkplain_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@linkplain ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (!configAttributes.hasClasses() && isGenerateDefaultLocations()) {_			configAttributes.setClasses(detectDefaultConfigurationClasses(configAttributes.getDeclaringClass()))__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,or,empty,and,link,is,generate,default,locations,returns,code,true,this,code,smart,context,loader,will,attempt,to,linkplain,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,linkplain,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,config,attributes,has,classes,is,generate,default,locations,config,attributes,set,classes,detect,default,configuration,classes,config,attributes,get,declaring,class
AnnotationConfigWebContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1496955179;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}.__<p>If the <em>annotated classes</em> are {@code null} or empty and_{@link #isGenerateDefaultLocations()} returns {@code true}, this_{@code SmartContextLoader} will attempt to {@linkplain_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@linkplain ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified.__@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (!configAttributes.hasClasses() && isGenerateDefaultLocations()) {_			configAttributes.setClasses(detectDefaultConfigurationClasses(configAttributes.getDeclaringClass()))__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,or,empty,and,link,is,generate,default,locations,returns,code,true,this,code,smart,context,loader,will,attempt,to,linkplain,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,linkplain,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,config,attributes,has,classes,is,generate,default,locations,config,attributes,set,classes,detect,default,configuration,classes,config,attributes,get,declaring,class
AnnotationConfigWebContextLoader -> @Override 	public void processContextConfiguration(ContextConfigurationAttributes configAttributes);1516617801;Process <em>annotated classes</em> in the supplied {@link ContextConfigurationAttributes}._<p>If the <em>annotated classes</em> are {@code null} or empty and_{@link #isGenerateDefaultLocations()} returns {@code true}, this_{@code SmartContextLoader} will attempt to {@linkplain_#detectDefaultConfigurationClasses detect default configuration classes}._If defaults are detected they will be_{@linkplain ContextConfigurationAttributes#setClasses(Class[]) set} in the_supplied configuration attributes. Otherwise, properties in the supplied_configuration attributes will not be modified._@param configAttributes the context configuration attributes to process_@see org.springframework.test.context.SmartContextLoader#processContextConfiguration(ContextConfigurationAttributes)_@see #isGenerateDefaultLocations()_@see #detectDefaultConfigurationClasses(Class);@Override_	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {_		if (!configAttributes.hasClasses() && isGenerateDefaultLocations()) {_			configAttributes.setClasses(detectDefaultConfigurationClasses(configAttributes.getDeclaringClass()))__		}_	};process,em,annotated,classes,em,in,the,supplied,link,context,configuration,attributes,p,if,the,em,annotated,classes,em,are,code,null,or,empty,and,link,is,generate,default,locations,returns,code,true,this,code,smart,context,loader,will,attempt,to,linkplain,detect,default,configuration,classes,detect,default,configuration,classes,if,defaults,are,detected,they,will,be,linkplain,context,configuration,attributes,set,classes,class,set,in,the,supplied,configuration,attributes,otherwise,properties,in,the,supplied,configuration,attributes,will,not,be,modified,param,config,attributes,the,context,configuration,attributes,to,process,see,org,springframework,test,context,smart,context,loader,process,context,configuration,context,configuration,attributes,see,is,generate,default,locations,see,detect,default,configuration,classes,class;override,public,void,process,context,configuration,context,configuration,attributes,config,attributes,if,config,attributes,has,classes,is,generate,default,locations,config,attributes,set,classes,detect,default,configuration,classes,config,attributes,get,declaring,class
AnnotationConfigWebContextLoader -> @Override 	protected void validateMergedContextConfiguration(WebMergedContextConfiguration webMergedConfig);1396374528;Ensure that the supplied {@link WebMergedContextConfiguration} does not_contain {@link MergedContextConfiguration#getLocations() locations}._@since 4.0.4_@see AbstractGenericWebContextLoader#validateMergedContextConfiguration;@Override_	protected void validateMergedContextConfiguration(WebMergedContextConfiguration webMergedConfig) {_		if (webMergedConfig.hasLocations()) {_			String msg = String.format(_				"Test class [%s] has been configured with @ContextConfiguration's 'locations' (or 'value') attribute %s, "_						+ "but %s does not support resource locations.", webMergedConfig.getTestClass().getName(),_				ObjectUtils.nullSafeToString(webMergedConfig.getLocations()), getClass().getSimpleName())__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};ensure,that,the,supplied,link,web,merged,context,configuration,does,not,contain,link,merged,context,configuration,get,locations,locations,since,4,0,4,see,abstract,generic,web,context,loader,validate,merged,context,configuration;override,protected,void,validate,merged,context,configuration,web,merged,context,configuration,web,merged,config,if,web,merged,config,has,locations,string,msg,string,format,test,class,s,has,been,configured,with,context,configuration,s,locations,or,value,attribute,s,but,s,does,not,support,resource,locations,web,merged,config,get,test,class,get,name,object,utils,null,safe,to,string,web,merged,config,get,locations,get,class,get,simple,name,logger,error,msg,throw,new,illegal,state,exception,msg
AnnotationConfigWebContextLoader -> @Override 	protected void validateMergedContextConfiguration(WebMergedContextConfiguration webMergedConfig);1406214559;Ensure that the supplied {@link WebMergedContextConfiguration} does not_contain {@link MergedContextConfiguration#getLocations() locations}._@since 4.0.4_@see AbstractGenericWebContextLoader#validateMergedContextConfiguration;@Override_	protected void validateMergedContextConfiguration(WebMergedContextConfiguration webMergedConfig) {_		if (webMergedConfig.hasLocations()) {_			String msg = String.format(_				"Test class [%s] has been configured with @ContextConfiguration's 'locations' (or 'value') attribute %s, "_						+ "but %s does not support resource locations.", webMergedConfig.getTestClass().getName(),_				ObjectUtils.nullSafeToString(webMergedConfig.getLocations()), getClass().getSimpleName())__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};ensure,that,the,supplied,link,web,merged,context,configuration,does,not,contain,link,merged,context,configuration,get,locations,locations,since,4,0,4,see,abstract,generic,web,context,loader,validate,merged,context,configuration;override,protected,void,validate,merged,context,configuration,web,merged,context,configuration,web,merged,config,if,web,merged,config,has,locations,string,msg,string,format,test,class,s,has,been,configured,with,context,configuration,s,locations,or,value,attribute,s,but,s,does,not,support,resource,locations,web,merged,config,get,test,class,get,name,object,utils,null,safe,to,string,web,merged,config,get,locations,get,class,get,simple,name,logger,error,msg,throw,new,illegal,state,exception,msg
AnnotationConfigWebContextLoader -> @Override 	protected void validateMergedContextConfiguration(WebMergedContextConfiguration webMergedConfig);1413848647;Ensure that the supplied {@link WebMergedContextConfiguration} does not_contain {@link MergedContextConfiguration#getLocations() locations}._@since 4.0.4_@see AbstractGenericWebContextLoader#validateMergedContextConfiguration;@Override_	protected void validateMergedContextConfiguration(WebMergedContextConfiguration webMergedConfig) {_		if (webMergedConfig.hasLocations()) {_			String msg = String.format(_				"Test class [%s] has been configured with @ContextConfiguration's 'locations' (or 'value') attribute %s, "_						+ "but %s does not support resource locations.", webMergedConfig.getTestClass().getName(),_				ObjectUtils.nullSafeToString(webMergedConfig.getLocations()), getClass().getSimpleName())__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};ensure,that,the,supplied,link,web,merged,context,configuration,does,not,contain,link,merged,context,configuration,get,locations,locations,since,4,0,4,see,abstract,generic,web,context,loader,validate,merged,context,configuration;override,protected,void,validate,merged,context,configuration,web,merged,context,configuration,web,merged,config,if,web,merged,config,has,locations,string,msg,string,format,test,class,s,has,been,configured,with,context,configuration,s,locations,or,value,attribute,s,but,s,does,not,support,resource,locations,web,merged,config,get,test,class,get,name,object,utils,null,safe,to,string,web,merged,config,get,locations,get,class,get,simple,name,logger,error,msg,throw,new,illegal,state,exception,msg
AnnotationConfigWebContextLoader -> @Override 	protected void validateMergedContextConfiguration(WebMergedContextConfiguration webMergedConfig);1496242568;Ensure that the supplied {@link WebMergedContextConfiguration} does not_contain {@link MergedContextConfiguration#getLocations() locations}._@since 4.0.4_@see AbstractGenericWebContextLoader#validateMergedContextConfiguration;@Override_	protected void validateMergedContextConfiguration(WebMergedContextConfiguration webMergedConfig) {_		if (webMergedConfig.hasLocations()) {_			String msg = String.format(_				"Test class [%s] has been configured with @ContextConfiguration's 'locations' (or 'value') attribute %s, "_						+ "but %s does not support resource locations.", webMergedConfig.getTestClass().getName(),_				ObjectUtils.nullSafeToString(webMergedConfig.getLocations()), getClass().getSimpleName())__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};ensure,that,the,supplied,link,web,merged,context,configuration,does,not,contain,link,merged,context,configuration,get,locations,locations,since,4,0,4,see,abstract,generic,web,context,loader,validate,merged,context,configuration;override,protected,void,validate,merged,context,configuration,web,merged,context,configuration,web,merged,config,if,web,merged,config,has,locations,string,msg,string,format,test,class,s,has,been,configured,with,context,configuration,s,locations,or,value,attribute,s,but,s,does,not,support,resource,locations,web,merged,config,get,test,class,get,name,object,utils,null,safe,to,string,web,merged,config,get,locations,get,class,get,simple,name,logger,error,msg,throw,new,illegal,state,exception,msg
AnnotationConfigWebContextLoader -> @Override 	protected void validateMergedContextConfiguration(WebMergedContextConfiguration webMergedConfig);1496955179;Ensure that the supplied {@link WebMergedContextConfiguration} does not_contain {@link MergedContextConfiguration#getLocations() locations}._@since 4.0.4_@see AbstractGenericWebContextLoader#validateMergedContextConfiguration;@Override_	protected void validateMergedContextConfiguration(WebMergedContextConfiguration webMergedConfig) {_		if (webMergedConfig.hasLocations()) {_			String msg = String.format(_				"Test class [%s] has been configured with @ContextConfiguration's 'locations' (or 'value') attribute %s, "_						+ "but %s does not support resource locations.", webMergedConfig.getTestClass().getName(),_				ObjectUtils.nullSafeToString(webMergedConfig.getLocations()), getClass().getSimpleName())__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};ensure,that,the,supplied,link,web,merged,context,configuration,does,not,contain,link,merged,context,configuration,get,locations,locations,since,4,0,4,see,abstract,generic,web,context,loader,validate,merged,context,configuration;override,protected,void,validate,merged,context,configuration,web,merged,context,configuration,web,merged,config,if,web,merged,config,has,locations,string,msg,string,format,test,class,s,has,been,configured,with,context,configuration,s,locations,or,value,attribute,s,but,s,does,not,support,resource,locations,web,merged,config,get,test,class,get,name,object,utils,null,safe,to,string,web,merged,config,get,locations,get,class,get,simple,name,logger,error,msg,throw,new,illegal,state,exception,msg
AnnotationConfigWebContextLoader -> @Override 	protected void validateMergedContextConfiguration(WebMergedContextConfiguration webMergedConfig);1516617801;Ensure that the supplied {@link WebMergedContextConfiguration} does not_contain {@link MergedContextConfiguration#getLocations() locations}._@since 4.0.4_@see AbstractGenericWebContextLoader#validateMergedContextConfiguration;@Override_	protected void validateMergedContextConfiguration(WebMergedContextConfiguration webMergedConfig) {_		if (webMergedConfig.hasLocations()) {_			String msg = String.format("Test class [%s] has been configured with @ContextConfiguration's 'locations' " +_							"(or 'value') attribute %s, but %s does not support resource locations.",_					webMergedConfig.getTestClass().getName(),_					ObjectUtils.nullSafeToString(webMergedConfig.getLocations()), getClass().getSimpleName())__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_	};ensure,that,the,supplied,link,web,merged,context,configuration,does,not,contain,link,merged,context,configuration,get,locations,locations,since,4,0,4,see,abstract,generic,web,context,loader,validate,merged,context,configuration;override,protected,void,validate,merged,context,configuration,web,merged,context,configuration,web,merged,config,if,web,merged,config,has,locations,string,msg,string,format,test,class,s,has,been,configured,with,context,configuration,s,locations,or,value,attribute,s,but,s,does,not,support,resource,locations,web,merged,config,get,test,class,get,name,object,utils,null,safe,to,string,web,merged,config,get,locations,get,class,get,simple,name,logger,error,msg,throw,new,illegal,state,exception,msg
AnnotationConfigWebContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1354573750;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never <code>null</code>_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,code,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigWebContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1355187490;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never <code>null</code>_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,code,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigWebContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1356735495;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigWebContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1357119239;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigWebContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1368482696;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigWebContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1396374528;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigWebContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1406214559;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigWebContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1413848647;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigWebContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1496242568;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigWebContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1496955179;Detect the default configuration classes for the supplied test class.__<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}.__@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but_never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigWebContextLoader -> protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass);1516617801;Detect the default configuration classes for the supplied test class._<p>The default implementation simply delegates to_{@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses(Class)}._@param declaringClass the test class that declared {@code @ContextConfiguration}_@return an array of default configuration classes, potentially empty but never {@code null}_@see AnnotationConfigContextLoaderUtils;protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {_		return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass)__	};detect,the,default,configuration,classes,for,the,supplied,test,class,p,the,default,implementation,simply,delegates,to,link,annotation,config,context,loader,utils,detect,default,configuration,classes,class,param,declaring,class,the,test,class,that,declared,code,context,configuration,return,an,array,of,default,configuration,classes,potentially,empty,but,never,code,null,see,annotation,config,context,loader,utils;protected,class,detect,default,configuration,classes,class,declaring,class,return,annotation,config,context,loader,utils,detect,default,configuration,classes,declaring,class
AnnotationConfigWebContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1354573750;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1355187490;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1356735495;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1357119239;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1368482696;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1396374528;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1406214559;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1413848647;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1496242568;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1496955179;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#modifyLocations_@throws UnsupportedOperationException;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,modify,locations,throws,unsupported,operation,exception;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigWebContextLoader -> @Override 	protected String[] modifyLocations(Class<?> clazz, String... locations);1516617801;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported._@throws UnsupportedOperationException in this implementation_@see org.springframework.test.context.support.AbstractContextLoader#modifyLocations;@Override_	protected String[] modifyLocations(Class<?> clazz, String... locations) {_		throw new UnsupportedOperationException(_				"AnnotationConfigWebContextLoader does not support the modifyLocations(Class, String...) method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,throws,unsupported,operation,exception,in,this,implementation,see,org,springframework,test,context,support,abstract,context,loader,modify,locations;override,protected,string,modify,locations,class,clazz,string,locations,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,modify,locations,class,string,method
AnnotationConfigWebContextLoader -> @Override 	protected String getResourceSuffix();1354573750;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigWebContextLoader -> @Override 	protected String getResourceSuffix();1355187490;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigWebContextLoader -> @Override 	protected String getResourceSuffix();1356735495;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigWebContextLoader -> @Override 	protected String getResourceSuffix();1357119239;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigWebContextLoader -> @Override 	protected String getResourceSuffix();1368482696;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigWebContextLoader -> @Override 	protected String getResourceSuffix();1396374528;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigWebContextLoader -> @Override 	protected String getResourceSuffix();1406214559;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigWebContextLoader -> @Override 	protected String getResourceSuffix();1413848647;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigWebContextLoader -> @Override 	protected String getResourceSuffix();1496242568;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigWebContextLoader -> @Override 	protected String getResourceSuffix();1496955179;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported.__@see org.springframework.test.context.support.AbstractContextLoader#getResourceSuffix_@throws UnsupportedOperationException;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_			"AnnotationConfigWebContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,see,org,springframework,test,context,support,abstract,context,loader,get,resource,suffix,throws,unsupported,operation,exception;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,get,resource,suffix,method
AnnotationConfigWebContextLoader -> @Override 	protected String getResourceSuffix();1516617801;{@code AnnotationConfigWebContextLoader} should be used as a_{@link org.springframework.test.context.SmartContextLoader SmartContextLoader},_not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}._Consequently, this method is not supported._@throws UnsupportedOperationException in this implementation_@see org.springframework.test.context.support.AbstractContextLoader#getResourceSuffix;@Override_	protected String getResourceSuffix() {_		throw new UnsupportedOperationException(_				"AnnotationConfigWebContextLoader does not support the getResourceSuffix() method")__	};code,annotation,config,web,context,loader,should,be,used,as,a,link,org,springframework,test,context,smart,context,loader,smart,context,loader,not,as,a,legacy,link,org,springframework,test,context,context,loader,context,loader,consequently,this,method,is,not,supported,throws,unsupported,operation,exception,in,this,implementation,see,org,springframework,test,context,support,abstract,context,loader,get,resource,suffix;override,protected,string,get,resource,suffix,throw,new,unsupported,operation,exception,annotation,config,web,context,loader,does,not,support,the,get,resource,suffix,method
