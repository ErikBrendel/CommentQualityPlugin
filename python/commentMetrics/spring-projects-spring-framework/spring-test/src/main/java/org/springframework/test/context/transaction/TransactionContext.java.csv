# id;timestamp;commentText;codeText;commentWords;codeWords
TransactionContext -> boolean isFlaggedForRollback();1404334604;Has the current transaction been flagged for rollback?_<p>In other words, should we roll back or commit the current transaction_upon completion of the current test?;boolean isFlaggedForRollback() {_		return this.flaggedForRollback__	};has,the,current,transaction,been,flagged,for,rollback,p,in,other,words,should,we,roll,back,or,commit,the,current,transaction,upon,completion,of,the,current,test;boolean,is,flagged,for,rollback,return,this,flagged,for,rollback
TransactionContext -> boolean isFlaggedForRollback();1405696193;Has the current transaction been flagged for rollback?_<p>In other words, should we roll back or commit the current transaction_upon completion of the current test?;boolean isFlaggedForRollback() {_		return this.flaggedForRollback__	};has,the,current,transaction,been,flagged,for,rollback,p,in,other,words,should,we,roll,back,or,commit,the,current,transaction,upon,completion,of,the,current,test;boolean,is,flagged,for,rollback,return,this,flagged,for,rollback
TransactionContext -> boolean isFlaggedForRollback();1413848647;Has the current transaction been flagged for rollback?_<p>In other words, should we roll back or commit the current transaction_upon completion of the current test?;boolean isFlaggedForRollback() {_		return this.flaggedForRollback__	};has,the,current,transaction,been,flagged,for,rollback,p,in,other,words,should,we,roll,back,or,commit,the,current,transaction,upon,completion,of,the,current,test;boolean,is,flagged,for,rollback,return,this,flagged,for,rollback
TransactionContext -> boolean isFlaggedForRollback();1468334463;Has the current transaction been flagged for rollback?_<p>In other words, should we roll back or commit the current transaction_upon completion of the current test?;boolean isFlaggedForRollback() {_		return this.flaggedForRollback__	};has,the,current,transaction,been,flagged,for,rollback,p,in,other,words,should,we,roll,back,or,commit,the,current,transaction,upon,completion,of,the,current,test;boolean,is,flagged,for,rollback,return,this,flagged,for,rollback
TransactionContext -> boolean isFlaggedForRollback();1496955179;Has the current transaction been flagged for rollback?_<p>In other words, should we roll back or commit the current transaction_upon completion of the current test?;boolean isFlaggedForRollback() {_		return this.flaggedForRollback__	};has,the,current,transaction,been,flagged,for,rollback,p,in,other,words,should,we,roll,back,or,commit,the,current,transaction,upon,completion,of,the,current,test;boolean,is,flagged,for,rollback,return,this,flagged,for,rollback
TransactionContext -> boolean isFlaggedForRollback();1498780456;Has the current transaction been flagged for rollback?_<p>In other words, should we roll back or commit the current transaction_upon completion of the current test?;boolean isFlaggedForRollback() {_		return this.flaggedForRollback__	};has,the,current,transaction,been,flagged,for,rollback,p,in,other,words,should,we,roll,back,or,commit,the,current,transaction,upon,completion,of,the,current,test;boolean,is,flagged,for,rollback,return,this,flagged,for,rollback
TransactionContext -> boolean isFlaggedForRollback();1506468851;Has the current transaction been flagged for rollback?_<p>In other words, should we roll back or commit the current transaction_upon completion of the current test?;boolean isFlaggedForRollback() {_		return this.flaggedForRollback__	};has,the,current,transaction,been,flagged,for,rollback,p,in,other,words,should,we,roll,back,or,commit,the,current,transaction,upon,completion,of,the,current,test;boolean,is,flagged,for,rollback,return,this,flagged,for,rollback
TransactionContext -> boolean isFlaggedForRollback();1520251235;Has the current transaction been flagged for rollback?_<p>In other words, should we roll back or commit the current transaction_upon completion of the current test?;boolean isFlaggedForRollback() {_		return this.flaggedForRollback__	};has,the,current,transaction,been,flagged,for,rollback,p,in,other,words,should,we,roll,back,or,commit,the,current,transaction,upon,completion,of,the,current,test;boolean,is,flagged,for,rollback,return,this,flagged,for,rollback
TransactionContext -> boolean isFlaggedForRollback();1530174524;Has the current transaction been flagged for rollback?_<p>In other words, should we roll back or commit the current transaction_upon completion of the current test?;boolean isFlaggedForRollback() {_		return this.flaggedForRollback__	};has,the,current,transaction,been,flagged,for,rollback,p,in,other,words,should,we,roll,back,or,commit,the,current,transaction,upon,completion,of,the,current,test;boolean,is,flagged,for,rollback,return,this,flagged,for,rollback
TransactionContext -> void startTransaction();1404334604;Start a new transaction for the configured {@linkplain #getTestContext test context}._<p>Only call this method if {@link #endTransaction} has been called or if no_transaction has been previously started._@throws TransactionException if starting the transaction fails;void startTransaction() {_		if (this.transactionStatus != null) {_			throw new IllegalStateException(_				"Cannot start a new transaction without ending the existing transaction first.")__		}_		this.flaggedForRollback = this.defaultRollback__		this.transactionStatus = this.transactionManager.getTransaction(this.transactionDefinition)__		++this.transactionsStarted__		if (logger.isInfoEnabled()) {_			logger.info(String.format(_				"Began transaction (%s) for test context %s_ transaction manager [%s]_ rollback [%s]",_				this.transactionsStarted, this.testContext, this.transactionManager, flaggedForRollback))__		}_	};start,a,new,transaction,for,the,configured,linkplain,get,test,context,test,context,p,only,call,this,method,if,link,end,transaction,has,been,called,or,if,no,transaction,has,been,previously,started,throws,transaction,exception,if,starting,the,transaction,fails;void,start,transaction,if,this,transaction,status,null,throw,new,illegal,state,exception,cannot,start,a,new,transaction,without,ending,the,existing,transaction,first,this,flagged,for,rollback,this,default,rollback,this,transaction,status,this,transaction,manager,get,transaction,this,transaction,definition,this,transactions,started,if,logger,is,info,enabled,logger,info,string,format,began,transaction,s,for,test,context,s,transaction,manager,s,rollback,s,this,transactions,started,this,test,context,this,transaction,manager,flagged,for,rollback
TransactionContext -> void startTransaction();1405696193;Start a new transaction for the configured {@linkplain #getTestContext test context}._<p>Only call this method if {@link #endTransaction} has been called or if no_transaction has been previously started._@throws TransactionException if starting the transaction fails;void startTransaction() {_		if (this.transactionStatus != null) {_			throw new IllegalStateException(_				"Cannot start a new transaction without ending the existing transaction first.")__		}_		this.flaggedForRollback = this.defaultRollback__		this.transactionStatus = this.transactionManager.getTransaction(this.transactionDefinition)__		++this.transactionsStarted__		if (logger.isInfoEnabled()) {_			logger.info(String.format(_				"Began transaction (%s) for test context %s_ transaction manager [%s]_ rollback [%s]",_				this.transactionsStarted, this.testContext, this.transactionManager, flaggedForRollback))__		}_	};start,a,new,transaction,for,the,configured,linkplain,get,test,context,test,context,p,only,call,this,method,if,link,end,transaction,has,been,called,or,if,no,transaction,has,been,previously,started,throws,transaction,exception,if,starting,the,transaction,fails;void,start,transaction,if,this,transaction,status,null,throw,new,illegal,state,exception,cannot,start,a,new,transaction,without,ending,the,existing,transaction,first,this,flagged,for,rollback,this,default,rollback,this,transaction,status,this,transaction,manager,get,transaction,this,transaction,definition,this,transactions,started,if,logger,is,info,enabled,logger,info,string,format,began,transaction,s,for,test,context,s,transaction,manager,s,rollback,s,this,transactions,started,this,test,context,this,transaction,manager,flagged,for,rollback
TransactionContext -> void startTransaction();1413848647;Start a new transaction for the configured {@linkplain #getTestContext test context}._<p>Only call this method if {@link #endTransaction} has been called or if no_transaction has been previously started._@throws TransactionException if starting the transaction fails;void startTransaction() {_		if (this.transactionStatus != null) {_			throw new IllegalStateException(_				"Cannot start a new transaction without ending the existing transaction first.")__		}_		this.flaggedForRollback = this.defaultRollback__		this.transactionStatus = this.transactionManager.getTransaction(this.transactionDefinition)__		++this.transactionsStarted__		if (logger.isInfoEnabled()) {_			logger.info(String.format(_				"Began transaction (%s) for test context %s_ transaction manager [%s]_ rollback [%s]",_				this.transactionsStarted, this.testContext, this.transactionManager, flaggedForRollback))__		}_	};start,a,new,transaction,for,the,configured,linkplain,get,test,context,test,context,p,only,call,this,method,if,link,end,transaction,has,been,called,or,if,no,transaction,has,been,previously,started,throws,transaction,exception,if,starting,the,transaction,fails;void,start,transaction,if,this,transaction,status,null,throw,new,illegal,state,exception,cannot,start,a,new,transaction,without,ending,the,existing,transaction,first,this,flagged,for,rollback,this,default,rollback,this,transaction,status,this,transaction,manager,get,transaction,this,transaction,definition,this,transactions,started,if,logger,is,info,enabled,logger,info,string,format,began,transaction,s,for,test,context,s,transaction,manager,s,rollback,s,this,transactions,started,this,test,context,this,transaction,manager,flagged,for,rollback
TransactionContext -> void startTransaction();1468334463;Start a new transaction for the configured {@linkplain #getTestContext test context}._<p>Only call this method if {@link #endTransaction} has been called or if no_transaction has been previously started._@throws TransactionException if starting the transaction fails;void startTransaction() {_		Assert.state(this.transactionStatus == null,_				"Cannot start a new transaction without ending the existing transaction first.")__		this.flaggedForRollback = this.defaultRollback__		this.transactionStatus = this.transactionManager.getTransaction(this.transactionDefinition)__		++this.transactionsStarted__		if (logger.isInfoEnabled()) {_			logger.info(String.format(_				"Began transaction (%s) for test context %s_ transaction manager [%s]_ rollback [%s]",_				this.transactionsStarted, this.testContext, this.transactionManager, flaggedForRollback))__		}_	};start,a,new,transaction,for,the,configured,linkplain,get,test,context,test,context,p,only,call,this,method,if,link,end,transaction,has,been,called,or,if,no,transaction,has,been,previously,started,throws,transaction,exception,if,starting,the,transaction,fails;void,start,transaction,assert,state,this,transaction,status,null,cannot,start,a,new,transaction,without,ending,the,existing,transaction,first,this,flagged,for,rollback,this,default,rollback,this,transaction,status,this,transaction,manager,get,transaction,this,transaction,definition,this,transactions,started,if,logger,is,info,enabled,logger,info,string,format,began,transaction,s,for,test,context,s,transaction,manager,s,rollback,s,this,transactions,started,this,test,context,this,transaction,manager,flagged,for,rollback
TransactionContext -> void startTransaction();1496955179;Start a new transaction for the configured test context._<p>Only call this method if {@link #endTransaction} has been called or if no_transaction has been previously started._@throws TransactionException if starting the transaction fails;void startTransaction() {_		Assert.state(this.transactionStatus == null,_				"Cannot start a new transaction without ending the existing transaction first.")__		this.flaggedForRollback = this.defaultRollback__		this.transactionStatus = this.transactionManager.getTransaction(this.transactionDefinition)__		++this.transactionsStarted__		if (logger.isInfoEnabled()) {_			logger.info(String.format(_				"Began transaction (%s) for test context %s_ transaction manager [%s]_ rollback [%s]",_				this.transactionsStarted, this.testContext, this.transactionManager, flaggedForRollback))__		}_	};start,a,new,transaction,for,the,configured,test,context,p,only,call,this,method,if,link,end,transaction,has,been,called,or,if,no,transaction,has,been,previously,started,throws,transaction,exception,if,starting,the,transaction,fails;void,start,transaction,assert,state,this,transaction,status,null,cannot,start,a,new,transaction,without,ending,the,existing,transaction,first,this,flagged,for,rollback,this,default,rollback,this,transaction,status,this,transaction,manager,get,transaction,this,transaction,definition,this,transactions,started,if,logger,is,info,enabled,logger,info,string,format,began,transaction,s,for,test,context,s,transaction,manager,s,rollback,s,this,transactions,started,this,test,context,this,transaction,manager,flagged,for,rollback
TransactionContext -> void startTransaction();1498780456;Start a new transaction for the configured test context._<p>Only call this method if {@link #endTransaction} has been called or if no_transaction has been previously started._@throws TransactionException if starting the transaction fails;void startTransaction() {_		Assert.state(this.transactionStatus == null,_				"Cannot start a new transaction without ending the existing transaction first.")__		this.flaggedForRollback = this.defaultRollback__		this.transactionStatus = this.transactionManager.getTransaction(this.transactionDefinition)__		++this.transactionsStarted__		if (logger.isInfoEnabled()) {_			logger.info(String.format(_				"Began transaction (%s) for test context %s_ transaction manager [%s]_ rollback [%s]",_				this.transactionsStarted, this.testContext, this.transactionManager, flaggedForRollback))__		}_	};start,a,new,transaction,for,the,configured,test,context,p,only,call,this,method,if,link,end,transaction,has,been,called,or,if,no,transaction,has,been,previously,started,throws,transaction,exception,if,starting,the,transaction,fails;void,start,transaction,assert,state,this,transaction,status,null,cannot,start,a,new,transaction,without,ending,the,existing,transaction,first,this,flagged,for,rollback,this,default,rollback,this,transaction,status,this,transaction,manager,get,transaction,this,transaction,definition,this,transactions,started,if,logger,is,info,enabled,logger,info,string,format,began,transaction,s,for,test,context,s,transaction,manager,s,rollback,s,this,transactions,started,this,test,context,this,transaction,manager,flagged,for,rollback
TransactionContext -> void startTransaction();1506468851;Start a new transaction for the configured test context._<p>Only call this method if {@link #endTransaction} has been called or if no_transaction has been previously started._@throws TransactionException if starting the transaction fails;void startTransaction() {_		Assert.state(this.transactionStatus == null,_				"Cannot start a new transaction without ending the existing transaction first.")___		this.flaggedForRollback = this.defaultRollback__		this.transactionStatus = this.transactionManager.getTransaction(this.transactionDefinition)__		++this.transactionsStarted___		if (logger.isInfoEnabled()) {_			logger.info(String.format(_					"Began transaction (%s) for test context %s_ transaction manager [%s]_ rollback [%s]",_					this.transactionsStarted, this.testContext, this.transactionManager, flaggedForRollback))__		}_	};start,a,new,transaction,for,the,configured,test,context,p,only,call,this,method,if,link,end,transaction,has,been,called,or,if,no,transaction,has,been,previously,started,throws,transaction,exception,if,starting,the,transaction,fails;void,start,transaction,assert,state,this,transaction,status,null,cannot,start,a,new,transaction,without,ending,the,existing,transaction,first,this,flagged,for,rollback,this,default,rollback,this,transaction,status,this,transaction,manager,get,transaction,this,transaction,definition,this,transactions,started,if,logger,is,info,enabled,logger,info,string,format,began,transaction,s,for,test,context,s,transaction,manager,s,rollback,s,this,transactions,started,this,test,context,this,transaction,manager,flagged,for,rollback
TransactionContext -> void startTransaction();1520251235;Start a new transaction for the configured test context._<p>Only call this method if {@link #endTransaction} has been called or if no_transaction has been previously started._@throws TransactionException if starting the transaction fails;void startTransaction() {_		Assert.state(this.transactionStatus == null,_				"Cannot start a new transaction without ending the existing transaction first")___		this.flaggedForRollback = this.defaultRollback__		this.transactionStatus = this.transactionManager.getTransaction(this.transactionDefinition)__		int transactionsStarted = this.transactionsStarted.incrementAndGet()___		if (logger.isInfoEnabled()) {_			logger.info(String.format(_					"Began transaction (%s) for test context %s_ transaction manager [%s]_ rollback [%s]",_					transactionsStarted, this.testContext, this.transactionManager, flaggedForRollback))__		}_	};start,a,new,transaction,for,the,configured,test,context,p,only,call,this,method,if,link,end,transaction,has,been,called,or,if,no,transaction,has,been,previously,started,throws,transaction,exception,if,starting,the,transaction,fails;void,start,transaction,assert,state,this,transaction,status,null,cannot,start,a,new,transaction,without,ending,the,existing,transaction,first,this,flagged,for,rollback,this,default,rollback,this,transaction,status,this,transaction,manager,get,transaction,this,transaction,definition,int,transactions,started,this,transactions,started,increment,and,get,if,logger,is,info,enabled,logger,info,string,format,began,transaction,s,for,test,context,s,transaction,manager,s,rollback,s,transactions,started,this,test,context,this,transaction,manager,flagged,for,rollback
TransactionContext -> void startTransaction();1530174524;Start a new transaction for the configured test context._<p>Only call this method if {@link #endTransaction} has been called or if no_transaction has been previously started._@throws TransactionException if starting the transaction fails;void startTransaction() {_		Assert.state(this.transactionStatus == null,_				"Cannot start a new transaction without ending the existing transaction first")___		this.flaggedForRollback = this.defaultRollback__		this.transactionStatus = this.transactionManager.getTransaction(this.transactionDefinition)__		int transactionsStarted = this.transactionsStarted.incrementAndGet()___		if (logger.isInfoEnabled()) {_			logger.info(String.format(_					"Began transaction (%s) for test context %s_ transaction manager [%s]_ rollback [%s]",_					transactionsStarted, this.testContext, this.transactionManager, this.flaggedForRollback))__		}_	};start,a,new,transaction,for,the,configured,test,context,p,only,call,this,method,if,link,end,transaction,has,been,called,or,if,no,transaction,has,been,previously,started,throws,transaction,exception,if,starting,the,transaction,fails;void,start,transaction,assert,state,this,transaction,status,null,cannot,start,a,new,transaction,without,ending,the,existing,transaction,first,this,flagged,for,rollback,this,default,rollback,this,transaction,status,this,transaction,manager,get,transaction,this,transaction,definition,int,transactions,started,this,transactions,started,increment,and,get,if,logger,is,info,enabled,logger,info,string,format,began,transaction,s,for,test,context,s,transaction,manager,s,rollback,s,transactions,started,this,test,context,this,transaction,manager,this,flagged,for,rollback
TransactionContext -> void endTransaction();1404334604;Immediately force a <em>commit</em> or <em>rollback</em> of the transaction_for the configured {@linkplain #getTestContext test context}, according to_the {@linkplain #isFlaggedForRollback rollback flag}.;void endTransaction() {_		if (logger.isTraceEnabled()) {_			logger.trace(String.format(_				"Ending transaction for test context %s_ transaction status [%s]_ rollback [%s]", this.testContext,_				this.transactionStatus, flaggedForRollback))__		}_		if (this.transactionStatus == null) {_			throw new IllegalStateException(String.format(_				"Failed to end transaction for test context %s: transaction does not exist.", this.testContext))__		}__		try {_			if (flaggedForRollback) {_				this.transactionManager.rollback(this.transactionStatus)__			}_			else {_				this.transactionManager.commit(this.transactionStatus)__			}_		}_		finally {_			this.transactionStatus = null__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("%s transaction after test execution for test context %s.",_				(flaggedForRollback ? "Rolled back" : "Committed"), this.testContext))__		}_	};immediately,force,a,em,commit,em,or,em,rollback,em,of,the,transaction,for,the,configured,linkplain,get,test,context,test,context,according,to,the,linkplain,is,flagged,for,rollback,rollback,flag;void,end,transaction,if,logger,is,trace,enabled,logger,trace,string,format,ending,transaction,for,test,context,s,transaction,status,s,rollback,s,this,test,context,this,transaction,status,flagged,for,rollback,if,this,transaction,status,null,throw,new,illegal,state,exception,string,format,failed,to,end,transaction,for,test,context,s,transaction,does,not,exist,this,test,context,try,if,flagged,for,rollback,this,transaction,manager,rollback,this,transaction,status,else,this,transaction,manager,commit,this,transaction,status,finally,this,transaction,status,null,if,logger,is,info,enabled,logger,info,string,format,s,transaction,after,test,execution,for,test,context,s,flagged,for,rollback,rolled,back,committed,this,test,context
TransactionContext -> void endTransaction();1405696193;Immediately force a <em>commit</em> or <em>rollback</em> of the transaction_for the configured {@linkplain #getTestContext test context}, according to_the {@linkplain #isFlaggedForRollback rollback flag}.;void endTransaction() {_		if (logger.isTraceEnabled()) {_			logger.trace(String.format(_				"Ending transaction for test context %s_ transaction status [%s]_ rollback [%s]", this.testContext,_				this.transactionStatus, flaggedForRollback))__		}_		if (this.transactionStatus == null) {_			throw new IllegalStateException(String.format(_				"Failed to end transaction for test context %s: transaction does not exist.", this.testContext))__		}__		try {_			if (flaggedForRollback) {_				this.transactionManager.rollback(this.transactionStatus)__			}_			else {_				this.transactionManager.commit(this.transactionStatus)__			}_		}_		finally {_			this.transactionStatus = null__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("%s transaction for test context %s.", (flaggedForRollback ? "Rolled back"_					: "Committed"), this.testContext))__		}_	};immediately,force,a,em,commit,em,or,em,rollback,em,of,the,transaction,for,the,configured,linkplain,get,test,context,test,context,according,to,the,linkplain,is,flagged,for,rollback,rollback,flag;void,end,transaction,if,logger,is,trace,enabled,logger,trace,string,format,ending,transaction,for,test,context,s,transaction,status,s,rollback,s,this,test,context,this,transaction,status,flagged,for,rollback,if,this,transaction,status,null,throw,new,illegal,state,exception,string,format,failed,to,end,transaction,for,test,context,s,transaction,does,not,exist,this,test,context,try,if,flagged,for,rollback,this,transaction,manager,rollback,this,transaction,status,else,this,transaction,manager,commit,this,transaction,status,finally,this,transaction,status,null,if,logger,is,info,enabled,logger,info,string,format,s,transaction,for,test,context,s,flagged,for,rollback,rolled,back,committed,this,test,context
TransactionContext -> void endTransaction();1413848647;Immediately force a <em>commit</em> or <em>rollback</em> of the transaction_for the configured {@linkplain #getTestContext test context}, according to_the {@linkplain #isFlaggedForRollback rollback flag}.;void endTransaction() {_		if (logger.isTraceEnabled()) {_			logger.trace(String.format(_				"Ending transaction for test context %s_ transaction status [%s]_ rollback [%s]", this.testContext,_				this.transactionStatus, flaggedForRollback))__		}_		if (this.transactionStatus == null) {_			throw new IllegalStateException(String.format(_				"Failed to end transaction for test context %s: transaction does not exist.", this.testContext))__		}__		try {_			if (flaggedForRollback) {_				this.transactionManager.rollback(this.transactionStatus)__			}_			else {_				this.transactionManager.commit(this.transactionStatus)__			}_		}_		finally {_			this.transactionStatus = null__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("%s transaction for test context %s.", (flaggedForRollback ? "Rolled back"_					: "Committed"), this.testContext))__		}_	};immediately,force,a,em,commit,em,or,em,rollback,em,of,the,transaction,for,the,configured,linkplain,get,test,context,test,context,according,to,the,linkplain,is,flagged,for,rollback,rollback,flag;void,end,transaction,if,logger,is,trace,enabled,logger,trace,string,format,ending,transaction,for,test,context,s,transaction,status,s,rollback,s,this,test,context,this,transaction,status,flagged,for,rollback,if,this,transaction,status,null,throw,new,illegal,state,exception,string,format,failed,to,end,transaction,for,test,context,s,transaction,does,not,exist,this,test,context,try,if,flagged,for,rollback,this,transaction,manager,rollback,this,transaction,status,else,this,transaction,manager,commit,this,transaction,status,finally,this,transaction,status,null,if,logger,is,info,enabled,logger,info,string,format,s,transaction,for,test,context,s,flagged,for,rollback,rolled,back,committed,this,test,context
TransactionContext -> void endTransaction();1468334463;Immediately force a <em>commit</em> or <em>rollback</em> of the transaction_for the configured {@linkplain #getTestContext test context}, according to_the {@linkplain #isFlaggedForRollback rollback flag}.;void endTransaction() {_		if (logger.isTraceEnabled()) {_			logger.trace(String.format(_				"Ending transaction for test context %s_ transaction status [%s]_ rollback [%s]", this.testContext,_				this.transactionStatus, flaggedForRollback))__		}_		Assert.state(this.transactionStatus != null, () -> String.format(_				"Failed to end transaction for test context %s: transaction does not exist.", this.testContext))___		try {_			if (flaggedForRollback) {_				this.transactionManager.rollback(this.transactionStatus)__			}_			else {_				this.transactionManager.commit(this.transactionStatus)__			}_		}_		finally {_			this.transactionStatus = null__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("%s transaction for test context %s.", (flaggedForRollback ? "Rolled back"_					: "Committed"), this.testContext))__		}_	};immediately,force,a,em,commit,em,or,em,rollback,em,of,the,transaction,for,the,configured,linkplain,get,test,context,test,context,according,to,the,linkplain,is,flagged,for,rollback,rollback,flag;void,end,transaction,if,logger,is,trace,enabled,logger,trace,string,format,ending,transaction,for,test,context,s,transaction,status,s,rollback,s,this,test,context,this,transaction,status,flagged,for,rollback,assert,state,this,transaction,status,null,string,format,failed,to,end,transaction,for,test,context,s,transaction,does,not,exist,this,test,context,try,if,flagged,for,rollback,this,transaction,manager,rollback,this,transaction,status,else,this,transaction,manager,commit,this,transaction,status,finally,this,transaction,status,null,if,logger,is,info,enabled,logger,info,string,format,s,transaction,for,test,context,s,flagged,for,rollback,rolled,back,committed,this,test,context
TransactionContext -> void endTransaction();1496955179;Immediately force a <em>commit</em> or <em>rollback</em> of the transaction for the_configured test context, according to the {@linkplain #isFlaggedForRollback rollback flag}.;void endTransaction() {_		if (logger.isTraceEnabled()) {_			logger.trace(String.format(_				"Ending transaction for test context %s_ transaction status [%s]_ rollback [%s]", this.testContext,_				this.transactionStatus, flaggedForRollback))__		}_		Assert.state(this.transactionStatus != null, () -> String.format(_				"Failed to end transaction for test context %s: transaction does not exist.", this.testContext))___		try {_			if (flaggedForRollback) {_				this.transactionManager.rollback(this.transactionStatus)__			}_			else {_				this.transactionManager.commit(this.transactionStatus)__			}_		}_		finally {_			this.transactionStatus = null__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("%s transaction for test context %s.", (flaggedForRollback ? "Rolled back"_					: "Committed"), this.testContext))__		}_	};immediately,force,a,em,commit,em,or,em,rollback,em,of,the,transaction,for,the,configured,test,context,according,to,the,linkplain,is,flagged,for,rollback,rollback,flag;void,end,transaction,if,logger,is,trace,enabled,logger,trace,string,format,ending,transaction,for,test,context,s,transaction,status,s,rollback,s,this,test,context,this,transaction,status,flagged,for,rollback,assert,state,this,transaction,status,null,string,format,failed,to,end,transaction,for,test,context,s,transaction,does,not,exist,this,test,context,try,if,flagged,for,rollback,this,transaction,manager,rollback,this,transaction,status,else,this,transaction,manager,commit,this,transaction,status,finally,this,transaction,status,null,if,logger,is,info,enabled,logger,info,string,format,s,transaction,for,test,context,s,flagged,for,rollback,rolled,back,committed,this,test,context
TransactionContext -> void endTransaction();1498780456;Immediately force a <em>commit</em> or <em>rollback</em> of the transaction for the_configured test context, according to the {@linkplain #isFlaggedForRollback rollback flag}.;void endTransaction() {_		if (logger.isTraceEnabled()) {_			logger.trace(String.format(_				"Ending transaction for test context %s_ transaction status [%s]_ rollback [%s]", this.testContext,_				this.transactionStatus, flaggedForRollback))__		}_		Assert.state(this.transactionStatus != null, () -> String.format(_				"Failed to end transaction for test context %s: transaction does not exist.", this.testContext))___		try {_			if (flaggedForRollback) {_				this.transactionManager.rollback(this.transactionStatus)__			}_			else {_				this.transactionManager.commit(this.transactionStatus)__			}_		}_		finally {_			this.transactionStatus = null__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("%s transaction for test context %s.", (flaggedForRollback ? "Rolled back"_					: "Committed"), this.testContext))__		}_	};immediately,force,a,em,commit,em,or,em,rollback,em,of,the,transaction,for,the,configured,test,context,according,to,the,linkplain,is,flagged,for,rollback,rollback,flag;void,end,transaction,if,logger,is,trace,enabled,logger,trace,string,format,ending,transaction,for,test,context,s,transaction,status,s,rollback,s,this,test,context,this,transaction,status,flagged,for,rollback,assert,state,this,transaction,status,null,string,format,failed,to,end,transaction,for,test,context,s,transaction,does,not,exist,this,test,context,try,if,flagged,for,rollback,this,transaction,manager,rollback,this,transaction,status,else,this,transaction,manager,commit,this,transaction,status,finally,this,transaction,status,null,if,logger,is,info,enabled,logger,info,string,format,s,transaction,for,test,context,s,flagged,for,rollback,rolled,back,committed,this,test,context
TransactionContext -> void endTransaction();1506468851;Immediately force a <em>commit</em> or <em>rollback</em> of the transaction for the_configured test context, according to the {@linkplain #isFlaggedForRollback rollback flag}.;void endTransaction() {_		if (logger.isTraceEnabled()) {_			logger.trace(String.format(_					"Ending transaction for test context %s_ transaction status [%s]_ rollback [%s]",_					this.testContext, this.transactionStatus, this.flaggedForRollback))__		}_		Assert.state(this.transactionStatus != null, () -> String.format(_				"Failed to end transaction for test context %s: transaction does not exist.", this.testContext))___		try {_			if (this.flaggedForRollback) {_				this.transactionManager.rollback(this.transactionStatus)__			}_			else {_				this.transactionManager.commit(this.transactionStatus)__			}_		}_		finally {_			this.transactionStatus = null__		}__		if (logger.isInfoEnabled()) {_			logger.info(String.format("%s transaction for test context %s.",_					(this.flaggedForRollback ? "Rolled back" : "Committed"), this.testContext))__		}_	};immediately,force,a,em,commit,em,or,em,rollback,em,of,the,transaction,for,the,configured,test,context,according,to,the,linkplain,is,flagged,for,rollback,rollback,flag;void,end,transaction,if,logger,is,trace,enabled,logger,trace,string,format,ending,transaction,for,test,context,s,transaction,status,s,rollback,s,this,test,context,this,transaction,status,this,flagged,for,rollback,assert,state,this,transaction,status,null,string,format,failed,to,end,transaction,for,test,context,s,transaction,does,not,exist,this,test,context,try,if,this,flagged,for,rollback,this,transaction,manager,rollback,this,transaction,status,else,this,transaction,manager,commit,this,transaction,status,finally,this,transaction,status,null,if,logger,is,info,enabled,logger,info,string,format,s,transaction,for,test,context,s,this,flagged,for,rollback,rolled,back,committed,this,test,context
TransactionContext -> void endTransaction();1520251235;Immediately force a <em>commit</em> or <em>rollback</em> of the transaction for the_configured test context, according to the {@linkplain #isFlaggedForRollback rollback flag}.;void endTransaction() {_		if (logger.isTraceEnabled()) {_			logger.trace(String.format(_					"Ending transaction for test context %s_ transaction status [%s]_ rollback [%s]",_					this.testContext, this.transactionStatus, this.flaggedForRollback))__		}_		Assert.state(this.transactionStatus != null,_				() -> "Failed to end transaction - transaction does not exist: " + this.testContext)___		try {_			if (this.flaggedForRollback) {_				this.transactionManager.rollback(this.transactionStatus)__			}_			else {_				this.transactionManager.commit(this.transactionStatus)__			}_		}_		finally {_			this.transactionStatus = null__		}__		if (logger.isInfoEnabled()) {_			logger.info((this.flaggedForRollback ? "Rolled back" : "Committed") +_					" transaction for test: " + this.testContext)__		}_	};immediately,force,a,em,commit,em,or,em,rollback,em,of,the,transaction,for,the,configured,test,context,according,to,the,linkplain,is,flagged,for,rollback,rollback,flag;void,end,transaction,if,logger,is,trace,enabled,logger,trace,string,format,ending,transaction,for,test,context,s,transaction,status,s,rollback,s,this,test,context,this,transaction,status,this,flagged,for,rollback,assert,state,this,transaction,status,null,failed,to,end,transaction,transaction,does,not,exist,this,test,context,try,if,this,flagged,for,rollback,this,transaction,manager,rollback,this,transaction,status,else,this,transaction,manager,commit,this,transaction,status,finally,this,transaction,status,null,if,logger,is,info,enabled,logger,info,this,flagged,for,rollback,rolled,back,committed,transaction,for,test,this,test,context
TransactionContext -> void endTransaction();1530174524;Immediately force a <em>commit</em> or <em>rollback</em> of the transaction for the_configured test context, according to the {@linkplain #isFlaggedForRollback rollback flag}.;void endTransaction() {_		if (logger.isTraceEnabled()) {_			logger.trace(String.format(_					"Ending transaction for test context %s_ transaction status [%s]_ rollback [%s]",_					this.testContext, this.transactionStatus, this.flaggedForRollback))__		}_		Assert.state(this.transactionStatus != null,_				() -> "Failed to end transaction - transaction does not exist: " + this.testContext)___		try {_			if (this.flaggedForRollback) {_				this.transactionManager.rollback(this.transactionStatus)__			}_			else {_				this.transactionManager.commit(this.transactionStatus)__			}_		}_		finally {_			this.transactionStatus = null__		}__		if (logger.isInfoEnabled()) {_			logger.info((this.flaggedForRollback ? "Rolled back" : "Committed") +_					" transaction for test: " + this.testContext)__		}_	};immediately,force,a,em,commit,em,or,em,rollback,em,of,the,transaction,for,the,configured,test,context,according,to,the,linkplain,is,flagged,for,rollback,rollback,flag;void,end,transaction,if,logger,is,trace,enabled,logger,trace,string,format,ending,transaction,for,test,context,s,transaction,status,s,rollback,s,this,test,context,this,transaction,status,this,flagged,for,rollback,assert,state,this,transaction,status,null,failed,to,end,transaction,transaction,does,not,exist,this,test,context,try,if,this,flagged,for,rollback,this,transaction,manager,rollback,this,transaction,status,else,this,transaction,manager,commit,this,transaction,status,finally,this,transaction,status,null,if,logger,is,info,enabled,logger,info,this,flagged,for,rollback,rolled,back,committed,transaction,for,test,this,test,context
