commented;modifiers;parameterAmount;loc;comment;code
false;;0;4;;@Nullable TransactionStatus getTransactionStatus() {     return this.transactionStatus. }
true;;0;3;/**  * Has the current transaction been flagged for rollback?  * <p>In other words, should we roll back or commit the current transaction  * upon completion of the current test?  */ ;/**  * Has the current transaction been flagged for rollback?  * <p>In other words, should we roll back or commit the current transaction  * upon completion of the current test?  */ boolean isFlaggedForRollback() {     return this.flaggedForRollback. }
false;;1;5;;void setFlaggedForRollback(boolean flaggedForRollback) {     Assert.state(this.transactionStatus != null, () -> "Failed to set rollback flag - transaction does not exist: " + this.testContext).     this.flaggedForRollback = flaggedForRollback. }
true;;0;14;/**  * Start a new transaction for the configured test context.  * <p>Only call this method if {@link #endTransaction} has been called or if no  * transaction has been previously started.  * @throws TransactionException if starting the transaction fails  */ ;/**  * Start a new transaction for the configured test context.  * <p>Only call this method if {@link #endTransaction} has been called or if no  * transaction has been previously started.  * @throws TransactionException if starting the transaction fails  */ void startTransaction() {     Assert.state(this.transactionStatus == null, "Cannot start a new transaction without ending the existing transaction first").     this.flaggedForRollback = this.defaultRollback.     this.transactionStatus = this.transactionManager.getTransaction(this.transactionDefinition).     int transactionsStarted = this.transactionsStarted.incrementAndGet().     if (logger.isInfoEnabled()) {         logger.info(String.format("Began transaction (%s) for test context %s. transaction manager [%s]. rollback [%s]", transactionsStarted, this.testContext, this.transactionManager, this.flaggedForRollback)).     } }
true;;0;26;/**  * Immediately force a <em>commit</em> or <em>rollback</em> of the transaction for the  * configured test context, according to the {@linkplain #isFlaggedForRollback rollback flag}.  */ ;/**  * Immediately force a <em>commit</em> or <em>rollback</em> of the transaction for the  * configured test context, according to the {@linkplain #isFlaggedForRollback rollback flag}.  */ void endTransaction() {     if (logger.isTraceEnabled()) {         logger.trace(String.format("Ending transaction for test context %s. transaction status [%s]. rollback [%s]", this.testContext, this.transactionStatus, this.flaggedForRollback)).     }     Assert.state(this.transactionStatus != null, () -> "Failed to end transaction - transaction does not exist: " + this.testContext).     try {         if (this.flaggedForRollback) {             this.transactionManager.rollback(this.transactionStatus).         } else {             this.transactionManager.commit(this.transactionStatus).         }     } finally {         this.transactionStatus = null.     }     if (logger.isInfoEnabled()) {         logger.info((this.flaggedForRollback ? "Rolled back" : "Committed") + " transaction for test: " + this.testContext).     } }
