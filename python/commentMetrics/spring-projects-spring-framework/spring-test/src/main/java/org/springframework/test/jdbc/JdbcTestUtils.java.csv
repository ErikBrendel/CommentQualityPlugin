# id;timestamp;commentText;codeText;commentWords;codeWords
JdbcTestUtils -> public static int deleteFromTableWhere( 			JdbcTemplate jdbcTemplate, String tableName, String whereClause, Object... args);1496955179;Delete rows from the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code DELETE}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "DELETE FROM person WHERE name = 'Bob' and age > 25"}._<p>As an alternative to hard-coded values, the {@code "?"} placeholder can_be used within the {@code WHERE} clause, binding to the given arguments._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to delete rows from_@param whereClause the {@code WHERE} clause to append to the query_@param args arguments to bind to the query (leaving it to the PreparedStatement_to guess the corresponding SQL type)_ may also contain {@link SqlParameterValue}_objects which indicate not only the argument value but also the SQL type and_optionally the scale._@return the number of rows deleted from the table;public static int deleteFromTableWhere(_			JdbcTemplate jdbcTemplate, String tableName, String whereClause, Object... args) {__		String sql = "DELETE FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		int rowCount = (args.length > 0 ? jdbcTemplate.update(sql, args) : jdbcTemplate.update(sql))__		if (logger.isInfoEnabled()) {_			logger.info("Deleted " + rowCount + " rows from table " + tableName)__		}_		return rowCount__	};delete,rows,from,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,delete,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,delete,from,person,where,name,bob,and,age,25,p,as,an,alternative,to,hard,coded,values,the,code,placeholder,can,be,used,within,the,code,where,clause,binding,to,the,given,arguments,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,delete,rows,from,param,where,clause,the,code,where,clause,to,append,to,the,query,param,args,arguments,to,bind,to,the,query,leaving,it,to,the,prepared,statement,to,guess,the,corresponding,sql,type,may,also,contain,link,sql,parameter,value,objects,which,indicate,not,only,the,argument,value,but,also,the,sql,type,and,optionally,the,scale,return,the,number,of,rows,deleted,from,the,table;public,static,int,delete,from,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,object,args,string,sql,delete,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,int,row,count,args,length,0,jdbc,template,update,sql,args,jdbc,template,update,sql,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,row,count
JdbcTestUtils -> public static int deleteFromTableWhere( 			JdbcTemplate jdbcTemplate, String tableName, String whereClause, Object... args);1530174524;Delete rows from the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code DELETE}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "DELETE FROM person WHERE name = 'Bob' and age > 25"}._<p>As an alternative to hard-coded values, the {@code "?"} placeholder can_be used within the {@code WHERE} clause, binding to the given arguments._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to delete rows from_@param whereClause the {@code WHERE} clause to append to the query_@param args arguments to bind to the query (leaving it to the PreparedStatement_to guess the corresponding SQL type)_ may also contain {@link SqlParameterValue}_objects which indicate not only the argument value but also the SQL type and_optionally the scale._@return the number of rows deleted from the table;public static int deleteFromTableWhere(_			JdbcTemplate jdbcTemplate, String tableName, String whereClause, Object... args) {__		String sql = "DELETE FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		int rowCount = (args.length > 0 ? jdbcTemplate.update(sql, args) : jdbcTemplate.update(sql))__		if (logger.isInfoEnabled()) {_			logger.info("Deleted " + rowCount + " rows from table " + tableName)__		}_		return rowCount__	};delete,rows,from,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,delete,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,delete,from,person,where,name,bob,and,age,25,p,as,an,alternative,to,hard,coded,values,the,code,placeholder,can,be,used,within,the,code,where,clause,binding,to,the,given,arguments,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,delete,rows,from,param,where,clause,the,code,where,clause,to,append,to,the,query,param,args,arguments,to,bind,to,the,query,leaving,it,to,the,prepared,statement,to,guess,the,corresponding,sql,type,may,also,contain,link,sql,parameter,value,objects,which,indicate,not,only,the,argument,value,but,also,the,sql,type,and,optionally,the,scale,return,the,number,of,rows,deleted,from,the,table;public,static,int,delete,from,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,object,args,string,sql,delete,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,int,row,count,args,length,0,jdbc,template,update,sql,args,jdbc,template,update,sql,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,row,count
JdbcTestUtils -> public static int deleteFromTableWhere( 			JdbcTemplate jdbcTemplate, String tableName, String whereClause, Object... args);1530405080;Delete rows from the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code DELETE}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "DELETE FROM person WHERE name = 'Bob' and age > 25"}._<p>As an alternative to hard-coded values, the {@code "?"} placeholder can_be used within the {@code WHERE} clause, binding to the given arguments._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to delete rows from_@param whereClause the {@code WHERE} clause to append to the query_@param args arguments to bind to the query (leaving it to the PreparedStatement_to guess the corresponding SQL type)_ may also contain {@link SqlParameterValue}_objects which indicate not only the argument value but also the SQL type and_optionally the scale._@return the number of rows deleted from the table;public static int deleteFromTableWhere(_			JdbcTemplate jdbcTemplate, String tableName, String whereClause, Object... args) {__		String sql = "DELETE FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		int rowCount = (args.length > 0 ? jdbcTemplate.update(sql, args) : jdbcTemplate.update(sql))__		if (logger.isInfoEnabled()) {_			logger.info("Deleted " + rowCount + " rows from table " + tableName)__		}_		return rowCount__	};delete,rows,from,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,delete,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,delete,from,person,where,name,bob,and,age,25,p,as,an,alternative,to,hard,coded,values,the,code,placeholder,can,be,used,within,the,code,where,clause,binding,to,the,given,arguments,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,delete,rows,from,param,where,clause,the,code,where,clause,to,append,to,the,query,param,args,arguments,to,bind,to,the,query,leaving,it,to,the,prepared,statement,to,guess,the,corresponding,sql,type,may,also,contain,link,sql,parameter,value,objects,which,indicate,not,only,the,argument,value,but,also,the,sql,type,and,optionally,the,scale,return,the,number,of,rows,deleted,from,the,table;public,static,int,delete,from,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,object,args,string,sql,delete,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,int,row,count,args,length,0,jdbc,template,update,sql,args,jdbc,template,update,sql,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,row,count
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError) 			throws DataAccessException;1394708749;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see DatabasePopulatorUtils_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError)_			throws DataAccessException {_		ResourceDatabasePopulator databasePopulator = new ResourceDatabasePopulator()__		databasePopulator.setContinueOnError(continueOnError)__		databasePopulator.addScript(resource.getResource())__		databasePopulator.setSqlScriptEncoding(resource.getEncoding())___		DatabasePopulatorUtils.execute(databasePopulator, jdbcTemplate.getDataSource())__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,database,populator,utils,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,encoded,resource,resource,boolean,continue,on,error,throws,data,access,exception,resource,database,populator,database,populator,new,resource,database,populator,database,populator,set,continue,on,error,continue,on,error,database,populator,add,script,resource,get,resource,database,populator,set,sql,script,encoding,resource,get,encoding,database,populator,utils,execute,database,populator,jdbc,template,get,data,source
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError) 			throws DataAccessException;1394709692;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see DatabasePopulatorUtils_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError)_			throws DataAccessException {_		ResourceDatabasePopulator databasePopulator = new ResourceDatabasePopulator()__		databasePopulator.setContinueOnError(continueOnError)__		databasePopulator.addScript(resource.getResource())__		databasePopulator.setSqlScriptEncoding(resource.getEncoding())___		DatabasePopulatorUtils.execute(databasePopulator, jdbcTemplate.getDataSource())__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,database,populator,utils,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,encoded,resource,resource,boolean,continue,on,error,throws,data,access,exception,resource,database,populator,database,populator,new,resource,database,populator,database,populator,set,continue,on,error,continue,on,error,database,populator,add,script,resource,get,resource,database,populator,set,sql,script,encoding,resource,get,encoding,database,populator,utils,execute,database,populator,jdbc,template,get,data,source
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError) 			throws DataAccessException;1394714705;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see DatabasePopulatorUtils_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError)_			throws DataAccessException {_		DatabasePopulator databasePopulator = new ResourceDatabasePopulator(continueOnError, false,_			resource.getEncoding(), resource.getResource())__		DatabasePopulatorUtils.execute(databasePopulator, jdbcTemplate.getDataSource())__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,database,populator,utils,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,encoded,resource,resource,boolean,continue,on,error,throws,data,access,exception,database,populator,database,populator,new,resource,database,populator,continue,on,error,false,resource,get,encoding,resource,get,resource,database,populator,utils,execute,database,populator,jdbc,template,get,data,source
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError) 			throws DataAccessException;1394988251;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see DatabasePopulatorUtils_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError)_			throws DataAccessException {_		DatabasePopulator databasePopulator = new ResourceDatabasePopulator(continueOnError, false,_			resource.getEncoding(), resource.getResource())__		DatabasePopulatorUtils.execute(databasePopulator, jdbcTemplate.getDataSource())__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,database,populator,utils,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,encoded,resource,resource,boolean,continue,on,error,throws,data,access,exception,database,populator,database,populator,new,resource,database,populator,continue,on,error,false,resource,get,encoding,resource,get,resource,database,populator,utils,execute,database,populator,jdbc,template,get,data,source
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError) 			throws DataAccessException;1396191708;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError)_			throws DataAccessException {_		new ResourceDatabasePopulator(continueOnError, false, resource.getEncoding(), resource.getResource()).execute(jdbcTemplate.getDataSource())__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,encoded,resource,resource,boolean,continue,on,error,throws,data,access,exception,new,resource,database,populator,continue,on,error,false,resource,get,encoding,resource,get,resource,execute,jdbc,template,get,data,source
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError) 			throws DataAccessException;1396376545;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError)_			throws DataAccessException {_		new ResourceDatabasePopulator(continueOnError, false, resource.getEncoding(), resource.getResource()).execute(jdbcTemplate.getDataSource())__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,encoded,resource,resource,boolean,continue,on,error,throws,data,access,exception,new,resource,database,populator,continue,on,error,false,resource,get,encoding,resource,get,resource,execute,jdbc,template,get,data,source
JdbcTestUtils -> public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause, 			Object... args);1394708749;Delete rows from the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code DELETE}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "DELETE FROM person WHERE name = 'Bob' and age > 25"}._<p>As an alternative to hard-coded values, the {@code "?"} placeholder can_be used within the {@code WHERE} clause, binding to the given arguments._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to delete rows from_@param whereClause the {@code WHERE} clause to append to the query_@param args arguments to bind to the query (leaving it to the PreparedStatement_to guess the corresponding SQL type)_ may also contain {@link SqlParameterValue}_objects which indicate not only the argument value but also the SQL type and_optionally the scale._@return the number of rows deleted from the table;public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause,_			Object... args) {_		String sql = "DELETE FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		int rowCount = (args != null && args.length > 0 ? jdbcTemplate.update(sql, args) : jdbcTemplate.update(sql))__		if (logger.isInfoEnabled()) {_			logger.info("Deleted " + rowCount + " rows from table " + tableName)__		}_		return rowCount__	};delete,rows,from,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,delete,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,delete,from,person,where,name,bob,and,age,25,p,as,an,alternative,to,hard,coded,values,the,code,placeholder,can,be,used,within,the,code,where,clause,binding,to,the,given,arguments,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,delete,rows,from,param,where,clause,the,code,where,clause,to,append,to,the,query,param,args,arguments,to,bind,to,the,query,leaving,it,to,the,prepared,statement,to,guess,the,corresponding,sql,type,may,also,contain,link,sql,parameter,value,objects,which,indicate,not,only,the,argument,value,but,also,the,sql,type,and,optionally,the,scale,return,the,number,of,rows,deleted,from,the,table;public,static,int,delete,from,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,object,args,string,sql,delete,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,int,row,count,args,null,args,length,0,jdbc,template,update,sql,args,jdbc,template,update,sql,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,row,count
JdbcTestUtils -> public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause, 			Object... args);1394709692;Delete rows from the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code DELETE}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "DELETE FROM person WHERE name = 'Bob' and age > 25"}._<p>As an alternative to hard-coded values, the {@code "?"} placeholder can_be used within the {@code WHERE} clause, binding to the given arguments._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to delete rows from_@param whereClause the {@code WHERE} clause to append to the query_@param args arguments to bind to the query (leaving it to the PreparedStatement_to guess the corresponding SQL type)_ may also contain {@link SqlParameterValue}_objects which indicate not only the argument value but also the SQL type and_optionally the scale._@return the number of rows deleted from the table;public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause,_			Object... args) {_		String sql = "DELETE FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		int rowCount = (args != null && args.length > 0 ? jdbcTemplate.update(sql, args) : jdbcTemplate.update(sql))__		if (logger.isInfoEnabled()) {_			logger.info("Deleted " + rowCount + " rows from table " + tableName)__		}_		return rowCount__	};delete,rows,from,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,delete,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,delete,from,person,where,name,bob,and,age,25,p,as,an,alternative,to,hard,coded,values,the,code,placeholder,can,be,used,within,the,code,where,clause,binding,to,the,given,arguments,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,delete,rows,from,param,where,clause,the,code,where,clause,to,append,to,the,query,param,args,arguments,to,bind,to,the,query,leaving,it,to,the,prepared,statement,to,guess,the,corresponding,sql,type,may,also,contain,link,sql,parameter,value,objects,which,indicate,not,only,the,argument,value,but,also,the,sql,type,and,optionally,the,scale,return,the,number,of,rows,deleted,from,the,table;public,static,int,delete,from,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,object,args,string,sql,delete,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,int,row,count,args,null,args,length,0,jdbc,template,update,sql,args,jdbc,template,update,sql,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,row,count
JdbcTestUtils -> public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause, 			Object... args);1394714705;Delete rows from the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code DELETE}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "DELETE FROM person WHERE name = 'Bob' and age > 25"}._<p>As an alternative to hard-coded values, the {@code "?"} placeholder can_be used within the {@code WHERE} clause, binding to the given arguments._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to delete rows from_@param whereClause the {@code WHERE} clause to append to the query_@param args arguments to bind to the query (leaving it to the PreparedStatement_to guess the corresponding SQL type)_ may also contain {@link SqlParameterValue}_objects which indicate not only the argument value but also the SQL type and_optionally the scale._@return the number of rows deleted from the table;public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause,_			Object... args) {_		String sql = "DELETE FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		int rowCount = (args != null && args.length > 0 ? jdbcTemplate.update(sql, args) : jdbcTemplate.update(sql))__		if (logger.isInfoEnabled()) {_			logger.info("Deleted " + rowCount + " rows from table " + tableName)__		}_		return rowCount__	};delete,rows,from,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,delete,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,delete,from,person,where,name,bob,and,age,25,p,as,an,alternative,to,hard,coded,values,the,code,placeholder,can,be,used,within,the,code,where,clause,binding,to,the,given,arguments,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,delete,rows,from,param,where,clause,the,code,where,clause,to,append,to,the,query,param,args,arguments,to,bind,to,the,query,leaving,it,to,the,prepared,statement,to,guess,the,corresponding,sql,type,may,also,contain,link,sql,parameter,value,objects,which,indicate,not,only,the,argument,value,but,also,the,sql,type,and,optionally,the,scale,return,the,number,of,rows,deleted,from,the,table;public,static,int,delete,from,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,object,args,string,sql,delete,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,int,row,count,args,null,args,length,0,jdbc,template,update,sql,args,jdbc,template,update,sql,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,row,count
JdbcTestUtils -> public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause, 			Object... args);1394988251;Delete rows from the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code DELETE}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "DELETE FROM person WHERE name = 'Bob' and age > 25"}._<p>As an alternative to hard-coded values, the {@code "?"} placeholder can_be used within the {@code WHERE} clause, binding to the given arguments._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to delete rows from_@param whereClause the {@code WHERE} clause to append to the query_@param args arguments to bind to the query (leaving it to the PreparedStatement_to guess the corresponding SQL type)_ may also contain {@link SqlParameterValue}_objects which indicate not only the argument value but also the SQL type and_optionally the scale._@return the number of rows deleted from the table;public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause,_			Object... args) {_		String sql = "DELETE FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		int rowCount = (args != null && args.length > 0 ? jdbcTemplate.update(sql, args) : jdbcTemplate.update(sql))__		if (logger.isInfoEnabled()) {_			logger.info("Deleted " + rowCount + " rows from table " + tableName)__		}_		return rowCount__	};delete,rows,from,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,delete,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,delete,from,person,where,name,bob,and,age,25,p,as,an,alternative,to,hard,coded,values,the,code,placeholder,can,be,used,within,the,code,where,clause,binding,to,the,given,arguments,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,delete,rows,from,param,where,clause,the,code,where,clause,to,append,to,the,query,param,args,arguments,to,bind,to,the,query,leaving,it,to,the,prepared,statement,to,guess,the,corresponding,sql,type,may,also,contain,link,sql,parameter,value,objects,which,indicate,not,only,the,argument,value,but,also,the,sql,type,and,optionally,the,scale,return,the,number,of,rows,deleted,from,the,table;public,static,int,delete,from,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,object,args,string,sql,delete,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,int,row,count,args,null,args,length,0,jdbc,template,update,sql,args,jdbc,template,update,sql,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,row,count
JdbcTestUtils -> public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause, 			Object... args);1396191708;Delete rows from the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code DELETE}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "DELETE FROM person WHERE name = 'Bob' and age > 25"}._<p>As an alternative to hard-coded values, the {@code "?"} placeholder can_be used within the {@code WHERE} clause, binding to the given arguments._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to delete rows from_@param whereClause the {@code WHERE} clause to append to the query_@param args arguments to bind to the query (leaving it to the PreparedStatement_to guess the corresponding SQL type)_ may also contain {@link SqlParameterValue}_objects which indicate not only the argument value but also the SQL type and_optionally the scale._@return the number of rows deleted from the table;public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause,_			Object... args) {_		String sql = "DELETE FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		int rowCount = (args != null && args.length > 0 ? jdbcTemplate.update(sql, args) : jdbcTemplate.update(sql))__		if (logger.isInfoEnabled()) {_			logger.info("Deleted " + rowCount + " rows from table " + tableName)__		}_		return rowCount__	};delete,rows,from,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,delete,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,delete,from,person,where,name,bob,and,age,25,p,as,an,alternative,to,hard,coded,values,the,code,placeholder,can,be,used,within,the,code,where,clause,binding,to,the,given,arguments,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,delete,rows,from,param,where,clause,the,code,where,clause,to,append,to,the,query,param,args,arguments,to,bind,to,the,query,leaving,it,to,the,prepared,statement,to,guess,the,corresponding,sql,type,may,also,contain,link,sql,parameter,value,objects,which,indicate,not,only,the,argument,value,but,also,the,sql,type,and,optionally,the,scale,return,the,number,of,rows,deleted,from,the,table;public,static,int,delete,from,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,object,args,string,sql,delete,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,int,row,count,args,null,args,length,0,jdbc,template,update,sql,args,jdbc,template,update,sql,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,row,count
JdbcTestUtils -> public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause, 			Object... args);1396376545;Delete rows from the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code DELETE}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "DELETE FROM person WHERE name = 'Bob' and age > 25"}._<p>As an alternative to hard-coded values, the {@code "?"} placeholder can_be used within the {@code WHERE} clause, binding to the given arguments._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to delete rows from_@param whereClause the {@code WHERE} clause to append to the query_@param args arguments to bind to the query (leaving it to the PreparedStatement_to guess the corresponding SQL type)_ may also contain {@link SqlParameterValue}_objects which indicate not only the argument value but also the SQL type and_optionally the scale._@return the number of rows deleted from the table;public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause,_			Object... args) {_		String sql = "DELETE FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		int rowCount = (args != null && args.length > 0 ? jdbcTemplate.update(sql, args) : jdbcTemplate.update(sql))__		if (logger.isInfoEnabled()) {_			logger.info("Deleted " + rowCount + " rows from table " + tableName)__		}_		return rowCount__	};delete,rows,from,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,delete,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,delete,from,person,where,name,bob,and,age,25,p,as,an,alternative,to,hard,coded,values,the,code,placeholder,can,be,used,within,the,code,where,clause,binding,to,the,given,arguments,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,delete,rows,from,param,where,clause,the,code,where,clause,to,append,to,the,query,param,args,arguments,to,bind,to,the,query,leaving,it,to,the,prepared,statement,to,guess,the,corresponding,sql,type,may,also,contain,link,sql,parameter,value,objects,which,indicate,not,only,the,argument,value,but,also,the,sql,type,and,optionally,the,scale,return,the,number,of,rows,deleted,from,the,table;public,static,int,delete,from,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,object,args,string,sql,delete,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,int,row,count,args,null,args,length,0,jdbc,template,update,sql,args,jdbc,template,update,sql,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,row,count
JdbcTestUtils -> public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause, 			Object... args);1467726769;Delete rows from the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code DELETE}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "DELETE FROM person WHERE name = 'Bob' and age > 25"}._<p>As an alternative to hard-coded values, the {@code "?"} placeholder can_be used within the {@code WHERE} clause, binding to the given arguments._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to delete rows from_@param whereClause the {@code WHERE} clause to append to the query_@param args arguments to bind to the query (leaving it to the PreparedStatement_to guess the corresponding SQL type)_ may also contain {@link SqlParameterValue}_objects which indicate not only the argument value but also the SQL type and_optionally the scale._@return the number of rows deleted from the table;public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause,_			Object... args) {__		String sql = "DELETE FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		int rowCount = (args != null && args.length > 0 ? jdbcTemplate.update(sql, args) : jdbcTemplate.update(sql))__		if (logger.isInfoEnabled()) {_			logger.info("Deleted " + rowCount + " rows from table " + tableName)__		}_		return rowCount__	};delete,rows,from,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,delete,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,delete,from,person,where,name,bob,and,age,25,p,as,an,alternative,to,hard,coded,values,the,code,placeholder,can,be,used,within,the,code,where,clause,binding,to,the,given,arguments,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,delete,rows,from,param,where,clause,the,code,where,clause,to,append,to,the,query,param,args,arguments,to,bind,to,the,query,leaving,it,to,the,prepared,statement,to,guess,the,corresponding,sql,type,may,also,contain,link,sql,parameter,value,objects,which,indicate,not,only,the,argument,value,but,also,the,sql,type,and,optionally,the,scale,return,the,number,of,rows,deleted,from,the,table;public,static,int,delete,from,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,object,args,string,sql,delete,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,int,row,count,args,null,args,length,0,jdbc,template,update,sql,args,jdbc,template,update,sql,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,row,count
JdbcTestUtils -> public static String readScript(LineNumberReader lineNumberReader) throws IOException;1328020251;Read a script from the LineNumberReader and build a String containing the_lines.__@param lineNumberReader the <code>LineNumberReader</code> containing the_script to be processed_@return <code>String</code> containing the script lines_@throws IOException;public static String readScript(LineNumberReader lineNumberReader) throws IOException {_		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (StringUtils.hasText(currentStatement)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		return scriptBuilder.toString()__	};read,a,script,from,the,line,number,reader,and,build,a,string,containing,the,lines,param,line,number,reader,the,code,line,number,reader,code,containing,the,script,to,be,processed,return,code,string,code,containing,the,script,lines,throws,ioexception;public,static,string,read,script,line,number,reader,line,number,reader,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,string,utils,has,text,current,statement,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,return,script,builder,to,string
JdbcTestUtils -> public static String readScript(LineNumberReader lineNumberReader) throws IOException;1344020177;Read a script from the provided {@code LineNumberReader} and build a_{@code String} containing the lines.__@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@return a {@code String} containing the script lines;public static String readScript(LineNumberReader lineNumberReader) throws IOException {_		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (StringUtils.hasText(currentStatement)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,and,build,a,code,string,containing,the,lines,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,return,a,code,string,containing,the,script,lines;public,static,string,read,script,line,number,reader,line,number,reader,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,string,utils,has,text,current,statement,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,return,script,builder,to,string
JdbcTestUtils -> public static String readScript(LineNumberReader lineNumberReader) throws IOException;1344027039;Read a script from the provided {@code LineNumberReader} and build a_{@code String} containing the lines.__@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@return a {@code String} containing the script lines;public static String readScript(LineNumberReader lineNumberReader) throws IOException {_		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (StringUtils.hasText(currentStatement)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,and,build,a,code,string,containing,the,lines,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,return,a,code,string,containing,the,script,lines;public,static,string,read,script,line,number,reader,line,number,reader,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,string,utils,has,text,current,statement,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,return,script,builder,to,string
JdbcTestUtils -> public static String readScript(LineNumberReader lineNumberReader) throws IOException;1346424748;Read a script from the provided {@code LineNumberReader} and build a_{@code String} containing the lines._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@return a {@code String} containing the script lines;public static String readScript(LineNumberReader lineNumberReader) throws IOException {_		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (StringUtils.hasText(currentStatement)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,and,build,a,code,string,containing,the,lines,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,return,a,code,string,containing,the,script,lines;public,static,string,read,script,line,number,reader,line,number,reader,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,string,utils,has,text,current,statement,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,return,script,builder,to,string
JdbcTestUtils -> public static String readScript(LineNumberReader lineNumberReader) throws IOException;1350881521;Read a script from the provided {@code LineNumberReader}, using_"{@code --}" as the comment prefix, and build a {@code String} containing_the lines._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@return a {@code String} containing the script lines_@see #readScript(LineNumberReader, String);public static String readScript(LineNumberReader lineNumberReader) throws IOException {_		return readScript(lineNumberReader, DEFAULT_COMMENT_PREFIX)__	};read,a,script,from,the,provided,code,line,number,reader,using,code,as,the,comment,prefix,and,build,a,code,string,containing,the,lines,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,return,a,code,string,containing,the,script,lines,see,read,script,line,number,reader,string;public,static,string,read,script,line,number,reader,line,number,reader,throws,ioexception,return,read,script,line,number,reader
JdbcTestUtils -> public static String readScript(LineNumberReader lineNumberReader) throws IOException;1354723106;Read a script from the provided {@code LineNumberReader}, using_"{@code --}" as the comment prefix, and build a {@code String} containing_the lines._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@return a {@code String} containing the script lines_@see #readScript(LineNumberReader, String);public static String readScript(LineNumberReader lineNumberReader) throws IOException {_		return readScript(lineNumberReader, DEFAULT_COMMENT_PREFIX)__	};read,a,script,from,the,provided,code,line,number,reader,using,code,as,the,comment,prefix,and,build,a,code,string,containing,the,lines,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,return,a,code,string,containing,the,script,lines,see,read,script,line,number,reader,string;public,static,string,read,script,line,number,reader,line,number,reader,throws,ioexception,return,read,script,line,number,reader
JdbcTestUtils -> public static String readScript(LineNumberReader lineNumberReader) throws IOException;1356735495;Read a script from the provided {@code LineNumberReader}, using_"{@code --}" as the comment prefix, and build a {@code String} containing_the lines._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@return a {@code String} containing the script lines_@see #readScript(LineNumberReader, String);public static String readScript(LineNumberReader lineNumberReader) throws IOException {_		return readScript(lineNumberReader, DEFAULT_COMMENT_PREFIX)__	};read,a,script,from,the,provided,code,line,number,reader,using,code,as,the,comment,prefix,and,build,a,code,string,containing,the,lines,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,return,a,code,string,containing,the,script,lines,see,read,script,line,number,reader,string;public,static,string,read,script,line,number,reader,line,number,reader,throws,ioexception,return,read,script,line,number,reader
JdbcTestUtils -> public static String readScript(LineNumberReader lineNumberReader) throws IOException;1362408075;Read a script from the provided {@code LineNumberReader}, using_"{@code --}" as the comment prefix, and build a {@code String} containing_the lines._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@return a {@code String} containing the script lines_@see #readScript(LineNumberReader, String);public static String readScript(LineNumberReader lineNumberReader) throws IOException {_		return readScript(lineNumberReader, DEFAULT_COMMENT_PREFIX)__	};read,a,script,from,the,provided,code,line,number,reader,using,code,as,the,comment,prefix,and,build,a,code,string,containing,the,lines,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,return,a,code,string,containing,the,script,lines,see,read,script,line,number,reader,string;public,static,string,read,script,line,number,reader,line,number,reader,throws,ioexception,return,read,script,line,number,reader
JdbcTestUtils -> public static String readScript(LineNumberReader lineNumberReader) throws IOException;1367169053;Read a script from the provided {@code LineNumberReader}, using_"{@code --}" as the comment prefix, and build a {@code String} containing_the lines._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@return a {@code String} containing the script lines_@see #readScript(LineNumberReader, String);public static String readScript(LineNumberReader lineNumberReader) throws IOException {_		return readScript(lineNumberReader, DEFAULT_COMMENT_PREFIX)__	};read,a,script,from,the,provided,code,line,number,reader,using,code,as,the,comment,prefix,and,build,a,code,string,containing,the,lines,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,return,a,code,string,containing,the,script,lines,see,read,script,line,number,reader,string;public,static,string,read,script,line,number,reader,line,number,reader,throws,ioexception,return,read,script,line,number,reader
JdbcTestUtils -> private static void splitSqlScript(String script, String delim, String commentPrefix, List<String> statements);1354723106;Split an SQL script into separate statements delimited by the provided_delimiter string. Each individual statement will be added to the provided_{@code List}._<p>Within a statement, the provided {@code commentPrefix} will be honored__any text beginning with the comment prefix and extending to the end of the_line will be omitted from the statement. In addition, multiple adjacent_whitespace characters will be collapsed into a single space._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@param commentPrefix the prefix that identifies line comments in the SQL script &mdash_ typically "--"_@param statements the List that will contain the individual statements;private static void splitSqlScript(String script, String delim, String commentPrefix, List<String> statements) {_		StringBuilder sb = new StringBuilder()__		boolean inLiteral = false__		boolean inEscape = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			char c = content[i]__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (c == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral) {_				if (script.startsWith(delim, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += delim.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						_						break__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,delimiter,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,a,statement,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,statement,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,comment,prefix,the,prefix,that,identifies,line,comments,in,the,sql,script,mdash,typically,param,statements,the,list,that,will,contain,the,individual,statements;private,static,void,split,sql,script,string,script,string,delim,string,comment,prefix,list,string,statements,string,builder,sb,new,string,builder,boolean,in,literal,false,boolean,in,escape,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,char,c,content,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,c,in,literal,in,literal,if,in,literal,if,script,starts,with,delim,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,delim,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
JdbcTestUtils -> private static void splitSqlScript(String script, String delim, String commentPrefix, List<String> statements);1356735495;Split an SQL script into separate statements delimited by the provided_delimiter string. Each individual statement will be added to the provided_{@code List}._<p>Within a statement, the provided {@code commentPrefix} will be honored__any text beginning with the comment prefix and extending to the end of the_line will be omitted from the statement. In addition, multiple adjacent_whitespace characters will be collapsed into a single space._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@param commentPrefix the prefix that identifies line comments in the SQL script &mdash_ typically "--"_@param statements the List that will contain the individual statements;private static void splitSqlScript(String script, String delim, String commentPrefix, List<String> statements) {_		StringBuilder sb = new StringBuilder()__		boolean inLiteral = false__		boolean inEscape = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			char c = content[i]__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (c == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral) {_				if (script.startsWith(delim, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += delim.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						_						break__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,delimiter,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,a,statement,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,statement,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,comment,prefix,the,prefix,that,identifies,line,comments,in,the,sql,script,mdash,typically,param,statements,the,list,that,will,contain,the,individual,statements;private,static,void,split,sql,script,string,script,string,delim,string,comment,prefix,list,string,statements,string,builder,sb,new,string,builder,boolean,in,literal,false,boolean,in,escape,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,char,c,content,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,c,in,literal,in,literal,if,in,literal,if,script,starts,with,delim,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,delim,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
JdbcTestUtils -> private static void splitSqlScript(String script, String delim, String commentPrefix, List<String> statements);1362408075;Split an SQL script into separate statements delimited by the provided_delimiter string. Each individual statement will be added to the provided_{@code List}._<p>Within a statement, the provided {@code commentPrefix} will be honored__any text beginning with the comment prefix and extending to the end of the_line will be omitted from the statement. In addition, multiple adjacent_whitespace characters will be collapsed into a single space._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@param commentPrefix the prefix that identifies line comments in the SQL script &mdash_ typically "--"_@param statements the List that will contain the individual statements;private static void splitSqlScript(String script, String delim, String commentPrefix, List<String> statements) {_		StringBuilder sb = new StringBuilder()__		boolean inLiteral = false__		boolean inEscape = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			char c = content[i]__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (c == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral) {_				if (script.startsWith(delim, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += delim.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						_						break__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,delimiter,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,a,statement,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,statement,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,comment,prefix,the,prefix,that,identifies,line,comments,in,the,sql,script,mdash,typically,param,statements,the,list,that,will,contain,the,individual,statements;private,static,void,split,sql,script,string,script,string,delim,string,comment,prefix,list,string,statements,string,builder,sb,new,string,builder,boolean,in,literal,false,boolean,in,escape,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,char,c,content,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,c,in,literal,in,literal,if,in,literal,if,script,starts,with,delim,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,delim,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
JdbcTestUtils -> private static void splitSqlScript(String script, String delim, String commentPrefix, List<String> statements);1367169053;Split an SQL script into separate statements delimited by the provided_delimiter string. Each individual statement will be added to the provided_{@code List}._<p>Within a statement, the provided {@code commentPrefix} will be honored__any text beginning with the comment prefix and extending to the end of the_line will be omitted from the statement. In addition, multiple adjacent_whitespace characters will be collapsed into a single space._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@param commentPrefix the prefix that identifies line comments in the SQL script &mdash_ typically "--"_@param statements the List that will contain the individual statements;private static void splitSqlScript(String script, String delim, String commentPrefix, List<String> statements) {_		StringBuilder sb = new StringBuilder()__		boolean inLiteral = false__		boolean inEscape = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			char c = content[i]__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (c == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral) {_				if (script.startsWith(delim, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += delim.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						_						break__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,delimiter,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,a,statement,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,statement,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,comment,prefix,the,prefix,that,identifies,line,comments,in,the,sql,script,mdash,typically,param,statements,the,list,that,will,contain,the,individual,statements;private,static,void,split,sql,script,string,script,string,delim,string,comment,prefix,list,string,statements,string,builder,sb,new,string,builder,boolean,in,literal,false,boolean,in,escape,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,char,c,content,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,c,in,literal,in,literal,if,in,literal,if,script,starts,with,delim,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,delim,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
JdbcTestUtils -> @Deprecated 	public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException;1394708749;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash_ typically "--"_@return a {@code String} containing the script lines_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#readScript(LineNumberReader, String, String)};@Deprecated_	public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException {_		return ScriptUtils.readScript(lineNumberReader, commentPrefix, ScriptUtils.DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,read,script,line,number,reader,string,string;deprecated,public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,throws,ioexception,return,script,utils,read,script,line,number,reader,comment,prefix,script,utils
JdbcTestUtils -> @Deprecated 	public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException;1394709692;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash_ typically "--"_@return a {@code String} containing the script lines_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#readScript(LineNumberReader, String, String)};@Deprecated_	public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException {_		return ScriptUtils.readScript(lineNumberReader, commentPrefix, ScriptUtils.DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,read,script,line,number,reader,string,string;deprecated,public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,throws,ioexception,return,script,utils,read,script,line,number,reader,comment,prefix,script,utils
JdbcTestUtils -> @Deprecated 	public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException;1394714705;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash_ typically "--"_@return a {@code String} containing the script lines_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#readScript(LineNumberReader, String, String)};@Deprecated_	public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException {_		return ScriptUtils.readScript(lineNumberReader, commentPrefix, ScriptUtils.DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,read,script,line,number,reader,string,string;deprecated,public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,throws,ioexception,return,script,utils,read,script,line,number,reader,comment,prefix,script,utils
JdbcTestUtils -> @Deprecated 	public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException;1394988251;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash_ typically "--"_@return a {@code String} containing the script lines_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#readScript(LineNumberReader, String, String)};@Deprecated_	public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException {_		return ScriptUtils.readScript(lineNumberReader, commentPrefix, ScriptUtils.DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,read,script,line,number,reader,string,string;deprecated,public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,throws,ioexception,return,script,utils,read,script,line,number,reader,comment,prefix,script,utils
JdbcTestUtils -> @Deprecated 	public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException;1396191708;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash_ typically "--"_@return a {@code String} containing the script lines_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#readScript(LineNumberReader, String, String)};@Deprecated_	public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException {_		return ScriptUtils.readScript(lineNumberReader, commentPrefix, ScriptUtils.DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,read,script,line,number,reader,string,string;deprecated,public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,throws,ioexception,return,script,utils,read,script,line,number,reader,comment,prefix,script,utils
JdbcTestUtils -> @Deprecated 	public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException;1396376545;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash_ typically "--"_@return a {@code String} containing the script lines_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#readScript(LineNumberReader, String, String)};@Deprecated_	public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException {_		return ScriptUtils.readScript(lineNumberReader, commentPrefix, ScriptUtils.DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,read,script,line,number,reader,string,string;deprecated,public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,throws,ioexception,return,script,utils,read,script,line,number,reader,comment,prefix,script,utils
JdbcTestUtils -> public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName, 			String whereClause, Object... args);1362408075;Delete rows from the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code DELETE}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "DELETE FROM person WHERE name = 'Bob' and age > 25"}._<p>As an alternative to hard-coded values, the {@code "?"} placeholder can_be used within the {@code WHERE} clause, binding to the given arguments._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to delete rows from_@param whereClause the {@code WHERE} clause to append to the query_@param args arguments to bind to the query (leaving it to the PreparedStatement_to guess the corresponding SQL type)_ may also contain {@link SqlParameterValue}_objects which indicate not only the argument value but also the SQL type and_optionally the scale._@return the number of rows deleted from the table;public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName,_			String whereClause, Object... args) {_		String sql = "DELETE FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		int rowCount = (args != null && args.length > 0 ? jdbcTemplate.update(sql, args)_				: jdbcTemplate.update(sql))__		if (logger.isInfoEnabled()) {_			logger.info("Deleted " + rowCount + " rows from table " + tableName)__		}_		return rowCount__	};delete,rows,from,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,delete,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,delete,from,person,where,name,bob,and,age,25,p,as,an,alternative,to,hard,coded,values,the,code,placeholder,can,be,used,within,the,code,where,clause,binding,to,the,given,arguments,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,delete,rows,from,param,where,clause,the,code,where,clause,to,append,to,the,query,param,args,arguments,to,bind,to,the,query,leaving,it,to,the,prepared,statement,to,guess,the,corresponding,sql,type,may,also,contain,link,sql,parameter,value,objects,which,indicate,not,only,the,argument,value,but,also,the,sql,type,and,optionally,the,scale,return,the,number,of,rows,deleted,from,the,table;public,static,int,delete,from,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,object,args,string,sql,delete,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,int,row,count,args,null,args,length,0,jdbc,template,update,sql,args,jdbc,template,update,sql,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,row,count
JdbcTestUtils -> public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName, 			String whereClause, Object... args);1367169053;Delete rows from the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code DELETE}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "DELETE FROM person WHERE name = 'Bob' and age > 25"}._<p>As an alternative to hard-coded values, the {@code "?"} placeholder can_be used within the {@code WHERE} clause, binding to the given arguments._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to delete rows from_@param whereClause the {@code WHERE} clause to append to the query_@param args arguments to bind to the query (leaving it to the PreparedStatement_to guess the corresponding SQL type)_ may also contain {@link SqlParameterValue}_objects which indicate not only the argument value but also the SQL type and_optionally the scale._@return the number of rows deleted from the table;public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName,_			String whereClause, Object... args) {_		String sql = "DELETE FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		int rowCount = (args != null && args.length > 0 ? jdbcTemplate.update(sql, args)_				: jdbcTemplate.update(sql))__		if (logger.isInfoEnabled()) {_			logger.info("Deleted " + rowCount + " rows from table " + tableName)__		}_		return rowCount__	};delete,rows,from,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,delete,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,delete,from,person,where,name,bob,and,age,25,p,as,an,alternative,to,hard,coded,values,the,code,placeholder,can,be,used,within,the,code,where,clause,binding,to,the,given,arguments,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,delete,rows,from,param,where,clause,the,code,where,clause,to,append,to,the,query,param,args,arguments,to,bind,to,the,query,leaving,it,to,the,prepared,statement,to,guess,the,corresponding,sql,type,may,also,contain,link,sql,parameter,value,objects,which,indicate,not,only,the,argument,value,but,also,the,sql,type,and,optionally,the,scale,return,the,number,of,rows,deleted,from,the,table;public,static,int,delete,from,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,object,args,string,sql,delete,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,int,row,count,args,null,args,length,0,jdbc,template,update,sql,args,jdbc,template,update,sql,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,row,count
JdbcTestUtils -> @Deprecated 	public static void splitSqlScript(String script, char delim, List<String> statements);1394708749;Split an SQL script into separate statements delimited by the provided_delimiter character. Each individual statement will be added to the_provided {@code List}._<p>Within a statement, "{@code --}" will be used as the comment prefix__any text beginning with the comment prefix and extending to the end of_the line will be omitted from the statement. In addition, multiple adjacent_whitespace characters will be collapsed into a single space._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@param statements the list that will contain the individual statements_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#splitSqlScript(String, char, List)};@Deprecated_	public static void splitSqlScript(String script, char delim, List<String> statements) {_		ScriptUtils.splitSqlScript(script, delim, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,delimiter,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,a,statement,code,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,statement,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,statements,the,list,that,will,contain,the,individual,statements,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,split,sql,script,string,char,list;deprecated,public,static,void,split,sql,script,string,script,char,delim,list,string,statements,script,utils,split,sql,script,script,delim,statements
JdbcTestUtils -> @Deprecated 	public static void splitSqlScript(String script, char delim, List<String> statements);1394709692;Split an SQL script into separate statements delimited by the provided_delimiter character. Each individual statement will be added to the_provided {@code List}._<p>Within a statement, "{@code --}" will be used as the comment prefix__any text beginning with the comment prefix and extending to the end of_the line will be omitted from the statement. In addition, multiple adjacent_whitespace characters will be collapsed into a single space._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@param statements the list that will contain the individual statements_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#splitSqlScript(String, char, List)};@Deprecated_	public static void splitSqlScript(String script, char delim, List<String> statements) {_		ScriptUtils.splitSqlScript(script, delim, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,delimiter,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,a,statement,code,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,statement,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,statements,the,list,that,will,contain,the,individual,statements,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,split,sql,script,string,char,list;deprecated,public,static,void,split,sql,script,string,script,char,delim,list,string,statements,script,utils,split,sql,script,script,delim,statements
JdbcTestUtils -> @Deprecated 	public static void splitSqlScript(String script, char delim, List<String> statements);1394714705;Split an SQL script into separate statements delimited by the provided_delimiter character. Each individual statement will be added to the_provided {@code List}._<p>Within a statement, "{@code --}" will be used as the comment prefix__any text beginning with the comment prefix and extending to the end of_the line will be omitted from the statement. In addition, multiple adjacent_whitespace characters will be collapsed into a single space._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@param statements the list that will contain the individual statements_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#splitSqlScript(String, char, List)};@Deprecated_	public static void splitSqlScript(String script, char delim, List<String> statements) {_		ScriptUtils.splitSqlScript(script, delim, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,delimiter,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,a,statement,code,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,statement,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,statements,the,list,that,will,contain,the,individual,statements,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,split,sql,script,string,char,list;deprecated,public,static,void,split,sql,script,string,script,char,delim,list,string,statements,script,utils,split,sql,script,script,delim,statements
JdbcTestUtils -> @Deprecated 	public static void splitSqlScript(String script, char delim, List<String> statements);1394988251;Split an SQL script into separate statements delimited by the provided_delimiter character. Each individual statement will be added to the_provided {@code List}._<p>Within a statement, "{@code --}" will be used as the comment prefix__any text beginning with the comment prefix and extending to the end of_the line will be omitted from the statement. In addition, multiple adjacent_whitespace characters will be collapsed into a single space._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@param statements the list that will contain the individual statements_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#splitSqlScript(String, char, List)};@Deprecated_	public static void splitSqlScript(String script, char delim, List<String> statements) {_		ScriptUtils.splitSqlScript(script, delim, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,delimiter,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,a,statement,code,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,statement,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,statements,the,list,that,will,contain,the,individual,statements,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,split,sql,script,string,char,list;deprecated,public,static,void,split,sql,script,string,script,char,delim,list,string,statements,script,utils,split,sql,script,script,delim,statements
JdbcTestUtils -> @Deprecated 	public static void splitSqlScript(String script, char delim, List<String> statements);1396191708;Split an SQL script into separate statements delimited by the provided_delimiter character. Each individual statement will be added to the_provided {@code List}._<p>Within a statement, "{@code --}" will be used as the comment prefix__any text beginning with the comment prefix and extending to the end of_the line will be omitted from the statement. In addition, multiple adjacent_whitespace characters will be collapsed into a single space._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@param statements the list that will contain the individual statements_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#splitSqlScript(String, char, List)};@Deprecated_	public static void splitSqlScript(String script, char delim, List<String> statements) {_		ScriptUtils.splitSqlScript(script, delim, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,delimiter,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,a,statement,code,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,statement,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,statements,the,list,that,will,contain,the,individual,statements,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,split,sql,script,string,char,list;deprecated,public,static,void,split,sql,script,string,script,char,delim,list,string,statements,script,utils,split,sql,script,script,delim,statements
JdbcTestUtils -> @Deprecated 	public static void splitSqlScript(String script, char delim, List<String> statements);1396376545;Split an SQL script into separate statements delimited by the provided_delimiter character. Each individual statement will be added to the_provided {@code List}._<p>Within a statement, "{@code --}" will be used as the comment prefix__any text beginning with the comment prefix and extending to the end of_the line will be omitted from the statement. In addition, multiple adjacent_whitespace characters will be collapsed into a single space._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@param statements the list that will contain the individual statements_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#splitSqlScript(String, char, List)};@Deprecated_	public static void splitSqlScript(String script, char delim, List<String> statements) {_		ScriptUtils.splitSqlScript(script, delim, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,delimiter,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,a,statement,code,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,statement,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,statements,the,list,that,will,contain,the,individual,statements,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,split,sql,script,string,char,list;deprecated,public,static,void,split,sql,script,string,script,char,delim,list,string,statements,script,utils,split,sql,script,script,delim,statements
JdbcTestUtils -> public static boolean containsSqlScriptDelimiters(String script, char delim);1328020251;Does the provided SQL script contain the specified delimiter?__@param script the SQL script_@param delim character delimiting each statement - typically a '_'_character;public static boolean containsSqlScriptDelimiters(String script, char delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (content[i] == delim && !inLiteral) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,character,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,char,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,content,i,delim,in,literal,return,true,return,false
JdbcTestUtils -> public static boolean containsSqlScriptDelimiters(String script, char delim);1344020177;Determine if the provided SQL script contains the specified delimiter.__@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_'_character_@return {@code true} if the script contains the delimiter_ {@code false}_otherwise;public static boolean containsSqlScriptDelimiters(String script, char delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (content[i] == delim && !inLiteral) {_				return true__			}_		}_		return false__	};determine,if,the,provided,sql,script,contains,the,specified,delimiter,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,return,code,true,if,the,script,contains,the,delimiter,code,false,otherwise;public,static,boolean,contains,sql,script,delimiters,string,script,char,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,content,i,delim,in,literal,return,true,return,false
JdbcTestUtils -> public static boolean containsSqlScriptDelimiters(String script, char delim);1344027039;Determine if the provided SQL script contains the specified delimiter.__@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_'_character_@return {@code true} if the script contains the delimiter_ {@code false}_otherwise;public static boolean containsSqlScriptDelimiters(String script, char delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (content[i] == delim && !inLiteral) {_				return true__			}_		}_		return false__	};determine,if,the,provided,sql,script,contains,the,specified,delimiter,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,return,code,true,if,the,script,contains,the,delimiter,code,false,otherwise;public,static,boolean,contains,sql,script,delimiters,string,script,char,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,content,i,delim,in,literal,return,true,return,false
JdbcTestUtils -> public static boolean containsSqlScriptDelimiters(String script, char delim);1346424748;Determine if the provided SQL script contains the specified delimiter._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@return {@code true} if the script contains the delimiter_ {@code false} otherwise;public static boolean containsSqlScriptDelimiters(String script, char delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (content[i] == delim && !inLiteral) {_				return true__			}_		}_		return false__	};determine,if,the,provided,sql,script,contains,the,specified,delimiter,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,return,code,true,if,the,script,contains,the,delimiter,code,false,otherwise;public,static,boolean,contains,sql,script,delimiters,string,script,char,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,content,i,delim,in,literal,return,true,return,false
JdbcTestUtils -> public static boolean containsSqlScriptDelimiters(String script, char delim);1350881521;Determine if the provided SQL script contains the specified delimiter._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@return {@code true} if the script contains the delimiter_ {@code false} otherwise;public static boolean containsSqlScriptDelimiters(String script, char delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (content[i] == delim && !inLiteral) {_				return true__			}_		}_		return false__	};determine,if,the,provided,sql,script,contains,the,specified,delimiter,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,return,code,true,if,the,script,contains,the,delimiter,code,false,otherwise;public,static,boolean,contains,sql,script,delimiters,string,script,char,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,content,i,delim,in,literal,return,true,return,false
JdbcTestUtils -> public static boolean containsSqlScriptDelimiters(String script, char delim);1354723106;Determine if the provided SQL script contains the specified delimiter._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@return {@code true} if the script contains the delimiter_ {@code false} otherwise;public static boolean containsSqlScriptDelimiters(String script, char delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (content[i] == delim && !inLiteral) {_				return true__			}_		}_		return false__	};determine,if,the,provided,sql,script,contains,the,specified,delimiter,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,return,code,true,if,the,script,contains,the,delimiter,code,false,otherwise;public,static,boolean,contains,sql,script,delimiters,string,script,char,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,content,i,delim,in,literal,return,true,return,false
JdbcTestUtils -> public static boolean containsSqlScriptDelimiters(String script, char delim);1356735495;Determine if the provided SQL script contains the specified delimiter._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@return {@code true} if the script contains the delimiter_ {@code false} otherwise;public static boolean containsSqlScriptDelimiters(String script, char delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (content[i] == delim && !inLiteral) {_				return true__			}_		}_		return false__	};determine,if,the,provided,sql,script,contains,the,specified,delimiter,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,return,code,true,if,the,script,contains,the,delimiter,code,false,otherwise;public,static,boolean,contains,sql,script,delimiters,string,script,char,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,content,i,delim,in,literal,return,true,return,false
JdbcTestUtils -> public static boolean containsSqlScriptDelimiters(String script, char delim);1362408075;Determine if the provided SQL script contains the specified delimiter._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@return {@code true} if the script contains the delimiter_ {@code false} otherwise;public static boolean containsSqlScriptDelimiters(String script, char delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (content[i] == delim && !inLiteral) {_				return true__			}_		}_		return false__	};determine,if,the,provided,sql,script,contains,the,specified,delimiter,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,return,code,true,if,the,script,contains,the,delimiter,code,false,otherwise;public,static,boolean,contains,sql,script,delimiters,string,script,char,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,content,i,delim,in,literal,return,true,return,false
JdbcTestUtils -> public static boolean containsSqlScriptDelimiters(String script, char delim);1367169053;Determine if the provided SQL script contains the specified delimiter._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@return {@code true} if the script contains the delimiter_ {@code false} otherwise;public static boolean containsSqlScriptDelimiters(String script, char delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (content[i] == delim && !inLiteral) {_				return true__			}_		}_		return false__	};determine,if,the,provided,sql,script,contains,the,specified,delimiter,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,return,code,true,if,the,script,contains,the,delimiter,code,false,otherwise;public,static,boolean,contains,sql,script,delimiters,string,script,char,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,content,i,delim,in,literal,return,true,return,false
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1344020177;Count the rows in the given table.__@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table_@since 3.2;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		return jdbcTemplate.queryForInt("SELECT COUNT(0) FROM " + tableName)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table,since,3,2;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,return,jdbc,template,query,for,int,select,count,0,from,table,name
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1344027039;Count the rows in the given table.__@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table_@since 3.2;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		return jdbcTemplate.queryForInt("SELECT COUNT(0) FROM " + tableName)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table,since,3,2;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,return,jdbc,template,query,for,int,select,count,0,from,table,name
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1346424748;Count the rows in the given table._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		return jdbcTemplate.queryForInt("SELECT COUNT(0) FROM " + tableName)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,return,jdbc,template,query,for,int,select,count,0,from,table,name
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1350881521;Count the rows in the given table._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		return jdbcTemplate.queryForInt("SELECT COUNT(0) FROM " + tableName)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,return,jdbc,template,query,for,int,select,count,0,from,table,name
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1354723106;Count the rows in the given table._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		return jdbcTemplate.queryForInt("SELECT COUNT(0) FROM " + tableName)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,return,jdbc,template,query,for,int,select,count,0,from,table,name
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1356735495;Count the rows in the given table._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		return jdbcTemplate.queryForInt("SELECT COUNT(0) FROM " + tableName)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,return,jdbc,template,query,for,int,select,count,0,from,table,name
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1362408075;Count the rows in the given table._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		return jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName, Integer.class)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,return,jdbc,template,query,for,object,select,count,0,from,table,name,integer,class
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1367169053;Count the rows in the given table._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		return jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName, Integer.class)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,return,jdbc,template,query,for,object,select,count,0,from,table,name,integer,class
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1394708749;Count the rows in the given table._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		return jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName, Integer.class)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,return,jdbc,template,query,for,object,select,count,0,from,table,name,integer,class
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1394709692;Count the rows in the given table._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		return jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName, Integer.class)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,return,jdbc,template,query,for,object,select,count,0,from,table,name,integer,class
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1394714705;Count the rows in the given table._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		return jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName, Integer.class)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,return,jdbc,template,query,for,object,select,count,0,from,table,name,integer,class
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1394988251;Count the rows in the given table._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		return jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName, Integer.class)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,return,jdbc,template,query,for,object,select,count,0,from,table,name,integer,class
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1396191708;Count the rows in the given table._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		return jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName, Integer.class)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,return,jdbc,template,query,for,object,select,count,0,from,table,name,integer,class
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1396376545;Count the rows in the given table._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		return jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName, Integer.class)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,return,jdbc,template,query,for,object,select,count,0,from,table,name,integer,class
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1467726769;Count the rows in the given table._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		return jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName, Integer.class)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,return,jdbc,template,query,for,object,select,count,0,from,table,name,integer,class
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1496955179;Count the rows in the given table._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		Integer result = jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName, Integer.class)__		return (result != null ? result : 0)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,integer,result,jdbc,template,query,for,object,select,count,0,from,table,name,integer,class,return,result,null,result,0
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1530174524;Count the rows in the given table._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		Integer result = jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName, Integer.class)__		return (result != null ? result : 0)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,integer,result,jdbc,template,query,for,object,select,count,0,from,table,name,integer,class,return,result,null,result,0
JdbcTestUtils -> public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName);1530405080;Count the rows in the given table._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName name of the table to count rows in_@return the number of rows in the table;public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {_		Integer result = jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName, Integer.class)__		return (result != null ? result : 0)__	};count,the,rows,in,the,given,table,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,name,of,the,table,to,count,rows,in,return,the,number,of,rows,in,the,table;public,static,int,count,rows,in,table,jdbc,template,jdbc,template,string,table,name,integer,result,jdbc,template,query,for,object,select,count,0,from,table,name,integer,class,return,result,null,result,0
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError) 			throws DataAccessException;1394708749;Execute the given SQL script._<p>The script will typically be loaded from the classpath. Statements_should be delimited with a semicolon. If statements are not delimited with_a semicolon then there should be one statement per line. Statements are_allowed to span lines only if they are delimited with a semicolon. Any_line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see DatabasePopulatorUtils_@see #executeSqlScript(JdbcTemplate, EncodedResource, boolean)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError)_			throws DataAccessException {_		executeSqlScript(jdbcTemplate, new EncodedResource(resource), continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,statements,should,be,delimited,with,a,semicolon,if,statements,are,not,delimited,with,a,semicolon,then,there,should,be,one,statement,per,line,statements,are,allowed,to,span,lines,only,if,they,are,delimited,with,a,semicolon,any,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,database,populator,utils,see,execute,sql,script,jdbc,template,encoded,resource,boolean,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,resource,boolean,continue,on,error,throws,data,access,exception,execute,sql,script,jdbc,template,new,encoded,resource,resource,continue,on,error
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError) 			throws DataAccessException;1394709692;Execute the given SQL script._<p>The script will typically be loaded from the classpath. Statements_should be delimited with a semicolon. If statements are not delimited with_a semicolon then there should be one statement per line. Statements are_allowed to span lines only if they are delimited with a semicolon. Any_line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see DatabasePopulatorUtils_@see #executeSqlScript(JdbcTemplate, EncodedResource, boolean)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError)_			throws DataAccessException {_		executeSqlScript(jdbcTemplate, new EncodedResource(resource), continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,statements,should,be,delimited,with,a,semicolon,if,statements,are,not,delimited,with,a,semicolon,then,there,should,be,one,statement,per,line,statements,are,allowed,to,span,lines,only,if,they,are,delimited,with,a,semicolon,any,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,database,populator,utils,see,execute,sql,script,jdbc,template,encoded,resource,boolean,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,resource,boolean,continue,on,error,throws,data,access,exception,execute,sql,script,jdbc,template,new,encoded,resource,resource,continue,on,error
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError) 			throws DataAccessException;1394714705;Execute the given SQL script._<p>The script will typically be loaded from the classpath. Statements_should be delimited with a semicolon. If statements are not delimited with_a semicolon then there should be one statement per line. Statements are_allowed to span lines only if they are delimited with a semicolon. Any_line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see DatabasePopulatorUtils_@see #executeSqlScript(JdbcTemplate, EncodedResource, boolean)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError)_			throws DataAccessException {_		executeSqlScript(jdbcTemplate, new EncodedResource(resource), continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,statements,should,be,delimited,with,a,semicolon,if,statements,are,not,delimited,with,a,semicolon,then,there,should,be,one,statement,per,line,statements,are,allowed,to,span,lines,only,if,they,are,delimited,with,a,semicolon,any,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,database,populator,utils,see,execute,sql,script,jdbc,template,encoded,resource,boolean,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,resource,boolean,continue,on,error,throws,data,access,exception,execute,sql,script,jdbc,template,new,encoded,resource,resource,continue,on,error
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError) 			throws DataAccessException;1394988251;Execute the given SQL script._<p>The script will typically be loaded from the classpath. Statements_should be delimited with a semicolon. If statements are not delimited with_a semicolon then there should be one statement per line. Statements are_allowed to span lines only if they are delimited with a semicolon. Any_line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see DatabasePopulatorUtils_@see #executeSqlScript(JdbcTemplate, EncodedResource, boolean)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError)_			throws DataAccessException {_		executeSqlScript(jdbcTemplate, new EncodedResource(resource), continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,statements,should,be,delimited,with,a,semicolon,if,statements,are,not,delimited,with,a,semicolon,then,there,should,be,one,statement,per,line,statements,are,allowed,to,span,lines,only,if,they,are,delimited,with,a,semicolon,any,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,database,populator,utils,see,execute,sql,script,jdbc,template,encoded,resource,boolean,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,resource,boolean,continue,on,error,throws,data,access,exception,execute,sql,script,jdbc,template,new,encoded,resource,resource,continue,on,error
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError) 			throws DataAccessException;1396191708;Execute the given SQL script._<p>The script will typically be loaded from the classpath. Statements_should be delimited with a semicolon. If statements are not delimited with_a semicolon then there should be one statement per line. Statements are_allowed to span lines only if they are delimited with a semicolon. Any_line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see #executeSqlScript(JdbcTemplate, EncodedResource, boolean)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError)_			throws DataAccessException {_		executeSqlScript(jdbcTemplate, new EncodedResource(resource), continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,statements,should,be,delimited,with,a,semicolon,if,statements,are,not,delimited,with,a,semicolon,then,there,should,be,one,statement,per,line,statements,are,allowed,to,span,lines,only,if,they,are,delimited,with,a,semicolon,any,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,execute,sql,script,jdbc,template,encoded,resource,boolean,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,resource,boolean,continue,on,error,throws,data,access,exception,execute,sql,script,jdbc,template,new,encoded,resource,resource,continue,on,error
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError) 			throws DataAccessException;1396376545;Execute the given SQL script._<p>The script will typically be loaded from the classpath. Statements_should be delimited with a semicolon. If statements are not delimited with_a semicolon then there should be one statement per line. Statements are_allowed to span lines only if they are delimited with a semicolon. Any_line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see #executeSqlScript(JdbcTemplate, EncodedResource, boolean)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError)_			throws DataAccessException {_		executeSqlScript(jdbcTemplate, new EncodedResource(resource), continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,statements,should,be,delimited,with,a,semicolon,if,statements,are,not,delimited,with,a,semicolon,then,there,should,be,one,statement,per,line,statements,are,allowed,to,span,lines,only,if,they,are,delimited,with,a,semicolon,any,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,execute,sql,script,jdbc,template,encoded,resource,boolean,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,resource,boolean,continue,on,error,throws,data,access,exception,execute,sql,script,jdbc,template,new,encoded,resource,resource,continue,on,error
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1344020177;Drop the specified tables.__@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop_@since 3.2;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop,since,3,2;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1344027039;Drop the specified tables.__@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop_@since 3.2;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop,since,3,2;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1346424748;Drop the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1350881521;Drop the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1354723106;Drop the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1356735495;Drop the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1362408075;Drop the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1367169053;Drop the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1394708749;Drop the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1394709692;Drop the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1394714705;Drop the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1394988251;Drop the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1396191708;Drop the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1396376545;Drop the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1467726769;Drop the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1496955179;Drop the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1530174524;Drop the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames);1530405080;Drop the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to drop;public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		for (String tableName : tableNames) {_			jdbcTemplate.execute("DROP TABLE " + tableName)__			if (logger.isInfoEnabled()) {_				logger.info("Dropped table " + tableName)__			}_		}_	};drop,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,drop;public,static,void,drop,tables,jdbc,template,jdbc,template,string,table,names,for,string,table,name,table,names,jdbc,template,execute,drop,table,table,name,if,logger,is,info,enabled,logger,info,dropped,table,table,name
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError) 			throws DataAccessException;1344020177;Execute the given SQL script.__<p>The script will typically be loaded from the classpath. Statements_should be delimited with a semicolon. If statements are not delimited with_a semicolon then there should be one statement per line. Statements are_allowed to span lines only if they are delimited with a semicolon.__<p><b>Do not use this method to execute DDL if you expect rollback.</b>__@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@since 3.2;public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError)_			throws DataAccessException {_		executeSqlScript(jdbcTemplate, new EncodedResource(resource), continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,statements,should,be,delimited,with,a,semicolon,if,statements,are,not,delimited,with,a,semicolon,then,there,should,be,one,statement,per,line,statements,are,allowed,to,span,lines,only,if,they,are,delimited,with,a,semicolon,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,since,3,2;public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,resource,boolean,continue,on,error,throws,data,access,exception,execute,sql,script,jdbc,template,new,encoded,resource,resource,continue,on,error
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError) 			throws DataAccessException;1344027039;Execute the given SQL script.__<p>The script will typically be loaded from the classpath. Statements_should be delimited with a semicolon. If statements are not delimited with_a semicolon then there should be one statement per line. Statements are_allowed to span lines only if they are delimited with a semicolon.__<p><b>Do not use this method to execute DDL if you expect rollback.</b>__@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@since 3.2;public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError)_			throws DataAccessException {_		executeSqlScript(jdbcTemplate, new EncodedResource(resource), continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,statements,should,be,delimited,with,a,semicolon,if,statements,are,not,delimited,with,a,semicolon,then,there,should,be,one,statement,per,line,statements,are,allowed,to,span,lines,only,if,they,are,delimited,with,a,semicolon,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,since,3,2;public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,resource,boolean,continue,on,error,throws,data,access,exception,execute,sql,script,jdbc,template,new,encoded,resource,resource,continue,on,error
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError) 			throws DataAccessException;1346424748;Execute the given SQL script._<p>The script will typically be loaded from the classpath. Statements_should be delimited with a semicolon. If statements are not delimited with_a semicolon then there should be one statement per line. Statements are_allowed to span lines only if they are delimited with a semicolon._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false};public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError)_			throws DataAccessException {__		executeSqlScript(jdbcTemplate, new EncodedResource(resource), continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,statements,should,be,delimited,with,a,semicolon,if,statements,are,not,delimited,with,a,semicolon,then,there,should,be,one,statement,per,line,statements,are,allowed,to,span,lines,only,if,they,are,delimited,with,a,semicolon,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false;public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,resource,boolean,continue,on,error,throws,data,access,exception,execute,sql,script,jdbc,template,new,encoded,resource,resource,continue,on,error
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError) 			throws DataAccessException;1350881521;Execute the given SQL script._<p>The script will typically be loaded from the classpath. Statements_should be delimited with a semicolon. If statements are not delimited with_a semicolon then there should be one statement per line. Statements are_allowed to span lines only if they are delimited with a semicolon._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator;public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError)_			throws DataAccessException {_		executeSqlScript(jdbcTemplate, new EncodedResource(resource), continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,statements,should,be,delimited,with,a,semicolon,if,statements,are,not,delimited,with,a,semicolon,then,there,should,be,one,statement,per,line,statements,are,allowed,to,span,lines,only,if,they,are,delimited,with,a,semicolon,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator;public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,resource,boolean,continue,on,error,throws,data,access,exception,execute,sql,script,jdbc,template,new,encoded,resource,resource,continue,on,error
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError) 			throws DataAccessException;1354723106;Execute the given SQL script._<p>The script will typically be loaded from the classpath. Statements_should be delimited with a semicolon. If statements are not delimited with_a semicolon then there should be one statement per line. Statements are_allowed to span lines only if they are delimited with a semicolon. Any_line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see #executeSqlScript(JdbcTemplate, EncodedResource, boolean);public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError)_			throws DataAccessException {_		executeSqlScript(jdbcTemplate, new EncodedResource(resource), continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,statements,should,be,delimited,with,a,semicolon,if,statements,are,not,delimited,with,a,semicolon,then,there,should,be,one,statement,per,line,statements,are,allowed,to,span,lines,only,if,they,are,delimited,with,a,semicolon,any,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,execute,sql,script,jdbc,template,encoded,resource,boolean;public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,resource,boolean,continue,on,error,throws,data,access,exception,execute,sql,script,jdbc,template,new,encoded,resource,resource,continue,on,error
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError) 			throws DataAccessException;1356735495;Execute the given SQL script._<p>The script will typically be loaded from the classpath. Statements_should be delimited with a semicolon. If statements are not delimited with_a semicolon then there should be one statement per line. Statements are_allowed to span lines only if they are delimited with a semicolon. Any_line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see #executeSqlScript(JdbcTemplate, EncodedResource, boolean);public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError)_			throws DataAccessException {_		executeSqlScript(jdbcTemplate, new EncodedResource(resource), continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,statements,should,be,delimited,with,a,semicolon,if,statements,are,not,delimited,with,a,semicolon,then,there,should,be,one,statement,per,line,statements,are,allowed,to,span,lines,only,if,they,are,delimited,with,a,semicolon,any,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,execute,sql,script,jdbc,template,encoded,resource,boolean;public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,resource,boolean,continue,on,error,throws,data,access,exception,execute,sql,script,jdbc,template,new,encoded,resource,resource,continue,on,error
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError) 			throws DataAccessException;1362408075;Execute the given SQL script._<p>The script will typically be loaded from the classpath. Statements_should be delimited with a semicolon. If statements are not delimited with_a semicolon then there should be one statement per line. Statements are_allowed to span lines only if they are delimited with a semicolon. Any_line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see #executeSqlScript(JdbcTemplate, EncodedResource, boolean);public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError)_			throws DataAccessException {_		executeSqlScript(jdbcTemplate, new EncodedResource(resource), continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,statements,should,be,delimited,with,a,semicolon,if,statements,are,not,delimited,with,a,semicolon,then,there,should,be,one,statement,per,line,statements,are,allowed,to,span,lines,only,if,they,are,delimited,with,a,semicolon,any,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,execute,sql,script,jdbc,template,encoded,resource,boolean;public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,resource,boolean,continue,on,error,throws,data,access,exception,execute,sql,script,jdbc,template,new,encoded,resource,resource,continue,on,error
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError) 			throws DataAccessException;1367169053;Execute the given SQL script._<p>The script will typically be loaded from the classpath. Statements_should be delimited with a semicolon. If statements are not delimited with_a semicolon then there should be one statement per line. Statements are_allowed to span lines only if they are delimited with a semicolon. Any_line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see #executeSqlScript(JdbcTemplate, EncodedResource, boolean);public static void executeSqlScript(JdbcTemplate jdbcTemplate, Resource resource, boolean continueOnError)_			throws DataAccessException {_		executeSqlScript(jdbcTemplate, new EncodedResource(resource), continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,statements,should,be,delimited,with,a,semicolon,if,statements,are,not,delimited,with,a,semicolon,then,there,should,be,one,statement,per,line,statements,are,allowed,to,span,lines,only,if,they,are,delimited,with,a,semicolon,any,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,execute,sql,script,jdbc,template,encoded,resource,boolean;public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,resource,boolean,continue,on,error,throws,data,access,exception,execute,sql,script,jdbc,template,new,encoded,resource,resource,continue,on,error
JdbcTestUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException;1350881521;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix, and build a {@code String} containing the lines._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the line prefix that identifies comments in the SQL script_@return a {@code String} containing the script lines;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException {_		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (StringUtils.hasText(currentStatement)_					&& (commentPrefix != null && !currentStatement.startsWith(commentPrefix))) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,build,a,code,string,containing,the,lines,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,line,prefix,that,identifies,comments,in,the,sql,script,return,a,code,string,containing,the,script,lines;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,string,utils,has,text,current,statement,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,return,script,builder,to,string
JdbcTestUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException;1354723106;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash_ typically "--"_@return a {@code String} containing the script lines;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException {_		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (StringUtils.hasText(currentStatement)_					&& (commentPrefix != null && !currentStatement.startsWith(commentPrefix))) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,string,utils,has,text,current,statement,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,return,script,builder,to,string
JdbcTestUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException;1356735495;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash_ typically "--"_@return a {@code String} containing the script lines;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException {_		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (StringUtils.hasText(currentStatement)_					&& (commentPrefix != null && !currentStatement.startsWith(commentPrefix))) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,string,utils,has,text,current,statement,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,return,script,builder,to,string
JdbcTestUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException;1362408075;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash_ typically "--"_@return a {@code String} containing the script lines;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException {_		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (StringUtils.hasText(currentStatement)_					&& (commentPrefix != null && !currentStatement.startsWith(commentPrefix))) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,string,utils,has,text,current,statement,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,return,script,builder,to,string
JdbcTestUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException;1367169053;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash_ typically "--"_@return a {@code String} containing the script lines;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException {_		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (StringUtils.hasText(currentStatement)_					&& (commentPrefix != null && !currentStatement.startsWith(commentPrefix))) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,string,utils,has,text,current,statement,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,return,script,builder,to,string
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1344020177;Delete all rows from the specified tables.__@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables_@since 3.2;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables,since,3,2;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1344027039;Delete all rows from the specified tables.__@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables_@since 3.2;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables,since,3,2;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1346424748;Delete all rows from the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1350881521;Delete all rows from the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1354723106;Delete all rows from the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1356735495;Delete all rows from the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1362408075;Delete all rows from the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1367169053;Delete all rows from the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1394708749;Delete all rows from the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1394709692;Delete all rows from the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1394714705;Delete all rows from the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1394988251;Delete all rows from the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1396191708;Delete all rows from the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1396376545;Delete all rows from the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1467726769;Delete all rows from the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1496955179;Delete all rows from the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1530174524;Delete all rows from the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames);1530405080;Delete all rows from the specified tables._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableNames the names of the tables to delete from_@return the total number of rows deleted from all specified tables;public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {_		int totalRowCount = 0__		for (String tableName : tableNames) {_			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName)__			totalRowCount += rowCount__			if (logger.isInfoEnabled()) {_				logger.info("Deleted " + rowCount + " rows from table " + tableName)__			}_		}_		return totalRowCount__	};delete,all,rows,from,the,specified,tables,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,names,the,names,of,the,tables,to,delete,from,return,the,total,number,of,rows,deleted,from,all,specified,tables;public,static,int,delete,from,tables,jdbc,template,jdbc,template,string,table,names,int,total,row,count,0,for,string,table,name,table,names,int,row,count,jdbc,template,update,delete,from,table,name,total,row,count,row,count,if,logger,is,info,enabled,logger,info,deleted,row,count,rows,from,table,table,name,return,total,row,count
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1344020177;Count the rows in the given table, using the provided {@code WHERE} clause.__<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}.__@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause_@since 3.2;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName___		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}__		return jdbcTemplate.queryForInt(sql)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause,since,3,2;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,return,jdbc,template,query,for,int,sql
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1344027039;Count the rows in the given table, using the provided {@code WHERE} clause.__<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}.__@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause_@since 3.2;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName___		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}__		return jdbcTemplate.queryForInt(sql)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause,since,3,2;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,return,jdbc,template,query,for,int,sql
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1346424748;Count the rows in the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		return jdbcTemplate.queryForInt(sql)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,return,jdbc,template,query,for,int,sql
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1350881521;Count the rows in the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		return jdbcTemplate.queryForInt(sql)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,return,jdbc,template,query,for,int,sql
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1354723106;Count the rows in the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		return jdbcTemplate.queryForInt(sql)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,return,jdbc,template,query,for,int,sql
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1356735495;Count the rows in the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		return jdbcTemplate.queryForInt(sql)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,return,jdbc,template,query,for,int,sql
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1362408075;Count the rows in the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		return jdbcTemplate.queryForObject(sql, Integer.class)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,return,jdbc,template,query,for,object,sql,integer,class
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1367169053;Count the rows in the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		return jdbcTemplate.queryForObject(sql, Integer.class)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,return,jdbc,template,query,for,object,sql,integer,class
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1394708749;Count the rows in the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		return jdbcTemplate.queryForObject(sql, Integer.class)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,return,jdbc,template,query,for,object,sql,integer,class
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1394709692;Count the rows in the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		return jdbcTemplate.queryForObject(sql, Integer.class)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,return,jdbc,template,query,for,object,sql,integer,class
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1394714705;Count the rows in the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		return jdbcTemplate.queryForObject(sql, Integer.class)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,return,jdbc,template,query,for,object,sql,integer,class
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1394988251;Count the rows in the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		return jdbcTemplate.queryForObject(sql, Integer.class)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,return,jdbc,template,query,for,object,sql,integer,class
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1396191708;Count the rows in the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		return jdbcTemplate.queryForObject(sql, Integer.class)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,return,jdbc,template,query,for,object,sql,integer,class
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1396376545;Count the rows in the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		return jdbcTemplate.queryForObject(sql, Integer.class)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,return,jdbc,template,query,for,object,sql,integer,class
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1467726769;Count the rows in the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		return jdbcTemplate.queryForObject(sql, Integer.class)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,return,jdbc,template,query,for,object,sql,integer,class
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1496955179;Count the rows in the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		Integer result = jdbcTemplate.queryForObject(sql, Integer.class)__		return (result != null ? result : 0)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,integer,result,jdbc,template,query,for,object,sql,integer,class,return,result,null,result,0
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1530174524;Count the rows in the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		Integer result = jdbcTemplate.queryForObject(sql, Integer.class)__		return (result != null ? result : 0)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,integer,result,jdbc,template,query,for,object,sql,integer,class,return,result,null,result,0
JdbcTestUtils -> public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause);1530405080;Count the rows in the given table, using the provided {@code WHERE} clause._<p>If the provided {@code WHERE} clause contains text, it will be prefixed_with {@code " WHERE "} and then appended to the generated {@code SELECT}_statement. For example, if the provided table name is {@code "person"} and_the provided where clause is {@code "name = 'Bob' and age > 25"}, the_resulting SQL statement to execute will be_{@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}._@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param tableName the name of the table to count rows in_@param whereClause the {@code WHERE} clause to append to the query_@return the number of rows in the table that match the provided_{@code WHERE} clause;public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {_		String sql = "SELECT COUNT(0) FROM " + tableName__		if (StringUtils.hasText(whereClause)) {_			sql += " WHERE " + whereClause__		}_		Integer result = jdbcTemplate.queryForObject(sql, Integer.class)__		return (result != null ? result : 0)__	};count,the,rows,in,the,given,table,using,the,provided,code,where,clause,p,if,the,provided,code,where,clause,contains,text,it,will,be,prefixed,with,code,where,and,then,appended,to,the,generated,code,select,statement,for,example,if,the,provided,table,name,is,code,person,and,the,provided,where,clause,is,code,name,bob,and,age,25,the,resulting,sql,statement,to,execute,will,be,code,select,count,0,from,person,where,name,bob,and,age,25,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,table,name,the,name,of,the,table,to,count,rows,in,param,where,clause,the,code,where,clause,to,append,to,the,query,return,the,number,of,rows,in,the,table,that,match,the,provided,code,where,clause;public,static,int,count,rows,in,table,where,jdbc,template,jdbc,template,string,table,name,string,where,clause,string,sql,select,count,0,from,table,name,if,string,utils,has,text,where,clause,sql,where,where,clause,integer,result,jdbc,template,query,for,object,sql,integer,class,return,result,null,result,0
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader, 			String sqlResourcePath, boolean continueOnError) throws DataAccessException;1344020177;Execute the given SQL script.__<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons will be removed.__<p><b>Do not use this method to execute DDL if you expect rollback.</b>__@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resourceLoader the resource loader with which to load the SQL script_@param sqlResourcePath the Spring resource path for the SQL script_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@since 3.2;public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader,_			String sqlResourcePath, boolean continueOnError) throws DataAccessException {_		Resource resource = resourceLoader.getResource(sqlResourcePath)__		executeSqlScript(jdbcTemplate, resource, continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,loader,the,resource,loader,with,which,to,load,the,sql,script,param,sql,resource,path,the,spring,resource,path,for,the,sql,script,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,since,3,2;public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,loader,resource,loader,string,sql,resource,path,boolean,continue,on,error,throws,data,access,exception,resource,resource,resource,loader,get,resource,sql,resource,path,execute,sql,script,jdbc,template,resource,continue,on,error
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader, 			String sqlResourcePath, boolean continueOnError) throws DataAccessException;1344027039;Execute the given SQL script.__<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons will be removed.__<p><b>Do not use this method to execute DDL if you expect rollback.</b>__@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resourceLoader the resource loader with which to load the SQL script_@param sqlResourcePath the Spring resource path for the SQL script_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@since 3.2;public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader,_			String sqlResourcePath, boolean continueOnError) throws DataAccessException {_		Resource resource = resourceLoader.getResource(sqlResourcePath)__		executeSqlScript(jdbcTemplate, resource, continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,loader,the,resource,loader,with,which,to,load,the,sql,script,param,sql,resource,path,the,spring,resource,path,for,the,sql,script,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,since,3,2;public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,loader,resource,loader,string,sql,resource,path,boolean,continue,on,error,throws,data,access,exception,resource,resource,resource,loader,get,resource,sql,resource,path,execute,sql,script,jdbc,template,resource,continue,on,error
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader, 			String sqlResourcePath, boolean continueOnError) throws DataAccessException;1346424748;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resourceLoader the resource loader with which to load the SQL script_@param sqlResourcePath the Spring resource path for the SQL script_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false};public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader,_			String sqlResourcePath, boolean continueOnError) throws DataAccessException {__		Resource resource = resourceLoader.getResource(sqlResourcePath)__		executeSqlScript(jdbcTemplate, resource, continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,loader,the,resource,loader,with,which,to,load,the,sql,script,param,sql,resource,path,the,spring,resource,path,for,the,sql,script,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false;public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,loader,resource,loader,string,sql,resource,path,boolean,continue,on,error,throws,data,access,exception,resource,resource,resource,loader,get,resource,sql,resource,path,execute,sql,script,jdbc,template,resource,continue,on,error
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader, 			String sqlResourcePath, boolean continueOnError) throws DataAccessException;1350881521;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resourceLoader the resource loader with which to load the SQL script_@param sqlResourcePath the Spring resource path for the SQL script_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator;public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader,_			String sqlResourcePath, boolean continueOnError) throws DataAccessException {_		Resource resource = resourceLoader.getResource(sqlResourcePath)__		executeSqlScript(jdbcTemplate, resource, continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,loader,the,resource,loader,with,which,to,load,the,sql,script,param,sql,resource,path,the,spring,resource,path,for,the,sql,script,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator;public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,loader,resource,loader,string,sql,resource,path,boolean,continue,on,error,throws,data,access,exception,resource,resource,resource,loader,get,resource,sql,resource,path,execute,sql,script,jdbc,template,resource,continue,on,error
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader, 			String sqlResourcePath, boolean continueOnError) throws DataAccessException;1354723106;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resourceLoader the resource loader with which to load the SQL script_@param sqlResourcePath the Spring resource path for the SQL script_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see #executeSqlScript(JdbcTemplate, Resource, boolean);public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader,_			String sqlResourcePath, boolean continueOnError) throws DataAccessException {_		Resource resource = resourceLoader.getResource(sqlResourcePath)__		executeSqlScript(jdbcTemplate, resource, continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,loader,the,resource,loader,with,which,to,load,the,sql,script,param,sql,resource,path,the,spring,resource,path,for,the,sql,script,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,execute,sql,script,jdbc,template,resource,boolean;public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,loader,resource,loader,string,sql,resource,path,boolean,continue,on,error,throws,data,access,exception,resource,resource,resource,loader,get,resource,sql,resource,path,execute,sql,script,jdbc,template,resource,continue,on,error
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader, 			String sqlResourcePath, boolean continueOnError) throws DataAccessException;1356735495;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resourceLoader the resource loader with which to load the SQL script_@param sqlResourcePath the Spring resource path for the SQL script_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see #executeSqlScript(JdbcTemplate, Resource, boolean);public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader,_			String sqlResourcePath, boolean continueOnError) throws DataAccessException {_		Resource resource = resourceLoader.getResource(sqlResourcePath)__		executeSqlScript(jdbcTemplate, resource, continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,loader,the,resource,loader,with,which,to,load,the,sql,script,param,sql,resource,path,the,spring,resource,path,for,the,sql,script,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,execute,sql,script,jdbc,template,resource,boolean;public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,loader,resource,loader,string,sql,resource,path,boolean,continue,on,error,throws,data,access,exception,resource,resource,resource,loader,get,resource,sql,resource,path,execute,sql,script,jdbc,template,resource,continue,on,error
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader, 			String sqlResourcePath, boolean continueOnError) throws DataAccessException;1362408075;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resourceLoader the resource loader with which to load the SQL script_@param sqlResourcePath the Spring resource path for the SQL script_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see #executeSqlScript(JdbcTemplate, Resource, boolean);public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader,_			String sqlResourcePath, boolean continueOnError) throws DataAccessException {_		Resource resource = resourceLoader.getResource(sqlResourcePath)__		executeSqlScript(jdbcTemplate, resource, continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,loader,the,resource,loader,with,which,to,load,the,sql,script,param,sql,resource,path,the,spring,resource,path,for,the,sql,script,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,execute,sql,script,jdbc,template,resource,boolean;public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,loader,resource,loader,string,sql,resource,path,boolean,continue,on,error,throws,data,access,exception,resource,resource,resource,loader,get,resource,sql,resource,path,execute,sql,script,jdbc,template,resource,continue,on,error
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader, 			String sqlResourcePath, boolean continueOnError) throws DataAccessException;1367169053;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resourceLoader the resource loader with which to load the SQL script_@param sqlResourcePath the Spring resource path for the SQL script_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see #executeSqlScript(JdbcTemplate, Resource, boolean);public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader,_			String sqlResourcePath, boolean continueOnError) throws DataAccessException {_		Resource resource = resourceLoader.getResource(sqlResourcePath)__		executeSqlScript(jdbcTemplate, resource, continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,loader,the,resource,loader,with,which,to,load,the,sql,script,param,sql,resource,path,the,spring,resource,path,for,the,sql,script,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,execute,sql,script,jdbc,template,resource,boolean;public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,loader,resource,loader,string,sql,resource,path,boolean,continue,on,error,throws,data,access,exception,resource,resource,resource,loader,get,resource,sql,resource,path,execute,sql,script,jdbc,template,resource,continue,on,error
JdbcTestUtils -> @Deprecated 	public static boolean containsSqlScriptDelimiters(String script, char delim);1394708749;Determine if the provided SQL script contains the specified delimiter._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@return {@code true} if the script contains the delimiter_ {@code false} otherwise_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#containsSqlScriptDelimiters};@Deprecated_	public static boolean containsSqlScriptDelimiters(String script, char delim) {_		return ScriptUtils.containsSqlScriptDelimiters(script, String.valueOf(delim))__	};determine,if,the,provided,sql,script,contains,the,specified,delimiter,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,return,code,true,if,the,script,contains,the,delimiter,code,false,otherwise,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,contains,sql,script,delimiters;deprecated,public,static,boolean,contains,sql,script,delimiters,string,script,char,delim,return,script,utils,contains,sql,script,delimiters,script,string,value,of,delim
JdbcTestUtils -> @Deprecated 	public static boolean containsSqlScriptDelimiters(String script, char delim);1394709692;Determine if the provided SQL script contains the specified delimiter._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@return {@code true} if the script contains the delimiter_ {@code false} otherwise_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#containsSqlScriptDelimiters};@Deprecated_	public static boolean containsSqlScriptDelimiters(String script, char delim) {_		return ScriptUtils.containsSqlScriptDelimiters(script, String.valueOf(delim))__	};determine,if,the,provided,sql,script,contains,the,specified,delimiter,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,return,code,true,if,the,script,contains,the,delimiter,code,false,otherwise,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,contains,sql,script,delimiters;deprecated,public,static,boolean,contains,sql,script,delimiters,string,script,char,delim,return,script,utils,contains,sql,script,delimiters,script,string,value,of,delim
JdbcTestUtils -> @Deprecated 	public static boolean containsSqlScriptDelimiters(String script, char delim);1394714705;Determine if the provided SQL script contains the specified delimiter._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@return {@code true} if the script contains the delimiter_ {@code false} otherwise_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#containsSqlScriptDelimiters};@Deprecated_	public static boolean containsSqlScriptDelimiters(String script, char delim) {_		return ScriptUtils.containsSqlScriptDelimiters(script, String.valueOf(delim))__	};determine,if,the,provided,sql,script,contains,the,specified,delimiter,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,return,code,true,if,the,script,contains,the,delimiter,code,false,otherwise,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,contains,sql,script,delimiters;deprecated,public,static,boolean,contains,sql,script,delimiters,string,script,char,delim,return,script,utils,contains,sql,script,delimiters,script,string,value,of,delim
JdbcTestUtils -> @Deprecated 	public static boolean containsSqlScriptDelimiters(String script, char delim);1394988251;Determine if the provided SQL script contains the specified delimiter._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@return {@code true} if the script contains the delimiter_ {@code false} otherwise_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#containsSqlScriptDelimiters};@Deprecated_	public static boolean containsSqlScriptDelimiters(String script, char delim) {_		return ScriptUtils.containsSqlScriptDelimiters(script, String.valueOf(delim))__	};determine,if,the,provided,sql,script,contains,the,specified,delimiter,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,return,code,true,if,the,script,contains,the,delimiter,code,false,otherwise,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,contains,sql,script,delimiters;deprecated,public,static,boolean,contains,sql,script,delimiters,string,script,char,delim,return,script,utils,contains,sql,script,delimiters,script,string,value,of,delim
JdbcTestUtils -> @Deprecated 	public static boolean containsSqlScriptDelimiters(String script, char delim);1396191708;Determine if the provided SQL script contains the specified delimiter._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@return {@code true} if the script contains the delimiter_ {@code false} otherwise_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#containsSqlScriptDelimiters};@Deprecated_	public static boolean containsSqlScriptDelimiters(String script, char delim) {_		return ScriptUtils.containsSqlScriptDelimiters(script, String.valueOf(delim))__	};determine,if,the,provided,sql,script,contains,the,specified,delimiter,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,return,code,true,if,the,script,contains,the,delimiter,code,false,otherwise,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,contains,sql,script,delimiters;deprecated,public,static,boolean,contains,sql,script,delimiters,string,script,char,delim,return,script,utils,contains,sql,script,delimiters,script,string,value,of,delim
JdbcTestUtils -> @Deprecated 	public static boolean containsSqlScriptDelimiters(String script, char delim);1396376545;Determine if the provided SQL script contains the specified delimiter._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@return {@code true} if the script contains the delimiter_ {@code false} otherwise_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#containsSqlScriptDelimiters};@Deprecated_	public static boolean containsSqlScriptDelimiters(String script, char delim) {_		return ScriptUtils.containsSqlScriptDelimiters(script, String.valueOf(delim))__	};determine,if,the,provided,sql,script,contains,the,specified,delimiter,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,return,code,true,if,the,script,contains,the,delimiter,code,false,otherwise,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,contains,sql,script,delimiters;deprecated,public,static,boolean,contains,sql,script,delimiters,string,script,char,delim,return,script,utils,contains,sql,script,delimiters,script,string,value,of,delim
JdbcTestUtils -> public static void splitSqlScript(String script, char delim, List<String> statements);1328020251;Split an SQL script into separate statements delimited with the provided_delimiter character. Each individual statement will be added to the_provided <code>List</code>.__@param script the SQL script_@param delim character delimiting each statement - typically a '_'_character_@param statements the List that will contain the individual statements;public static void splitSqlScript(String script, char delim, List<String> statements) {_		StringBuilder sb = new StringBuilder()__		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (content[i] == delim && !inLiteral) {_				if (sb.length() > 0) {_					statements.add(sb.toString())__					sb = new StringBuilder()__				}_			}_			else {_				sb.append(content[i])__			}_		}_		if (sb.length() > 0) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,with,the,provided,delimiter,character,each,individual,statement,will,be,added,to,the,provided,code,list,code,param,script,the,sql,script,param,delim,character,delimiting,each,statement,typically,a,character,param,statements,the,list,that,will,contain,the,individual,statements;public,static,void,split,sql,script,string,script,char,delim,list,string,statements,string,builder,sb,new,string,builder,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,content,i,delim,in,literal,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,else,sb,append,content,i,if,sb,length,0,statements,add,sb,to,string
JdbcTestUtils -> public static void splitSqlScript(String script, char delim, List<String> statements);1344020177;Split an SQL script into separate statements delimited with the provided_delimiter character. Each individual statement will be added to the_provided <code>List</code>.__@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_'_character_@param statements the list that will contain the individual statements;public static void splitSqlScript(String script, char delim, List<String> statements) {_		StringBuilder sb = new StringBuilder()__		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (content[i] == delim && !inLiteral) {_				if (sb.length() > 0) {_					statements.add(sb.toString())__					sb = new StringBuilder()__				}_			} else {_				sb.append(content[i])__			}_		}_		if (sb.length() > 0) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,with,the,provided,delimiter,character,each,individual,statement,will,be,added,to,the,provided,code,list,code,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,statements,the,list,that,will,contain,the,individual,statements;public,static,void,split,sql,script,string,script,char,delim,list,string,statements,string,builder,sb,new,string,builder,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,content,i,delim,in,literal,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,else,sb,append,content,i,if,sb,length,0,statements,add,sb,to,string
JdbcTestUtils -> public static void splitSqlScript(String script, char delim, List<String> statements);1344027039;Split an SQL script into separate statements delimited with the provided_delimiter character. Each individual statement will be added to the_provided <code>List</code>.__@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_'_character_@param statements the list that will contain the individual statements;public static void splitSqlScript(String script, char delim, List<String> statements) {_		StringBuilder sb = new StringBuilder()__		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (content[i] == delim && !inLiteral) {_				if (sb.length() > 0) {_					statements.add(sb.toString())__					sb = new StringBuilder()__				}_			} else {_				sb.append(content[i])__			}_		}_		if (sb.length() > 0) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,with,the,provided,delimiter,character,each,individual,statement,will,be,added,to,the,provided,code,list,code,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,statements,the,list,that,will,contain,the,individual,statements;public,static,void,split,sql,script,string,script,char,delim,list,string,statements,string,builder,sb,new,string,builder,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,content,i,delim,in,literal,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,else,sb,append,content,i,if,sb,length,0,statements,add,sb,to,string
JdbcTestUtils -> public static void splitSqlScript(String script, char delim, List<String> statements);1346424748;Split an SQL script into separate statements delimited with the provided_delimiter character. Each individual statement will be added to the_provided <code>List</code>._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@param statements the list that will contain the individual statements;public static void splitSqlScript(String script, char delim, List<String> statements) {_		StringBuilder sb = new StringBuilder()__		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (content[i] == delim && !inLiteral) {_				if (sb.length() > 0) {_					statements.add(sb.toString())__					sb = new StringBuilder()__				}_			}_			else {_				sb.append(content[i])__			}_		}_		if (sb.length() > 0) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,with,the,provided,delimiter,character,each,individual,statement,will,be,added,to,the,provided,code,list,code,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,statements,the,list,that,will,contain,the,individual,statements;public,static,void,split,sql,script,string,script,char,delim,list,string,statements,string,builder,sb,new,string,builder,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,content,i,delim,in,literal,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,else,sb,append,content,i,if,sb,length,0,statements,add,sb,to,string
JdbcTestUtils -> public static void splitSqlScript(String script, char delim, List<String> statements);1350881521;Split an SQL script into separate statements delimited with the provided_delimiter character. Each individual statement will be added to the_provided <code>List</code>._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@param statements the list that will contain the individual statements;public static void splitSqlScript(String script, char delim, List<String> statements) {_		splitSqlScript(script, "" + delim, statements)__	};split,an,sql,script,into,separate,statements,delimited,with,the,provided,delimiter,character,each,individual,statement,will,be,added,to,the,provided,code,list,code,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,statements,the,list,that,will,contain,the,individual,statements;public,static,void,split,sql,script,string,script,char,delim,list,string,statements,split,sql,script,script,delim,statements
JdbcTestUtils -> public static void splitSqlScript(String script, char delim, List<String> statements);1354723106;Split an SQL script into separate statements delimited by the provided_delimiter character. Each individual statement will be added to the_provided <code>List</code>._<p>Within a statement, "{@code --}" will be used as the comment prefix__any text beginning with the comment prefix and extending to the end of_the line will be omitted from the statement. In addition, multiple adjacent_whitespace characters will be collapsed into a single space._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@param statements the list that will contain the individual statements;public static void splitSqlScript(String script, char delim, List<String> statements) {_		splitSqlScript(script, "" + delim, DEFAULT_COMMENT_PREFIX, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,delimiter,character,each,individual,statement,will,be,added,to,the,provided,code,list,code,p,within,a,statement,code,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,statement,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,statements,the,list,that,will,contain,the,individual,statements;public,static,void,split,sql,script,string,script,char,delim,list,string,statements,split,sql,script,script,delim,statements
JdbcTestUtils -> public static void splitSqlScript(String script, char delim, List<String> statements);1356735495;Split an SQL script into separate statements delimited by the provided_delimiter character. Each individual statement will be added to the_provided {@code List}._<p>Within a statement, "{@code --}" will be used as the comment prefix__any text beginning with the comment prefix and extending to the end of_the line will be omitted from the statement. In addition, multiple adjacent_whitespace characters will be collapsed into a single space._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@param statements the list that will contain the individual statements;public static void splitSqlScript(String script, char delim, List<String> statements) {_		splitSqlScript(script, "" + delim, DEFAULT_COMMENT_PREFIX, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,delimiter,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,a,statement,code,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,statement,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,statements,the,list,that,will,contain,the,individual,statements;public,static,void,split,sql,script,string,script,char,delim,list,string,statements,split,sql,script,script,delim,statements
JdbcTestUtils -> public static void splitSqlScript(String script, char delim, List<String> statements);1362408075;Split an SQL script into separate statements delimited by the provided_delimiter character. Each individual statement will be added to the_provided {@code List}._<p>Within a statement, "{@code --}" will be used as the comment prefix__any text beginning with the comment prefix and extending to the end of_the line will be omitted from the statement. In addition, multiple adjacent_whitespace characters will be collapsed into a single space._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@param statements the list that will contain the individual statements;public static void splitSqlScript(String script, char delim, List<String> statements) {_		splitSqlScript(script, "" + delim, DEFAULT_COMMENT_PREFIX, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,delimiter,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,a,statement,code,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,statement,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,statements,the,list,that,will,contain,the,individual,statements;public,static,void,split,sql,script,string,script,char,delim,list,string,statements,split,sql,script,script,delim,statements
JdbcTestUtils -> public static void splitSqlScript(String script, char delim, List<String> statements);1367169053;Split an SQL script into separate statements delimited by the provided_delimiter character. Each individual statement will be added to the_provided {@code List}._<p>Within a statement, "{@code --}" will be used as the comment prefix__any text beginning with the comment prefix and extending to the end of_the line will be omitted from the statement. In addition, multiple adjacent_whitespace characters will be collapsed into a single space._@param script the SQL script_@param delim character delimiting each statement &mdash_ typically a '_' character_@param statements the list that will contain the individual statements;public static void splitSqlScript(String script, char delim, List<String> statements) {_		splitSqlScript(script, "" + delim, DEFAULT_COMMENT_PREFIX, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,delimiter,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,a,statement,code,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,statement,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,delim,character,delimiting,each,statement,mdash,typically,a,character,param,statements,the,list,that,will,contain,the,individual,statements;public,static,void,split,sql,script,string,script,char,delim,list,string,statements,split,sql,script,script,delim,statements
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError) 			throws DataAccessException;1344020177;Execute the given SQL script.__<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons will be removed.__<p><b>Do not use this method to execute DDL if you expect rollback.</b>__@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@since 3.2;public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError)_			throws DataAccessException {__		if (logger.isInfoEnabled()) {_			logger.info("Executing SQL script from " + resource)__		}__		long startTime = System.currentTimeMillis()__		List<String> statements = new LinkedList<String>()__		LineNumberReader reader = null__		try {_			reader = new LineNumberReader(resource.getReader())__			String script = readScript(reader)__			char delimiter = '_'__			if (!containsSqlScriptDelimiters(script, delimiter)) {_				delimiter = '\n'__			}_			splitSqlScript(script, delimiter, statements)__			for (String statement : statements) {_				try {_					int rowsAffected = jdbcTemplate.update(statement)__					if (logger.isDebugEnabled()) {_						logger.debug(rowsAffected + " rows affected by SQL: " + statement)__					}_				} catch (DataAccessException ex) {_					if (continueOnError) {_						if (logger.isWarnEnabled()) {_							logger.warn("SQL statement [" + statement + "] failed", ex)__						}_					} else {_						throw ex__					}_				}_			}_			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info(String.format("Executed SQL script from %s in %s ms.", resource, elapsedTime))__			}_		} catch (IOException ex) {_			throw new DataAccessResourceFailureException("Failed to open SQL script from " + resource, ex)__		} finally {_			try {_				if (reader != null) {_					reader.close()__				}_			} catch (IOException ex) {_				_			}_		}_	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,since,3,2;public,static,void,execute,sql,script,jdbc,template,jdbc,template,encoded,resource,resource,boolean,continue,on,error,throws,data,access,exception,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,list,string,statements,new,linked,list,string,line,number,reader,reader,null,try,reader,new,line,number,reader,resource,get,reader,string,script,read,script,reader,char,delimiter,if,contains,sql,script,delimiters,script,delimiter,delimiter,n,split,sql,script,script,delimiter,statements,for,string,statement,statements,try,int,rows,affected,jdbc,template,update,statement,if,logger,is,debug,enabled,logger,debug,rows,affected,rows,affected,by,sql,statement,catch,data,access,exception,ex,if,continue,on,error,if,logger,is,warn,enabled,logger,warn,sql,statement,statement,failed,ex,else,throw,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,string,format,executed,sql,script,from,s,in,s,ms,resource,elapsed,time,catch,ioexception,ex,throw,new,data,access,resource,failure,exception,failed,to,open,sql,script,from,resource,ex,finally,try,if,reader,null,reader,close,catch,ioexception,ex
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError) 			throws DataAccessException;1344027039;Execute the given SQL script.__<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons will be removed.__<p><b>Do not use this method to execute DDL if you expect rollback.</b>__@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@since 3.2;public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError)_			throws DataAccessException {__		if (logger.isInfoEnabled()) {_			logger.info("Executing SQL script from " + resource)__		}__		long startTime = System.currentTimeMillis()__		List<String> statements = new LinkedList<String>()__		LineNumberReader reader = null__		try {_			reader = new LineNumberReader(resource.getReader())__			String script = readScript(reader)__			char delimiter = '_'__			if (!containsSqlScriptDelimiters(script, delimiter)) {_				delimiter = '\n'__			}_			splitSqlScript(script, delimiter, statements)__			for (String statement : statements) {_				try {_					int rowsAffected = jdbcTemplate.update(statement)__					if (logger.isDebugEnabled()) {_						logger.debug(rowsAffected + " rows affected by SQL: " + statement)__					}_				} catch (DataAccessException ex) {_					if (continueOnError) {_						if (logger.isWarnEnabled()) {_							logger.warn("SQL statement [" + statement + "] failed", ex)__						}_					} else {_						throw ex__					}_				}_			}_			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info(String.format("Executed SQL script from %s in %s ms.", resource, elapsedTime))__			}_		} catch (IOException ex) {_			throw new DataAccessResourceFailureException("Failed to open SQL script from " + resource, ex)__		} finally {_			try {_				if (reader != null) {_					reader.close()__				}_			} catch (IOException ex) {_				_			}_		}_	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,since,3,2;public,static,void,execute,sql,script,jdbc,template,jdbc,template,encoded,resource,resource,boolean,continue,on,error,throws,data,access,exception,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,list,string,statements,new,linked,list,string,line,number,reader,reader,null,try,reader,new,line,number,reader,resource,get,reader,string,script,read,script,reader,char,delimiter,if,contains,sql,script,delimiters,script,delimiter,delimiter,n,split,sql,script,script,delimiter,statements,for,string,statement,statements,try,int,rows,affected,jdbc,template,update,statement,if,logger,is,debug,enabled,logger,debug,rows,affected,rows,affected,by,sql,statement,catch,data,access,exception,ex,if,continue,on,error,if,logger,is,warn,enabled,logger,warn,sql,statement,statement,failed,ex,else,throw,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,string,format,executed,sql,script,from,s,in,s,ms,resource,elapsed,time,catch,ioexception,ex,throw,new,data,access,resource,failure,exception,failed,to,open,sql,script,from,resource,ex,finally,try,if,reader,null,reader,close,catch,ioexception,ex
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError) 			throws DataAccessException;1346424748;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false};public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError)_			throws DataAccessException {__		if (logger.isInfoEnabled()) {_			logger.info("Executing SQL script from " + resource)__		}_		long startTime = System.currentTimeMillis()__		List<String> statements = new LinkedList<String>()__		LineNumberReader reader = null__		try {_			reader = new LineNumberReader(resource.getReader())__			String script = readScript(reader)__			char delimiter = '_'__			if (!containsSqlScriptDelimiters(script, delimiter)) {_				delimiter = '\n'__			}_			splitSqlScript(script, delimiter, statements)__			for (String statement : statements) {_				try {_					int rowsAffected = jdbcTemplate.update(statement)__					if (logger.isDebugEnabled()) {_						logger.debug(rowsAffected + " rows affected by SQL: " + statement)__					}_				}_				catch (DataAccessException ex) {_					if (continueOnError) {_						if (logger.isWarnEnabled()) {_							logger.warn("SQL statement [" + statement + "] failed", ex)__						}_					}_					else {_						throw ex__					}_				}_			}_			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info(String.format("Executed SQL script from %s in %s ms.", resource, elapsedTime))__			}_		}_		catch (IOException ex) {_			throw new DataAccessResourceFailureException("Failed to open SQL script from " + resource, ex)__		}_		finally {_			try {_				if (reader != null) {_					reader.close()__				}_			} catch (IOException ex) {_				_			}_		}_	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false;public,static,void,execute,sql,script,jdbc,template,jdbc,template,encoded,resource,resource,boolean,continue,on,error,throws,data,access,exception,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,list,string,statements,new,linked,list,string,line,number,reader,reader,null,try,reader,new,line,number,reader,resource,get,reader,string,script,read,script,reader,char,delimiter,if,contains,sql,script,delimiters,script,delimiter,delimiter,n,split,sql,script,script,delimiter,statements,for,string,statement,statements,try,int,rows,affected,jdbc,template,update,statement,if,logger,is,debug,enabled,logger,debug,rows,affected,rows,affected,by,sql,statement,catch,data,access,exception,ex,if,continue,on,error,if,logger,is,warn,enabled,logger,warn,sql,statement,statement,failed,ex,else,throw,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,string,format,executed,sql,script,from,s,in,s,ms,resource,elapsed,time,catch,ioexception,ex,throw,new,data,access,resource,failure,exception,failed,to,open,sql,script,from,resource,ex,finally,try,if,reader,null,reader,close,catch,ioexception,ex
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError) 			throws DataAccessException;1350881521;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator;public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError)_			throws DataAccessException {__		if (logger.isInfoEnabled()) {_			logger.info("Executing SQL script from " + resource)__		}_		long startTime = System.currentTimeMillis()__		List<String> statements = new LinkedList<String>()__		LineNumberReader reader = null__		try {_			reader = new LineNumberReader(resource.getReader())__			String script = readScript(reader)__			char delimiter = DEFAULT_STATEMENT_SEPARATOR__			if (!containsSqlScriptDelimiters(script, delimiter)) {_				delimiter = '\n'__			}_			splitSqlScript(script, delimiter, statements)__			int lineNumber = 0__			for (String statement : statements) {_				lineNumber++__				try {_					int rowsAffected = jdbcTemplate.update(statement)__					if (logger.isDebugEnabled()) {_						logger.debug(rowsAffected + " rows affected by SQL: " + statement)__					}_				}_				catch (DataAccessException ex) {_					if (continueOnError) {_						if (logger.isWarnEnabled()) {_							logger.warn("Failed to execute SQL script statement at line " + lineNumber_									+ " of resource " + resource + ": " + statement, ex)__						}_					}_					else {_						throw ex__					}_				}_			}_			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info(String.format("Executed SQL script from %s in %s ms.", resource, elapsedTime))__			}_		}_		catch (IOException ex) {_			throw new DataAccessResourceFailureException("Failed to open SQL script from " + resource, ex)__		}_		finally {_			try {_				if (reader != null) {_					reader.close()__				}_			}_			catch (IOException ex) {_				_			}_		}_	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator;public,static,void,execute,sql,script,jdbc,template,jdbc,template,encoded,resource,resource,boolean,continue,on,error,throws,data,access,exception,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,list,string,statements,new,linked,list,string,line,number,reader,reader,null,try,reader,new,line,number,reader,resource,get,reader,string,script,read,script,reader,char,delimiter,if,contains,sql,script,delimiters,script,delimiter,delimiter,n,split,sql,script,script,delimiter,statements,int,line,number,0,for,string,statement,statements,line,number,try,int,rows,affected,jdbc,template,update,statement,if,logger,is,debug,enabled,logger,debug,rows,affected,rows,affected,by,sql,statement,catch,data,access,exception,ex,if,continue,on,error,if,logger,is,warn,enabled,logger,warn,failed,to,execute,sql,script,statement,at,line,line,number,of,resource,resource,statement,ex,else,throw,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,string,format,executed,sql,script,from,s,in,s,ms,resource,elapsed,time,catch,ioexception,ex,throw,new,data,access,resource,failure,exception,failed,to,open,sql,script,from,resource,ex,finally,try,if,reader,null,reader,close,catch,ioexception,ex
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError) 			throws DataAccessException;1354723106;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator;public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError)_			throws DataAccessException {__		if (logger.isInfoEnabled()) {_			logger.info("Executing SQL script from " + resource)__		}_		long startTime = System.currentTimeMillis()__		List<String> statements = new LinkedList<String>()__		LineNumberReader reader = null__		try {_			reader = new LineNumberReader(resource.getReader())__			String script = readScript(reader)__			char delimiter = DEFAULT_STATEMENT_SEPARATOR__			if (!containsSqlScriptDelimiters(script, delimiter)) {_				delimiter = '\n'__			}_			splitSqlScript(script, delimiter, statements)__			int lineNumber = 0__			for (String statement : statements) {_				lineNumber++__				try {_					int rowsAffected = jdbcTemplate.update(statement)__					if (logger.isDebugEnabled()) {_						logger.debug(rowsAffected + " rows affected by SQL: " + statement)__					}_				}_				catch (DataAccessException ex) {_					if (continueOnError) {_						if (logger.isWarnEnabled()) {_							logger.warn("Failed to execute SQL script statement at line " + lineNumber_									+ " of resource " + resource + ": " + statement, ex)__						}_					}_					else {_						throw ex__					}_				}_			}_			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info(String.format("Executed SQL script from %s in %s ms.", resource, elapsedTime))__			}_		}_		catch (IOException ex) {_			throw new DataAccessResourceFailureException("Failed to open SQL script from " + resource, ex)__		}_		finally {_			try {_				if (reader != null) {_					reader.close()__				}_			}_			catch (IOException ex) {_				_			}_		}_	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator;public,static,void,execute,sql,script,jdbc,template,jdbc,template,encoded,resource,resource,boolean,continue,on,error,throws,data,access,exception,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,list,string,statements,new,linked,list,string,line,number,reader,reader,null,try,reader,new,line,number,reader,resource,get,reader,string,script,read,script,reader,char,delimiter,if,contains,sql,script,delimiters,script,delimiter,delimiter,n,split,sql,script,script,delimiter,statements,int,line,number,0,for,string,statement,statements,line,number,try,int,rows,affected,jdbc,template,update,statement,if,logger,is,debug,enabled,logger,debug,rows,affected,rows,affected,by,sql,statement,catch,data,access,exception,ex,if,continue,on,error,if,logger,is,warn,enabled,logger,warn,failed,to,execute,sql,script,statement,at,line,line,number,of,resource,resource,statement,ex,else,throw,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,string,format,executed,sql,script,from,s,in,s,ms,resource,elapsed,time,catch,ioexception,ex,throw,new,data,access,resource,failure,exception,failed,to,open,sql,script,from,resource,ex,finally,try,if,reader,null,reader,close,catch,ioexception,ex
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError) 			throws DataAccessException;1356735495;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator;public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError)_			throws DataAccessException {__		if (logger.isInfoEnabled()) {_			logger.info("Executing SQL script from " + resource)__		}_		long startTime = System.currentTimeMillis()__		List<String> statements = new LinkedList<String>()__		LineNumberReader reader = null__		try {_			reader = new LineNumberReader(resource.getReader())__			String script = readScript(reader)__			char delimiter = DEFAULT_STATEMENT_SEPARATOR__			if (!containsSqlScriptDelimiters(script, delimiter)) {_				delimiter = '\n'__			}_			splitSqlScript(script, delimiter, statements)__			int lineNumber = 0__			for (String statement : statements) {_				lineNumber++__				try {_					int rowsAffected = jdbcTemplate.update(statement)__					if (logger.isDebugEnabled()) {_						logger.debug(rowsAffected + " rows affected by SQL: " + statement)__					}_				}_				catch (DataAccessException ex) {_					if (continueOnError) {_						if (logger.isWarnEnabled()) {_							logger.warn("Failed to execute SQL script statement at line " + lineNumber_									+ " of resource " + resource + ": " + statement, ex)__						}_					}_					else {_						throw ex__					}_				}_			}_			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info(String.format("Executed SQL script from %s in %s ms.", resource, elapsedTime))__			}_		}_		catch (IOException ex) {_			throw new DataAccessResourceFailureException("Failed to open SQL script from " + resource, ex)__		}_		finally {_			try {_				if (reader != null) {_					reader.close()__				}_			}_			catch (IOException ex) {_				_			}_		}_	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator;public,static,void,execute,sql,script,jdbc,template,jdbc,template,encoded,resource,resource,boolean,continue,on,error,throws,data,access,exception,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,list,string,statements,new,linked,list,string,line,number,reader,reader,null,try,reader,new,line,number,reader,resource,get,reader,string,script,read,script,reader,char,delimiter,if,contains,sql,script,delimiters,script,delimiter,delimiter,n,split,sql,script,script,delimiter,statements,int,line,number,0,for,string,statement,statements,line,number,try,int,rows,affected,jdbc,template,update,statement,if,logger,is,debug,enabled,logger,debug,rows,affected,rows,affected,by,sql,statement,catch,data,access,exception,ex,if,continue,on,error,if,logger,is,warn,enabled,logger,warn,failed,to,execute,sql,script,statement,at,line,line,number,of,resource,resource,statement,ex,else,throw,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,string,format,executed,sql,script,from,s,in,s,ms,resource,elapsed,time,catch,ioexception,ex,throw,new,data,access,resource,failure,exception,failed,to,open,sql,script,from,resource,ex,finally,try,if,reader,null,reader,close,catch,ioexception,ex
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError) 			throws DataAccessException;1362408075;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator;public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError)_			throws DataAccessException {__		if (logger.isInfoEnabled()) {_			logger.info("Executing SQL script from " + resource)__		}_		long startTime = System.currentTimeMillis()__		List<String> statements = new LinkedList<String>()__		LineNumberReader reader = null__		try {_			reader = new LineNumberReader(resource.getReader())__			String script = readScript(reader)__			char delimiter = DEFAULT_STATEMENT_SEPARATOR__			if (!containsSqlScriptDelimiters(script, delimiter)) {_				delimiter = '\n'__			}_			splitSqlScript(script, delimiter, statements)__			int lineNumber = 0__			for (String statement : statements) {_				lineNumber++__				try {_					int rowsAffected = jdbcTemplate.update(statement)__					if (logger.isDebugEnabled()) {_						logger.debug(rowsAffected + " rows affected by SQL: " + statement)__					}_				}_				catch (DataAccessException ex) {_					if (continueOnError) {_						if (logger.isWarnEnabled()) {_							logger.warn("Failed to execute SQL script statement at line " + lineNumber_									+ " of resource " + resource + ": " + statement, ex)__						}_					}_					else {_						throw ex__					}_				}_			}_			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info(String.format("Executed SQL script from %s in %s ms.", resource, elapsedTime))__			}_		}_		catch (IOException ex) {_			throw new DataAccessResourceFailureException("Failed to open SQL script from " + resource, ex)__		}_		finally {_			try {_				if (reader != null) {_					reader.close()__				}_			}_			catch (IOException ex) {_				_			}_		}_	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator;public,static,void,execute,sql,script,jdbc,template,jdbc,template,encoded,resource,resource,boolean,continue,on,error,throws,data,access,exception,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,list,string,statements,new,linked,list,string,line,number,reader,reader,null,try,reader,new,line,number,reader,resource,get,reader,string,script,read,script,reader,char,delimiter,if,contains,sql,script,delimiters,script,delimiter,delimiter,n,split,sql,script,script,delimiter,statements,int,line,number,0,for,string,statement,statements,line,number,try,int,rows,affected,jdbc,template,update,statement,if,logger,is,debug,enabled,logger,debug,rows,affected,rows,affected,by,sql,statement,catch,data,access,exception,ex,if,continue,on,error,if,logger,is,warn,enabled,logger,warn,failed,to,execute,sql,script,statement,at,line,line,number,of,resource,resource,statement,ex,else,throw,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,string,format,executed,sql,script,from,s,in,s,ms,resource,elapsed,time,catch,ioexception,ex,throw,new,data,access,resource,failure,exception,failed,to,open,sql,script,from,resource,ex,finally,try,if,reader,null,reader,close,catch,ioexception,ex
JdbcTestUtils -> public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError) 			throws DataAccessException;1367169053;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator;public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError)_			throws DataAccessException {__		if (logger.isInfoEnabled()) {_			logger.info("Executing SQL script from " + resource)__		}_		long startTime = System.currentTimeMillis()__		List<String> statements = new LinkedList<String>()__		LineNumberReader reader = null__		try {_			reader = new LineNumberReader(resource.getReader())__			String script = readScript(reader)__			char delimiter = DEFAULT_STATEMENT_SEPARATOR__			if (!containsSqlScriptDelimiters(script, delimiter)) {_				delimiter = '\n'__			}_			splitSqlScript(script, delimiter, statements)__			int lineNumber = 0__			for (String statement : statements) {_				lineNumber++__				try {_					int rowsAffected = jdbcTemplate.update(statement)__					if (logger.isDebugEnabled()) {_						logger.debug(rowsAffected + " rows affected by SQL: " + statement)__					}_				}_				catch (DataAccessException ex) {_					if (continueOnError) {_						if (logger.isWarnEnabled()) {_							logger.warn("Failed to execute SQL script statement at line " + lineNumber_									+ " of resource " + resource + ": " + statement, ex)__						}_					}_					else {_						throw ex__					}_				}_			}_			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info(String.format("Executed SQL script from %s in %s ms.", resource, elapsedTime))__			}_		}_		catch (IOException ex) {_			throw new DataAccessResourceFailureException("Failed to open SQL script from " + resource, ex)__		}_		finally {_			try {_				if (reader != null) {_					reader.close()__				}_			}_			catch (IOException ex) {_				_			}_		}_	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator;public,static,void,execute,sql,script,jdbc,template,jdbc,template,encoded,resource,resource,boolean,continue,on,error,throws,data,access,exception,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,list,string,statements,new,linked,list,string,line,number,reader,reader,null,try,reader,new,line,number,reader,resource,get,reader,string,script,read,script,reader,char,delimiter,if,contains,sql,script,delimiters,script,delimiter,delimiter,n,split,sql,script,script,delimiter,statements,int,line,number,0,for,string,statement,statements,line,number,try,int,rows,affected,jdbc,template,update,statement,if,logger,is,debug,enabled,logger,debug,rows,affected,rows,affected,by,sql,statement,catch,data,access,exception,ex,if,continue,on,error,if,logger,is,warn,enabled,logger,warn,failed,to,execute,sql,script,statement,at,line,line,number,of,resource,resource,statement,ex,else,throw,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,string,format,executed,sql,script,from,s,in,s,ms,resource,elapsed,time,catch,ioexception,ex,throw,new,data,access,resource,failure,exception,failed,to,open,sql,script,from,resource,ex,finally,try,if,reader,null,reader,close,catch,ioexception,ex
JdbcTestUtils -> @Deprecated 	public static String readScript(LineNumberReader lineNumberReader) throws IOException;1394708749;Read a script from the provided {@code LineNumberReader}, using_"{@code --}" as the comment prefix, and build a {@code String} containing_the lines._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@return a {@code String} containing the script lines_@see #readScript(LineNumberReader, String)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#readScript(LineNumberReader, String, String)};@Deprecated_	public static String readScript(LineNumberReader lineNumberReader) throws IOException {_		return readScript(lineNumberReader, ScriptUtils.DEFAULT_COMMENT_PREFIX)__	};read,a,script,from,the,provided,code,line,number,reader,using,code,as,the,comment,prefix,and,build,a,code,string,containing,the,lines,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,return,a,code,string,containing,the,script,lines,see,read,script,line,number,reader,string,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,read,script,line,number,reader,string,string;deprecated,public,static,string,read,script,line,number,reader,line,number,reader,throws,ioexception,return,read,script,line,number,reader,script,utils
JdbcTestUtils -> @Deprecated 	public static String readScript(LineNumberReader lineNumberReader) throws IOException;1394709692;Read a script from the provided {@code LineNumberReader}, using_"{@code --}" as the comment prefix, and build a {@code String} containing_the lines._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@return a {@code String} containing the script lines_@see #readScript(LineNumberReader, String)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#readScript(LineNumberReader, String, String)};@Deprecated_	public static String readScript(LineNumberReader lineNumberReader) throws IOException {_		return readScript(lineNumberReader, ScriptUtils.DEFAULT_COMMENT_PREFIX)__	};read,a,script,from,the,provided,code,line,number,reader,using,code,as,the,comment,prefix,and,build,a,code,string,containing,the,lines,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,return,a,code,string,containing,the,script,lines,see,read,script,line,number,reader,string,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,read,script,line,number,reader,string,string;deprecated,public,static,string,read,script,line,number,reader,line,number,reader,throws,ioexception,return,read,script,line,number,reader,script,utils
JdbcTestUtils -> @Deprecated 	public static String readScript(LineNumberReader lineNumberReader) throws IOException;1394714705;Read a script from the provided {@code LineNumberReader}, using_"{@code --}" as the comment prefix, and build a {@code String} containing_the lines._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@return a {@code String} containing the script lines_@see #readScript(LineNumberReader, String)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#readScript(LineNumberReader, String, String)};@Deprecated_	public static String readScript(LineNumberReader lineNumberReader) throws IOException {_		return readScript(lineNumberReader, ScriptUtils.DEFAULT_COMMENT_PREFIX)__	};read,a,script,from,the,provided,code,line,number,reader,using,code,as,the,comment,prefix,and,build,a,code,string,containing,the,lines,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,return,a,code,string,containing,the,script,lines,see,read,script,line,number,reader,string,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,read,script,line,number,reader,string,string;deprecated,public,static,string,read,script,line,number,reader,line,number,reader,throws,ioexception,return,read,script,line,number,reader,script,utils
JdbcTestUtils -> @Deprecated 	public static String readScript(LineNumberReader lineNumberReader) throws IOException;1394988251;Read a script from the provided {@code LineNumberReader}, using_"{@code --}" as the comment prefix, and build a {@code String} containing_the lines._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@return a {@code String} containing the script lines_@see #readScript(LineNumberReader, String)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#readScript(LineNumberReader, String, String)};@Deprecated_	public static String readScript(LineNumberReader lineNumberReader) throws IOException {_		return readScript(lineNumberReader, ScriptUtils.DEFAULT_COMMENT_PREFIX)__	};read,a,script,from,the,provided,code,line,number,reader,using,code,as,the,comment,prefix,and,build,a,code,string,containing,the,lines,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,return,a,code,string,containing,the,script,lines,see,read,script,line,number,reader,string,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,read,script,line,number,reader,string,string;deprecated,public,static,string,read,script,line,number,reader,line,number,reader,throws,ioexception,return,read,script,line,number,reader,script,utils
JdbcTestUtils -> @Deprecated 	public static String readScript(LineNumberReader lineNumberReader) throws IOException;1396191708;Read a script from the provided {@code LineNumberReader}, using_"{@code --}" as the comment prefix, and build a {@code String} containing_the lines._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@return a {@code String} containing the script lines_@see #readScript(LineNumberReader, String)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#readScript(LineNumberReader, String, String)};@Deprecated_	public static String readScript(LineNumberReader lineNumberReader) throws IOException {_		return readScript(lineNumberReader, ScriptUtils.DEFAULT_COMMENT_PREFIX)__	};read,a,script,from,the,provided,code,line,number,reader,using,code,as,the,comment,prefix,and,build,a,code,string,containing,the,lines,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,return,a,code,string,containing,the,script,lines,see,read,script,line,number,reader,string,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,read,script,line,number,reader,string,string;deprecated,public,static,string,read,script,line,number,reader,line,number,reader,throws,ioexception,return,read,script,line,number,reader,script,utils
JdbcTestUtils -> @Deprecated 	public static String readScript(LineNumberReader lineNumberReader) throws IOException;1396376545;Read a script from the provided {@code LineNumberReader}, using_"{@code --}" as the comment prefix, and build a {@code String} containing_the lines._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@return a {@code String} containing the script lines_@see #readScript(LineNumberReader, String)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#readScript(LineNumberReader, String, String)};@Deprecated_	public static String readScript(LineNumberReader lineNumberReader) throws IOException {_		return readScript(lineNumberReader, ScriptUtils.DEFAULT_COMMENT_PREFIX)__	};read,a,script,from,the,provided,code,line,number,reader,using,code,as,the,comment,prefix,and,build,a,code,string,containing,the,lines,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,return,a,code,string,containing,the,script,lines,see,read,script,line,number,reader,string,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,read,script,line,number,reader,string,string;deprecated,public,static,string,read,script,line,number,reader,line,number,reader,throws,ioexception,return,read,script,line,number,reader,script,utils
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader, 			String sqlResourcePath, boolean continueOnError) throws DataAccessException;1394708749;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resourceLoader the resource loader with which to load the SQL script_@param sqlResourcePath the Spring resource path for the SQL script_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see DatabasePopulatorUtils_@see #executeSqlScript(JdbcTemplate, Resource, boolean)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader,_			String sqlResourcePath, boolean continueOnError) throws DataAccessException {_		Resource resource = resourceLoader.getResource(sqlResourcePath)__		executeSqlScript(jdbcTemplate, resource, continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,loader,the,resource,loader,with,which,to,load,the,sql,script,param,sql,resource,path,the,spring,resource,path,for,the,sql,script,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,database,populator,utils,see,execute,sql,script,jdbc,template,resource,boolean,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,loader,resource,loader,string,sql,resource,path,boolean,continue,on,error,throws,data,access,exception,resource,resource,resource,loader,get,resource,sql,resource,path,execute,sql,script,jdbc,template,resource,continue,on,error
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader, 			String sqlResourcePath, boolean continueOnError) throws DataAccessException;1394709692;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resourceLoader the resource loader with which to load the SQL script_@param sqlResourcePath the Spring resource path for the SQL script_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see DatabasePopulatorUtils_@see #executeSqlScript(JdbcTemplate, Resource, boolean)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader,_			String sqlResourcePath, boolean continueOnError) throws DataAccessException {_		Resource resource = resourceLoader.getResource(sqlResourcePath)__		executeSqlScript(jdbcTemplate, resource, continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,loader,the,resource,loader,with,which,to,load,the,sql,script,param,sql,resource,path,the,spring,resource,path,for,the,sql,script,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,database,populator,utils,see,execute,sql,script,jdbc,template,resource,boolean,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,loader,resource,loader,string,sql,resource,path,boolean,continue,on,error,throws,data,access,exception,resource,resource,resource,loader,get,resource,sql,resource,path,execute,sql,script,jdbc,template,resource,continue,on,error
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader, 			String sqlResourcePath, boolean continueOnError) throws DataAccessException;1394714705;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resourceLoader the resource loader with which to load the SQL script_@param sqlResourcePath the Spring resource path for the SQL script_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see DatabasePopulatorUtils_@see #executeSqlScript(JdbcTemplate, Resource, boolean)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader,_			String sqlResourcePath, boolean continueOnError) throws DataAccessException {_		Resource resource = resourceLoader.getResource(sqlResourcePath)__		executeSqlScript(jdbcTemplate, resource, continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,loader,the,resource,loader,with,which,to,load,the,sql,script,param,sql,resource,path,the,spring,resource,path,for,the,sql,script,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,database,populator,utils,see,execute,sql,script,jdbc,template,resource,boolean,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,loader,resource,loader,string,sql,resource,path,boolean,continue,on,error,throws,data,access,exception,resource,resource,resource,loader,get,resource,sql,resource,path,execute,sql,script,jdbc,template,resource,continue,on,error
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader, 			String sqlResourcePath, boolean continueOnError) throws DataAccessException;1394988251;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resourceLoader the resource loader with which to load the SQL script_@param sqlResourcePath the Spring resource path for the SQL script_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see DatabasePopulatorUtils_@see #executeSqlScript(JdbcTemplate, Resource, boolean)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader,_			String sqlResourcePath, boolean continueOnError) throws DataAccessException {_		Resource resource = resourceLoader.getResource(sqlResourcePath)__		executeSqlScript(jdbcTemplate, resource, continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,loader,the,resource,loader,with,which,to,load,the,sql,script,param,sql,resource,path,the,spring,resource,path,for,the,sql,script,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,database,populator,utils,see,execute,sql,script,jdbc,template,resource,boolean,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,loader,resource,loader,string,sql,resource,path,boolean,continue,on,error,throws,data,access,exception,resource,resource,resource,loader,get,resource,sql,resource,path,execute,sql,script,jdbc,template,resource,continue,on,error
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader, 			String sqlResourcePath, boolean continueOnError) throws DataAccessException;1396191708;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resourceLoader the resource loader with which to load the SQL script_@param sqlResourcePath the Spring resource path for the SQL script_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see #executeSqlScript(JdbcTemplate, Resource, boolean)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader,_			String sqlResourcePath, boolean continueOnError) throws DataAccessException {_		Resource resource = resourceLoader.getResource(sqlResourcePath)__		executeSqlScript(jdbcTemplate, resource, continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,loader,the,resource,loader,with,which,to,load,the,sql,script,param,sql,resource,path,the,spring,resource,path,for,the,sql,script,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,execute,sql,script,jdbc,template,resource,boolean,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,loader,resource,loader,string,sql,resource,path,boolean,continue,on,error,throws,data,access,exception,resource,resource,resource,loader,get,resource,sql,resource,path,execute,sql,script,jdbc,template,resource,continue,on,error
JdbcTestUtils -> @Deprecated 	public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader, 			String sqlResourcePath, boolean continueOnError) throws DataAccessException;1396376545;Execute the given SQL script._<p>The script will typically be loaded from the classpath. There should_be one statement per line. Any semicolons and line comments will be removed._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param jdbcTemplate the JdbcTemplate with which to perform JDBC operations_@param resourceLoader the resource loader with which to load the SQL script_@param sqlResourcePath the Spring resource path for the SQL script_@param continueOnError whether or not to continue without throwing an_exception in the event of an error_@throws DataAccessException if there is an error executing a statement_and {@code continueOnError} is {@code false}_@see ResourceDatabasePopulator_@see #executeSqlScript(JdbcTemplate, Resource, boolean)_@deprecated as of Spring 4.0.3, in favor of using_{@link org.springframework.jdbc.datasource.init.ScriptUtils#executeSqlScript}_or {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator}.;@Deprecated_	public static void executeSqlScript(JdbcTemplate jdbcTemplate, ResourceLoader resourceLoader,_			String sqlResourcePath, boolean continueOnError) throws DataAccessException {_		Resource resource = resourceLoader.getResource(sqlResourcePath)__		executeSqlScript(jdbcTemplate, resource, continueOnError)__	};execute,the,given,sql,script,p,the,script,will,typically,be,loaded,from,the,classpath,there,should,be,one,statement,per,line,any,semicolons,and,line,comments,will,be,removed,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,jdbc,template,the,jdbc,template,with,which,to,perform,jdbc,operations,param,resource,loader,the,resource,loader,with,which,to,load,the,sql,script,param,sql,resource,path,the,spring,resource,path,for,the,sql,script,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,throws,data,access,exception,if,there,is,an,error,executing,a,statement,and,code,continue,on,error,is,code,false,see,resource,database,populator,see,execute,sql,script,jdbc,template,resource,boolean,deprecated,as,of,spring,4,0,3,in,favor,of,using,link,org,springframework,jdbc,datasource,init,script,utils,execute,sql,script,or,link,org,springframework,jdbc,datasource,init,resource,database,populator;deprecated,public,static,void,execute,sql,script,jdbc,template,jdbc,template,resource,loader,resource,loader,string,sql,resource,path,boolean,continue,on,error,throws,data,access,exception,resource,resource,resource,loader,get,resource,sql,resource,path,execute,sql,script,jdbc,template,resource,continue,on,error
