# id;timestamp;commentText;codeText;commentWords;codeWords
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1328020251;Constructs a new <code>SpringJUnit4ClassRunner</code> and initializes a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		this.testContextManager = createTestContextManager(clazz)__	};constructs,a,new,code,spring,junit4class,runner,code,and,initializes,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1356735495;Constructs a new {@code SpringJUnit4ClassRunner} and initializes a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		this.testContextManager = createTestContextManager(clazz)__	};constructs,a,new,code,spring,junit4class,runner,and,initializes,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1367163114;Constructs a new {@code SpringJUnit4ClassRunner} and initializes a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		this.testContextManager = createTestContextManager(clazz)__	};constructs,a,new,code,spring,junit4class,runner,and,initializes,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1382920864;Constructs a new {@code SpringJUnit4ClassRunner} and initializes a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		this.testContextManager = createTestContextManager(clazz)__	};constructs,a,new,code,spring,junit4class,runner,and,initializes,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1385499540;Constructs a new {@code SpringJUnit4ClassRunner} and initializes a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		this.testContextManager = createTestContextManager(clazz)__	};constructs,a,new,code,spring,junit4class,runner,and,initializes,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1396960609;Constructs a new {@code SpringJUnit4ClassRunner} and initializes a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		this.testContextManager = createTestContextManager(clazz)__	};constructs,a,new,code,spring,junit4class,runner,and,initializes,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1397082962;Constructs a new {@code SpringJUnit4ClassRunner} and initializes a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		this.testContextManager = createTestContextManager(clazz)__	};constructs,a,new,code,spring,junit4class,runner,and,initializes,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1397147316;Constructs a new {@code SpringJUnit4ClassRunner} and initializes a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		this.testContextManager = createTestContextManager(clazz)__	};constructs,a,new,code,spring,junit4class,runner,and,initializes,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1403683825;Constructs a new {@code SpringJUnit4ClassRunner} and initializes a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		this.testContextManager = createTestContextManager(clazz)__	};constructs,a,new,code,spring,junit4class,runner,and,initializes,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1406220853;Constructs a new {@code SpringJUnit4ClassRunner} and initializes a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		this.testContextManager = createTestContextManager(clazz)__	};constructs,a,new,code,spring,junit4class,runner,and,initializes,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1413848647;Constructs a new {@code SpringJUnit4ClassRunner} and initializes a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		this.testContextManager = createTestContextManager(clazz)__	};constructs,a,new,code,spring,junit4class,runner,and,initializes,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1420908711;Constructs a new {@code SpringJUnit4ClassRunner} and initializes a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		this.testContextManager = createTestContextManager(clazz)__	};constructs,a,new,code,spring,junit4class,runner,and,initializes,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1431344362;Construct a new {@code SpringJUnit4ClassRunner} and initialize a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		this.testContextManager = createTestContextManager(clazz)__	};construct,a,new,code,spring,junit4class,runner,and,initialize,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1431360825;Construct a new {@code SpringJUnit4ClassRunner} and initialize a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		this.testContextManager = createTestContextManager(clazz)__	};construct,a,new,code,spring,junit4class,runner,and,initialize,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1431568199;Construct a new {@code SpringJUnit4ClassRunner} and initialize a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		this.testContextManager = createTestContextManager(clazz)__	};construct,a,new,code,spring,junit4class,runner,and,initialize,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1431801000;Construct a new {@code SpringJUnit4ClassRunner} and initialize a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		ensureSpringRulesAreNotPresent(clazz)__		this.testContextManager = createTestContextManager(clazz)__	};construct,a,new,code,spring,junit4class,runner,and,initialize,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,ensure,spring,rules,are,not,present,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1431894269;Construct a new {@code SpringJUnit4ClassRunner} and initialize a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		ensureSpringRulesAreNotPresent(clazz)__		this.testContextManager = createTestContextManager(clazz)__	};construct,a,new,code,spring,junit4class,runner,and,initialize,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,ensure,spring,rules,are,not,present,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1437749501;Construct a new {@code SpringJUnit4ClassRunner} and initialize a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "].")__		}_		ensureSpringRulesAreNotPresent(clazz)__		this.testContextManager = createTestContextManager(clazz)__	};construct,a,new,code,spring,junit4class,runner,and,initialize,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,ensure,spring,rules,are,not,present,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1437755059;Construct a new {@code SpringJUnit4ClassRunner} and initialize a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "]")__		}_		ensureSpringRulesAreNotPresent(clazz)__		this.testContextManager = createTestContextManager(clazz)__	};construct,a,new,code,spring,junit4class,runner,and,initialize,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,ensure,spring,rules,are,not,present,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1443464140;Construct a new {@code SpringJUnit4ClassRunner} and initialize a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "]")__		}_		ensureSpringRulesAreNotPresent(clazz)__		this.testContextManager = createTestContextManager(clazz)__	};construct,a,new,code,spring,junit4class,runner,and,initialize,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,ensure,spring,rules,are,not,present,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1450547039;Construct a new {@code SpringJUnit4ClassRunner} and initialize a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "]")__		}_		ensureSpringRulesAreNotPresent(clazz)__		this.testContextManager = createTestContextManager(clazz)__	};construct,a,new,code,spring,junit4class,runner,and,initialize,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,ensure,spring,rules,are,not,present,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1456610575;Construct a new {@code SpringJUnit4ClassRunner} and initialize a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "]")__		}_		ensureSpringRulesAreNotPresent(clazz)__		this.testContextManager = createTestContextManager(clazz)__	};construct,a,new,code,spring,junit4class,runner,and,initialize,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,ensure,spring,rules,are,not,present,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1468244735;Construct a new {@code SpringJUnit4ClassRunner} and initialize a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "]")__		}_		ensureSpringRulesAreNotPresent(clazz)__		this.testContextManager = createTestContextManager(clazz)__	};construct,a,new,code,spring,junit4class,runner,and,initialize,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,ensure,spring,rules,are,not,present,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1468334463;Construct a new {@code SpringJUnit4ClassRunner} and initialize a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "]")__		}_		ensureSpringRulesAreNotPresent(clazz)__		this.testContextManager = createTestContextManager(clazz)__	};construct,a,new,code,spring,junit4class,runner,and,initialize,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,ensure,spring,rules,are,not,present,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1495868221;Construct a new {@code SpringJUnit4ClassRunner} and initialize a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "]")__		}_		ensureSpringRulesAreNotPresent(clazz)__		this.testContextManager = createTestContextManager(clazz)__	};construct,a,new,code,spring,junit4class,runner,and,initialize,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,ensure,spring,rules,are,not,present,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1496955179;Construct a new {@code SpringJUnit4ClassRunner} and initialize a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "]")__		}_		ensureSpringRulesAreNotPresent(clazz)__		this.testContextManager = createTestContextManager(clazz)__	};construct,a,new,code,spring,junit4class,runner,and,initialize,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,ensure,spring,rules,are,not,present,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1498780456;Construct a new {@code SpringJUnit4ClassRunner} and initialize a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "]")__		}_		ensureSpringRulesAreNotPresent(clazz)__		this.testContextManager = createTestContextManager(clazz)__	};construct,a,new,code,spring,junit4class,runner,and,initialize,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,ensure,spring,rules,are,not,present,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1529005714;Construct a new {@code SpringJUnit4ClassRunner} and initialize a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "]")__		}_		ensureSpringRulesAreNotPresent(clazz)__		this.testContextManager = createTestContextManager(clazz)__	};construct,a,new,code,spring,junit4class,runner,and,initialize,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,ensure,spring,rules,are,not,present,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError;1529012601;Construct a new {@code SpringJUnit4ClassRunner} and initialize a_{@link TestContextManager} to provide Spring testing functionality to_standard JUnit tests._@param clazz the test class to be run_@see #createTestContextManager(Class);public SpringJUnit4ClassRunner(Class<?> clazz) throws InitializationError {_		super(clazz)__		if (logger.isDebugEnabled()) {_			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "]")__		}_		ensureSpringRulesAreNotPresent(clazz)__		this.testContextManager = createTestContextManager(clazz)__	};construct,a,new,code,spring,junit4class,runner,and,initialize,a,link,test,context,manager,to,provide,spring,testing,functionality,to,standard,junit,tests,param,clazz,the,test,class,to,be,run,see,create,test,context,manager,class;public,spring,junit4class,runner,class,clazz,throws,initialization,error,super,clazz,if,logger,is,debug,enabled,logger,debug,spring,junit4class,runner,constructor,called,with,clazz,ensure,spring,rules,are,not,present,clazz,this,test,context,manager,create,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1328020251;Returns <code>true</code> if {@link Ignore &#064_Ignore} is present for_the supplied {@link FrameworkMethod test method} or if the test method is_disabled via <code>&#064_IfProfileValue</code>._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};returns,code,true,code,if,link,ignore,064,ignore,is,present,for,the,supplied,link,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,064,if,profile,value,code,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1356735495;Returns {@code true} if {@link Ignore &#064_Ignore} is present for_the supplied {@link FrameworkMethod test method} or if the test method is_disabled via {@code &#064_IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};returns,code,true,if,link,ignore,064,ignore,is,present,for,the,supplied,link,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,064,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1367163114;Returns {@code true} if {@link Ignore &#064_Ignore} is present for_the supplied {@link FrameworkMethod test method} or if the test method is_disabled via {@code &#064_IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};returns,code,true,if,link,ignore,064,ignore,is,present,for,the,supplied,link,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,064,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1382920864;Returns {@code true} if {@link Ignore &#064_Ignore} is present for_the supplied {@link FrameworkMethod test method} or if the test method is_disabled via {@code &#064_IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};returns,code,true,if,link,ignore,064,ignore,is,present,for,the,supplied,link,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,064,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1385499540;Returns {@code true} if {@link Ignore &#064_Ignore} is present for_the supplied {@link FrameworkMethod test method} or if the test method is_disabled via {@code &#064_IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};returns,code,true,if,link,ignore,064,ignore,is,present,for,the,supplied,link,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,064,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1396960609;Returns {@code true} if {@link Ignore &#064_Ignore} is present for_the supplied {@link FrameworkMethod test method} or if the test method is_disabled via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};returns,code,true,if,link,ignore,064,ignore,is,present,for,the,supplied,link,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1397082962;Returns {@code true} if {@link Ignore &#064_Ignore} is present for_the supplied {@link FrameworkMethod test method} or if the test method is_disabled via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};returns,code,true,if,link,ignore,064,ignore,is,present,for,the,supplied,link,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1397147316;Returns {@code true} if {@link Ignore @Ignore} is present for the supplied_{@link FrameworkMethod test method} or if the test method is disabled via_{@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};returns,code,true,if,link,ignore,ignore,is,present,for,the,supplied,link,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1403683825;Returns {@code true} if {@link Ignore @Ignore} is present for the supplied_{@link FrameworkMethod test method} or if the test method is disabled via_{@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};returns,code,true,if,link,ignore,ignore,is,present,for,the,supplied,link,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1406220853;Returns {@code true} if {@link Ignore @Ignore} is present for the supplied_{@link FrameworkMethod test method} or if the test method is disabled via_{@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};returns,code,true,if,link,ignore,ignore,is,present,for,the,supplied,link,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1413848647;Returns {@code true} if {@link Ignore @Ignore} is present for the supplied_{@link FrameworkMethod test method} or if the test method is disabled via_{@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};returns,code,true,if,link,ignore,ignore,is,present,for,the,supplied,link,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1420908711;Returns {@code true} if {@link Ignore @Ignore} is present for the supplied_{@link FrameworkMethod test method} or if the test method is disabled via_{@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};returns,code,true,if,link,ignore,ignore,is,present,for,the,supplied,link,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1431344362;Return {@code true} if {@link Ignore @Ignore} is present for the supplied_{@linkplain FrameworkMethod test method} or if the test method is disabled_via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};return,code,true,if,link,ignore,ignore,is,present,for,the,supplied,linkplain,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1431360825;Return {@code true} if {@link Ignore @Ignore} is present for the supplied_{@linkplain FrameworkMethod test method} or if the test method is disabled_via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};return,code,true,if,link,ignore,ignore,is,present,for,the,supplied,linkplain,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1431568199;Return {@code true} if {@link Ignore @Ignore} is present for the supplied_{@linkplain FrameworkMethod test method} or if the test method is disabled_via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};return,code,true,if,link,ignore,ignore,is,present,for,the,supplied,linkplain,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1431801000;Return {@code true} if {@link Ignore @Ignore} is present for the supplied_{@linkplain FrameworkMethod test method} or if the test method is disabled_via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};return,code,true,if,link,ignore,ignore,is,present,for,the,supplied,linkplain,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1431894269;Return {@code true} if {@link Ignore @Ignore} is present for the supplied_{@linkplain FrameworkMethod test method} or if the test method is disabled_via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};return,code,true,if,link,ignore,ignore,is,present,for,the,supplied,linkplain,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1437749501;Return {@code true} if {@link Ignore @Ignore} is present for the supplied_{@linkplain FrameworkMethod test method} or if the test method is disabled_via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) || !ProfileValueUtils.isTestEnabledInThisEnvironment(method,_			getTestClass().getJavaClass()))__	};return,code,true,if,link,ignore,ignore,is,present,for,the,supplied,linkplain,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1437755059;Return {@code true} if {@link Ignore @Ignore} is present for the supplied_{@linkplain FrameworkMethod test method} or if the test method is disabled_via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) ||_				!ProfileValueUtils.isTestEnabledInThisEnvironment(method, getTestClass().getJavaClass()))__	};return,code,true,if,link,ignore,ignore,is,present,for,the,supplied,linkplain,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1443464140;Return {@code true} if {@link Ignore @Ignore} is present for the supplied_{@linkplain FrameworkMethod test method} or if the test method is disabled_via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) ||_				!ProfileValueUtils.isTestEnabledInThisEnvironment(method, getTestClass().getJavaClass()))__	};return,code,true,if,link,ignore,ignore,is,present,for,the,supplied,linkplain,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1450547039;Return {@code true} if {@link Ignore @Ignore} is present for the supplied_{@linkplain FrameworkMethod test method} or if the test method is disabled_via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) ||_				!ProfileValueUtils.isTestEnabledInThisEnvironment(method, getTestClass().getJavaClass()))__	};return,code,true,if,link,ignore,ignore,is,present,for,the,supplied,linkplain,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1456610575;Return {@code true} if {@link Ignore @Ignore} is present for the supplied_{@linkplain FrameworkMethod test method} or if the test method is disabled_via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) ||_				!ProfileValueUtils.isTestEnabledInThisEnvironment(method, getTestClass().getJavaClass()))__	};return,code,true,if,link,ignore,ignore,is,present,for,the,supplied,linkplain,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1468244735;Return {@code true} if {@link Ignore @Ignore} is present for the supplied_{@linkplain FrameworkMethod test method} or if the test method is disabled_via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) ||_				!ProfileValueUtils.isTestEnabledInThisEnvironment(method, getTestClass().getJavaClass()))__	};return,code,true,if,link,ignore,ignore,is,present,for,the,supplied,linkplain,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1468334463;Return {@code true} if {@link Ignore @Ignore} is present for the supplied_{@linkplain FrameworkMethod test method} or if the test method is disabled_via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) ||_				!ProfileValueUtils.isTestEnabledInThisEnvironment(method, getTestClass().getJavaClass()))__	};return,code,true,if,link,ignore,ignore,is,present,for,the,supplied,linkplain,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1495868221;Return {@code true} if {@link Ignore @Ignore} is present for the supplied_{@linkplain FrameworkMethod test method} or if the test method is disabled_via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) ||_				!ProfileValueUtils.isTestEnabledInThisEnvironment(method, getTestClass().getJavaClass()))__	};return,code,true,if,link,ignore,ignore,is,present,for,the,supplied,linkplain,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1496955179;Return {@code true} if {@link Ignore @Ignore} is present for the supplied_{@linkplain FrameworkMethod test method} or if the test method is disabled_via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) ||_				!ProfileValueUtils.isTestEnabledInThisEnvironment(method, getTestClass().getJavaClass()))__	};return,code,true,if,link,ignore,ignore,is,present,for,the,supplied,linkplain,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1498780456;Return {@code true} if {@link Ignore @Ignore} is present for the supplied_{@linkplain FrameworkMethod test method} or if the test method is disabled_via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) ||_				!ProfileValueUtils.isTestEnabledInThisEnvironment(method, getTestClass().getJavaClass()))__	};return,code,true,if,link,ignore,ignore,is,present,for,the,supplied,linkplain,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1529005714;Return {@code true} if {@link Ignore @Ignore} is present for the supplied_{@linkplain FrameworkMethod test method} or if the test method is disabled_via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) ||_				!ProfileValueUtils.isTestEnabledInThisEnvironment(method, getTestClass().getJavaClass()))__	};return,code,true,if,link,ignore,ignore,is,present,for,the,supplied,linkplain,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod);1529012601;Return {@code true} if {@link Ignore @Ignore} is present for the supplied_{@linkplain FrameworkMethod test method} or if the test method is disabled_via {@code @IfProfileValue}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class);protected boolean isTestMethodIgnored(FrameworkMethod frameworkMethod) {_		Method method = frameworkMethod.getMethod()__		return (method.isAnnotationPresent(Ignore.class) ||_				!ProfileValueUtils.isTestEnabledInThisEnvironment(method, getTestClass().getJavaClass()))__	};return,code,true,if,link,ignore,ignore,is,present,for,the,supplied,linkplain,framework,method,test,method,or,if,the,test,method,is,disabled,via,code,if,profile,value,see,profile,value,utils,is,test,enabled,in,this,environment,method,class;protected,boolean,is,test,method,ignored,framework,method,framework,method,method,method,framework,method,get,method,return,method,is,annotation,present,ignore,class,profile,value,utils,is,test,enabled,in,this,environment,method,get,test,class,get,java,class
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1328020251;Get the <code>exception</code> that the supplied {@link FrameworkMethod_test method} is expected to throw._<p>Supports both Spring's {@link ExpectedException @ExpectedException(...)}_and JUnit's {@link Test#expected() @Test(expected=...)} annotations, but_not both simultaneously._@return the expected exception, or <code>null</code> if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		Class<? extends Throwable> junitExpectedException = (testAnnotation != null_				&& testAnnotation.expected() != Test.None.class ? testAnnotation.expected() : null)___		ExpectedException expectedExAnn = frameworkMethod.getAnnotation(ExpectedException.class)__		Class<? extends Throwable> springExpectedException = (expectedExAnn != null ? expectedExAnn.value() : null)___		if (springExpectedException != null && junitExpectedException != null) {_			String msg = "Test method [" + frameworkMethod.getMethod()_					+ "] has been configured with Spring's @ExpectedException(" + springExpectedException.getName()_					+ ".class) and JUnit's @Test(expected=" + junitExpectedException.getName()_					+ ".class) annotations. "_					+ "Only one declaration of an 'expected exception' is permitted per test method."__			logger.error(msg)__			throw new IllegalStateException(msg)__		}__		return springExpectedException != null ? springExpectedException : junitExpectedException__	};get,the,code,exception,code,that,the,supplied,link,framework,method,test,method,is,expected,to,throw,p,supports,both,spring,s,link,expected,exception,expected,exception,and,junit,s,link,test,expected,test,expected,annotations,but,not,both,simultaneously,return,the,expected,exception,or,code,null,code,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,class,extends,throwable,junit,expected,exception,test,annotation,null,test,annotation,expected,test,none,class,test,annotation,expected,null,expected,exception,expected,ex,ann,framework,method,get,annotation,expected,exception,class,class,extends,throwable,spring,expected,exception,expected,ex,ann,null,expected,ex,ann,value,null,if,spring,expected,exception,null,junit,expected,exception,null,string,msg,test,method,framework,method,get,method,has,been,configured,with,spring,s,expected,exception,spring,expected,exception,get,name,class,and,junit,s,test,expected,junit,expected,exception,get,name,class,annotations,only,one,declaration,of,an,expected,exception,is,permitted,per,test,method,logger,error,msg,throw,new,illegal,state,exception,msg,return,spring,expected,exception,null,spring,expected,exception,junit,expected,exception
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1356735495;Get the {@code exception} that the supplied {@link FrameworkMethod_test method} is expected to throw._<p>Supports both Spring's {@link ExpectedException @ExpectedException(...)}_and JUnit's {@link Test#expected() @Test(expected=...)} annotations, but_not both simultaneously._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		Class<? extends Throwable> junitExpectedException = (testAnnotation != null_				&& testAnnotation.expected() != Test.None.class ? testAnnotation.expected() : null)___		ExpectedException expectedExAnn = frameworkMethod.getAnnotation(ExpectedException.class)__		Class<? extends Throwable> springExpectedException = (expectedExAnn != null ? expectedExAnn.value() : null)___		if (springExpectedException != null && junitExpectedException != null) {_			String msg = "Test method [" + frameworkMethod.getMethod()_					+ "] has been configured with Spring's @ExpectedException(" + springExpectedException.getName()_					+ ".class) and JUnit's @Test(expected=" + junitExpectedException.getName()_					+ ".class) annotations. "_					+ "Only one declaration of an 'expected exception' is permitted per test method."__			logger.error(msg)__			throw new IllegalStateException(msg)__		}__		return springExpectedException != null ? springExpectedException : junitExpectedException__	};get,the,code,exception,that,the,supplied,link,framework,method,test,method,is,expected,to,throw,p,supports,both,spring,s,link,expected,exception,expected,exception,and,junit,s,link,test,expected,test,expected,annotations,but,not,both,simultaneously,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,class,extends,throwable,junit,expected,exception,test,annotation,null,test,annotation,expected,test,none,class,test,annotation,expected,null,expected,exception,expected,ex,ann,framework,method,get,annotation,expected,exception,class,class,extends,throwable,spring,expected,exception,expected,ex,ann,null,expected,ex,ann,value,null,if,spring,expected,exception,null,junit,expected,exception,null,string,msg,test,method,framework,method,get,method,has,been,configured,with,spring,s,expected,exception,spring,expected,exception,get,name,class,and,junit,s,test,expected,junit,expected,exception,get,name,class,annotations,only,one,declaration,of,an,expected,exception,is,permitted,per,test,method,logger,error,msg,throw,new,illegal,state,exception,msg,return,spring,expected,exception,null,spring,expected,exception,junit,expected,exception
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1367163114;Get the {@code exception} that the supplied {@link FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		Class<? extends Throwable> junitExpectedException = (testAnnotation != null_				&& testAnnotation.expected() != Test.None.class ? testAnnotation.expected() : null)___		return junitExpectedException__	};get,the,code,exception,that,the,supplied,link,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,class,extends,throwable,junit,expected,exception,test,annotation,null,test,annotation,expected,test,none,class,test,annotation,expected,null,return,junit,expected,exception
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1382920864;Get the {@code exception} that the supplied {@link FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		Class<? extends Throwable> junitExpectedException = (testAnnotation != null_				&& testAnnotation.expected() != Test.None.class ? testAnnotation.expected() : null)___		return junitExpectedException__	};get,the,code,exception,that,the,supplied,link,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,class,extends,throwable,junit,expected,exception,test,annotation,null,test,annotation,expected,test,none,class,test,annotation,expected,null,return,junit,expected,exception
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1385499540;Get the {@code exception} that the supplied {@link FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		Class<? extends Throwable> junitExpectedException = (testAnnotation != null_				&& testAnnotation.expected() != Test.None.class ? testAnnotation.expected() : null)___		return junitExpectedException__	};get,the,code,exception,that,the,supplied,link,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,class,extends,throwable,junit,expected,exception,test,annotation,null,test,annotation,expected,test,none,class,test,annotation,expected,null,return,junit,expected,exception
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1396960609;Get the {@code exception} that the supplied {@link FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		Class<? extends Throwable> junitExpectedException = (testAnnotation != null_				&& testAnnotation.expected() != Test.None.class ? testAnnotation.expected() : null)___		return junitExpectedException__	};get,the,code,exception,that,the,supplied,link,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,class,extends,throwable,junit,expected,exception,test,annotation,null,test,annotation,expected,test,none,class,test,annotation,expected,null,return,junit,expected,exception
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1397082962;Get the {@code exception} that the supplied {@link FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		Class<? extends Throwable> junitExpectedException = (testAnnotation != null_				&& testAnnotation.expected() != Test.None.class ? testAnnotation.expected() : null)___		return junitExpectedException__	};get,the,code,exception,that,the,supplied,link,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,class,extends,throwable,junit,expected,exception,test,annotation,null,test,annotation,expected,test,none,class,test,annotation,expected,null,return,junit,expected,exception
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1397147316;Get the {@code exception} that the supplied {@link FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		Class<? extends Throwable> junitExpectedException = (testAnnotation != null_				&& testAnnotation.expected() != Test.None.class ? testAnnotation.expected() : null)___		return junitExpectedException__	};get,the,code,exception,that,the,supplied,link,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,class,extends,throwable,junit,expected,exception,test,annotation,null,test,annotation,expected,test,none,class,test,annotation,expected,null,return,junit,expected,exception
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1403683825;Get the {@code exception} that the supplied {@link FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		Class<? extends Throwable> junitExpectedException = (testAnnotation != null_				&& testAnnotation.expected() != Test.None.class ? testAnnotation.expected() : null)___		return junitExpectedException__	};get,the,code,exception,that,the,supplied,link,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,class,extends,throwable,junit,expected,exception,test,annotation,null,test,annotation,expected,test,none,class,test,annotation,expected,null,return,junit,expected,exception
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1406220853;Get the {@code exception} that the supplied {@link FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		Class<? extends Throwable> junitExpectedException = (testAnnotation != null_				&& testAnnotation.expected() != Test.None.class ? testAnnotation.expected() : null)___		return junitExpectedException__	};get,the,code,exception,that,the,supplied,link,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,class,extends,throwable,junit,expected,exception,test,annotation,null,test,annotation,expected,test,none,class,test,annotation,expected,null,return,junit,expected,exception
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1413848647;Get the {@code exception} that the supplied {@link FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		Class<? extends Throwable> junitExpectedException = (testAnnotation != null_				&& testAnnotation.expected() != Test.None.class ? testAnnotation.expected() : null)___		return junitExpectedException__	};get,the,code,exception,that,the,supplied,link,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,class,extends,throwable,junit,expected,exception,test,annotation,null,test,annotation,expected,test,none,class,test,annotation,expected,null,return,junit,expected,exception
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1420908711;Get the {@code exception} that the supplied {@link FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		Class<? extends Throwable> junitExpectedException = (testAnnotation != null_				&& testAnnotation.expected() != Test.None.class ? testAnnotation.expected() : null)___		return junitExpectedException__	};get,the,code,exception,that,the,supplied,link,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,class,extends,throwable,junit,expected,exception,test,annotation,null,test,annotation,expected,test,none,class,test,annotation,expected,null,return,junit,expected,exception
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1431344362;Get the {@code exception} that the supplied {@linkplain FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._<p>Can be overridden by subclasses._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		Class<? extends Throwable> junitExpectedException = (testAnnotation != null_				&& testAnnotation.expected() != Test.None.class ? testAnnotation.expected() : null)___		return junitExpectedException__	};get,the,code,exception,that,the,supplied,linkplain,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,p,can,be,overridden,by,subclasses,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,class,extends,throwable,junit,expected,exception,test,annotation,null,test,annotation,expected,test,none,class,test,annotation,expected,null,return,junit,expected,exception
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1431360825;Get the {@code exception} that the supplied {@linkplain FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._<p>Can be overridden by subclasses._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		Class<? extends Throwable> junitExpectedException = (testAnnotation != null_				&& testAnnotation.expected() != Test.None.class ? testAnnotation.expected() : null)___		return junitExpectedException__	};get,the,code,exception,that,the,supplied,linkplain,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,p,can,be,overridden,by,subclasses,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,class,extends,throwable,junit,expected,exception,test,annotation,null,test,annotation,expected,test,none,class,test,annotation,expected,null,return,junit,expected,exception
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1431568199;Get the {@code exception} that the supplied {@linkplain FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._<p>Can be overridden by subclasses._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		Class<? extends Throwable> junitExpectedException = (testAnnotation != null_				&& testAnnotation.expected() != Test.None.class ? testAnnotation.expected() : null)___		return junitExpectedException__	};get,the,code,exception,that,the,supplied,linkplain,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,p,can,be,overridden,by,subclasses,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,class,extends,throwable,junit,expected,exception,test,annotation,null,test,annotation,expected,test,none,class,test,annotation,expected,null,return,junit,expected,exception
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1431801000;Get the {@code exception} that the supplied {@linkplain FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._<p>Can be overridden by subclasses._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		Class<? extends Throwable> junitExpectedException = (testAnnotation != null_				&& testAnnotation.expected() != Test.None.class ? testAnnotation.expected() : null)___		return junitExpectedException__	};get,the,code,exception,that,the,supplied,linkplain,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,p,can,be,overridden,by,subclasses,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,class,extends,throwable,junit,expected,exception,test,annotation,null,test,annotation,expected,test,none,class,test,annotation,expected,null,return,junit,expected,exception
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1431894269;Get the {@code exception} that the supplied {@linkplain FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._<p>Can be overridden by subclasses._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return ((test != null) && (test.expected() != Test.None.class) ? test.expected() : null)__	};get,the,code,exception,that,the,supplied,linkplain,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,p,can,be,overridden,by,subclasses,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,expected,test,none,class,test,expected,null
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1437749501;Get the {@code exception} that the supplied {@linkplain FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._<p>Can be overridden by subclasses._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return ((test != null) && (test.expected() != Test.None.class) ? test.expected() : null)__	};get,the,code,exception,that,the,supplied,linkplain,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,p,can,be,overridden,by,subclasses,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,expected,test,none,class,test,expected,null
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1437755059;Get the {@code exception} that the supplied {@linkplain FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._<p>Can be overridden by subclasses._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.expected() != Test.None.class ? test.expected() : null)__	};get,the,code,exception,that,the,supplied,linkplain,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,p,can,be,overridden,by,subclasses,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,expected,test,none,class,test,expected,null
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1443464140;Get the {@code exception} that the supplied {@linkplain FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._<p>Can be overridden by subclasses._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.expected() != Test.None.class ? test.expected() : null)__	};get,the,code,exception,that,the,supplied,linkplain,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,p,can,be,overridden,by,subclasses,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,expected,test,none,class,test,expected,null
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1450547039;Get the {@code exception} that the supplied {@linkplain FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._<p>Can be overridden by subclasses._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.expected() != Test.None.class ? test.expected() : null)__	};get,the,code,exception,that,the,supplied,linkplain,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,p,can,be,overridden,by,subclasses,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,expected,test,none,class,test,expected,null
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1456610575;Get the {@code exception} that the supplied {@linkplain FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._<p>Can be overridden by subclasses._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.expected() != Test.None.class ? test.expected() : null)__	};get,the,code,exception,that,the,supplied,linkplain,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,p,can,be,overridden,by,subclasses,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,expected,test,none,class,test,expected,null
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1468244735;Get the {@code exception} that the supplied {@linkplain FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._<p>Can be overridden by subclasses._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.expected() != Test.None.class ? test.expected() : null)__	};get,the,code,exception,that,the,supplied,linkplain,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,p,can,be,overridden,by,subclasses,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,expected,test,none,class,test,expected,null
SpringJUnit4ClassRunner -> protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1468334463;Get the {@code exception} that the supplied {@linkplain FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._<p>Can be overridden by subclasses._@return the expected exception, or {@code null} if none was specified;protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.expected() != Test.None.class ? test.expected() : null)__	};get,the,code,exception,that,the,supplied,linkplain,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,p,can,be,overridden,by,subclasses,return,the,expected,exception,or,code,null,if,none,was,specified;protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,expected,test,none,class,test,expected,null
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1328020251;Creates a new {@link TestContextManager} for the supplied test class and_the configured <em>default <code>ContextLoader</code> class name</em>._Can be overridden by subclasses._@param clazz the test class to be managed_@see #getDefaultContextLoaderClassName(Class);protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz, getDefaultContextLoaderClassName(clazz))__	};creates,a,new,link,test,context,manager,for,the,supplied,test,class,and,the,configured,em,default,code,context,loader,code,class,name,em,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed,see,get,default,context,loader,class,name,class;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz,get,default,context,loader,class,name,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1356735495;Creates a new {@link TestContextManager} for the supplied test class and_the configured <em>default {@code ContextLoader} class name</em>._Can be overridden by subclasses._@param clazz the test class to be managed_@see #getDefaultContextLoaderClassName(Class);protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz, getDefaultContextLoaderClassName(clazz))__	};creates,a,new,link,test,context,manager,for,the,supplied,test,class,and,the,configured,em,default,code,context,loader,class,name,em,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed,see,get,default,context,loader,class,name,class;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz,get,default,context,loader,class,name,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1367163114;Creates a new {@link TestContextManager} for the supplied test class and_the configured <em>default {@code ContextLoader} class name</em>._Can be overridden by subclasses._@param clazz the test class to be managed_@see #getDefaultContextLoaderClassName(Class);protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz, getDefaultContextLoaderClassName(clazz))__	};creates,a,new,link,test,context,manager,for,the,supplied,test,class,and,the,configured,em,default,code,context,loader,class,name,em,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed,see,get,default,context,loader,class,name,class;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz,get,default,context,loader,class,name,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1382920864;Creates a new {@link TestContextManager} for the supplied test class and_the configured <em>default {@code ContextLoader} class name</em>._Can be overridden by subclasses._@param clazz the test class to be managed_@see #getDefaultContextLoaderClassName(Class);protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz, getDefaultContextLoaderClassName(clazz))__	};creates,a,new,link,test,context,manager,for,the,supplied,test,class,and,the,configured,em,default,code,context,loader,class,name,em,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed,see,get,default,context,loader,class,name,class;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz,get,default,context,loader,class,name,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1385499540;Creates a new {@link TestContextManager} for the supplied test class and_the configured <em>default {@code ContextLoader} class name</em>._Can be overridden by subclasses._@param clazz the test class to be managed_@see #getDefaultContextLoaderClassName(Class);protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz, getDefaultContextLoaderClassName(clazz))__	};creates,a,new,link,test,context,manager,for,the,supplied,test,class,and,the,configured,em,default,code,context,loader,class,name,em,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed,see,get,default,context,loader,class,name,class;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz,get,default,context,loader,class,name,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1396960609;Creates a new {@link TestContextManager} for the supplied test class and_the configured <em>default {@code ContextLoader} class name</em>._Can be overridden by subclasses._@param clazz the test class to be managed_@see #getDefaultContextLoaderClassName(Class);protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz, getDefaultContextLoaderClassName(clazz))__	};creates,a,new,link,test,context,manager,for,the,supplied,test,class,and,the,configured,em,default,code,context,loader,class,name,em,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed,see,get,default,context,loader,class,name,class;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz,get,default,context,loader,class,name,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1397082962;Creates a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};creates,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1397147316;Creates a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};creates,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1403683825;Creates a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};creates,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1406220853;Creates a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};creates,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1413848647;Creates a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};creates,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1420908711;Creates a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};creates,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1431344362;Create a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};create,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1431360825;Create a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};create,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1431568199;Create a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};create,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1431801000;Create a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};create,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1431894269;Create a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};create,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1437749501;Create a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};create,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1437755059;Create a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};create,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1443464140;Create a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};create,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1450547039;Create a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};create,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1456610575;Create a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};create,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1468244735;Create a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};create,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1468334463;Create a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};create,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1495868221;Create a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};create,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1496955179;Create a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};create,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1498780456;Create a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};create,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1529005714;Create a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};create,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> protected TestContextManager createTestContextManager(Class<?> clazz);1529012601;Create a new {@link TestContextManager} for the supplied test class._<p>Can be overridden by subclasses._@param clazz the test class to be managed;protected TestContextManager createTestContextManager(Class<?> clazz) {_		return new TestContextManager(clazz)__	};create,a,new,link,test,context,manager,for,the,supplied,test,class,p,can,be,overridden,by,subclasses,param,clazz,the,test,class,to,be,managed;protected,test,context,manager,create,test,context,manager,class,clazz,return,new,test,context,manager,clazz
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1328020251;Returns a description suitable for an ignored test class if the test is_disabled via <code>&#064_IfProfileValue</code> at the class-level, and_otherwise delegates to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};returns,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,064,if,profile,value,code,at,the,class,level,and,otherwise,delegates,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1356735495;Returns a description suitable for an ignored test class if the test is_disabled via {@code &#064_IfProfileValue} at the class-level, and_otherwise delegates to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};returns,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,064,if,profile,value,at,the,class,level,and,otherwise,delegates,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1367163114;Returns a description suitable for an ignored test class if the test is_disabled via {@code &#064_IfProfileValue} at the class-level, and_otherwise delegates to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};returns,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,064,if,profile,value,at,the,class,level,and,otherwise,delegates,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1382920864;Returns a description suitable for an ignored test class if the test is_disabled via {@code &#064_IfProfileValue} at the class-level, and_otherwise delegates to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};returns,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,064,if,profile,value,at,the,class,level,and,otherwise,delegates,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1385499540;Returns a description suitable for an ignored test class if the test is_disabled via {@code &#064_IfProfileValue} at the class-level, and_otherwise delegates to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};returns,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,064,if,profile,value,at,the,class,level,and,otherwise,delegates,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1396960609;Returns a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegates to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};returns,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegates,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1397082962;Returns a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegates to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};returns,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegates,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1397147316;Returns a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegates to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};returns,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegates,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1403683825;Returns a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegates to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};returns,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegates,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1406220853;Returns a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegates to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};returns,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegates,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1413848647;Returns a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegates to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};returns,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegates,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1420908711;Returns a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegates to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};returns,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegates,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1431344362;Return a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegate to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};return,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegate,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1431360825;Return a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegate to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};return,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegate,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1431568199;Return a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegate to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};return,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegate,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1431801000;Return a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegate to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};return,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegate,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1431894269;Return a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegate to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};return,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegate,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1437749501;Return a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegate to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};return,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegate,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1437755059;Return a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegate to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};return,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegate,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1443464140;Return a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegate to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};return,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegate,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1450547039;Return a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegate to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};return,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegate,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1456610575;Return a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegate to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};return,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegate,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1468244735;Return a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegate to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};return,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegate,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1468334463;Return a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegate to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};return,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegate,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1495868221;Return a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegate to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};return,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegate,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1496955179;Return a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegate to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};return,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegate,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1498780456;Return a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegate to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};return,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegate,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1529005714;Return a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegate to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};return,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegate,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> @Override 	public Description getDescription();1529012601;Return a description suitable for an ignored test class if the test is_disabled via {@code @IfProfileValue} at the class-level, and_otherwise delegate to the parent implementation._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class);@Override_	public Description getDescription() {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			return Description.createSuiteDescription(getTestClass().getJavaClass())__		}_		return super.getDescription()__	};return,a,description,suitable,for,an,ignored,test,class,if,the,test,is,disabled,via,code,if,profile,value,at,the,class,level,and,otherwise,delegate,to,the,parent,implementation,see,profile,value,utils,is,test,enabled,in,this,environment,class;override,public,description,get,description,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,return,description,create,suite,description,get,test,class,get,java,class,return,super,get,description
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1328020251;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1356735495;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1367163114;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1382920864;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1385499540;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1396960609;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1397082962;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1397147316;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1403683825;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1406220853;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1413848647;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1420908711;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1431344362;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1431360825;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1431568199;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1431801000;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1431894269;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1437749501;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1437755059;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1443464140;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1450547039;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1456610575;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1468244735;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1468334463;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1495868221;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1496955179;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1498780456;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1529005714;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> protected final TestContextManager getTestContextManager();1529012601;Get the {@link TestContextManager} associated with this runner.;protected final TestContextManager getTestContextManager() {_		return this.testContextManager__	};get,the,link,test,context,manager,associated,with,this,runner;protected,final,test,context,manager,get,test,context,manager,return,this,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1328020251;Delegates to the parent implementation for creating the test instance and_then allows the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance(Object);@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegates,to,the,parent,implementation,for,creating,the,test,instance,and,then,allows,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance,object;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1356735495;Delegates to the parent implementation for creating the test instance and_then allows the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance(Object);@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegates,to,the,parent,implementation,for,creating,the,test,instance,and,then,allows,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance,object;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1367163114;Delegates to the parent implementation for creating the test instance and_then allows the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance(Object);@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegates,to,the,parent,implementation,for,creating,the,test,instance,and,then,allows,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance,object;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1382920864;Delegates to the parent implementation for creating the test instance and_then allows the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance(Object);@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegates,to,the,parent,implementation,for,creating,the,test,instance,and,then,allows,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance,object;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1385499540;Delegates to the parent implementation for creating the test instance and_then allows the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance(Object);@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegates,to,the,parent,implementation,for,creating,the,test,instance,and,then,allows,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance,object;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1396960609;Delegates to the parent implementation for creating the test instance and_then allows the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance(Object);@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegates,to,the,parent,implementation,for,creating,the,test,instance,and,then,allows,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance,object;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1397082962;Delegates to the parent implementation for creating the test instance and_then allows the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance(Object);@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegates,to,the,parent,implementation,for,creating,the,test,instance,and,then,allows,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance,object;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1397147316;Delegates to the parent implementation for creating the test instance and_then allows the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance(Object);@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegates,to,the,parent,implementation,for,creating,the,test,instance,and,then,allows,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance,object;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1403683825;Delegates to the parent implementation for creating the test instance and_then allows the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance(Object);@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegates,to,the,parent,implementation,for,creating,the,test,instance,and,then,allows,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance,object;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1406220853;Delegates to the parent implementation for creating the test instance and_then allows the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance(Object);@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegates,to,the,parent,implementation,for,creating,the,test,instance,and,then,allows,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance,object;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1413848647;Delegates to the parent implementation for creating the test instance and_then allows the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance(Object);@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegates,to,the,parent,implementation,for,creating,the,test,instance,and,then,allows,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance,object;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1420908711;Delegates to the parent implementation for creating the test instance and_then allows the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance(Object);@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegates,to,the,parent,implementation,for,creating,the,test,instance,and,then,allows,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance,object;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1431344362;Delegate to the parent implementation for creating the test instance and_then allow the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance;@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegate,to,the,parent,implementation,for,creating,the,test,instance,and,then,allow,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1431360825;Delegate to the parent implementation for creating the test instance and_then allow the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance;@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegate,to,the,parent,implementation,for,creating,the,test,instance,and,then,allow,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1431568199;Delegate to the parent implementation for creating the test instance and_then allow the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance;@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegate,to,the,parent,implementation,for,creating,the,test,instance,and,then,allow,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1431801000;Delegate to the parent implementation for creating the test instance and_then allow the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance;@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegate,to,the,parent,implementation,for,creating,the,test,instance,and,then,allow,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1431894269;Delegate to the parent implementation for creating the test instance and_then allow the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance;@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegate,to,the,parent,implementation,for,creating,the,test,instance,and,then,allow,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1437749501;Delegate to the parent implementation for creating the test instance and_then allow the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance;@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegate,to,the,parent,implementation,for,creating,the,test,instance,and,then,allow,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1437755059;Delegate to the parent implementation for creating the test instance and_then allow the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance;@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegate,to,the,parent,implementation,for,creating,the,test,instance,and,then,allow,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1443464140;Delegate to the parent implementation for creating the test instance and_then allow the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance;@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegate,to,the,parent,implementation,for,creating,the,test,instance,and,then,allow,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1450547039;Delegate to the parent implementation for creating the test instance and_then allow the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance;@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegate,to,the,parent,implementation,for,creating,the,test,instance,and,then,allow,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1456610575;Delegate to the parent implementation for creating the test instance and_then allow the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance;@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegate,to,the,parent,implementation,for,creating,the,test,instance,and,then,allow,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1468244735;Delegate to the parent implementation for creating the test instance and_then allow the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance;@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegate,to,the,parent,implementation,for,creating,the,test,instance,and,then,allow,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1468334463;Delegate to the parent implementation for creating the test instance and_then allow the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance;@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegate,to,the,parent,implementation,for,creating,the,test,instance,and,then,allow,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1495868221;Delegate to the parent implementation for creating the test instance and_then allow the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance;@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegate,to,the,parent,implementation,for,creating,the,test,instance,and,then,allow,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1496955179;Delegate to the parent implementation for creating the test instance and_then allow the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance;@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegate,to,the,parent,implementation,for,creating,the,test,instance,and,then,allow,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1498780456;Delegate to the parent implementation for creating the test instance and_then allow the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance;@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegate,to,the,parent,implementation,for,creating,the,test,instance,and,then,allow,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1529005714;Delegate to the parent implementation for creating the test instance and_then allow the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance;@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegate,to,the,parent,implementation,for,creating,the,test,instance,and,then,allow,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> @Override 	protected Object createTest() throws Exception;1529012601;Delegate to the parent implementation for creating the test instance and_then allow the {@link #getTestContextManager() TestContextManager} to_prepare the test instance before returning it._@see TestContextManager#prepareTestInstance;@Override_	protected Object createTest() throws Exception {_		Object testInstance = super.createTest()__		getTestContextManager().prepareTestInstance(testInstance)__		return testInstance__	};delegate,to,the,parent,implementation,for,creating,the,test,instance,and,then,allow,the,link,get,test,context,manager,test,context,manager,to,prepare,the,test,instance,before,returning,it,see,test,context,manager,prepare,test,instance;override,protected,object,create,test,throws,exception,object,test,instance,super,create,test,get,test,context,manager,prepare,test,instance,test,instance,return,test,instance
SpringJUnit4ClassRunner -> private EachTestNotifier springMakeNotifier(FrameworkMethod method, RunNotifier notifier);1328020251;<code>springMakeNotifier()</code> is an exact copy of_{@link BlockJUnit4ClassRunner BlockJUnit4ClassRunner's}_<code>makeNotifier()</code> method, but we have decided to prefix it with_"spring" and keep it <code>private</code> in order to avoid the_compatibility clashes that were introduced in JUnit between versions 4.5,_4.6, and 4.7.;private EachTestNotifier springMakeNotifier(FrameworkMethod method, RunNotifier notifier) {_		Description description = describeChild(method)__		return new EachTestNotifier(notifier, description)__	};code,spring,make,notifier,code,is,an,exact,copy,of,link,block,junit4class,runner,block,junit4class,runner,s,code,make,notifier,code,method,but,we,have,decided,to,prefix,it,with,spring,and,keep,it,code,private,code,in,order,to,avoid,the,compatibility,clashes,that,were,introduced,in,junit,between,versions,4,5,4,6,and,4,7;private,each,test,notifier,spring,make,notifier,framework,method,method,run,notifier,notifier,description,description,describe,child,method,return,new,each,test,notifier,notifier,description
SpringJUnit4ClassRunner -> private EachTestNotifier springMakeNotifier(FrameworkMethod method, RunNotifier notifier);1356735495;{@code springMakeNotifier()} is an exact copy of_{@link BlockJUnit4ClassRunner BlockJUnit4ClassRunner's}_{@code makeNotifier()} method, but we have decided to prefix it with_"spring" and keep it {@code private} in order to avoid the_compatibility clashes that were introduced in JUnit between versions 4.5,_4.6, and 4.7.;private EachTestNotifier springMakeNotifier(FrameworkMethod method, RunNotifier notifier) {_		Description description = describeChild(method)__		return new EachTestNotifier(notifier, description)__	};code,spring,make,notifier,is,an,exact,copy,of,link,block,junit4class,runner,block,junit4class,runner,s,code,make,notifier,method,but,we,have,decided,to,prefix,it,with,spring,and,keep,it,code,private,in,order,to,avoid,the,compatibility,clashes,that,were,introduced,in,junit,between,versions,4,5,4,6,and,4,7;private,each,test,notifier,spring,make,notifier,framework,method,method,run,notifier,notifier,description,description,describe,child,method,return,new,each,test,notifier,notifier,description
SpringJUnit4ClassRunner -> private EachTestNotifier springMakeNotifier(FrameworkMethod method, RunNotifier notifier);1367163114;{@code springMakeNotifier()} is an exact copy of_{@link BlockJUnit4ClassRunner BlockJUnit4ClassRunner's}_{@code makeNotifier()} method, but we have decided to prefix it with_"spring" and keep it {@code private} in order to avoid the_compatibility clashes that were introduced in JUnit between versions 4.5,_4.6, and 4.7.;private EachTestNotifier springMakeNotifier(FrameworkMethod method, RunNotifier notifier) {_		Description description = describeChild(method)__		return new EachTestNotifier(notifier, description)__	};code,spring,make,notifier,is,an,exact,copy,of,link,block,junit4class,runner,block,junit4class,runner,s,code,make,notifier,method,but,we,have,decided,to,prefix,it,with,spring,and,keep,it,code,private,in,order,to,avoid,the,compatibility,clashes,that,were,introduced,in,junit,between,versions,4,5,4,6,and,4,7;private,each,test,notifier,spring,make,notifier,framework,method,method,run,notifier,notifier,description,description,describe,child,method,return,new,each,test,notifier,notifier,description
SpringJUnit4ClassRunner -> private EachTestNotifier springMakeNotifier(FrameworkMethod method, RunNotifier notifier);1382920864;{@code springMakeNotifier()} is an exact copy of_{@link BlockJUnit4ClassRunner BlockJUnit4ClassRunner's}_{@code makeNotifier()} method, but we have decided to prefix it with_"spring" and keep it {@code private} in order to avoid the_compatibility clashes that were introduced in JUnit between versions 4.5,_4.6, and 4.7.;private EachTestNotifier springMakeNotifier(FrameworkMethod method, RunNotifier notifier) {_		Description description = describeChild(method)__		return new EachTestNotifier(notifier, description)__	};code,spring,make,notifier,is,an,exact,copy,of,link,block,junit4class,runner,block,junit4class,runner,s,code,make,notifier,method,but,we,have,decided,to,prefix,it,with,spring,and,keep,it,code,private,in,order,to,avoid,the,compatibility,clashes,that,were,introduced,in,junit,between,versions,4,5,4,6,and,4,7;private,each,test,notifier,spring,make,notifier,framework,method,method,run,notifier,notifier,description,description,describe,child,method,return,new,each,test,notifier,notifier,description
SpringJUnit4ClassRunner -> private EachTestNotifier springMakeNotifier(FrameworkMethod method, RunNotifier notifier);1385499540;{@code springMakeNotifier()} is an exact copy of_{@link BlockJUnit4ClassRunner BlockJUnit4ClassRunner's}_{@code makeNotifier()} method, but we have decided to prefix it with_"spring" and keep it {@code private} in order to avoid the_compatibility clashes that were introduced in JUnit between versions 4.5,_4.6, and 4.7.;private EachTestNotifier springMakeNotifier(FrameworkMethod method, RunNotifier notifier) {_		Description description = describeChild(method)__		return new EachTestNotifier(notifier, description)__	};code,spring,make,notifier,is,an,exact,copy,of,link,block,junit4class,runner,block,junit4class,runner,s,code,make,notifier,method,but,we,have,decided,to,prefix,it,with,spring,and,keep,it,code,private,in,order,to,avoid,the,compatibility,clashes,that,were,introduced,in,junit,between,versions,4,5,4,6,and,4,7;private,each,test,notifier,spring,make,notifier,framework,method,method,run,notifier,notifier,description,description,describe,child,method,return,new,each,test,notifier,notifier,description
SpringJUnit4ClassRunner -> private EachTestNotifier springMakeNotifier(FrameworkMethod method, RunNotifier notifier);1396960609;{@code springMakeNotifier()} is an exact copy of_{@link BlockJUnit4ClassRunner BlockJUnit4ClassRunner's}_{@code makeNotifier()} method, but we have decided to prefix it with_"spring" and keep it {@code private} in order to avoid the_compatibility clashes that were introduced in JUnit between versions 4.5,_4.6, and 4.7.;private EachTestNotifier springMakeNotifier(FrameworkMethod method, RunNotifier notifier) {_		Description description = describeChild(method)__		return new EachTestNotifier(notifier, description)__	};code,spring,make,notifier,is,an,exact,copy,of,link,block,junit4class,runner,block,junit4class,runner,s,code,make,notifier,method,but,we,have,decided,to,prefix,it,with,spring,and,keep,it,code,private,in,order,to,avoid,the,compatibility,clashes,that,were,introduced,in,junit,between,versions,4,5,4,6,and,4,7;private,each,test,notifier,spring,make,notifier,framework,method,method,run,notifier,notifier,description,description,describe,child,method,return,new,each,test,notifier,notifier,description
SpringJUnit4ClassRunner -> private EachTestNotifier springMakeNotifier(FrameworkMethod method, RunNotifier notifier);1397082962;{@code springMakeNotifier()} is an exact copy of_{@link BlockJUnit4ClassRunner BlockJUnit4ClassRunner's}_{@code makeNotifier()} method, but we have decided to prefix it with_"spring" and keep it {@code private} in order to avoid the_compatibility clashes that were introduced in JUnit between versions 4.5,_4.6, and 4.7.;private EachTestNotifier springMakeNotifier(FrameworkMethod method, RunNotifier notifier) {_		Description description = describeChild(method)__		return new EachTestNotifier(notifier, description)__	};code,spring,make,notifier,is,an,exact,copy,of,link,block,junit4class,runner,block,junit4class,runner,s,code,make,notifier,method,but,we,have,decided,to,prefix,it,with,spring,and,keep,it,code,private,in,order,to,avoid,the,compatibility,clashes,that,were,introduced,in,junit,between,versions,4,5,4,6,and,4,7;private,each,test,notifier,spring,make,notifier,framework,method,method,run,notifier,notifier,description,description,describe,child,method,return,new,each,test,notifier,notifier,description
SpringJUnit4ClassRunner -> private EachTestNotifier springMakeNotifier(FrameworkMethod method, RunNotifier notifier);1397147316;{@code springMakeNotifier()} is an exact copy of_{@link BlockJUnit4ClassRunner BlockJUnit4ClassRunner's}_{@code makeNotifier()} method, but we have decided to prefix it with_"spring" and keep it {@code private} in order to avoid the_compatibility clashes that were introduced in JUnit between versions 4.5,_4.6, and 4.7.;private EachTestNotifier springMakeNotifier(FrameworkMethod method, RunNotifier notifier) {_		Description description = describeChild(method)__		return new EachTestNotifier(notifier, description)__	};code,spring,make,notifier,is,an,exact,copy,of,link,block,junit4class,runner,block,junit4class,runner,s,code,make,notifier,method,but,we,have,decided,to,prefix,it,with,spring,and,keep,it,code,private,in,order,to,avoid,the,compatibility,clashes,that,were,introduced,in,junit,between,versions,4,5,4,6,and,4,7;private,each,test,notifier,spring,make,notifier,framework,method,method,run,notifier,notifier,description,description,describe,child,method,return,new,each,test,notifier,notifier,description
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1328020251;Retrieves the configured Spring-specific <code>timeout</code> from the_{@link Timed &#064_Timed} annotation on the supplied_{@link FrameworkMethod test method}._@return the timeout, or <code>0</code> if none was specified.;protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		Timed timedAnnotation = frameworkMethod.getAnnotation(Timed.class)__		return (timedAnnotation != null && timedAnnotation.millis() > 0 ? timedAnnotation.millis() : 0)__	};retrieves,the,configured,spring,specific,code,timeout,code,from,the,link,timed,064,timed,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,code,if,none,was,specified;protected,long,get,spring,timeout,framework,method,framework,method,timed,timed,annotation,framework,method,get,annotation,timed,class,return,timed,annotation,null,timed,annotation,millis,0,timed,annotation,millis,0
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1356735495;Retrieves the configured Spring-specific {@code timeout} from the_{@link Timed &#064_Timed} annotation on the supplied_{@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		Timed timedAnnotation = frameworkMethod.getAnnotation(Timed.class)__		return (timedAnnotation != null && timedAnnotation.millis() > 0 ? timedAnnotation.millis() : 0)__	};retrieves,the,configured,spring,specific,code,timeout,from,the,link,timed,064,timed,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,spring,timeout,framework,method,framework,method,timed,timed,annotation,framework,method,get,annotation,timed,class,return,timed,annotation,null,timed,annotation,millis,0,timed,annotation,millis,0
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1367163114;Retrieves the configured Spring-specific {@code timeout} from the_{@link Timed &#064_Timed} annotation on the supplied_{@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		Timed timedAnnotation = frameworkMethod.getAnnotation(Timed.class)__		return (timedAnnotation != null && timedAnnotation.millis() > 0 ? timedAnnotation.millis() : 0)__	};retrieves,the,configured,spring,specific,code,timeout,from,the,link,timed,064,timed,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,spring,timeout,framework,method,framework,method,timed,timed,annotation,framework,method,get,annotation,timed,class,return,timed,annotation,null,timed,annotation,millis,0,timed,annotation,millis,0
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1382920864;Retrieves the configured Spring-specific {@code timeout} from the_{@link Timed &#064_Timed} annotation on the supplied_{@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		Timed timedAnnotation = AnnotationUtils.getAnnotation(frameworkMethod.getMethod(), Timed.class)__		return (timedAnnotation != null && timedAnnotation.millis() > 0 ? timedAnnotation.millis() : 0)__	};retrieves,the,configured,spring,specific,code,timeout,from,the,link,timed,064,timed,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,spring,timeout,framework,method,framework,method,timed,timed,annotation,annotation,utils,get,annotation,framework,method,get,method,timed,class,return,timed,annotation,null,timed,annotation,millis,0,timed,annotation,millis,0
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1385499540;Retrieves the configured Spring-specific {@code timeout} from the_{@link Timed &#064_Timed} annotation on the supplied_{@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		AnnotationAttributes annAttrs = AnnotatedElementUtils.getAnnotationAttributes(frameworkMethod.getMethod(),_			Timed.class.getName())__		if (annAttrs == null) {_			return 0__		}_		else {_			long millis = annAttrs.<Long> getNumber("millis").longValue()__			return millis > 0 ? millis : 0__		}_	};retrieves,the,configured,spring,specific,code,timeout,from,the,link,timed,064,timed,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,spring,timeout,framework,method,framework,method,annotation,attributes,ann,attrs,annotated,element,utils,get,annotation,attributes,framework,method,get,method,timed,class,get,name,if,ann,attrs,null,return,0,else,long,millis,ann,attrs,long,get,number,millis,long,value,return,millis,0,millis,0
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1396960609;Retrieves the configured Spring-specific {@code timeout} from the_{@link Timed &#064_Timed} annotation on the supplied_{@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		AnnotationAttributes annAttrs = AnnotatedElementUtils.getAnnotationAttributes(frameworkMethod.getMethod(),_			Timed.class.getName())__		if (annAttrs == null) {_			return 0__		}_		else {_			long millis = annAttrs.<Long> getNumber("millis").longValue()__			return millis > 0 ? millis : 0__		}_	};retrieves,the,configured,spring,specific,code,timeout,from,the,link,timed,064,timed,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,spring,timeout,framework,method,framework,method,annotation,attributes,ann,attrs,annotated,element,utils,get,annotation,attributes,framework,method,get,method,timed,class,get,name,if,ann,attrs,null,return,0,else,long,millis,ann,attrs,long,get,number,millis,long,value,return,millis,0,millis,0
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1397082962;Retrieves the configured Spring-specific {@code timeout} from the_{@link Timed &#064_Timed} annotation on the supplied_{@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		AnnotationAttributes annAttrs = AnnotatedElementUtils.getAnnotationAttributes(frameworkMethod.getMethod(),_			Timed.class.getName())__		if (annAttrs == null) {_			return 0__		}_		else {_			long millis = annAttrs.<Long> getNumber("millis").longValue()__			return millis > 0 ? millis : 0__		}_	};retrieves,the,configured,spring,specific,code,timeout,from,the,link,timed,064,timed,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,spring,timeout,framework,method,framework,method,annotation,attributes,ann,attrs,annotated,element,utils,get,annotation,attributes,framework,method,get,method,timed,class,get,name,if,ann,attrs,null,return,0,else,long,millis,ann,attrs,long,get,number,millis,long,value,return,millis,0,millis,0
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1397147316;Retrieves the configured Spring-specific {@code timeout} from the_{@link Timed @Timed} annotation on the supplied_{@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		AnnotationAttributes annAttrs = AnnotatedElementUtils.getAnnotationAttributes(frameworkMethod.getMethod(),_			Timed.class.getName())__		if (annAttrs == null) {_			return 0__		}_		else {_			long millis = annAttrs.<Long> getNumber("millis").longValue()__			return millis > 0 ? millis : 0__		}_	};retrieves,the,configured,spring,specific,code,timeout,from,the,link,timed,timed,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,spring,timeout,framework,method,framework,method,annotation,attributes,ann,attrs,annotated,element,utils,get,annotation,attributes,framework,method,get,method,timed,class,get,name,if,ann,attrs,null,return,0,else,long,millis,ann,attrs,long,get,number,millis,long,value,return,millis,0,millis,0
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1403683825;Retrieves the configured Spring-specific {@code timeout} from the_{@link Timed @Timed} annotation on the supplied_{@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		AnnotationAttributes annAttrs = AnnotatedElementUtils.getAnnotationAttributes(frameworkMethod.getMethod(),_			Timed.class.getName())__		if (annAttrs == null) {_			return 0__		}_		else {_			long millis = annAttrs.<Long> getNumber("millis").longValue()__			return millis > 0 ? millis : 0__		}_	};retrieves,the,configured,spring,specific,code,timeout,from,the,link,timed,timed,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,spring,timeout,framework,method,framework,method,annotation,attributes,ann,attrs,annotated,element,utils,get,annotation,attributes,framework,method,get,method,timed,class,get,name,if,ann,attrs,null,return,0,else,long,millis,ann,attrs,long,get,number,millis,long,value,return,millis,0,millis,0
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1406220853;Retrieves the configured Spring-specific {@code timeout} from the_{@link Timed @Timed} annotation on the supplied_{@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		AnnotationAttributes annAttrs = AnnotatedElementUtils.getAnnotationAttributes(frameworkMethod.getMethod(),_			Timed.class.getName())__		if (annAttrs == null) {_			return 0__		}_		else {_			long millis = annAttrs.<Long> getNumber("millis").longValue()__			return millis > 0 ? millis : 0__		}_	};retrieves,the,configured,spring,specific,code,timeout,from,the,link,timed,timed,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,spring,timeout,framework,method,framework,method,annotation,attributes,ann,attrs,annotated,element,utils,get,annotation,attributes,framework,method,get,method,timed,class,get,name,if,ann,attrs,null,return,0,else,long,millis,ann,attrs,long,get,number,millis,long,value,return,millis,0,millis,0
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1413848647;Retrieves the configured Spring-specific {@code timeout} from the_{@link Timed @Timed} annotation on the supplied_{@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		AnnotationAttributes annAttrs = AnnotatedElementUtils.getAnnotationAttributes(frameworkMethod.getMethod(),_			Timed.class.getName())__		if (annAttrs == null) {_			return 0__		}_		else {_			long millis = annAttrs.<Long> getNumber("millis").longValue()__			return millis > 0 ? millis : 0__		}_	};retrieves,the,configured,spring,specific,code,timeout,from,the,link,timed,timed,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,spring,timeout,framework,method,framework,method,annotation,attributes,ann,attrs,annotated,element,utils,get,annotation,attributes,framework,method,get,method,timed,class,get,name,if,ann,attrs,null,return,0,else,long,millis,ann,attrs,long,get,number,millis,long,value,return,millis,0,millis,0
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1420908711;Retrieves the configured Spring-specific {@code timeout} from the_{@link Timed @Timed} annotation on the supplied_{@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		AnnotationAttributes annAttrs = AnnotatedElementUtils.getAnnotationAttributes(frameworkMethod.getMethod(),_			Timed.class.getName())__		if (annAttrs == null) {_			return 0__		}_		else {_			long millis = annAttrs.<Long> getNumber("millis").longValue()__			return millis > 0 ? millis : 0__		}_	};retrieves,the,configured,spring,specific,code,timeout,from,the,link,timed,timed,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,spring,timeout,framework,method,framework,method,annotation,attributes,ann,attrs,annotated,element,utils,get,annotation,attributes,framework,method,get,method,timed,class,get,name,if,ann,attrs,null,return,0,else,long,millis,ann,attrs,long,get,number,millis,long,value,return,millis,0,millis,0
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1431344362;Retrieve the configured Spring-specific {@code timeout} from the_{@link Timed @Timed} annotation on the supplied_{@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		AnnotationAttributes annAttrs = AnnotatedElementUtils.getAnnotationAttributes(frameworkMethod.getMethod(),_			Timed.class.getName())__		if (annAttrs == null) {_			return 0__		}_		else {_			long millis = annAttrs.<Long> getNumber("millis").longValue()__			return millis > 0 ? millis : 0__		}_	};retrieve,the,configured,spring,specific,code,timeout,from,the,link,timed,timed,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,spring,timeout,framework,method,framework,method,annotation,attributes,ann,attrs,annotated,element,utils,get,annotation,attributes,framework,method,get,method,timed,class,get,name,if,ann,attrs,null,return,0,else,long,millis,ann,attrs,long,get,number,millis,long,value,return,millis,0,millis,0
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1431360825;Retrieve the configured Spring-specific {@code timeout} from the_{@link Timed @Timed} annotation on the supplied_{@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		AnnotationAttributes annAttrs = AnnotatedElementUtils.getAnnotationAttributes(frameworkMethod.getMethod(),_			Timed.class.getName())__		if (annAttrs == null) {_			return 0__		}_		else {_			long millis = annAttrs.<Long> getNumber("millis").longValue()__			return millis > 0 ? millis : 0__		}_	};retrieve,the,configured,spring,specific,code,timeout,from,the,link,timed,timed,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,spring,timeout,framework,method,framework,method,annotation,attributes,ann,attrs,annotated,element,utils,get,annotation,attributes,framework,method,get,method,timed,class,get,name,if,ann,attrs,null,return,0,else,long,millis,ann,attrs,long,get,number,millis,long,value,return,millis,0,millis,0
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1431568199;Retrieve the configured Spring-specific {@code timeout} from the_{@link Timed @Timed} annotation on the supplied_{@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		AnnotationAttributes annAttrs = AnnotatedElementUtils.findAnnotationAttributes(frameworkMethod.getMethod(),_			Timed.class.getName())__		if (annAttrs == null) {_			return 0__		}_		else {_			long millis = annAttrs.<Long> getNumber("millis").longValue()__			return millis > 0 ? millis : 0__		}_	};retrieve,the,configured,spring,specific,code,timeout,from,the,link,timed,timed,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,spring,timeout,framework,method,framework,method,annotation,attributes,ann,attrs,annotated,element,utils,find,annotation,attributes,framework,method,get,method,timed,class,get,name,if,ann,attrs,null,return,0,else,long,millis,ann,attrs,long,get,number,millis,long,value,return,millis,0,millis,0
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1431801000;Retrieve the configured Spring-specific {@code timeout} from the_{@link Timed @Timed} annotation on the supplied_{@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		AnnotationAttributes annAttrs = AnnotatedElementUtils.findAnnotationAttributes(frameworkMethod.getMethod(),_			Timed.class.getName())__		if (annAttrs == null) {_			return 0__		}_		else {_			long millis = annAttrs.<Long> getNumber("millis").longValue()__			return millis > 0 ? millis : 0__		}_	};retrieve,the,configured,spring,specific,code,timeout,from,the,link,timed,timed,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,spring,timeout,framework,method,framework,method,annotation,attributes,ann,attrs,annotated,element,utils,find,annotation,attributes,framework,method,get,method,timed,class,get,name,if,ann,attrs,null,return,0,else,long,millis,ann,attrs,long,get,number,millis,long,value,return,millis,0,millis,0
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1431894269;Retrieve the configured Spring-specific {@code timeout} from the_{@link org.springframework.test.annotation.Timed @Timed} annotation_on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified_@see TestAnnotationUtils#getTimeout(Method);protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		return TestAnnotationUtils.getTimeout(frameworkMethod.getMethod())__	};retrieve,the,configured,spring,specific,code,timeout,from,the,link,org,springframework,test,annotation,timed,timed,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified,see,test,annotation,utils,get,timeout,method;protected,long,get,spring,timeout,framework,method,framework,method,return,test,annotation,utils,get,timeout,framework,method,get,method
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1437749501;Retrieve the configured Spring-specific {@code timeout} from the_{@link org.springframework.test.annotation.Timed @Timed} annotation_on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified_@see TestAnnotationUtils#getTimeout(Method);protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		return TestAnnotationUtils.getTimeout(frameworkMethod.getMethod())__	};retrieve,the,configured,spring,specific,code,timeout,from,the,link,org,springframework,test,annotation,timed,timed,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified,see,test,annotation,utils,get,timeout,method;protected,long,get,spring,timeout,framework,method,framework,method,return,test,annotation,utils,get,timeout,framework,method,get,method
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1437755059;Retrieve the configured Spring-specific {@code timeout} from the_{@link org.springframework.test.annotation.Timed @Timed} annotation_on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified_@see TestAnnotationUtils#getTimeout(Method);protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		return TestAnnotationUtils.getTimeout(frameworkMethod.getMethod())__	};retrieve,the,configured,spring,specific,code,timeout,from,the,link,org,springframework,test,annotation,timed,timed,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified,see,test,annotation,utils,get,timeout,method;protected,long,get,spring,timeout,framework,method,framework,method,return,test,annotation,utils,get,timeout,framework,method,get,method
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1443464140;Retrieve the configured Spring-specific {@code timeout} from the_{@link org.springframework.test.annotation.Timed @Timed} annotation_on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified_@see TestAnnotationUtils#getTimeout(Method);protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		return TestAnnotationUtils.getTimeout(frameworkMethod.getMethod())__	};retrieve,the,configured,spring,specific,code,timeout,from,the,link,org,springframework,test,annotation,timed,timed,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified,see,test,annotation,utils,get,timeout,method;protected,long,get,spring,timeout,framework,method,framework,method,return,test,annotation,utils,get,timeout,framework,method,get,method
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1450547039;Retrieve the configured Spring-specific {@code timeout} from the_{@link org.springframework.test.annotation.Timed @Timed} annotation_on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified_@see TestAnnotationUtils#getTimeout(Method);protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		return TestAnnotationUtils.getTimeout(frameworkMethod.getMethod())__	};retrieve,the,configured,spring,specific,code,timeout,from,the,link,org,springframework,test,annotation,timed,timed,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified,see,test,annotation,utils,get,timeout,method;protected,long,get,spring,timeout,framework,method,framework,method,return,test,annotation,utils,get,timeout,framework,method,get,method
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1456610575;Retrieve the configured Spring-specific {@code timeout} from the_{@link org.springframework.test.annotation.Timed @Timed} annotation_on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified_@see TestAnnotationUtils#getTimeout(Method);protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		return TestAnnotationUtils.getTimeout(frameworkMethod.getMethod())__	};retrieve,the,configured,spring,specific,code,timeout,from,the,link,org,springframework,test,annotation,timed,timed,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified,see,test,annotation,utils,get,timeout,method;protected,long,get,spring,timeout,framework,method,framework,method,return,test,annotation,utils,get,timeout,framework,method,get,method
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1468244735;Retrieve the configured Spring-specific {@code timeout} from the_{@link org.springframework.test.annotation.Timed @Timed} annotation_on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified_@see TestAnnotationUtils#getTimeout(Method);protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		return TestAnnotationUtils.getTimeout(frameworkMethod.getMethod())__	};retrieve,the,configured,spring,specific,code,timeout,from,the,link,org,springframework,test,annotation,timed,timed,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified,see,test,annotation,utils,get,timeout,method;protected,long,get,spring,timeout,framework,method,framework,method,return,test,annotation,utils,get,timeout,framework,method,get,method
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1468334463;Retrieve the configured Spring-specific {@code timeout} from the_{@link org.springframework.test.annotation.Timed @Timed} annotation_on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified_@see TestAnnotationUtils#getTimeout(Method);protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		return TestAnnotationUtils.getTimeout(frameworkMethod.getMethod())__	};retrieve,the,configured,spring,specific,code,timeout,from,the,link,org,springframework,test,annotation,timed,timed,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified,see,test,annotation,utils,get,timeout,method;protected,long,get,spring,timeout,framework,method,framework,method,return,test,annotation,utils,get,timeout,framework,method,get,method
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1495868221;Retrieve the configured Spring-specific {@code timeout} from the_{@link org.springframework.test.annotation.Timed @Timed} annotation_on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified_@see TestAnnotationUtils#getTimeout(Method);protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		return TestAnnotationUtils.getTimeout(frameworkMethod.getMethod())__	};retrieve,the,configured,spring,specific,code,timeout,from,the,link,org,springframework,test,annotation,timed,timed,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified,see,test,annotation,utils,get,timeout,method;protected,long,get,spring,timeout,framework,method,framework,method,return,test,annotation,utils,get,timeout,framework,method,get,method
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1496955179;Retrieve the configured Spring-specific {@code timeout} from the_{@link org.springframework.test.annotation.Timed @Timed} annotation_on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified_@see TestAnnotationUtils#getTimeout(Method);protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		return TestAnnotationUtils.getTimeout(frameworkMethod.getMethod())__	};retrieve,the,configured,spring,specific,code,timeout,from,the,link,org,springframework,test,annotation,timed,timed,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified,see,test,annotation,utils,get,timeout,method;protected,long,get,spring,timeout,framework,method,framework,method,return,test,annotation,utils,get,timeout,framework,method,get,method
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1498780456;Retrieve the configured Spring-specific {@code timeout} from the_{@link org.springframework.test.annotation.Timed @Timed} annotation_on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified_@see TestAnnotationUtils#getTimeout(Method);protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		return TestAnnotationUtils.getTimeout(frameworkMethod.getMethod())__	};retrieve,the,configured,spring,specific,code,timeout,from,the,link,org,springframework,test,annotation,timed,timed,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified,see,test,annotation,utils,get,timeout,method;protected,long,get,spring,timeout,framework,method,framework,method,return,test,annotation,utils,get,timeout,framework,method,get,method
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1529005714;Retrieve the configured Spring-specific {@code timeout} from the_{@link org.springframework.test.annotation.Timed @Timed} annotation_on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified_@see TestAnnotationUtils#getTimeout(Method);protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		return TestAnnotationUtils.getTimeout(frameworkMethod.getMethod())__	};retrieve,the,configured,spring,specific,code,timeout,from,the,link,org,springframework,test,annotation,timed,timed,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified,see,test,annotation,utils,get,timeout,method;protected,long,get,spring,timeout,framework,method,framework,method,return,test,annotation,utils,get,timeout,framework,method,get,method
SpringJUnit4ClassRunner -> protected long getSpringTimeout(FrameworkMethod frameworkMethod);1529012601;Retrieve the configured Spring-specific {@code timeout} from the_{@link org.springframework.test.annotation.Timed @Timed} annotation_on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified_@see TestAnnotationUtils#getTimeout(Method);protected long getSpringTimeout(FrameworkMethod frameworkMethod) {_		return TestAnnotationUtils.getTimeout(frameworkMethod.getMethod())__	};retrieve,the,configured,spring,specific,code,timeout,from,the,link,org,springframework,test,annotation,timed,timed,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified,see,test,annotation,utils,get,timeout,method;protected,long,get,spring,timeout,framework,method,framework,method,return,test,annotation,utils,get,timeout,framework,method,get,method
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1328020251;Augments the default JUnit behavior_{@link #withPotentialRepeat(FrameworkMethod, Object, Statement) with_potential repeats} of the entire execution chain._<p>Furthermore, support for timeouts has been moved down the execution chain_in order to include execution of {@link org.junit.Before &#064_Before}_and {@link org.junit.After &#064_After} methods within the timed_execution. Note that this differs from the default JUnit behavior of_executing <code>&#064_Before</code> and <code>&#064_After</code> methods_in the main thread while executing the actual test method in a separate_thread. Thus, the end effect is that <code>&#064_Before</code> and_<code>&#064_After</code> methods will be executed in the same thread as_the test method. As a consequence, JUnit-specified timeouts will work_fine in combination with Spring transactions. Note that JUnit-specific_timeouts still differ from Spring-specific timeouts in that the former_execute in a separate thread while the latter simply execute in the main_thread (like regular tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augments,the,default,junit,behavior,link,with,potential,repeat,framework,method,object,statement,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,064,before,and,link,org,junit,after,064,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,064,before,code,and,code,064,after,code,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,end,effect,is,that,code,064,before,code,and,code,064,after,code,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,note,that,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1356735495;Augments the default JUnit behavior_{@link #withPotentialRepeat(FrameworkMethod, Object, Statement) with_potential repeats} of the entire execution chain._<p>Furthermore, support for timeouts has been moved down the execution chain_in order to include execution of {@link org.junit.Before &#064_Before}_and {@link org.junit.After &#064_After} methods within the timed_execution. Note that this differs from the default JUnit behavior of_executing {@code &#064_Before} and {@code &#064_After} methods_in the main thread while executing the actual test method in a separate_thread. Thus, the end effect is that {@code &#064_Before} and_{@code &#064_After} methods will be executed in the same thread as_the test method. As a consequence, JUnit-specified timeouts will work_fine in combination with Spring transactions. Note that JUnit-specific_timeouts still differ from Spring-specific timeouts in that the former_execute in a separate thread while the latter simply execute in the main_thread (like regular tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augments,the,default,junit,behavior,link,with,potential,repeat,framework,method,object,statement,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,064,before,and,link,org,junit,after,064,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,064,before,and,code,064,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,end,effect,is,that,code,064,before,and,code,064,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,note,that,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1367163114;Augments the default JUnit behavior_{@link #withPotentialRepeat(FrameworkMethod, Object, Statement) with_potential repeats} of the entire execution chain._<p>Furthermore, support for timeouts has been moved down the execution chain_in order to include execution of {@link org.junit.Before &#064_Before}_and {@link org.junit.After &#064_After} methods within the timed_execution. Note that this differs from the default JUnit behavior of_executing {@code &#064_Before} and {@code &#064_After} methods_in the main thread while executing the actual test method in a separate_thread. Thus, the end effect is that {@code &#064_Before} and_{@code &#064_After} methods will be executed in the same thread as_the test method. As a consequence, JUnit-specified timeouts will work_fine in combination with Spring transactions. Note that JUnit-specific_timeouts still differ from Spring-specific timeouts in that the former_execute in a separate thread while the latter simply execute in the main_thread (like regular tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augments,the,default,junit,behavior,link,with,potential,repeat,framework,method,object,statement,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,064,before,and,link,org,junit,after,064,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,064,before,and,code,064,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,end,effect,is,that,code,064,before,and,code,064,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,note,that,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1382920864;Augments the default JUnit behavior_{@link #withPotentialRepeat(FrameworkMethod, Object, Statement) with_potential repeats} of the entire execution chain._<p>Furthermore, support for timeouts has been moved down the execution chain_in order to include execution of {@link org.junit.Before &#064_Before}_and {@link org.junit.After &#064_After} methods within the timed_execution. Note that this differs from the default JUnit behavior of_executing {@code &#064_Before} and {@code &#064_After} methods_in the main thread while executing the actual test method in a separate_thread. Thus, the end effect is that {@code &#064_Before} and_{@code &#064_After} methods will be executed in the same thread as_the test method. As a consequence, JUnit-specified timeouts will work_fine in combination with Spring transactions. Note that JUnit-specific_timeouts still differ from Spring-specific timeouts in that the former_execute in a separate thread while the latter simply execute in the main_thread (like regular tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augments,the,default,junit,behavior,link,with,potential,repeat,framework,method,object,statement,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,064,before,and,link,org,junit,after,064,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,064,before,and,code,064,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,end,effect,is,that,code,064,before,and,code,064,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,note,that,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1385499540;Augments the default JUnit behavior_{@link #withPotentialRepeat(FrameworkMethod, Object, Statement) with_potential repeats} of the entire execution chain._<p>Furthermore, support for timeouts has been moved down the execution chain_in order to include execution of {@link org.junit.Before &#064_Before}_and {@link org.junit.After &#064_After} methods within the timed_execution. Note that this differs from the default JUnit behavior of_executing {@code &#064_Before} and {@code &#064_After} methods_in the main thread while executing the actual test method in a separate_thread. Thus, the end effect is that {@code &#064_Before} and_{@code &#064_After} methods will be executed in the same thread as_the test method. As a consequence, JUnit-specified timeouts will work_fine in combination with Spring transactions. Note that JUnit-specific_timeouts still differ from Spring-specific timeouts in that the former_execute in a separate thread while the latter simply execute in the main_thread (like regular tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augments,the,default,junit,behavior,link,with,potential,repeat,framework,method,object,statement,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,064,before,and,link,org,junit,after,064,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,064,before,and,code,064,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,end,effect,is,that,code,064,before,and,code,064,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,note,that,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1396960609;Augments the default JUnit behavior_{@link #withPotentialRepeat(FrameworkMethod, Object, Statement) with_potential repeats} of the entire execution chain._<p>Furthermore, support for timeouts has been moved down the execution chain_in order to include execution of {@link org.junit.Before &#064_Before}_and {@link org.junit.After &#064_After} methods within the timed_execution. Note that this differs from the default JUnit behavior of_executing {@code @Before} and {@code @After} methods_in the main thread while executing the actual test method in a separate_thread. Thus, the end effect is that {@code @Before} and_{@code @After} methods will be executed in the same thread as_the test method. As a consequence, JUnit-specified timeouts will work_fine in combination with Spring transactions. Note that JUnit-specific_timeouts still differ from Spring-specific timeouts in that the former_execute in a separate thread while the latter simply execute in the main_thread (like regular tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augments,the,default,junit,behavior,link,with,potential,repeat,framework,method,object,statement,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,064,before,and,link,org,junit,after,064,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,end,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,note,that,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1397082962;Augments the default JUnit behavior_{@link #withPotentialRepeat(FrameworkMethod, Object, Statement) with_potential repeats} of the entire execution chain._<p>Furthermore, support for timeouts has been moved down the execution chain_in order to include execution of {@link org.junit.Before &#064_Before}_and {@link org.junit.After &#064_After} methods within the timed_execution. Note that this differs from the default JUnit behavior of_executing {@code @Before} and {@code @After} methods_in the main thread while executing the actual test method in a separate_thread. Thus, the end effect is that {@code @Before} and_{@code @After} methods will be executed in the same thread as_the test method. As a consequence, JUnit-specified timeouts will work_fine in combination with Spring transactions. Note that JUnit-specific_timeouts still differ from Spring-specific timeouts in that the former_execute in a separate thread while the latter simply execute in the main_thread (like regular tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augments,the,default,junit,behavior,link,with,potential,repeat,framework,method,object,statement,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,064,before,and,link,org,junit,after,064,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,end,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,note,that,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1397147316;Augments the default JUnit behavior_{@link #withPotentialRepeat(FrameworkMethod, Object, Statement) with_potential repeats} of the entire execution chain._<p>Furthermore, support for timeouts has been moved down the execution chain_in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed_execution. Note that this differs from the default JUnit behavior of_executing {@code @Before} and {@code @After} methods_in the main thread while executing the actual test method in a separate_thread. Thus, the end effect is that {@code @Before} and_{@code @After} methods will be executed in the same thread as_the test method. As a consequence, JUnit-specified timeouts will work_fine in combination with Spring transactions. Note that JUnit-specific_timeouts still differ from Spring-specific timeouts in that the former_execute in a separate thread while the latter simply execute in the main_thread (like regular tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augments,the,default,junit,behavior,link,with,potential,repeat,framework,method,object,statement,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,end,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,note,that,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1403683825;Augments the default JUnit behavior_{@link #withPotentialRepeat(FrameworkMethod, Object, Statement) with_potential repeats} of the entire execution chain._<p>Furthermore, support for timeouts has been moved down the execution chain_in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed_execution. Note that this differs from the default JUnit behavior of_executing {@code @Before} and {@code @After} methods_in the main thread while executing the actual test method in a separate_thread. Thus, the end effect is that {@code @Before} and_{@code @After} methods will be executed in the same thread as_the test method. As a consequence, JUnit-specified timeouts will work_fine in combination with Spring transactions. Note that JUnit-specific_timeouts still differ from Spring-specific timeouts in that the former_execute in a separate thread while the latter simply execute in the main_thread (like regular tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augments,the,default,junit,behavior,link,with,potential,repeat,framework,method,object,statement,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,end,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,note,that,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1406220853;Augments the default JUnit behavior_{@link #withPotentialRepeat(FrameworkMethod, Object, Statement) with_potential repeats} of the entire execution chain._<p>Furthermore, support for timeouts has been moved down the execution chain_in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed_execution. Note that this differs from the default JUnit behavior of_executing {@code @Before} and {@code @After} methods_in the main thread while executing the actual test method in a separate_thread. Thus, the end effect is that {@code @Before} and_{@code @After} methods will be executed in the same thread as_the test method. As a consequence, JUnit-specified timeouts will work_fine in combination with Spring transactions. Note that JUnit-specific_timeouts still differ from Spring-specific timeouts in that the former_execute in a separate thread while the latter simply execute in the main_thread (like regular tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augments,the,default,junit,behavior,link,with,potential,repeat,framework,method,object,statement,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,end,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,note,that,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1413848647;Augments the default JUnit behavior_{@link #withPotentialRepeat(FrameworkMethod, Object, Statement) with_potential repeats} of the entire execution chain._<p>Furthermore, support for timeouts has been moved down the execution chain_in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed_execution. Note that this differs from the default JUnit behavior of_executing {@code @Before} and {@code @After} methods_in the main thread while executing the actual test method in a separate_thread. Thus, the end effect is that {@code @Before} and_{@code @After} methods will be executed in the same thread as_the test method. As a consequence, JUnit-specified timeouts will work_fine in combination with Spring transactions. Note that JUnit-specific_timeouts still differ from Spring-specific timeouts in that the former_execute in a separate thread while the latter simply execute in the main_thread (like regular tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augments,the,default,junit,behavior,link,with,potential,repeat,framework,method,object,statement,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,end,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,note,that,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1420908711;Augments the default JUnit behavior_{@link #withPotentialRepeat(FrameworkMethod, Object, Statement) with_potential repeats} of the entire execution chain._<p>Furthermore, support for timeouts has been moved down the execution chain_in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed_execution. Note that this differs from the default JUnit behavior of_executing {@code @Before} and {@code @After} methods_in the main thread while executing the actual test method in a separate_thread. Thus, the end effect is that {@code @Before} and_{@code @After} methods will be executed in the same thread as_the test method. As a consequence, JUnit-specified timeouts will work_fine in combination with Spring transactions. Note that JUnit-specific_timeouts still differ from Spring-specific timeouts in that the former_execute in a separate thread while the latter simply execute in the main_thread (like regular tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augments,the,default,junit,behavior,link,with,potential,repeat,framework,method,object,statement,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,end,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,note,that,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1431344362;Augment the default JUnit behavior_{@linkplain #withPotentialRepeat with potential repeats} of the entire_execution chain._<p>Furthermore, support for timeouts has been moved down the execution_chain in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed execution._Note that this differs from the default JUnit behavior of executing_{@code @Before} and {@code @After} methods in the main thread while_executing the actual test method in a separate thread. Thus, the net_effect is that {@code @Before} and {@code @After} methods will be_executed in the same thread as the test method. As a consequence,_JUnit-specified timeouts will work fine in combination with Spring_transactions. However, JUnit-specific timeouts still differ from_Spring-specific timeouts in that the former execute in a separate_thread while the latter simply execute in the main thread (like regular_tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withRulesReflectively(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augment,the,default,junit,behavior,linkplain,with,potential,repeat,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,net,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,however,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,rules,reflectively,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1431360825;Augment the default JUnit behavior_{@linkplain #withPotentialRepeat with potential repeats} of the entire_execution chain._<p>Furthermore, support for timeouts has been moved down the execution_chain in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed execution._Note that this differs from the default JUnit behavior of executing_{@code @Before} and {@code @After} methods in the main thread while_executing the actual test method in a separate thread. Thus, the net_effect is that {@code @Before} and {@code @After} methods will be_executed in the same thread as the test method. As a consequence,_JUnit-specified timeouts will work fine in combination with Spring_transactions. However, JUnit-specific timeouts still differ from_Spring-specific timeouts in that the former execute in a separate_thread while the latter simply execute in the main thread (like regular_tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withRulesReflectively(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augment,the,default,junit,behavior,linkplain,with,potential,repeat,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,net,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,however,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,rules,reflectively,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1431568199;Augment the default JUnit behavior_{@linkplain #withPotentialRepeat with potential repeats} of the entire_execution chain._<p>Furthermore, support for timeouts has been moved down the execution_chain in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed execution._Note that this differs from the default JUnit behavior of executing_{@code @Before} and {@code @After} methods in the main thread while_executing the actual test method in a separate thread. Thus, the net_effect is that {@code @Before} and {@code @After} methods will be_executed in the same thread as the test method. As a consequence,_JUnit-specified timeouts will work fine in combination with Spring_transactions. However, JUnit-specific timeouts still differ from_Spring-specific timeouts in that the former execute in a separate_thread while the latter simply execute in the main thread (like regular_tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withRulesReflectively(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augment,the,default,junit,behavior,linkplain,with,potential,repeat,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,net,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,however,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,rules,reflectively,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1431801000;Augment the default JUnit behavior_{@linkplain #withPotentialRepeat with potential repeats} of the entire_execution chain._<p>Furthermore, support for timeouts has been moved down the execution_chain in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed execution._Note that this differs from the default JUnit behavior of executing_{@code @Before} and {@code @After} methods in the main thread while_executing the actual test method in a separate thread. Thus, the net_effect is that {@code @Before} and {@code @After} methods will be_executed in the same thread as the test method. As a consequence,_JUnit-specified timeouts will work fine in combination with Spring_transactions. However, JUnit-specific timeouts still differ from_Spring-specific timeouts in that the former execute in a separate_thread while the latter simply execute in the main thread (like regular_tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withRulesReflectively(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augment,the,default,junit,behavior,linkplain,with,potential,repeat,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,net,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,however,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,rules,reflectively,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1431894269;Augment the default JUnit behavior_{@linkplain #withPotentialRepeat with potential repeats} of the entire_execution chain._<p>Furthermore, support for timeouts has been moved down the execution_chain in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed execution._Note that this differs from the default JUnit behavior of executing_{@code @Before} and {@code @After} methods in the main thread while_executing the actual test method in a separate thread. Thus, the net_effect is that {@code @Before} and {@code @After} methods will be_executed in the same thread as the test method. As a consequence,_JUnit-specified timeouts will work fine in combination with Spring_transactions. However, JUnit-specific timeouts still differ from_Spring-specific timeouts in that the former execute in a separate_thread while the latter simply execute in the main thread (like regular_tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withRulesReflectively(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augment,the,default,junit,behavior,linkplain,with,potential,repeat,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,net,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,however,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,rules,reflectively,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1437749501;Augment the default JUnit behavior_{@linkplain #withPotentialRepeat with potential repeats} of the entire_execution chain._<p>Furthermore, support for timeouts has been moved down the execution_chain in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed execution._Note that this differs from the default JUnit behavior of executing_{@code @Before} and {@code @After} methods in the main thread while_executing the actual test method in a separate thread. Thus, the net_effect is that {@code @Before} and {@code @After} methods will be_executed in the same thread as the test method. As a consequence,_JUnit-specified timeouts will work fine in combination with Spring_transactions. However, JUnit-specific timeouts still differ from_Spring-specific timeouts in that the former execute in a separate_thread while the latter simply execute in the main thread (like regular_tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withRulesReflectively(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {__				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)___		return statement__	};augment,the,default,junit,behavior,linkplain,with,potential,repeat,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,net,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,however,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,rules,reflectively,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1437755059;Augment the default JUnit behavior_{@linkplain #withPotentialRepeat with potential repeats} of the entire_execution chain._<p>Furthermore, support for timeouts has been moved down the execution_chain in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed execution._Note that this differs from the default JUnit behavior of executing_{@code @Before} and {@code @After} methods in the main thread while_executing the actual test method in a separate thread. Thus, the net_effect is that {@code @Before} and {@code @After} methods will be_executed in the same thread as the test method. As a consequence,_JUnit-specified timeouts will work fine in combination with Spring_transactions. However, JUnit-specific timeouts still differ from_Spring-specific timeouts in that the former execute in a separate_thread while the latter simply execute in the main thread (like regular_tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withRulesReflectively(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {_				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)__		return statement__	};augment,the,default,junit,behavior,linkplain,with,potential,repeat,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,net,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,however,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,rules,reflectively,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1443464140;Augment the default JUnit behavior_{@linkplain #withPotentialRepeat with potential repeats} of the entire_execution chain._<p>Furthermore, support for timeouts has been moved down the execution_chain in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed execution._Note that this differs from the default JUnit behavior of executing_{@code @Before} and {@code @After} methods in the main thread while_executing the actual test method in a separate thread. Thus, the net_effect is that {@code @Before} and {@code @After} methods will be_executed in the same thread as the test method. As a consequence,_JUnit-specified timeouts will work fine in combination with Spring_transactions. However, JUnit-specific timeouts still differ from_Spring-specific timeouts in that the former execute in a separate_thread while the latter simply execute in the main thread (like regular_tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withRulesReflectively(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {_				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)__		return statement__	};augment,the,default,junit,behavior,linkplain,with,potential,repeat,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,net,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,however,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,rules,reflectively,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1450547039;Augment the default JUnit behavior_{@linkplain #withPotentialRepeat with potential repeats} of the entire_execution chain._<p>Furthermore, support for timeouts has been moved down the execution_chain in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed execution._Note that this differs from the default JUnit behavior of executing_{@code @Before} and {@code @After} methods in the main thread while_executing the actual test method in a separate thread. Thus, the net_effect is that {@code @Before} and {@code @After} methods will be_executed in the same thread as the test method. As a consequence,_JUnit-specified timeouts will work fine in combination with Spring_transactions. However, JUnit-specific timeouts still differ from_Spring-specific timeouts in that the former execute in a separate_thread while the latter simply execute in the main thread (like regular_tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withRulesReflectively(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {_				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)__		return statement__	};augment,the,default,junit,behavior,linkplain,with,potential,repeat,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,net,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,however,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,rules,reflectively,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1456610575;Augment the default JUnit behavior_{@linkplain #withPotentialRepeat with potential repeats} of the entire_execution chain._<p>Furthermore, support for timeouts has been moved down the execution_chain in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed execution._Note that this differs from the default JUnit behavior of executing_{@code @Before} and {@code @After} methods in the main thread while_executing the actual test method in a separate thread. Thus, the net_effect is that {@code @Before} and {@code @After} methods will be_executed in the same thread as the test method. As a consequence,_JUnit-specified timeouts will work fine in combination with Spring_transactions. However, JUnit-specific timeouts still differ from_Spring-specific timeouts in that the former execute in a separate_thread while the latter simply execute in the main thread (like regular_tests)._@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withRulesReflectively(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {_				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)__		return statement__	};augment,the,default,junit,behavior,linkplain,with,potential,repeat,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,net,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,however,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,rules,reflectively,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1468244735;Augment the default JUnit behavior_{@linkplain #withPotentialRepeat with potential repeats} of the entire_execution chain._<p>Furthermore, support for timeouts has been moved down the execution_chain in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed execution._Note that this differs from the default JUnit behavior of executing_{@code @Before} and {@code @After} methods in the main thread while_executing the actual test method in a separate thread. Thus, the net_effect is that {@code @Before} and {@code @After} methods will be_executed in the same thread as the test method. As a consequence,_JUnit-specified timeouts will work fine in combination with Spring_transactions. However, JUnit-specific timeouts still differ from_Spring-specific timeouts in that the former execute in a separate_thread while the latter simply execute in the main thread (like regular_tests)._@see #methodInvoker(FrameworkMethod, Object)_@see #withBeforeTestExecutionCallbacks(FrameworkMethod, Object, Statement)_@see #withAfterTestExecutionCallbacks(FrameworkMethod, Object, Statement)_@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withRulesReflectively(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {_				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = withBeforeTestExecutionCallbacks(frameworkMethod, testInstance, statement)__		statement = withAfterTestExecutionCallbacks(frameworkMethod, testInstance, statement)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)__		return statement__	};augment,the,default,junit,behavior,linkplain,with,potential,repeat,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,net,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,however,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,method,invoker,framework,method,object,see,with,before,test,execution,callbacks,framework,method,object,statement,see,with,after,test,execution,callbacks,framework,method,object,statement,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,rules,reflectively,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,with,before,test,execution,callbacks,framework,method,test,instance,statement,statement,with,after,test,execution,callbacks,framework,method,test,instance,statement,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1468334463;Augment the default JUnit behavior_{@linkplain #withPotentialRepeat with potential repeats} of the entire_execution chain._<p>Furthermore, support for timeouts has been moved down the execution_chain in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed execution._Note that this differs from the default JUnit behavior of executing_{@code @Before} and {@code @After} methods in the main thread while_executing the actual test method in a separate thread. Thus, the net_effect is that {@code @Before} and {@code @After} methods will be_executed in the same thread as the test method. As a consequence,_JUnit-specified timeouts will work fine in combination with Spring_transactions. However, JUnit-specific timeouts still differ from_Spring-specific timeouts in that the former execute in a separate_thread while the latter simply execute in the main thread (like regular_tests)._@see #methodInvoker(FrameworkMethod, Object)_@see #withBeforeTestExecutionCallbacks(FrameworkMethod, Object, Statement)_@see #withAfterTestExecutionCallbacks(FrameworkMethod, Object, Statement)_@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withRulesReflectively(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {_				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = withBeforeTestExecutionCallbacks(frameworkMethod, testInstance, statement)__		statement = withAfterTestExecutionCallbacks(frameworkMethod, testInstance, statement)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)__		return statement__	};augment,the,default,junit,behavior,linkplain,with,potential,repeat,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,net,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,however,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,method,invoker,framework,method,object,see,with,before,test,execution,callbacks,framework,method,object,statement,see,with,after,test,execution,callbacks,framework,method,object,statement,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,rules,reflectively,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,with,before,test,execution,callbacks,framework,method,test,instance,statement,statement,with,after,test,execution,callbacks,framework,method,test,instance,statement,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1495868221;Augment the default JUnit behavior_{@linkplain #withPotentialRepeat with potential repeats} of the entire_execution chain._<p>Furthermore, support for timeouts has been moved down the execution_chain in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed execution._Note that this differs from the default JUnit behavior of executing_{@code @Before} and {@code @After} methods in the main thread while_executing the actual test method in a separate thread. Thus, the net_effect is that {@code @Before} and {@code @After} methods will be_executed in the same thread as the test method. As a consequence,_JUnit-specified timeouts will work fine in combination with Spring_transactions. However, JUnit-specific timeouts still differ from_Spring-specific timeouts in that the former execute in a separate_thread while the latter simply execute in the main thread (like regular_tests)._@see #methodInvoker(FrameworkMethod, Object)_@see #withBeforeTestExecutionCallbacks(FrameworkMethod, Object, Statement)_@see #withAfterTestExecutionCallbacks(FrameworkMethod, Object, Statement)_@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withRulesReflectively(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {_				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = withBeforeTestExecutionCallbacks(frameworkMethod, testInstance, statement)__		statement = withAfterTestExecutionCallbacks(frameworkMethod, testInstance, statement)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)__		return statement__	};augment,the,default,junit,behavior,linkplain,with,potential,repeat,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,net,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,however,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,method,invoker,framework,method,object,see,with,before,test,execution,callbacks,framework,method,object,statement,see,with,after,test,execution,callbacks,framework,method,object,statement,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,rules,reflectively,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,with,before,test,execution,callbacks,framework,method,test,instance,statement,statement,with,after,test,execution,callbacks,framework,method,test,instance,statement,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1496955179;Augment the default JUnit behavior_{@linkplain #withPotentialRepeat with potential repeats} of the entire_execution chain._<p>Furthermore, support for timeouts has been moved down the execution_chain in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed execution._Note that this differs from the default JUnit behavior of executing_{@code @Before} and {@code @After} methods in the main thread while_executing the actual test method in a separate thread. Thus, the net_effect is that {@code @Before} and {@code @After} methods will be_executed in the same thread as the test method. As a consequence,_JUnit-specified timeouts will work fine in combination with Spring_transactions. However, JUnit-specific timeouts still differ from_Spring-specific timeouts in that the former execute in a separate_thread while the latter simply execute in the main thread (like regular_tests)._@see #methodInvoker(FrameworkMethod, Object)_@see #withBeforeTestExecutionCallbacks(FrameworkMethod, Object, Statement)_@see #withAfterTestExecutionCallbacks(FrameworkMethod, Object, Statement)_@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withRulesReflectively(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {_				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = withBeforeTestExecutionCallbacks(frameworkMethod, testInstance, statement)__		statement = withAfterTestExecutionCallbacks(frameworkMethod, testInstance, statement)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)__		return statement__	};augment,the,default,junit,behavior,linkplain,with,potential,repeat,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,net,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,however,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,method,invoker,framework,method,object,see,with,before,test,execution,callbacks,framework,method,object,statement,see,with,after,test,execution,callbacks,framework,method,object,statement,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,rules,reflectively,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,with,before,test,execution,callbacks,framework,method,test,instance,statement,statement,with,after,test,execution,callbacks,framework,method,test,instance,statement,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1498780456;Augment the default JUnit behavior_{@linkplain #withPotentialRepeat with potential repeats} of the entire_execution chain._<p>Furthermore, support for timeouts has been moved down the execution_chain in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed execution._Note that this differs from the default JUnit behavior of executing_{@code @Before} and {@code @After} methods in the main thread while_executing the actual test method in a separate thread. Thus, the net_effect is that {@code @Before} and {@code @After} methods will be_executed in the same thread as the test method. As a consequence,_JUnit-specified timeouts will work fine in combination with Spring_transactions. However, JUnit-specific timeouts still differ from_Spring-specific timeouts in that the former execute in a separate_thread while the latter simply execute in the main thread (like regular_tests)._@see #methodInvoker(FrameworkMethod, Object)_@see #withBeforeTestExecutionCallbacks(FrameworkMethod, Object, Statement)_@see #withAfterTestExecutionCallbacks(FrameworkMethod, Object, Statement)_@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withRulesReflectively(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {_				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = withBeforeTestExecutionCallbacks(frameworkMethod, testInstance, statement)__		statement = withAfterTestExecutionCallbacks(frameworkMethod, testInstance, statement)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)__		return statement__	};augment,the,default,junit,behavior,linkplain,with,potential,repeat,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,net,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,however,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,method,invoker,framework,method,object,see,with,before,test,execution,callbacks,framework,method,object,statement,see,with,after,test,execution,callbacks,framework,method,object,statement,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,rules,reflectively,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,with,before,test,execution,callbacks,framework,method,test,instance,statement,statement,with,after,test,execution,callbacks,framework,method,test,instance,statement,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1529005714;Augment the default JUnit behavior_{@linkplain #withPotentialRepeat with potential repeats} of the entire_execution chain._<p>Furthermore, support for timeouts has been moved down the execution_chain in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed execution._Note that this differs from the default JUnit behavior of executing_{@code @Before} and {@code @After} methods in the main thread while_executing the actual test method in a separate thread. Thus, the net_effect is that {@code @Before} and {@code @After} methods will be_executed in the same thread as the test method. As a consequence,_JUnit-specified timeouts will work fine in combination with Spring_transactions. However, JUnit-specific timeouts still differ from_Spring-specific timeouts in that the former execute in a separate_thread while the latter simply execute in the main thread (like regular_tests)._@see #methodInvoker(FrameworkMethod, Object)_@see #withBeforeTestExecutionCallbacks(FrameworkMethod, Object, Statement)_@see #withAfterTestExecutionCallbacks(FrameworkMethod, Object, Statement)_@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withRulesReflectively(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {_				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = withBeforeTestExecutionCallbacks(frameworkMethod, testInstance, statement)__		statement = withAfterTestExecutionCallbacks(frameworkMethod, testInstance, statement)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)__		return statement__	};augment,the,default,junit,behavior,linkplain,with,potential,repeat,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,net,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,however,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,method,invoker,framework,method,object,see,with,before,test,execution,callbacks,framework,method,object,statement,see,with,after,test,execution,callbacks,framework,method,object,statement,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,rules,reflectively,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,with,before,test,execution,callbacks,framework,method,test,instance,statement,statement,with,after,test,execution,callbacks,framework,method,test,instance,statement,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement methodBlock(FrameworkMethod frameworkMethod);1529012601;Augment the default JUnit behavior_{@linkplain #withPotentialRepeat with potential repeats} of the entire_execution chain._<p>Furthermore, support for timeouts has been moved down the execution_chain in order to include execution of {@link org.junit.Before @Before}_and {@link org.junit.After @After} methods within the timed execution._Note that this differs from the default JUnit behavior of executing_{@code @Before} and {@code @After} methods in the main thread while_executing the actual test method in a separate thread. Thus, the net_effect is that {@code @Before} and {@code @After} methods will be_executed in the same thread as the test method. As a consequence,_JUnit-specified timeouts will work fine in combination with Spring_transactions. However, JUnit-specific timeouts still differ from_Spring-specific timeouts in that the former execute in a separate_thread while the latter simply execute in the main thread (like regular_tests)._@see #methodInvoker(FrameworkMethod, Object)_@see #withBeforeTestExecutionCallbacks(FrameworkMethod, Object, Statement)_@see #withAfterTestExecutionCallbacks(FrameworkMethod, Object, Statement)_@see #possiblyExpectingExceptions(FrameworkMethod, Object, Statement)_@see #withBefores(FrameworkMethod, Object, Statement)_@see #withAfters(FrameworkMethod, Object, Statement)_@see #withRulesReflectively(FrameworkMethod, Object, Statement)_@see #withPotentialRepeat(FrameworkMethod, Object, Statement)_@see #withPotentialTimeout(FrameworkMethod, Object, Statement);@Override_	protected Statement methodBlock(FrameworkMethod frameworkMethod) {_		Object testInstance__		try {_			testInstance = new ReflectiveCallable() {_				@Override_				protected Object runReflectiveCall() throws Throwable {_					return createTest()__				}_			}.run()__		}_		catch (Throwable ex) {_			return new Fail(ex)__		}__		Statement statement = methodInvoker(frameworkMethod, testInstance)__		statement = withBeforeTestExecutionCallbacks(frameworkMethod, testInstance, statement)__		statement = withAfterTestExecutionCallbacks(frameworkMethod, testInstance, statement)__		statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement)__		statement = withBefores(frameworkMethod, testInstance, statement)__		statement = withAfters(frameworkMethod, testInstance, statement)__		statement = withRulesReflectively(frameworkMethod, testInstance, statement)__		statement = withPotentialRepeat(frameworkMethod, testInstance, statement)__		statement = withPotentialTimeout(frameworkMethod, testInstance, statement)__		return statement__	};augment,the,default,junit,behavior,linkplain,with,potential,repeat,with,potential,repeats,of,the,entire,execution,chain,p,furthermore,support,for,timeouts,has,been,moved,down,the,execution,chain,in,order,to,include,execution,of,link,org,junit,before,before,and,link,org,junit,after,after,methods,within,the,timed,execution,note,that,this,differs,from,the,default,junit,behavior,of,executing,code,before,and,code,after,methods,in,the,main,thread,while,executing,the,actual,test,method,in,a,separate,thread,thus,the,net,effect,is,that,code,before,and,code,after,methods,will,be,executed,in,the,same,thread,as,the,test,method,as,a,consequence,junit,specified,timeouts,will,work,fine,in,combination,with,spring,transactions,however,junit,specific,timeouts,still,differ,from,spring,specific,timeouts,in,that,the,former,execute,in,a,separate,thread,while,the,latter,simply,execute,in,the,main,thread,like,regular,tests,see,method,invoker,framework,method,object,see,with,before,test,execution,callbacks,framework,method,object,statement,see,with,after,test,execution,callbacks,framework,method,object,statement,see,possibly,expecting,exceptions,framework,method,object,statement,see,with,befores,framework,method,object,statement,see,with,afters,framework,method,object,statement,see,with,rules,reflectively,framework,method,object,statement,see,with,potential,repeat,framework,method,object,statement,see,with,potential,timeout,framework,method,object,statement;override,protected,statement,method,block,framework,method,framework,method,object,test,instance,try,test,instance,new,reflective,callable,override,protected,object,run,reflective,call,throws,throwable,return,create,test,run,catch,throwable,ex,return,new,fail,ex,statement,statement,method,invoker,framework,method,test,instance,statement,with,before,test,execution,callbacks,framework,method,test,instance,statement,statement,with,after,test,execution,callbacks,framework,method,test,instance,statement,statement,possibly,expecting,exceptions,framework,method,test,instance,statement,statement,with,befores,framework,method,test,instance,statement,statement,with,afters,framework,method,test,instance,statement,statement,with,rules,reflectively,framework,method,test,instance,statement,statement,with,potential,repeat,framework,method,test,instance,statement,statement,with,potential,timeout,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1328020251;Performs the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		EachTestNotifier eachNotifier = springMakeNotifier(frameworkMethod, notifier)__		if (isTestMethodIgnored(frameworkMethod)) {_			eachNotifier.fireTestIgnored()__			return__		}__		eachNotifier.fireTestStarted()__		try {_			methodBlock(frameworkMethod).evaluate()__		}_		catch (AssumptionViolatedException e) {_			eachNotifier.addFailedAssumption(e)__		}_		catch (Throwable e) {_			eachNotifier.addFailure(e)__		}_		finally {_			eachNotifier.fireTestFinished()__		}_	};performs,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,each,test,notifier,each,notifier,spring,make,notifier,framework,method,notifier,if,is,test,method,ignored,framework,method,each,notifier,fire,test,ignored,return,each,notifier,fire,test,started,try,method,block,framework,method,evaluate,catch,assumption,violated,exception,e,each,notifier,add,failed,assumption,e,catch,throwable,e,each,notifier,add,failure,e,finally,each,notifier,fire,test,finished
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1356735495;Performs the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		EachTestNotifier eachNotifier = springMakeNotifier(frameworkMethod, notifier)__		if (isTestMethodIgnored(frameworkMethod)) {_			eachNotifier.fireTestIgnored()__			return__		}__		eachNotifier.fireTestStarted()__		try {_			methodBlock(frameworkMethod).evaluate()__		}_		catch (AssumptionViolatedException e) {_			eachNotifier.addFailedAssumption(e)__		}_		catch (Throwable e) {_			eachNotifier.addFailure(e)__		}_		finally {_			eachNotifier.fireTestFinished()__		}_	};performs,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,each,test,notifier,each,notifier,spring,make,notifier,framework,method,notifier,if,is,test,method,ignored,framework,method,each,notifier,fire,test,ignored,return,each,notifier,fire,test,started,try,method,block,framework,method,evaluate,catch,assumption,violated,exception,e,each,notifier,add,failed,assumption,e,catch,throwable,e,each,notifier,add,failure,e,finally,each,notifier,fire,test,finished
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1367163114;Performs the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		EachTestNotifier eachNotifier = springMakeNotifier(frameworkMethod, notifier)__		if (isTestMethodIgnored(frameworkMethod)) {_			eachNotifier.fireTestIgnored()__			return__		}__		eachNotifier.fireTestStarted()__		try {_			methodBlock(frameworkMethod).evaluate()__		}_		catch (AssumptionViolatedException e) {_			eachNotifier.addFailedAssumption(e)__		}_		catch (Throwable e) {_			eachNotifier.addFailure(e)__		}_		finally {_			eachNotifier.fireTestFinished()__		}_	};performs,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,each,test,notifier,each,notifier,spring,make,notifier,framework,method,notifier,if,is,test,method,ignored,framework,method,each,notifier,fire,test,ignored,return,each,notifier,fire,test,started,try,method,block,framework,method,evaluate,catch,assumption,violated,exception,e,each,notifier,add,failed,assumption,e,catch,throwable,e,each,notifier,add,failure,e,finally,each,notifier,fire,test,finished
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1382920864;Performs the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		EachTestNotifier eachNotifier = springMakeNotifier(frameworkMethod, notifier)__		if (isTestMethodIgnored(frameworkMethod)) {_			eachNotifier.fireTestIgnored()__			return__		}__		eachNotifier.fireTestStarted()__		try {_			methodBlock(frameworkMethod).evaluate()__		}_		catch (AssumptionViolatedException e) {_			eachNotifier.addFailedAssumption(e)__		}_		catch (Throwable e) {_			eachNotifier.addFailure(e)__		}_		finally {_			eachNotifier.fireTestFinished()__		}_	};performs,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,each,test,notifier,each,notifier,spring,make,notifier,framework,method,notifier,if,is,test,method,ignored,framework,method,each,notifier,fire,test,ignored,return,each,notifier,fire,test,started,try,method,block,framework,method,evaluate,catch,assumption,violated,exception,e,each,notifier,add,failed,assumption,e,catch,throwable,e,each,notifier,add,failure,e,finally,each,notifier,fire,test,finished
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1385499540;Performs the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		EachTestNotifier eachNotifier = springMakeNotifier(frameworkMethod, notifier)__		if (isTestMethodIgnored(frameworkMethod)) {_			eachNotifier.fireTestIgnored()__			return__		}__		eachNotifier.fireTestStarted()__		try {_			methodBlock(frameworkMethod).evaluate()__		}_		catch (AssumptionViolatedException e) {_			eachNotifier.addFailedAssumption(e)__		}_		catch (Throwable e) {_			eachNotifier.addFailure(e)__		}_		finally {_			eachNotifier.fireTestFinished()__		}_	};performs,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,each,test,notifier,each,notifier,spring,make,notifier,framework,method,notifier,if,is,test,method,ignored,framework,method,each,notifier,fire,test,ignored,return,each,notifier,fire,test,started,try,method,block,framework,method,evaluate,catch,assumption,violated,exception,e,each,notifier,add,failed,assumption,e,catch,throwable,e,each,notifier,add,failure,e,finally,each,notifier,fire,test,finished
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1396960609;Performs the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		EachTestNotifier eachNotifier = springMakeNotifier(frameworkMethod, notifier)__		if (isTestMethodIgnored(frameworkMethod)) {_			eachNotifier.fireTestIgnored()__			return__		}__		eachNotifier.fireTestStarted()__		try {_			methodBlock(frameworkMethod).evaluate()__		}_		catch (AssumptionViolatedException e) {_			eachNotifier.addFailedAssumption(e)__		}_		catch (Throwable e) {_			eachNotifier.addFailure(e)__		}_		finally {_			eachNotifier.fireTestFinished()__		}_	};performs,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,each,test,notifier,each,notifier,spring,make,notifier,framework,method,notifier,if,is,test,method,ignored,framework,method,each,notifier,fire,test,ignored,return,each,notifier,fire,test,started,try,method,block,framework,method,evaluate,catch,assumption,violated,exception,e,each,notifier,add,failed,assumption,e,catch,throwable,e,each,notifier,add,failure,e,finally,each,notifier,fire,test,finished
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1397082962;Performs the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		EachTestNotifier eachNotifier = springMakeNotifier(frameworkMethod, notifier)__		if (isTestMethodIgnored(frameworkMethod)) {_			eachNotifier.fireTestIgnored()__			return__		}__		eachNotifier.fireTestStarted()__		try {_			methodBlock(frameworkMethod).evaluate()__		}_		catch (AssumptionViolatedException e) {_			eachNotifier.addFailedAssumption(e)__		}_		catch (Throwable e) {_			eachNotifier.addFailure(e)__		}_		finally {_			eachNotifier.fireTestFinished()__		}_	};performs,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,each,test,notifier,each,notifier,spring,make,notifier,framework,method,notifier,if,is,test,method,ignored,framework,method,each,notifier,fire,test,ignored,return,each,notifier,fire,test,started,try,method,block,framework,method,evaluate,catch,assumption,violated,exception,e,each,notifier,add,failed,assumption,e,catch,throwable,e,each,notifier,add,failure,e,finally,each,notifier,fire,test,finished
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1397147316;Performs the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		EachTestNotifier eachNotifier = springMakeNotifier(frameworkMethod, notifier)__		if (isTestMethodIgnored(frameworkMethod)) {_			eachNotifier.fireTestIgnored()__			return__		}__		eachNotifier.fireTestStarted()__		try {_			methodBlock(frameworkMethod).evaluate()__		}_		catch (AssumptionViolatedException e) {_			eachNotifier.addFailedAssumption(e)__		}_		catch (Throwable e) {_			eachNotifier.addFailure(e)__		}_		finally {_			eachNotifier.fireTestFinished()__		}_	};performs,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,each,test,notifier,each,notifier,spring,make,notifier,framework,method,notifier,if,is,test,method,ignored,framework,method,each,notifier,fire,test,ignored,return,each,notifier,fire,test,started,try,method,block,framework,method,evaluate,catch,assumption,violated,exception,e,each,notifier,add,failed,assumption,e,catch,throwable,e,each,notifier,add,failure,e,finally,each,notifier,fire,test,finished
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1403683825;Performs the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			runLeaf(methodBlock(frameworkMethod), description, notifier)__		}_	};performs,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,run,leaf,method,block,framework,method,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1406220853;Performs the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			runLeaf(methodBlock(frameworkMethod), description, notifier)__		}_	};performs,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,run,leaf,method,block,framework,method,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1413848647;Performs the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			runLeaf(methodBlock(frameworkMethod), description, notifier)__		}_	};performs,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,run,leaf,method,block,framework,method,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1420908711;Performs the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};performs,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1431344362;Perform the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};perform,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1431360825;Perform the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};perform,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1431568199;Perform the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};perform,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1431801000;Perform the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};perform,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1431894269;Perform the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};perform,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1437749501;Perform the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};perform,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1437755059;Perform the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};perform,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1443464140;Perform the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};perform,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1450547039;Perform the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};perform,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1456610575;Perform the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};perform,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1468244735;Perform the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};perform,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1468334463;Perform the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};perform,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1495868221;Perform the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};perform,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1496955179;Perform the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};perform,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1498780456;Perform the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};perform,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1529005714;Perform the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};perform,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> @Override 	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier);1529012601;Perform the same logic as_{@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},_except that tests are determined to be <em>ignored</em> by_{@link #isTestMethodIgnored(FrameworkMethod)}.;@Override_	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {_		Description description = describeChild(frameworkMethod)__		if (isTestMethodIgnored(frameworkMethod)) {_			notifier.fireTestIgnored(description)__		}_		else {_			Statement statement__			try {_				statement = methodBlock(frameworkMethod)__			}_			catch (Throwable ex) {_				statement = new Fail(ex)__			}_			runLeaf(statement, description, notifier)__		}_	};perform,the,same,logic,as,link,block,junit4class,runner,run,child,framework,method,run,notifier,except,that,tests,are,determined,to,be,em,ignored,em,by,link,is,test,method,ignored,framework,method;override,protected,void,run,child,framework,method,framework,method,run,notifier,notifier,description,description,describe,child,framework,method,if,is,test,method,ignored,framework,method,notifier,fire,test,ignored,description,else,statement,statement,try,statement,method,block,framework,method,catch,throwable,ex,statement,new,fail,ex,run,leaf,statement,description,notifier
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1328020251;Supports Spring's {@link Repeat &#064_Repeat} annotation by returning a_{@link SpringRepeat} statement initialized with the configured repeat_count or <code>1</code> if no repeat count is configured._@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Repeat repeatAnnotation = frameworkMethod.getAnnotation(Repeat.class)__		int repeat = (repeatAnnotation != null ? repeatAnnotation.value() : 1)__		return new SpringRepeat(next, frameworkMethod.getMethod(), repeat)__	};supports,spring,s,link,repeat,064,repeat,annotation,by,returning,a,link,spring,repeat,statement,initialized,with,the,configured,repeat,count,or,code,1,code,if,no,repeat,count,is,configured,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,repeat,repeat,annotation,framework,method,get,annotation,repeat,class,int,repeat,repeat,annotation,null,repeat,annotation,value,1,return,new,spring,repeat,next,framework,method,get,method,repeat
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1356735495;Supports Spring's {@link Repeat &#064_Repeat} annotation by returning a_{@link SpringRepeat} statement initialized with the configured repeat_count or {@code 1} if no repeat count is configured._@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Repeat repeatAnnotation = frameworkMethod.getAnnotation(Repeat.class)__		int repeat = (repeatAnnotation != null ? repeatAnnotation.value() : 1)__		return new SpringRepeat(next, frameworkMethod.getMethod(), repeat)__	};supports,spring,s,link,repeat,064,repeat,annotation,by,returning,a,link,spring,repeat,statement,initialized,with,the,configured,repeat,count,or,code,1,if,no,repeat,count,is,configured,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,repeat,repeat,annotation,framework,method,get,annotation,repeat,class,int,repeat,repeat,annotation,null,repeat,annotation,value,1,return,new,spring,repeat,next,framework,method,get,method,repeat
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1367163114;Supports Spring's {@link Repeat &#064_Repeat} annotation by returning a_{@link SpringRepeat} statement initialized with the configured repeat_count or {@code 1} if no repeat count is configured._@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Repeat repeatAnnotation = frameworkMethod.getAnnotation(Repeat.class)__		int repeat = (repeatAnnotation != null ? repeatAnnotation.value() : 1)__		return new SpringRepeat(next, frameworkMethod.getMethod(), repeat)__	};supports,spring,s,link,repeat,064,repeat,annotation,by,returning,a,link,spring,repeat,statement,initialized,with,the,configured,repeat,count,or,code,1,if,no,repeat,count,is,configured,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,repeat,repeat,annotation,framework,method,get,annotation,repeat,class,int,repeat,repeat,annotation,null,repeat,annotation,value,1,return,new,spring,repeat,next,framework,method,get,method,repeat
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1382920864;Supports Spring's {@link Repeat &#064_Repeat} annotation by returning a_{@link SpringRepeat} statement initialized with the configured repeat_count or {@code 1} if no repeat count is configured._@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Repeat repeatAnnotation = AnnotationUtils.getAnnotation(frameworkMethod.getMethod(), Repeat.class)__		int repeat = (repeatAnnotation != null ? repeatAnnotation.value() : 1)__		return new SpringRepeat(next, frameworkMethod.getMethod(), repeat)__	};supports,spring,s,link,repeat,064,repeat,annotation,by,returning,a,link,spring,repeat,statement,initialized,with,the,configured,repeat,count,or,code,1,if,no,repeat,count,is,configured,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,repeat,repeat,annotation,annotation,utils,get,annotation,framework,method,get,method,repeat,class,int,repeat,repeat,annotation,null,repeat,annotation,value,1,return,new,spring,repeat,next,framework,method,get,method,repeat
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1385499540;Supports Spring's {@link Repeat &#064_Repeat} annotation by returning a_{@link SpringRepeat} statement initialized with the configured repeat_count or {@code 1} if no repeat count is configured._@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Repeat repeatAnnotation = AnnotationUtils.getAnnotation(frameworkMethod.getMethod(), Repeat.class)__		int repeat = (repeatAnnotation != null ? repeatAnnotation.value() : 1)__		return new SpringRepeat(next, frameworkMethod.getMethod(), repeat)__	};supports,spring,s,link,repeat,064,repeat,annotation,by,returning,a,link,spring,repeat,statement,initialized,with,the,configured,repeat,count,or,code,1,if,no,repeat,count,is,configured,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,repeat,repeat,annotation,annotation,utils,get,annotation,framework,method,get,method,repeat,class,int,repeat,repeat,annotation,null,repeat,annotation,value,1,return,new,spring,repeat,next,framework,method,get,method,repeat
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1396960609;Supports Spring's {@link Repeat &#064_Repeat} annotation by returning a_{@link SpringRepeat} statement initialized with the configured repeat_count or {@code 1} if no repeat count is configured._@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Repeat repeatAnnotation = AnnotationUtils.getAnnotation(frameworkMethod.getMethod(), Repeat.class)__		int repeat = (repeatAnnotation != null ? repeatAnnotation.value() : 1)__		return new SpringRepeat(next, frameworkMethod.getMethod(), repeat)__	};supports,spring,s,link,repeat,064,repeat,annotation,by,returning,a,link,spring,repeat,statement,initialized,with,the,configured,repeat,count,or,code,1,if,no,repeat,count,is,configured,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,repeat,repeat,annotation,annotation,utils,get,annotation,framework,method,get,method,repeat,class,int,repeat,repeat,annotation,null,repeat,annotation,value,1,return,new,spring,repeat,next,framework,method,get,method,repeat
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1397082962;Supports Spring's {@link Repeat &#064_Repeat} annotation by returning a_{@link SpringRepeat} statement initialized with the configured repeat_count or {@code 1} if no repeat count is configured._@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Repeat repeatAnnotation = AnnotationUtils.getAnnotation(frameworkMethod.getMethod(), Repeat.class)__		int repeat = (repeatAnnotation != null ? repeatAnnotation.value() : 1)__		return new SpringRepeat(next, frameworkMethod.getMethod(), repeat)__	};supports,spring,s,link,repeat,064,repeat,annotation,by,returning,a,link,spring,repeat,statement,initialized,with,the,configured,repeat,count,or,code,1,if,no,repeat,count,is,configured,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,repeat,repeat,annotation,annotation,utils,get,annotation,framework,method,get,method,repeat,class,int,repeat,repeat,annotation,null,repeat,annotation,value,1,return,new,spring,repeat,next,framework,method,get,method,repeat
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1397147316;Supports Spring's {@link Repeat @Repeat} annotation by returning a_{@link SpringRepeat} statement initialized with the configured repeat_count or {@code 1} if no repeat count is configured._@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Repeat repeatAnnotation = AnnotationUtils.getAnnotation(frameworkMethod.getMethod(), Repeat.class)__		int repeat = (repeatAnnotation != null ? repeatAnnotation.value() : 1)__		return new SpringRepeat(next, frameworkMethod.getMethod(), repeat)__	};supports,spring,s,link,repeat,repeat,annotation,by,returning,a,link,spring,repeat,statement,initialized,with,the,configured,repeat,count,or,code,1,if,no,repeat,count,is,configured,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,repeat,repeat,annotation,annotation,utils,get,annotation,framework,method,get,method,repeat,class,int,repeat,repeat,annotation,null,repeat,annotation,value,1,return,new,spring,repeat,next,framework,method,get,method,repeat
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1403683825;Supports Spring's {@link Repeat @Repeat} annotation by returning a_{@link SpringRepeat} statement initialized with the configured repeat_count or {@code 1} if no repeat count is configured._@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Repeat repeatAnnotation = AnnotationUtils.getAnnotation(frameworkMethod.getMethod(), Repeat.class)__		int repeat = (repeatAnnotation != null ? repeatAnnotation.value() : 1)__		return new SpringRepeat(next, frameworkMethod.getMethod(), repeat)__	};supports,spring,s,link,repeat,repeat,annotation,by,returning,a,link,spring,repeat,statement,initialized,with,the,configured,repeat,count,or,code,1,if,no,repeat,count,is,configured,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,repeat,repeat,annotation,annotation,utils,get,annotation,framework,method,get,method,repeat,class,int,repeat,repeat,annotation,null,repeat,annotation,value,1,return,new,spring,repeat,next,framework,method,get,method,repeat
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1406220853;Supports Spring's {@link Repeat @Repeat} annotation by returning a_{@link SpringRepeat} statement initialized with the configured repeat_count or {@code 1} if no repeat count is configured._@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Repeat repeatAnnotation = AnnotationUtils.getAnnotation(frameworkMethod.getMethod(), Repeat.class)__		int repeat = (repeatAnnotation != null ? repeatAnnotation.value() : 1)__		return new SpringRepeat(next, frameworkMethod.getMethod(), repeat)__	};supports,spring,s,link,repeat,repeat,annotation,by,returning,a,link,spring,repeat,statement,initialized,with,the,configured,repeat,count,or,code,1,if,no,repeat,count,is,configured,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,repeat,repeat,annotation,annotation,utils,get,annotation,framework,method,get,method,repeat,class,int,repeat,repeat,annotation,null,repeat,annotation,value,1,return,new,spring,repeat,next,framework,method,get,method,repeat
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1413848647;Supports Spring's {@link Repeat @Repeat} annotation by returning a_{@link SpringRepeat} statement initialized with the configured repeat_count or {@code 1} if no repeat count is configured._@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Repeat repeatAnnotation = AnnotationUtils.getAnnotation(frameworkMethod.getMethod(), Repeat.class)__		int repeat = (repeatAnnotation != null ? repeatAnnotation.value() : 1)__		return new SpringRepeat(next, frameworkMethod.getMethod(), repeat)__	};supports,spring,s,link,repeat,repeat,annotation,by,returning,a,link,spring,repeat,statement,initialized,with,the,configured,repeat,count,or,code,1,if,no,repeat,count,is,configured,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,repeat,repeat,annotation,annotation,utils,get,annotation,framework,method,get,method,repeat,class,int,repeat,repeat,annotation,null,repeat,annotation,value,1,return,new,spring,repeat,next,framework,method,get,method,repeat
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1420908711;Supports Spring's {@link Repeat @Repeat} annotation by returning a_{@link SpringRepeat} statement initialized with the configured repeat_count or {@code 1} if no repeat count is configured._@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Repeat repeatAnnotation = AnnotationUtils.getAnnotation(frameworkMethod.getMethod(), Repeat.class)__		int repeat = (repeatAnnotation != null ? repeatAnnotation.value() : 1)__		return new SpringRepeat(next, frameworkMethod.getMethod(), repeat)__	};supports,spring,s,link,repeat,repeat,annotation,by,returning,a,link,spring,repeat,statement,initialized,with,the,configured,repeat,count,or,code,1,if,no,repeat,count,is,configured,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,repeat,repeat,annotation,annotation,utils,get,annotation,framework,method,get,method,repeat,class,int,repeat,repeat,annotation,null,repeat,annotation,value,1,return,new,spring,repeat,next,framework,method,get,method,repeat
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1431344362;Return a {@link Statement} that potentially repeats the execution of_the {@code next} statement._<p>Supports Spring's {@link Repeat @Repeat} annotation by returning a_{@link SpringRepeat} statement initialized with the configured repeat_count (if greater than {@code 1})_ otherwise, the supplied statement_is returned unmodified._@return either a {@link SpringRepeat} or the supplied {@link Statement}_as appropriate_@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Repeat repeatAnnotation = AnnotationUtils.getAnnotation(frameworkMethod.getMethod(), Repeat.class)__		int repeat = (repeatAnnotation != null ? repeatAnnotation.value() : 1)__		return (repeat > 1 ? new SpringRepeat(next, frameworkMethod.getMethod(), repeat) : next)__	};return,a,link,statement,that,potentially,repeats,the,execution,of,the,code,next,statement,p,supports,spring,s,link,repeat,repeat,annotation,by,returning,a,link,spring,repeat,statement,initialized,with,the,configured,repeat,count,if,greater,than,code,1,otherwise,the,supplied,statement,is,returned,unmodified,return,either,a,link,spring,repeat,or,the,supplied,link,statement,as,appropriate,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,repeat,repeat,annotation,annotation,utils,get,annotation,framework,method,get,method,repeat,class,int,repeat,repeat,annotation,null,repeat,annotation,value,1,return,repeat,1,new,spring,repeat,next,framework,method,get,method,repeat,next
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1431360825;Return a {@link Statement} that potentially repeats the execution of_the {@code next} statement._<p>Supports Spring's {@link Repeat @Repeat} annotation by returning a_{@link SpringRepeat} statement initialized with the configured repeat_count (if greater than {@code 1})_ otherwise, the supplied statement_is returned unmodified._@return either a {@link SpringRepeat} or the supplied {@link Statement}_as appropriate_@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Repeat repeatAnnotation = AnnotationUtils.getAnnotation(frameworkMethod.getMethod(), Repeat.class)__		int repeat = (repeatAnnotation != null ? repeatAnnotation.value() : 1)__		return (repeat > 1 ? new SpringRepeat(next, frameworkMethod.getMethod(), repeat) : next)__	};return,a,link,statement,that,potentially,repeats,the,execution,of,the,code,next,statement,p,supports,spring,s,link,repeat,repeat,annotation,by,returning,a,link,spring,repeat,statement,initialized,with,the,configured,repeat,count,if,greater,than,code,1,otherwise,the,supplied,statement,is,returned,unmodified,return,either,a,link,spring,repeat,or,the,supplied,link,statement,as,appropriate,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,repeat,repeat,annotation,annotation,utils,get,annotation,framework,method,get,method,repeat,class,int,repeat,repeat,annotation,null,repeat,annotation,value,1,return,repeat,1,new,spring,repeat,next,framework,method,get,method,repeat,next
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1431568199;Return a {@link Statement} that potentially repeats the execution of_the {@code next} statement._<p>Supports Spring's {@link Repeat @Repeat} annotation by returning a_{@link SpringRepeat} statement initialized with the configured repeat_count (if greater than {@code 1})_ otherwise, the supplied statement_is returned unmodified._@return either a {@link SpringRepeat} or the supplied {@link Statement}_as appropriate_@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Repeat repeatAnnotation = AnnotationUtils.getAnnotation(frameworkMethod.getMethod(), Repeat.class)__		int repeat = (repeatAnnotation != null ? repeatAnnotation.value() : 1)__		return (repeat > 1 ? new SpringRepeat(next, frameworkMethod.getMethod(), repeat) : next)__	};return,a,link,statement,that,potentially,repeats,the,execution,of,the,code,next,statement,p,supports,spring,s,link,repeat,repeat,annotation,by,returning,a,link,spring,repeat,statement,initialized,with,the,configured,repeat,count,if,greater,than,code,1,otherwise,the,supplied,statement,is,returned,unmodified,return,either,a,link,spring,repeat,or,the,supplied,link,statement,as,appropriate,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,repeat,repeat,annotation,annotation,utils,get,annotation,framework,method,get,method,repeat,class,int,repeat,repeat,annotation,null,repeat,annotation,value,1,return,repeat,1,new,spring,repeat,next,framework,method,get,method,repeat,next
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1431801000;Return a {@link Statement} that potentially repeats the execution of_the {@code next} statement._<p>Supports Spring's {@link Repeat @Repeat} annotation by returning a_{@code SpringRepeat} statement initialized with the configured repeat_count (if greater than {@code 1})_ otherwise, the supplied statement_is returned unmodified._@return either a {@code SpringRepeat} or the supplied {@code Statement}_as appropriate_@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Repeat repeatAnnotation = AnnotationUtils.getAnnotation(frameworkMethod.getMethod(), Repeat.class)__		int repeat = (repeatAnnotation != null ? repeatAnnotation.value() : 1)__		return (repeat > 1 ? new SpringRepeat(next, frameworkMethod.getMethod(), repeat) : next)__	};return,a,link,statement,that,potentially,repeats,the,execution,of,the,code,next,statement,p,supports,spring,s,link,repeat,repeat,annotation,by,returning,a,code,spring,repeat,statement,initialized,with,the,configured,repeat,count,if,greater,than,code,1,otherwise,the,supplied,statement,is,returned,unmodified,return,either,a,code,spring,repeat,or,the,supplied,code,statement,as,appropriate,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,repeat,repeat,annotation,annotation,utils,get,annotation,framework,method,get,method,repeat,class,int,repeat,repeat,annotation,null,repeat,annotation,value,1,return,repeat,1,new,spring,repeat,next,framework,method,get,method,repeat,next
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1431894269;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see TestAnnotationUtils#getRepeatCount(Method)_@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,test,annotation,utils,get,repeat,count,method,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,return,new,spring,repeat,next,framework,method,get,method
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1437749501;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see TestAnnotationUtils#getRepeatCount(Method)_@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,test,annotation,utils,get,repeat,count,method,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,return,new,spring,repeat,next,framework,method,get,method
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1437755059;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see TestAnnotationUtils#getRepeatCount(Method)_@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,test,annotation,utils,get,repeat,count,method,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,return,new,spring,repeat,next,framework,method,get,method
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1443464140;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see TestAnnotationUtils#getRepeatCount(Method)_@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,test,annotation,utils,get,repeat,count,method,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,return,new,spring,repeat,next,framework,method,get,method
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1450547039;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see TestAnnotationUtils#getRepeatCount(Method)_@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,test,annotation,utils,get,repeat,count,method,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,return,new,spring,repeat,next,framework,method,get,method
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1456610575;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see TestAnnotationUtils#getRepeatCount(Method)_@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,test,annotation,utils,get,repeat,count,method,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,return,new,spring,repeat,next,framework,method,get,method
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1468244735;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see TestAnnotationUtils#getRepeatCount(Method)_@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,test,annotation,utils,get,repeat,count,method,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,return,new,spring,repeat,next,framework,method,get,method
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1468334463;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see TestAnnotationUtils#getRepeatCount(Method)_@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,test,annotation,utils,get,repeat,count,method,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,return,new,spring,repeat,next,framework,method,get,method
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1495868221;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see TestAnnotationUtils#getRepeatCount(Method)_@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,test,annotation,utils,get,repeat,count,method,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,return,new,spring,repeat,next,framework,method,get,method
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1496955179;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see TestAnnotationUtils#getRepeatCount(Method)_@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,test,annotation,utils,get,repeat,count,method,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,return,new,spring,repeat,next,framework,method,get,method
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1498780456;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see TestAnnotationUtils#getRepeatCount(Method)_@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,test,annotation,utils,get,repeat,count,method,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,return,new,spring,repeat,next,framework,method,get,method
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1529005714;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see TestAnnotationUtils#getRepeatCount(Method)_@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,test,annotation,utils,get,repeat,count,method,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,return,new,spring,repeat,next,framework,method,get,method
SpringJUnit4ClassRunner -> protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1529012601;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see TestAnnotationUtils#getRepeatCount(Method)_@see SpringRepeat;protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,test,annotation,utils,get,repeat,count,method,see,spring,repeat;protected,statement,with,potential,repeat,framework,method,framework,method,object,test,instance,statement,next,return,new,spring,repeat,next,framework,method,get,method
SpringJUnit4ClassRunner -> @Nullable 	protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1495868221;Get the {@code exception} that the supplied {@linkplain FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._<p>Can be overridden by subclasses._@return the expected exception, or {@code null} if none was specified;@Nullable_	protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.expected() != Test.None.class ? test.expected() : null)__	};get,the,code,exception,that,the,supplied,linkplain,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,p,can,be,overridden,by,subclasses,return,the,expected,exception,or,code,null,if,none,was,specified;nullable,protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,expected,test,none,class,test,expected,null
SpringJUnit4ClassRunner -> @Nullable 	protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1496955179;Get the {@code exception} that the supplied {@linkplain FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._<p>Can be overridden by subclasses._@return the expected exception, or {@code null} if none was specified;@Nullable_	protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.expected() != Test.None.class ? test.expected() : null)__	};get,the,code,exception,that,the,supplied,linkplain,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,p,can,be,overridden,by,subclasses,return,the,expected,exception,or,code,null,if,none,was,specified;nullable,protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,expected,test,none,class,test,expected,null
SpringJUnit4ClassRunner -> @Nullable 	protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1498780456;Get the {@code exception} that the supplied {@linkplain FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._<p>Can be overridden by subclasses._@return the expected exception, or {@code null} if none was specified;@Nullable_	protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.expected() != Test.None.class ? test.expected() : null)__	};get,the,code,exception,that,the,supplied,linkplain,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,p,can,be,overridden,by,subclasses,return,the,expected,exception,or,code,null,if,none,was,specified;nullable,protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,expected,test,none,class,test,expected,null
SpringJUnit4ClassRunner -> @Nullable 	protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1529005714;Get the {@code exception} that the supplied {@linkplain FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._<p>Can be overridden by subclasses._@return the expected exception, or {@code null} if none was specified;@Nullable_	protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.expected() != Test.None.class ? test.expected() : null)__	};get,the,code,exception,that,the,supplied,linkplain,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,p,can,be,overridden,by,subclasses,return,the,expected,exception,or,code,null,if,none,was,specified;nullable,protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,expected,test,none,class,test,expected,null
SpringJUnit4ClassRunner -> @Nullable 	protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod);1529012601;Get the {@code exception} that the supplied {@linkplain FrameworkMethod_test method} is expected to throw._<p>Supports JUnit's {@link Test#expected() @Test(expected=...)} annotation._<p>Can be overridden by subclasses._@return the expected exception, or {@code null} if none was specified;@Nullable_	protected Class<? extends Throwable> getExpectedException(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.expected() != Test.None.class ? test.expected() : null)__	};get,the,code,exception,that,the,supplied,linkplain,framework,method,test,method,is,expected,to,throw,p,supports,junit,s,link,test,expected,test,expected,annotation,p,can,be,overridden,by,subclasses,return,the,expected,exception,or,code,null,if,none,was,specified;nullable,protected,class,extends,throwable,get,expected,exception,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,expected,test,none,class,test,expected,null
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1328020251;Invokes JUnit 4.7's private <code>withRules()</code> method using_reflection. This is necessary for backwards compatibility with the JUnit_4.5 and 4.6 implementations of {@link BlockJUnit4ClassRunner}.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Method withRulesMethod = ReflectionUtils.findMethod(getClass(), "withRules", FrameworkMethod.class,_			Object.class, Statement.class)__		if (withRulesMethod != null) {_			_			_			ReflectionUtils.makeAccessible(withRulesMethod)__			statement = (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance,_				statement)__		}_		return statement__	};invokes,junit,4,7,s,private,code,with,rules,code,method,using,reflection,this,is,necessary,for,backwards,compatibility,with,the,junit,4,5,and,4,6,implementations,of,link,block,junit4class,runner;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,method,with,rules,method,reflection,utils,find,method,get,class,with,rules,framework,method,class,object,class,statement,class,if,with,rules,method,null,reflection,utils,make,accessible,with,rules,method,statement,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1356735495;Invokes JUnit 4.7's private {@code withRules()} method using_reflection. This is necessary for backwards compatibility with the JUnit_4.5 and 4.6 implementations of {@link BlockJUnit4ClassRunner}.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Method withRulesMethod = ReflectionUtils.findMethod(getClass(), "withRules", FrameworkMethod.class,_			Object.class, Statement.class)__		if (withRulesMethod != null) {_			_			_			ReflectionUtils.makeAccessible(withRulesMethod)__			statement = (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance,_				statement)__		}_		return statement__	};invokes,junit,4,7,s,private,code,with,rules,method,using,reflection,this,is,necessary,for,backwards,compatibility,with,the,junit,4,5,and,4,6,implementations,of,link,block,junit4class,runner;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,method,with,rules,method,reflection,utils,find,method,get,class,with,rules,framework,method,class,object,class,statement,class,if,with,rules,method,null,reflection,utils,make,accessible,with,rules,method,statement,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1367163114;Invokes JUnit 4.7's private {@code withRules()} method using_reflection. This is necessary for backwards compatibility with the JUnit_4.5 and 4.6 implementations of {@link BlockJUnit4ClassRunner}.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Method withRulesMethod = ReflectionUtils.findMethod(getClass(), "withRules", FrameworkMethod.class,_			Object.class, Statement.class)__		if (withRulesMethod != null) {_			_			_			ReflectionUtils.makeAccessible(withRulesMethod)__			statement = (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance,_				statement)__		}_		return statement__	};invokes,junit,4,7,s,private,code,with,rules,method,using,reflection,this,is,necessary,for,backwards,compatibility,with,the,junit,4,5,and,4,6,implementations,of,link,block,junit4class,runner;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,method,with,rules,method,reflection,utils,find,method,get,class,with,rules,framework,method,class,object,class,statement,class,if,with,rules,method,null,reflection,utils,make,accessible,with,rules,method,statement,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1382920864;Invokes JUnit 4.7's private {@code withRules()} method using_reflection. This is necessary for backwards compatibility with the JUnit_4.5 and 4.6 implementations of {@link BlockJUnit4ClassRunner}.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Method withRulesMethod = ReflectionUtils.findMethod(getClass(), "withRules", FrameworkMethod.class,_			Object.class, Statement.class)__		if (withRulesMethod != null) {_			_			_			ReflectionUtils.makeAccessible(withRulesMethod)__			statement = (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance,_				statement)__		}_		return statement__	};invokes,junit,4,7,s,private,code,with,rules,method,using,reflection,this,is,necessary,for,backwards,compatibility,with,the,junit,4,5,and,4,6,implementations,of,link,block,junit4class,runner;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,method,with,rules,method,reflection,utils,find,method,get,class,with,rules,framework,method,class,object,class,statement,class,if,with,rules,method,null,reflection,utils,make,accessible,with,rules,method,statement,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1385499540;Invokes JUnit 4.7's private {@code withRules()} method using_reflection. This is necessary for backwards compatibility with the JUnit_4.5 and 4.6 implementations of {@link BlockJUnit4ClassRunner}.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Method withRulesMethod = ReflectionUtils.findMethod(getClass(), "withRules", FrameworkMethod.class,_			Object.class, Statement.class)__		if (withRulesMethod != null) {_			_			_			ReflectionUtils.makeAccessible(withRulesMethod)__			statement = (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance,_				statement)__		}_		return statement__	};invokes,junit,4,7,s,private,code,with,rules,method,using,reflection,this,is,necessary,for,backwards,compatibility,with,the,junit,4,5,and,4,6,implementations,of,link,block,junit4class,runner;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,method,with,rules,method,reflection,utils,find,method,get,class,with,rules,framework,method,class,object,class,statement,class,if,with,rules,method,null,reflection,utils,make,accessible,with,rules,method,statement,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1396960609;Invokes JUnit 4.7's private {@code withRules()} method using_reflection. This is necessary for backwards compatibility with the JUnit_4.5 and 4.6 implementations of {@link BlockJUnit4ClassRunner}.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Method withRulesMethod = ReflectionUtils.findMethod(getClass(), "withRules", FrameworkMethod.class,_			Object.class, Statement.class)__		if (withRulesMethod != null) {_			_			_			ReflectionUtils.makeAccessible(withRulesMethod)__			statement = (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance,_				statement)__		}_		return statement__	};invokes,junit,4,7,s,private,code,with,rules,method,using,reflection,this,is,necessary,for,backwards,compatibility,with,the,junit,4,5,and,4,6,implementations,of,link,block,junit4class,runner;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,method,with,rules,method,reflection,utils,find,method,get,class,with,rules,framework,method,class,object,class,statement,class,if,with,rules,method,null,reflection,utils,make,accessible,with,rules,method,statement,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1397082962;Invokes JUnit 4.7's private {@code withRules()} method using_reflection. This is necessary for backwards compatibility with the JUnit_4.5 and 4.6 implementations of {@link BlockJUnit4ClassRunner}.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Method withRulesMethod = ReflectionUtils.findMethod(getClass(), "withRules", FrameworkMethod.class,_			Object.class, Statement.class)__		if (withRulesMethod != null) {_			_			_			ReflectionUtils.makeAccessible(withRulesMethod)__			statement = (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance,_				statement)__		}_		return statement__	};invokes,junit,4,7,s,private,code,with,rules,method,using,reflection,this,is,necessary,for,backwards,compatibility,with,the,junit,4,5,and,4,6,implementations,of,link,block,junit4class,runner;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,method,with,rules,method,reflection,utils,find,method,get,class,with,rules,framework,method,class,object,class,statement,class,if,with,rules,method,null,reflection,utils,make,accessible,with,rules,method,statement,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1397147316;Invokes JUnit 4.7's private {@code withRules()} method using reflection._<p>This is necessary for backwards compatibility with the JUnit 4.5 and_4.6 implementations of {@link BlockJUnit4ClassRunner}.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Method withRulesMethod = ReflectionUtils.findMethod(getClass(), "withRules", FrameworkMethod.class,_			Object.class, Statement.class)__		if (withRulesMethod != null) {_			_			_			ReflectionUtils.makeAccessible(withRulesMethod)__			statement = (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance,_				statement)__		}_		return statement__	};invokes,junit,4,7,s,private,code,with,rules,method,using,reflection,p,this,is,necessary,for,backwards,compatibility,with,the,junit,4,5,and,4,6,implementations,of,link,block,junit4class,runner;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,method,with,rules,method,reflection,utils,find,method,get,class,with,rules,framework,method,class,object,class,statement,class,if,with,rules,method,null,reflection,utils,make,accessible,with,rules,method,statement,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement,return,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1403683825;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,return,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1406220853;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,return,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1413848647;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,return,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1420908711;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,return,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1431344362;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,return,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1431360825;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,return,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1431568199;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,return,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1431801000;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,return,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1431894269;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,return,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1437749501;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,return,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1437755059;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,return,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1443464140;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,return,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1450547039;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,return,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1456610575;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,return,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1468244735;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,return,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1468334463;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,return,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1495868221;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return (Statement) ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,return,statement,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1496955179;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Object result = ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__		Assert.state(result instanceof Statement, "withRules mismatch")__		return (Statement) result__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,object,result,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement,assert,state,result,instanceof,statement,with,rules,mismatch,return,statement,result
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1498780456;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Object result = ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__		Assert.state(result instanceof Statement, "withRules mismatch")__		return (Statement) result__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,object,result,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement,assert,state,result,instanceof,statement,with,rules,mismatch,return,statement,result
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1529005714;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Object result = ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__		Assert.state(result instanceof Statement, "withRules mismatch")__		return (Statement) result__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,object,result,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement,assert,state,result,instanceof,statement,with,rules,mismatch,return,statement,result
SpringJUnit4ClassRunner -> private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1529012601;Invoke JUnit's private {@code withRules()} method using reflection.;private Statement withRulesReflectively(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Object result = ReflectionUtils.invokeMethod(withRulesMethod, this, frameworkMethod, testInstance, statement)__		Assert.state(result instanceof Statement, "withRules mismatch")__		return (Statement) result__	};invoke,junit,s,private,code,with,rules,method,using,reflection;private,statement,with,rules,reflectively,framework,method,framework,method,object,test,instance,statement,statement,object,result,reflection,utils,invoke,method,with,rules,method,this,framework,method,test,instance,statement,assert,state,result,instanceof,statement,with,rules,mismatch,return,statement,result
SpringJUnit4ClassRunner -> protected Statement withAfterTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1468244735;Wrap the supplied {@link Statement} with a {@code RunAfterTestExecutionCallbacks}_statement, thus preserving the default functionality while adding support for the_Spring TestContext Framework._@see RunAfterTestExecutionCallbacks;protected Statement withAfterTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return new RunAfterTestExecutionCallbacks(statement, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,execution,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,execution,callbacks;protected,statement,with,after,test,execution,callbacks,framework,method,framework,method,object,test,instance,statement,statement,return,new,run,after,test,execution,callbacks,statement,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> protected Statement withAfterTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1468334463;Wrap the supplied {@link Statement} with a {@code RunAfterTestExecutionCallbacks}_statement, thus preserving the default functionality while adding support for the_Spring TestContext Framework._@see RunAfterTestExecutionCallbacks;protected Statement withAfterTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return new RunAfterTestExecutionCallbacks(statement, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,execution,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,execution,callbacks;protected,statement,with,after,test,execution,callbacks,framework,method,framework,method,object,test,instance,statement,statement,return,new,run,after,test,execution,callbacks,statement,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> protected Statement withAfterTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1495868221;Wrap the supplied {@link Statement} with a {@code RunAfterTestExecutionCallbacks}_statement, thus preserving the default functionality while adding support for the_Spring TestContext Framework._@see RunAfterTestExecutionCallbacks;protected Statement withAfterTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return new RunAfterTestExecutionCallbacks(statement, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,execution,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,execution,callbacks;protected,statement,with,after,test,execution,callbacks,framework,method,framework,method,object,test,instance,statement,statement,return,new,run,after,test,execution,callbacks,statement,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> protected Statement withAfterTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1496955179;Wrap the supplied {@link Statement} with a {@code RunAfterTestExecutionCallbacks}_statement, thus preserving the default functionality while adding support for the_Spring TestContext Framework._@see RunAfterTestExecutionCallbacks;protected Statement withAfterTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return new RunAfterTestExecutionCallbacks(statement, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,execution,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,execution,callbacks;protected,statement,with,after,test,execution,callbacks,framework,method,framework,method,object,test,instance,statement,statement,return,new,run,after,test,execution,callbacks,statement,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> protected Statement withAfterTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1498780456;Wrap the supplied {@link Statement} with a {@code RunAfterTestExecutionCallbacks}_statement, thus preserving the default functionality while adding support for the_Spring TestContext Framework._@see RunAfterTestExecutionCallbacks;protected Statement withAfterTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return new RunAfterTestExecutionCallbacks(statement, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,execution,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,execution,callbacks;protected,statement,with,after,test,execution,callbacks,framework,method,framework,method,object,test,instance,statement,statement,return,new,run,after,test,execution,callbacks,statement,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> protected Statement withAfterTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1529005714;Wrap the supplied {@link Statement} with a {@code RunAfterTestExecutionCallbacks}_statement, thus preserving the default functionality while adding support for the_Spring TestContext Framework._@see RunAfterTestExecutionCallbacks;protected Statement withAfterTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return new RunAfterTestExecutionCallbacks(statement, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,execution,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,execution,callbacks;protected,statement,with,after,test,execution,callbacks,framework,method,framework,method,object,test,instance,statement,statement,return,new,run,after,test,execution,callbacks,statement,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> protected Statement withAfterTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1529012601;Wrap the supplied {@link Statement} with a {@code RunAfterTestExecutionCallbacks}_statement, thus preserving the default functionality while adding support for the_Spring TestContext Framework._@see RunAfterTestExecutionCallbacks;protected Statement withAfterTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return new RunAfterTestExecutionCallbacks(statement, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,execution,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,execution,callbacks;protected,statement,with,after,test,execution,callbacks,framework,method,framework,method,object,test,instance,statement,statement,return,new,run,after,test,execution,callbacks,statement,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1328020251;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1356735495;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1367163114;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1382920864;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1385499540;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1396960609;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1397082962;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1397147316;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1403683825;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1406220853;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1413848647;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1420908711;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1431344362;Wrap the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1431360825;Wrap the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1431568199;Wrap the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1431801000;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1431894269;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1437749501;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1437755059;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_				getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1443464140;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_				getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1450547039;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_				getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1456610575;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(),_				getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1468244735;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1468334463;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1495868221;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1496955179;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1498780456;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1529005714;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1529012601;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunAfterTestMethodCallbacks;@Override_	protected Statement withAfters(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitAfters = super.withAfters(frameworkMethod, testInstance, statement)__		return new RunAfterTestMethodCallbacks(junitAfters, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,method,callbacks;override,protected,statement,with,afters,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,afters,super,with,afters,framework,method,test,instance,statement,return,new,run,after,test,method,callbacks,junit,afters,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1328020251;Check whether the test is enabled in the first place. This prevents_classes with a non-matching <code>&#064_IfProfileValue</code> annotation_from running altogether, even skipping the execution of_<code>prepareTestInstance()</code> <code>TestExecutionListener</code>_methods._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,first,place,this,prevents,classes,with,a,non,matching,code,064,if,profile,value,code,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,code,code,test,execution,listener,code,methods,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1356735495;Check whether the test is enabled in the first place. This prevents_classes with a non-matching {@code &#064_IfProfileValue} annotation_from running altogether, even skipping the execution of_{@code prepareTestInstance()} {@code TestExecutionListener}_methods._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,first,place,this,prevents,classes,with,a,non,matching,code,064,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,code,test,execution,listener,methods,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1367163114;Check whether the test is enabled in the first place. This prevents_classes with a non-matching {@code &#064_IfProfileValue} annotation_from running altogether, even skipping the execution of_{@code prepareTestInstance()} {@code TestExecutionListener}_methods._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,first,place,this,prevents,classes,with,a,non,matching,code,064,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,code,test,execution,listener,methods,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1382920864;Check whether the test is enabled in the first place. This prevents_classes with a non-matching {@code &#064_IfProfileValue} annotation_from running altogether, even skipping the execution of_{@code prepareTestInstance()} {@code TestExecutionListener}_methods._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,first,place,this,prevents,classes,with,a,non,matching,code,064,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,code,test,execution,listener,methods,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1385499540;Check whether the test is enabled in the first place. This prevents_classes with a non-matching {@code &#064_IfProfileValue} annotation_from running altogether, even skipping the execution of_{@code prepareTestInstance()} {@code TestExecutionListener}_methods._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,first,place,this,prevents,classes,with,a,non,matching,code,064,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,code,test,execution,listener,methods,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1396960609;Check whether the test is enabled in the first place. This prevents_classes with a non-matching {@code @IfProfileValue} annotation_from running altogether, even skipping the execution of_{@code prepareTestInstance()} {@code TestExecutionListener}_methods._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,first,place,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,code,test,execution,listener,methods,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1397082962;Check whether the test is enabled in the first place. This prevents_classes with a non-matching {@code @IfProfileValue} annotation_from running altogether, even skipping the execution of_{@code prepareTestInstance()} {@code TestExecutionListener}_methods._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,first,place,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,code,test,execution,listener,methods,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1397147316;Check whether the test is enabled in the first place. This prevents_classes with a non-matching {@code @IfProfileValue} annotation from_running altogether, even skipping the execution of_{@code prepareTestInstance()} {@code TestExecutionListener} methods._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,first,place,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,code,test,execution,listener,methods,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1403683825;Check whether the test is enabled in the first place. This prevents_classes with a non-matching {@code @IfProfileValue} annotation from_running altogether, even skipping the execution of_{@code prepareTestInstance()} {@code TestExecutionListener} methods._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,first,place,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,code,test,execution,listener,methods,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1406220853;Check whether the test is enabled in the first place. This prevents_classes with a non-matching {@code @IfProfileValue} annotation from_running altogether, even skipping the execution of_{@code prepareTestInstance()} {@code TestExecutionListener} methods._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,first,place,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,code,test,execution,listener,methods,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1413848647;Check whether the test is enabled in the first place. This prevents_classes with a non-matching {@code @IfProfileValue} annotation from_running altogether, even skipping the execution of_{@code prepareTestInstance()} {@code TestExecutionListener} methods._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,first,place,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,code,test,execution,listener,methods,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1420908711;Check whether the test is enabled in the first place. This prevents_classes with a non-matching {@code @IfProfileValue} annotation from_running altogether, even skipping the execution of_{@code prepareTestInstance()} {@code TestExecutionListener} methods._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,first,place,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,code,test,execution,listener,methods,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1431344362;Check whether the test is enabled in the current execution environment._<p>This prevents classes with a non-matching {@code @IfProfileValue}_annotation from running altogether, even skipping the execution of_{@code prepareTestInstance()} methods in {@code TestExecutionListeners}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,current,execution,environment,p,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1431360825;Check whether the test is enabled in the current execution environment._<p>This prevents classes with a non-matching {@code @IfProfileValue}_annotation from running altogether, even skipping the execution of_{@code prepareTestInstance()} methods in {@code TestExecutionListeners}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,current,execution,environment,p,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1431568199;Check whether the test is enabled in the current execution environment._<p>This prevents classes with a non-matching {@code @IfProfileValue}_annotation from running altogether, even skipping the execution of_{@code prepareTestInstance()} methods in {@code TestExecutionListeners}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,current,execution,environment,p,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1431801000;Check whether the test is enabled in the current execution environment._<p>This prevents classes with a non-matching {@code @IfProfileValue}_annotation from running altogether, even skipping the execution of_{@code prepareTestInstance()} methods in {@code TestExecutionListeners}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,current,execution,environment,p,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1431894269;Check whether the test is enabled in the current execution environment._<p>This prevents classes with a non-matching {@code @IfProfileValue}_annotation from running altogether, even skipping the execution of_{@code prepareTestInstance()} methods in {@code TestExecutionListeners}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,current,execution,environment,p,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1437749501;Check whether the test is enabled in the current execution environment._<p>This prevents classes with a non-matching {@code @IfProfileValue}_annotation from running altogether, even skipping the execution of_{@code prepareTestInstance()} methods in {@code TestExecutionListeners}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,current,execution,environment,p,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1437755059;Check whether the test is enabled in the current execution environment._<p>This prevents classes with a non-matching {@code @IfProfileValue}_annotation from running altogether, even skipping the execution of_{@code prepareTestInstance()} methods in {@code TestExecutionListeners}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,current,execution,environment,p,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1443464140;Check whether the test is enabled in the current execution environment._<p>This prevents classes with a non-matching {@code @IfProfileValue}_annotation from running altogether, even skipping the execution of_{@code prepareTestInstance()} methods in {@code TestExecutionListeners}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,current,execution,environment,p,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1450547039;Check whether the test is enabled in the current execution environment._<p>This prevents classes with a non-matching {@code @IfProfileValue}_annotation from running altogether, even skipping the execution of_{@code prepareTestInstance()} methods in {@code TestExecutionListeners}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,current,execution,environment,p,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1456610575;Check whether the test is enabled in the current execution environment._<p>This prevents classes with a non-matching {@code @IfProfileValue}_annotation from running altogether, even skipping the execution of_{@code prepareTestInstance()} methods in {@code TestExecutionListeners}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,current,execution,environment,p,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1468244735;Check whether the test is enabled in the current execution environment._<p>This prevents classes with a non-matching {@code @IfProfileValue}_annotation from running altogether, even skipping the execution of_{@code prepareTestInstance()} methods in {@code TestExecutionListeners}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,current,execution,environment,p,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1468334463;Check whether the test is enabled in the current execution environment._<p>This prevents classes with a non-matching {@code @IfProfileValue}_annotation from running altogether, even skipping the execution of_{@code prepareTestInstance()} methods in {@code TestExecutionListeners}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,current,execution,environment,p,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1495868221;Check whether the test is enabled in the current execution environment._<p>This prevents classes with a non-matching {@code @IfProfileValue}_annotation from running altogether, even skipping the execution of_{@code prepareTestInstance()} methods in {@code TestExecutionListeners}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,current,execution,environment,p,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1496955179;Check whether the test is enabled in the current execution environment._<p>This prevents classes with a non-matching {@code @IfProfileValue}_annotation from running altogether, even skipping the execution of_{@code prepareTestInstance()} methods in {@code TestExecutionListeners}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,current,execution,environment,p,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1498780456;Check whether the test is enabled in the current execution environment._<p>This prevents classes with a non-matching {@code @IfProfileValue}_annotation from running altogether, even skipping the execution of_{@code prepareTestInstance()} methods in {@code TestExecutionListeners}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,current,execution,environment,p,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1529005714;Check whether the test is enabled in the current execution environment._<p>This prevents classes with a non-matching {@code @IfProfileValue}_annotation from running altogether, even skipping the execution of_{@code prepareTestInstance()} methods in {@code TestExecutionListeners}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,current,execution,environment,p,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> @Override 	public void run(RunNotifier notifier);1529012601;Check whether the test is enabled in the current execution environment._<p>This prevents classes with a non-matching {@code @IfProfileValue}_annotation from running altogether, even skipping the execution of_{@code prepareTestInstance()} methods in {@code TestExecutionListeners}._@see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)_@see org.springframework.test.annotation.IfProfileValue_@see org.springframework.test.context.TestExecutionListener;@Override_	public void run(RunNotifier notifier) {_		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {_			notifier.fireTestIgnored(getDescription())__			return__		}_		super.run(notifier)__	};check,whether,the,test,is,enabled,in,the,current,execution,environment,p,this,prevents,classes,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,see,profile,value,utils,is,test,enabled,in,this,environment,class,see,org,springframework,test,annotation,if,profile,value,see,org,springframework,test,context,test,execution,listener;override,public,void,run,run,notifier,notifier,if,profile,value,utils,is,test,enabled,in,this,environment,get,test,class,get,java,class,notifier,fire,test,ignored,get,description,return,super,run,notifier
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1328020251;Retrieves the configured JUnit <code>timeout</code> from the {@link Test_&#064_Test} annotation on the supplied {@link FrameworkMethod test method}._@return the timeout, or <code>0</code> if none was specified.;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		return (testAnnotation != null && testAnnotation.timeout() > 0 ? testAnnotation.timeout() : 0)__	};retrieves,the,configured,junit,code,timeout,code,from,the,link,test,064,test,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,code,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,return,test,annotation,null,test,annotation,timeout,0,test,annotation,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1356735495;Retrieves the configured JUnit {@code timeout} from the {@link Test_&#064_Test} annotation on the supplied {@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		return (testAnnotation != null && testAnnotation.timeout() > 0 ? testAnnotation.timeout() : 0)__	};retrieves,the,configured,junit,code,timeout,from,the,link,test,064,test,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,return,test,annotation,null,test,annotation,timeout,0,test,annotation,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1367163114;Retrieves the configured JUnit {@code timeout} from the {@link Test_&#064_Test} annotation on the supplied {@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		return (testAnnotation != null && testAnnotation.timeout() > 0 ? testAnnotation.timeout() : 0)__	};retrieves,the,configured,junit,code,timeout,from,the,link,test,064,test,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,return,test,annotation,null,test,annotation,timeout,0,test,annotation,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1382920864;Retrieves the configured JUnit {@code timeout} from the {@link Test_&#064_Test} annotation on the supplied {@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		return (testAnnotation != null && testAnnotation.timeout() > 0 ? testAnnotation.timeout() : 0)__	};retrieves,the,configured,junit,code,timeout,from,the,link,test,064,test,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,return,test,annotation,null,test,annotation,timeout,0,test,annotation,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1385499540;Retrieves the configured JUnit {@code timeout} from the {@link Test_&#064_Test} annotation on the supplied {@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		return (testAnnotation != null && testAnnotation.timeout() > 0 ? testAnnotation.timeout() : 0)__	};retrieves,the,configured,junit,code,timeout,from,the,link,test,064,test,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,return,test,annotation,null,test,annotation,timeout,0,test,annotation,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1396960609;Retrieves the configured JUnit {@code timeout} from the {@link Test_&#064_Test} annotation on the supplied {@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		return (testAnnotation != null && testAnnotation.timeout() > 0 ? testAnnotation.timeout() : 0)__	};retrieves,the,configured,junit,code,timeout,from,the,link,test,064,test,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,return,test,annotation,null,test,annotation,timeout,0,test,annotation,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1397082962;Retrieves the configured JUnit {@code timeout} from the {@link Test_&#064_Test} annotation on the supplied {@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		return (testAnnotation != null && testAnnotation.timeout() > 0 ? testAnnotation.timeout() : 0)__	};retrieves,the,configured,junit,code,timeout,from,the,link,test,064,test,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,return,test,annotation,null,test,annotation,timeout,0,test,annotation,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1397147316;Retrieves the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		return (testAnnotation != null && testAnnotation.timeout() > 0 ? testAnnotation.timeout() : 0)__	};retrieves,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,return,test,annotation,null,test,annotation,timeout,0,test,annotation,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1403683825;Retrieves the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		return (testAnnotation != null && testAnnotation.timeout() > 0 ? testAnnotation.timeout() : 0)__	};retrieves,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,return,test,annotation,null,test,annotation,timeout,0,test,annotation,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1406220853;Retrieves the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		return (testAnnotation != null && testAnnotation.timeout() > 0 ? testAnnotation.timeout() : 0)__	};retrieves,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,return,test,annotation,null,test,annotation,timeout,0,test,annotation,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1413848647;Retrieves the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		return (testAnnotation != null && testAnnotation.timeout() > 0 ? testAnnotation.timeout() : 0)__	};retrieves,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,return,test,annotation,null,test,annotation,timeout,0,test,annotation,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1420908711;Retrieves the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@link FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified.;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		return (testAnnotation != null && testAnnotation.timeout() > 0 ? testAnnotation.timeout() : 0)__	};retrieves,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,link,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,return,test,annotation,null,test,annotation,timeout,0,test,annotation,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1431344362;Retrieve the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		return (testAnnotation != null && testAnnotation.timeout() > 0 ? testAnnotation.timeout() : 0)__	};retrieve,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,return,test,annotation,null,test,annotation,timeout,0,test,annotation,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1431360825;Retrieve the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		return (testAnnotation != null && testAnnotation.timeout() > 0 ? testAnnotation.timeout() : 0)__	};retrieve,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,return,test,annotation,null,test,annotation,timeout,0,test,annotation,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1431568199;Retrieve the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		return (testAnnotation != null && testAnnotation.timeout() > 0 ? testAnnotation.timeout() : 0)__	};retrieve,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,return,test,annotation,null,test,annotation,timeout,0,test,annotation,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1431801000;Retrieve the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test testAnnotation = frameworkMethod.getAnnotation(Test.class)__		return (testAnnotation != null && testAnnotation.timeout() > 0 ? testAnnotation.timeout() : 0)__	};retrieve,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,annotation,framework,method,get,annotation,test,class,return,test,annotation,null,test,annotation,timeout,0,test,annotation,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1431894269;Retrieve the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return ((test != null) && (test.timeout() > 0) ? test.timeout() : 0)__	};retrieve,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,timeout,0,test,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1437749501;Retrieve the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return ((test != null) && (test.timeout() > 0) ? test.timeout() : 0)__	};retrieve,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,timeout,0,test,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1437755059;Retrieve the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.timeout() > 0 ? test.timeout() : 0)__	};retrieve,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,timeout,0,test,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1443464140;Retrieve the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.timeout() > 0 ? test.timeout() : 0)__	};retrieve,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,timeout,0,test,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1450547039;Retrieve the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.timeout() > 0 ? test.timeout() : 0)__	};retrieve,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,timeout,0,test,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1456610575;Retrieve the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.timeout() > 0 ? test.timeout() : 0)__	};retrieve,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,timeout,0,test,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1468244735;Retrieve the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.timeout() > 0 ? test.timeout() : 0)__	};retrieve,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,timeout,0,test,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1468334463;Retrieve the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.timeout() > 0 ? test.timeout() : 0)__	};retrieve,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,timeout,0,test,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1495868221;Retrieve the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.timeout() > 0 ? test.timeout() : 0)__	};retrieve,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,timeout,0,test,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1496955179;Retrieve the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.timeout() > 0 ? test.timeout() : 0)__	};retrieve,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,timeout,0,test,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1498780456;Retrieve the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.timeout() > 0 ? test.timeout() : 0)__	};retrieve,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,timeout,0,test,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1529005714;Retrieve the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.timeout() > 0 ? test.timeout() : 0)__	};retrieve,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,timeout,0,test,timeout,0
SpringJUnit4ClassRunner -> protected long getJUnitTimeout(FrameworkMethod frameworkMethod);1529012601;Retrieve the configured JUnit {@code timeout} from the {@link Test @Test}_annotation on the supplied {@linkplain FrameworkMethod test method}._@return the timeout, or {@code 0} if none was specified;protected long getJUnitTimeout(FrameworkMethod frameworkMethod) {_		Test test = frameworkMethod.getAnnotation(Test.class)__		return (test != null && test.timeout() > 0 ? test.timeout() : 0)__	};retrieve,the,configured,junit,code,timeout,from,the,link,test,test,annotation,on,the,supplied,linkplain,framework,method,test,method,return,the,timeout,or,code,0,if,none,was,specified;protected,long,get,junit,timeout,framework,method,framework,method,test,test,framework,method,get,annotation,test,class,return,test,null,test,timeout,0,test,timeout,0
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1328020251;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1356735495;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1367163114;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1382920864;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1385499540;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1396960609;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1397082962;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1397147316;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1403683825;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1406220853;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1413848647;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1420908711;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1431344362;Wrap the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1431360825;Wrap the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1431568199;Wrap the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1431801000;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1431894269;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1437749501;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_			getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1437755059;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_				getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1443464140;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_				getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1450547039;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_				getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1456610575;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(),_				getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1468244735;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1468334463;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1495868221;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1496955179;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1498780456;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1529005714;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1529012601;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestMethodCallbacks} statement, thus preserving the_default functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestMethodCallbacks;@Override_	protected Statement withBefores(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		Statement junitBefores = super.withBefores(frameworkMethod, testInstance, statement)__		return new RunBeforeTestMethodCallbacks(junitBefores, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,method,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,method,callbacks;override,protected,statement,with,befores,framework,method,framework,method,object,test,instance,statement,statement,statement,junit,befores,super,with,befores,framework,method,test,instance,statement,return,new,run,before,test,method,callbacks,junit,befores,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> protected Statement withBeforeTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1468244735;Wrap the supplied {@link Statement} with a {@code RunBeforeTestExecutionCallbacks}_statement, thus preserving the default functionality while adding support for the_Spring TestContext Framework._@see RunBeforeTestExecutionCallbacks;protected Statement withBeforeTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return new RunBeforeTestExecutionCallbacks(statement, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,execution,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,execution,callbacks;protected,statement,with,before,test,execution,callbacks,framework,method,framework,method,object,test,instance,statement,statement,return,new,run,before,test,execution,callbacks,statement,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> protected Statement withBeforeTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1468334463;Wrap the supplied {@link Statement} with a {@code RunBeforeTestExecutionCallbacks}_statement, thus preserving the default functionality while adding support for the_Spring TestContext Framework._@see RunBeforeTestExecutionCallbacks;protected Statement withBeforeTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return new RunBeforeTestExecutionCallbacks(statement, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,execution,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,execution,callbacks;protected,statement,with,before,test,execution,callbacks,framework,method,framework,method,object,test,instance,statement,statement,return,new,run,before,test,execution,callbacks,statement,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> protected Statement withBeforeTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1495868221;Wrap the supplied {@link Statement} with a {@code RunBeforeTestExecutionCallbacks}_statement, thus preserving the default functionality while adding support for the_Spring TestContext Framework._@see RunBeforeTestExecutionCallbacks;protected Statement withBeforeTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return new RunBeforeTestExecutionCallbacks(statement, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,execution,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,execution,callbacks;protected,statement,with,before,test,execution,callbacks,framework,method,framework,method,object,test,instance,statement,statement,return,new,run,before,test,execution,callbacks,statement,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> protected Statement withBeforeTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1496955179;Wrap the supplied {@link Statement} with a {@code RunBeforeTestExecutionCallbacks}_statement, thus preserving the default functionality while adding support for the_Spring TestContext Framework._@see RunBeforeTestExecutionCallbacks;protected Statement withBeforeTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return new RunBeforeTestExecutionCallbacks(statement, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,execution,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,execution,callbacks;protected,statement,with,before,test,execution,callbacks,framework,method,framework,method,object,test,instance,statement,statement,return,new,run,before,test,execution,callbacks,statement,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> protected Statement withBeforeTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1498780456;Wrap the supplied {@link Statement} with a {@code RunBeforeTestExecutionCallbacks}_statement, thus preserving the default functionality while adding support for the_Spring TestContext Framework._@see RunBeforeTestExecutionCallbacks;protected Statement withBeforeTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return new RunBeforeTestExecutionCallbacks(statement, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,execution,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,execution,callbacks;protected,statement,with,before,test,execution,callbacks,framework,method,framework,method,object,test,instance,statement,statement,return,new,run,before,test,execution,callbacks,statement,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> protected Statement withBeforeTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1529005714;Wrap the supplied {@link Statement} with a {@code RunBeforeTestExecutionCallbacks}_statement, thus preserving the default functionality while adding support for the_Spring TestContext Framework._@see RunBeforeTestExecutionCallbacks;protected Statement withBeforeTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return new RunBeforeTestExecutionCallbacks(statement, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,execution,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,execution,callbacks;protected,statement,with,before,test,execution,callbacks,framework,method,framework,method,object,test,instance,statement,statement,return,new,run,before,test,execution,callbacks,statement,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> protected Statement withBeforeTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement);1529012601;Wrap the supplied {@link Statement} with a {@code RunBeforeTestExecutionCallbacks}_statement, thus preserving the default functionality while adding support for the_Spring TestContext Framework._@see RunBeforeTestExecutionCallbacks;protected Statement withBeforeTestExecutionCallbacks(FrameworkMethod frameworkMethod, Object testInstance, Statement statement) {_		return new RunBeforeTestExecutionCallbacks(statement, testInstance, frameworkMethod.getMethod(), getTestContextManager())__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,execution,callbacks,statement,thus,preserving,the,default,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,execution,callbacks;protected,statement,with,before,test,execution,callbacks,framework,method,framework,method,object,test,instance,statement,statement,return,new,run,before,test,execution,callbacks,statement,test,instance,framework,method,get,method,get,test,context,manager
SpringJUnit4ClassRunner -> protected String getDefaultContextLoaderClassName(Class<?> clazz);1328020251;Get the name of the default <code>ContextLoader</code> class to use for_the supplied test class. The named class will be used if the test class_does not explicitly declare a <code>ContextLoader</code> class via the_<code>&#064_ContextConfiguration</code> annotation._<p>The default implementation returns <code>null</code>, thus implying use_of the <em>standard</em> default <code>ContextLoader</code> class name._Can be overridden by subclasses._@param clazz the test class_@return <code>null</code>;protected String getDefaultContextLoaderClassName(Class<?> clazz) {_		return null__	};get,the,name,of,the,default,code,context,loader,code,class,to,use,for,the,supplied,test,class,the,named,class,will,be,used,if,the,test,class,does,not,explicitly,declare,a,code,context,loader,code,class,via,the,code,064,context,configuration,code,annotation,p,the,default,implementation,returns,code,null,code,thus,implying,use,of,the,em,standard,em,default,code,context,loader,code,class,name,can,be,overridden,by,subclasses,param,clazz,the,test,class,return,code,null,code;protected,string,get,default,context,loader,class,name,class,clazz,return,null
SpringJUnit4ClassRunner -> protected String getDefaultContextLoaderClassName(Class<?> clazz);1356735495;Get the name of the default {@code ContextLoader} class to use for_the supplied test class. The named class will be used if the test class_does not explicitly declare a {@code ContextLoader} class via the_{@code &#064_ContextConfiguration} annotation._<p>The default implementation returns {@code null}, thus implying use_of the <em>standard</em> default {@code ContextLoader} class name._Can be overridden by subclasses._@param clazz the test class_@return {@code null};protected String getDefaultContextLoaderClassName(Class<?> clazz) {_		return null__	};get,the,name,of,the,default,code,context,loader,class,to,use,for,the,supplied,test,class,the,named,class,will,be,used,if,the,test,class,does,not,explicitly,declare,a,code,context,loader,class,via,the,code,064,context,configuration,annotation,p,the,default,implementation,returns,code,null,thus,implying,use,of,the,em,standard,em,default,code,context,loader,class,name,can,be,overridden,by,subclasses,param,clazz,the,test,class,return,code,null;protected,string,get,default,context,loader,class,name,class,clazz,return,null
SpringJUnit4ClassRunner -> protected String getDefaultContextLoaderClassName(Class<?> clazz);1367163114;Get the name of the default {@code ContextLoader} class to use for_the supplied test class. The named class will be used if the test class_does not explicitly declare a {@code ContextLoader} class via the_{@code &#064_ContextConfiguration} annotation._<p>The default implementation returns {@code null}, thus implying use_of the <em>standard</em> default {@code ContextLoader} class name._Can be overridden by subclasses._@param clazz the test class_@return {@code null};protected String getDefaultContextLoaderClassName(Class<?> clazz) {_		return null__	};get,the,name,of,the,default,code,context,loader,class,to,use,for,the,supplied,test,class,the,named,class,will,be,used,if,the,test,class,does,not,explicitly,declare,a,code,context,loader,class,via,the,code,064,context,configuration,annotation,p,the,default,implementation,returns,code,null,thus,implying,use,of,the,em,standard,em,default,code,context,loader,class,name,can,be,overridden,by,subclasses,param,clazz,the,test,class,return,code,null;protected,string,get,default,context,loader,class,name,class,clazz,return,null
SpringJUnit4ClassRunner -> protected String getDefaultContextLoaderClassName(Class<?> clazz);1382920864;Get the name of the default {@code ContextLoader} class to use for_the supplied test class. The named class will be used if the test class_does not explicitly declare a {@code ContextLoader} class via the_{@code &#064_ContextConfiguration} annotation._<p>The default implementation returns {@code null}, thus implying use_of the <em>standard</em> default {@code ContextLoader} class name._Can be overridden by subclasses._@param clazz the test class_@return {@code null};protected String getDefaultContextLoaderClassName(Class<?> clazz) {_		return null__	};get,the,name,of,the,default,code,context,loader,class,to,use,for,the,supplied,test,class,the,named,class,will,be,used,if,the,test,class,does,not,explicitly,declare,a,code,context,loader,class,via,the,code,064,context,configuration,annotation,p,the,default,implementation,returns,code,null,thus,implying,use,of,the,em,standard,em,default,code,context,loader,class,name,can,be,overridden,by,subclasses,param,clazz,the,test,class,return,code,null;protected,string,get,default,context,loader,class,name,class,clazz,return,null
SpringJUnit4ClassRunner -> protected String getDefaultContextLoaderClassName(Class<?> clazz);1385499540;Get the name of the default {@code ContextLoader} class to use for_the supplied test class. The named class will be used if the test class_does not explicitly declare a {@code ContextLoader} class via the_{@code &#064_ContextConfiguration} annotation._<p>The default implementation returns {@code null}, thus implying use_of the <em>standard</em> default {@code ContextLoader} class name._Can be overridden by subclasses._@param clazz the test class_@return {@code null};protected String getDefaultContextLoaderClassName(Class<?> clazz) {_		return null__	};get,the,name,of,the,default,code,context,loader,class,to,use,for,the,supplied,test,class,the,named,class,will,be,used,if,the,test,class,does,not,explicitly,declare,a,code,context,loader,class,via,the,code,064,context,configuration,annotation,p,the,default,implementation,returns,code,null,thus,implying,use,of,the,em,standard,em,default,code,context,loader,class,name,can,be,overridden,by,subclasses,param,clazz,the,test,class,return,code,null;protected,string,get,default,context,loader,class,name,class,clazz,return,null
SpringJUnit4ClassRunner -> protected String getDefaultContextLoaderClassName(Class<?> clazz);1396960609;Get the name of the default {@code ContextLoader} class to use for_the supplied test class. The named class will be used if the test class_does not explicitly declare a {@code ContextLoader} class via the_{@code @ContextConfiguration} annotation._<p>The default implementation returns {@code null}, thus implying use_of the <em>standard</em> default {@code ContextLoader} class name._Can be overridden by subclasses._@param clazz the test class_@return {@code null};protected String getDefaultContextLoaderClassName(Class<?> clazz) {_		return null__	};get,the,name,of,the,default,code,context,loader,class,to,use,for,the,supplied,test,class,the,named,class,will,be,used,if,the,test,class,does,not,explicitly,declare,a,code,context,loader,class,via,the,code,context,configuration,annotation,p,the,default,implementation,returns,code,null,thus,implying,use,of,the,em,standard,em,default,code,context,loader,class,name,can,be,overridden,by,subclasses,param,clazz,the,test,class,return,code,null;protected,string,get,default,context,loader,class,name,class,clazz,return,null
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1328020251;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestClassCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1356735495;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestClassCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1367163114;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestClassCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1382920864;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestClassCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1385499540;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestClassCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1396960609;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestClassCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1397082962;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestClassCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1397147316;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestClassCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1403683825;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestClassCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1406220853;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestClassCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1413848647;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestClassCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1420908711;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestClassCallbacks} statement, thus preserving the_default functionality but adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1431344362;Wrap the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestClassCallbacks} statement, thus preserving the_default JUnit functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1431360825;Wrap the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestClassCallbacks} statement, thus preserving the_default JUnit functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1431568199;Wrap the {@link Statement} returned by the parent implementation with a_{@link RunBeforeTestClassCallbacks} statement, thus preserving the_default JUnit functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,before,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1431801000;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestClassCallbacks} statement, thus preserving the_default JUnit functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1431894269;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestClassCallbacks} statement, thus preserving the_default JUnit functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1437749501;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestClassCallbacks} statement, thus preserving the_default JUnit functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1437755059;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestClassCallbacks} statement, thus preserving the_default JUnit functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1443464140;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestClassCallbacks} statement, thus preserving the_default JUnit functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1450547039;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestClassCallbacks} statement, thus preserving the_default JUnit functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1456610575;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestClassCallbacks} statement, thus preserving the_default JUnit functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1468244735;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestClassCallbacks} statement, thus preserving the_default JUnit functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1468334463;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestClassCallbacks} statement, thus preserving the_default JUnit functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1495868221;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestClassCallbacks} statement, thus preserving the_default JUnit functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1496955179;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestClassCallbacks} statement, thus preserving the_default JUnit functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1498780456;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestClassCallbacks} statement, thus preserving the_default JUnit functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1529005714;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestClassCallbacks} statement, thus preserving the_default JUnit functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withBeforeClasses(Statement statement);1529012601;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunBeforeTestClassCallbacks} statement, thus preserving the_default JUnit functionality while adding support for the Spring TestContext_Framework._@see RunBeforeTestClassCallbacks;@Override_	protected Statement withBeforeClasses(Statement statement) {_		Statement junitBeforeClasses = super.withBeforeClasses(statement)__		return new RunBeforeTestClassCallbacks(junitBeforeClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,before,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,before,test,class,callbacks;override,protected,statement,with,before,classes,statement,statement,statement,junit,before,classes,super,with,before,classes,statement,return,new,run,before,test,class,callbacks,junit,before,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	@SuppressWarnings("deprecation") 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1437749501;Perform the same logic as_{@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}_but with additional support for Spring's {@code @Timed} annotation._<p>Supports both Spring's {@link org.springframework.test.annotation.Timed @Timed}_and JUnit's {@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously._@return either a {@link SpringFailOnTimeout}, a {@link FailOnTimeout},_or the supplied {@link Statement} as appropriate_@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	@SuppressWarnings("deprecation")_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = String.format(_				"Test method [%s] has been configured with Spring's @Timed(millis=%s) and "_					+ "JUnit's @Test(timeout=%s) annotations, but only one declaration of "_					+ "a 'timeout' is permitted per test method.",_				frameworkMethod.getMethod(), springTimeout, junitTimeout)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};perform,the,same,logic,as,link,block,junit4class,runner,with,potential,timeout,framework,method,object,statement,but,with,additional,support,for,spring,s,code,timed,annotation,p,supports,both,spring,s,link,org,springframework,test,annotation,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,return,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,suppress,warnings,deprecation,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,string,format,test,method,s,has,been,configured,with,spring,s,timed,millis,s,and,junit,s,test,timeout,s,annotations,but,only,one,declaration,of,a,timeout,is,permitted,per,test,method,framework,method,get,method,spring,timeout,junit,timeout,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	@SuppressWarnings("deprecation") 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1437755059;Perform the same logic as_{@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}_but with additional support for Spring's {@code @Timed} annotation._<p>Supports both Spring's {@link org.springframework.test.annotation.Timed @Timed}_and JUnit's {@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously._@return either a {@link SpringFailOnTimeout}, a {@link FailOnTimeout},_or the supplied {@link Statement} as appropriate_@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	@SuppressWarnings("deprecation")_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = String.format("Test method [%s] has been configured with Spring's @Timed(millis=%s) and " +_							"JUnit's @Test(timeout=%s) annotations, but only one declaration of a 'timeout' is " +_							"permitted per test method.", frameworkMethod.getMethod(), springTimeout, junitTimeout)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};perform,the,same,logic,as,link,block,junit4class,runner,with,potential,timeout,framework,method,object,statement,but,with,additional,support,for,spring,s,code,timed,annotation,p,supports,both,spring,s,link,org,springframework,test,annotation,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,return,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,suppress,warnings,deprecation,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,string,format,test,method,s,has,been,configured,with,spring,s,timed,millis,s,and,junit,s,test,timeout,s,annotations,but,only,one,declaration,of,a,timeout,is,permitted,per,test,method,framework,method,get,method,spring,timeout,junit,timeout,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	@SuppressWarnings("deprecation") 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1443464140;Perform the same logic as_{@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}_but with additional support for Spring's {@code @Timed} annotation._<p>Supports both Spring's {@link org.springframework.test.annotation.Timed @Timed}_and JUnit's {@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously._@return either a {@link SpringFailOnTimeout}, a {@link FailOnTimeout},_or the supplied {@link Statement} as appropriate_@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	@SuppressWarnings("deprecation")_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = String.format("Test method [%s] has been configured with Spring's @Timed(millis=%s) and " +_							"JUnit's @Test(timeout=%s) annotations, but only one declaration of a 'timeout' is " +_							"permitted per test method.", frameworkMethod.getMethod(), springTimeout, junitTimeout)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};perform,the,same,logic,as,link,block,junit4class,runner,with,potential,timeout,framework,method,object,statement,but,with,additional,support,for,spring,s,code,timed,annotation,p,supports,both,spring,s,link,org,springframework,test,annotation,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,return,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,suppress,warnings,deprecation,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,string,format,test,method,s,has,been,configured,with,spring,s,timed,millis,s,and,junit,s,test,timeout,s,annotations,but,only,one,declaration,of,a,timeout,is,permitted,per,test,method,framework,method,get,method,spring,timeout,junit,timeout,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	@SuppressWarnings("deprecation") 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1450547039;Perform the same logic as_{@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}_but with additional support for Spring's {@code @Timed} annotation._<p>Supports both Spring's {@link org.springframework.test.annotation.Timed @Timed}_and JUnit's {@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously._@return either a {@link SpringFailOnTimeout}, a {@link FailOnTimeout},_or the supplied {@link Statement} as appropriate_@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	@SuppressWarnings("deprecation")_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = String.format("Test method [%s] has been configured with Spring's @Timed(millis=%s) and " +_							"JUnit's @Test(timeout=%s) annotations, but only one declaration of a 'timeout' is " +_							"permitted per test method.", frameworkMethod.getMethod(), springTimeout, junitTimeout)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = FailOnTimeout.builder().withTimeout(junitTimeout, TimeUnit.MILLISECONDS).build(next)__		}_		else {_			statement = next__		}__		return statement__	};perform,the,same,logic,as,link,block,junit4class,runner,with,potential,timeout,framework,method,object,statement,but,with,additional,support,for,spring,s,code,timed,annotation,p,supports,both,spring,s,link,org,springframework,test,annotation,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,return,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,suppress,warnings,deprecation,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,string,format,test,method,s,has,been,configured,with,spring,s,timed,millis,s,and,junit,s,test,timeout,s,annotations,but,only,one,declaration,of,a,timeout,is,permitted,per,test,method,framework,method,get,method,spring,timeout,junit,timeout,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,fail,on,timeout,builder,with,timeout,junit,timeout,time,unit,milliseconds,build,next,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	@SuppressWarnings("deprecation") 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1456610575;Perform the same logic as_{@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}_but with additional support for Spring's {@code @Timed} annotation._<p>Supports both Spring's {@link org.springframework.test.annotation.Timed @Timed}_and JUnit's {@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously._@return either a {@link SpringFailOnTimeout}, a {@link FailOnTimeout},_or the supplied {@link Statement} as appropriate_@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	@SuppressWarnings("deprecation")_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = String.format("Test method [%s] has been configured with Spring's @Timed(millis=%s) and " +_							"JUnit's @Test(timeout=%s) annotations, but only one declaration of a 'timeout' is " +_							"permitted per test method.", frameworkMethod.getMethod(), springTimeout, junitTimeout)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = FailOnTimeout.builder().withTimeout(junitTimeout, TimeUnit.MILLISECONDS).build(next)__		}_		else {_			statement = next__		}__		return statement__	};perform,the,same,logic,as,link,block,junit4class,runner,with,potential,timeout,framework,method,object,statement,but,with,additional,support,for,spring,s,code,timed,annotation,p,supports,both,spring,s,link,org,springframework,test,annotation,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,return,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,suppress,warnings,deprecation,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,string,format,test,method,s,has,been,configured,with,spring,s,timed,millis,s,and,junit,s,test,timeout,s,annotations,but,only,one,declaration,of,a,timeout,is,permitted,per,test,method,framework,method,get,method,spring,timeout,junit,timeout,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,fail,on,timeout,builder,with,timeout,junit,timeout,time,unit,milliseconds,build,next,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	@SuppressWarnings("deprecation") 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1468244735;Perform the same logic as_{@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}_but with additional support for Spring's {@code @Timed} annotation._<p>Supports both Spring's {@link org.springframework.test.annotation.Timed @Timed}_and JUnit's {@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously._@return either a {@link SpringFailOnTimeout}, a {@link FailOnTimeout},_or the supplied {@link Statement} as appropriate_@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	@SuppressWarnings("deprecation")_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = String.format("Test method [%s] has been configured with Spring's @Timed(millis=%s) and " +_							"JUnit's @Test(timeout=%s) annotations, but only one declaration of a 'timeout' is " +_							"permitted per test method.", frameworkMethod.getMethod(), springTimeout, junitTimeout)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = FailOnTimeout.builder().withTimeout(junitTimeout, TimeUnit.MILLISECONDS).build(next)__		}_		else {_			statement = next__		}__		return statement__	};perform,the,same,logic,as,link,block,junit4class,runner,with,potential,timeout,framework,method,object,statement,but,with,additional,support,for,spring,s,code,timed,annotation,p,supports,both,spring,s,link,org,springframework,test,annotation,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,return,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,suppress,warnings,deprecation,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,string,format,test,method,s,has,been,configured,with,spring,s,timed,millis,s,and,junit,s,test,timeout,s,annotations,but,only,one,declaration,of,a,timeout,is,permitted,per,test,method,framework,method,get,method,spring,timeout,junit,timeout,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,fail,on,timeout,builder,with,timeout,junit,timeout,time,unit,milliseconds,build,next,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	@SuppressWarnings("deprecation") 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1468334463;Perform the same logic as_{@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}_but with additional support for Spring's {@code @Timed} annotation._<p>Supports both Spring's {@link org.springframework.test.annotation.Timed @Timed}_and JUnit's {@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously._@return either a {@link SpringFailOnTimeout}, a {@link FailOnTimeout},_or the supplied {@link Statement} as appropriate_@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	@SuppressWarnings("deprecation")_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = String.format("Test method [%s] has been configured with Spring's @Timed(millis=%s) and " +_							"JUnit's @Test(timeout=%s) annotations, but only one declaration of a 'timeout' is " +_							"permitted per test method.", frameworkMethod.getMethod(), springTimeout, junitTimeout)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = FailOnTimeout.builder().withTimeout(junitTimeout, TimeUnit.MILLISECONDS).build(next)__		}_		else {_			statement = next__		}__		return statement__	};perform,the,same,logic,as,link,block,junit4class,runner,with,potential,timeout,framework,method,object,statement,but,with,additional,support,for,spring,s,code,timed,annotation,p,supports,both,spring,s,link,org,springframework,test,annotation,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,return,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,suppress,warnings,deprecation,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,string,format,test,method,s,has,been,configured,with,spring,s,timed,millis,s,and,junit,s,test,timeout,s,annotations,but,only,one,declaration,of,a,timeout,is,permitted,per,test,method,framework,method,get,method,spring,timeout,junit,timeout,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,fail,on,timeout,builder,with,timeout,junit,timeout,time,unit,milliseconds,build,next,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	@SuppressWarnings("deprecation") 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1495868221;Perform the same logic as_{@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}_but with additional support for Spring's {@code @Timed} annotation._<p>Supports both Spring's {@link org.springframework.test.annotation.Timed @Timed}_and JUnit's {@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously._@return either a {@link SpringFailOnTimeout}, a {@link FailOnTimeout},_or the supplied {@link Statement} as appropriate_@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	@SuppressWarnings("deprecation")_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = String.format("Test method [%s] has been configured with Spring's @Timed(millis=%s) and " +_							"JUnit's @Test(timeout=%s) annotations, but only one declaration of a 'timeout' is " +_							"permitted per test method.", frameworkMethod.getMethod(), springTimeout, junitTimeout)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = FailOnTimeout.builder().withTimeout(junitTimeout, TimeUnit.MILLISECONDS).build(next)__		}_		else {_			statement = next__		}__		return statement__	};perform,the,same,logic,as,link,block,junit4class,runner,with,potential,timeout,framework,method,object,statement,but,with,additional,support,for,spring,s,code,timed,annotation,p,supports,both,spring,s,link,org,springframework,test,annotation,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,return,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,suppress,warnings,deprecation,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,string,format,test,method,s,has,been,configured,with,spring,s,timed,millis,s,and,junit,s,test,timeout,s,annotations,but,only,one,declaration,of,a,timeout,is,permitted,per,test,method,framework,method,get,method,spring,timeout,junit,timeout,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,fail,on,timeout,builder,with,timeout,junit,timeout,time,unit,milliseconds,build,next,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	@SuppressWarnings("deprecation") 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1496955179;Perform the same logic as_{@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}_but with additional support for Spring's {@code @Timed} annotation._<p>Supports both Spring's {@link org.springframework.test.annotation.Timed @Timed}_and JUnit's {@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously._@return either a {@link SpringFailOnTimeout}, a {@link FailOnTimeout},_or the supplied {@link Statement} as appropriate_@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	@SuppressWarnings("deprecation")_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = String.format("Test method [%s] has been configured with Spring's @Timed(millis=%s) and " +_							"JUnit's @Test(timeout=%s) annotations, but only one declaration of a 'timeout' is " +_							"permitted per test method.", frameworkMethod.getMethod(), springTimeout, junitTimeout)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = FailOnTimeout.builder().withTimeout(junitTimeout, TimeUnit.MILLISECONDS).build(next)__		}_		else {_			statement = next__		}__		return statement__	};perform,the,same,logic,as,link,block,junit4class,runner,with,potential,timeout,framework,method,object,statement,but,with,additional,support,for,spring,s,code,timed,annotation,p,supports,both,spring,s,link,org,springframework,test,annotation,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,return,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,suppress,warnings,deprecation,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,string,format,test,method,s,has,been,configured,with,spring,s,timed,millis,s,and,junit,s,test,timeout,s,annotations,but,only,one,declaration,of,a,timeout,is,permitted,per,test,method,framework,method,get,method,spring,timeout,junit,timeout,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,fail,on,timeout,builder,with,timeout,junit,timeout,time,unit,milliseconds,build,next,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	@SuppressWarnings("deprecation") 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1498780456;Perform the same logic as_{@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}_but with additional support for Spring's {@code @Timed} annotation._<p>Supports both Spring's {@link org.springframework.test.annotation.Timed @Timed}_and JUnit's {@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously._@return either a {@link SpringFailOnTimeout}, a {@link FailOnTimeout},_or the supplied {@link Statement} as appropriate_@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	@SuppressWarnings("deprecation")_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = String.format("Test method [%s] has been configured with Spring's @Timed(millis=%s) and " +_							"JUnit's @Test(timeout=%s) annotations, but only one declaration of a 'timeout' is " +_							"permitted per test method.", frameworkMethod.getMethod(), springTimeout, junitTimeout)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = FailOnTimeout.builder().withTimeout(junitTimeout, TimeUnit.MILLISECONDS).build(next)__		}_		else {_			statement = next__		}__		return statement__	};perform,the,same,logic,as,link,block,junit4class,runner,with,potential,timeout,framework,method,object,statement,but,with,additional,support,for,spring,s,code,timed,annotation,p,supports,both,spring,s,link,org,springframework,test,annotation,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,return,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,suppress,warnings,deprecation,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,string,format,test,method,s,has,been,configured,with,spring,s,timed,millis,s,and,junit,s,test,timeout,s,annotations,but,only,one,declaration,of,a,timeout,is,permitted,per,test,method,framework,method,get,method,spring,timeout,junit,timeout,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,fail,on,timeout,builder,with,timeout,junit,timeout,time,unit,milliseconds,build,next,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1328020251;Performs the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return expectedException != null ? new ExpectException(next, expectedException) : next__	};performs,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1356735495;Performs the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return expectedException != null ? new ExpectException(next, expectedException) : next__	};performs,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1367163114;Performs the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return expectedException != null ? new ExpectException(next, expectedException) : next__	};performs,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1382920864;Performs the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return expectedException != null ? new ExpectException(next, expectedException) : next__	};performs,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1385499540;Performs the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return expectedException != null ? new ExpectException(next, expectedException) : next__	};performs,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1396960609;Performs the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return expectedException != null ? new ExpectException(next, expectedException) : next__	};performs,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1397082962;Performs the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return expectedException != null ? new ExpectException(next, expectedException) : next__	};performs,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1397147316;Performs the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return expectedException != null ? new ExpectException(next, expectedException) : next__	};performs,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1403683825;Performs the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return expectedException != null ? new ExpectException(next, expectedException) : next__	};performs,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1406220853;Performs the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return expectedException != null ? new ExpectException(next, expectedException) : next__	};performs,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1413848647;Performs the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return expectedException != null ? new ExpectException(next, expectedException) : next__	};performs,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1420908711;Performs the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return expectedException != null ? new ExpectException(next, expectedException) : next__	};performs,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1431344362;Perform the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return (expectedException != null ? new ExpectException(next, expectedException) : next)__	};perform,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1431360825;Perform the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return (expectedException != null ? new ExpectException(next, expectedException) : next)__	};perform,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1431568199;Perform the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return (expectedException != null ? new ExpectException(next, expectedException) : next)__	};perform,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1431801000;Perform the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return (expectedException != null ? new ExpectException(next, expectedException) : next)__	};perform,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1431894269;Perform the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return (expectedException != null ? new ExpectException(next, expectedException) : next)__	};perform,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1437749501;Perform the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return (expectedException != null ? new ExpectException(next, expectedException) : next)__	};perform,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1437755059;Perform the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return (expectedException != null ? new ExpectException(next, expectedException) : next)__	};perform,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1443464140;Perform the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return (expectedException != null ? new ExpectException(next, expectedException) : next)__	};perform,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1450547039;Perform the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return (expectedException != null ? new ExpectException(next, expectedException) : next)__	};perform,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1456610575;Perform the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return (expectedException != null ? new ExpectException(next, expectedException) : next)__	};perform,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1468244735;Perform the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return (expectedException != null ? new ExpectException(next, expectedException) : next)__	};perform,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1468334463;Perform the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return (expectedException != null ? new ExpectException(next, expectedException) : next)__	};perform,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1495868221;Perform the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return (expectedException != null ? new ExpectException(next, expectedException) : next)__	};perform,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1496955179;Perform the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return (expectedException != null ? new ExpectException(next, expectedException) : next)__	};perform,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1498780456;Perform the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return (expectedException != null ? new ExpectException(next, expectedException) : next)__	};perform,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1529005714;Perform the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return (expectedException != null ? new ExpectException(next, expectedException) : next)__	};perform,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1529012601;Perform the same logic as_{@link BlockJUnit4ClassRunner#possiblyExpectingExceptions(FrameworkMethod, Object, Statement)}_except that the <em>expected exception</em> is retrieved using_{@link #getExpectedException(FrameworkMethod)}.;@Override_	protected Statement possiblyExpectingExceptions(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Class<? extends Throwable> expectedException = getExpectedException(frameworkMethod)__		return (expectedException != null ? new ExpectException(next, expectedException) : next)__	};perform,the,same,logic,as,link,block,junit4class,runner,possibly,expecting,exceptions,framework,method,object,statement,except,that,the,em,expected,exception,em,is,retrieved,using,link,get,expected,exception,framework,method;override,protected,statement,possibly,expecting,exceptions,framework,method,framework,method,object,test,instance,statement,next,class,extends,throwable,expected,exception,get,expected,exception,framework,method,return,expected,exception,null,new,expect,exception,next,expected,exception,next
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1328020251;Supports both Spring's {@link Timed &#064_Timed} and JUnit's_{@link Test#timeout() &#064_Test(timeout=...)} annotations, but not both_simultaneously. Returns either a {@link SpringFailOnTimeout}, a_{@link FailOnTimeout}, or the unmodified, supplied {@link Statement} as_appropriate._@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = "Test method [" + frameworkMethod.getMethod()_					+ "] has been configured with Spring's @Timed(millis=" + springTimeout_					+ ") and JUnit's @Test(timeout=" + junitTimeout_					+ ") annotations. Only one declaration of a 'timeout' is permitted per test method."__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};supports,both,spring,s,link,timed,064,timed,and,junit,s,link,test,timeout,064,test,timeout,annotations,but,not,both,simultaneously,returns,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,unmodified,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,test,method,framework,method,get,method,has,been,configured,with,spring,s,timed,millis,spring,timeout,and,junit,s,test,timeout,junit,timeout,annotations,only,one,declaration,of,a,timeout,is,permitted,per,test,method,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1356735495;Supports both Spring's {@link Timed &#064_Timed} and JUnit's_{@link Test#timeout() &#064_Test(timeout=...)} annotations, but not both_simultaneously. Returns either a {@link SpringFailOnTimeout}, a_{@link FailOnTimeout}, or the unmodified, supplied {@link Statement} as_appropriate._@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = "Test method [" + frameworkMethod.getMethod()_					+ "] has been configured with Spring's @Timed(millis=" + springTimeout_					+ ") and JUnit's @Test(timeout=" + junitTimeout_					+ ") annotations. Only one declaration of a 'timeout' is permitted per test method."__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};supports,both,spring,s,link,timed,064,timed,and,junit,s,link,test,timeout,064,test,timeout,annotations,but,not,both,simultaneously,returns,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,unmodified,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,test,method,framework,method,get,method,has,been,configured,with,spring,s,timed,millis,spring,timeout,and,junit,s,test,timeout,junit,timeout,annotations,only,one,declaration,of,a,timeout,is,permitted,per,test,method,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1367163114;Supports both Spring's {@link Timed &#064_Timed} and JUnit's_{@link Test#timeout() &#064_Test(timeout=...)} annotations, but not both_simultaneously. Returns either a {@link SpringFailOnTimeout}, a_{@link FailOnTimeout}, or the unmodified, supplied {@link Statement} as_appropriate._@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = "Test method [" + frameworkMethod.getMethod()_					+ "] has been configured with Spring's @Timed(millis=" + springTimeout_					+ ") and JUnit's @Test(timeout=" + junitTimeout_					+ ") annotations. Only one declaration of a 'timeout' is permitted per test method."__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};supports,both,spring,s,link,timed,064,timed,and,junit,s,link,test,timeout,064,test,timeout,annotations,but,not,both,simultaneously,returns,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,unmodified,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,test,method,framework,method,get,method,has,been,configured,with,spring,s,timed,millis,spring,timeout,and,junit,s,test,timeout,junit,timeout,annotations,only,one,declaration,of,a,timeout,is,permitted,per,test,method,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1382920864;Supports both Spring's {@link Timed &#064_Timed} and JUnit's_{@link Test#timeout() &#064_Test(timeout=...)} annotations, but not both_simultaneously. Returns either a {@link SpringFailOnTimeout}, a_{@link FailOnTimeout}, or the unmodified, supplied {@link Statement} as_appropriate._@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = "Test method [" + frameworkMethod.getMethod()_					+ "] has been configured with Spring's @Timed(millis=" + springTimeout_					+ ") and JUnit's @Test(timeout=" + junitTimeout_					+ ") annotations. Only one declaration of a 'timeout' is permitted per test method."__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};supports,both,spring,s,link,timed,064,timed,and,junit,s,link,test,timeout,064,test,timeout,annotations,but,not,both,simultaneously,returns,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,unmodified,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,test,method,framework,method,get,method,has,been,configured,with,spring,s,timed,millis,spring,timeout,and,junit,s,test,timeout,junit,timeout,annotations,only,one,declaration,of,a,timeout,is,permitted,per,test,method,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1385499540;Supports both Spring's {@link Timed &#064_Timed} and JUnit's_{@link Test#timeout() &#064_Test(timeout=...)} annotations, but not both_simultaneously. Returns either a {@link SpringFailOnTimeout}, a_{@link FailOnTimeout}, or the unmodified, supplied {@link Statement} as_appropriate._@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = "Test method [" + frameworkMethod.getMethod()_					+ "] has been configured with Spring's @Timed(millis=" + springTimeout_					+ ") and JUnit's @Test(timeout=" + junitTimeout_					+ ") annotations. Only one declaration of a 'timeout' is permitted per test method."__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};supports,both,spring,s,link,timed,064,timed,and,junit,s,link,test,timeout,064,test,timeout,annotations,but,not,both,simultaneously,returns,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,unmodified,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,test,method,framework,method,get,method,has,been,configured,with,spring,s,timed,millis,spring,timeout,and,junit,s,test,timeout,junit,timeout,annotations,only,one,declaration,of,a,timeout,is,permitted,per,test,method,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1396960609;Supports both Spring's {@link Timed &#064_Timed} and JUnit's_{@link Test#timeout() &#064_Test(timeout=...)} annotations, but not both_simultaneously. Returns either a {@link SpringFailOnTimeout}, a_{@link FailOnTimeout}, or the unmodified, supplied {@link Statement} as_appropriate._@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = "Test method [" + frameworkMethod.getMethod()_					+ "] has been configured with Spring's @Timed(millis=" + springTimeout_					+ ") and JUnit's @Test(timeout=" + junitTimeout_					+ ") annotations. Only one declaration of a 'timeout' is permitted per test method."__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};supports,both,spring,s,link,timed,064,timed,and,junit,s,link,test,timeout,064,test,timeout,annotations,but,not,both,simultaneously,returns,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,unmodified,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,test,method,framework,method,get,method,has,been,configured,with,spring,s,timed,millis,spring,timeout,and,junit,s,test,timeout,junit,timeout,annotations,only,one,declaration,of,a,timeout,is,permitted,per,test,method,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1397082962;Supports both Spring's {@link Timed &#064_Timed} and JUnit's_{@link Test#timeout() &#064_Test(timeout=...)} annotations, but not both_simultaneously. Returns either a {@link SpringFailOnTimeout}, a_{@link FailOnTimeout}, or the unmodified, supplied {@link Statement} as_appropriate._@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = "Test method [" + frameworkMethod.getMethod()_					+ "] has been configured with Spring's @Timed(millis=" + springTimeout_					+ ") and JUnit's @Test(timeout=" + junitTimeout_					+ ") annotations. Only one declaration of a 'timeout' is permitted per test method."__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};supports,both,spring,s,link,timed,064,timed,and,junit,s,link,test,timeout,064,test,timeout,annotations,but,not,both,simultaneously,returns,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,unmodified,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,test,method,framework,method,get,method,has,been,configured,with,spring,s,timed,millis,spring,timeout,and,junit,s,test,timeout,junit,timeout,annotations,only,one,declaration,of,a,timeout,is,permitted,per,test,method,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1397147316;Supports both Spring's {@link Timed @Timed} and JUnit's_{@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously. Returns either a {@link SpringFailOnTimeout}, a_{@link FailOnTimeout}, or the unmodified, supplied {@link Statement} as_appropriate._@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = "Test method [" + frameworkMethod.getMethod()_					+ "] has been configured with Spring's @Timed(millis=" + springTimeout_					+ ") and JUnit's @Test(timeout=" + junitTimeout_					+ ") annotations. Only one declaration of a 'timeout' is permitted per test method."__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};supports,both,spring,s,link,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,returns,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,unmodified,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,test,method,framework,method,get,method,has,been,configured,with,spring,s,timed,millis,spring,timeout,and,junit,s,test,timeout,junit,timeout,annotations,only,one,declaration,of,a,timeout,is,permitted,per,test,method,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1403683825;Supports both Spring's {@link Timed @Timed} and JUnit's_{@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously. Returns either a {@link SpringFailOnTimeout}, a_{@link FailOnTimeout}, or the unmodified, supplied {@link Statement} as_appropriate._@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = "Test method [" + frameworkMethod.getMethod()_					+ "] has been configured with Spring's @Timed(millis=" + springTimeout_					+ ") and JUnit's @Test(timeout=" + junitTimeout_					+ ") annotations. Only one declaration of a 'timeout' is permitted per test method."__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};supports,both,spring,s,link,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,returns,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,unmodified,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,test,method,framework,method,get,method,has,been,configured,with,spring,s,timed,millis,spring,timeout,and,junit,s,test,timeout,junit,timeout,annotations,only,one,declaration,of,a,timeout,is,permitted,per,test,method,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1406220853;Supports both Spring's {@link Timed @Timed} and JUnit's_{@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously. Returns either a {@link SpringFailOnTimeout}, a_{@link FailOnTimeout}, or the unmodified, supplied {@link Statement} as_appropriate._@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = "Test method [" + frameworkMethod.getMethod()_					+ "] has been configured with Spring's @Timed(millis=" + springTimeout_					+ ") and JUnit's @Test(timeout=" + junitTimeout_					+ ") annotations. Only one declaration of a 'timeout' is permitted per test method."__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};supports,both,spring,s,link,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,returns,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,unmodified,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,test,method,framework,method,get,method,has,been,configured,with,spring,s,timed,millis,spring,timeout,and,junit,s,test,timeout,junit,timeout,annotations,only,one,declaration,of,a,timeout,is,permitted,per,test,method,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1413848647;Supports both Spring's {@link Timed @Timed} and JUnit's_{@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously. Returns either a {@link SpringFailOnTimeout}, a_{@link FailOnTimeout}, or the unmodified, supplied {@link Statement} as_appropriate._@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = "Test method [" + frameworkMethod.getMethod()_					+ "] has been configured with Spring's @Timed(millis=" + springTimeout_					+ ") and JUnit's @Test(timeout=" + junitTimeout_					+ ") annotations. Only one declaration of a 'timeout' is permitted per test method."__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};supports,both,spring,s,link,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,returns,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,unmodified,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,test,method,framework,method,get,method,has,been,configured,with,spring,s,timed,millis,spring,timeout,and,junit,s,test,timeout,junit,timeout,annotations,only,one,declaration,of,a,timeout,is,permitted,per,test,method,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1420908711;Supports both Spring's {@link Timed @Timed} and JUnit's_{@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously. Returns either a {@link SpringFailOnTimeout}, a_{@link FailOnTimeout}, or the unmodified, supplied {@link Statement} as_appropriate._@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = "Test method [" + frameworkMethod.getMethod()_					+ "] has been configured with Spring's @Timed(millis=" + springTimeout_					+ ") and JUnit's @Test(timeout=" + junitTimeout_					+ ") annotations. Only one declaration of a 'timeout' is permitted per test method."__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};supports,both,spring,s,link,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,returns,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,unmodified,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,test,method,framework,method,get,method,has,been,configured,with,spring,s,timed,millis,spring,timeout,and,junit,s,test,timeout,junit,timeout,annotations,only,one,declaration,of,a,timeout,is,permitted,per,test,method,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1431344362;Perform the same logic as_{@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}_but with additional support for Spring's {@code @Timed} annotation._<p>Supports both Spring's {@link Timed @Timed} and JUnit's_{@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously._@return either a {@link SpringFailOnTimeout}, a {@link FailOnTimeout},_or the supplied {@link Statement} as appropriate_@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = String.format(_				"Test method [%s] has been configured with Spring's @Timed(millis=%s) and "_					+ "JUnit's @Test(timeout=%s) annotations, but only one declaration of "_					+ "a 'timeout' is permitted per test method.",_				frameworkMethod.getMethod(), springTimeout, junitTimeout)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};perform,the,same,logic,as,link,block,junit4class,runner,with,potential,timeout,framework,method,object,statement,but,with,additional,support,for,spring,s,code,timed,annotation,p,supports,both,spring,s,link,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,return,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,string,format,test,method,s,has,been,configured,with,spring,s,timed,millis,s,and,junit,s,test,timeout,s,annotations,but,only,one,declaration,of,a,timeout,is,permitted,per,test,method,framework,method,get,method,spring,timeout,junit,timeout,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1431360825;Perform the same logic as_{@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}_but with additional support for Spring's {@code @Timed} annotation._<p>Supports both Spring's {@link Timed @Timed} and JUnit's_{@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously._@return either a {@link SpringFailOnTimeout}, a {@link FailOnTimeout},_or the supplied {@link Statement} as appropriate_@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = String.format(_				"Test method [%s] has been configured with Spring's @Timed(millis=%s) and "_					+ "JUnit's @Test(timeout=%s) annotations, but only one declaration of "_					+ "a 'timeout' is permitted per test method.",_				frameworkMethod.getMethod(), springTimeout, junitTimeout)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};perform,the,same,logic,as,link,block,junit4class,runner,with,potential,timeout,framework,method,object,statement,but,with,additional,support,for,spring,s,code,timed,annotation,p,supports,both,spring,s,link,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,return,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,string,format,test,method,s,has,been,configured,with,spring,s,timed,millis,s,and,junit,s,test,timeout,s,annotations,but,only,one,declaration,of,a,timeout,is,permitted,per,test,method,framework,method,get,method,spring,timeout,junit,timeout,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1431568199;Perform the same logic as_{@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}_but with additional support for Spring's {@code @Timed} annotation._<p>Supports both Spring's {@link Timed @Timed} and JUnit's_{@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously._@return either a {@link SpringFailOnTimeout}, a {@link FailOnTimeout},_or the supplied {@link Statement} as appropriate_@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = String.format(_				"Test method [%s] has been configured with Spring's @Timed(millis=%s) and "_					+ "JUnit's @Test(timeout=%s) annotations, but only one declaration of "_					+ "a 'timeout' is permitted per test method.",_				frameworkMethod.getMethod(), springTimeout, junitTimeout)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};perform,the,same,logic,as,link,block,junit4class,runner,with,potential,timeout,framework,method,object,statement,but,with,additional,support,for,spring,s,code,timed,annotation,p,supports,both,spring,s,link,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,return,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,string,format,test,method,s,has,been,configured,with,spring,s,timed,millis,s,and,junit,s,test,timeout,s,annotations,but,only,one,declaration,of,a,timeout,is,permitted,per,test,method,framework,method,get,method,spring,timeout,junit,timeout,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1431801000;Perform the same logic as_{@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}_but with additional support for Spring's {@code @Timed} annotation._<p>Supports both Spring's {@link Timed @Timed} and JUnit's_{@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously._@return either a {@link SpringFailOnTimeout}, a {@link FailOnTimeout},_or the supplied {@link Statement} as appropriate_@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = String.format(_				"Test method [%s] has been configured with Spring's @Timed(millis=%s) and "_					+ "JUnit's @Test(timeout=%s) annotations, but only one declaration of "_					+ "a 'timeout' is permitted per test method.",_				frameworkMethod.getMethod(), springTimeout, junitTimeout)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};perform,the,same,logic,as,link,block,junit4class,runner,with,potential,timeout,framework,method,object,statement,but,with,additional,support,for,spring,s,code,timed,annotation,p,supports,both,spring,s,link,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,return,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,string,format,test,method,s,has,been,configured,with,spring,s,timed,millis,s,and,junit,s,test,timeout,s,annotations,but,only,one,declaration,of,a,timeout,is,permitted,per,test,method,framework,method,get,method,spring,timeout,junit,timeout,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1431894269;Perform the same logic as_{@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}_but with additional support for Spring's {@code @Timed} annotation._<p>Supports both Spring's {@link org.springframework.test.annotation.Timed @Timed}_and JUnit's {@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously._@return either a {@link SpringFailOnTimeout}, a {@link FailOnTimeout},_or the supplied {@link Statement} as appropriate_@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = String.format(_				"Test method [%s] has been configured with Spring's @Timed(millis=%s) and "_					+ "JUnit's @Test(timeout=%s) annotations, but only one declaration of "_					+ "a 'timeout' is permitted per test method.",_				frameworkMethod.getMethod(), springTimeout, junitTimeout)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			_			statement = new FailOnTimeout(next, junitTimeout)__		}_		else {_			statement = next__		}__		return statement__	};perform,the,same,logic,as,link,block,junit4class,runner,with,potential,timeout,framework,method,object,statement,but,with,additional,support,for,spring,s,code,timed,annotation,p,supports,both,spring,s,link,org,springframework,test,annotation,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,return,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,string,format,test,method,s,has,been,configured,with,spring,s,timed,millis,s,and,junit,s,test,timeout,s,annotations,but,only,one,declaration,of,a,timeout,is,permitted,per,test,method,framework,method,get,method,spring,timeout,junit,timeout,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,new,fail,on,timeout,next,junit,timeout,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next);1529005714;Perform the same logic as_{@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}_but with additional support for Spring's {@code @Timed} annotation._<p>Supports both Spring's {@link org.springframework.test.annotation.Timed @Timed}_and JUnit's {@link Test#timeout() @Test(timeout=...)} annotations, but not both_simultaneously._@return either a {@link SpringFailOnTimeout}, a {@link FailOnTimeout},_or the supplied {@link Statement} as appropriate_@see #getSpringTimeout(FrameworkMethod)_@see #getJUnitTimeout(FrameworkMethod);@Override_	protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {_		Statement statement = null__		long springTimeout = getSpringTimeout(frameworkMethod)__		long junitTimeout = getJUnitTimeout(frameworkMethod)__		if (springTimeout > 0 && junitTimeout > 0) {_			String msg = String.format("Test method [%s] has been configured with Spring's @Timed(millis=%s) and " +_							"JUnit's @Test(timeout=%s) annotations, but only one declaration of a 'timeout' is " +_							"permitted per test method.", frameworkMethod.getMethod(), springTimeout, junitTimeout)__			logger.error(msg)__			throw new IllegalStateException(msg)__		}_		else if (springTimeout > 0) {_			statement = new SpringFailOnTimeout(next, springTimeout)__		}_		else if (junitTimeout > 0) {_			statement = FailOnTimeout.builder().withTimeout(junitTimeout, TimeUnit.MILLISECONDS).build(next)__		}_		else {_			statement = next__		}__		return statement__	};perform,the,same,logic,as,link,block,junit4class,runner,with,potential,timeout,framework,method,object,statement,but,with,additional,support,for,spring,s,code,timed,annotation,p,supports,both,spring,s,link,org,springframework,test,annotation,timed,timed,and,junit,s,link,test,timeout,test,timeout,annotations,but,not,both,simultaneously,return,either,a,link,spring,fail,on,timeout,a,link,fail,on,timeout,or,the,supplied,link,statement,as,appropriate,see,get,spring,timeout,framework,method,see,get,junit,timeout,framework,method;override,protected,statement,with,potential,timeout,framework,method,framework,method,object,test,instance,statement,next,statement,statement,null,long,spring,timeout,get,spring,timeout,framework,method,long,junit,timeout,get,junit,timeout,framework,method,if,spring,timeout,0,junit,timeout,0,string,msg,string,format,test,method,s,has,been,configured,with,spring,s,timed,millis,s,and,junit,s,test,timeout,s,annotations,but,only,one,declaration,of,a,timeout,is,permitted,per,test,method,framework,method,get,method,spring,timeout,junit,timeout,logger,error,msg,throw,new,illegal,state,exception,msg,else,if,spring,timeout,0,statement,new,spring,fail,on,timeout,next,spring,timeout,else,if,junit,timeout,0,statement,fail,on,timeout,builder,with,timeout,junit,timeout,time,unit,milliseconds,build,next,else,statement,next,return,statement
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1328020251;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestClassCallbacks} statement, thus preserving the default_functionality but adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1356735495;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestClassCallbacks} statement, thus preserving the default_functionality but adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1367163114;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestClassCallbacks} statement, thus preserving the default_functionality but adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1382920864;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestClassCallbacks} statement, thus preserving the default_functionality but adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1385499540;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestClassCallbacks} statement, thus preserving the default_functionality but adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1396960609;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestClassCallbacks} statement, thus preserving the default_functionality but adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1397082962;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestClassCallbacks} statement, thus preserving the default_functionality but adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1397147316;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestClassCallbacks} statement, thus preserving the default_functionality but adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1403683825;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestClassCallbacks} statement, thus preserving the default_functionality but adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1406220853;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestClassCallbacks} statement, thus preserving the default_functionality but adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1413848647;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestClassCallbacks} statement, thus preserving the default_functionality but adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1420908711;Wraps the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestClassCallbacks} statement, thus preserving the default_functionality but adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wraps,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,class,callbacks,statement,thus,preserving,the,default,functionality,but,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1431344362;Wrap the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestClassCallbacks} statement, thus preserving the default_JUnit functionality while adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1431360825;Wrap the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestClassCallbacks} statement, thus preserving the default_JUnit functionality while adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1431568199;Wrap the {@link Statement} returned by the parent implementation with a_{@link RunAfterTestClassCallbacks} statement, thus preserving the default_JUnit functionality while adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,link,run,after,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1431801000;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestClassCallbacks} statement, thus preserving the default_JUnit functionality while adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1431894269;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestClassCallbacks} statement, thus preserving the default_JUnit functionality while adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1437749501;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestClassCallbacks} statement, thus preserving the default_JUnit functionality while adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1437755059;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestClassCallbacks} statement, thus preserving the default_JUnit functionality while adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1443464140;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestClassCallbacks} statement, thus preserving the default_JUnit functionality while adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1450547039;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestClassCallbacks} statement, thus preserving the default_JUnit functionality while adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1456610575;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestClassCallbacks} statement, thus preserving the default_JUnit functionality while adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1468244735;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestClassCallbacks} statement, thus preserving the default_JUnit functionality while adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1468334463;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestClassCallbacks} statement, thus preserving the default_JUnit functionality while adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1495868221;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestClassCallbacks} statement, thus preserving the default_JUnit functionality while adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1496955179;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestClassCallbacks} statement, thus preserving the default_JUnit functionality while adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1498780456;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestClassCallbacks} statement, thus preserving the default_JUnit functionality while adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1529005714;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestClassCallbacks} statement, thus preserving the default_JUnit functionality while adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
SpringJUnit4ClassRunner -> @Override 	protected Statement withAfterClasses(Statement statement);1529012601;Wrap the {@link Statement} returned by the parent implementation with a_{@code RunAfterTestClassCallbacks} statement, thus preserving the default_JUnit functionality while adding support for the Spring TestContext Framework._@see RunAfterTestClassCallbacks;@Override_	protected Statement withAfterClasses(Statement statement) {_		Statement junitAfterClasses = super.withAfterClasses(statement)__		return new RunAfterTestClassCallbacks(junitAfterClasses, getTestContextManager())__	};wrap,the,link,statement,returned,by,the,parent,implementation,with,a,code,run,after,test,class,callbacks,statement,thus,preserving,the,default,junit,functionality,while,adding,support,for,the,spring,test,context,framework,see,run,after,test,class,callbacks;override,protected,statement,with,after,classes,statement,statement,statement,junit,after,classes,super,with,after,classes,statement,return,new,run,after,test,class,callbacks,junit,after,classes,get,test,context,manager
