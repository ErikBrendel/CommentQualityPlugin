commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public WebTestClient.Builder baseUrl(String baseUrl) {     this.webClientBuilder.baseUrl(baseUrl).     return this. }
false;public;1;5;;@Override public WebTestClient.Builder uriBuilderFactory(UriBuilderFactory uriBuilderFactory) {     this.webClientBuilder.uriBuilderFactory(uriBuilderFactory).     return this. }
false;public;2;5;;@Override public WebTestClient.Builder defaultHeader(String headerName, String... headerValues) {     this.webClientBuilder.defaultHeader(headerName, headerValues).     return this. }
false;public;1;5;;@Override public WebTestClient.Builder defaultHeaders(Consumer<HttpHeaders> headersConsumer) {     this.webClientBuilder.defaultHeaders(headersConsumer).     return this. }
false;public;2;5;;@Override public WebTestClient.Builder defaultCookie(String cookieName, String... cookieValues) {     this.webClientBuilder.defaultCookie(cookieName, cookieValues).     return this. }
false;public;1;6;;@Override public WebTestClient.Builder defaultCookies(Consumer<MultiValueMap<String, String>> cookiesConsumer) {     this.webClientBuilder.defaultCookies(cookiesConsumer).     return this. }
false;public;1;5;;@Override public WebTestClient.Builder filter(ExchangeFilterFunction filter) {     this.webClientBuilder.filter(filter).     return this. }
false;public;1;5;;@Override public WebTestClient.Builder filters(Consumer<List<ExchangeFilterFunction>> filtersConsumer) {     this.webClientBuilder.filters(filtersConsumer).     return this. }
false;public;1;5;;@Override public WebTestClient.Builder exchangeStrategies(ExchangeStrategies strategies) {     this.webClientBuilder.exchangeStrategies(strategies).     return this. }
false;public;1;5;;@Override public WebTestClient.Builder responseTimeout(Duration timeout) {     this.responseTimeout = timeout.     return this. }
false;public;1;5;;@Override public WebTestClient.Builder apply(WebTestClientConfigurer configurer) {     configurer.afterConfigurerAdded(this, this.httpHandlerBuilder, this.connector).     return this. }
false;public;0;11;;@Override public WebTestClient build() {     ClientHttpConnector connectorToUse = this.connector.     if (connectorToUse == null) {         Assert.state(this.httpHandlerBuilder != null, "No WebHttpHandlerBuilder available").         connectorToUse = new HttpHandlerConnector(this.httpHandlerBuilder.build()).     }     return new DefaultWebTestClient(this.webClientBuilder, connectorToUse, this.responseTimeout, new DefaultWebTestClientBuilder(this)). }
