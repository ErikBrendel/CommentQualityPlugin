commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public MockServerHttpResponse getResponse() {     return (MockServerHttpResponse) super.getResponse(). }
true;public,static;1;3;/**  * Create a {@link MockServerWebExchange} from the given mock request.  * @param request the request to use.  * @return the exchange  */ ;/**  * Create a {@link MockServerWebExchange} from the given mock request.  * @param request the request to use.  * @return the exchange  */ public static MockServerWebExchange from(MockServerHttpRequest request) {     return builder(request).build(). }
true;public,static;1;3;/**  * Variant of {@link #from(MockServerHttpRequest)} with a mock request builder.  * @param requestBuilder the builder for the mock request.  * @return the exchange  */ ;/**  * Variant of {@link #from(MockServerHttpRequest)} with a mock request builder.  * @param requestBuilder the builder for the mock request.  * @return the exchange  */ public static MockServerWebExchange from(MockServerHttpRequest.BaseBuilder<?> requestBuilder) {     return builder(requestBuilder).build(). }
true;public,static;1;3;/**  * Create a {@link Builder} starting with the given mock request.  * @param request the request to use.  * @return the exchange builder  * @since 5.1  */ ;/**  * Create a {@link Builder} starting with the given mock request.  * @param request the request to use.  * @return the exchange builder  * @since 5.1  */ public static MockServerWebExchange.Builder builder(MockServerHttpRequest request) {     return new MockServerWebExchange.Builder(request). }
true;public,static;1;3;/**  * Variant of {@link #builder(MockServerHttpRequest)} with a mock request builder.  * @param requestBuilder the builder for the mock request.  * @return the exchange builder  * @since 5.1  */ ;/**  * Variant of {@link #builder(MockServerHttpRequest)} with a mock request builder.  * @param requestBuilder the builder for the mock request.  * @return the exchange builder  * @since 5.1  */ public static MockServerWebExchange.Builder builder(MockServerHttpRequest.BaseBuilder<?> requestBuilder) {     return new MockServerWebExchange.Builder(requestBuilder.build()). }
true;public;1;4;/**  * Set the session to use for the exchange.  * <p>This method is mutually exclusive with  * {@link #sessionManager(WebSessionManager)}.  * @param session the session to use  * @see MockWebSession  */ ;/**  * Set the session to use for the exchange.  * <p>This method is mutually exclusive with  * {@link #sessionManager(WebSessionManager)}.  * @param session the session to use  * @see MockWebSession  */ public Builder session(WebSession session) {     this.sessionManager = exchange -> Mono.just(session).     return this. }
true;public;1;4;/**  * Provide a {@code WebSessionManager} instance to use with the exchange.  * <p>This is mutually exclusive with {@link #session(WebSession)}.  * @param sessionManager the session manager to use  */ ;/**  * Provide a {@code WebSessionManager} instance to use with the exchange.  * <p>This is mutually exclusive with {@link #session(WebSession)}.  * @param sessionManager the session manager to use  */ public Builder sessionManager(WebSessionManager sessionManager) {     this.sessionManager = sessionManager.     return this. }
true;public;0;4;/**  * Build the {@code MockServerWebExchange} instance.  */ ;/**  * Build the {@code MockServerWebExchange} instance.  */ public MockServerWebExchange build() {     return new MockServerWebExchange(this.request, this.sessionManager != null ? this.sessionManager : new DefaultWebSessionManager()). }
