# id;timestamp;commentText;codeText;commentWords;codeWords
SpringMethodRule -> private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass);1443471070;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public static final SpringClassRule} field_that is annotated with {@code @ClassRule}.;private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass) {_		Field ruleField = null___		for (Field field : testClass.getFields()) {_			if (ReflectionUtils.isPublicStaticFinal(field) && SpringClassRule.class.isAssignableFrom(field.getType())) {_				ruleField = field__				break__			}_		}__		if (ruleField == null) {_			throw new IllegalStateException(String.format(_					"Failed to find 'public static final SpringClassRule' field in test class [%s]. " +_					"Consult the javadoc for SpringClassRule for details.", testClass.getName()))__		}__		if (!ruleField.isAnnotationPresent(ClassRule.class)) {_			throw new IllegalStateException(String.format(_					"SpringClassRule field [%s] must be annotated with JUnit's @ClassRule annotation. " +_					"Consult the javadoc for SpringClassRule for details.", ruleField))__		}__		return (SpringClassRule) ReflectionUtils.getField(ruleField, null)__	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,static,final,spring,class,rule,field,that,is,annotated,with,code,class,rule;private,static,spring,class,rule,validate,spring,class,rule,configuration,class,test,class,field,rule,field,null,for,field,field,test,class,get,fields,if,reflection,utils,is,public,static,final,field,spring,class,rule,class,is,assignable,from,field,get,type,rule,field,field,break,if,rule,field,null,throw,new,illegal,state,exception,string,format,failed,to,find,public,static,final,spring,class,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,if,rule,field,is,annotation,present,class,rule,class,throw,new,illegal,state,exception,string,format,spring,class,rule,field,s,must,be,annotated,with,junit,s,class,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field,return,spring,class,rule,reflection,utils,get,field,rule,field,null
SpringMethodRule -> private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass);1450547039;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public static final SpringClassRule} field_that is annotated with {@code @ClassRule}.;private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass) {_		Field ruleField = null___		for (Field field : testClass.getFields()) {_			if (ReflectionUtils.isPublicStaticFinal(field) && SpringClassRule.class.isAssignableFrom(field.getType())) {_				ruleField = field__				break__			}_		}__		if (ruleField == null) {_			throw new IllegalStateException(String.format(_					"Failed to find 'public static final SpringClassRule' field in test class [%s]. " +_					"Consult the javadoc for SpringClassRule for details.", testClass.getName()))__		}__		if (!ruleField.isAnnotationPresent(ClassRule.class)) {_			throw new IllegalStateException(String.format(_					"SpringClassRule field [%s] must be annotated with JUnit's @ClassRule annotation. " +_					"Consult the javadoc for SpringClassRule for details.", ruleField))__		}__		return (SpringClassRule) ReflectionUtils.getField(ruleField, null)__	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,static,final,spring,class,rule,field,that,is,annotated,with,code,class,rule;private,static,spring,class,rule,validate,spring,class,rule,configuration,class,test,class,field,rule,field,null,for,field,field,test,class,get,fields,if,reflection,utils,is,public,static,final,field,spring,class,rule,class,is,assignable,from,field,get,type,rule,field,field,break,if,rule,field,null,throw,new,illegal,state,exception,string,format,failed,to,find,public,static,final,spring,class,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,if,rule,field,is,annotation,present,class,rule,class,throw,new,illegal,state,exception,string,format,spring,class,rule,field,s,must,be,annotated,with,junit,s,class,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field,return,spring,class,rule,reflection,utils,get,field,rule,field,null
SpringMethodRule -> private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass);1468244735;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public static final SpringClassRule} field_that is annotated with {@code @ClassRule}.;private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass) {_		Field ruleField = null___		for (Field field : testClass.getFields()) {_			if (ReflectionUtils.isPublicStaticFinal(field) && SpringClassRule.class.isAssignableFrom(field.getType())) {_				ruleField = field__				break__			}_		}__		if (ruleField == null) {_			throw new IllegalStateException(String.format(_					"Failed to find 'public static final SpringClassRule' field in test class [%s]. " +_					"Consult the javadoc for SpringClassRule for details.", testClass.getName()))__		}__		if (!ruleField.isAnnotationPresent(ClassRule.class)) {_			throw new IllegalStateException(String.format(_					"SpringClassRule field [%s] must be annotated with JUnit's @ClassRule annotation. " +_					"Consult the javadoc for SpringClassRule for details.", ruleField))__		}__		return (SpringClassRule) ReflectionUtils.getField(ruleField, null)__	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,static,final,spring,class,rule,field,that,is,annotated,with,code,class,rule;private,static,spring,class,rule,validate,spring,class,rule,configuration,class,test,class,field,rule,field,null,for,field,field,test,class,get,fields,if,reflection,utils,is,public,static,final,field,spring,class,rule,class,is,assignable,from,field,get,type,rule,field,field,break,if,rule,field,null,throw,new,illegal,state,exception,string,format,failed,to,find,public,static,final,spring,class,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,if,rule,field,is,annotation,present,class,rule,class,throw,new,illegal,state,exception,string,format,spring,class,rule,field,s,must,be,annotated,with,junit,s,class,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field,return,spring,class,rule,reflection,utils,get,field,rule,field,null
SpringMethodRule -> private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass);1468334463;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public static final SpringClassRule} field_that is annotated with {@code @ClassRule}.;private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass) {_		Field ruleField = findSpringClassRuleField(testClass)___		Assert.state(ruleField != null, () -> String.format(_				"Failed to find 'public static final SpringClassRule' field in test class [%s]. " +_				"Consult the javadoc for SpringClassRule for details.", testClass.getName()))___		Assert.state(ruleField.isAnnotationPresent(ClassRule.class), () -> String.format(_				"SpringClassRule field [%s] must be annotated with JUnit's @ClassRule annotation. " +_				"Consult the javadoc for SpringClassRule for details.", ruleField))___		return (SpringClassRule) ReflectionUtils.getField(ruleField, null)__	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,static,final,spring,class,rule,field,that,is,annotated,with,code,class,rule;private,static,spring,class,rule,validate,spring,class,rule,configuration,class,test,class,field,rule,field,find,spring,class,rule,field,test,class,assert,state,rule,field,null,string,format,failed,to,find,public,static,final,spring,class,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,assert,state,rule,field,is,annotation,present,class,rule,class,string,format,spring,class,rule,field,s,must,be,annotated,with,junit,s,class,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field,return,spring,class,rule,reflection,utils,get,field,rule,field,null
SpringMethodRule -> private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass);1472740443;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public static final SpringClassRule} field_that is annotated with {@code @ClassRule}.;private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass) {_		Field ruleField = findSpringClassRuleField(testClass).orElseThrow(() -> _				new IllegalStateException(String.format(_					"Failed to find 'public static final SpringClassRule' field in test class [%s]. " +_					"Consult the javadoc for SpringClassRule for details.", testClass.getName())))___		Assert.state(ruleField.isAnnotationPresent(ClassRule.class), () -> String.format(_				"SpringClassRule field [%s] must be annotated with JUnit's @ClassRule annotation. " +_				"Consult the javadoc for SpringClassRule for details.", ruleField))___		return (SpringClassRule) ReflectionUtils.getField(ruleField, null)__	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,static,final,spring,class,rule,field,that,is,annotated,with,code,class,rule;private,static,spring,class,rule,validate,spring,class,rule,configuration,class,test,class,field,rule,field,find,spring,class,rule,field,test,class,or,else,throw,new,illegal,state,exception,string,format,failed,to,find,public,static,final,spring,class,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,assert,state,rule,field,is,annotation,present,class,rule,class,string,format,spring,class,rule,field,s,must,be,annotated,with,junit,s,class,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field,return,spring,class,rule,reflection,utils,get,field,rule,field,null
SpringMethodRule -> private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass);1490036962;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public static final SpringClassRule} field_that is annotated with {@code @ClassRule}.;private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass) {_		Field ruleField = findSpringClassRuleField(testClass).orElseThrow(() ->_				new IllegalStateException(String.format(_					"Failed to find 'public static final SpringClassRule' field in test class [%s]. " +_					"Consult the javadoc for SpringClassRule for details.", testClass.getName())))___		Assert.state(ruleField.isAnnotationPresent(ClassRule.class), () -> String.format(_				"SpringClassRule field [%s] must be annotated with JUnit's @ClassRule annotation. " +_				"Consult the javadoc for SpringClassRule for details.", ruleField))___		return (SpringClassRule) ReflectionUtils.getField(ruleField, null)__	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,static,final,spring,class,rule,field,that,is,annotated,with,code,class,rule;private,static,spring,class,rule,validate,spring,class,rule,configuration,class,test,class,field,rule,field,find,spring,class,rule,field,test,class,or,else,throw,new,illegal,state,exception,string,format,failed,to,find,public,static,final,spring,class,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,assert,state,rule,field,is,annotation,present,class,rule,class,string,format,spring,class,rule,field,s,must,be,annotated,with,junit,s,class,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field,return,spring,class,rule,reflection,utils,get,field,rule,field,null
SpringMethodRule -> private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass);1496955179;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public static final SpringClassRule} field_that is annotated with {@code @ClassRule}.;private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass) {_		Field ruleField = findSpringClassRuleField(testClass).orElseThrow(() ->_				new IllegalStateException(String.format(_					"Failed to find 'public static final SpringClassRule' field in test class [%s]. " +_					"Consult the javadoc for SpringClassRule for details.", testClass.getName())))___		Assert.state(ruleField.isAnnotationPresent(ClassRule.class), () -> String.format(_				"SpringClassRule field [%s] must be annotated with JUnit's @ClassRule annotation. " +_				"Consult the javadoc for SpringClassRule for details.", ruleField))___		Object result = ReflectionUtils.getField(ruleField, null)__		Assert.state(result instanceof SpringClassRule, "SpringClassRule field mismatch")__		return (SpringClassRule) result__	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,static,final,spring,class,rule,field,that,is,annotated,with,code,class,rule;private,static,spring,class,rule,validate,spring,class,rule,configuration,class,test,class,field,rule,field,find,spring,class,rule,field,test,class,or,else,throw,new,illegal,state,exception,string,format,failed,to,find,public,static,final,spring,class,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,assert,state,rule,field,is,annotation,present,class,rule,class,string,format,spring,class,rule,field,s,must,be,annotated,with,junit,s,class,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field,object,result,reflection,utils,get,field,rule,field,null,assert,state,result,instanceof,spring,class,rule,spring,class,rule,field,mismatch,return,spring,class,rule,result
SpringMethodRule -> private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass);1504712302;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public static final SpringClassRule} field_that is annotated with {@code @ClassRule}.;private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass) {_		Field ruleField = findSpringClassRuleField(testClass).orElseThrow(() ->_				new IllegalStateException(String.format(_					"Failed to find 'public static final SpringClassRule' field in test class [%s]. " +_					"Consult the javadoc for SpringClassRule for details.", testClass.getName())))___		Assert.state(ruleField.isAnnotationPresent(ClassRule.class), () -> String.format(_				"SpringClassRule field [%s] must be annotated with JUnit's @ClassRule annotation. " +_				"Consult the javadoc for SpringClassRule for details.", ruleField))___		Object result = ReflectionUtils.getField(ruleField, null)__		Assert.state(result instanceof SpringClassRule, "SpringClassRule field mismatch")__		return (SpringClassRule) result__	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,static,final,spring,class,rule,field,that,is,annotated,with,code,class,rule;private,static,spring,class,rule,validate,spring,class,rule,configuration,class,test,class,field,rule,field,find,spring,class,rule,field,test,class,or,else,throw,new,illegal,state,exception,string,format,failed,to,find,public,static,final,spring,class,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,assert,state,rule,field,is,annotation,present,class,rule,class,string,format,spring,class,rule,field,s,must,be,annotated,with,junit,s,class,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field,object,result,reflection,utils,get,field,rule,field,null,assert,state,result,instanceof,spring,class,rule,spring,class,rule,field,mismatch,return,spring,class,rule,result
SpringMethodRule -> private Statement withAfterTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod, 			Object testInstance, TestContextManager testContextManager);1431875649;Wrap the supplied {@link Statement} with a {@code RunAfterTestMethodCallbacks} statement._@see RunAfterTestMethodCallbacks;private Statement withAfterTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod,_			Object testInstance, TestContextManager testContextManager) {_		return new RunAfterTestMethodCallbacks(statement, testInstance, frameworkMethod.getMethod(), testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,method,callbacks,statement,see,run,after,test,method,callbacks;private,statement,with,after,test,method,callbacks,statement,statement,framework,method,framework,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,after,test,method,callbacks,statement,test,instance,framework,method,get,method,test,context,manager
SpringMethodRule -> private Statement withAfterTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod, 			Object testInstance, TestContextManager testContextManager);1431894269;Wrap the supplied {@link Statement} with a {@code RunAfterTestMethodCallbacks} statement._@see RunAfterTestMethodCallbacks;private Statement withAfterTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod,_			Object testInstance, TestContextManager testContextManager) {_		return new RunAfterTestMethodCallbacks(statement, testInstance, frameworkMethod.getMethod(), testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,method,callbacks,statement,see,run,after,test,method,callbacks;private,statement,with,after,test,method,callbacks,statement,statement,framework,method,framework,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,after,test,method,callbacks,statement,test,instance,framework,method,get,method,test,context,manager
SpringMethodRule -> private Statement withAfterTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod, 			Object testInstance, TestContextManager testContextManager);1431902621;Wrap the supplied {@link Statement} with a {@code RunAfterTestMethodCallbacks} statement._@see RunAfterTestMethodCallbacks;private Statement withAfterTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod,_			Object testInstance, TestContextManager testContextManager) {_		return new RunAfterTestMethodCallbacks(statement, testInstance, frameworkMethod.getMethod(), testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,method,callbacks,statement,see,run,after,test,method,callbacks;private,statement,with,after,test,method,callbacks,statement,statement,framework,method,framework,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,after,test,method,callbacks,statement,test,instance,framework,method,get,method,test,context,manager
SpringMethodRule -> private Statement withAfterTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod, 			Object testInstance, TestContextManager testContextManager);1443464140;Wrap the supplied {@link Statement} with a {@code RunAfterTestMethodCallbacks} statement._@see RunAfterTestMethodCallbacks;private Statement withAfterTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod,_			Object testInstance, TestContextManager testContextManager) {_		return new RunAfterTestMethodCallbacks(statement, testInstance, frameworkMethod.getMethod(), testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,method,callbacks,statement,see,run,after,test,method,callbacks;private,statement,with,after,test,method,callbacks,statement,statement,framework,method,framework,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,after,test,method,callbacks,statement,test,instance,framework,method,get,method,test,context,manager
SpringMethodRule -> private Statement withAfterTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod, 			Object testInstance, TestContextManager testContextManager);1443471070;Wrap the supplied {@link Statement} with a {@code RunAfterTestMethodCallbacks} statement._@see RunAfterTestMethodCallbacks;private Statement withAfterTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunAfterTestMethodCallbacks(_				statement, testInstance, frameworkMethod.getMethod(), testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,method,callbacks,statement,see,run,after,test,method,callbacks;private,statement,with,after,test,method,callbacks,statement,statement,framework,method,framework,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,after,test,method,callbacks,statement,test,instance,framework,method,get,method,test,context,manager
SpringMethodRule -> private Statement withAfterTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod, 			Object testInstance, TestContextManager testContextManager);1450547039;Wrap the supplied {@link Statement} with a {@code RunAfterTestMethodCallbacks} statement._@see RunAfterTestMethodCallbacks;private Statement withAfterTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunAfterTestMethodCallbacks(_				statement, testInstance, frameworkMethod.getMethod(), testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,method,callbacks,statement,see,run,after,test,method,callbacks;private,statement,with,after,test,method,callbacks,statement,statement,framework,method,framework,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,after,test,method,callbacks,statement,test,instance,framework,method,get,method,test,context,manager
SpringMethodRule -> private Statement withAfterTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod, 			Object testInstance, TestContextManager testContextManager);1468244735;Wrap the supplied {@link Statement} with a {@code RunAfterTestMethodCallbacks} statement._@see RunAfterTestMethodCallbacks;private Statement withAfterTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunAfterTestMethodCallbacks(_				statement, testInstance, frameworkMethod.getMethod(), testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,method,callbacks,statement,see,run,after,test,method,callbacks;private,statement,with,after,test,method,callbacks,statement,statement,framework,method,framework,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,after,test,method,callbacks,statement,test,instance,framework,method,get,method,test,context,manager
SpringMethodRule -> private Statement withAfterTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod, 			Object testInstance, TestContextManager testContextManager);1468334463;Wrap the supplied {@link Statement} with a {@code RunAfterTestMethodCallbacks} statement._@see RunAfterTestMethodCallbacks;private Statement withAfterTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunAfterTestMethodCallbacks(_				statement, testInstance, frameworkMethod.getMethod(), testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,method,callbacks,statement,see,run,after,test,method,callbacks;private,statement,with,after,test,method,callbacks,statement,statement,framework,method,framework,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,after,test,method,callbacks,statement,test,instance,framework,method,get,method,test,context,manager
SpringMethodRule -> private static final SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass);1431875649;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public static final SpringClassRule} field_that is annotated with {@code @ClassRule}.;private static final SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass) {_		Field ruleField = null___		for (Field field : testClass.getFields()) {_			if (ReflectionUtils.isPublicStaticFinal(field) && SpringClassRule.class.isAssignableFrom(field.getType())) {_				ruleField = field__				break__			}_		}__		if (ruleField == null) {_			throw new IllegalStateException(String.format(_				"Failed to find 'public static final SpringClassRule' field in test class [%s]. "_						+ "Consult the Javadoc for SpringClassRule for details.", testClass.getName()))__		}__		if (!ruleField.isAnnotationPresent(ClassRule.class)) {_			throw new IllegalStateException(String.format(_				"SpringClassRule field [%s] must be annotated with JUnit's @ClassRule annotation. "_						+ "Consult the Javadoc for SpringClassRule for details.", ruleField))__		}__		return (SpringClassRule) ReflectionUtils.getField(ruleField, null)__	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,static,final,spring,class,rule,field,that,is,annotated,with,code,class,rule;private,static,final,spring,class,rule,validate,spring,class,rule,configuration,class,test,class,field,rule,field,null,for,field,field,test,class,get,fields,if,reflection,utils,is,public,static,final,field,spring,class,rule,class,is,assignable,from,field,get,type,rule,field,field,break,if,rule,field,null,throw,new,illegal,state,exception,string,format,failed,to,find,public,static,final,spring,class,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,if,rule,field,is,annotation,present,class,rule,class,throw,new,illegal,state,exception,string,format,spring,class,rule,field,s,must,be,annotated,with,junit,s,class,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field,return,spring,class,rule,reflection,utils,get,field,rule,field,null
SpringMethodRule -> private static final SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass);1431894269;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public static final SpringClassRule} field_that is annotated with {@code @ClassRule}.;private static final SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass) {_		Field ruleField = null___		for (Field field : testClass.getFields()) {_			if (ReflectionUtils.isPublicStaticFinal(field) && SpringClassRule.class.isAssignableFrom(field.getType())) {_				ruleField = field__				break__			}_		}__		if (ruleField == null) {_			throw new IllegalStateException(String.format(_				"Failed to find 'public static final SpringClassRule' field in test class [%s]. "_						+ "Consult the Javadoc for SpringClassRule for details.", testClass.getName()))__		}__		if (!ruleField.isAnnotationPresent(ClassRule.class)) {_			throw new IllegalStateException(String.format(_				"SpringClassRule field [%s] must be annotated with JUnit's @ClassRule annotation. "_						+ "Consult the Javadoc for SpringClassRule for details.", ruleField))__		}__		return (SpringClassRule) ReflectionUtils.getField(ruleField, null)__	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,static,final,spring,class,rule,field,that,is,annotated,with,code,class,rule;private,static,final,spring,class,rule,validate,spring,class,rule,configuration,class,test,class,field,rule,field,null,for,field,field,test,class,get,fields,if,reflection,utils,is,public,static,final,field,spring,class,rule,class,is,assignable,from,field,get,type,rule,field,field,break,if,rule,field,null,throw,new,illegal,state,exception,string,format,failed,to,find,public,static,final,spring,class,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,if,rule,field,is,annotation,present,class,rule,class,throw,new,illegal,state,exception,string,format,spring,class,rule,field,s,must,be,annotated,with,junit,s,class,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field,return,spring,class,rule,reflection,utils,get,field,rule,field,null
SpringMethodRule -> private static final SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass);1431902621;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public static final SpringClassRule} field_that is annotated with {@code @ClassRule}.;private static final SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass) {_		Field ruleField = null___		for (Field field : testClass.getFields()) {_			if (ReflectionUtils.isPublicStaticFinal(field) && SpringClassRule.class.isAssignableFrom(field.getType())) {_				ruleField = field__				break__			}_		}__		if (ruleField == null) {_			throw new IllegalStateException(String.format(_				"Failed to find 'public static final SpringClassRule' field in test class [%s]. "_						+ "Consult the Javadoc for SpringClassRule for details.", testClass.getName()))__		}__		if (!ruleField.isAnnotationPresent(ClassRule.class)) {_			throw new IllegalStateException(String.format(_				"SpringClassRule field [%s] must be annotated with JUnit's @ClassRule annotation. "_						+ "Consult the Javadoc for SpringClassRule for details.", ruleField))__		}__		return (SpringClassRule) ReflectionUtils.getField(ruleField, null)__	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,static,final,spring,class,rule,field,that,is,annotated,with,code,class,rule;private,static,final,spring,class,rule,validate,spring,class,rule,configuration,class,test,class,field,rule,field,null,for,field,field,test,class,get,fields,if,reflection,utils,is,public,static,final,field,spring,class,rule,class,is,assignable,from,field,get,type,rule,field,field,break,if,rule,field,null,throw,new,illegal,state,exception,string,format,failed,to,find,public,static,final,spring,class,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,if,rule,field,is,annotation,present,class,rule,class,throw,new,illegal,state,exception,string,format,spring,class,rule,field,s,must,be,annotated,with,junit,s,class,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field,return,spring,class,rule,reflection,utils,get,field,rule,field,null
SpringMethodRule -> private static final SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass);1443464140;Throw an {@link IllegalStateException} if the supplied {@code testClass}_does not declare a {@code public static final SpringClassRule} field_that is annotated with {@code @ClassRule}.;private static final SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass) {_		Field ruleField = null___		for (Field field : testClass.getFields()) {_			if (ReflectionUtils.isPublicStaticFinal(field) && SpringClassRule.class.isAssignableFrom(field.getType())) {_				ruleField = field__				break__			}_		}__		if (ruleField == null) {_			throw new IllegalStateException(String.format(_				"Failed to find 'public static final SpringClassRule' field in test class [%s]. "_						+ "Consult the Javadoc for SpringClassRule for details.", testClass.getName()))__		}__		if (!ruleField.isAnnotationPresent(ClassRule.class)) {_			throw new IllegalStateException(String.format(_				"SpringClassRule field [%s] must be annotated with JUnit's @ClassRule annotation. "_						+ "Consult the Javadoc for SpringClassRule for details.", ruleField))__		}__		return (SpringClassRule) ReflectionUtils.getField(ruleField, null)__	};throw,an,link,illegal,state,exception,if,the,supplied,code,test,class,does,not,declare,a,code,public,static,final,spring,class,rule,field,that,is,annotated,with,code,class,rule;private,static,final,spring,class,rule,validate,spring,class,rule,configuration,class,test,class,field,rule,field,null,for,field,field,test,class,get,fields,if,reflection,utils,is,public,static,final,field,spring,class,rule,class,is,assignable,from,field,get,type,rule,field,field,break,if,rule,field,null,throw,new,illegal,state,exception,string,format,failed,to,find,public,static,final,spring,class,rule,field,in,test,class,s,consult,the,javadoc,for,spring,class,rule,for,details,test,class,get,name,if,rule,field,is,annotation,present,class,rule,class,throw,new,illegal,state,exception,string,format,spring,class,rule,field,s,must,be,annotated,with,junit,s,class,rule,annotation,consult,the,javadoc,for,spring,class,rule,for,details,rule,field,return,spring,class,rule,reflection,utils,get,field,rule,field,null
SpringMethodRule -> private Statement withAfterTestMethodCallbacks(Statement next, Method testMethod, 			Object testInstance, TestContextManager testContextManager);1472740443;Wrap the supplied {@link Statement} with a {@code RunAfterTestMethodCallbacks} statement._@see RunAfterTestMethodCallbacks;private Statement withAfterTestMethodCallbacks(Statement next, Method testMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunAfterTestMethodCallbacks(_				next, testInstance, testMethod, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,method,callbacks,statement,see,run,after,test,method,callbacks;private,statement,with,after,test,method,callbacks,statement,next,method,test,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,after,test,method,callbacks,next,test,instance,test,method,test,context,manager
SpringMethodRule -> private Statement withAfterTestMethodCallbacks(Statement next, Method testMethod, 			Object testInstance, TestContextManager testContextManager);1490036962;Wrap the supplied {@link Statement} with a {@code RunAfterTestMethodCallbacks} statement._@see RunAfterTestMethodCallbacks;private Statement withAfterTestMethodCallbacks(Statement next, Method testMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunAfterTestMethodCallbacks(_				next, testInstance, testMethod, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,method,callbacks,statement,see,run,after,test,method,callbacks;private,statement,with,after,test,method,callbacks,statement,next,method,test,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,after,test,method,callbacks,next,test,instance,test,method,test,context,manager
SpringMethodRule -> private Statement withAfterTestMethodCallbacks(Statement next, Method testMethod, 			Object testInstance, TestContextManager testContextManager);1496955179;Wrap the supplied {@link Statement} with a {@code RunAfterTestMethodCallbacks} statement._@see RunAfterTestMethodCallbacks;private Statement withAfterTestMethodCallbacks(Statement next, Method testMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunAfterTestMethodCallbacks(_				next, testInstance, testMethod, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,method,callbacks,statement,see,run,after,test,method,callbacks;private,statement,with,after,test,method,callbacks,statement,next,method,test,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,after,test,method,callbacks,next,test,instance,test,method,test,context,manager
SpringMethodRule -> private Statement withAfterTestMethodCallbacks(Statement next, Method testMethod, 			Object testInstance, TestContextManager testContextManager);1504712302;Wrap the supplied {@link Statement} with a {@code RunAfterTestMethodCallbacks} statement._@see RunAfterTestMethodCallbacks;private Statement withAfterTestMethodCallbacks(Statement next, Method testMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunAfterTestMethodCallbacks(_				next, testInstance, testMethod, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,method,callbacks,statement,see,run,after,test,method,callbacks;private,statement,with,after,test,method,callbacks,statement,next,method,test,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,after,test,method,callbacks,next,test,instance,test,method,test,context,manager
SpringMethodRule -> private Statement withAfterTestMethodCallbacks(Statement next, Method testMethod, 			Object testInstance, TestContextManager testContextManager);1530188116;Wrap the supplied {@link Statement} with a {@code RunAfterTestMethodCallbacks} statement._@see RunAfterTestMethodCallbacks;private Statement withAfterTestMethodCallbacks(Statement next, Method testMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunAfterTestMethodCallbacks(_				next, testInstance, testMethod, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,after,test,method,callbacks,statement,see,run,after,test,method,callbacks;private,statement,with,after,test,method,callbacks,statement,next,method,test,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,after,test,method,callbacks,next,test,instance,test,method,test,context,manager
SpringMethodRule -> private Statement withTestInstancePreparation(Statement statement, Object testInstance, 			TestContextManager testContextManager);1431875649;Wrap the supplied {@link Statement} with a {@code RunPrepareTestInstanceCallbacks} statement._@see RunPrepareTestInstanceCallbacks;private Statement withTestInstancePreparation(Statement statement, Object testInstance,_			TestContextManager testContextManager) {_		return new RunPrepareTestInstanceCallbacks(statement, testInstance, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,prepare,test,instance,callbacks,statement,see,run,prepare,test,instance,callbacks;private,statement,with,test,instance,preparation,statement,statement,object,test,instance,test,context,manager,test,context,manager,return,new,run,prepare,test,instance,callbacks,statement,test,instance,test,context,manager
SpringMethodRule -> private Statement withTestInstancePreparation(Statement statement, Object testInstance, 			TestContextManager testContextManager);1431894269;Wrap the supplied {@link Statement} with a {@code RunPrepareTestInstanceCallbacks} statement._@see RunPrepareTestInstanceCallbacks;private Statement withTestInstancePreparation(Statement statement, Object testInstance,_			TestContextManager testContextManager) {_		return new RunPrepareTestInstanceCallbacks(statement, testInstance, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,prepare,test,instance,callbacks,statement,see,run,prepare,test,instance,callbacks;private,statement,with,test,instance,preparation,statement,statement,object,test,instance,test,context,manager,test,context,manager,return,new,run,prepare,test,instance,callbacks,statement,test,instance,test,context,manager
SpringMethodRule -> private Statement withTestInstancePreparation(Statement statement, Object testInstance, 			TestContextManager testContextManager);1431902621;Wrap the supplied {@link Statement} with a {@code RunPrepareTestInstanceCallbacks} statement._@see RunPrepareTestInstanceCallbacks;private Statement withTestInstancePreparation(Statement statement, Object testInstance,_			TestContextManager testContextManager) {_		return new RunPrepareTestInstanceCallbacks(statement, testInstance, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,prepare,test,instance,callbacks,statement,see,run,prepare,test,instance,callbacks;private,statement,with,test,instance,preparation,statement,statement,object,test,instance,test,context,manager,test,context,manager,return,new,run,prepare,test,instance,callbacks,statement,test,instance,test,context,manager
SpringMethodRule -> private Statement withTestInstancePreparation(Statement statement, Object testInstance, 			TestContextManager testContextManager);1443464140;Wrap the supplied {@link Statement} with a {@code RunPrepareTestInstanceCallbacks} statement._@see RunPrepareTestInstanceCallbacks;private Statement withTestInstancePreparation(Statement statement, Object testInstance,_			TestContextManager testContextManager) {_		return new RunPrepareTestInstanceCallbacks(statement, testInstance, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,prepare,test,instance,callbacks,statement,see,run,prepare,test,instance,callbacks;private,statement,with,test,instance,preparation,statement,statement,object,test,instance,test,context,manager,test,context,manager,return,new,run,prepare,test,instance,callbacks,statement,test,instance,test,context,manager
SpringMethodRule -> private Statement withTestInstancePreparation(Statement statement, Object testInstance, 			TestContextManager testContextManager);1443471070;Wrap the supplied {@link Statement} with a {@code RunPrepareTestInstanceCallbacks} statement._@see RunPrepareTestInstanceCallbacks;private Statement withTestInstancePreparation(Statement statement, Object testInstance,_			TestContextManager testContextManager) {__		return new RunPrepareTestInstanceCallbacks(statement, testInstance, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,prepare,test,instance,callbacks,statement,see,run,prepare,test,instance,callbacks;private,statement,with,test,instance,preparation,statement,statement,object,test,instance,test,context,manager,test,context,manager,return,new,run,prepare,test,instance,callbacks,statement,test,instance,test,context,manager
SpringMethodRule -> private Statement withTestInstancePreparation(Statement statement, Object testInstance, 			TestContextManager testContextManager);1450547039;Wrap the supplied {@link Statement} with a {@code RunPrepareTestInstanceCallbacks} statement._@see RunPrepareTestInstanceCallbacks;private Statement withTestInstancePreparation(Statement statement, Object testInstance,_			TestContextManager testContextManager) {__		return new RunPrepareTestInstanceCallbacks(statement, testInstance, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,prepare,test,instance,callbacks,statement,see,run,prepare,test,instance,callbacks;private,statement,with,test,instance,preparation,statement,statement,object,test,instance,test,context,manager,test,context,manager,return,new,run,prepare,test,instance,callbacks,statement,test,instance,test,context,manager
SpringMethodRule -> private Statement withTestInstancePreparation(Statement statement, Object testInstance, 			TestContextManager testContextManager);1468244735;Wrap the supplied {@link Statement} with a {@code RunPrepareTestInstanceCallbacks} statement._@see RunPrepareTestInstanceCallbacks;private Statement withTestInstancePreparation(Statement statement, Object testInstance,_			TestContextManager testContextManager) {__		return new RunPrepareTestInstanceCallbacks(statement, testInstance, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,prepare,test,instance,callbacks,statement,see,run,prepare,test,instance,callbacks;private,statement,with,test,instance,preparation,statement,statement,object,test,instance,test,context,manager,test,context,manager,return,new,run,prepare,test,instance,callbacks,statement,test,instance,test,context,manager
SpringMethodRule -> private Statement withTestInstancePreparation(Statement statement, Object testInstance, 			TestContextManager testContextManager);1468334463;Wrap the supplied {@link Statement} with a {@code RunPrepareTestInstanceCallbacks} statement._@see RunPrepareTestInstanceCallbacks;private Statement withTestInstancePreparation(Statement statement, Object testInstance,_			TestContextManager testContextManager) {__		return new RunPrepareTestInstanceCallbacks(statement, testInstance, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,prepare,test,instance,callbacks,statement,see,run,prepare,test,instance,callbacks;private,statement,with,test,instance,preparation,statement,statement,object,test,instance,test,context,manager,test,context,manager,return,new,run,prepare,test,instance,callbacks,statement,test,instance,test,context,manager
SpringMethodRule -> private Statement withPotentialTimeout(Statement next, Method testMethod, Object testInstance);1472740443;Wrap the supplied {@link Statement} with a {@code SpringFailOnTimeout} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Timed @Timed}_annotation._@see SpringFailOnTimeout;private Statement withPotentialTimeout(Statement next, Method testMethod, Object testInstance) {_		return new SpringFailOnTimeout(next, testMethod)__	};wrap,the,supplied,link,statement,with,a,code,spring,fail,on,timeout,statement,p,supports,spring,s,link,org,springframework,test,annotation,timed,timed,annotation,see,spring,fail,on,timeout;private,statement,with,potential,timeout,statement,next,method,test,method,object,test,instance,return,new,spring,fail,on,timeout,next,test,method
SpringMethodRule -> private Statement withPotentialTimeout(Statement next, Method testMethod, Object testInstance);1490036962;Wrap the supplied {@link Statement} with a {@code SpringFailOnTimeout} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Timed @Timed}_annotation._@see SpringFailOnTimeout;private Statement withPotentialTimeout(Statement next, Method testMethod, Object testInstance) {_		return new SpringFailOnTimeout(next, testMethod)__	};wrap,the,supplied,link,statement,with,a,code,spring,fail,on,timeout,statement,p,supports,spring,s,link,org,springframework,test,annotation,timed,timed,annotation,see,spring,fail,on,timeout;private,statement,with,potential,timeout,statement,next,method,test,method,object,test,instance,return,new,spring,fail,on,timeout,next,test,method
SpringMethodRule -> private Statement withPotentialTimeout(Statement next, Method testMethod, Object testInstance);1496955179;Wrap the supplied {@link Statement} with a {@code SpringFailOnTimeout} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Timed @Timed}_annotation._@see SpringFailOnTimeout;private Statement withPotentialTimeout(Statement next, Method testMethod, Object testInstance) {_		return new SpringFailOnTimeout(next, testMethod)__	};wrap,the,supplied,link,statement,with,a,code,spring,fail,on,timeout,statement,p,supports,spring,s,link,org,springframework,test,annotation,timed,timed,annotation,see,spring,fail,on,timeout;private,statement,with,potential,timeout,statement,next,method,test,method,object,test,instance,return,new,spring,fail,on,timeout,next,test,method
SpringMethodRule -> private Statement withPotentialTimeout(Statement next, Method testMethod, Object testInstance);1504712302;Wrap the supplied {@link Statement} with a {@code SpringFailOnTimeout} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Timed @Timed}_annotation._@see SpringFailOnTimeout;private Statement withPotentialTimeout(Statement next, Method testMethod, Object testInstance) {_		return new SpringFailOnTimeout(next, testMethod)__	};wrap,the,supplied,link,statement,with,a,code,spring,fail,on,timeout,statement,p,supports,spring,s,link,org,springframework,test,annotation,timed,timed,annotation,see,spring,fail,on,timeout;private,statement,with,potential,timeout,statement,next,method,test,method,object,test,instance,return,new,spring,fail,on,timeout,next,test,method
SpringMethodRule -> private Statement withPotentialTimeout(Statement next, Method testMethod, Object testInstance);1530188116;Wrap the supplied {@link Statement} with a {@code SpringFailOnTimeout} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Timed @Timed}_annotation._@see SpringFailOnTimeout;private Statement withPotentialTimeout(Statement next, Method testMethod, Object testInstance) {_		return new SpringFailOnTimeout(next, testMethod)__	};wrap,the,supplied,link,statement,with,a,code,spring,fail,on,timeout,statement,p,supports,spring,s,link,org,springframework,test,annotation,timed,timed,annotation,see,spring,fail,on,timeout;private,statement,with,potential,timeout,statement,next,method,test,method,object,test,instance,return,new,spring,fail,on,timeout,next,test,method
SpringMethodRule -> private Statement withProfileValueCheck(Statement statement, FrameworkMethod frameworkMethod, Object testInstance);1431875649;Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement statement, FrameworkMethod frameworkMethod, Object testInstance) {_		return new ProfileValueChecker(statement, testInstance.getClass(), frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,statement,framework,method,framework,method,object,test,instance,return,new,profile,value,checker,statement,test,instance,get,class,framework,method,get,method
SpringMethodRule -> private Statement withProfileValueCheck(Statement statement, FrameworkMethod frameworkMethod, Object testInstance);1431894269;Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement statement, FrameworkMethod frameworkMethod, Object testInstance) {_		return new ProfileValueChecker(statement, testInstance.getClass(), frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,statement,framework,method,framework,method,object,test,instance,return,new,profile,value,checker,statement,test,instance,get,class,framework,method,get,method
SpringMethodRule -> private Statement withProfileValueCheck(Statement statement, FrameworkMethod frameworkMethod, Object testInstance);1431902621;Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement statement, FrameworkMethod frameworkMethod, Object testInstance) {_		return new ProfileValueChecker(statement, testInstance.getClass(), frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,statement,framework,method,framework,method,object,test,instance,return,new,profile,value,checker,statement,test,instance,get,class,framework,method,get,method
SpringMethodRule -> private Statement withProfileValueCheck(Statement statement, FrameworkMethod frameworkMethod, Object testInstance);1443464140;Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement statement, FrameworkMethod frameworkMethod, Object testInstance) {_		return new ProfileValueChecker(statement, testInstance.getClass(), frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,statement,framework,method,framework,method,object,test,instance,return,new,profile,value,checker,statement,test,instance,get,class,framework,method,get,method
SpringMethodRule -> private Statement withProfileValueCheck(Statement statement, FrameworkMethod frameworkMethod, Object testInstance);1443471070;Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement statement, FrameworkMethod frameworkMethod, Object testInstance) {_		return new ProfileValueChecker(statement, testInstance.getClass(), frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,statement,framework,method,framework,method,object,test,instance,return,new,profile,value,checker,statement,test,instance,get,class,framework,method,get,method
SpringMethodRule -> private Statement withProfileValueCheck(Statement statement, FrameworkMethod frameworkMethod, Object testInstance);1450547039;Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement statement, FrameworkMethod frameworkMethod, Object testInstance) {_		return new ProfileValueChecker(statement, testInstance.getClass(), frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,statement,framework,method,framework,method,object,test,instance,return,new,profile,value,checker,statement,test,instance,get,class,framework,method,get,method
SpringMethodRule -> private Statement withProfileValueCheck(Statement statement, FrameworkMethod frameworkMethod, Object testInstance);1468244735;Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement statement, FrameworkMethod frameworkMethod, Object testInstance) {_		return new ProfileValueChecker(statement, testInstance.getClass(), frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,statement,framework,method,framework,method,object,test,instance,return,new,profile,value,checker,statement,test,instance,get,class,framework,method,get,method
SpringMethodRule -> private Statement withProfileValueCheck(Statement statement, FrameworkMethod frameworkMethod, Object testInstance);1468334463;Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement statement, FrameworkMethod frameworkMethod, Object testInstance) {_		return new ProfileValueChecker(statement, testInstance.getClass(), frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,statement,framework,method,framework,method,object,test,instance,return,new,profile,value,checker,statement,test,instance,get,class,framework,method,get,method
SpringMethodRule -> private Statement withTestInstancePreparation(Statement next, Object testInstance, 			TestContextManager testContextManager);1472740443;Wrap the supplied {@link Statement} with a {@code RunPrepareTestInstanceCallbacks} statement._@see RunPrepareTestInstanceCallbacks;private Statement withTestInstancePreparation(Statement next, Object testInstance,_			TestContextManager testContextManager) {__		return new RunPrepareTestInstanceCallbacks(next, testInstance, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,prepare,test,instance,callbacks,statement,see,run,prepare,test,instance,callbacks;private,statement,with,test,instance,preparation,statement,next,object,test,instance,test,context,manager,test,context,manager,return,new,run,prepare,test,instance,callbacks,next,test,instance,test,context,manager
SpringMethodRule -> private Statement withTestInstancePreparation(Statement next, Object testInstance, 			TestContextManager testContextManager);1490036962;Wrap the supplied {@link Statement} with a {@code RunPrepareTestInstanceCallbacks} statement._@see RunPrepareTestInstanceCallbacks;private Statement withTestInstancePreparation(Statement next, Object testInstance,_			TestContextManager testContextManager) {__		return new RunPrepareTestInstanceCallbacks(next, testInstance, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,prepare,test,instance,callbacks,statement,see,run,prepare,test,instance,callbacks;private,statement,with,test,instance,preparation,statement,next,object,test,instance,test,context,manager,test,context,manager,return,new,run,prepare,test,instance,callbacks,next,test,instance,test,context,manager
SpringMethodRule -> private Statement withTestInstancePreparation(Statement next, Object testInstance, 			TestContextManager testContextManager);1496955179;Wrap the supplied {@link Statement} with a {@code RunPrepareTestInstanceCallbacks} statement._@see RunPrepareTestInstanceCallbacks;private Statement withTestInstancePreparation(Statement next, Object testInstance,_			TestContextManager testContextManager) {__		return new RunPrepareTestInstanceCallbacks(next, testInstance, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,prepare,test,instance,callbacks,statement,see,run,prepare,test,instance,callbacks;private,statement,with,test,instance,preparation,statement,next,object,test,instance,test,context,manager,test,context,manager,return,new,run,prepare,test,instance,callbacks,next,test,instance,test,context,manager
SpringMethodRule -> private Statement withTestInstancePreparation(Statement next, Object testInstance, 			TestContextManager testContextManager);1504712302;Wrap the supplied {@link Statement} with a {@code RunPrepareTestInstanceCallbacks} statement._@see RunPrepareTestInstanceCallbacks;private Statement withTestInstancePreparation(Statement next, Object testInstance,_			TestContextManager testContextManager) {__		return new RunPrepareTestInstanceCallbacks(next, testInstance, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,prepare,test,instance,callbacks,statement,see,run,prepare,test,instance,callbacks;private,statement,with,test,instance,preparation,statement,next,object,test,instance,test,context,manager,test,context,manager,return,new,run,prepare,test,instance,callbacks,next,test,instance,test,context,manager
SpringMethodRule -> private Statement withPotentialRepeat(Statement next, FrameworkMethod frameworkMethod, Object testInstance);1431875649;Return a {@link Statement} that potentially repeats the execution of_the {@code next} statement._<p>Supports Spring's {@link Repeat @Repeat} annotation by returning a_{@link SpringRepeat} statement initialized with the configured repeat_count (if greater than {@code 1})_ otherwise, the supplied statement_is returned unmodified._@return either a {@code SpringRepeat} or the supplied {@code Statement}_@see SpringRepeat;private Statement withPotentialRepeat(Statement next, FrameworkMethod frameworkMethod, Object testInstance) {_		Repeat repeatAnnotation = AnnotationUtils.getAnnotation(frameworkMethod.getMethod(), Repeat.class)__		int repeat = (repeatAnnotation != null ? repeatAnnotation.value() : 1)__		return (repeat > 1 ? new SpringRepeat(next, frameworkMethod.getMethod(), repeat) : next)__	};return,a,link,statement,that,potentially,repeats,the,execution,of,the,code,next,statement,p,supports,spring,s,link,repeat,repeat,annotation,by,returning,a,link,spring,repeat,statement,initialized,with,the,configured,repeat,count,if,greater,than,code,1,otherwise,the,supplied,statement,is,returned,unmodified,return,either,a,code,spring,repeat,or,the,supplied,code,statement,see,spring,repeat;private,statement,with,potential,repeat,statement,next,framework,method,framework,method,object,test,instance,repeat,repeat,annotation,annotation,utils,get,annotation,framework,method,get,method,repeat,class,int,repeat,repeat,annotation,null,repeat,annotation,value,1,return,repeat,1,new,spring,repeat,next,framework,method,get,method,repeat,next
SpringMethodRule -> private Statement withPotentialRepeat(Statement next, FrameworkMethod frameworkMethod, Object testInstance);1431894269;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see TestAnnotationUtils#getRepeatCount(java.lang.reflect.Method)_@see SpringRepeat;private Statement withPotentialRepeat(Statement next, FrameworkMethod frameworkMethod, Object testInstance) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,test,annotation,utils,get,repeat,count,java,lang,reflect,method,see,spring,repeat;private,statement,with,potential,repeat,statement,next,framework,method,framework,method,object,test,instance,return,new,spring,repeat,next,framework,method,get,method
SpringMethodRule -> private Statement withPotentialRepeat(Statement next, FrameworkMethod frameworkMethod, Object testInstance);1431902621;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see SpringRepeat;private Statement withPotentialRepeat(Statement next, FrameworkMethod frameworkMethod, Object testInstance) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,spring,repeat;private,statement,with,potential,repeat,statement,next,framework,method,framework,method,object,test,instance,return,new,spring,repeat,next,framework,method,get,method
SpringMethodRule -> private Statement withPotentialRepeat(Statement next, FrameworkMethod frameworkMethod, Object testInstance);1443464140;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see SpringRepeat;private Statement withPotentialRepeat(Statement next, FrameworkMethod frameworkMethod, Object testInstance) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,spring,repeat;private,statement,with,potential,repeat,statement,next,framework,method,framework,method,object,test,instance,return,new,spring,repeat,next,framework,method,get,method
SpringMethodRule -> private Statement withPotentialRepeat(Statement next, FrameworkMethod frameworkMethod, Object testInstance);1443471070;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see SpringRepeat;private Statement withPotentialRepeat(Statement next, FrameworkMethod frameworkMethod, Object testInstance) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,spring,repeat;private,statement,with,potential,repeat,statement,next,framework,method,framework,method,object,test,instance,return,new,spring,repeat,next,framework,method,get,method
SpringMethodRule -> private Statement withPotentialRepeat(Statement next, FrameworkMethod frameworkMethod, Object testInstance);1450547039;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see SpringRepeat;private Statement withPotentialRepeat(Statement next, FrameworkMethod frameworkMethod, Object testInstance) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,spring,repeat;private,statement,with,potential,repeat,statement,next,framework,method,framework,method,object,test,instance,return,new,spring,repeat,next,framework,method,get,method
SpringMethodRule -> private Statement withPotentialRepeat(Statement next, FrameworkMethod frameworkMethod, Object testInstance);1468244735;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see SpringRepeat;private Statement withPotentialRepeat(Statement next, FrameworkMethod frameworkMethod, Object testInstance) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,spring,repeat;private,statement,with,potential,repeat,statement,next,framework,method,framework,method,object,test,instance,return,new,spring,repeat,next,framework,method,get,method
SpringMethodRule -> private Statement withPotentialRepeat(Statement next, FrameworkMethod frameworkMethod, Object testInstance);1468334463;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see SpringRepeat;private Statement withPotentialRepeat(Statement next, FrameworkMethod frameworkMethod, Object testInstance) {_		return new SpringRepeat(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,spring,repeat;private,statement,with,potential,repeat,statement,next,framework,method,framework,method,object,test,instance,return,new,spring,repeat,next,framework,method,get,method
SpringMethodRule -> private Statement withPotentialRepeat(Statement next, Method testMethod, Object testInstance);1472740443;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see SpringRepeat;private Statement withPotentialRepeat(Statement next, Method testMethod, Object testInstance) {_		return new SpringRepeat(next, testMethod)__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,spring,repeat;private,statement,with,potential,repeat,statement,next,method,test,method,object,test,instance,return,new,spring,repeat,next,test,method
SpringMethodRule -> private Statement withPotentialRepeat(Statement next, Method testMethod, Object testInstance);1490036962;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see SpringRepeat;private Statement withPotentialRepeat(Statement next, Method testMethod, Object testInstance) {_		return new SpringRepeat(next, testMethod)__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,spring,repeat;private,statement,with,potential,repeat,statement,next,method,test,method,object,test,instance,return,new,spring,repeat,next,test,method
SpringMethodRule -> private Statement withPotentialRepeat(Statement next, Method testMethod, Object testInstance);1496955179;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see SpringRepeat;private Statement withPotentialRepeat(Statement next, Method testMethod, Object testInstance) {_		return new SpringRepeat(next, testMethod)__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,spring,repeat;private,statement,with,potential,repeat,statement,next,method,test,method,object,test,instance,return,new,spring,repeat,next,test,method
SpringMethodRule -> private Statement withPotentialRepeat(Statement next, Method testMethod, Object testInstance);1504712302;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see SpringRepeat;private Statement withPotentialRepeat(Statement next, Method testMethod, Object testInstance) {_		return new SpringRepeat(next, testMethod)__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,spring,repeat;private,statement,with,potential,repeat,statement,next,method,test,method,object,test,instance,return,new,spring,repeat,next,test,method
SpringMethodRule -> private Statement withPotentialRepeat(Statement next, Method testMethod, Object testInstance);1530188116;Wrap the supplied {@link Statement} with a {@code SpringRepeat} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Repeat @Repeat}_annotation._@see SpringRepeat;private Statement withPotentialRepeat(Statement next, Method testMethod, Object testInstance) {_		return new SpringRepeat(next, testMethod)__	};wrap,the,supplied,link,statement,with,a,code,spring,repeat,statement,p,supports,spring,s,link,org,springframework,test,annotation,repeat,repeat,annotation,see,spring,repeat;private,statement,with,potential,repeat,statement,next,method,test,method,object,test,instance,return,new,spring,repeat,next,test,method
SpringMethodRule -> private Statement withBeforeTestMethodCallbacks(Statement next, Method testMethod, 			Object testInstance, TestContextManager testContextManager);1472740443;Wrap the supplied {@link Statement} with a {@code RunBeforeTestMethodCallbacks} statement._@see RunBeforeTestMethodCallbacks;private Statement withBeforeTestMethodCallbacks(Statement next, Method testMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunBeforeTestMethodCallbacks(_				next, testInstance, testMethod, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,method,callbacks,statement,see,run,before,test,method,callbacks;private,statement,with,before,test,method,callbacks,statement,next,method,test,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,before,test,method,callbacks,next,test,instance,test,method,test,context,manager
SpringMethodRule -> private Statement withBeforeTestMethodCallbacks(Statement next, Method testMethod, 			Object testInstance, TestContextManager testContextManager);1490036962;Wrap the supplied {@link Statement} with a {@code RunBeforeTestMethodCallbacks} statement._@see RunBeforeTestMethodCallbacks;private Statement withBeforeTestMethodCallbacks(Statement next, Method testMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunBeforeTestMethodCallbacks(_				next, testInstance, testMethod, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,method,callbacks,statement,see,run,before,test,method,callbacks;private,statement,with,before,test,method,callbacks,statement,next,method,test,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,before,test,method,callbacks,next,test,instance,test,method,test,context,manager
SpringMethodRule -> private Statement withBeforeTestMethodCallbacks(Statement next, Method testMethod, 			Object testInstance, TestContextManager testContextManager);1496955179;Wrap the supplied {@link Statement} with a {@code RunBeforeTestMethodCallbacks} statement._@see RunBeforeTestMethodCallbacks;private Statement withBeforeTestMethodCallbacks(Statement next, Method testMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunBeforeTestMethodCallbacks(_				next, testInstance, testMethod, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,method,callbacks,statement,see,run,before,test,method,callbacks;private,statement,with,before,test,method,callbacks,statement,next,method,test,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,before,test,method,callbacks,next,test,instance,test,method,test,context,manager
SpringMethodRule -> private Statement withBeforeTestMethodCallbacks(Statement next, Method testMethod, 			Object testInstance, TestContextManager testContextManager);1504712302;Wrap the supplied {@link Statement} with a {@code RunBeforeTestMethodCallbacks} statement._@see RunBeforeTestMethodCallbacks;private Statement withBeforeTestMethodCallbacks(Statement next, Method testMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunBeforeTestMethodCallbacks(_				next, testInstance, testMethod, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,method,callbacks,statement,see,run,before,test,method,callbacks;private,statement,with,before,test,method,callbacks,statement,next,method,test,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,before,test,method,callbacks,next,test,instance,test,method,test,context,manager
SpringMethodRule -> private Statement withBeforeTestMethodCallbacks(Statement next, Method testMethod, 			Object testInstance, TestContextManager testContextManager);1530188116;Wrap the supplied {@link Statement} with a {@code RunBeforeTestMethodCallbacks} statement._@see RunBeforeTestMethodCallbacks;private Statement withBeforeTestMethodCallbacks(Statement next, Method testMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunBeforeTestMethodCallbacks(_				next, testInstance, testMethod, testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,method,callbacks,statement,see,run,before,test,method,callbacks;private,statement,with,before,test,method,callbacks,statement,next,method,test,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,before,test,method,callbacks,next,test,instance,test,method,test,context,manager
SpringMethodRule -> @Override 	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance);1431875649;Apply <em>instance-level</em> and <em>method-level</em> features of_the <em>Spring TestContext Framework</em> to the supplied {@code base}_statement.__<p>Specifically, this method invokes the_{@link TestContextManager#prepareTestInstance prepareTestInstance()},_{@link TestContextManager#beforeTestMethod beforeTestMethod()}, and_{@link TestContextManager#afterTestMethod afterTestMethod()} methods_on the {@code TestContextManager}, potentially with Spring timeouts_and repetitions.__<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents methods with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code prepareTestInstance()} methods_in {@code TestExecutionListeners}.__@param base the base {@code Statement} that this rule should be applied to_@param frameworkMethod the method which is about to be invoked on the test instance_@param testInstance the current test instance_@return a statement that wraps the supplied {@code base} with instance-level_and method-level features of the Spring TestContext Framework_@see #withBeforeTestMethodCallbacks_@see #withAfterTestMethodCallbacks_@see #withPotentialRepeat_@see #withPotentialTimeout_@see #withTestInstancePreparation_@see #withProfileValueCheck;@Override_	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) {_		Class<?> testClass = testInstance.getClass()___		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringMethodRule to test method [" + frameworkMethod.getMethod() + "].")__		}__		validateSpringClassRuleConfiguration(testClass)___		TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)__		statement = withAfterTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)__		statement = withTestInstancePreparation(statement, testInstance, testContextManager)__		statement = withPotentialRepeat(statement, frameworkMethod, testInstance)__		statement = withPotentialTimeout(statement, frameworkMethod, testInstance)__		statement = withProfileValueCheck(statement, frameworkMethod, testInstance)__		return statement__	};apply,em,instance,level,em,and,em,method,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,invokes,the,link,test,context,manager,prepare,test,instance,prepare,test,instance,link,test,context,manager,before,test,method,before,test,method,and,link,test,context,manager,after,test,method,after,test,method,methods,on,the,code,test,context,manager,potentially,with,spring,timeouts,and,repetitions,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,methods,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,framework,method,the,method,which,is,about,to,be,invoked,on,the,test,instance,param,test,instance,the,current,test,instance,return,a,statement,that,wraps,the,supplied,code,base,with,instance,level,and,method,level,features,of,the,spring,test,context,framework,see,with,before,test,method,callbacks,see,with,after,test,method,callbacks,see,with,potential,repeat,see,with,potential,timeout,see,with,test,instance,preparation,see,with,profile,value,check;override,public,statement,apply,statement,base,framework,method,framework,method,object,test,instance,class,test,class,test,instance,get,class,if,logger,is,debug,enabled,logger,debug,applying,spring,method,rule,to,test,method,framework,method,get,method,validate,spring,class,rule,configuration,test,class,test,context,manager,test,context,manager,spring,class,rule,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,method,callbacks,statement,framework,method,test,instance,test,context,manager,statement,with,after,test,method,callbacks,statement,framework,method,test,instance,test,context,manager,statement,with,test,instance,preparation,statement,test,instance,test,context,manager,statement,with,potential,repeat,statement,framework,method,test,instance,statement,with,potential,timeout,statement,framework,method,test,instance,statement,with,profile,value,check,statement,framework,method,test,instance,return,statement
SpringMethodRule -> @Override 	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance);1431894269;Apply <em>instance-level</em> and <em>method-level</em> features of_the <em>Spring TestContext Framework</em> to the supplied {@code base}_statement.__<p>Specifically, this method invokes the_{@link TestContextManager#prepareTestInstance prepareTestInstance()},_{@link TestContextManager#beforeTestMethod beforeTestMethod()}, and_{@link TestContextManager#afterTestMethod afterTestMethod()} methods_on the {@code TestContextManager}, potentially with Spring timeouts_and repetitions.__<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents methods with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code prepareTestInstance()} methods_in {@code TestExecutionListeners}.__@param base the base {@code Statement} that this rule should be applied to_@param frameworkMethod the method which is about to be invoked on the test instance_@param testInstance the current test instance_@return a statement that wraps the supplied {@code base} with instance-level_and method-level features of the Spring TestContext Framework_@see #withBeforeTestMethodCallbacks_@see #withAfterTestMethodCallbacks_@see #withPotentialRepeat_@see #withPotentialTimeout_@see #withTestInstancePreparation_@see #withProfileValueCheck;@Override_	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) {_		Class<?> testClass = testInstance.getClass()___		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringMethodRule to test method [" + frameworkMethod.getMethod() + "].")__		}__		validateSpringClassRuleConfiguration(testClass)___		TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)__		statement = withAfterTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)__		statement = withTestInstancePreparation(statement, testInstance, testContextManager)__		statement = withPotentialRepeat(statement, frameworkMethod, testInstance)__		statement = withPotentialTimeout(statement, frameworkMethod, testInstance)__		statement = withProfileValueCheck(statement, frameworkMethod, testInstance)__		return statement__	};apply,em,instance,level,em,and,em,method,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,invokes,the,link,test,context,manager,prepare,test,instance,prepare,test,instance,link,test,context,manager,before,test,method,before,test,method,and,link,test,context,manager,after,test,method,after,test,method,methods,on,the,code,test,context,manager,potentially,with,spring,timeouts,and,repetitions,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,methods,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,framework,method,the,method,which,is,about,to,be,invoked,on,the,test,instance,param,test,instance,the,current,test,instance,return,a,statement,that,wraps,the,supplied,code,base,with,instance,level,and,method,level,features,of,the,spring,test,context,framework,see,with,before,test,method,callbacks,see,with,after,test,method,callbacks,see,with,potential,repeat,see,with,potential,timeout,see,with,test,instance,preparation,see,with,profile,value,check;override,public,statement,apply,statement,base,framework,method,framework,method,object,test,instance,class,test,class,test,instance,get,class,if,logger,is,debug,enabled,logger,debug,applying,spring,method,rule,to,test,method,framework,method,get,method,validate,spring,class,rule,configuration,test,class,test,context,manager,test,context,manager,spring,class,rule,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,method,callbacks,statement,framework,method,test,instance,test,context,manager,statement,with,after,test,method,callbacks,statement,framework,method,test,instance,test,context,manager,statement,with,test,instance,preparation,statement,test,instance,test,context,manager,statement,with,potential,repeat,statement,framework,method,test,instance,statement,with,potential,timeout,statement,framework,method,test,instance,statement,with,profile,value,check,statement,framework,method,test,instance,return,statement
SpringMethodRule -> @Override 	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance);1431902621;Apply <em>instance-level</em> and <em>method-level</em> features of_the <em>Spring TestContext Framework</em> to the supplied {@code base}_statement.__<p>Specifically, this method invokes the_{@link TestContextManager#prepareTestInstance prepareTestInstance()},_{@link TestContextManager#beforeTestMethod beforeTestMethod()}, and_{@link TestContextManager#afterTestMethod afterTestMethod()} methods_on the {@code TestContextManager}, potentially with Spring timeouts_and repetitions.__<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents methods with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code prepareTestInstance()} methods_in {@code TestExecutionListeners}.__@param base the base {@code Statement} that this rule should be applied to_@param frameworkMethod the method which is about to be invoked on the test instance_@param testInstance the current test instance_@return a statement that wraps the supplied {@code base} with instance-level_and method-level features of the Spring TestContext Framework_@see #withBeforeTestMethodCallbacks_@see #withAfterTestMethodCallbacks_@see #withPotentialRepeat_@see #withPotentialTimeout_@see #withTestInstancePreparation_@see #withProfileValueCheck;@Override_	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) {_		Class<?> testClass = testInstance.getClass()___		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringMethodRule to test method [" + frameworkMethod.getMethod() + "].")__		}__		validateSpringClassRuleConfiguration(testClass)___		TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)__		statement = withAfterTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)__		statement = withTestInstancePreparation(statement, testInstance, testContextManager)__		statement = withPotentialRepeat(statement, frameworkMethod, testInstance)__		statement = withPotentialTimeout(statement, frameworkMethod, testInstance)__		statement = withProfileValueCheck(statement, frameworkMethod, testInstance)__		return statement__	};apply,em,instance,level,em,and,em,method,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,invokes,the,link,test,context,manager,prepare,test,instance,prepare,test,instance,link,test,context,manager,before,test,method,before,test,method,and,link,test,context,manager,after,test,method,after,test,method,methods,on,the,code,test,context,manager,potentially,with,spring,timeouts,and,repetitions,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,methods,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,framework,method,the,method,which,is,about,to,be,invoked,on,the,test,instance,param,test,instance,the,current,test,instance,return,a,statement,that,wraps,the,supplied,code,base,with,instance,level,and,method,level,features,of,the,spring,test,context,framework,see,with,before,test,method,callbacks,see,with,after,test,method,callbacks,see,with,potential,repeat,see,with,potential,timeout,see,with,test,instance,preparation,see,with,profile,value,check;override,public,statement,apply,statement,base,framework,method,framework,method,object,test,instance,class,test,class,test,instance,get,class,if,logger,is,debug,enabled,logger,debug,applying,spring,method,rule,to,test,method,framework,method,get,method,validate,spring,class,rule,configuration,test,class,test,context,manager,test,context,manager,spring,class,rule,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,method,callbacks,statement,framework,method,test,instance,test,context,manager,statement,with,after,test,method,callbacks,statement,framework,method,test,instance,test,context,manager,statement,with,test,instance,preparation,statement,test,instance,test,context,manager,statement,with,potential,repeat,statement,framework,method,test,instance,statement,with,potential,timeout,statement,framework,method,test,instance,statement,with,profile,value,check,statement,framework,method,test,instance,return,statement
SpringMethodRule -> @Override 	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance);1443464140;Apply <em>instance-level</em> and <em>method-level</em> features of_the <em>Spring TestContext Framework</em> to the supplied {@code base}_statement.__<p>Specifically, this method invokes the_{@link TestContextManager#prepareTestInstance prepareTestInstance()},_{@link TestContextManager#beforeTestMethod beforeTestMethod()}, and_{@link TestContextManager#afterTestMethod afterTestMethod()} methods_on the {@code TestContextManager}, potentially with Spring timeouts_and repetitions.__<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents methods with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code prepareTestInstance()} methods_in {@code TestExecutionListeners}.__@param base the base {@code Statement} that this rule should be applied to_@param frameworkMethod the method which is about to be invoked on the test instance_@param testInstance the current test instance_@return a statement that wraps the supplied {@code base} with instance-level_and method-level features of the Spring TestContext Framework_@see #withBeforeTestMethodCallbacks_@see #withAfterTestMethodCallbacks_@see #withPotentialRepeat_@see #withPotentialTimeout_@see #withTestInstancePreparation_@see #withProfileValueCheck;@Override_	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) {_		Class<?> testClass = testInstance.getClass()___		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringMethodRule to test method [" + frameworkMethod.getMethod() + "].")__		}__		validateSpringClassRuleConfiguration(testClass)___		TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)__		statement = withAfterTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)__		statement = withTestInstancePreparation(statement, testInstance, testContextManager)__		statement = withPotentialRepeat(statement, frameworkMethod, testInstance)__		statement = withPotentialTimeout(statement, frameworkMethod, testInstance)__		statement = withProfileValueCheck(statement, frameworkMethod, testInstance)__		return statement__	};apply,em,instance,level,em,and,em,method,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,invokes,the,link,test,context,manager,prepare,test,instance,prepare,test,instance,link,test,context,manager,before,test,method,before,test,method,and,link,test,context,manager,after,test,method,after,test,method,methods,on,the,code,test,context,manager,potentially,with,spring,timeouts,and,repetitions,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,methods,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,framework,method,the,method,which,is,about,to,be,invoked,on,the,test,instance,param,test,instance,the,current,test,instance,return,a,statement,that,wraps,the,supplied,code,base,with,instance,level,and,method,level,features,of,the,spring,test,context,framework,see,with,before,test,method,callbacks,see,with,after,test,method,callbacks,see,with,potential,repeat,see,with,potential,timeout,see,with,test,instance,preparation,see,with,profile,value,check;override,public,statement,apply,statement,base,framework,method,framework,method,object,test,instance,class,test,class,test,instance,get,class,if,logger,is,debug,enabled,logger,debug,applying,spring,method,rule,to,test,method,framework,method,get,method,validate,spring,class,rule,configuration,test,class,test,context,manager,test,context,manager,spring,class,rule,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,method,callbacks,statement,framework,method,test,instance,test,context,manager,statement,with,after,test,method,callbacks,statement,framework,method,test,instance,test,context,manager,statement,with,test,instance,preparation,statement,test,instance,test,context,manager,statement,with,potential,repeat,statement,framework,method,test,instance,statement,with,potential,timeout,statement,framework,method,test,instance,statement,with,profile,value,check,statement,framework,method,test,instance,return,statement
SpringMethodRule -> @Override 	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance);1443471070;Apply <em>instance-level</em> and <em>method-level</em> features of_the <em>Spring TestContext Framework</em> to the supplied {@code base}_statement._<p>Specifically, this method invokes the_{@link TestContextManager#prepareTestInstance prepareTestInstance()},_{@link TestContextManager#beforeTestMethod beforeTestMethod()}, and_{@link TestContextManager#afterTestMethod afterTestMethod()} methods_on the {@code TestContextManager}, potentially with Spring timeouts_and repetitions._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents methods with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code prepareTestInstance()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param frameworkMethod the method which is about to be invoked on the test instance_@param testInstance the current test instance_@return a statement that wraps the supplied {@code base} with instance-level_and method-level features of the Spring TestContext Framework_@see #withBeforeTestMethodCallbacks_@see #withAfterTestMethodCallbacks_@see #withPotentialRepeat_@see #withPotentialTimeout_@see #withTestInstancePreparation_@see #withProfileValueCheck;@Override_	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) {_		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringMethodRule to test method [" + frameworkMethod.getMethod() + "]")__		}_		Class<?> testClass = testInstance.getClass()__		validateSpringClassRuleConfiguration(testClass)__		TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)__		statement = withAfterTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)__		statement = withTestInstancePreparation(statement, testInstance, testContextManager)__		statement = withPotentialRepeat(statement, frameworkMethod, testInstance)__		statement = withPotentialTimeout(statement, frameworkMethod, testInstance)__		statement = withProfileValueCheck(statement, frameworkMethod, testInstance)__		return statement__	};apply,em,instance,level,em,and,em,method,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,invokes,the,link,test,context,manager,prepare,test,instance,prepare,test,instance,link,test,context,manager,before,test,method,before,test,method,and,link,test,context,manager,after,test,method,after,test,method,methods,on,the,code,test,context,manager,potentially,with,spring,timeouts,and,repetitions,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,methods,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,framework,method,the,method,which,is,about,to,be,invoked,on,the,test,instance,param,test,instance,the,current,test,instance,return,a,statement,that,wraps,the,supplied,code,base,with,instance,level,and,method,level,features,of,the,spring,test,context,framework,see,with,before,test,method,callbacks,see,with,after,test,method,callbacks,see,with,potential,repeat,see,with,potential,timeout,see,with,test,instance,preparation,see,with,profile,value,check;override,public,statement,apply,statement,base,framework,method,framework,method,object,test,instance,if,logger,is,debug,enabled,logger,debug,applying,spring,method,rule,to,test,method,framework,method,get,method,class,test,class,test,instance,get,class,validate,spring,class,rule,configuration,test,class,test,context,manager,test,context,manager,spring,class,rule,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,method,callbacks,statement,framework,method,test,instance,test,context,manager,statement,with,after,test,method,callbacks,statement,framework,method,test,instance,test,context,manager,statement,with,test,instance,preparation,statement,test,instance,test,context,manager,statement,with,potential,repeat,statement,framework,method,test,instance,statement,with,potential,timeout,statement,framework,method,test,instance,statement,with,profile,value,check,statement,framework,method,test,instance,return,statement
SpringMethodRule -> @Override 	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance);1450547039;Apply <em>instance-level</em> and <em>method-level</em> features of_the <em>Spring TestContext Framework</em> to the supplied {@code base}_statement._<p>Specifically, this method invokes the_{@link TestContextManager#prepareTestInstance prepareTestInstance()},_{@link TestContextManager#beforeTestMethod beforeTestMethod()}, and_{@link TestContextManager#afterTestMethod afterTestMethod()} methods_on the {@code TestContextManager}, potentially with Spring timeouts_and repetitions._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents methods with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code prepareTestInstance()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param frameworkMethod the method which is about to be invoked on the test instance_@param testInstance the current test instance_@return a statement that wraps the supplied {@code base} with instance-level_and method-level features of the Spring TestContext Framework_@see #withBeforeTestMethodCallbacks_@see #withAfterTestMethodCallbacks_@see #withPotentialRepeat_@see #withPotentialTimeout_@see #withTestInstancePreparation_@see #withProfileValueCheck;@Override_	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) {_		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringMethodRule to test method [" + frameworkMethod.getMethod() + "]")__		}_		Class<?> testClass = testInstance.getClass()__		validateSpringClassRuleConfiguration(testClass)__		TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)__		statement = withAfterTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)__		statement = withTestInstancePreparation(statement, testInstance, testContextManager)__		statement = withPotentialRepeat(statement, frameworkMethod, testInstance)__		statement = withPotentialTimeout(statement, frameworkMethod, testInstance)__		statement = withProfileValueCheck(statement, frameworkMethod, testInstance)__		return statement__	};apply,em,instance,level,em,and,em,method,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,invokes,the,link,test,context,manager,prepare,test,instance,prepare,test,instance,link,test,context,manager,before,test,method,before,test,method,and,link,test,context,manager,after,test,method,after,test,method,methods,on,the,code,test,context,manager,potentially,with,spring,timeouts,and,repetitions,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,methods,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,framework,method,the,method,which,is,about,to,be,invoked,on,the,test,instance,param,test,instance,the,current,test,instance,return,a,statement,that,wraps,the,supplied,code,base,with,instance,level,and,method,level,features,of,the,spring,test,context,framework,see,with,before,test,method,callbacks,see,with,after,test,method,callbacks,see,with,potential,repeat,see,with,potential,timeout,see,with,test,instance,preparation,see,with,profile,value,check;override,public,statement,apply,statement,base,framework,method,framework,method,object,test,instance,if,logger,is,debug,enabled,logger,debug,applying,spring,method,rule,to,test,method,framework,method,get,method,class,test,class,test,instance,get,class,validate,spring,class,rule,configuration,test,class,test,context,manager,test,context,manager,spring,class,rule,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,method,callbacks,statement,framework,method,test,instance,test,context,manager,statement,with,after,test,method,callbacks,statement,framework,method,test,instance,test,context,manager,statement,with,test,instance,preparation,statement,test,instance,test,context,manager,statement,with,potential,repeat,statement,framework,method,test,instance,statement,with,potential,timeout,statement,framework,method,test,instance,statement,with,profile,value,check,statement,framework,method,test,instance,return,statement
SpringMethodRule -> @Override 	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance);1468244735;Apply <em>instance-level</em> and <em>method-level</em> features of_the <em>Spring TestContext Framework</em> to the supplied {@code base}_statement._<p>Specifically, this method invokes the_{@link TestContextManager#prepareTestInstance prepareTestInstance()},_{@link TestContextManager#beforeTestMethod beforeTestMethod()}, and_{@link TestContextManager#afterTestMethod afterTestMethod()} methods_on the {@code TestContextManager}, potentially with Spring timeouts_and repetitions._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents methods with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code prepareTestInstance()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param frameworkMethod the method which is about to be invoked on the test instance_@param testInstance the current test instance_@return a statement that wraps the supplied {@code base} with instance-level_and method-level features of the Spring TestContext Framework_@see #withBeforeTestMethodCallbacks_@see #withAfterTestMethodCallbacks_@see #withPotentialRepeat_@see #withPotentialTimeout_@see #withTestInstancePreparation_@see #withProfileValueCheck;@Override_	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) {_		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringMethodRule to test method [" + frameworkMethod.getMethod() + "]")__		}_		Class<?> testClass = testInstance.getClass()__		validateSpringClassRuleConfiguration(testClass)__		TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)__		statement = withAfterTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)__		statement = withTestInstancePreparation(statement, testInstance, testContextManager)__		statement = withPotentialRepeat(statement, frameworkMethod, testInstance)__		statement = withPotentialTimeout(statement, frameworkMethod, testInstance)__		statement = withProfileValueCheck(statement, frameworkMethod, testInstance)__		return statement__	};apply,em,instance,level,em,and,em,method,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,invokes,the,link,test,context,manager,prepare,test,instance,prepare,test,instance,link,test,context,manager,before,test,method,before,test,method,and,link,test,context,manager,after,test,method,after,test,method,methods,on,the,code,test,context,manager,potentially,with,spring,timeouts,and,repetitions,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,methods,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,framework,method,the,method,which,is,about,to,be,invoked,on,the,test,instance,param,test,instance,the,current,test,instance,return,a,statement,that,wraps,the,supplied,code,base,with,instance,level,and,method,level,features,of,the,spring,test,context,framework,see,with,before,test,method,callbacks,see,with,after,test,method,callbacks,see,with,potential,repeat,see,with,potential,timeout,see,with,test,instance,preparation,see,with,profile,value,check;override,public,statement,apply,statement,base,framework,method,framework,method,object,test,instance,if,logger,is,debug,enabled,logger,debug,applying,spring,method,rule,to,test,method,framework,method,get,method,class,test,class,test,instance,get,class,validate,spring,class,rule,configuration,test,class,test,context,manager,test,context,manager,spring,class,rule,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,method,callbacks,statement,framework,method,test,instance,test,context,manager,statement,with,after,test,method,callbacks,statement,framework,method,test,instance,test,context,manager,statement,with,test,instance,preparation,statement,test,instance,test,context,manager,statement,with,potential,repeat,statement,framework,method,test,instance,statement,with,potential,timeout,statement,framework,method,test,instance,statement,with,profile,value,check,statement,framework,method,test,instance,return,statement
SpringMethodRule -> @Override 	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance);1468334463;Apply <em>instance-level</em> and <em>method-level</em> features of_the <em>Spring TestContext Framework</em> to the supplied {@code base}_statement._<p>Specifically, this method invokes the_{@link TestContextManager#prepareTestInstance prepareTestInstance()},_{@link TestContextManager#beforeTestMethod beforeTestMethod()}, and_{@link TestContextManager#afterTestMethod afterTestMethod()} methods_on the {@code TestContextManager}, potentially with Spring timeouts_and repetitions._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents methods with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code prepareTestInstance()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param frameworkMethod the method which is about to be invoked on the test instance_@param testInstance the current test instance_@return a statement that wraps the supplied {@code base} with instance-level_and method-level features of the Spring TestContext Framework_@see #withBeforeTestMethodCallbacks_@see #withAfterTestMethodCallbacks_@see #withPotentialRepeat_@see #withPotentialTimeout_@see #withTestInstancePreparation_@see #withProfileValueCheck;@Override_	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) {_		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringMethodRule to test method [" + frameworkMethod.getMethod() + "]")__		}_		Class<?> testClass = testInstance.getClass()__		validateSpringClassRuleConfiguration(testClass)__		TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)__		statement = withAfterTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)__		statement = withTestInstancePreparation(statement, testInstance, testContextManager)__		statement = withPotentialRepeat(statement, frameworkMethod, testInstance)__		statement = withPotentialTimeout(statement, frameworkMethod, testInstance)__		statement = withProfileValueCheck(statement, frameworkMethod, testInstance)__		return statement__	};apply,em,instance,level,em,and,em,method,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,invokes,the,link,test,context,manager,prepare,test,instance,prepare,test,instance,link,test,context,manager,before,test,method,before,test,method,and,link,test,context,manager,after,test,method,after,test,method,methods,on,the,code,test,context,manager,potentially,with,spring,timeouts,and,repetitions,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,methods,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,framework,method,the,method,which,is,about,to,be,invoked,on,the,test,instance,param,test,instance,the,current,test,instance,return,a,statement,that,wraps,the,supplied,code,base,with,instance,level,and,method,level,features,of,the,spring,test,context,framework,see,with,before,test,method,callbacks,see,with,after,test,method,callbacks,see,with,potential,repeat,see,with,potential,timeout,see,with,test,instance,preparation,see,with,profile,value,check;override,public,statement,apply,statement,base,framework,method,framework,method,object,test,instance,if,logger,is,debug,enabled,logger,debug,applying,spring,method,rule,to,test,method,framework,method,get,method,class,test,class,test,instance,get,class,validate,spring,class,rule,configuration,test,class,test,context,manager,test,context,manager,spring,class,rule,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,method,callbacks,statement,framework,method,test,instance,test,context,manager,statement,with,after,test,method,callbacks,statement,framework,method,test,instance,test,context,manager,statement,with,test,instance,preparation,statement,test,instance,test,context,manager,statement,with,potential,repeat,statement,framework,method,test,instance,statement,with,potential,timeout,statement,framework,method,test,instance,statement,with,profile,value,check,statement,framework,method,test,instance,return,statement
SpringMethodRule -> @Override 	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance);1472740443;Apply <em>instance-level</em> and <em>method-level</em> features of_the <em>Spring TestContext Framework</em> to the supplied {@code base}_statement._<p>Specifically, this method invokes the_{@link TestContextManager#prepareTestInstance prepareTestInstance()},_{@link TestContextManager#beforeTestMethod beforeTestMethod()}, and_{@link TestContextManager#afterTestMethod afterTestMethod()} methods_on the {@code TestContextManager}, potentially with Spring timeouts_and repetitions._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents methods with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code prepareTestInstance()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param frameworkMethod the method which is about to be invoked on the test instance_@param testInstance the current test instance_@return a statement that wraps the supplied {@code base} with instance-level_and method-level features of the Spring TestContext Framework_@see #withBeforeTestMethodCallbacks_@see #withAfterTestMethodCallbacks_@see #withPotentialRepeat_@see #withPotentialTimeout_@see #withTestInstancePreparation_@see #withProfileValueCheck;@Override_	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) {_		Method testMethod = frameworkMethod.getMethod()__		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringMethodRule to test method [" + testMethod + "]")__		}_		Class<?> testClass = testInstance.getClass()__		validateSpringClassRuleConfiguration(testClass)__		TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestMethodCallbacks(statement, testMethod, testInstance, testContextManager)__		statement = withAfterTestMethodCallbacks(statement, testMethod, testInstance, testContextManager)__		statement = withTestInstancePreparation(statement, testInstance, testContextManager)__		statement = withPotentialRepeat(statement, testMethod, testInstance)__		statement = withPotentialTimeout(statement, testMethod, testInstance)__		statement = withProfileValueCheck(statement, testMethod, testInstance)__		return statement__	};apply,em,instance,level,em,and,em,method,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,invokes,the,link,test,context,manager,prepare,test,instance,prepare,test,instance,link,test,context,manager,before,test,method,before,test,method,and,link,test,context,manager,after,test,method,after,test,method,methods,on,the,code,test,context,manager,potentially,with,spring,timeouts,and,repetitions,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,methods,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,framework,method,the,method,which,is,about,to,be,invoked,on,the,test,instance,param,test,instance,the,current,test,instance,return,a,statement,that,wraps,the,supplied,code,base,with,instance,level,and,method,level,features,of,the,spring,test,context,framework,see,with,before,test,method,callbacks,see,with,after,test,method,callbacks,see,with,potential,repeat,see,with,potential,timeout,see,with,test,instance,preparation,see,with,profile,value,check;override,public,statement,apply,statement,base,framework,method,framework,method,object,test,instance,method,test,method,framework,method,get,method,if,logger,is,debug,enabled,logger,debug,applying,spring,method,rule,to,test,method,test,method,class,test,class,test,instance,get,class,validate,spring,class,rule,configuration,test,class,test,context,manager,test,context,manager,spring,class,rule,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,method,callbacks,statement,test,method,test,instance,test,context,manager,statement,with,after,test,method,callbacks,statement,test,method,test,instance,test,context,manager,statement,with,test,instance,preparation,statement,test,instance,test,context,manager,statement,with,potential,repeat,statement,test,method,test,instance,statement,with,potential,timeout,statement,test,method,test,instance,statement,with,profile,value,check,statement,test,method,test,instance,return,statement
SpringMethodRule -> @Override 	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance);1490036962;Apply <em>instance-level</em> and <em>method-level</em> features of_the <em>Spring TestContext Framework</em> to the supplied {@code base}_statement._<p>Specifically, this method invokes the_{@link TestContextManager#prepareTestInstance prepareTestInstance()},_{@link TestContextManager#beforeTestMethod beforeTestMethod()}, and_{@link TestContextManager#afterTestMethod afterTestMethod()} methods_on the {@code TestContextManager}, potentially with Spring timeouts_and repetitions._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents methods with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code prepareTestInstance()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param frameworkMethod the method which is about to be invoked on the test instance_@param testInstance the current test instance_@return a statement that wraps the supplied {@code base} with instance-level_and method-level features of the Spring TestContext Framework_@see #withBeforeTestMethodCallbacks_@see #withAfterTestMethodCallbacks_@see #withPotentialRepeat_@see #withPotentialTimeout_@see #withTestInstancePreparation_@see #withProfileValueCheck;@Override_	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) {_		Method testMethod = frameworkMethod.getMethod()__		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringMethodRule to test method [" + testMethod + "]")__		}_		Class<?> testClass = testInstance.getClass()__		validateSpringClassRuleConfiguration(testClass)__		TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestMethodCallbacks(statement, testMethod, testInstance, testContextManager)__		statement = withAfterTestMethodCallbacks(statement, testMethod, testInstance, testContextManager)__		statement = withTestInstancePreparation(statement, testInstance, testContextManager)__		statement = withPotentialRepeat(statement, testMethod, testInstance)__		statement = withPotentialTimeout(statement, testMethod, testInstance)__		statement = withProfileValueCheck(statement, testMethod, testInstance)__		return statement__	};apply,em,instance,level,em,and,em,method,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,invokes,the,link,test,context,manager,prepare,test,instance,prepare,test,instance,link,test,context,manager,before,test,method,before,test,method,and,link,test,context,manager,after,test,method,after,test,method,methods,on,the,code,test,context,manager,potentially,with,spring,timeouts,and,repetitions,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,methods,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,framework,method,the,method,which,is,about,to,be,invoked,on,the,test,instance,param,test,instance,the,current,test,instance,return,a,statement,that,wraps,the,supplied,code,base,with,instance,level,and,method,level,features,of,the,spring,test,context,framework,see,with,before,test,method,callbacks,see,with,after,test,method,callbacks,see,with,potential,repeat,see,with,potential,timeout,see,with,test,instance,preparation,see,with,profile,value,check;override,public,statement,apply,statement,base,framework,method,framework,method,object,test,instance,method,test,method,framework,method,get,method,if,logger,is,debug,enabled,logger,debug,applying,spring,method,rule,to,test,method,test,method,class,test,class,test,instance,get,class,validate,spring,class,rule,configuration,test,class,test,context,manager,test,context,manager,spring,class,rule,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,method,callbacks,statement,test,method,test,instance,test,context,manager,statement,with,after,test,method,callbacks,statement,test,method,test,instance,test,context,manager,statement,with,test,instance,preparation,statement,test,instance,test,context,manager,statement,with,potential,repeat,statement,test,method,test,instance,statement,with,potential,timeout,statement,test,method,test,instance,statement,with,profile,value,check,statement,test,method,test,instance,return,statement
SpringMethodRule -> @Override 	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance);1496955179;Apply <em>instance-level</em> and <em>method-level</em> features of_the <em>Spring TestContext Framework</em> to the supplied {@code base}_statement._<p>Specifically, this method invokes the_{@link TestContextManager#prepareTestInstance prepareTestInstance()},_{@link TestContextManager#beforeTestMethod beforeTestMethod()}, and_{@link TestContextManager#afterTestMethod afterTestMethod()} methods_on the {@code TestContextManager}, potentially with Spring timeouts_and repetitions._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents methods with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code prepareTestInstance()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param frameworkMethod the method which is about to be invoked on the test instance_@param testInstance the current test instance_@return a statement that wraps the supplied {@code base} with instance-level_and method-level features of the Spring TestContext Framework_@see #withBeforeTestMethodCallbacks_@see #withAfterTestMethodCallbacks_@see #withPotentialRepeat_@see #withPotentialTimeout_@see #withTestInstancePreparation_@see #withProfileValueCheck;@Override_	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) {_		Method testMethod = frameworkMethod.getMethod()__		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringMethodRule to test method [" + testMethod + "]")__		}_		Class<?> testClass = testInstance.getClass()__		validateSpringClassRuleConfiguration(testClass)__		TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestMethodCallbacks(statement, testMethod, testInstance, testContextManager)__		statement = withAfterTestMethodCallbacks(statement, testMethod, testInstance, testContextManager)__		statement = withTestInstancePreparation(statement, testInstance, testContextManager)__		statement = withPotentialRepeat(statement, testMethod, testInstance)__		statement = withPotentialTimeout(statement, testMethod, testInstance)__		statement = withProfileValueCheck(statement, testMethod, testInstance)__		return statement__	};apply,em,instance,level,em,and,em,method,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,invokes,the,link,test,context,manager,prepare,test,instance,prepare,test,instance,link,test,context,manager,before,test,method,before,test,method,and,link,test,context,manager,after,test,method,after,test,method,methods,on,the,code,test,context,manager,potentially,with,spring,timeouts,and,repetitions,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,methods,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,framework,method,the,method,which,is,about,to,be,invoked,on,the,test,instance,param,test,instance,the,current,test,instance,return,a,statement,that,wraps,the,supplied,code,base,with,instance,level,and,method,level,features,of,the,spring,test,context,framework,see,with,before,test,method,callbacks,see,with,after,test,method,callbacks,see,with,potential,repeat,see,with,potential,timeout,see,with,test,instance,preparation,see,with,profile,value,check;override,public,statement,apply,statement,base,framework,method,framework,method,object,test,instance,method,test,method,framework,method,get,method,if,logger,is,debug,enabled,logger,debug,applying,spring,method,rule,to,test,method,test,method,class,test,class,test,instance,get,class,validate,spring,class,rule,configuration,test,class,test,context,manager,test,context,manager,spring,class,rule,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,method,callbacks,statement,test,method,test,instance,test,context,manager,statement,with,after,test,method,callbacks,statement,test,method,test,instance,test,context,manager,statement,with,test,instance,preparation,statement,test,instance,test,context,manager,statement,with,potential,repeat,statement,test,method,test,instance,statement,with,potential,timeout,statement,test,method,test,instance,statement,with,profile,value,check,statement,test,method,test,instance,return,statement
SpringMethodRule -> @Override 	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance);1504712302;Apply <em>instance-level</em> and <em>method-level</em> features of_the <em>Spring TestContext Framework</em> to the supplied {@code base}_statement._<p>Specifically, this method invokes the_{@link TestContextManager#prepareTestInstance prepareTestInstance()},_{@link TestContextManager#beforeTestMethod beforeTestMethod()}, and_{@link TestContextManager#afterTestMethod afterTestMethod()} methods_on the {@code TestContextManager}, potentially with Spring timeouts_and repetitions._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents methods with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code prepareTestInstance()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param frameworkMethod the method which is about to be invoked on the test instance_@param testInstance the current test instance_@return a statement that wraps the supplied {@code base} with instance-level_and method-level features of the Spring TestContext Framework_@see #withBeforeTestMethodCallbacks_@see #withAfterTestMethodCallbacks_@see #withPotentialRepeat_@see #withPotentialTimeout_@see #withTestInstancePreparation_@see #withProfileValueCheck;@Override_	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) {_		Method testMethod = frameworkMethod.getMethod()__		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringMethodRule to test method [" + testMethod + "]")__		}_		Class<?> testClass = testInstance.getClass()__		validateSpringClassRuleConfiguration(testClass)__		TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestMethodCallbacks(statement, testMethod, testInstance, testContextManager)__		statement = withAfterTestMethodCallbacks(statement, testMethod, testInstance, testContextManager)__		statement = withTestInstancePreparation(statement, testInstance, testContextManager)__		statement = withPotentialRepeat(statement, testMethod, testInstance)__		statement = withPotentialTimeout(statement, testMethod, testInstance)__		statement = withProfileValueCheck(statement, testMethod, testInstance)__		return statement__	};apply,em,instance,level,em,and,em,method,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,invokes,the,link,test,context,manager,prepare,test,instance,prepare,test,instance,link,test,context,manager,before,test,method,before,test,method,and,link,test,context,manager,after,test,method,after,test,method,methods,on,the,code,test,context,manager,potentially,with,spring,timeouts,and,repetitions,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,methods,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,framework,method,the,method,which,is,about,to,be,invoked,on,the,test,instance,param,test,instance,the,current,test,instance,return,a,statement,that,wraps,the,supplied,code,base,with,instance,level,and,method,level,features,of,the,spring,test,context,framework,see,with,before,test,method,callbacks,see,with,after,test,method,callbacks,see,with,potential,repeat,see,with,potential,timeout,see,with,test,instance,preparation,see,with,profile,value,check;override,public,statement,apply,statement,base,framework,method,framework,method,object,test,instance,method,test,method,framework,method,get,method,if,logger,is,debug,enabled,logger,debug,applying,spring,method,rule,to,test,method,test,method,class,test,class,test,instance,get,class,validate,spring,class,rule,configuration,test,class,test,context,manager,test,context,manager,spring,class,rule,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,method,callbacks,statement,test,method,test,instance,test,context,manager,statement,with,after,test,method,callbacks,statement,test,method,test,instance,test,context,manager,statement,with,test,instance,preparation,statement,test,instance,test,context,manager,statement,with,potential,repeat,statement,test,method,test,instance,statement,with,potential,timeout,statement,test,method,test,instance,statement,with,profile,value,check,statement,test,method,test,instance,return,statement
SpringMethodRule -> @Override 	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance);1530188116;Apply <em>instance-level</em> and <em>method-level</em> features of_the <em>Spring TestContext Framework</em> to the supplied {@code base}_statement._<p>Specifically, this method invokes the_{@link TestContextManager#prepareTestInstance prepareTestInstance()},_{@link TestContextManager#beforeTestMethod beforeTestMethod()}, and_{@link TestContextManager#afterTestMethod afterTestMethod()} methods_on the {@code TestContextManager}, potentially with Spring timeouts_and repetitions._<p>In addition, this method checks whether the test is enabled in_the current execution environment. This prevents methods with a_non-matching {@code @IfProfileValue} annotation from running altogether,_even skipping the execution of {@code prepareTestInstance()} methods_in {@code TestExecutionListeners}._@param base the base {@code Statement} that this rule should be applied to_@param frameworkMethod the method which is about to be invoked on the test instance_@param testInstance the current test instance_@return a statement that wraps the supplied {@code base} with instance-level_and method-level features of the Spring TestContext Framework_@see #withBeforeTestMethodCallbacks_@see #withAfterTestMethodCallbacks_@see #withPotentialRepeat_@see #withPotentialTimeout_@see #withTestInstancePreparation_@see #withProfileValueCheck;@Override_	public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) {_		Method testMethod = frameworkMethod.getMethod()__		if (logger.isDebugEnabled()) {_			logger.debug("Applying SpringMethodRule to test method [" + testMethod + "]")__		}_		Class<?> testClass = testInstance.getClass()__		TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)___		Statement statement = base__		statement = withBeforeTestMethodCallbacks(statement, testMethod, testInstance, testContextManager)__		statement = withAfterTestMethodCallbacks(statement, testMethod, testInstance, testContextManager)__		statement = withTestInstancePreparation(statement, testInstance, testContextManager)__		statement = withPotentialRepeat(statement, testMethod, testInstance)__		statement = withPotentialTimeout(statement, testMethod, testInstance)__		statement = withProfileValueCheck(statement, testMethod, testInstance)__		return statement__	};apply,em,instance,level,em,and,em,method,level,em,features,of,the,em,spring,test,context,framework,em,to,the,supplied,code,base,statement,p,specifically,this,method,invokes,the,link,test,context,manager,prepare,test,instance,prepare,test,instance,link,test,context,manager,before,test,method,before,test,method,and,link,test,context,manager,after,test,method,after,test,method,methods,on,the,code,test,context,manager,potentially,with,spring,timeouts,and,repetitions,p,in,addition,this,method,checks,whether,the,test,is,enabled,in,the,current,execution,environment,this,prevents,methods,with,a,non,matching,code,if,profile,value,annotation,from,running,altogether,even,skipping,the,execution,of,code,prepare,test,instance,methods,in,code,test,execution,listeners,param,base,the,base,code,statement,that,this,rule,should,be,applied,to,param,framework,method,the,method,which,is,about,to,be,invoked,on,the,test,instance,param,test,instance,the,current,test,instance,return,a,statement,that,wraps,the,supplied,code,base,with,instance,level,and,method,level,features,of,the,spring,test,context,framework,see,with,before,test,method,callbacks,see,with,after,test,method,callbacks,see,with,potential,repeat,see,with,potential,timeout,see,with,test,instance,preparation,see,with,profile,value,check;override,public,statement,apply,statement,base,framework,method,framework,method,object,test,instance,method,test,method,framework,method,get,method,if,logger,is,debug,enabled,logger,debug,applying,spring,method,rule,to,test,method,test,method,class,test,class,test,instance,get,class,test,context,manager,test,context,manager,spring,class,rule,get,test,context,manager,test,class,statement,statement,base,statement,with,before,test,method,callbacks,statement,test,method,test,instance,test,context,manager,statement,with,after,test,method,callbacks,statement,test,method,test,instance,test,context,manager,statement,with,test,instance,preparation,statement,test,instance,test,context,manager,statement,with,potential,repeat,statement,test,method,test,instance,statement,with,potential,timeout,statement,test,method,test,instance,statement,with,profile,value,check,statement,test,method,test,instance,return,statement
SpringMethodRule -> private Statement withPotentialTimeout(Statement next, FrameworkMethod frameworkMethod, Object testInstance);1431875649;Return a {@link Statement} that potentially throws an exception if_the {@code next} statement in the execution chain takes longer than_a specified timeout._<p>Supports Spring's {@link Timed @Timed} annotation by returning a_{@link SpringFailOnTimeout} statement initialized with the configured_timeout (if greater than {@code 0})_ otherwise, the supplied statement_is returned unmodified._@return either a {@code SpringFailOnTimeout} or the supplied {@code Statement}_@see #getSpringTimeout(FrameworkMethod)_@see SpringFailOnTimeout;private Statement withPotentialTimeout(Statement next, FrameworkMethod frameworkMethod, Object testInstance) {_		long springTimeout = getSpringTimeout(frameworkMethod)__		return (springTimeout > 0 ? new SpringFailOnTimeout(next, springTimeout) : next)__	};return,a,link,statement,that,potentially,throws,an,exception,if,the,code,next,statement,in,the,execution,chain,takes,longer,than,a,specified,timeout,p,supports,spring,s,link,timed,timed,annotation,by,returning,a,link,spring,fail,on,timeout,statement,initialized,with,the,configured,timeout,if,greater,than,code,0,otherwise,the,supplied,statement,is,returned,unmodified,return,either,a,code,spring,fail,on,timeout,or,the,supplied,code,statement,see,get,spring,timeout,framework,method,see,spring,fail,on,timeout;private,statement,with,potential,timeout,statement,next,framework,method,framework,method,object,test,instance,long,spring,timeout,get,spring,timeout,framework,method,return,spring,timeout,0,new,spring,fail,on,timeout,next,spring,timeout,next
SpringMethodRule -> private Statement withPotentialTimeout(Statement next, FrameworkMethod frameworkMethod, Object testInstance);1431894269;Wrap the supplied {@link Statement} with a {@code SpringFailOnTimeout} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Timed @Timed}_annotation._@see TestAnnotationUtils#getTimeout(java.lang.reflect.Method)_@see SpringFailOnTimeout;private Statement withPotentialTimeout(Statement next, FrameworkMethod frameworkMethod, Object testInstance) {_		return new SpringFailOnTimeout(next, TestAnnotationUtils.getTimeout(frameworkMethod.getMethod()))__	};wrap,the,supplied,link,statement,with,a,code,spring,fail,on,timeout,statement,p,supports,spring,s,link,org,springframework,test,annotation,timed,timed,annotation,see,test,annotation,utils,get,timeout,java,lang,reflect,method,see,spring,fail,on,timeout;private,statement,with,potential,timeout,statement,next,framework,method,framework,method,object,test,instance,return,new,spring,fail,on,timeout,next,test,annotation,utils,get,timeout,framework,method,get,method
SpringMethodRule -> private Statement withPotentialTimeout(Statement next, FrameworkMethod frameworkMethod, Object testInstance);1431902621;Wrap the supplied {@link Statement} with a {@code SpringFailOnTimeout} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Timed @Timed}_annotation._@see SpringFailOnTimeout;private Statement withPotentialTimeout(Statement next, FrameworkMethod frameworkMethod, Object testInstance) {_		return new SpringFailOnTimeout(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,fail,on,timeout,statement,p,supports,spring,s,link,org,springframework,test,annotation,timed,timed,annotation,see,spring,fail,on,timeout;private,statement,with,potential,timeout,statement,next,framework,method,framework,method,object,test,instance,return,new,spring,fail,on,timeout,next,framework,method,get,method
SpringMethodRule -> private Statement withPotentialTimeout(Statement next, FrameworkMethod frameworkMethod, Object testInstance);1443464140;Wrap the supplied {@link Statement} with a {@code SpringFailOnTimeout} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Timed @Timed}_annotation._@see SpringFailOnTimeout;private Statement withPotentialTimeout(Statement next, FrameworkMethod frameworkMethod, Object testInstance) {_		return new SpringFailOnTimeout(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,fail,on,timeout,statement,p,supports,spring,s,link,org,springframework,test,annotation,timed,timed,annotation,see,spring,fail,on,timeout;private,statement,with,potential,timeout,statement,next,framework,method,framework,method,object,test,instance,return,new,spring,fail,on,timeout,next,framework,method,get,method
SpringMethodRule -> private Statement withPotentialTimeout(Statement next, FrameworkMethod frameworkMethod, Object testInstance);1443471070;Wrap the supplied {@link Statement} with a {@code SpringFailOnTimeout} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Timed @Timed}_annotation._@see SpringFailOnTimeout;private Statement withPotentialTimeout(Statement next, FrameworkMethod frameworkMethod, Object testInstance) {_		return new SpringFailOnTimeout(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,fail,on,timeout,statement,p,supports,spring,s,link,org,springframework,test,annotation,timed,timed,annotation,see,spring,fail,on,timeout;private,statement,with,potential,timeout,statement,next,framework,method,framework,method,object,test,instance,return,new,spring,fail,on,timeout,next,framework,method,get,method
SpringMethodRule -> private Statement withPotentialTimeout(Statement next, FrameworkMethod frameworkMethod, Object testInstance);1450547039;Wrap the supplied {@link Statement} with a {@code SpringFailOnTimeout} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Timed @Timed}_annotation._@see SpringFailOnTimeout;private Statement withPotentialTimeout(Statement next, FrameworkMethod frameworkMethod, Object testInstance) {_		return new SpringFailOnTimeout(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,fail,on,timeout,statement,p,supports,spring,s,link,org,springframework,test,annotation,timed,timed,annotation,see,spring,fail,on,timeout;private,statement,with,potential,timeout,statement,next,framework,method,framework,method,object,test,instance,return,new,spring,fail,on,timeout,next,framework,method,get,method
SpringMethodRule -> private Statement withPotentialTimeout(Statement next, FrameworkMethod frameworkMethod, Object testInstance);1468244735;Wrap the supplied {@link Statement} with a {@code SpringFailOnTimeout} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Timed @Timed}_annotation._@see SpringFailOnTimeout;private Statement withPotentialTimeout(Statement next, FrameworkMethod frameworkMethod, Object testInstance) {_		return new SpringFailOnTimeout(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,fail,on,timeout,statement,p,supports,spring,s,link,org,springframework,test,annotation,timed,timed,annotation,see,spring,fail,on,timeout;private,statement,with,potential,timeout,statement,next,framework,method,framework,method,object,test,instance,return,new,spring,fail,on,timeout,next,framework,method,get,method
SpringMethodRule -> private Statement withPotentialTimeout(Statement next, FrameworkMethod frameworkMethod, Object testInstance);1468334463;Wrap the supplied {@link Statement} with a {@code SpringFailOnTimeout} statement._<p>Supports Spring's {@link org.springframework.test.annotation.Timed @Timed}_annotation._@see SpringFailOnTimeout;private Statement withPotentialTimeout(Statement next, FrameworkMethod frameworkMethod, Object testInstance) {_		return new SpringFailOnTimeout(next, frameworkMethod.getMethod())__	};wrap,the,supplied,link,statement,with,a,code,spring,fail,on,timeout,statement,p,supports,spring,s,link,org,springframework,test,annotation,timed,timed,annotation,see,spring,fail,on,timeout;private,statement,with,potential,timeout,statement,next,framework,method,framework,method,object,test,instance,return,new,spring,fail,on,timeout,next,framework,method,get,method
SpringMethodRule -> private Statement withBeforeTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod, 			Object testInstance, TestContextManager testContextManager);1431875649;Wrap the supplied {@link Statement} with a {@code RunBeforeTestMethodCallbacks} statement._@see RunBeforeTestMethodCallbacks;private Statement withBeforeTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod,_			Object testInstance, TestContextManager testContextManager) {_		return new RunBeforeTestMethodCallbacks(statement, testInstance, frameworkMethod.getMethod(),_			testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,method,callbacks,statement,see,run,before,test,method,callbacks;private,statement,with,before,test,method,callbacks,statement,statement,framework,method,framework,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,before,test,method,callbacks,statement,test,instance,framework,method,get,method,test,context,manager
SpringMethodRule -> private Statement withBeforeTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod, 			Object testInstance, TestContextManager testContextManager);1431894269;Wrap the supplied {@link Statement} with a {@code RunBeforeTestMethodCallbacks} statement._@see RunBeforeTestMethodCallbacks;private Statement withBeforeTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod,_			Object testInstance, TestContextManager testContextManager) {_		return new RunBeforeTestMethodCallbacks(statement, testInstance, frameworkMethod.getMethod(),_			testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,method,callbacks,statement,see,run,before,test,method,callbacks;private,statement,with,before,test,method,callbacks,statement,statement,framework,method,framework,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,before,test,method,callbacks,statement,test,instance,framework,method,get,method,test,context,manager
SpringMethodRule -> private Statement withBeforeTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod, 			Object testInstance, TestContextManager testContextManager);1431902621;Wrap the supplied {@link Statement} with a {@code RunBeforeTestMethodCallbacks} statement._@see RunBeforeTestMethodCallbacks;private Statement withBeforeTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod,_			Object testInstance, TestContextManager testContextManager) {_		return new RunBeforeTestMethodCallbacks(statement, testInstance, frameworkMethod.getMethod(),_			testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,method,callbacks,statement,see,run,before,test,method,callbacks;private,statement,with,before,test,method,callbacks,statement,statement,framework,method,framework,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,before,test,method,callbacks,statement,test,instance,framework,method,get,method,test,context,manager
SpringMethodRule -> private Statement withBeforeTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod, 			Object testInstance, TestContextManager testContextManager);1443464140;Wrap the supplied {@link Statement} with a {@code RunBeforeTestMethodCallbacks} statement._@see RunBeforeTestMethodCallbacks;private Statement withBeforeTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod,_			Object testInstance, TestContextManager testContextManager) {_		return new RunBeforeTestMethodCallbacks(statement, testInstance, frameworkMethod.getMethod(),_			testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,method,callbacks,statement,see,run,before,test,method,callbacks;private,statement,with,before,test,method,callbacks,statement,statement,framework,method,framework,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,before,test,method,callbacks,statement,test,instance,framework,method,get,method,test,context,manager
SpringMethodRule -> private Statement withBeforeTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod, 			Object testInstance, TestContextManager testContextManager);1443471070;Wrap the supplied {@link Statement} with a {@code RunBeforeTestMethodCallbacks} statement._@see RunBeforeTestMethodCallbacks;private Statement withBeforeTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunBeforeTestMethodCallbacks(_				statement, testInstance, frameworkMethod.getMethod(), testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,method,callbacks,statement,see,run,before,test,method,callbacks;private,statement,with,before,test,method,callbacks,statement,statement,framework,method,framework,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,before,test,method,callbacks,statement,test,instance,framework,method,get,method,test,context,manager
SpringMethodRule -> private Statement withBeforeTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod, 			Object testInstance, TestContextManager testContextManager);1450547039;Wrap the supplied {@link Statement} with a {@code RunBeforeTestMethodCallbacks} statement._@see RunBeforeTestMethodCallbacks;private Statement withBeforeTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunBeforeTestMethodCallbacks(_				statement, testInstance, frameworkMethod.getMethod(), testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,method,callbacks,statement,see,run,before,test,method,callbacks;private,statement,with,before,test,method,callbacks,statement,statement,framework,method,framework,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,before,test,method,callbacks,statement,test,instance,framework,method,get,method,test,context,manager
SpringMethodRule -> private Statement withBeforeTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod, 			Object testInstance, TestContextManager testContextManager);1468244735;Wrap the supplied {@link Statement} with a {@code RunBeforeTestMethodCallbacks} statement._@see RunBeforeTestMethodCallbacks;private Statement withBeforeTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunBeforeTestMethodCallbacks(_				statement, testInstance, frameworkMethod.getMethod(), testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,method,callbacks,statement,see,run,before,test,method,callbacks;private,statement,with,before,test,method,callbacks,statement,statement,framework,method,framework,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,before,test,method,callbacks,statement,test,instance,framework,method,get,method,test,context,manager
SpringMethodRule -> private Statement withBeforeTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod, 			Object testInstance, TestContextManager testContextManager);1468334463;Wrap the supplied {@link Statement} with a {@code RunBeforeTestMethodCallbacks} statement._@see RunBeforeTestMethodCallbacks;private Statement withBeforeTestMethodCallbacks(Statement statement, FrameworkMethod frameworkMethod,_			Object testInstance, TestContextManager testContextManager) {__		return new RunBeforeTestMethodCallbacks(_				statement, testInstance, frameworkMethod.getMethod(), testContextManager)__	};wrap,the,supplied,link,statement,with,a,code,run,before,test,method,callbacks,statement,see,run,before,test,method,callbacks;private,statement,with,before,test,method,callbacks,statement,statement,framework,method,framework,method,object,test,instance,test,context,manager,test,context,manager,return,new,run,before,test,method,callbacks,statement,test,instance,framework,method,get,method,test,context,manager
SpringMethodRule -> private Statement withProfileValueCheck(Statement next, Method testMethod, Object testInstance);1472740443;Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement next, Method testMethod, Object testInstance) {_		return new ProfileValueChecker(next, testInstance.getClass(), testMethod)__	};wrap,the,supplied,link,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,next,method,test,method,object,test,instance,return,new,profile,value,checker,next,test,instance,get,class,test,method
SpringMethodRule -> private Statement withProfileValueCheck(Statement next, Method testMethod, Object testInstance);1490036962;Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement next, Method testMethod, Object testInstance) {_		return new ProfileValueChecker(next, testInstance.getClass(), testMethod)__	};wrap,the,supplied,link,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,next,method,test,method,object,test,instance,return,new,profile,value,checker,next,test,instance,get,class,test,method
SpringMethodRule -> private Statement withProfileValueCheck(Statement next, Method testMethod, Object testInstance);1496955179;Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement next, Method testMethod, Object testInstance) {_		return new ProfileValueChecker(next, testInstance.getClass(), testMethod)__	};wrap,the,supplied,link,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,next,method,test,method,object,test,instance,return,new,profile,value,checker,next,test,instance,get,class,test,method
SpringMethodRule -> private Statement withProfileValueCheck(Statement next, Method testMethod, Object testInstance);1504712302;Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement next, Method testMethod, Object testInstance) {_		return new ProfileValueChecker(next, testInstance.getClass(), testMethod)__	};wrap,the,supplied,link,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,next,method,test,method,object,test,instance,return,new,profile,value,checker,next,test,instance,get,class,test,method
SpringMethodRule -> private Statement withProfileValueCheck(Statement next, Method testMethod, Object testInstance);1530188116;Wrap the supplied {@link Statement} with a {@code ProfileValueChecker} statement._@see ProfileValueChecker;private Statement withProfileValueCheck(Statement next, Method testMethod, Object testInstance) {_		return new ProfileValueChecker(next, testInstance.getClass(), testMethod)__	};wrap,the,supplied,link,statement,with,a,code,profile,value,checker,statement,see,profile,value,checker;private,statement,with,profile,value,check,statement,next,method,test,method,object,test,instance,return,new,profile,value,checker,next,test,instance,get,class,test,method
