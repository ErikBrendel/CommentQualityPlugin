# id;timestamp;commentText;codeText;commentWords;codeWords
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value);1328020251;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods.__<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name.__@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value) {_		invokeSetterMethod(target, name, value, null)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,invoke,setter,method,target,name,value,null
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value);1344609895;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods.__<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name.__@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value) {_		invokeSetterMethod(target, name, value, null)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,invoke,setter,method,target,name,value,null
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value);1356735495;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods.__<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name.__@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value) {_		invokeSetterMethod(target, name, value, null)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,invoke,setter,method,target,name,value,null
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value);1413848647;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods.__<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name.__@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value) {_		invokeSetterMethod(target, name, value, null)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,invoke,setter,method,target,name,value,null
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value);1428546720;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods.__<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name.__@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value) {_		invokeSetterMethod(target, name, value, null)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,invoke,setter,method,target,name,value,null
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value);1436919586;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value) {_		invokeSetterMethod(target, name, value, null)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,invoke,setter,method,target,name,value,null
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value);1437491400;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value) {_		invokeSetterMethod(target, name, value, null)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,invoke,setter,method,target,name,value,null
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value);1458149654;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value) {_		invokeSetterMethod(target, name, value, null)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,invoke,setter,method,target,name,value,null
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value);1458220093;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value) {_		invokeSetterMethod(target, name, value, null)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,invoke,setter,method,target,name,value,null
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value);1465927706;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value) {_		invokeSetterMethod(target, name, value, null)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,invoke,setter,method,target,name,value,null
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value);1495868221;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value) {_		invokeSetterMethod(target, name, value, null)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,invoke,setter,method,target,name,value,null
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value);1496955179;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value) {_		invokeSetterMethod(target, name, value, null)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,invoke,setter,method,target,name,value,null
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value);1499712214;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value) {_		invokeSetterMethod(target, name, value, null)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,invoke,setter,method,target,name,value,null
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value);1499944792;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value) {_		invokeSetterMethod(target, name, value, null)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,invoke,setter,method,target,name,value,null
ReflectionTestUtils -> @Nullable 	public static Object getField(@Nullable Object targetObject, @Nullable Class<?> targetClass, String name);1496955179;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}/{@code targetClass}._<p>If the supplied {@code targetObject} is a <em>proxy</em>, it will_be {@linkplain AopTestUtils#getUltimateTargetObject unwrapped} allowing_the field to be retrieved from the ultimate target of the proxy._<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to get {@code protected},_{@code private}, and <em>package-private</em> fields._@param targetObject the target object from which to get the field_ may be_{@code null} if the field is static_@param targetClass the target class from which to get the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to get_ never {@code null}_@return the field's current value_@since 4.2_@see #getField(Object, String)_@see #getField(Class, String)_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#getField(Field, Object)_@see AopTestUtils#getUltimateTargetObject(Object);@Nullable_	public static Object getField(@Nullable Object targetObject, @Nullable Class<?> targetClass, String name) {_		Assert.isTrue(targetObject != null || targetClass != null,_			"Either targetObject or targetClass for the field must be specified")___		Object ultimateTarget = (targetObject != null ? AopTestUtils.getUltimateTargetObject(targetObject) : null)___		if (targetClass == null) {_			targetClass = ultimateTarget.getClass()__		}__		Field field = ReflectionUtils.findField(targetClass, name)__		if (field == null) {_			throw new IllegalArgumentException(String.format("Could not find field '%s' on %s or target class [%s]",_					name, safeToString(ultimateTarget), targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Getting field '%s' from %s or target class [%s]", name,_					safeToString(ultimateTarget), targetClass))__		}_		ReflectionUtils.makeAccessible(field)__		return ReflectionUtils.getField(field, ultimateTarget)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,code,target,class,p,if,the,supplied,code,target,object,is,a,em,proxy,em,it,will,be,linkplain,aop,test,utils,get,ultimate,target,object,unwrapped,allowing,the,field,to,be,retrieved,from,the,ultimate,target,of,the,proxy,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,get,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,from,which,to,get,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,from,which,to,get,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,since,4,2,see,get,field,object,string,see,get,field,class,string,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,get,field,field,object,see,aop,test,utils,get,ultimate,target,object,object;nullable,public,static,object,get,field,nullable,object,target,object,nullable,class,target,class,string,name,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,object,ultimate,target,target,object,null,aop,test,utils,get,ultimate,target,object,target,object,null,if,target,class,null,target,class,ultimate,target,get,class,field,field,reflection,utils,find,field,target,class,name,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,on,s,or,target,class,s,name,safe,to,string,ultimate,target,target,class,if,logger,is,debug,enabled,logger,debug,string,format,getting,field,s,from,s,or,target,class,s,name,safe,to,string,ultimate,target,target,class,reflection,utils,make,accessible,field,return,reflection,utils,get,field,field,ultimate,target
ReflectionTestUtils -> @Nullable 	public static Object getField(@Nullable Object targetObject, @Nullable Class<?> targetClass, String name);1499712214;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}/{@code targetClass}._<p>If the supplied {@code targetObject} is a <em>proxy</em>, it will_be {@linkplain AopTestUtils#getUltimateTargetObject unwrapped} allowing_the field to be retrieved from the ultimate target of the proxy._<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to get {@code protected},_{@code private}, and <em>package-private</em> fields._@param targetObject the target object from which to get the field_ may be_{@code null} if the field is static_@param targetClass the target class from which to get the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to get_ never {@code null}_@return the field's current value_@since 4.2_@see #getField(Object, String)_@see #getField(Class, String)_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#getField(Field, Object)_@see AopTestUtils#getUltimateTargetObject(Object);@Nullable_	public static Object getField(@Nullable Object targetObject, @Nullable Class<?> targetClass, String name) {_		Assert.isTrue(targetObject != null || targetClass != null,_			"Either targetObject or targetClass for the field must be specified")___		if (targetObject != null && springAopPresent) {_			targetObject = AopTestUtils.getUltimateTargetObject(targetObject)__		}_		if (targetClass == null) {_			targetClass = targetObject.getClass()__		}__		Field field = ReflectionUtils.findField(targetClass, name)__		if (field == null) {_			throw new IllegalArgumentException(String.format("Could not find field '%s' on %s or target class [%s]",_					name, safeToString(targetObject), targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Getting field '%s' from %s or target class [%s]", name,_					safeToString(targetObject), targetClass))__		}_		ReflectionUtils.makeAccessible(field)__		return ReflectionUtils.getField(field, targetObject)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,code,target,class,p,if,the,supplied,code,target,object,is,a,em,proxy,em,it,will,be,linkplain,aop,test,utils,get,ultimate,target,object,unwrapped,allowing,the,field,to,be,retrieved,from,the,ultimate,target,of,the,proxy,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,get,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,from,which,to,get,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,from,which,to,get,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,since,4,2,see,get,field,object,string,see,get,field,class,string,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,get,field,field,object,see,aop,test,utils,get,ultimate,target,object,object;nullable,public,static,object,get,field,nullable,object,target,object,nullable,class,target,class,string,name,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,if,target,object,null,spring,aop,present,target,object,aop,test,utils,get,ultimate,target,object,target,object,if,target,class,null,target,class,target,object,get,class,field,field,reflection,utils,find,field,target,class,name,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,on,s,or,target,class,s,name,safe,to,string,target,object,target,class,if,logger,is,debug,enabled,logger,debug,string,format,getting,field,s,from,s,or,target,class,s,name,safe,to,string,target,object,target,class,reflection,utils,make,accessible,field,return,reflection,utils,get,field,field,target,object
ReflectionTestUtils -> @Nullable 	public static Object getField(@Nullable Object targetObject, @Nullable Class<?> targetClass, String name);1499944792;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}/{@code targetClass}._<p>If the supplied {@code targetObject} is a <em>proxy</em>, it will_be {@linkplain AopTestUtils#getUltimateTargetObject unwrapped} allowing_the field to be retrieved from the ultimate target of the proxy._<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to get {@code protected},_{@code private}, and <em>package-private</em> fields._@param targetObject the target object from which to get the field_ may be_{@code null} if the field is static_@param targetClass the target class from which to get the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to get_ never {@code null}_@return the field's current value_@since 4.2_@see #getField(Object, String)_@see #getField(Class, String)_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#getField(Field, Object)_@see AopTestUtils#getUltimateTargetObject(Object);@Nullable_	public static Object getField(@Nullable Object targetObject, @Nullable Class<?> targetClass, String name) {_		Assert.isTrue(targetObject != null || targetClass != null,_			"Either targetObject or targetClass for the field must be specified")___		if (targetObject != null && springAopPresent) {_			targetObject = AopTestUtils.getUltimateTargetObject(targetObject)__		}_		if (targetClass == null) {_			targetClass = targetObject.getClass()__		}__		Field field = ReflectionUtils.findField(targetClass, name)__		if (field == null) {_			throw new IllegalArgumentException(String.format("Could not find field '%s' on %s or target class [%s]",_					name, safeToString(targetObject), targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Getting field '%s' from %s or target class [%s]", name,_					safeToString(targetObject), targetClass))__		}_		ReflectionUtils.makeAccessible(field)__		return ReflectionUtils.getField(field, targetObject)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,code,target,class,p,if,the,supplied,code,target,object,is,a,em,proxy,em,it,will,be,linkplain,aop,test,utils,get,ultimate,target,object,unwrapped,allowing,the,field,to,be,retrieved,from,the,ultimate,target,of,the,proxy,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,get,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,from,which,to,get,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,from,which,to,get,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,since,4,2,see,get,field,object,string,see,get,field,class,string,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,get,field,field,object,see,aop,test,utils,get,ultimate,target,object,object;nullable,public,static,object,get,field,nullable,object,target,object,nullable,class,target,class,string,name,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,if,target,object,null,spring,aop,present,target,object,aop,test,utils,get,ultimate,target,object,target,object,if,target,class,null,target,class,target,object,get,class,field,field,reflection,utils,find,field,target,class,name,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,on,s,or,target,class,s,name,safe,to,string,target,object,target,class,if,logger,is,debug,enabled,logger,debug,string,format,getting,field,s,from,s,or,target,class,s,name,safe,to,string,target,object,target,class,reflection,utils,make,accessible,field,return,reflection,utils,get,field,field,target,object
ReflectionTestUtils -> public static Object getField(Object target, String name);1328020251;Get the field with the given {@code name} from the provided target object.__<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to get {@code protected},_{@code private}, and <em>package-private</em> fields.__@param target the target object on which to set the field_@param name the name of the field to get_@return the field's current value_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object);public static Object getField(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Field field = ReflectionUtils.findField(target.getClass(), name)__		Assert.notNull(field, "Could not find field [" + name + "] on target [" + target + "]")___		if (logger.isDebugEnabled()) {_			logger.debug("Getting field [" + name + "] from target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(field)__		return ReflectionUtils.getField(field, target)__	};get,the,field,with,the,given,code,name,from,the,provided,target,object,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,get,code,protected,code,private,and,em,package,private,em,fields,param,target,the,target,object,on,which,to,set,the,field,param,name,the,name,of,the,field,to,get,return,the,field,s,current,value,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object;public,static,object,get,field,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,field,field,reflection,utils,find,field,target,get,class,name,assert,not,null,field,could,not,find,field,name,on,target,target,if,logger,is,debug,enabled,logger,debug,getting,field,name,from,target,target,reflection,utils,make,accessible,field,return,reflection,utils,get,field,field,target
ReflectionTestUtils -> public static Object getField(Object target, String name);1344609895;Get the field with the given {@code name} from the provided target object.__<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to get {@code protected},_{@code private}, and <em>package-private</em> fields.__@param target the target object on which to set the field_@param name the name of the field to get_@return the field's current value_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object);public static Object getField(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Field field = ReflectionUtils.findField(target.getClass(), name)__		Assert.notNull(field, "Could not find field [" + name + "] on target [" + target + "]")___		if (logger.isDebugEnabled()) {_			logger.debug("Getting field [" + name + "] from target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(field)__		return ReflectionUtils.getField(field, target)__	};get,the,field,with,the,given,code,name,from,the,provided,target,object,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,get,code,protected,code,private,and,em,package,private,em,fields,param,target,the,target,object,on,which,to,set,the,field,param,name,the,name,of,the,field,to,get,return,the,field,s,current,value,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object;public,static,object,get,field,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,field,field,reflection,utils,find,field,target,get,class,name,assert,not,null,field,could,not,find,field,name,on,target,target,if,logger,is,debug,enabled,logger,debug,getting,field,name,from,target,target,reflection,utils,make,accessible,field,return,reflection,utils,get,field,field,target
ReflectionTestUtils -> public static Object getField(Object target, String name);1356735495;Get the field with the given {@code name} from the provided target object.__<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to get {@code protected},_{@code private}, and <em>package-private</em> fields.__@param target the target object on which to set the field_@param name the name of the field to get_@return the field's current value_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object);public static Object getField(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Field field = ReflectionUtils.findField(target.getClass(), name)__		Assert.notNull(field, "Could not find field [" + name + "] on target [" + target + "]")___		if (logger.isDebugEnabled()) {_			logger.debug("Getting field [" + name + "] from target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(field)__		return ReflectionUtils.getField(field, target)__	};get,the,field,with,the,given,code,name,from,the,provided,target,object,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,get,code,protected,code,private,and,em,package,private,em,fields,param,target,the,target,object,on,which,to,set,the,field,param,name,the,name,of,the,field,to,get,return,the,field,s,current,value,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object;public,static,object,get,field,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,field,field,reflection,utils,find,field,target,get,class,name,assert,not,null,field,could,not,find,field,name,on,target,target,if,logger,is,debug,enabled,logger,debug,getting,field,name,from,target,target,reflection,utils,make,accessible,field,return,reflection,utils,get,field,field,target
ReflectionTestUtils -> public static Object getField(Object target, String name);1413848647;Get the field with the given {@code name} from the provided target object.__<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to get {@code protected},_{@code private}, and <em>package-private</em> fields.__@param target the target object on which to set the field_@param name the name of the field to get_@return the field's current value_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object);public static Object getField(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Field field = ReflectionUtils.findField(target.getClass(), name)__		Assert.notNull(field, "Could not find field [" + name + "] on target [" + target + "]")___		if (logger.isDebugEnabled()) {_			logger.debug("Getting field [" + name + "] from target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(field)__		return ReflectionUtils.getField(field, target)__	};get,the,field,with,the,given,code,name,from,the,provided,target,object,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,get,code,protected,code,private,and,em,package,private,em,fields,param,target,the,target,object,on,which,to,set,the,field,param,name,the,name,of,the,field,to,get,return,the,field,s,current,value,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object;public,static,object,get,field,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,field,field,reflection,utils,find,field,target,get,class,name,assert,not,null,field,could,not,find,field,name,on,target,target,if,logger,is,debug,enabled,logger,debug,getting,field,name,from,target,target,reflection,utils,make,accessible,field,return,reflection,utils,get,field,field,target
ReflectionTestUtils -> public static void setField(@Nullable Object targetObject, @Nullable Class<?> targetClass, 			@Nullable String name, @Nullable Object value, @Nullable Class<?> type);1496955179;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject}/{@code targetClass} to the supplied_{@code value}._<p>If the supplied {@code targetObject} is a <em>proxy</em>, it will_be {@linkplain AopTestUtils#getUltimateTargetObject unwrapped} allowing_the field to be set on the ultimate target of the proxy._<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to set {@code protected},_{@code private}, and <em>package-private</em> fields._@param targetObject the target object on which to set the field_ may be_{@code null} if the field is static_@param targetClass the target class on which to set the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@since 4.2_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object)_@see AopTestUtils#getUltimateTargetObject(Object);public static void setField(@Nullable Object targetObject, @Nullable Class<?> targetClass,_			@Nullable String name, @Nullable Object value, @Nullable Class<?> type) {__		Assert.isTrue(targetObject != null || targetClass != null,_				"Either targetObject or targetClass for the field must be specified")___		Object ultimateTarget = (targetObject != null ? AopTestUtils.getUltimateTargetObject(targetObject) : null)___		if (targetClass == null) {_			targetClass = ultimateTarget.getClass()__		}__		Field field = ReflectionUtils.findField(targetClass, name, type)__		if (field == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find field '%s' of type [%s] on %s or target class [%s]", name, type,_					safeToString(ultimateTarget), targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_					"Setting field '%s' of type [%s] on %s or target class [%s] to value [%s]", name, type,_					safeToString(ultimateTarget), targetClass, value))__		}_		ReflectionUtils.makeAccessible(field)__		ReflectionUtils.setField(field, ultimateTarget, value)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,code,target,class,to,the,supplied,code,value,p,if,the,supplied,code,target,object,is,a,em,proxy,em,it,will,be,linkplain,aop,test,utils,get,ultimate,target,object,unwrapped,allowing,the,field,to,be,set,on,the,ultimate,target,of,the,proxy,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,set,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,on,which,to,set,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,on,which,to,set,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,since,4,2,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object,see,aop,test,utils,get,ultimate,target,object,object;public,static,void,set,field,nullable,object,target,object,nullable,class,target,class,nullable,string,name,nullable,object,value,nullable,class,type,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,object,ultimate,target,target,object,null,aop,test,utils,get,ultimate,target,object,target,object,null,if,target,class,null,target,class,ultimate,target,get,class,field,field,reflection,utils,find,field,target,class,name,type,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,of,type,s,on,s,or,target,class,s,name,type,safe,to,string,ultimate,target,target,class,if,logger,is,debug,enabled,logger,debug,string,format,setting,field,s,of,type,s,on,s,or,target,class,s,to,value,s,name,type,safe,to,string,ultimate,target,target,class,value,reflection,utils,make,accessible,field,reflection,utils,set,field,field,ultimate,target,value
ReflectionTestUtils -> public static void setField(@Nullable Object targetObject, @Nullable Class<?> targetClass, 			@Nullable String name, @Nullable Object value, @Nullable Class<?> type);1499712214;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject}/{@code targetClass} to the supplied_{@code value}._<p>If the supplied {@code targetObject} is a <em>proxy</em>, it will_be {@linkplain AopTestUtils#getUltimateTargetObject unwrapped} allowing_the field to be set on the ultimate target of the proxy._<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to set {@code protected},_{@code private}, and <em>package-private</em> fields._@param targetObject the target object on which to set the field_ may be_{@code null} if the field is static_@param targetClass the target class on which to set the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@since 4.2_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object)_@see AopTestUtils#getUltimateTargetObject(Object);public static void setField(@Nullable Object targetObject, @Nullable Class<?> targetClass,_			@Nullable String name, @Nullable Object value, @Nullable Class<?> type) {__		Assert.isTrue(targetObject != null || targetClass != null,_				"Either targetObject or targetClass for the field must be specified")___		if (targetObject != null && springAopPresent) {_			targetObject = AopTestUtils.getUltimateTargetObject(targetObject)__		}_		if (targetClass == null) {_			targetClass = targetObject.getClass()__		}__		Field field = ReflectionUtils.findField(targetClass, name, type)__		if (field == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find field '%s' of type [%s] on %s or target class [%s]", name, type,_					safeToString(targetObject), targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_					"Setting field '%s' of type [%s] on %s or target class [%s] to value [%s]", name, type,_					safeToString(targetObject), targetClass, value))__		}_		ReflectionUtils.makeAccessible(field)__		ReflectionUtils.setField(field, targetObject, value)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,code,target,class,to,the,supplied,code,value,p,if,the,supplied,code,target,object,is,a,em,proxy,em,it,will,be,linkplain,aop,test,utils,get,ultimate,target,object,unwrapped,allowing,the,field,to,be,set,on,the,ultimate,target,of,the,proxy,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,set,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,on,which,to,set,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,on,which,to,set,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,since,4,2,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object,see,aop,test,utils,get,ultimate,target,object,object;public,static,void,set,field,nullable,object,target,object,nullable,class,target,class,nullable,string,name,nullable,object,value,nullable,class,type,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,if,target,object,null,spring,aop,present,target,object,aop,test,utils,get,ultimate,target,object,target,object,if,target,class,null,target,class,target,object,get,class,field,field,reflection,utils,find,field,target,class,name,type,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,of,type,s,on,s,or,target,class,s,name,type,safe,to,string,target,object,target,class,if,logger,is,debug,enabled,logger,debug,string,format,setting,field,s,of,type,s,on,s,or,target,class,s,to,value,s,name,type,safe,to,string,target,object,target,class,value,reflection,utils,make,accessible,field,reflection,utils,set,field,field,target,object,value
ReflectionTestUtils -> public static void setField(@Nullable Object targetObject, @Nullable Class<?> targetClass, 			@Nullable String name, @Nullable Object value, @Nullable Class<?> type);1499944792;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject}/{@code targetClass} to the supplied_{@code value}._<p>If the supplied {@code targetObject} is a <em>proxy</em>, it will_be {@linkplain AopTestUtils#getUltimateTargetObject unwrapped} allowing_the field to be set on the ultimate target of the proxy._<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to set {@code protected},_{@code private}, and <em>package-private</em> fields._@param targetObject the target object on which to set the field_ may be_{@code null} if the field is static_@param targetClass the target class on which to set the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@since 4.2_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object)_@see AopTestUtils#getUltimateTargetObject(Object);public static void setField(@Nullable Object targetObject, @Nullable Class<?> targetClass,_			@Nullable String name, @Nullable Object value, @Nullable Class<?> type) {__		Assert.isTrue(targetObject != null || targetClass != null,_				"Either targetObject or targetClass for the field must be specified")___		if (targetObject != null && springAopPresent) {_			targetObject = AopTestUtils.getUltimateTargetObject(targetObject)__		}_		if (targetClass == null) {_			targetClass = targetObject.getClass()__		}__		Field field = ReflectionUtils.findField(targetClass, name, type)__		if (field == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find field '%s' of type [%s] on %s or target class [%s]", name, type,_					safeToString(targetObject), targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_					"Setting field '%s' of type [%s] on %s or target class [%s] to value [%s]", name, type,_					safeToString(targetObject), targetClass, value))__		}_		ReflectionUtils.makeAccessible(field)__		ReflectionUtils.setField(field, targetObject, value)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,code,target,class,to,the,supplied,code,value,p,if,the,supplied,code,target,object,is,a,em,proxy,em,it,will,be,linkplain,aop,test,utils,get,ultimate,target,object,unwrapped,allowing,the,field,to,be,set,on,the,ultimate,target,of,the,proxy,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,set,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,on,which,to,set,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,on,which,to,set,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,since,4,2,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object,see,aop,test,utils,get,ultimate,target,object,object;public,static,void,set,field,nullable,object,target,object,nullable,class,target,class,nullable,string,name,nullable,object,value,nullable,class,type,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,if,target,object,null,spring,aop,present,target,object,aop,test,utils,get,ultimate,target,object,target,object,if,target,class,null,target,class,target,object,get,class,field,field,reflection,utils,find,field,target,class,name,type,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,of,type,s,on,s,or,target,class,s,name,type,safe,to,string,target,object,target,class,if,logger,is,debug,enabled,logger,debug,string,format,setting,field,s,of,type,s,on,s,or,target,class,s,to,value,s,name,type,safe,to,string,target,object,target,class,value,reflection,utils,make,accessible,field,reflection,utils,set,field,field,target,object,value
ReflectionTestUtils -> public static Object invokeGetterMethod(Object target, String name);1328020251;Invoke the getter method with the given {@code name} on the supplied_target object with the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> getter methods.__<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to get the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_getName&quot_ as the method name.__@param target the target object on which to invoke the specified getter_method_@param name the name of the getter method to invoke or the corresponding_property name_@return the value returned from the invocation_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static Object invokeGetterMethod(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		String getterMethodName = name__		if (!name.startsWith(GETTER_PREFIX)) {_			getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		if (method == null && !getterMethodName.equals(name)) {_			getterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		}_		Assert.notNull(method, "Could not find getter method [" + getterMethodName + "] on target [" + target + "]")___		if (logger.isDebugEnabled()) {_			logger.debug("Invoking getter method [" + getterMethodName + "] on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		return ReflectionUtils.invokeMethod(method, target)__	};invoke,the,getter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,getter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,get,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,get,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,getter,method,param,name,the,name,of,the,getter,method,to,invoke,or,the,corresponding,property,name,return,the,value,returned,from,the,invocation,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,object,invoke,getter,method,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,string,getter,method,name,name,if,name,starts,with,getter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,getter,method,name,equals,name,getter,method,name,name,method,reflection,utils,find,method,target,get,class,getter,method,name,assert,not,null,method,could,not,find,getter,method,getter,method,name,on,target,target,if,logger,is,debug,enabled,logger,debug,invoking,getter,method,getter,method,name,on,target,target,reflection,utils,make,accessible,method,return,reflection,utils,invoke,method,method,target
ReflectionTestUtils -> public static Object invokeGetterMethod(Object target, String name);1344609895;Invoke the getter method with the given {@code name} on the supplied_target object with the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> getter methods.__<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to get the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_getName&quot_ as the method name.__@param target the target object on which to invoke the specified getter_method_@param name the name of the getter method to invoke or the corresponding_property name_@return the value returned from the invocation_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static Object invokeGetterMethod(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		String getterMethodName = name__		if (!name.startsWith(GETTER_PREFIX)) {_			getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		if (method == null && !getterMethodName.equals(name)) {_			getterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		}_		Assert.notNull(method, "Could not find getter method [" + getterMethodName + "] on target [" + target + "]")___		if (logger.isDebugEnabled()) {_			logger.debug("Invoking getter method [" + getterMethodName + "] on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		return ReflectionUtils.invokeMethod(method, target)__	};invoke,the,getter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,getter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,get,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,get,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,getter,method,param,name,the,name,of,the,getter,method,to,invoke,or,the,corresponding,property,name,return,the,value,returned,from,the,invocation,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,object,invoke,getter,method,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,string,getter,method,name,name,if,name,starts,with,getter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,getter,method,name,equals,name,getter,method,name,name,method,reflection,utils,find,method,target,get,class,getter,method,name,assert,not,null,method,could,not,find,getter,method,getter,method,name,on,target,target,if,logger,is,debug,enabled,logger,debug,invoking,getter,method,getter,method,name,on,target,target,reflection,utils,make,accessible,method,return,reflection,utils,invoke,method,method,target
ReflectionTestUtils -> public static Object invokeGetterMethod(Object target, String name);1356735495;Invoke the getter method with the given {@code name} on the supplied_target object with the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> getter methods.__<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to get the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_getName&quot_ as the method name.__@param target the target object on which to invoke the specified getter_method_@param name the name of the getter method to invoke or the corresponding_property name_@return the value returned from the invocation_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static Object invokeGetterMethod(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		String getterMethodName = name__		if (!name.startsWith(GETTER_PREFIX)) {_			getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		if (method == null && !getterMethodName.equals(name)) {_			getterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		}_		Assert.notNull(method, "Could not find getter method [" + getterMethodName + "] on target [" + target + "]")___		if (logger.isDebugEnabled()) {_			logger.debug("Invoking getter method [" + getterMethodName + "] on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		return ReflectionUtils.invokeMethod(method, target)__	};invoke,the,getter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,getter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,get,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,get,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,getter,method,param,name,the,name,of,the,getter,method,to,invoke,or,the,corresponding,property,name,return,the,value,returned,from,the,invocation,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,object,invoke,getter,method,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,string,getter,method,name,name,if,name,starts,with,getter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,getter,method,name,equals,name,getter,method,name,name,method,reflection,utils,find,method,target,get,class,getter,method,name,assert,not,null,method,could,not,find,getter,method,getter,method,name,on,target,target,if,logger,is,debug,enabled,logger,debug,invoking,getter,method,getter,method,name,on,target,target,reflection,utils,make,accessible,method,return,reflection,utils,invoke,method,method,target
ReflectionTestUtils -> public static Object invokeGetterMethod(Object target, String name);1413848647;Invoke the getter method with the given {@code name} on the supplied_target object with the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> getter methods.__<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to get the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_getName&quot_ as the method name.__@param target the target object on which to invoke the specified getter_method_@param name the name of the getter method to invoke or the corresponding_property name_@return the value returned from the invocation_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static Object invokeGetterMethod(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		String getterMethodName = name__		if (!name.startsWith(GETTER_PREFIX)) {_			getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		if (method == null && !getterMethodName.equals(name)) {_			getterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		}_		Assert.notNull(method, "Could not find getter method [" + getterMethodName + "] on target [" + target + "]")___		if (logger.isDebugEnabled()) {_			logger.debug("Invoking getter method [" + getterMethodName + "] on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		return ReflectionUtils.invokeMethod(method, target)__	};invoke,the,getter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,getter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,get,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,get,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,getter,method,param,name,the,name,of,the,getter,method,to,invoke,or,the,corresponding,property,name,return,the,value,returned,from,the,invocation,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,object,invoke,getter,method,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,string,getter,method,name,name,if,name,starts,with,getter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,getter,method,name,equals,name,getter,method,name,name,method,reflection,utils,find,method,target,get,class,getter,method,name,assert,not,null,method,could,not,find,getter,method,getter,method,name,on,target,target,if,logger,is,debug,enabled,logger,debug,invoking,getter,method,getter,method,name,on,target,target,reflection,utils,make,accessible,method,return,reflection,utils,invoke,method,method,target
ReflectionTestUtils -> public static Object invokeGetterMethod(Object target, String name);1428546720;Invoke the getter method with the given {@code name} on the supplied_target object with the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> getter methods.__<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to get the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_getName&quot_ as the method name.__@param target the target object on which to invoke the specified getter_method_@param name the name of the getter method to invoke or the corresponding_property name_@return the value returned from the invocation_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static Object invokeGetterMethod(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		String getterMethodName = name__		if (!name.startsWith(GETTER_PREFIX)) {_			getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		if (method == null && !getterMethodName.equals(name)) {_			getterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		}_		Assert.notNull(method, "Could not find getter method [" + getterMethodName + "] on target [" + target + "]")___		if (logger.isDebugEnabled()) {_			logger.debug("Invoking getter method [" + getterMethodName + "] on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		return ReflectionUtils.invokeMethod(method, target)__	};invoke,the,getter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,getter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,get,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,get,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,getter,method,param,name,the,name,of,the,getter,method,to,invoke,or,the,corresponding,property,name,return,the,value,returned,from,the,invocation,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,object,invoke,getter,method,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,string,getter,method,name,name,if,name,starts,with,getter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,getter,method,name,equals,name,getter,method,name,name,method,reflection,utils,find,method,target,get,class,getter,method,name,assert,not,null,method,could,not,find,getter,method,getter,method,name,on,target,target,if,logger,is,debug,enabled,logger,debug,invoking,getter,method,getter,method,name,on,target,target,reflection,utils,make,accessible,method,return,reflection,utils,invoke,method,method,target
ReflectionTestUtils -> public static Object invokeGetterMethod(Object target, String name);1436919586;Invoke the getter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> getter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to get the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_getName&quot_ as the method name._@param target the target object on which to invoke the specified getter_method_@param name the name of the getter method to invoke or the corresponding_property name_@return the value returned from the invocation_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static Object invokeGetterMethod(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		String getterMethodName = name__		if (!name.startsWith(GETTER_PREFIX)) {_			getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		if (method == null && !getterMethodName.equals(name)) {_			getterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		}_		if (method == null) {_			throw new IllegalArgumentException("Could not find getter method '" + getterMethodName +_					"' on target [" + target + "]")__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Invoking getter method '" + getterMethodName + "' on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		return ReflectionUtils.invokeMethod(method, target)__	};invoke,the,getter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,getter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,get,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,get,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,getter,method,param,name,the,name,of,the,getter,method,to,invoke,or,the,corresponding,property,name,return,the,value,returned,from,the,invocation,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,object,invoke,getter,method,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,string,getter,method,name,name,if,name,starts,with,getter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,getter,method,name,equals,name,getter,method,name,name,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,throw,new,illegal,argument,exception,could,not,find,getter,method,getter,method,name,on,target,target,if,logger,is,debug,enabled,logger,debug,invoking,getter,method,getter,method,name,on,target,target,reflection,utils,make,accessible,method,return,reflection,utils,invoke,method,method,target
ReflectionTestUtils -> public static Object invokeGetterMethod(Object target, String name);1437491400;Invoke the getter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> getter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to get the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_getName&quot_ as the method name._@param target the target object on which to invoke the specified getter_method_@param name the name of the getter method to invoke or the corresponding_property name_@return the value returned from the invocation_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static Object invokeGetterMethod(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		String getterMethodName = name__		if (!name.startsWith(GETTER_PREFIX)) {_			getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		if (method == null && !getterMethodName.equals(name)) {_			getterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		}_		if (method == null) {_			throw new IllegalArgumentException("Could not find getter method '" + getterMethodName +_					"' on target [" + target + "]")__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Invoking getter method '" + getterMethodName + "' on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		return ReflectionUtils.invokeMethod(method, target)__	};invoke,the,getter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,getter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,get,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,get,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,getter,method,param,name,the,name,of,the,getter,method,to,invoke,or,the,corresponding,property,name,return,the,value,returned,from,the,invocation,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,object,invoke,getter,method,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,string,getter,method,name,name,if,name,starts,with,getter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,getter,method,name,equals,name,getter,method,name,name,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,throw,new,illegal,argument,exception,could,not,find,getter,method,getter,method,name,on,target,target,if,logger,is,debug,enabled,logger,debug,invoking,getter,method,getter,method,name,on,target,target,reflection,utils,make,accessible,method,return,reflection,utils,invoke,method,method,target
ReflectionTestUtils -> public static Object invokeGetterMethod(Object target, String name);1458149654;Invoke the getter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> getter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to get the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_getName&quot_ as the method name._@param target the target object on which to invoke the specified getter_method_@param name the name of the getter method to invoke or the corresponding_property name_@return the value returned from the invocation_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static Object invokeGetterMethod(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		String getterMethodName = name__		if (!name.startsWith(GETTER_PREFIX)) {_			getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		if (method == null && !getterMethodName.equals(name)) {_			getterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		}_		if (method == null) {_			throw new IllegalArgumentException("Could not find getter method '" + getterMethodName +_					"' on target [" + target + "]")__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Invoking getter method '" + getterMethodName + "' on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		return ReflectionUtils.invokeMethod(method, target)__	};invoke,the,getter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,getter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,get,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,get,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,getter,method,param,name,the,name,of,the,getter,method,to,invoke,or,the,corresponding,property,name,return,the,value,returned,from,the,invocation,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,object,invoke,getter,method,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,string,getter,method,name,name,if,name,starts,with,getter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,getter,method,name,equals,name,getter,method,name,name,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,throw,new,illegal,argument,exception,could,not,find,getter,method,getter,method,name,on,target,target,if,logger,is,debug,enabled,logger,debug,invoking,getter,method,getter,method,name,on,target,target,reflection,utils,make,accessible,method,return,reflection,utils,invoke,method,method,target
ReflectionTestUtils -> public static Object invokeGetterMethod(Object target, String name);1458220093;Invoke the getter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> getter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to get the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_getName&quot_ as the method name._@param target the target object on which to invoke the specified getter_method_@param name the name of the getter method to invoke or the corresponding_property name_@return the value returned from the invocation_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static Object invokeGetterMethod(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		String getterMethodName = name__		if (!name.startsWith(GETTER_PREFIX)) {_			getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		if (method == null && !getterMethodName.equals(name)) {_			getterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		}_		if (method == null) {_			throw new IllegalArgumentException("Could not find getter method '" + getterMethodName +_					"' on target [" + target + "]")__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Invoking getter method '" + getterMethodName + "' on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		return ReflectionUtils.invokeMethod(method, target)__	};invoke,the,getter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,getter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,get,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,get,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,getter,method,param,name,the,name,of,the,getter,method,to,invoke,or,the,corresponding,property,name,return,the,value,returned,from,the,invocation,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,object,invoke,getter,method,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,string,getter,method,name,name,if,name,starts,with,getter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,getter,method,name,equals,name,getter,method,name,name,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,throw,new,illegal,argument,exception,could,not,find,getter,method,getter,method,name,on,target,target,if,logger,is,debug,enabled,logger,debug,invoking,getter,method,getter,method,name,on,target,target,reflection,utils,make,accessible,method,return,reflection,utils,invoke,method,method,target
ReflectionTestUtils -> public static Object invokeGetterMethod(Object target, String name);1465927706;Invoke the getter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> getter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to get the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_getName&quot_ as the method name._@param target the target object on which to invoke the specified getter_method_@param name the name of the getter method to invoke or the corresponding_property name_@return the value returned from the invocation_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static Object invokeGetterMethod(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		String getterMethodName = name__		if (!name.startsWith(GETTER_PREFIX)) {_			getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		if (method == null && !getterMethodName.equals(name)) {_			getterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		}_		if (method == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find getter method '%s' on %s", getterMethodName, safeToString(target)))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Invoking getter method '%s' on %s", getterMethodName, safeToString(target)))__		}_		ReflectionUtils.makeAccessible(method)__		return ReflectionUtils.invokeMethod(method, target)__	};invoke,the,getter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,getter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,get,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,get,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,getter,method,param,name,the,name,of,the,getter,method,to,invoke,or,the,corresponding,property,name,return,the,value,returned,from,the,invocation,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,object,invoke,getter,method,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,string,getter,method,name,name,if,name,starts,with,getter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,getter,method,name,equals,name,getter,method,name,name,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,throw,new,illegal,argument,exception,string,format,could,not,find,getter,method,s,on,s,getter,method,name,safe,to,string,target,if,logger,is,debug,enabled,logger,debug,string,format,invoking,getter,method,s,on,s,getter,method,name,safe,to,string,target,reflection,utils,make,accessible,method,return,reflection,utils,invoke,method,method,target
ReflectionTestUtils -> public static Object invokeGetterMethod(Object target, String name);1495868221;Invoke the getter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> getter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to get the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_getName&quot_ as the method name._@param target the target object on which to invoke the specified getter_method_@param name the name of the getter method to invoke or the corresponding_property name_@return the value returned from the invocation_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static Object invokeGetterMethod(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		String getterMethodName = name__		if (!name.startsWith(GETTER_PREFIX)) {_			getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		if (method == null && !getterMethodName.equals(name)) {_			getterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		}_		if (method == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find getter method '%s' on %s", getterMethodName, safeToString(target)))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Invoking getter method '%s' on %s", getterMethodName, safeToString(target)))__		}_		ReflectionUtils.makeAccessible(method)__		return ReflectionUtils.invokeMethod(method, target)__	};invoke,the,getter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,getter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,get,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,get,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,getter,method,param,name,the,name,of,the,getter,method,to,invoke,or,the,corresponding,property,name,return,the,value,returned,from,the,invocation,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,object,invoke,getter,method,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,string,getter,method,name,name,if,name,starts,with,getter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,getter,method,name,equals,name,getter,method,name,name,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,throw,new,illegal,argument,exception,string,format,could,not,find,getter,method,s,on,s,getter,method,name,safe,to,string,target,if,logger,is,debug,enabled,logger,debug,string,format,invoking,getter,method,s,on,s,getter,method,name,safe,to,string,target,reflection,utils,make,accessible,method,return,reflection,utils,invoke,method,method,target
ReflectionTestUtils -> public static void setField(Object target, String name, Object value);1328020251;Set the {@link Field field} with the given {@code name} on the provided_{@link Object target object} to the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired field._In addition, an attempt will be made to make non-{@code public} fields_<em>accessible</em>, thus allowing one to set {@code protected},_{@code private}, and <em>package-private</em> fields.__@param target the target object on which to set the field_@param name the name of the field to set_@param value the value to set_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object);public static void setField(Object target, String name, Object value) {_		setField(target, name, value, null)__	};set,the,link,field,field,with,the,given,code,name,on,the,provided,link,object,target,object,to,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,set,code,protected,code,private,and,em,package,private,em,fields,param,target,the,target,object,on,which,to,set,the,field,param,name,the,name,of,the,field,to,set,param,value,the,value,to,set,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object;public,static,void,set,field,object,target,string,name,object,value,set,field,target,name,value,null
ReflectionTestUtils -> public static void setField(Object target, String name, Object value);1344609895;Set the {@link Field field} with the given {@code name} on the provided_{@link Object target object} to the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired field._In addition, an attempt will be made to make non-{@code public} fields_<em>accessible</em>, thus allowing one to set {@code protected},_{@code private}, and <em>package-private</em> fields.__@param target the target object on which to set the field_@param name the name of the field to set_@param value the value to set_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object);public static void setField(Object target, String name, Object value) {_		setField(target, name, value, null)__	};set,the,link,field,field,with,the,given,code,name,on,the,provided,link,object,target,object,to,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,set,code,protected,code,private,and,em,package,private,em,fields,param,target,the,target,object,on,which,to,set,the,field,param,name,the,name,of,the,field,to,set,param,value,the,value,to,set,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object;public,static,void,set,field,object,target,string,name,object,value,set,field,target,name,value,null
ReflectionTestUtils -> public static void setField(Object target, String name, Object value);1356735495;Set the {@link Field field} with the given {@code name} on the provided_{@link Object target object} to the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired field._In addition, an attempt will be made to make non-{@code public} fields_<em>accessible</em>, thus allowing one to set {@code protected},_{@code private}, and <em>package-private</em> fields.__@param target the target object on which to set the field_@param name the name of the field to set_@param value the value to set_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object);public static void setField(Object target, String name, Object value) {_		setField(target, name, value, null)__	};set,the,link,field,field,with,the,given,code,name,on,the,provided,link,object,target,object,to,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,set,code,protected,code,private,and,em,package,private,em,fields,param,target,the,target,object,on,which,to,set,the,field,param,name,the,name,of,the,field,to,set,param,value,the,value,to,set,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object;public,static,void,set,field,object,target,string,name,object,value,set,field,target,name,value,null
ReflectionTestUtils -> public static void setField(Object target, String name, Object value);1413848647;Set the {@link Field field} with the given {@code name} on the provided_{@link Object target object} to the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired field._In addition, an attempt will be made to make non-{@code public} fields_<em>accessible</em>, thus allowing one to set {@code protected},_{@code private}, and <em>package-private</em> fields.__@param target the target object on which to set the field_@param name the name of the field to set_@param value the value to set_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object);public static void setField(Object target, String name, Object value) {_		setField(target, name, value, null)__	};set,the,link,field,field,with,the,given,code,name,on,the,provided,link,object,target,object,to,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,set,code,protected,code,private,and,em,package,private,em,fields,param,target,the,target,object,on,which,to,set,the,field,param,name,the,name,of,the,field,to,set,param,value,the,value,to,set,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object;public,static,void,set,field,object,target,string,name,object,value,set,field,target,name,value,null
ReflectionTestUtils -> public static void setField(Class<?> targetClass, String name, Object value, Class<?> type);1428546720;Set the static {@linkplain Field field} with the given_{@code name}/{@code type} on the provided {@code targetClass} to_the supplied {@code value}.__<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} argument.__@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@since 4.2;public static void setField(Class<?> targetClass, String name, Object value, Class<?> type) {_		setField(null, targetClass, name, value, type)__	};set,the,static,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,since,4,2;public,static,void,set,field,class,target,class,string,name,object,value,class,type,set,field,null,target,class,name,value,type
ReflectionTestUtils -> public static void setField(Class<?> targetClass, String name, Object value, Class<?> type);1436919586;Set the static {@linkplain Field field} with the given_{@code name}/{@code type} on the provided {@code targetClass} to_the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} argument._@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@since 4.2;public static void setField(Class<?> targetClass, String name, Object value, Class<?> type) {_		setField(null, targetClass, name, value, type)__	};set,the,static,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,since,4,2;public,static,void,set,field,class,target,class,string,name,object,value,class,type,set,field,null,target,class,name,value,type
ReflectionTestUtils -> public static void setField(Class<?> targetClass, String name, Object value, Class<?> type);1437491400;Set the static {@linkplain Field field} with the given_{@code name}/{@code type} on the provided {@code targetClass} to_the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} argument._@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@since 4.2;public static void setField(Class<?> targetClass, String name, Object value, Class<?> type) {_		setField(null, targetClass, name, value, type)__	};set,the,static,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,since,4,2;public,static,void,set,field,class,target,class,string,name,object,value,class,type,set,field,null,target,class,name,value,type
ReflectionTestUtils -> public static void setField(Class<?> targetClass, String name, Object value, Class<?> type);1458149654;Set the static {@linkplain Field field} with the given_{@code name}/{@code type} on the provided {@code targetClass} to_the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} argument._@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@since 4.2;public static void setField(Class<?> targetClass, String name, Object value, Class<?> type) {_		setField(null, targetClass, name, value, type)__	};set,the,static,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,since,4,2;public,static,void,set,field,class,target,class,string,name,object,value,class,type,set,field,null,target,class,name,value,type
ReflectionTestUtils -> public static void setField(Class<?> targetClass, String name, Object value, Class<?> type);1458220093;Set the static {@linkplain Field field} with the given_{@code name}/{@code type} on the provided {@code targetClass} to_the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} argument._@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@since 4.2;public static void setField(Class<?> targetClass, String name, Object value, Class<?> type) {_		setField(null, targetClass, name, value, type)__	};set,the,static,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,since,4,2;public,static,void,set,field,class,target,class,string,name,object,value,class,type,set,field,null,target,class,name,value,type
ReflectionTestUtils -> public static void setField(Class<?> targetClass, String name, Object value, Class<?> type);1465927706;Set the static {@linkplain Field field} with the given_{@code name}/{@code type} on the provided {@code targetClass} to_the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} argument._@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@since 4.2;public static void setField(Class<?> targetClass, String name, Object value, Class<?> type) {_		setField(null, targetClass, name, value, type)__	};set,the,static,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,since,4,2;public,static,void,set,field,class,target,class,string,name,object,value,class,type,set,field,null,target,class,name,value,type
ReflectionTestUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T invokeMethod(Object target, String name, Object... args);1496955179;Invoke the method with the given {@code name} on the supplied target_object with the supplied arguments._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> methods._@param target the target object on which to invoke the specified method_@param name the name of the method to invoke_@param args the arguments to provide to the method_@return the invocation result, if any_@see MethodInvoker_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[])_@see ReflectionUtils#handleReflectionException(Exception);@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T invokeMethod(Object target, String name, Object... args) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(target)__			methodInvoker.setTargetMethod(name)__			methodInvoker.setArguments(args)__			methodInvoker.prepare()___			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Invoking method '%s' on %s with arguments %s", name, safeToString(target),_						ObjectUtils.nullSafeToString(args)))__			}__			return (T) methodInvoker.invoke()__		}_		catch (Exception ex) {_			ReflectionUtils.handleReflectionException(ex)__			throw new IllegalStateException("Should never get here")__		}_	};invoke,the,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,arguments,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,methods,param,target,the,target,object,on,which,to,invoke,the,specified,method,param,name,the,name,of,the,method,to,invoke,param,args,the,arguments,to,provide,to,the,method,return,the,invocation,result,if,any,see,method,invoker,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object,see,reflection,utils,handle,reflection,exception,exception;suppress,warnings,unchecked,nullable,public,static,t,t,invoke,method,object,target,string,name,object,args,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,target,method,invoker,set,target,method,name,method,invoker,set,arguments,args,method,invoker,prepare,if,logger,is,debug,enabled,logger,debug,string,format,invoking,method,s,on,s,with,arguments,s,name,safe,to,string,target,object,utils,null,safe,to,string,args,return,t,method,invoker,invoke,catch,exception,ex,reflection,utils,handle,reflection,exception,ex,throw,new,illegal,state,exception,should,never,get,here
ReflectionTestUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T invokeMethod(Object target, String name, Object... args);1499712214;Invoke the method with the given {@code name} on the supplied target_object with the supplied arguments._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> methods._@param target the target object on which to invoke the specified method_@param name the name of the method to invoke_@param args the arguments to provide to the method_@return the invocation result, if any_@see MethodInvoker_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[])_@see ReflectionUtils#handleReflectionException(Exception);@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T invokeMethod(Object target, String name, Object... args) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(target)__			methodInvoker.setTargetMethod(name)__			methodInvoker.setArguments(args)__			methodInvoker.prepare()___			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Invoking method '%s' on %s with arguments %s", name, safeToString(target),_						ObjectUtils.nullSafeToString(args)))__			}__			return (T) methodInvoker.invoke()__		}_		catch (Exception ex) {_			ReflectionUtils.handleReflectionException(ex)__			throw new IllegalStateException("Should never get here")__		}_	};invoke,the,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,arguments,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,methods,param,target,the,target,object,on,which,to,invoke,the,specified,method,param,name,the,name,of,the,method,to,invoke,param,args,the,arguments,to,provide,to,the,method,return,the,invocation,result,if,any,see,method,invoker,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object,see,reflection,utils,handle,reflection,exception,exception;suppress,warnings,unchecked,nullable,public,static,t,t,invoke,method,object,target,string,name,object,args,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,target,method,invoker,set,target,method,name,method,invoker,set,arguments,args,method,invoker,prepare,if,logger,is,debug,enabled,logger,debug,string,format,invoking,method,s,on,s,with,arguments,s,name,safe,to,string,target,object,utils,null,safe,to,string,args,return,t,method,invoker,invoke,catch,exception,ex,reflection,utils,handle,reflection,exception,ex,throw,new,illegal,state,exception,should,never,get,here
ReflectionTestUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T invokeMethod(Object target, String name, Object... args);1499944792;Invoke the method with the given {@code name} on the supplied target_object with the supplied arguments._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> methods._@param target the target object on which to invoke the specified method_@param name the name of the method to invoke_@param args the arguments to provide to the method_@return the invocation result, if any_@see MethodInvoker_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[])_@see ReflectionUtils#handleReflectionException(Exception);@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T invokeMethod(Object target, String name, Object... args) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(target)__			methodInvoker.setTargetMethod(name)__			methodInvoker.setArguments(args)__			methodInvoker.prepare()___			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Invoking method '%s' on %s with arguments %s", name, safeToString(target),_						ObjectUtils.nullSafeToString(args)))__			}__			return (T) methodInvoker.invoke()__		}_		catch (Exception ex) {_			ReflectionUtils.handleReflectionException(ex)__			throw new IllegalStateException("Should never get here")__		}_	};invoke,the,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,arguments,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,methods,param,target,the,target,object,on,which,to,invoke,the,specified,method,param,name,the,name,of,the,method,to,invoke,param,args,the,arguments,to,provide,to,the,method,return,the,invocation,result,if,any,see,method,invoker,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object,see,reflection,utils,handle,reflection,exception,exception;suppress,warnings,unchecked,nullable,public,static,t,t,invoke,method,object,target,string,name,object,args,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,target,method,invoker,set,target,method,name,method,invoker,set,arguments,args,method,invoker,prepare,if,logger,is,debug,enabled,logger,debug,string,format,invoking,method,s,on,s,with,arguments,s,name,safe,to,string,target,object,utils,null,safe,to,string,args,return,t,method,invoker,invoke,catch,exception,ex,reflection,utils,handle,reflection,exception,ex,throw,new,illegal,state,exception,should,never,get,here
ReflectionTestUtils -> public static void setField(Object targetObject, String name, Object value, Class<?> type);1428546720;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject} to the supplied {@code value}.__<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetClass} argument.__@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified;public static void setField(Object targetObject, String name, Object value, Class<?> type) {_		setField(targetObject, null, name, value, type)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified;public,static,void,set,field,object,target,object,string,name,object,value,class,type,set,field,target,object,null,name,value,type
ReflectionTestUtils -> public static void setField(Object targetObject, String name, Object value, Class<?> type);1436919586;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetClass} argument._@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified;public static void setField(Object targetObject, String name, Object value, Class<?> type) {_		setField(targetObject, null, name, value, type)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified;public,static,void,set,field,object,target,object,string,name,object,value,class,type,set,field,target,object,null,name,value,type
ReflectionTestUtils -> public static void setField(Object targetObject, String name, Object value, Class<?> type);1437491400;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetClass} argument._@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified;public static void setField(Object targetObject, String name, Object value, Class<?> type) {_		setField(targetObject, null, name, value, type)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified;public,static,void,set,field,object,target,object,string,name,object,value,class,type,set,field,target,object,null,name,value,type
ReflectionTestUtils -> public static void setField(Object targetObject, String name, Object value, Class<?> type);1458149654;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetClass} argument._@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified;public static void setField(Object targetObject, String name, Object value, Class<?> type) {_		setField(targetObject, null, name, value, type)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified;public,static,void,set,field,object,target,object,string,name,object,value,class,type,set,field,target,object,null,name,value,type
ReflectionTestUtils -> public static void setField(Object targetObject, String name, Object value, Class<?> type);1458220093;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetClass} argument._@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified;public static void setField(Object targetObject, String name, Object value, Class<?> type) {_		setField(targetObject, null, name, value, type)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified;public,static,void,set,field,object,target,object,string,name,object,value,class,type,set,field,target,object,null,name,value,type
ReflectionTestUtils -> public static void setField(Object targetObject, String name, Object value, Class<?> type);1465927706;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetClass} argument._@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified;public static void setField(Object targetObject, String name, Object value, Class<?> type) {_		setField(targetObject, null, name, value, type)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified;public,static,void,set,field,object,target,object,string,name,object,value,class,type,set,field,target,object,null,name,value,type
ReflectionTestUtils -> public static void setField(Object target, String name, Object value, Class<?> type);1328020251;Set the {@link Field field} with the given {@code name} on the provided_{@link Object target object} to the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to set {@code protected},_{@code private}, and <em>package-private</em> fields.__@param target the target object on which to set the field_@param name the name of the field to set_@param value the value to set_@param type the type of the field (may be {@code null})_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object);public static void setField(Object target, String name, Object value, Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Field field = ReflectionUtils.findField(target.getClass(), name, type)__		Assert.notNull(field, "Could not find field [" + name + "] on target [" + target + "]")___		if (logger.isDebugEnabled()) {_			logger.debug("Setting field [" + name + "] on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(field)__		ReflectionUtils.setField(field, target, value)__	};set,the,link,field,field,with,the,given,code,name,on,the,provided,link,object,target,object,to,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,set,code,protected,code,private,and,em,package,private,em,fields,param,target,the,target,object,on,which,to,set,the,field,param,name,the,name,of,the,field,to,set,param,value,the,value,to,set,param,type,the,type,of,the,field,may,be,code,null,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object;public,static,void,set,field,object,target,string,name,object,value,class,type,assert,not,null,target,target,object,must,not,be,null,field,field,reflection,utils,find,field,target,get,class,name,type,assert,not,null,field,could,not,find,field,name,on,target,target,if,logger,is,debug,enabled,logger,debug,setting,field,name,on,target,target,reflection,utils,make,accessible,field,reflection,utils,set,field,field,target,value
ReflectionTestUtils -> public static void setField(Object target, String name, Object value, Class<?> type);1344609895;Set the {@link Field field} with the given {@code name} on the provided_{@link Object target object} to the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to set {@code protected},_{@code private}, and <em>package-private</em> fields.__@param target the target object on which to set the field_@param name the name of the field to set_@param value the value to set_@param type the type of the field (may be {@code null})_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object);public static void setField(Object target, String name, Object value, Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Field field = ReflectionUtils.findField(target.getClass(), name, type)___		_		_		if (field == null) {_			throw new IllegalArgumentException(String.format("Could not find field [%s] of type [%s] on target [%s]",_				name, type, target))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Setting field [%s] of type [%s] on target [%s] to value [%s]", name, type,_				target,_				value))__		}_		ReflectionUtils.makeAccessible(field)__		ReflectionUtils.setField(field, target, value)__	};set,the,link,field,field,with,the,given,code,name,on,the,provided,link,object,target,object,to,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,set,code,protected,code,private,and,em,package,private,em,fields,param,target,the,target,object,on,which,to,set,the,field,param,name,the,name,of,the,field,to,set,param,value,the,value,to,set,param,type,the,type,of,the,field,may,be,code,null,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object;public,static,void,set,field,object,target,string,name,object,value,class,type,assert,not,null,target,target,object,must,not,be,null,field,field,reflection,utils,find,field,target,get,class,name,type,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,of,type,s,on,target,s,name,type,target,if,logger,is,debug,enabled,logger,debug,string,format,setting,field,s,of,type,s,on,target,s,to,value,s,name,type,target,value,reflection,utils,make,accessible,field,reflection,utils,set,field,field,target,value
ReflectionTestUtils -> public static void setField(Object target, String name, Object value, Class<?> type);1356735495;Set the {@link Field field} with the given {@code name} on the provided_{@link Object target object} to the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to set {@code protected},_{@code private}, and <em>package-private</em> fields.__@param target the target object on which to set the field_@param name the name of the field to set_@param value the value to set_@param type the type of the field (may be {@code null})_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object);public static void setField(Object target, String name, Object value, Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Field field = ReflectionUtils.findField(target.getClass(), name, type)___		_		_		if (field == null) {_			throw new IllegalArgumentException(String.format("Could not find field [%s] of type [%s] on target [%s]",_				name, type, target))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Setting field [%s] of type [%s] on target [%s] to value [%s]", name, type,_				target,_				value))__		}_		ReflectionUtils.makeAccessible(field)__		ReflectionUtils.setField(field, target, value)__	};set,the,link,field,field,with,the,given,code,name,on,the,provided,link,object,target,object,to,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,set,code,protected,code,private,and,em,package,private,em,fields,param,target,the,target,object,on,which,to,set,the,field,param,name,the,name,of,the,field,to,set,param,value,the,value,to,set,param,type,the,type,of,the,field,may,be,code,null,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object;public,static,void,set,field,object,target,string,name,object,value,class,type,assert,not,null,target,target,object,must,not,be,null,field,field,reflection,utils,find,field,target,get,class,name,type,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,of,type,s,on,target,s,name,type,target,if,logger,is,debug,enabled,logger,debug,string,format,setting,field,s,of,type,s,on,target,s,to,value,s,name,type,target,value,reflection,utils,make,accessible,field,reflection,utils,set,field,field,target,value
ReflectionTestUtils -> public static void setField(Object target, String name, Object value, Class<?> type);1413848647;Set the {@link Field field} with the given {@code name} on the provided_{@link Object target object} to the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to set {@code protected},_{@code private}, and <em>package-private</em> fields.__@param target the target object on which to set the field_@param name the name of the field to set_@param value the value to set_@param type the type of the field (may be {@code null})_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object);public static void setField(Object target, String name, Object value, Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Field field = ReflectionUtils.findField(target.getClass(), name, type)___		_		_		if (field == null) {_			throw new IllegalArgumentException(String.format("Could not find field [%s] of type [%s] on target [%s]",_				name, type, target))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Setting field [%s] of type [%s] on target [%s] to value [%s]", name, type,_				target,_				value))__		}_		ReflectionUtils.makeAccessible(field)__		ReflectionUtils.setField(field, target, value)__	};set,the,link,field,field,with,the,given,code,name,on,the,provided,link,object,target,object,to,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,set,code,protected,code,private,and,em,package,private,em,fields,param,target,the,target,object,on,which,to,set,the,field,param,name,the,name,of,the,field,to,set,param,value,the,value,to,set,param,type,the,type,of,the,field,may,be,code,null,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object;public,static,void,set,field,object,target,string,name,object,value,class,type,assert,not,null,target,target,object,must,not,be,null,field,field,reflection,utils,find,field,target,get,class,name,type,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,of,type,s,on,target,s,name,type,target,if,logger,is,debug,enabled,logger,debug,string,format,setting,field,s,of,type,s,on,target,s,to,value,s,name,type,target,value,reflection,utils,make,accessible,field,reflection,utils,set,field,field,target,value
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type);1328020251;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods.__<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name.__@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@param type the formal parameter type declared by the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")__		Class<?>[] paramTypes = (type != null ? new Class<?>[] { type } : null)___		String setterMethodName = name__		if (!name.startsWith(SETTER_PREFIX)) {_			setterMethodName = SETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		if (method == null && !setterMethodName.equals(name)) {_			setterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		}_		Assert.notNull(method, "Could not find setter method [" + setterMethodName + "] on target [" + target_				+ "] with parameter type [" + type + "]")___		if (logger.isDebugEnabled()) {_			logger.debug("Invoking setter method [" + setterMethodName + "] on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		ReflectionUtils.invokeMethod(method, target, new Object[] { value })__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,param,type,the,formal,parameter,type,declared,by,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,class,type,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,class,param,types,type,null,new,class,type,null,string,setter,method,name,name,if,name,starts,with,setter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,setter,method,name,equals,name,setter,method,name,name,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,assert,not,null,method,could,not,find,setter,method,setter,method,name,on,target,target,with,parameter,type,type,if,logger,is,debug,enabled,logger,debug,invoking,setter,method,setter,method,name,on,target,target,reflection,utils,make,accessible,method,reflection,utils,invoke,method,method,target,new,object,value
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type);1344609895;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods.__<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name.__@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@param type the formal parameter type declared by the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")__		Class<?>[] paramTypes = (type != null ? new Class<?>[] { type } : null)___		String setterMethodName = name__		if (!name.startsWith(SETTER_PREFIX)) {_			setterMethodName = SETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		if (method == null && !setterMethodName.equals(name)) {_			setterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		}_		Assert.notNull(method, "Could not find setter method [" + setterMethodName + "] on target [" + target_				+ "] with parameter type [" + type + "]")___		if (logger.isDebugEnabled()) {_			logger.debug("Invoking setter method [" + setterMethodName + "] on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		ReflectionUtils.invokeMethod(method, target, new Object[] { value })__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,param,type,the,formal,parameter,type,declared,by,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,class,type,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,class,param,types,type,null,new,class,type,null,string,setter,method,name,name,if,name,starts,with,setter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,setter,method,name,equals,name,setter,method,name,name,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,assert,not,null,method,could,not,find,setter,method,setter,method,name,on,target,target,with,parameter,type,type,if,logger,is,debug,enabled,logger,debug,invoking,setter,method,setter,method,name,on,target,target,reflection,utils,make,accessible,method,reflection,utils,invoke,method,method,target,new,object,value
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type);1356735495;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods.__<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name.__@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@param type the formal parameter type declared by the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")__		Class<?>[] paramTypes = (type != null ? new Class<?>[] { type } : null)___		String setterMethodName = name__		if (!name.startsWith(SETTER_PREFIX)) {_			setterMethodName = SETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		if (method == null && !setterMethodName.equals(name)) {_			setterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		}_		Assert.notNull(method, "Could not find setter method [" + setterMethodName + "] on target [" + target_				+ "] with parameter type [" + type + "]")___		if (logger.isDebugEnabled()) {_			logger.debug("Invoking setter method [" + setterMethodName + "] on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		ReflectionUtils.invokeMethod(method, target, new Object[] { value })__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,param,type,the,formal,parameter,type,declared,by,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,class,type,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,class,param,types,type,null,new,class,type,null,string,setter,method,name,name,if,name,starts,with,setter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,setter,method,name,equals,name,setter,method,name,name,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,assert,not,null,method,could,not,find,setter,method,setter,method,name,on,target,target,with,parameter,type,type,if,logger,is,debug,enabled,logger,debug,invoking,setter,method,setter,method,name,on,target,target,reflection,utils,make,accessible,method,reflection,utils,invoke,method,method,target,new,object,value
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type);1413848647;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods.__<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name.__@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@param type the formal parameter type declared by the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")__		Class<?>[] paramTypes = (type != null ? new Class<?>[] { type } : null)___		String setterMethodName = name__		if (!name.startsWith(SETTER_PREFIX)) {_			setterMethodName = SETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		if (method == null && !setterMethodName.equals(name)) {_			setterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		}_		Assert.notNull(method, "Could not find setter method [" + setterMethodName + "] on target [" + target_				+ "] with parameter type [" + type + "]")___		if (logger.isDebugEnabled()) {_			logger.debug("Invoking setter method [" + setterMethodName + "] on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		ReflectionUtils.invokeMethod(method, target, new Object[] { value })__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,param,type,the,formal,parameter,type,declared,by,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,class,type,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,class,param,types,type,null,new,class,type,null,string,setter,method,name,name,if,name,starts,with,setter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,setter,method,name,equals,name,setter,method,name,name,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,assert,not,null,method,could,not,find,setter,method,setter,method,name,on,target,target,with,parameter,type,type,if,logger,is,debug,enabled,logger,debug,invoking,setter,method,setter,method,name,on,target,target,reflection,utils,make,accessible,method,reflection,utils,invoke,method,method,target,new,object,value
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type);1428546720;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods.__<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name.__@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@param type the formal parameter type declared by the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")__		Class<?>[] paramTypes = (type != null ? new Class<?>[] { type } : null)___		String setterMethodName = name__		if (!name.startsWith(SETTER_PREFIX)) {_			setterMethodName = SETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		if (method == null && !setterMethodName.equals(name)) {_			setterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		}_		Assert.notNull(method, "Could not find setter method [" + setterMethodName + "] on target [" + target_				+ "] with parameter type [" + type + "]")___		if (logger.isDebugEnabled()) {_			logger.debug("Invoking setter method [" + setterMethodName + "] on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		ReflectionUtils.invokeMethod(method, target, new Object[] { value })__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,param,type,the,formal,parameter,type,declared,by,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,class,type,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,class,param,types,type,null,new,class,type,null,string,setter,method,name,name,if,name,starts,with,setter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,setter,method,name,equals,name,setter,method,name,name,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,assert,not,null,method,could,not,find,setter,method,setter,method,name,on,target,target,with,parameter,type,type,if,logger,is,debug,enabled,logger,debug,invoking,setter,method,setter,method,name,on,target,target,reflection,utils,make,accessible,method,reflection,utils,invoke,method,method,target,new,object,value
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type);1436919586;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@param type the formal parameter type declared by the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")__		Class<?>[] paramTypes = (type != null ? new Class<?>[] {type} : null)___		String setterMethodName = name__		if (!name.startsWith(SETTER_PREFIX)) {_			setterMethodName = SETTER_PREFIX + StringUtils.capitalize(name)__		}__		Method method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		if (method == null && !setterMethodName.equals(name)) {_			setterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		}_		if (method == null) {_			throw new IllegalArgumentException("Could not find setter method '" + setterMethodName +_					"' on target [" + target + "] with parameter type [" + type + "]")__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Invoking setter method '" + setterMethodName + "' on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		ReflectionUtils.invokeMethod(method, target, value)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,param,type,the,formal,parameter,type,declared,by,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,class,type,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,class,param,types,type,null,new,class,type,null,string,setter,method,name,name,if,name,starts,with,setter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,setter,method,name,equals,name,setter,method,name,name,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,throw,new,illegal,argument,exception,could,not,find,setter,method,setter,method,name,on,target,target,with,parameter,type,type,if,logger,is,debug,enabled,logger,debug,invoking,setter,method,setter,method,name,on,target,target,reflection,utils,make,accessible,method,reflection,utils,invoke,method,method,target,value
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type);1437491400;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@param type the formal parameter type declared by the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")__		Class<?>[] paramTypes = (type != null ? new Class<?>[] {type} : null)___		String setterMethodName = name__		if (!name.startsWith(SETTER_PREFIX)) {_			setterMethodName = SETTER_PREFIX + StringUtils.capitalize(name)__		}__		Method method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		if (method == null && !setterMethodName.equals(name)) {_			setterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		}_		if (method == null) {_			throw new IllegalArgumentException("Could not find setter method '" + setterMethodName +_					"' on target [" + target + "] with parameter type [" + type + "]")__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Invoking setter method '" + setterMethodName + "' on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		ReflectionUtils.invokeMethod(method, target, value)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,param,type,the,formal,parameter,type,declared,by,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,class,type,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,class,param,types,type,null,new,class,type,null,string,setter,method,name,name,if,name,starts,with,setter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,setter,method,name,equals,name,setter,method,name,name,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,throw,new,illegal,argument,exception,could,not,find,setter,method,setter,method,name,on,target,target,with,parameter,type,type,if,logger,is,debug,enabled,logger,debug,invoking,setter,method,setter,method,name,on,target,target,reflection,utils,make,accessible,method,reflection,utils,invoke,method,method,target,value
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type);1458149654;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@param type the formal parameter type declared by the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")__		Class<?>[] paramTypes = (type != null ? new Class<?>[] {type} : null)___		String setterMethodName = name__		if (!name.startsWith(SETTER_PREFIX)) {_			setterMethodName = SETTER_PREFIX + StringUtils.capitalize(name)__		}__		Method method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		if (method == null && !setterMethodName.equals(name)) {_			setterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		}_		if (method == null) {_			throw new IllegalArgumentException("Could not find setter method '" + setterMethodName +_					"' on target [" + target + "] with parameter type [" + type + "]")__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Invoking setter method '" + setterMethodName + "' on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		ReflectionUtils.invokeMethod(method, target, value)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,param,type,the,formal,parameter,type,declared,by,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,class,type,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,class,param,types,type,null,new,class,type,null,string,setter,method,name,name,if,name,starts,with,setter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,setter,method,name,equals,name,setter,method,name,name,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,throw,new,illegal,argument,exception,could,not,find,setter,method,setter,method,name,on,target,target,with,parameter,type,type,if,logger,is,debug,enabled,logger,debug,invoking,setter,method,setter,method,name,on,target,target,reflection,utils,make,accessible,method,reflection,utils,invoke,method,method,target,value
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type);1458220093;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@param type the formal parameter type declared by the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")__		Class<?>[] paramTypes = (type != null ? new Class<?>[] {type} : null)___		String setterMethodName = name__		if (!name.startsWith(SETTER_PREFIX)) {_			setterMethodName = SETTER_PREFIX + StringUtils.capitalize(name)__		}__		Method method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		if (method == null && !setterMethodName.equals(name)) {_			setterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		}_		if (method == null) {_			throw new IllegalArgumentException("Could not find setter method '" + setterMethodName +_					"' on target [" + target + "] with parameter type [" + type + "]")__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Invoking setter method '" + setterMethodName + "' on target [" + target + "]")__		}_		ReflectionUtils.makeAccessible(method)__		ReflectionUtils.invokeMethod(method, target, value)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,param,type,the,formal,parameter,type,declared,by,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,class,type,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,class,param,types,type,null,new,class,type,null,string,setter,method,name,name,if,name,starts,with,setter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,setter,method,name,equals,name,setter,method,name,name,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,throw,new,illegal,argument,exception,could,not,find,setter,method,setter,method,name,on,target,target,with,parameter,type,type,if,logger,is,debug,enabled,logger,debug,invoking,setter,method,setter,method,name,on,target,target,reflection,utils,make,accessible,method,reflection,utils,invoke,method,method,target,value
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type);1465927706;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@param type the formal parameter type declared by the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")__		Class<?>[] paramTypes = (type != null ? new Class<?>[] {type} : null)___		String setterMethodName = name__		if (!name.startsWith(SETTER_PREFIX)) {_			setterMethodName = SETTER_PREFIX + StringUtils.capitalize(name)__		}__		Method method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		if (method == null && !setterMethodName.equals(name)) {_			setterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		}_		if (method == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find setter method '%s' on %s with parameter type [%s]", setterMethodName,_					safeToString(target), type))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Invoking setter method '%s' on %s with value [%s]", setterMethodName,_					safeToString(target), value))__		}__		ReflectionUtils.makeAccessible(method)__		ReflectionUtils.invokeMethod(method, target, value)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,param,type,the,formal,parameter,type,declared,by,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,class,type,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,class,param,types,type,null,new,class,type,null,string,setter,method,name,name,if,name,starts,with,setter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,setter,method,name,equals,name,setter,method,name,name,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,throw,new,illegal,argument,exception,string,format,could,not,find,setter,method,s,on,s,with,parameter,type,s,setter,method,name,safe,to,string,target,type,if,logger,is,debug,enabled,logger,debug,string,format,invoking,setter,method,s,on,s,with,value,s,setter,method,name,safe,to,string,target,value,reflection,utils,make,accessible,method,reflection,utils,invoke,method,method,target,value
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type);1495868221;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@param type the formal parameter type declared by the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, Object value, Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")__		Class<?>[] paramTypes = (type != null ? new Class<?>[] {type} : null)___		String setterMethodName = name__		if (!name.startsWith(SETTER_PREFIX)) {_			setterMethodName = SETTER_PREFIX + StringUtils.capitalize(name)__		}__		Method method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		if (method == null && !setterMethodName.equals(name)) {_			setterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		}_		if (method == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find setter method '%s' on %s with parameter type [%s]", setterMethodName,_					safeToString(target), type))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Invoking setter method '%s' on %s with value [%s]", setterMethodName,_					safeToString(target), value))__		}__		ReflectionUtils.makeAccessible(method)__		ReflectionUtils.invokeMethod(method, target, value)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,param,type,the,formal,parameter,type,declared,by,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,object,value,class,type,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,class,param,types,type,null,new,class,type,null,string,setter,method,name,name,if,name,starts,with,setter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,setter,method,name,equals,name,setter,method,name,name,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,throw,new,illegal,argument,exception,string,format,could,not,find,setter,method,s,on,s,with,parameter,type,s,setter,method,name,safe,to,string,target,type,if,logger,is,debug,enabled,logger,debug,string,format,invoking,setter,method,s,on,s,with,value,s,setter,method,name,safe,to,string,target,value,reflection,utils,make,accessible,method,reflection,utils,invoke,method,method,target,value
ReflectionTestUtils -> public static void setField(Object targetObject, Class<?> targetClass, String name, Object value, Class<?> type);1428546720;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject}/{@code targetClass} to the supplied_{@code value}.__<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to set {@code protected},_{@code private}, and <em>package-private</em> fields.__@param targetObject the target object on which to set the field_ may be_{@code null} if the field is static_@param targetClass the target class on which to set the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object)_@since 4.2;public static void setField(Object targetObject, Class<?> targetClass, String name, Object value, Class<?> type) {_		Assert.isTrue(targetObject != null || targetClass != null,_			"Either targetObject or targetClass for the field must be specified")___		if (targetClass == null) {_			targetClass = targetObject.getClass()__		}_		Field field = ReflectionUtils.findField(targetClass, name, type)___		_		if (field == null) {_			throw new IllegalArgumentException(String.format(_				"Could not find field [%s] of type [%s] on target object [%s] or target class [%s]", name, type,_				targetObject, targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_				"Setting field [%s] of type [%s] on target object [%s] or target class [%s] to value [%s]", name, type,_				targetObject, targetClass, value))__		}_		ReflectionUtils.makeAccessible(field)__		ReflectionUtils.setField(field, targetObject, value)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,code,target,class,to,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,set,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,on,which,to,set,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,on,which,to,set,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object,since,4,2;public,static,void,set,field,object,target,object,class,target,class,string,name,object,value,class,type,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,if,target,class,null,target,class,target,object,get,class,field,field,reflection,utils,find,field,target,class,name,type,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,of,type,s,on,target,object,s,or,target,class,s,name,type,target,object,target,class,if,logger,is,debug,enabled,logger,debug,string,format,setting,field,s,of,type,s,on,target,object,s,or,target,class,s,to,value,s,name,type,target,object,target,class,value,reflection,utils,make,accessible,field,reflection,utils,set,field,field,target,object,value
ReflectionTestUtils -> public static void setField(Object targetObject, Class<?> targetClass, String name, Object value, Class<?> type);1436919586;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject}/{@code targetClass} to the supplied_{@code value}._<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to set {@code protected},_{@code private}, and <em>package-private</em> fields._@param targetObject the target object on which to set the field_ may be_{@code null} if the field is static_@param targetClass the target class on which to set the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object)_@since 4.2;public static void setField(Object targetObject, Class<?> targetClass, String name, Object value, Class<?> type) {_		Assert.isTrue(targetObject != null || targetClass != null,_			"Either targetObject or targetClass for the field must be specified")___		if (targetClass == null) {_			targetClass = targetObject.getClass()__		}__		Field field = ReflectionUtils.findField(targetClass, name, type)__		if (field == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find field '%s' of type [%s] on target object [%s] or target class [%s]", name, type,_					targetObject, targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_					"Setting field '%s' of type [%s] on target object [%s] or target class [%s] to value [%s]", name, type,_					targetObject, targetClass, value))__		}_		ReflectionUtils.makeAccessible(field)__		ReflectionUtils.setField(field, targetObject, value)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,code,target,class,to,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,set,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,on,which,to,set,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,on,which,to,set,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object,since,4,2;public,static,void,set,field,object,target,object,class,target,class,string,name,object,value,class,type,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,if,target,class,null,target,class,target,object,get,class,field,field,reflection,utils,find,field,target,class,name,type,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,of,type,s,on,target,object,s,or,target,class,s,name,type,target,object,target,class,if,logger,is,debug,enabled,logger,debug,string,format,setting,field,s,of,type,s,on,target,object,s,or,target,class,s,to,value,s,name,type,target,object,target,class,value,reflection,utils,make,accessible,field,reflection,utils,set,field,field,target,object,value
ReflectionTestUtils -> public static void setField(Object targetObject, Class<?> targetClass, String name, Object value, Class<?> type);1437491400;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject}/{@code targetClass} to the supplied_{@code value}._<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to set {@code protected},_{@code private}, and <em>package-private</em> fields._@param targetObject the target object on which to set the field_ may be_{@code null} if the field is static_@param targetClass the target class on which to set the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object)_@since 4.2;public static void setField(Object targetObject, Class<?> targetClass, String name, Object value, Class<?> type) {_		Assert.isTrue(targetObject != null || targetClass != null,_			"Either targetObject or targetClass for the field must be specified")___		if (targetClass == null) {_			targetClass = targetObject.getClass()__		}__		Field field = ReflectionUtils.findField(targetClass, name, type)__		if (field == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find field '%s' of type [%s] on target object [%s] or target class [%s]", name, type,_					targetObject, targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_					"Setting field '%s' of type [%s] on target object [%s] or target class [%s] to value [%s]", name, type,_					targetObject, targetClass, value))__		}_		ReflectionUtils.makeAccessible(field)__		ReflectionUtils.setField(field, targetObject, value)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,code,target,class,to,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,set,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,on,which,to,set,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,on,which,to,set,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object,since,4,2;public,static,void,set,field,object,target,object,class,target,class,string,name,object,value,class,type,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,if,target,class,null,target,class,target,object,get,class,field,field,reflection,utils,find,field,target,class,name,type,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,of,type,s,on,target,object,s,or,target,class,s,name,type,target,object,target,class,if,logger,is,debug,enabled,logger,debug,string,format,setting,field,s,of,type,s,on,target,object,s,or,target,class,s,to,value,s,name,type,target,object,target,class,value,reflection,utils,make,accessible,field,reflection,utils,set,field,field,target,object,value
ReflectionTestUtils -> public static void setField(Object targetObject, Class<?> targetClass, String name, Object value, Class<?> type);1458149654;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject}/{@code targetClass} to the supplied_{@code value}._<p>If the supplied {@code targetObject} is a <em>proxy</em>, it will_be {@linkplain AopTestUtils#getUltimateTargetObject unwrapped} allowing_the field to be set on the ultimate target of the proxy._<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to set {@code protected},_{@code private}, and <em>package-private</em> fields._@param targetObject the target object on which to set the field_ may be_{@code null} if the field is static_@param targetClass the target class on which to set the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object)_@see AopTestUtils#getUltimateTargetObject(Object)_@since 4.2;public static void setField(Object targetObject, Class<?> targetClass, String name, Object value, Class<?> type) {_		Assert.isTrue(targetObject != null || targetClass != null,_			"Either targetObject or targetClass for the field must be specified")___		Object ultimateTarget = (targetObject != null ? AopTestUtils.getUltimateTargetObject(targetObject) : null)___		if (targetClass == null) {_			targetClass = ultimateTarget.getClass()__		}__		Field field = ReflectionUtils.findField(targetClass, name, type)__		if (field == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find field '%s' of type [%s] on target object [%s] or target class [%s]", name, type,_					ultimateTarget, targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_					"Setting field '%s' of type [%s] on target object [%s] or target class [%s] to value [%s]", name, type,_					ultimateTarget, targetClass, value))__		}_		ReflectionUtils.makeAccessible(field)__		ReflectionUtils.setField(field, ultimateTarget, value)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,code,target,class,to,the,supplied,code,value,p,if,the,supplied,code,target,object,is,a,em,proxy,em,it,will,be,linkplain,aop,test,utils,get,ultimate,target,object,unwrapped,allowing,the,field,to,be,set,on,the,ultimate,target,of,the,proxy,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,set,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,on,which,to,set,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,on,which,to,set,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object,see,aop,test,utils,get,ultimate,target,object,object,since,4,2;public,static,void,set,field,object,target,object,class,target,class,string,name,object,value,class,type,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,object,ultimate,target,target,object,null,aop,test,utils,get,ultimate,target,object,target,object,null,if,target,class,null,target,class,ultimate,target,get,class,field,field,reflection,utils,find,field,target,class,name,type,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,of,type,s,on,target,object,s,or,target,class,s,name,type,ultimate,target,target,class,if,logger,is,debug,enabled,logger,debug,string,format,setting,field,s,of,type,s,on,target,object,s,or,target,class,s,to,value,s,name,type,ultimate,target,target,class,value,reflection,utils,make,accessible,field,reflection,utils,set,field,field,ultimate,target,value
ReflectionTestUtils -> public static void setField(Object targetObject, Class<?> targetClass, String name, Object value, Class<?> type);1458220093;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject}/{@code targetClass} to the supplied_{@code value}._<p>If the supplied {@code targetObject} is a <em>proxy</em>, it will_be {@linkplain AopTestUtils#getUltimateTargetObject unwrapped} allowing_the field to be set on the ultimate target of the proxy._<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to set {@code protected},_{@code private}, and <em>package-private</em> fields._@param targetObject the target object on which to set the field_ may be_{@code null} if the field is static_@param targetClass the target class on which to set the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@since 4.2_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object)_@see AopTestUtils#getUltimateTargetObject(Object);public static void setField(Object targetObject, Class<?> targetClass, String name, Object value, Class<?> type) {_		Assert.isTrue(targetObject != null || targetClass != null,_			"Either targetObject or targetClass for the field must be specified")___		Object ultimateTarget = (targetObject != null ? AopTestUtils.getUltimateTargetObject(targetObject) : null)___		if (targetClass == null) {_			targetClass = ultimateTarget.getClass()__		}__		Field field = ReflectionUtils.findField(targetClass, name, type)__		if (field == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find field '%s' of type [%s] on target object [%s] or target class [%s]", name, type,_					ultimateTarget, targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_					"Setting field '%s' of type [%s] on target object [%s] or target class [%s] to value [%s]", name, type,_					ultimateTarget, targetClass, value))__		}_		ReflectionUtils.makeAccessible(field)__		ReflectionUtils.setField(field, ultimateTarget, value)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,code,target,class,to,the,supplied,code,value,p,if,the,supplied,code,target,object,is,a,em,proxy,em,it,will,be,linkplain,aop,test,utils,get,ultimate,target,object,unwrapped,allowing,the,field,to,be,set,on,the,ultimate,target,of,the,proxy,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,set,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,on,which,to,set,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,on,which,to,set,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,since,4,2,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object,see,aop,test,utils,get,ultimate,target,object,object;public,static,void,set,field,object,target,object,class,target,class,string,name,object,value,class,type,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,object,ultimate,target,target,object,null,aop,test,utils,get,ultimate,target,object,target,object,null,if,target,class,null,target,class,ultimate,target,get,class,field,field,reflection,utils,find,field,target,class,name,type,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,of,type,s,on,target,object,s,or,target,class,s,name,type,ultimate,target,target,class,if,logger,is,debug,enabled,logger,debug,string,format,setting,field,s,of,type,s,on,target,object,s,or,target,class,s,to,value,s,name,type,ultimate,target,target,class,value,reflection,utils,make,accessible,field,reflection,utils,set,field,field,ultimate,target,value
ReflectionTestUtils -> public static void setField(Object targetObject, Class<?> targetClass, String name, Object value, Class<?> type);1465927706;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject}/{@code targetClass} to the supplied_{@code value}._<p>If the supplied {@code targetObject} is a <em>proxy</em>, it will_be {@linkplain AopTestUtils#getUltimateTargetObject unwrapped} allowing_the field to be set on the ultimate target of the proxy._<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to set {@code protected},_{@code private}, and <em>package-private</em> fields._@param targetObject the target object on which to set the field_ may be_{@code null} if the field is static_@param targetClass the target class on which to set the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@since 4.2_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#setField(Field, Object, Object)_@see AopTestUtils#getUltimateTargetObject(Object);public static void setField(Object targetObject, Class<?> targetClass, String name, Object value, Class<?> type) {_		Assert.isTrue(targetObject != null || targetClass != null,_			"Either targetObject or targetClass for the field must be specified")___		Object ultimateTarget = (targetObject != null ? AopTestUtils.getUltimateTargetObject(targetObject) : null)___		if (targetClass == null) {_			targetClass = ultimateTarget.getClass()__		}__		Field field = ReflectionUtils.findField(targetClass, name, type)__		if (field == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find field '%s' of type [%s] on %s or target class [%s]", name, type,_					safeToString(ultimateTarget), targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format(_					"Setting field '%s' of type [%s] on %s or target class [%s] to value [%s]", name, type,_					safeToString(ultimateTarget), targetClass, value))__		}_		ReflectionUtils.makeAccessible(field)__		ReflectionUtils.setField(field, ultimateTarget, value)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,code,target,class,to,the,supplied,code,value,p,if,the,supplied,code,target,object,is,a,em,proxy,em,it,will,be,linkplain,aop,test,utils,get,ultimate,target,object,unwrapped,allowing,the,field,to,be,set,on,the,ultimate,target,of,the,proxy,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,set,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,on,which,to,set,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,on,which,to,set,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,since,4,2,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,set,field,field,object,object,see,aop,test,utils,get,ultimate,target,object,object;public,static,void,set,field,object,target,object,class,target,class,string,name,object,value,class,type,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,object,ultimate,target,target,object,null,aop,test,utils,get,ultimate,target,object,target,object,null,if,target,class,null,target,class,ultimate,target,get,class,field,field,reflection,utils,find,field,target,class,name,type,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,of,type,s,on,s,or,target,class,s,name,type,safe,to,string,ultimate,target,target,class,if,logger,is,debug,enabled,logger,debug,string,format,setting,field,s,of,type,s,on,s,or,target,class,s,to,value,s,name,type,safe,to,string,ultimate,target,target,class,value,reflection,utils,make,accessible,field,reflection,utils,set,field,field,ultimate,target,value
ReflectionTestUtils -> @Nullable 	public static Object getField(Class<?> targetClass, String name);1496955179;Get the value of the static {@linkplain Field field} with the given_{@code name} from the provided {@code targetClass}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetObject} argument._@param targetClass the target class from which to get the static field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@since 4.2_@see #getField(Object, String);@Nullable_	public static Object getField(Class<?> targetClass, String name) {_		return getField(null, targetClass, name)__	};get,the,value,of,the,static,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,class,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,from,which,to,get,the,static,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,since,4,2,see,get,field,object,string;nullable,public,static,object,get,field,class,target,class,string,name,return,get,field,null,target,class,name
ReflectionTestUtils -> @Nullable 	public static Object getField(Class<?> targetClass, String name);1499712214;Get the value of the static {@linkplain Field field} with the given_{@code name} from the provided {@code targetClass}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetObject} argument._@param targetClass the target class from which to get the static field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@since 4.2_@see #getField(Object, String);@Nullable_	public static Object getField(Class<?> targetClass, String name) {_		return getField(null, targetClass, name)__	};get,the,value,of,the,static,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,class,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,from,which,to,get,the,static,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,since,4,2,see,get,field,object,string;nullable,public,static,object,get,field,class,target,class,string,name,return,get,field,null,target,class,name
ReflectionTestUtils -> @Nullable 	public static Object getField(Class<?> targetClass, String name);1499944792;Get the value of the static {@linkplain Field field} with the given_{@code name} from the provided {@code targetClass}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetObject} argument._@param targetClass the target class from which to get the static field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@since 4.2_@see #getField(Object, String);@Nullable_	public static Object getField(Class<?> targetClass, String name) {_		return getField(null, targetClass, name)__	};get,the,value,of,the,static,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,class,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,from,which,to,get,the,static,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,since,4,2,see,get,field,object,string;nullable,public,static,object,get,field,class,target,class,string,name,return,get,field,null,target,class,name
ReflectionTestUtils -> @Nullable 	public static Object getField(Object targetObject, String name);1496955179;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetClass} argument._@param targetObject the target object from which to get the field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@see #getField(Class, String);@Nullable_	public static Object getField(Object targetObject, String name) {_		return getField(targetObject, null, name)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,from,which,to,get,the,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,see,get,field,class,string;nullable,public,static,object,get,field,object,target,object,string,name,return,get,field,target,object,null,name
ReflectionTestUtils -> @Nullable 	public static Object getField(Object targetObject, String name);1499712214;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetClass} argument._@param targetObject the target object from which to get the field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@see #getField(Class, String);@Nullable_	public static Object getField(Object targetObject, String name) {_		return getField(targetObject, null, name)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,from,which,to,get,the,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,see,get,field,class,string;nullable,public,static,object,get,field,object,target,object,string,name,return,get,field,target,object,null,name
ReflectionTestUtils -> @Nullable 	public static Object getField(Object targetObject, String name);1499944792;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetClass} argument._@param targetObject the target object from which to get the field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@see #getField(Class, String);@Nullable_	public static Object getField(Object targetObject, String name) {_		return getField(targetObject, null, name)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,from,which,to,get,the,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,see,get,field,class,string;nullable,public,static,object,get,field,object,target,object,string,name,return,get,field,target,object,null,name
ReflectionTestUtils -> public static Object getField(Object targetObject, String name);1428546720;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}.__<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetClass} argument.__@param targetObject the target object from which to get the field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@see #getField(Class, String);public static Object getField(Object targetObject, String name) {_		return getField(targetObject, null, name)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,from,which,to,get,the,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,see,get,field,class,string;public,static,object,get,field,object,target,object,string,name,return,get,field,target,object,null,name
ReflectionTestUtils -> public static Object getField(Object targetObject, String name);1436919586;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetClass} argument._@param targetObject the target object from which to get the field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@see #getField(Class, String);public static Object getField(Object targetObject, String name) {_		return getField(targetObject, null, name)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,from,which,to,get,the,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,see,get,field,class,string;public,static,object,get,field,object,target,object,string,name,return,get,field,target,object,null,name
ReflectionTestUtils -> public static Object getField(Object targetObject, String name);1437491400;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetClass} argument._@param targetObject the target object from which to get the field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@see #getField(Class, String);public static Object getField(Object targetObject, String name) {_		return getField(targetObject, null, name)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,from,which,to,get,the,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,see,get,field,class,string;public,static,object,get,field,object,target,object,string,name,return,get,field,target,object,null,name
ReflectionTestUtils -> public static Object getField(Object targetObject, String name);1458149654;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetClass} argument._@param targetObject the target object from which to get the field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@see #getField(Class, String);public static Object getField(Object targetObject, String name) {_		return getField(targetObject, null, name)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,from,which,to,get,the,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,see,get,field,class,string;public,static,object,get,field,object,target,object,string,name,return,get,field,target,object,null,name
ReflectionTestUtils -> public static Object getField(Object targetObject, String name);1458220093;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetClass} argument._@param targetObject the target object from which to get the field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@see #getField(Class, String);public static Object getField(Object targetObject, String name) {_		return getField(targetObject, null, name)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,from,which,to,get,the,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,see,get,field,class,string;public,static,object,get,field,object,target,object,string,name,return,get,field,target,object,null,name
ReflectionTestUtils -> public static Object getField(Object targetObject, String name);1465927706;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetClass} argument._@param targetObject the target object from which to get the field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@see #getField(Class, String);public static Object getField(Object targetObject, String name) {_		return getField(targetObject, null, name)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,from,which,to,get,the,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,see,get,field,class,string;public,static,object,get,field,object,target,object,string,name,return,get,field,target,object,null,name
ReflectionTestUtils -> public static Object getField(Object targetObject, String name);1495868221;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetClass} argument._@param targetObject the target object from which to get the field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@see #getField(Class, String);public static Object getField(Object targetObject, String name) {_		return getField(targetObject, null, name)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,from,which,to,get,the,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,see,get,field,class,string;public,static,object,get,field,object,target,object,string,name,return,get,field,target,object,null,name
ReflectionTestUtils -> public static void setField(Class<?> targetClass, String name, @Nullable Object value);1496955179;Set the static {@linkplain Field field} with the given {@code name} on_the provided {@code targetClass} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} and {@code type} arguments._@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set_@since 4.2;public static void setField(Class<?> targetClass, String name, @Nullable Object value) {_		setField(null, targetClass, name, value, null)__	};set,the,static,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,and,code,type,arguments,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set,since,4,2;public,static,void,set,field,class,target,class,string,name,nullable,object,value,set,field,null,target,class,name,value,null
ReflectionTestUtils -> public static void setField(Class<?> targetClass, String name, @Nullable Object value);1499712214;Set the static {@linkplain Field field} with the given {@code name} on_the provided {@code targetClass} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} and {@code type} arguments._@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set_@since 4.2;public static void setField(Class<?> targetClass, String name, @Nullable Object value) {_		setField(null, targetClass, name, value, null)__	};set,the,static,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,and,code,type,arguments,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set,since,4,2;public,static,void,set,field,class,target,class,string,name,nullable,object,value,set,field,null,target,class,name,value,null
ReflectionTestUtils -> public static void setField(Class<?> targetClass, String name, @Nullable Object value);1499944792;Set the static {@linkplain Field field} with the given {@code name} on_the provided {@code targetClass} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} and {@code type} arguments._@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set_@since 4.2;public static void setField(Class<?> targetClass, String name, @Nullable Object value) {_		setField(null, targetClass, name, value, null)__	};set,the,static,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,and,code,type,arguments,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set,since,4,2;public,static,void,set,field,class,target,class,string,name,nullable,object,value,set,field,null,target,class,name,value,null
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, @Nullable Object value, @Nullable Class<?> type);1496955179;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@param type the formal parameter type declared by the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, @Nullable Object value, @Nullable Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")__		Class<?>[] paramTypes = (type != null ? new Class<?>[] {type} : null)___		String setterMethodName = name__		if (!name.startsWith(SETTER_PREFIX)) {_			setterMethodName = SETTER_PREFIX + StringUtils.capitalize(name)__		}__		Method method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		if (method == null && !setterMethodName.equals(name)) {_			setterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		}_		if (method == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find setter method '%s' on %s with parameter type [%s]", setterMethodName,_					safeToString(target), type))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Invoking setter method '%s' on %s with value [%s]", setterMethodName,_					safeToString(target), value))__		}__		ReflectionUtils.makeAccessible(method)__		ReflectionUtils.invokeMethod(method, target, value)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,param,type,the,formal,parameter,type,declared,by,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,nullable,object,value,nullable,class,type,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,class,param,types,type,null,new,class,type,null,string,setter,method,name,name,if,name,starts,with,setter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,setter,method,name,equals,name,setter,method,name,name,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,throw,new,illegal,argument,exception,string,format,could,not,find,setter,method,s,on,s,with,parameter,type,s,setter,method,name,safe,to,string,target,type,if,logger,is,debug,enabled,logger,debug,string,format,invoking,setter,method,s,on,s,with,value,s,setter,method,name,safe,to,string,target,value,reflection,utils,make,accessible,method,reflection,utils,invoke,method,method,target,value
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, @Nullable Object value, @Nullable Class<?> type);1499712214;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@param type the formal parameter type declared by the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, @Nullable Object value, @Nullable Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")__		Class<?>[] paramTypes = (type != null ? new Class<?>[] {type} : null)___		String setterMethodName = name__		if (!name.startsWith(SETTER_PREFIX)) {_			setterMethodName = SETTER_PREFIX + StringUtils.capitalize(name)__		}__		Method method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		if (method == null && !setterMethodName.equals(name)) {_			setterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		}_		if (method == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find setter method '%s' on %s with parameter type [%s]", setterMethodName,_					safeToString(target), type))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Invoking setter method '%s' on %s with value [%s]", setterMethodName,_					safeToString(target), value))__		}__		ReflectionUtils.makeAccessible(method)__		ReflectionUtils.invokeMethod(method, target, value)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,param,type,the,formal,parameter,type,declared,by,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,nullable,object,value,nullable,class,type,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,class,param,types,type,null,new,class,type,null,string,setter,method,name,name,if,name,starts,with,setter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,setter,method,name,equals,name,setter,method,name,name,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,throw,new,illegal,argument,exception,string,format,could,not,find,setter,method,s,on,s,with,parameter,type,s,setter,method,name,safe,to,string,target,type,if,logger,is,debug,enabled,logger,debug,string,format,invoking,setter,method,s,on,s,with,value,s,setter,method,name,safe,to,string,target,value,reflection,utils,make,accessible,method,reflection,utils,invoke,method,method,target,value
ReflectionTestUtils -> public static void invokeSetterMethod(Object target, String name, @Nullable Object value, @Nullable Class<?> type);1499944792;Invoke the setter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> setter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to set the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_setName&quot_ as the method name._@param target the target object on which to invoke the specified setter_method_@param name the name of the setter method to invoke or the corresponding_property name_@param value the value to provide to the setter method_@param type the formal parameter type declared by the setter method_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);public static void invokeSetterMethod(Object target, String name, @Nullable Object value, @Nullable Class<?> type) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")__		Class<?>[] paramTypes = (type != null ? new Class<?>[] {type} : null)___		String setterMethodName = name__		if (!name.startsWith(SETTER_PREFIX)) {_			setterMethodName = SETTER_PREFIX + StringUtils.capitalize(name)__		}__		Method method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		if (method == null && !setterMethodName.equals(name)) {_			setterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), setterMethodName, paramTypes)__		}_		if (method == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find setter method '%s' on %s with parameter type [%s]", setterMethodName,_					safeToString(target), type))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Invoking setter method '%s' on %s with value [%s]", setterMethodName,_					safeToString(target), value))__		}__		ReflectionUtils.makeAccessible(method)__		ReflectionUtils.invokeMethod(method, target, value)__	};invoke,the,setter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,setter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,set,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,set,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,setter,method,param,name,the,name,of,the,setter,method,to,invoke,or,the,corresponding,property,name,param,value,the,value,to,provide,to,the,setter,method,param,type,the,formal,parameter,type,declared,by,the,setter,method,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;public,static,void,invoke,setter,method,object,target,string,name,nullable,object,value,nullable,class,type,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,class,param,types,type,null,new,class,type,null,string,setter,method,name,name,if,name,starts,with,setter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,setter,method,name,equals,name,setter,method,name,name,method,reflection,utils,find,method,target,get,class,setter,method,name,param,types,if,method,null,throw,new,illegal,argument,exception,string,format,could,not,find,setter,method,s,on,s,with,parameter,type,s,setter,method,name,safe,to,string,target,type,if,logger,is,debug,enabled,logger,debug,string,format,invoking,setter,method,s,on,s,with,value,s,setter,method,name,safe,to,string,target,value,reflection,utils,make,accessible,method,reflection,utils,invoke,method,method,target,value
ReflectionTestUtils -> public static void setField(Object targetObject, String name, Object value);1428546720;Set the {@linkplain Field field} with the given {@code name} on the_provided {@code targetObject} to the supplied {@code value}.__<p>This method delegates to {@link #setField(Object, String, Object, Class)},_supplying {@code null} for the {@code type} argument.__@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set;public static void setField(Object targetObject, String name, Object value) {_		setField(targetObject, name, value, null)__	};set,the,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,string,object,class,supplying,code,null,for,the,code,type,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set;public,static,void,set,field,object,target,object,string,name,object,value,set,field,target,object,name,value,null
ReflectionTestUtils -> public static void setField(Object targetObject, String name, Object value);1436919586;Set the {@linkplain Field field} with the given {@code name} on the_provided {@code targetObject} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, String, Object, Class)},_supplying {@code null} for the {@code type} argument._@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set;public static void setField(Object targetObject, String name, Object value) {_		setField(targetObject, name, value, null)__	};set,the,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,string,object,class,supplying,code,null,for,the,code,type,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set;public,static,void,set,field,object,target,object,string,name,object,value,set,field,target,object,name,value,null
ReflectionTestUtils -> public static void setField(Object targetObject, String name, Object value);1437491400;Set the {@linkplain Field field} with the given {@code name} on the_provided {@code targetObject} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, String, Object, Class)},_supplying {@code null} for the {@code type} argument._@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set;public static void setField(Object targetObject, String name, Object value) {_		setField(targetObject, name, value, null)__	};set,the,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,string,object,class,supplying,code,null,for,the,code,type,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set;public,static,void,set,field,object,target,object,string,name,object,value,set,field,target,object,name,value,null
ReflectionTestUtils -> public static void setField(Object targetObject, String name, Object value);1458149654;Set the {@linkplain Field field} with the given {@code name} on the_provided {@code targetObject} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, String, Object, Class)},_supplying {@code null} for the {@code type} argument._@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set;public static void setField(Object targetObject, String name, Object value) {_		setField(targetObject, name, value, null)__	};set,the,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,string,object,class,supplying,code,null,for,the,code,type,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set;public,static,void,set,field,object,target,object,string,name,object,value,set,field,target,object,name,value,null
ReflectionTestUtils -> public static void setField(Object targetObject, String name, Object value);1458220093;Set the {@linkplain Field field} with the given {@code name} on the_provided {@code targetObject} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, String, Object, Class)},_supplying {@code null} for the {@code type} argument._@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set;public static void setField(Object targetObject, String name, Object value) {_		setField(targetObject, name, value, null)__	};set,the,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,string,object,class,supplying,code,null,for,the,code,type,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set;public,static,void,set,field,object,target,object,string,name,object,value,set,field,target,object,name,value,null
ReflectionTestUtils -> public static void setField(Object targetObject, String name, Object value);1465927706;Set the {@linkplain Field field} with the given {@code name} on the_provided {@code targetObject} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, String, Object, Class)},_supplying {@code null} for the {@code type} argument._@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set;public static void setField(Object targetObject, String name, Object value) {_		setField(targetObject, name, value, null)__	};set,the,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,string,object,class,supplying,code,null,for,the,code,type,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set;public,static,void,set,field,object,target,object,string,name,object,value,set,field,target,object,name,value,null
ReflectionTestUtils -> public static void setField(Object targetObject, String name, Object value);1495868221;Set the {@linkplain Field field} with the given {@code name} on the_provided {@code targetObject} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, String, Object, Class)},_supplying {@code null} for the {@code type} argument._@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set;public static void setField(Object targetObject, String name, Object value) {_		setField(targetObject, name, value, null)__	};set,the,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,string,object,class,supplying,code,null,for,the,code,type,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set;public,static,void,set,field,object,target,object,string,name,object,value,set,field,target,object,name,value,null
ReflectionTestUtils -> public static void setField(Class<?> targetClass, String name, Object value);1428546720;Set the static {@linkplain Field field} with the given {@code name} on_the provided {@code targetClass} to the supplied {@code value}.__<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} and {@code type} arguments.__@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set_@since 4.2;public static void setField(Class<?> targetClass, String name, Object value) {_		setField(null, targetClass, name, value, null)__	};set,the,static,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,and,code,type,arguments,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set,since,4,2;public,static,void,set,field,class,target,class,string,name,object,value,set,field,null,target,class,name,value,null
ReflectionTestUtils -> public static void setField(Class<?> targetClass, String name, Object value);1436919586;Set the static {@linkplain Field field} with the given {@code name} on_the provided {@code targetClass} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} and {@code type} arguments._@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set_@since 4.2;public static void setField(Class<?> targetClass, String name, Object value) {_		setField(null, targetClass, name, value, null)__	};set,the,static,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,and,code,type,arguments,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set,since,4,2;public,static,void,set,field,class,target,class,string,name,object,value,set,field,null,target,class,name,value,null
ReflectionTestUtils -> public static void setField(Class<?> targetClass, String name, Object value);1437491400;Set the static {@linkplain Field field} with the given {@code name} on_the provided {@code targetClass} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} and {@code type} arguments._@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set_@since 4.2;public static void setField(Class<?> targetClass, String name, Object value) {_		setField(null, targetClass, name, value, null)__	};set,the,static,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,and,code,type,arguments,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set,since,4,2;public,static,void,set,field,class,target,class,string,name,object,value,set,field,null,target,class,name,value,null
ReflectionTestUtils -> public static void setField(Class<?> targetClass, String name, Object value);1458149654;Set the static {@linkplain Field field} with the given {@code name} on_the provided {@code targetClass} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} and {@code type} arguments._@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set_@since 4.2;public static void setField(Class<?> targetClass, String name, Object value) {_		setField(null, targetClass, name, value, null)__	};set,the,static,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,and,code,type,arguments,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set,since,4,2;public,static,void,set,field,class,target,class,string,name,object,value,set,field,null,target,class,name,value,null
ReflectionTestUtils -> public static void setField(Class<?> targetClass, String name, Object value);1458220093;Set the static {@linkplain Field field} with the given {@code name} on_the provided {@code targetClass} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} and {@code type} arguments._@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set_@since 4.2;public static void setField(Class<?> targetClass, String name, Object value) {_		setField(null, targetClass, name, value, null)__	};set,the,static,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,and,code,type,arguments,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set,since,4,2;public,static,void,set,field,class,target,class,string,name,object,value,set,field,null,target,class,name,value,null
ReflectionTestUtils -> public static void setField(Class<?> targetClass, String name, Object value);1465927706;Set the static {@linkplain Field field} with the given {@code name} on_the provided {@code targetClass} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} and {@code type} arguments._@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set_@since 4.2;public static void setField(Class<?> targetClass, String name, Object value) {_		setField(null, targetClass, name, value, null)__	};set,the,static,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,and,code,type,arguments,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set,since,4,2;public,static,void,set,field,class,target,class,string,name,object,value,set,field,null,target,class,name,value,null
ReflectionTestUtils -> public static void setField(Class<?> targetClass, String name, Object value);1495868221;Set the static {@linkplain Field field} with the given {@code name} on_the provided {@code targetClass} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} and {@code type} arguments._@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set_@since 4.2;public static void setField(Class<?> targetClass, String name, Object value) {_		setField(null, targetClass, name, value, null)__	};set,the,static,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,and,code,type,arguments,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set,since,4,2;public,static,void,set,field,class,target,class,string,name,object,value,set,field,null,target,class,name,value,null
ReflectionTestUtils -> public static void setField( 			Class<?> targetClass, @Nullable String name, @Nullable Object value, @Nullable Class<?> type);1496955179;Set the static {@linkplain Field field} with the given_{@code name}/{@code type} on the provided {@code targetClass} to_the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} argument._@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@since 4.2;public static void setField(_			Class<?> targetClass, @Nullable String name, @Nullable Object value, @Nullable Class<?> type) {__		setField(null, targetClass, name, value, type)__	};set,the,static,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,since,4,2;public,static,void,set,field,class,target,class,nullable,string,name,nullable,object,value,nullable,class,type,set,field,null,target,class,name,value,type
ReflectionTestUtils -> public static void setField( 			Class<?> targetClass, @Nullable String name, @Nullable Object value, @Nullable Class<?> type);1499712214;Set the static {@linkplain Field field} with the given_{@code name}/{@code type} on the provided {@code targetClass} to_the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} argument._@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@since 4.2;public static void setField(_			Class<?> targetClass, @Nullable String name, @Nullable Object value, @Nullable Class<?> type) {__		setField(null, targetClass, name, value, type)__	};set,the,static,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,since,4,2;public,static,void,set,field,class,target,class,nullable,string,name,nullable,object,value,nullable,class,type,set,field,null,target,class,name,value,type
ReflectionTestUtils -> public static void setField( 			Class<?> targetClass, @Nullable String name, @Nullable Object value, @Nullable Class<?> type);1499944792;Set the static {@linkplain Field field} with the given_{@code name}/{@code type} on the provided {@code targetClass} to_the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetObject} argument._@param targetClass the target class on which to set the static field__never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified_@since 4.2;public static void setField(_			Class<?> targetClass, @Nullable String name, @Nullable Object value, @Nullable Class<?> type) {__		setField(null, targetClass, name, value, type)__	};set,the,static,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,class,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,on,which,to,set,the,static,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified,since,4,2;public,static,void,set,field,class,target,class,nullable,string,name,nullable,object,value,nullable,class,type,set,field,null,target,class,name,value,type
ReflectionTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T invokeMethod(Object target, String name, Object... args);1328020251;Invoke the method with the given {@code name} on the supplied target_object with the supplied arguments.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> methods.__@param target the target object on which to invoke the specified method_@param name the name of the method to invoke_@param args the arguments to provide to the method_@return the invocation result, if any_@see MethodInvoker_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[])_@see ReflectionUtils#handleReflectionException(Exception);@SuppressWarnings("unchecked")_	public static <T> T invokeMethod(Object target, String name, Object... args) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(target)__			methodInvoker.setTargetMethod(name)__			methodInvoker.setArguments(args)__			methodInvoker.prepare()___			if (logger.isDebugEnabled()) {_				logger.debug("Invoking method [" + name + "] on target [" + target + "] with arguments ["_						+ ObjectUtils.nullSafeToString(args) + "]")__			}__			return (T) methodInvoker.invoke()__		}_		catch (Exception e) {_			ReflectionUtils.handleReflectionException(e)__		}__		throw new IllegalStateException("Should never get here")__	};invoke,the,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,arguments,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,methods,param,target,the,target,object,on,which,to,invoke,the,specified,method,param,name,the,name,of,the,method,to,invoke,param,args,the,arguments,to,provide,to,the,method,return,the,invocation,result,if,any,see,method,invoker,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object,see,reflection,utils,handle,reflection,exception,exception;suppress,warnings,unchecked,public,static,t,t,invoke,method,object,target,string,name,object,args,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,target,method,invoker,set,target,method,name,method,invoker,set,arguments,args,method,invoker,prepare,if,logger,is,debug,enabled,logger,debug,invoking,method,name,on,target,target,with,arguments,object,utils,null,safe,to,string,args,return,t,method,invoker,invoke,catch,exception,e,reflection,utils,handle,reflection,exception,e,throw,new,illegal,state,exception,should,never,get,here
ReflectionTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T invokeMethod(Object target, String name, Object... args);1344609895;Invoke the method with the given {@code name} on the supplied target_object with the supplied arguments.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> methods.__@param target the target object on which to invoke the specified method_@param name the name of the method to invoke_@param args the arguments to provide to the method_@return the invocation result, if any_@see MethodInvoker_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[])_@see ReflectionUtils#handleReflectionException(Exception);@SuppressWarnings("unchecked")_	public static <T> T invokeMethod(Object target, String name, Object... args) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(target)__			methodInvoker.setTargetMethod(name)__			methodInvoker.setArguments(args)__			methodInvoker.prepare()___			if (logger.isDebugEnabled()) {_				logger.debug("Invoking method [" + name + "] on target [" + target + "] with arguments ["_						+ ObjectUtils.nullSafeToString(args) + "]")__			}__			return (T) methodInvoker.invoke()__		}_		catch (Exception e) {_			ReflectionUtils.handleReflectionException(e)__		}__		throw new IllegalStateException("Should never get here")__	};invoke,the,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,arguments,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,methods,param,target,the,target,object,on,which,to,invoke,the,specified,method,param,name,the,name,of,the,method,to,invoke,param,args,the,arguments,to,provide,to,the,method,return,the,invocation,result,if,any,see,method,invoker,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object,see,reflection,utils,handle,reflection,exception,exception;suppress,warnings,unchecked,public,static,t,t,invoke,method,object,target,string,name,object,args,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,target,method,invoker,set,target,method,name,method,invoker,set,arguments,args,method,invoker,prepare,if,logger,is,debug,enabled,logger,debug,invoking,method,name,on,target,target,with,arguments,object,utils,null,safe,to,string,args,return,t,method,invoker,invoke,catch,exception,e,reflection,utils,handle,reflection,exception,e,throw,new,illegal,state,exception,should,never,get,here
ReflectionTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T invokeMethod(Object target, String name, Object... args);1356735495;Invoke the method with the given {@code name} on the supplied target_object with the supplied arguments.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> methods.__@param target the target object on which to invoke the specified method_@param name the name of the method to invoke_@param args the arguments to provide to the method_@return the invocation result, if any_@see MethodInvoker_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[])_@see ReflectionUtils#handleReflectionException(Exception);@SuppressWarnings("unchecked")_	public static <T> T invokeMethod(Object target, String name, Object... args) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(target)__			methodInvoker.setTargetMethod(name)__			methodInvoker.setArguments(args)__			methodInvoker.prepare()___			if (logger.isDebugEnabled()) {_				logger.debug("Invoking method [" + name + "] on target [" + target + "] with arguments ["_						+ ObjectUtils.nullSafeToString(args) + "]")__			}__			return (T) methodInvoker.invoke()__		}_		catch (Exception e) {_			ReflectionUtils.handleReflectionException(e)__		}__		throw new IllegalStateException("Should never get here")__	};invoke,the,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,arguments,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,methods,param,target,the,target,object,on,which,to,invoke,the,specified,method,param,name,the,name,of,the,method,to,invoke,param,args,the,arguments,to,provide,to,the,method,return,the,invocation,result,if,any,see,method,invoker,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object,see,reflection,utils,handle,reflection,exception,exception;suppress,warnings,unchecked,public,static,t,t,invoke,method,object,target,string,name,object,args,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,target,method,invoker,set,target,method,name,method,invoker,set,arguments,args,method,invoker,prepare,if,logger,is,debug,enabled,logger,debug,invoking,method,name,on,target,target,with,arguments,object,utils,null,safe,to,string,args,return,t,method,invoker,invoke,catch,exception,e,reflection,utils,handle,reflection,exception,e,throw,new,illegal,state,exception,should,never,get,here
ReflectionTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T invokeMethod(Object target, String name, Object... args);1413848647;Invoke the method with the given {@code name} on the supplied target_object with the supplied arguments.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> methods.__@param target the target object on which to invoke the specified method_@param name the name of the method to invoke_@param args the arguments to provide to the method_@return the invocation result, if any_@see MethodInvoker_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[])_@see ReflectionUtils#handleReflectionException(Exception);@SuppressWarnings("unchecked")_	public static <T> T invokeMethod(Object target, String name, Object... args) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(target)__			methodInvoker.setTargetMethod(name)__			methodInvoker.setArguments(args)__			methodInvoker.prepare()___			if (logger.isDebugEnabled()) {_				logger.debug("Invoking method [" + name + "] on target [" + target + "] with arguments ["_						+ ObjectUtils.nullSafeToString(args) + "]")__			}__			return (T) methodInvoker.invoke()__		}_		catch (Exception e) {_			ReflectionUtils.handleReflectionException(e)__		}__		throw new IllegalStateException("Should never get here")__	};invoke,the,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,arguments,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,methods,param,target,the,target,object,on,which,to,invoke,the,specified,method,param,name,the,name,of,the,method,to,invoke,param,args,the,arguments,to,provide,to,the,method,return,the,invocation,result,if,any,see,method,invoker,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object,see,reflection,utils,handle,reflection,exception,exception;suppress,warnings,unchecked,public,static,t,t,invoke,method,object,target,string,name,object,args,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,target,method,invoker,set,target,method,name,method,invoker,set,arguments,args,method,invoker,prepare,if,logger,is,debug,enabled,logger,debug,invoking,method,name,on,target,target,with,arguments,object,utils,null,safe,to,string,args,return,t,method,invoker,invoke,catch,exception,e,reflection,utils,handle,reflection,exception,e,throw,new,illegal,state,exception,should,never,get,here
ReflectionTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T invokeMethod(Object target, String name, Object... args);1428546720;Invoke the method with the given {@code name} on the supplied target_object with the supplied arguments.__<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> methods.__@param target the target object on which to invoke the specified method_@param name the name of the method to invoke_@param args the arguments to provide to the method_@return the invocation result, if any_@see MethodInvoker_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[])_@see ReflectionUtils#handleReflectionException(Exception);@SuppressWarnings("unchecked")_	public static <T> T invokeMethod(Object target, String name, Object... args) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(target)__			methodInvoker.setTargetMethod(name)__			methodInvoker.setArguments(args)__			methodInvoker.prepare()___			if (logger.isDebugEnabled()) {_				logger.debug("Invoking method [" + name + "] on target [" + target + "] with arguments ["_						+ ObjectUtils.nullSafeToString(args) + "]")__			}__			return (T) methodInvoker.invoke()__		}_		catch (Exception e) {_			ReflectionUtils.handleReflectionException(e)__		}__		throw new IllegalStateException("Should never get here")__	};invoke,the,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,arguments,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,methods,param,target,the,target,object,on,which,to,invoke,the,specified,method,param,name,the,name,of,the,method,to,invoke,param,args,the,arguments,to,provide,to,the,method,return,the,invocation,result,if,any,see,method,invoker,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object,see,reflection,utils,handle,reflection,exception,exception;suppress,warnings,unchecked,public,static,t,t,invoke,method,object,target,string,name,object,args,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,target,method,invoker,set,target,method,name,method,invoker,set,arguments,args,method,invoker,prepare,if,logger,is,debug,enabled,logger,debug,invoking,method,name,on,target,target,with,arguments,object,utils,null,safe,to,string,args,return,t,method,invoker,invoke,catch,exception,e,reflection,utils,handle,reflection,exception,e,throw,new,illegal,state,exception,should,never,get,here
ReflectionTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T invokeMethod(Object target, String name, Object... args);1436919586;Invoke the method with the given {@code name} on the supplied target_object with the supplied arguments._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> methods._@param target the target object on which to invoke the specified method_@param name the name of the method to invoke_@param args the arguments to provide to the method_@return the invocation result, if any_@see MethodInvoker_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[])_@see ReflectionUtils#handleReflectionException(Exception);@SuppressWarnings("unchecked")_	public static <T> T invokeMethod(Object target, String name, Object... args) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(target)__			methodInvoker.setTargetMethod(name)__			methodInvoker.setArguments(args)__			methodInvoker.prepare()___			if (logger.isDebugEnabled()) {_				logger.debug("Invoking method '" + name + "' on target [" + target + "] with arguments [" +_						ObjectUtils.nullSafeToString(args) + "]")__			}__			return (T) methodInvoker.invoke()__		}_		catch (Exception ex) {_			ReflectionUtils.handleReflectionException(ex)__			throw new IllegalStateException("Should never get here")__		}_	};invoke,the,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,arguments,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,methods,param,target,the,target,object,on,which,to,invoke,the,specified,method,param,name,the,name,of,the,method,to,invoke,param,args,the,arguments,to,provide,to,the,method,return,the,invocation,result,if,any,see,method,invoker,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object,see,reflection,utils,handle,reflection,exception,exception;suppress,warnings,unchecked,public,static,t,t,invoke,method,object,target,string,name,object,args,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,target,method,invoker,set,target,method,name,method,invoker,set,arguments,args,method,invoker,prepare,if,logger,is,debug,enabled,logger,debug,invoking,method,name,on,target,target,with,arguments,object,utils,null,safe,to,string,args,return,t,method,invoker,invoke,catch,exception,ex,reflection,utils,handle,reflection,exception,ex,throw,new,illegal,state,exception,should,never,get,here
ReflectionTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T invokeMethod(Object target, String name, Object... args);1437491400;Invoke the method with the given {@code name} on the supplied target_object with the supplied arguments._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> methods._@param target the target object on which to invoke the specified method_@param name the name of the method to invoke_@param args the arguments to provide to the method_@return the invocation result, if any_@see MethodInvoker_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[])_@see ReflectionUtils#handleReflectionException(Exception);@SuppressWarnings("unchecked")_	public static <T> T invokeMethod(Object target, String name, Object... args) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(target)__			methodInvoker.setTargetMethod(name)__			methodInvoker.setArguments(args)__			methodInvoker.prepare()___			if (logger.isDebugEnabled()) {_				logger.debug("Invoking method '" + name + "' on target [" + target + "] with arguments [" +_						ObjectUtils.nullSafeToString(args) + "]")__			}__			return (T) methodInvoker.invoke()__		}_		catch (Exception ex) {_			ReflectionUtils.handleReflectionException(ex)__			throw new IllegalStateException("Should never get here")__		}_	};invoke,the,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,arguments,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,methods,param,target,the,target,object,on,which,to,invoke,the,specified,method,param,name,the,name,of,the,method,to,invoke,param,args,the,arguments,to,provide,to,the,method,return,the,invocation,result,if,any,see,method,invoker,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object,see,reflection,utils,handle,reflection,exception,exception;suppress,warnings,unchecked,public,static,t,t,invoke,method,object,target,string,name,object,args,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,target,method,invoker,set,target,method,name,method,invoker,set,arguments,args,method,invoker,prepare,if,logger,is,debug,enabled,logger,debug,invoking,method,name,on,target,target,with,arguments,object,utils,null,safe,to,string,args,return,t,method,invoker,invoke,catch,exception,ex,reflection,utils,handle,reflection,exception,ex,throw,new,illegal,state,exception,should,never,get,here
ReflectionTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T invokeMethod(Object target, String name, Object... args);1458149654;Invoke the method with the given {@code name} on the supplied target_object with the supplied arguments._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> methods._@param target the target object on which to invoke the specified method_@param name the name of the method to invoke_@param args the arguments to provide to the method_@return the invocation result, if any_@see MethodInvoker_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[])_@see ReflectionUtils#handleReflectionException(Exception);@SuppressWarnings("unchecked")_	public static <T> T invokeMethod(Object target, String name, Object... args) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(target)__			methodInvoker.setTargetMethod(name)__			methodInvoker.setArguments(args)__			methodInvoker.prepare()___			if (logger.isDebugEnabled()) {_				logger.debug("Invoking method '" + name + "' on target [" + target + "] with arguments [" +_						ObjectUtils.nullSafeToString(args) + "]")__			}__			return (T) methodInvoker.invoke()__		}_		catch (Exception ex) {_			ReflectionUtils.handleReflectionException(ex)__			throw new IllegalStateException("Should never get here")__		}_	};invoke,the,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,arguments,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,methods,param,target,the,target,object,on,which,to,invoke,the,specified,method,param,name,the,name,of,the,method,to,invoke,param,args,the,arguments,to,provide,to,the,method,return,the,invocation,result,if,any,see,method,invoker,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object,see,reflection,utils,handle,reflection,exception,exception;suppress,warnings,unchecked,public,static,t,t,invoke,method,object,target,string,name,object,args,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,target,method,invoker,set,target,method,name,method,invoker,set,arguments,args,method,invoker,prepare,if,logger,is,debug,enabled,logger,debug,invoking,method,name,on,target,target,with,arguments,object,utils,null,safe,to,string,args,return,t,method,invoker,invoke,catch,exception,ex,reflection,utils,handle,reflection,exception,ex,throw,new,illegal,state,exception,should,never,get,here
ReflectionTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T invokeMethod(Object target, String name, Object... args);1458220093;Invoke the method with the given {@code name} on the supplied target_object with the supplied arguments._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> methods._@param target the target object on which to invoke the specified method_@param name the name of the method to invoke_@param args the arguments to provide to the method_@return the invocation result, if any_@see MethodInvoker_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[])_@see ReflectionUtils#handleReflectionException(Exception);@SuppressWarnings("unchecked")_	public static <T> T invokeMethod(Object target, String name, Object... args) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(target)__			methodInvoker.setTargetMethod(name)__			methodInvoker.setArguments(args)__			methodInvoker.prepare()___			if (logger.isDebugEnabled()) {_				logger.debug("Invoking method '" + name + "' on target [" + target + "] with arguments [" +_						ObjectUtils.nullSafeToString(args) + "]")__			}__			return (T) methodInvoker.invoke()__		}_		catch (Exception ex) {_			ReflectionUtils.handleReflectionException(ex)__			throw new IllegalStateException("Should never get here")__		}_	};invoke,the,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,arguments,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,methods,param,target,the,target,object,on,which,to,invoke,the,specified,method,param,name,the,name,of,the,method,to,invoke,param,args,the,arguments,to,provide,to,the,method,return,the,invocation,result,if,any,see,method,invoker,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object,see,reflection,utils,handle,reflection,exception,exception;suppress,warnings,unchecked,public,static,t,t,invoke,method,object,target,string,name,object,args,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,target,method,invoker,set,target,method,name,method,invoker,set,arguments,args,method,invoker,prepare,if,logger,is,debug,enabled,logger,debug,invoking,method,name,on,target,target,with,arguments,object,utils,null,safe,to,string,args,return,t,method,invoker,invoke,catch,exception,ex,reflection,utils,handle,reflection,exception,ex,throw,new,illegal,state,exception,should,never,get,here
ReflectionTestUtils -> @SuppressWarnings("unchecked") 	public static <T> T invokeMethod(Object target, String name, Object... args);1465927706;Invoke the method with the given {@code name} on the supplied target_object with the supplied arguments._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> methods._@param target the target object on which to invoke the specified method_@param name the name of the method to invoke_@param args the arguments to provide to the method_@return the invocation result, if any_@see MethodInvoker_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[])_@see ReflectionUtils#handleReflectionException(Exception);@SuppressWarnings("unchecked")_	public static <T> T invokeMethod(Object target, String name, Object... args) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(target)__			methodInvoker.setTargetMethod(name)__			methodInvoker.setArguments(args)__			methodInvoker.prepare()___			if (logger.isDebugEnabled()) {_				logger.debug(String.format("Invoking method '%s' on %s with arguments %s", name, safeToString(target),_						ObjectUtils.nullSafeToString(args)))__			}__			return (T) methodInvoker.invoke()__		}_		catch (Exception ex) {_			ReflectionUtils.handleReflectionException(ex)__			throw new IllegalStateException("Should never get here")__		}_	};invoke,the,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,arguments,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,methods,param,target,the,target,object,on,which,to,invoke,the,specified,method,param,name,the,name,of,the,method,to,invoke,param,args,the,arguments,to,provide,to,the,method,return,the,invocation,result,if,any,see,method,invoker,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object,see,reflection,utils,handle,reflection,exception,exception;suppress,warnings,unchecked,public,static,t,t,invoke,method,object,target,string,name,object,args,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,target,method,invoker,set,target,method,name,method,invoker,set,arguments,args,method,invoker,prepare,if,logger,is,debug,enabled,logger,debug,string,format,invoking,method,s,on,s,with,arguments,s,name,safe,to,string,target,object,utils,null,safe,to,string,args,return,t,method,invoker,invoke,catch,exception,ex,reflection,utils,handle,reflection,exception,ex,throw,new,illegal,state,exception,should,never,get,here
ReflectionTestUtils -> @Nullable 	public static Object invokeGetterMethod(Object target, String name);1496955179;Invoke the getter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> getter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to get the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_getName&quot_ as the method name._@param target the target object on which to invoke the specified getter_method_@param name the name of the getter method to invoke or the corresponding_property name_@return the value returned from the invocation_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);@Nullable_	public static Object invokeGetterMethod(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		String getterMethodName = name__		if (!name.startsWith(GETTER_PREFIX)) {_			getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		if (method == null && !getterMethodName.equals(name)) {_			getterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		}_		if (method == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find getter method '%s' on %s", getterMethodName, safeToString(target)))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Invoking getter method '%s' on %s", getterMethodName, safeToString(target)))__		}_		ReflectionUtils.makeAccessible(method)__		return ReflectionUtils.invokeMethod(method, target)__	};invoke,the,getter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,getter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,get,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,get,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,getter,method,param,name,the,name,of,the,getter,method,to,invoke,or,the,corresponding,property,name,return,the,value,returned,from,the,invocation,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;nullable,public,static,object,invoke,getter,method,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,string,getter,method,name,name,if,name,starts,with,getter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,getter,method,name,equals,name,getter,method,name,name,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,throw,new,illegal,argument,exception,string,format,could,not,find,getter,method,s,on,s,getter,method,name,safe,to,string,target,if,logger,is,debug,enabled,logger,debug,string,format,invoking,getter,method,s,on,s,getter,method,name,safe,to,string,target,reflection,utils,make,accessible,method,return,reflection,utils,invoke,method,method,target
ReflectionTestUtils -> @Nullable 	public static Object invokeGetterMethod(Object target, String name);1499712214;Invoke the getter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> getter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to get the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_getName&quot_ as the method name._@param target the target object on which to invoke the specified getter_method_@param name the name of the getter method to invoke or the corresponding_property name_@return the value returned from the invocation_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);@Nullable_	public static Object invokeGetterMethod(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		String getterMethodName = name__		if (!name.startsWith(GETTER_PREFIX)) {_			getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		if (method == null && !getterMethodName.equals(name)) {_			getterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		}_		if (method == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find getter method '%s' on %s", getterMethodName, safeToString(target)))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Invoking getter method '%s' on %s", getterMethodName, safeToString(target)))__		}_		ReflectionUtils.makeAccessible(method)__		return ReflectionUtils.invokeMethod(method, target)__	};invoke,the,getter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,getter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,get,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,get,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,getter,method,param,name,the,name,of,the,getter,method,to,invoke,or,the,corresponding,property,name,return,the,value,returned,from,the,invocation,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;nullable,public,static,object,invoke,getter,method,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,string,getter,method,name,name,if,name,starts,with,getter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,getter,method,name,equals,name,getter,method,name,name,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,throw,new,illegal,argument,exception,string,format,could,not,find,getter,method,s,on,s,getter,method,name,safe,to,string,target,if,logger,is,debug,enabled,logger,debug,string,format,invoking,getter,method,s,on,s,getter,method,name,safe,to,string,target,reflection,utils,make,accessible,method,return,reflection,utils,invoke,method,method,target
ReflectionTestUtils -> @Nullable 	public static Object invokeGetterMethod(Object target, String name);1499944792;Invoke the getter method with the given {@code name} on the supplied_target object with the supplied {@code value}._<p>This method traverses the class hierarchy in search of the desired_method. In addition, an attempt will be made to make non-{@code public}_methods <em>accessible</em>, thus allowing one to invoke {@code protected},_{@code private}, and <em>package-private</em> getter methods._<p>In addition, this method supports JavaBean-style <em>property</em>_names. For example, if you wish to get the {@code name} property on the_target object, you may pass either &quot_name&quot_ or_&quot_getName&quot_ as the method name._@param target the target object on which to invoke the specified getter_method_@param name the name of the getter method to invoke or the corresponding_property name_@return the value returned from the invocation_@see ReflectionUtils#findMethod(Class, String, Class[])_@see ReflectionUtils#makeAccessible(Method)_@see ReflectionUtils#invokeMethod(Method, Object, Object[]);@Nullable_	public static Object invokeGetterMethod(Object target, String name) {_		Assert.notNull(target, "Target object must not be null")__		Assert.hasText(name, "Method name must not be empty")___		String getterMethodName = name__		if (!name.startsWith(GETTER_PREFIX)) {_			getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)__		}_		Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		if (method == null && !getterMethodName.equals(name)) {_			getterMethodName = name__			method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)__		}_		if (method == null) {_			throw new IllegalArgumentException(String.format(_					"Could not find getter method '%s' on %s", getterMethodName, safeToString(target)))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Invoking getter method '%s' on %s", getterMethodName, safeToString(target)))__		}_		ReflectionUtils.makeAccessible(method)__		return ReflectionUtils.invokeMethod(method, target)__	};invoke,the,getter,method,with,the,given,code,name,on,the,supplied,target,object,with,the,supplied,code,value,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,method,in,addition,an,attempt,will,be,made,to,make,non,code,public,methods,em,accessible,em,thus,allowing,one,to,invoke,code,protected,code,private,and,em,package,private,em,getter,methods,p,in,addition,this,method,supports,java,bean,style,em,property,em,names,for,example,if,you,wish,to,get,the,code,name,property,on,the,target,object,you,may,pass,either,quot,name,quot,or,quot,get,name,quot,as,the,method,name,param,target,the,target,object,on,which,to,invoke,the,specified,getter,method,param,name,the,name,of,the,getter,method,to,invoke,or,the,corresponding,property,name,return,the,value,returned,from,the,invocation,see,reflection,utils,find,method,class,string,class,see,reflection,utils,make,accessible,method,see,reflection,utils,invoke,method,method,object,object;nullable,public,static,object,invoke,getter,method,object,target,string,name,assert,not,null,target,target,object,must,not,be,null,assert,has,text,name,method,name,must,not,be,empty,string,getter,method,name,name,if,name,starts,with,getter,method,name,string,utils,capitalize,name,method,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,getter,method,name,equals,name,getter,method,name,name,method,reflection,utils,find,method,target,get,class,getter,method,name,if,method,null,throw,new,illegal,argument,exception,string,format,could,not,find,getter,method,s,on,s,getter,method,name,safe,to,string,target,if,logger,is,debug,enabled,logger,debug,string,format,invoking,getter,method,s,on,s,getter,method,name,safe,to,string,target,reflection,utils,make,accessible,method,return,reflection,utils,invoke,method,method,target
ReflectionTestUtils -> public static void setField(Object targetObject, @Nullable String name, @Nullable Object value, @Nullable Class<?> type);1496955179;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetClass} argument._@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified;public static void setField(Object targetObject, @Nullable String name, @Nullable Object value, @Nullable Class<?> type) {_		setField(targetObject, null, name, value, type)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified;public,static,void,set,field,object,target,object,nullable,string,name,nullable,object,value,nullable,class,type,set,field,target,object,null,name,value,type
ReflectionTestUtils -> public static void setField(Object targetObject, @Nullable String name, @Nullable Object value, @Nullable Class<?> type);1499712214;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetClass} argument._@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified;public static void setField(Object targetObject, @Nullable String name, @Nullable Object value, @Nullable Class<?> type) {_		setField(targetObject, null, name, value, type)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified;public,static,void,set,field,object,target,object,nullable,string,name,nullable,object,value,nullable,class,type,set,field,target,object,null,name,value,type
ReflectionTestUtils -> public static void setField(Object targetObject, @Nullable String name, @Nullable Object value, @Nullable Class<?> type);1499944792;Set the {@linkplain Field field} with the given {@code name}/{@code type}_on the provided {@code targetObject} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},_supplying {@code null} for the {@code targetClass} argument._@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ may be {@code null} if_{@code type} is specified_@param value the value to set_@param type the type of the field to set_ may be {@code null} if_{@code name} is specified;public static void setField(Object targetObject, @Nullable String name, @Nullable Object value, @Nullable Class<?> type) {_		setField(targetObject, null, name, value, type)__	};set,the,linkplain,field,field,with,the,given,code,name,code,type,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,class,string,object,class,supplying,code,null,for,the,code,target,class,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,may,be,code,null,if,code,type,is,specified,param,value,the,value,to,set,param,type,the,type,of,the,field,to,set,may,be,code,null,if,code,name,is,specified;public,static,void,set,field,object,target,object,nullable,string,name,nullable,object,value,nullable,class,type,set,field,target,object,null,name,value,type
ReflectionTestUtils -> public static Object getField(Class<?> targetClass, String name);1428546720;Get the value of the static {@linkplain Field field} with the given_{@code name} from the provided {@code targetClass}.__<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetObject} argument.__@param targetClass the target class from which to get the static field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@see #getField(Object, String)_@since 4.2;public static Object getField(Class<?> targetClass, String name) {_		return getField(null, targetClass, name)__	};get,the,value,of,the,static,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,class,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,from,which,to,get,the,static,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,see,get,field,object,string,since,4,2;public,static,object,get,field,class,target,class,string,name,return,get,field,null,target,class,name
ReflectionTestUtils -> public static Object getField(Class<?> targetClass, String name);1436919586;Get the value of the static {@linkplain Field field} with the given_{@code name} from the provided {@code targetClass}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetObject} argument._@param targetClass the target class from which to get the static field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@since 4.2_@see #getField(Object, String);public static Object getField(Class<?> targetClass, String name) {_		return getField(null, targetClass, name)__	};get,the,value,of,the,static,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,class,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,from,which,to,get,the,static,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,since,4,2,see,get,field,object,string;public,static,object,get,field,class,target,class,string,name,return,get,field,null,target,class,name
ReflectionTestUtils -> public static Object getField(Class<?> targetClass, String name);1437491400;Get the value of the static {@linkplain Field field} with the given_{@code name} from the provided {@code targetClass}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetObject} argument._@param targetClass the target class from which to get the static field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@since 4.2_@see #getField(Object, String);public static Object getField(Class<?> targetClass, String name) {_		return getField(null, targetClass, name)__	};get,the,value,of,the,static,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,class,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,from,which,to,get,the,static,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,since,4,2,see,get,field,object,string;public,static,object,get,field,class,target,class,string,name,return,get,field,null,target,class,name
ReflectionTestUtils -> public static Object getField(Class<?> targetClass, String name);1458149654;Get the value of the static {@linkplain Field field} with the given_{@code name} from the provided {@code targetClass}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetObject} argument._@param targetClass the target class from which to get the static field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@since 4.2_@see #getField(Object, String);public static Object getField(Class<?> targetClass, String name) {_		return getField(null, targetClass, name)__	};get,the,value,of,the,static,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,class,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,from,which,to,get,the,static,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,since,4,2,see,get,field,object,string;public,static,object,get,field,class,target,class,string,name,return,get,field,null,target,class,name
ReflectionTestUtils -> public static Object getField(Class<?> targetClass, String name);1458220093;Get the value of the static {@linkplain Field field} with the given_{@code name} from the provided {@code targetClass}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetObject} argument._@param targetClass the target class from which to get the static field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@since 4.2_@see #getField(Object, String);public static Object getField(Class<?> targetClass, String name) {_		return getField(null, targetClass, name)__	};get,the,value,of,the,static,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,class,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,from,which,to,get,the,static,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,since,4,2,see,get,field,object,string;public,static,object,get,field,class,target,class,string,name,return,get,field,null,target,class,name
ReflectionTestUtils -> public static Object getField(Class<?> targetClass, String name);1465927706;Get the value of the static {@linkplain Field field} with the given_{@code name} from the provided {@code targetClass}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetObject} argument._@param targetClass the target class from which to get the static field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@since 4.2_@see #getField(Object, String);public static Object getField(Class<?> targetClass, String name) {_		return getField(null, targetClass, name)__	};get,the,value,of,the,static,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,class,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,from,which,to,get,the,static,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,since,4,2,see,get,field,object,string;public,static,object,get,field,class,target,class,string,name,return,get,field,null,target,class,name
ReflectionTestUtils -> public static Object getField(Class<?> targetClass, String name);1495868221;Get the value of the static {@linkplain Field field} with the given_{@code name} from the provided {@code targetClass}._<p>This method delegates to {@link #getField(Object, Class, String)},_supplying {@code null} for the {@code targetObject} argument._@param targetClass the target class from which to get the static field__never {@code null}_@param name the name of the field to get_ never {@code null}_@return the field's current value_@since 4.2_@see #getField(Object, String);public static Object getField(Class<?> targetClass, String name) {_		return getField(null, targetClass, name)__	};get,the,value,of,the,static,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,class,p,this,method,delegates,to,link,get,field,object,class,string,supplying,code,null,for,the,code,target,object,argument,param,target,class,the,target,class,from,which,to,get,the,static,field,never,code,null,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,since,4,2,see,get,field,object,string;public,static,object,get,field,class,target,class,string,name,return,get,field,null,target,class,name
ReflectionTestUtils -> public static Object getField(Object targetObject, Class<?> targetClass, String name);1428546720;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}/{@code targetClass}.__<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to get {@code protected},_{@code private}, and <em>package-private</em> fields.__@param targetObject the target object from which to get the field_ may be_{@code null} if the field is static_@param targetClass the target class from which to get the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to get_ never {@code null}_@return the field's current value_@see #getField(Object, String)_@see #getField(Class, String)_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#getField(Field, Object, Object)_@since 4.2;public static Object getField(Object targetObject, Class<?> targetClass, String name) {_		Assert.isTrue(targetObject != null || targetClass != null,_			"Either targetObject or targetClass for the field must be specified")___		if (targetClass == null) {_			targetClass = targetObject.getClass()__		}_		Field field = ReflectionUtils.findField(targetClass, name)___		_		if (field == null) {_			throw new IllegalArgumentException(_				String.format("Could not find field [%s] on target object [%s] or target class [%s]", name,_					targetObject, targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Getting field [%s] from target object [%s] or target class [%s]", name,_				targetObject, targetClass))__		}_		ReflectionUtils.makeAccessible(field)__		return ReflectionUtils.getField(field, targetObject)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,code,target,class,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,get,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,from,which,to,get,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,from,which,to,get,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,see,get,field,object,string,see,get,field,class,string,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,get,field,field,object,object,since,4,2;public,static,object,get,field,object,target,object,class,target,class,string,name,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,if,target,class,null,target,class,target,object,get,class,field,field,reflection,utils,find,field,target,class,name,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,on,target,object,s,or,target,class,s,name,target,object,target,class,if,logger,is,debug,enabled,logger,debug,string,format,getting,field,s,from,target,object,s,or,target,class,s,name,target,object,target,class,reflection,utils,make,accessible,field,return,reflection,utils,get,field,field,target,object
ReflectionTestUtils -> public static Object getField(Object targetObject, Class<?> targetClass, String name);1436919586;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}/{@code targetClass}._<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to get {@code protected},_{@code private}, and <em>package-private</em> fields._@param targetObject the target object from which to get the field_ may be_{@code null} if the field is static_@param targetClass the target class from which to get the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to get_ never {@code null}_@return the field's current value_@since 4.2_@see #getField(Object, String)_@see #getField(Class, String)_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#getField(Field, Object);public static Object getField(Object targetObject, Class<?> targetClass, String name) {_		Assert.isTrue(targetObject != null || targetClass != null,_			"Either targetObject or targetClass for the field must be specified")___		if (targetClass == null) {_			targetClass = targetObject.getClass()__		}__		Field field = ReflectionUtils.findField(targetClass, name)__		if (field == null) {_			throw new IllegalArgumentException(_				String.format("Could not find field '%s' on target object [%s] or target class [%s]", name,_						targetObject, targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Getting field '%s' from target object [%s] or target class [%s]", name,_					targetObject, targetClass))__		}_		ReflectionUtils.makeAccessible(field)__		return ReflectionUtils.getField(field, targetObject)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,code,target,class,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,get,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,from,which,to,get,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,from,which,to,get,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,since,4,2,see,get,field,object,string,see,get,field,class,string,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,get,field,field,object;public,static,object,get,field,object,target,object,class,target,class,string,name,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,if,target,class,null,target,class,target,object,get,class,field,field,reflection,utils,find,field,target,class,name,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,on,target,object,s,or,target,class,s,name,target,object,target,class,if,logger,is,debug,enabled,logger,debug,string,format,getting,field,s,from,target,object,s,or,target,class,s,name,target,object,target,class,reflection,utils,make,accessible,field,return,reflection,utils,get,field,field,target,object
ReflectionTestUtils -> public static Object getField(Object targetObject, Class<?> targetClass, String name);1437491400;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}/{@code targetClass}._<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to get {@code protected},_{@code private}, and <em>package-private</em> fields._@param targetObject the target object from which to get the field_ may be_{@code null} if the field is static_@param targetClass the target class from which to get the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to get_ never {@code null}_@return the field's current value_@since 4.2_@see #getField(Object, String)_@see #getField(Class, String)_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#getField(Field, Object);public static Object getField(Object targetObject, Class<?> targetClass, String name) {_		Assert.isTrue(targetObject != null || targetClass != null,_			"Either targetObject or targetClass for the field must be specified")___		if (targetClass == null) {_			targetClass = targetObject.getClass()__		}__		Field field = ReflectionUtils.findField(targetClass, name)__		if (field == null) {_			throw new IllegalArgumentException(_				String.format("Could not find field '%s' on target object [%s] or target class [%s]", name,_						targetObject, targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Getting field '%s' from target object [%s] or target class [%s]", name,_					targetObject, targetClass))__		}_		ReflectionUtils.makeAccessible(field)__		return ReflectionUtils.getField(field, targetObject)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,code,target,class,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,get,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,from,which,to,get,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,from,which,to,get,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,since,4,2,see,get,field,object,string,see,get,field,class,string,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,get,field,field,object;public,static,object,get,field,object,target,object,class,target,class,string,name,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,if,target,class,null,target,class,target,object,get,class,field,field,reflection,utils,find,field,target,class,name,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,on,target,object,s,or,target,class,s,name,target,object,target,class,if,logger,is,debug,enabled,logger,debug,string,format,getting,field,s,from,target,object,s,or,target,class,s,name,target,object,target,class,reflection,utils,make,accessible,field,return,reflection,utils,get,field,field,target,object
ReflectionTestUtils -> public static Object getField(Object targetObject, Class<?> targetClass, String name);1458149654;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}/{@code targetClass}._<p>If the supplied {@code targetObject} is a <em>proxy</em>, it will_be {@linkplain AopTestUtils#getUltimateTargetObject unwrapped} allowing_the field to be retrieved from the ultimate target of the proxy._<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to get {@code protected},_{@code private}, and <em>package-private</em> fields._@param targetObject the target object from which to get the field_ may be_{@code null} if the field is static_@param targetClass the target class from which to get the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to get_ never {@code null}_@return the field's current value_@since 4.2_@see #getField(Object, String)_@see #getField(Class, String)_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#getField(Field, Object);public static Object getField(Object targetObject, Class<?> targetClass, String name) {_		Assert.isTrue(targetObject != null || targetClass != null,_			"Either targetObject or targetClass for the field must be specified")___		Object ultimateTarget = (targetObject != null ? AopTestUtils.getUltimateTargetObject(targetObject) : null)___		if (targetClass == null) {_			targetClass = ultimateTarget.getClass()__		}__		Field field = ReflectionUtils.findField(targetClass, name)__		if (field == null) {_			throw new IllegalArgumentException(_				String.format("Could not find field '%s' on target object [%s] or target class [%s]", name,_					ultimateTarget, targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Getting field '%s' from target object [%s] or target class [%s]", name,_					ultimateTarget, targetClass))__		}_		ReflectionUtils.makeAccessible(field)__		return ReflectionUtils.getField(field, ultimateTarget)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,code,target,class,p,if,the,supplied,code,target,object,is,a,em,proxy,em,it,will,be,linkplain,aop,test,utils,get,ultimate,target,object,unwrapped,allowing,the,field,to,be,retrieved,from,the,ultimate,target,of,the,proxy,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,get,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,from,which,to,get,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,from,which,to,get,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,since,4,2,see,get,field,object,string,see,get,field,class,string,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,get,field,field,object;public,static,object,get,field,object,target,object,class,target,class,string,name,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,object,ultimate,target,target,object,null,aop,test,utils,get,ultimate,target,object,target,object,null,if,target,class,null,target,class,ultimate,target,get,class,field,field,reflection,utils,find,field,target,class,name,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,on,target,object,s,or,target,class,s,name,ultimate,target,target,class,if,logger,is,debug,enabled,logger,debug,string,format,getting,field,s,from,target,object,s,or,target,class,s,name,ultimate,target,target,class,reflection,utils,make,accessible,field,return,reflection,utils,get,field,field,ultimate,target
ReflectionTestUtils -> public static Object getField(Object targetObject, Class<?> targetClass, String name);1458220093;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}/{@code targetClass}._<p>If the supplied {@code targetObject} is a <em>proxy</em>, it will_be {@linkplain AopTestUtils#getUltimateTargetObject unwrapped} allowing_the field to be retrieved from the ultimate target of the proxy._<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to get {@code protected},_{@code private}, and <em>package-private</em> fields._@param targetObject the target object from which to get the field_ may be_{@code null} if the field is static_@param targetClass the target class from which to get the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to get_ never {@code null}_@return the field's current value_@since 4.2_@see #getField(Object, String)_@see #getField(Class, String)_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#getField(Field, Object)_@see AopTestUtils#getUltimateTargetObject(Object);public static Object getField(Object targetObject, Class<?> targetClass, String name) {_		Assert.isTrue(targetObject != null || targetClass != null,_			"Either targetObject or targetClass for the field must be specified")___		Object ultimateTarget = (targetObject != null ? AopTestUtils.getUltimateTargetObject(targetObject) : null)___		if (targetClass == null) {_			targetClass = ultimateTarget.getClass()__		}__		Field field = ReflectionUtils.findField(targetClass, name)__		if (field == null) {_			throw new IllegalArgumentException(_				String.format("Could not find field '%s' on target object [%s] or target class [%s]", name,_					ultimateTarget, targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Getting field '%s' from target object [%s] or target class [%s]", name,_					ultimateTarget, targetClass))__		}_		ReflectionUtils.makeAccessible(field)__		return ReflectionUtils.getField(field, ultimateTarget)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,code,target,class,p,if,the,supplied,code,target,object,is,a,em,proxy,em,it,will,be,linkplain,aop,test,utils,get,ultimate,target,object,unwrapped,allowing,the,field,to,be,retrieved,from,the,ultimate,target,of,the,proxy,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,get,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,from,which,to,get,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,from,which,to,get,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,since,4,2,see,get,field,object,string,see,get,field,class,string,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,get,field,field,object,see,aop,test,utils,get,ultimate,target,object,object;public,static,object,get,field,object,target,object,class,target,class,string,name,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,object,ultimate,target,target,object,null,aop,test,utils,get,ultimate,target,object,target,object,null,if,target,class,null,target,class,ultimate,target,get,class,field,field,reflection,utils,find,field,target,class,name,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,on,target,object,s,or,target,class,s,name,ultimate,target,target,class,if,logger,is,debug,enabled,logger,debug,string,format,getting,field,s,from,target,object,s,or,target,class,s,name,ultimate,target,target,class,reflection,utils,make,accessible,field,return,reflection,utils,get,field,field,ultimate,target
ReflectionTestUtils -> public static Object getField(Object targetObject, Class<?> targetClass, String name);1465927706;Get the value of the {@linkplain Field field} with the given {@code name}_from the provided {@code targetObject}/{@code targetClass}._<p>If the supplied {@code targetObject} is a <em>proxy</em>, it will_be {@linkplain AopTestUtils#getUltimateTargetObject unwrapped} allowing_the field to be retrieved from the ultimate target of the proxy._<p>This method traverses the class hierarchy in search of the desired_field. In addition, an attempt will be made to make non-{@code public}_fields <em>accessible</em>, thus allowing one to get {@code protected},_{@code private}, and <em>package-private</em> fields._@param targetObject the target object from which to get the field_ may be_{@code null} if the field is static_@param targetClass the target class from which to get the field_ may_be {@code null} if the field is an instance field_@param name the name of the field to get_ never {@code null}_@return the field's current value_@since 4.2_@see #getField(Object, String)_@see #getField(Class, String)_@see ReflectionUtils#findField(Class, String, Class)_@see ReflectionUtils#makeAccessible(Field)_@see ReflectionUtils#getField(Field, Object)_@see AopTestUtils#getUltimateTargetObject(Object);public static Object getField(Object targetObject, Class<?> targetClass, String name) {_		Assert.isTrue(targetObject != null || targetClass != null,_			"Either targetObject or targetClass for the field must be specified")___		Object ultimateTarget = (targetObject != null ? AopTestUtils.getUltimateTargetObject(targetObject) : null)___		if (targetClass == null) {_			targetClass = ultimateTarget.getClass()__		}__		Field field = ReflectionUtils.findField(targetClass, name)__		if (field == null) {_			throw new IllegalArgumentException(String.format("Could not find field '%s' on %s or target class [%s]",_					name, safeToString(ultimateTarget), targetClass))__		}__		if (logger.isDebugEnabled()) {_			logger.debug(String.format("Getting field '%s' from %s or target class [%s]", name,_					safeToString(ultimateTarget), targetClass))__		}_		ReflectionUtils.makeAccessible(field)__		return ReflectionUtils.getField(field, ultimateTarget)__	};get,the,value,of,the,linkplain,field,field,with,the,given,code,name,from,the,provided,code,target,object,code,target,class,p,if,the,supplied,code,target,object,is,a,em,proxy,em,it,will,be,linkplain,aop,test,utils,get,ultimate,target,object,unwrapped,allowing,the,field,to,be,retrieved,from,the,ultimate,target,of,the,proxy,p,this,method,traverses,the,class,hierarchy,in,search,of,the,desired,field,in,addition,an,attempt,will,be,made,to,make,non,code,public,fields,em,accessible,em,thus,allowing,one,to,get,code,protected,code,private,and,em,package,private,em,fields,param,target,object,the,target,object,from,which,to,get,the,field,may,be,code,null,if,the,field,is,static,param,target,class,the,target,class,from,which,to,get,the,field,may,be,code,null,if,the,field,is,an,instance,field,param,name,the,name,of,the,field,to,get,never,code,null,return,the,field,s,current,value,since,4,2,see,get,field,object,string,see,get,field,class,string,see,reflection,utils,find,field,class,string,class,see,reflection,utils,make,accessible,field,see,reflection,utils,get,field,field,object,see,aop,test,utils,get,ultimate,target,object,object;public,static,object,get,field,object,target,object,class,target,class,string,name,assert,is,true,target,object,null,target,class,null,either,target,object,or,target,class,for,the,field,must,be,specified,object,ultimate,target,target,object,null,aop,test,utils,get,ultimate,target,object,target,object,null,if,target,class,null,target,class,ultimate,target,get,class,field,field,reflection,utils,find,field,target,class,name,if,field,null,throw,new,illegal,argument,exception,string,format,could,not,find,field,s,on,s,or,target,class,s,name,safe,to,string,ultimate,target,target,class,if,logger,is,debug,enabled,logger,debug,string,format,getting,field,s,from,s,or,target,class,s,name,safe,to,string,ultimate,target,target,class,reflection,utils,make,accessible,field,return,reflection,utils,get,field,field,ultimate,target
ReflectionTestUtils -> public static void setField(Object targetObject, String name, @Nullable Object value);1496955179;Set the {@linkplain Field field} with the given {@code name} on the_provided {@code targetObject} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, String, Object, Class)},_supplying {@code null} for the {@code type} argument._@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set;public static void setField(Object targetObject, String name, @Nullable Object value) {_		setField(targetObject, name, value, null)__	};set,the,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,string,object,class,supplying,code,null,for,the,code,type,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set;public,static,void,set,field,object,target,object,string,name,nullable,object,value,set,field,target,object,name,value,null
ReflectionTestUtils -> public static void setField(Object targetObject, String name, @Nullable Object value);1499712214;Set the {@linkplain Field field} with the given {@code name} on the_provided {@code targetObject} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, String, Object, Class)},_supplying {@code null} for the {@code type} argument._@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set;public static void setField(Object targetObject, String name, @Nullable Object value) {_		setField(targetObject, name, value, null)__	};set,the,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,string,object,class,supplying,code,null,for,the,code,type,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set;public,static,void,set,field,object,target,object,string,name,nullable,object,value,set,field,target,object,name,value,null
ReflectionTestUtils -> public static void setField(Object targetObject, String name, @Nullable Object value);1499944792;Set the {@linkplain Field field} with the given {@code name} on the_provided {@code targetObject} to the supplied {@code value}._<p>This method delegates to {@link #setField(Object, String, Object, Class)},_supplying {@code null} for the {@code type} argument._@param targetObject the target object on which to set the field_ never {@code null}_@param name the name of the field to set_ never {@code null}_@param value the value to set;public static void setField(Object targetObject, String name, @Nullable Object value) {_		setField(targetObject, name, value, null)__	};set,the,linkplain,field,field,with,the,given,code,name,on,the,provided,code,target,object,to,the,supplied,code,value,p,this,method,delegates,to,link,set,field,object,string,object,class,supplying,code,null,for,the,code,type,argument,param,target,object,the,target,object,on,which,to,set,the,field,never,code,null,param,name,the,name,of,the,field,to,set,never,code,null,param,value,the,value,to,set;public,static,void,set,field,object,target,object,string,name,nullable,object,value,set,field,target,object,name,value,null
