# id;timestamp;commentText;codeText;commentWords;codeWords
ModelAndViewAssert -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public static void assertSortAndCompareListModelAttribute( 			ModelAndView mav, String modelName, List expectedList, Comparator comparator);1518772998;Compare each individual entry in a list after having sorted both lists_(optionally using a comparator)._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedList the expected list_@param comparator the comparator to use (may be {@code null}). If not_specifying the comparator, both lists will be sorted not using any comparator.;@SuppressWarnings({"unchecked", "rawtypes"})_	public static void assertSortAndCompareListModelAttribute(_			ModelAndView mav, String modelName, List expectedList, Comparator comparator) {__		assertTrue("ModelAndView is null", mav != null)__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)___		assertTrue("Size of model list is '" + modelList.size() + "' while size of expected list is '" +_				expectedList.size() + "'", expectedList.size() == modelList.size())___		modelList.sort(comparator)__		expectedList.sort(comparator)___		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_				expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,after,having,sorted,both,lists,optionally,using,a,comparator,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list,param,comparator,the,comparator,to,use,may,be,code,null,if,not,specifying,the,comparator,both,lists,will,be,sorted,not,using,any,comparator;suppress,warnings,unchecked,rawtypes,public,static,void,assert,sort,and,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,comparator,comparator,assert,true,model,and,view,is,null,mav,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,model,list,sort,comparator,expected,list,sort,comparator,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public static void assertSortAndCompareListModelAttribute( 			ModelAndView mav, String modelName, List expectedList, Comparator comparator);1518810557;Compare each individual entry in a list after having sorted both lists_(optionally using a comparator)._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedList the expected list_@param comparator the comparator to use (may be {@code null}). If not_specifying the comparator, both lists will be sorted not using any comparator.;@SuppressWarnings({"unchecked", "rawtypes"})_	public static void assertSortAndCompareListModelAttribute(_			ModelAndView mav, String modelName, List expectedList, Comparator comparator) {__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)__		assertTrue("Size of model list is '" + modelList.size() + "' while size of expected list is '" +_				expectedList.size() + "'", expectedList.size() == modelList.size())___		modelList.sort(comparator)__		expectedList.sort(comparator)___		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_				expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,after,having,sorted,both,lists,optionally,using,a,comparator,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list,param,comparator,the,comparator,to,use,may,be,code,null,if,not,specifying,the,comparator,both,lists,will,be,sorted,not,using,any,comparator;suppress,warnings,unchecked,rawtypes,public,static,void,assert,sort,and,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,comparator,comparator,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,model,list,sort,comparator,expected,list,sort,comparator,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public static void assertSortAndCompareListModelAttribute( 			ModelAndView mav, String modelName, List expectedList, Comparator comparator);1522192143;Compare each individual entry in a list after having sorted both lists_(optionally using a comparator)._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedList the expected list_@param comparator the comparator to use (may be {@code null}). If not_specifying the comparator, both lists will be sorted not using any comparator.;@SuppressWarnings({"unchecked", "rawtypes"})_	public static void assertSortAndCompareListModelAttribute(_			ModelAndView mav, String modelName, List expectedList, Comparator comparator) {__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)__		assertTrue("Size of model list is '" + modelList.size() + "' while size of expected list is '" +_				expectedList.size() + "'", expectedList.size() == modelList.size())___		modelList.sort(comparator)__		expectedList.sort(comparator)___		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_				expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,after,having,sorted,both,lists,optionally,using,a,comparator,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list,param,comparator,the,comparator,to,use,may,be,code,null,if,not,specifying,the,comparator,both,lists,will,be,sorted,not,using,any,comparator;suppress,warnings,unchecked,rawtypes,public,static,void,assert,sort,and,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,comparator,comparator,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,model,list,sort,comparator,expected,list,sort,comparator,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public static void assertSortAndCompareListModelAttribute( 			ModelAndView mav, String modelName, List expectedList, Comparator comparator);1530174524;Compare each individual entry in a list after having sorted both lists_(optionally using a comparator)._@param mav the ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedList the expected list_@param comparator the comparator to use (may be {@code null}). If not_specifying the comparator, both lists will be sorted not using any comparator.;@SuppressWarnings({"unchecked", "rawtypes"})_	public static void assertSortAndCompareListModelAttribute(_			ModelAndView mav, String modelName, List expectedList, Comparator comparator) {__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)__		assertTrue("Size of model list is '" + modelList.size() + "' while size of expected list is '" +_				expectedList.size() + "'", expectedList.size() == modelList.size())___		modelList.sort(comparator)__		expectedList.sort(comparator)___		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_				expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,after,having,sorted,both,lists,optionally,using,a,comparator,param,mav,the,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list,param,comparator,the,comparator,to,use,may,be,code,null,if,not,specifying,the,comparator,both,lists,will,be,sorted,not,using,any,comparator;suppress,warnings,unchecked,rawtypes,public,static,void,assert,sort,and,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,comparator,comparator,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,model,list,sort,comparator,expected,list,sort,comparator,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public static void assertSortAndCompareListModelAttribute( 			ModelAndView mav, String modelName, List expectedList, Comparator comparator);1530174524;Compare each individual entry in a list after having sorted both lists_(optionally using a comparator)._@param mav the ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedList the expected list_@param comparator the comparator to use (may be {@code null}). If not_specifying the comparator, both lists will be sorted not using any comparator.;@SuppressWarnings({"unchecked", "rawtypes"})_	public static void assertSortAndCompareListModelAttribute(_			ModelAndView mav, String modelName, List expectedList, Comparator comparator) {__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)__		assertTrue("Size of model list is '" + modelList.size() + "' while size of expected list is '" +_				expectedList.size() + "'", expectedList.size() == modelList.size())___		modelList.sort(comparator)__		expectedList.sort(comparator)___		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_				expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,after,having,sorted,both,lists,optionally,using,a,comparator,param,mav,the,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list,param,comparator,the,comparator,to,use,may,be,code,null,if,not,specifying,the,comparator,both,lists,will,be,sorted,not,using,any,comparator;suppress,warnings,unchecked,rawtypes,public,static,void,assert,sort,and,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,comparator,comparator,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,model,list,sort,comparator,expected,list,sort,comparator,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings("rawtypes") 	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList);1328020251;Compare each individual entry in a list, without first sorting the lists.__@param mav ModelAndView to test against (never <code>null</code>)_@param modelName name of the object to add to the model (never_<code>null</code>)_@param expectedList the expected list;@SuppressWarnings("rawtypes")_	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList) {_		assertCondition(mav != null, "ModelAndView is null")__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)__		assertCondition(expectedList.size() == modelList.size(), "Size of model list is '" + modelList.size()_				+ "' while size of expected list is '" + expectedList.size() + "'")__		assertCondition(expectedList.equals(modelList), "List in model under name '" + modelName_				+ "' is not equal to the expected list.")__	};compare,each,individual,entry,in,a,list,without,first,sorting,the,lists,param,mav,model,and,view,to,test,against,never,code,null,code,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,code,param,expected,list,the,expected,list;suppress,warnings,rawtypes,public,static,void,assert,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,assert,condition,mav,null,model,and,view,is,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,condition,expected,list,size,model,list,size,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,assert,condition,expected,list,equals,model,list,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list
ModelAndViewAssert -> @SuppressWarnings("rawtypes") 	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList);1350692343;Compare each individual entry in a list, without first sorting the lists.__@param mav ModelAndView to test against (never <code>null</code>)_@param modelName name of the object to add to the model (never_<code>null</code>)_@param expectedList the expected list;@SuppressWarnings("rawtypes")_	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList) {_		assertTrue("ModelAndView is null", mav != null)__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)__		assertTrue(_			"Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size()_					+ "'", expectedList.size() == modelList.size())__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_			expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,without,first,sorting,the,lists,param,mav,model,and,view,to,test,against,never,code,null,code,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,code,param,expected,list,the,expected,list;suppress,warnings,rawtypes,public,static,void,assert,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,assert,true,model,and,view,is,null,mav,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings("rawtypes") 	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList);1356735495;Compare each individual entry in a list, without first sorting the lists.__@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never_{@code null})_@param expectedList the expected list;@SuppressWarnings("rawtypes")_	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList) {_		assertTrue("ModelAndView is null", mav != null)__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)__		assertTrue(_			"Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size()_					+ "'", expectedList.size() == modelList.size())__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_			expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,without,first,sorting,the,lists,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list;suppress,warnings,rawtypes,public,static,void,assert,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,assert,true,model,and,view,is,null,mav,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings("rawtypes") 	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList);1413848647;Compare each individual entry in a list, without first sorting the lists.__@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never_{@code null})_@param expectedList the expected list;@SuppressWarnings("rawtypes")_	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList) {_		assertTrue("ModelAndView is null", mav != null)__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)__		assertTrue(_			"Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size()_					+ "'", expectedList.size() == modelList.size())__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_			expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,without,first,sorting,the,lists,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list;suppress,warnings,rawtypes,public,static,void,assert,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,assert,true,model,and,view,is,null,mav,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings("rawtypes") 	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList);1467730834;Compare each individual entry in a list, without first sorting the lists.__@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never_{@code null})_@param expectedList the expected list;@SuppressWarnings("rawtypes")_	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList) {_		assertTrue("ModelAndView is null", mav != null)__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)__		assertTrue(_			"Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size()_					+ "'", expectedList.size() == modelList.size())__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_			expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,without,first,sorting,the,lists,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list;suppress,warnings,rawtypes,public,static,void,assert,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,assert,true,model,and,view,is,null,mav,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings("rawtypes") 	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList);1496955179;Compare each individual entry in a list, without first sorting the lists._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedList the expected list;@SuppressWarnings("rawtypes")_	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList) {_		assertTrue("ModelAndView is null", mav != null)__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)__		assertTrue(_			"Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size()_					+ "'", expectedList.size() == modelList.size())__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_			expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,without,first,sorting,the,lists,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list;suppress,warnings,rawtypes,public,static,void,assert,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,assert,true,model,and,view,is,null,mav,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings("rawtypes") 	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList);1518167526;Compare each individual entry in a list, without first sorting the lists._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedList the expected list;@SuppressWarnings("rawtypes")_	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList) {_		assertTrue("ModelAndView is null", mav != null)__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)__		assertTrue(_			"Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size()_					+ "'", expectedList.size() == modelList.size())__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_			expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,without,first,sorting,the,lists,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list;suppress,warnings,rawtypes,public,static,void,assert,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,assert,true,model,and,view,is,null,mav,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings("rawtypes") 	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList);1518167818;Compare each individual entry in a list, without first sorting the lists._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedList the expected list;@SuppressWarnings("rawtypes")_	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList) {_		assertTrue("ModelAndView is null", mav != null)__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)__		assertTrue(_			"Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size()_					+ "'", expectedList.size() == modelList.size())__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_			expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,without,first,sorting,the,lists,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list;suppress,warnings,rawtypes,public,static,void,assert,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,assert,true,model,and,view,is,null,mav,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings("rawtypes") 	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList);1518772998;Compare each individual entry in a list, without first sorting the lists._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedList the expected list;@SuppressWarnings("rawtypes")_	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList) {_		assertTrue("ModelAndView is null", mav != null)__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)__		assertTrue("Size of model list is '" + modelList.size() + "' while size of expected list is '" +_				expectedList.size() + "'", expectedList.size() == modelList.size())__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_				expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,without,first,sorting,the,lists,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list;suppress,warnings,rawtypes,public,static,void,assert,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,assert,true,model,and,view,is,null,mav,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings("rawtypes") 	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList);1518810557;Compare each individual entry in a list, without first sorting the lists._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedList the expected list;@SuppressWarnings("rawtypes")_	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList) {_		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)__		assertTrue("Size of model list is '" + modelList.size() + "' while size of expected list is '" +_				expectedList.size() + "'", expectedList.size() == modelList.size())__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_				expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,without,first,sorting,the,lists,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list;suppress,warnings,rawtypes,public,static,void,assert,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings("rawtypes") 	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList);1522192143;Compare each individual entry in a list, without first sorting the lists._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedList the expected list;@SuppressWarnings("rawtypes")_	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList) {_		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)__		assertTrue("Size of model list is '" + modelList.size() + "' while size of expected list is '" +_				expectedList.size() + "'", expectedList.size() == modelList.size())__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_				expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,without,first,sorting,the,lists,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list;suppress,warnings,rawtypes,public,static,void,assert,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings("rawtypes") 	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList);1530174524;Compare each individual entry in a list, without first sorting the lists._@param mav the ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedList the expected list;@SuppressWarnings("rawtypes")_	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList) {_		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)__		assertTrue("Size of model list is '" + modelList.size() + "' while size of expected list is '" +_				expectedList.size() + "'", expectedList.size() == modelList.size())__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_				expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,without,first,sorting,the,lists,param,mav,the,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list;suppress,warnings,rawtypes,public,static,void,assert,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings("rawtypes") 	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList);1530174524;Compare each individual entry in a list, without first sorting the lists._@param mav the ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedList the expected list;@SuppressWarnings("rawtypes")_	public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList) {_		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)__		assertTrue("Size of model list is '" + modelList.size() + "' while size of expected list is '" +_				expectedList.size() + "'", expectedList.size() == modelList.size())__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_				expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,without,first,sorting,the,lists,param,mav,the,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list;suppress,warnings,rawtypes,public,static,void,assert,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel);1328020251;Inspect the <code>expectedModel</code> to see if all elements in the_model appear and are equal.__@param mav ModelAndView to test against (never <code>null</code>)_@param expectedModel the expected model;public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel) {_		assertCondition(mav != null, "ModelAndView is null")__		assertCondition(mav.getModel() != null, "Model is null")___		if (!mav.getModel().keySet().equals(expectedModel.keySet())) {_			StringBuilder sb = new StringBuilder("Keyset of expected model does not match.\n")__			appendNonMatchingSetsErrorMessage(expectedModel.keySet(), mav.getModel().keySet(), sb)__			fail(sb.toString())__		}__		StringBuilder sb = new StringBuilder()__		for (String modelName : mav.getModel().keySet()) {_			Object assertionValue = expectedModel.get(modelName)__			Object mavValue = mav.getModel().get(modelName)__			if (!assertionValue.equals(mavValue)) {_				sb.append("Value under name '").append(modelName).append("' differs, should have been '").append(_					assertionValue).append("' but was '").append(mavValue).append("'\n")__			}_		}__		if (sb.length() != 0) {_			sb.insert(0, "Values of expected model do not match.\n")__			fail(sb.toString())__		}_	};inspect,the,code,expected,model,code,to,see,if,all,elements,in,the,model,appear,and,are,equal,param,mav,model,and,view,to,test,against,never,code,null,code,param,expected,model,the,expected,model;public,static,void,assert,model,attribute,values,model,and,view,mav,map,string,object,expected,model,assert,condition,mav,null,model,and,view,is,null,assert,condition,mav,get,model,null,model,is,null,if,mav,get,model,key,set,equals,expected,model,key,set,string,builder,sb,new,string,builder,keyset,of,expected,model,does,not,match,n,append,non,matching,sets,error,message,expected,model,key,set,mav,get,model,key,set,sb,fail,sb,to,string,string,builder,sb,new,string,builder,for,string,model,name,mav,get,model,key,set,object,assertion,value,expected,model,get,model,name,object,mav,value,mav,get,model,get,model,name,if,assertion,value,equals,mav,value,sb,append,value,under,name,append,model,name,append,differs,should,have,been,append,assertion,value,append,but,was,append,mav,value,append,n,if,sb,length,0,sb,insert,0,values,of,expected,model,do,not,match,n,fail,sb,to,string
ModelAndViewAssert -> public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel);1350692343;Inspect the <code>expectedModel</code> to see if all elements in the_model appear and are equal.__@param mav ModelAndView to test against (never <code>null</code>)_@param expectedModel the expected model;public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel) {_		assertTrue("ModelAndView is null", mav != null)__		assertTrue("Model is null", mav.getModel() != null)___		if (!mav.getModel().keySet().equals(expectedModel.keySet())) {_			StringBuilder sb = new StringBuilder("Keyset of expected model does not match.\n")__			appendNonMatchingSetsErrorMessage(expectedModel.keySet(), mav.getModel().keySet(), sb)__			fail(sb.toString())__		}__		StringBuilder sb = new StringBuilder()__		for (String modelName : mav.getModel().keySet()) {_			Object assertionValue = expectedModel.get(modelName)__			Object mavValue = mav.getModel().get(modelName)__			if (!assertionValue.equals(mavValue)) {_				sb.append("Value under name '").append(modelName).append("' differs, should have been '").append(_					assertionValue).append("' but was '").append(mavValue).append("'\n")__			}_		}__		if (sb.length() != 0) {_			sb.insert(0, "Values of expected model do not match.\n")__			fail(sb.toString())__		}_	};inspect,the,code,expected,model,code,to,see,if,all,elements,in,the,model,appear,and,are,equal,param,mav,model,and,view,to,test,against,never,code,null,code,param,expected,model,the,expected,model;public,static,void,assert,model,attribute,values,model,and,view,mav,map,string,object,expected,model,assert,true,model,and,view,is,null,mav,null,assert,true,model,is,null,mav,get,model,null,if,mav,get,model,key,set,equals,expected,model,key,set,string,builder,sb,new,string,builder,keyset,of,expected,model,does,not,match,n,append,non,matching,sets,error,message,expected,model,key,set,mav,get,model,key,set,sb,fail,sb,to,string,string,builder,sb,new,string,builder,for,string,model,name,mav,get,model,key,set,object,assertion,value,expected,model,get,model,name,object,mav,value,mav,get,model,get,model,name,if,assertion,value,equals,mav,value,sb,append,value,under,name,append,model,name,append,differs,should,have,been,append,assertion,value,append,but,was,append,mav,value,append,n,if,sb,length,0,sb,insert,0,values,of,expected,model,do,not,match,n,fail,sb,to,string
ModelAndViewAssert -> public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel);1356735495;Inspect the {@code expectedModel} to see if all elements in the_model appear and are equal.__@param mav ModelAndView to test against (never {@code null})_@param expectedModel the expected model;public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel) {_		assertTrue("ModelAndView is null", mav != null)__		assertTrue("Model is null", mav.getModel() != null)___		if (!mav.getModel().keySet().equals(expectedModel.keySet())) {_			StringBuilder sb = new StringBuilder("Keyset of expected model does not match.\n")__			appendNonMatchingSetsErrorMessage(expectedModel.keySet(), mav.getModel().keySet(), sb)__			fail(sb.toString())__		}__		StringBuilder sb = new StringBuilder()__		for (String modelName : mav.getModel().keySet()) {_			Object assertionValue = expectedModel.get(modelName)__			Object mavValue = mav.getModel().get(modelName)__			if (!assertionValue.equals(mavValue)) {_				sb.append("Value under name '").append(modelName).append("' differs, should have been '").append(_					assertionValue).append("' but was '").append(mavValue).append("'\n")__			}_		}__		if (sb.length() != 0) {_			sb.insert(0, "Values of expected model do not match.\n")__			fail(sb.toString())__		}_	};inspect,the,code,expected,model,to,see,if,all,elements,in,the,model,appear,and,are,equal,param,mav,model,and,view,to,test,against,never,code,null,param,expected,model,the,expected,model;public,static,void,assert,model,attribute,values,model,and,view,mav,map,string,object,expected,model,assert,true,model,and,view,is,null,mav,null,assert,true,model,is,null,mav,get,model,null,if,mav,get,model,key,set,equals,expected,model,key,set,string,builder,sb,new,string,builder,keyset,of,expected,model,does,not,match,n,append,non,matching,sets,error,message,expected,model,key,set,mav,get,model,key,set,sb,fail,sb,to,string,string,builder,sb,new,string,builder,for,string,model,name,mav,get,model,key,set,object,assertion,value,expected,model,get,model,name,object,mav,value,mav,get,model,get,model,name,if,assertion,value,equals,mav,value,sb,append,value,under,name,append,model,name,append,differs,should,have,been,append,assertion,value,append,but,was,append,mav,value,append,n,if,sb,length,0,sb,insert,0,values,of,expected,model,do,not,match,n,fail,sb,to,string
ModelAndViewAssert -> public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel);1413848647;Inspect the {@code expectedModel} to see if all elements in the_model appear and are equal.__@param mav ModelAndView to test against (never {@code null})_@param expectedModel the expected model;public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel) {_		assertTrue("ModelAndView is null", mav != null)__		assertTrue("Model is null", mav.getModel() != null)___		if (!mav.getModel().keySet().equals(expectedModel.keySet())) {_			StringBuilder sb = new StringBuilder("Keyset of expected model does not match.\n")__			appendNonMatchingSetsErrorMessage(expectedModel.keySet(), mav.getModel().keySet(), sb)__			fail(sb.toString())__		}__		StringBuilder sb = new StringBuilder()__		for (String modelName : mav.getModel().keySet()) {_			Object assertionValue = expectedModel.get(modelName)__			Object mavValue = mav.getModel().get(modelName)__			if (!assertionValue.equals(mavValue)) {_				sb.append("Value under name '").append(modelName).append("' differs, should have been '").append(_					assertionValue).append("' but was '").append(mavValue).append("'\n")__			}_		}__		if (sb.length() != 0) {_			sb.insert(0, "Values of expected model do not match.\n")__			fail(sb.toString())__		}_	};inspect,the,code,expected,model,to,see,if,all,elements,in,the,model,appear,and,are,equal,param,mav,model,and,view,to,test,against,never,code,null,param,expected,model,the,expected,model;public,static,void,assert,model,attribute,values,model,and,view,mav,map,string,object,expected,model,assert,true,model,and,view,is,null,mav,null,assert,true,model,is,null,mav,get,model,null,if,mav,get,model,key,set,equals,expected,model,key,set,string,builder,sb,new,string,builder,keyset,of,expected,model,does,not,match,n,append,non,matching,sets,error,message,expected,model,key,set,mav,get,model,key,set,sb,fail,sb,to,string,string,builder,sb,new,string,builder,for,string,model,name,mav,get,model,key,set,object,assertion,value,expected,model,get,model,name,object,mav,value,mav,get,model,get,model,name,if,assertion,value,equals,mav,value,sb,append,value,under,name,append,model,name,append,differs,should,have,been,append,assertion,value,append,but,was,append,mav,value,append,n,if,sb,length,0,sb,insert,0,values,of,expected,model,do,not,match,n,fail,sb,to,string
ModelAndViewAssert -> public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel);1467730834;Inspect the {@code expectedModel} to see if all elements in the_model appear and are equal.__@param mav ModelAndView to test against (never {@code null})_@param expectedModel the expected model;public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel) {_		assertTrue("ModelAndView is null", mav != null)__		assertTrue("Model is null", mav.getModel() != null)___		if (!mav.getModel().keySet().equals(expectedModel.keySet())) {_			StringBuilder sb = new StringBuilder("Keyset of expected model does not match.\n")__			appendNonMatchingSetsErrorMessage(expectedModel.keySet(), mav.getModel().keySet(), sb)__			fail(sb.toString())__		}__		StringBuilder sb = new StringBuilder()__		for (String modelName : mav.getModel().keySet()) {_			Object assertionValue = expectedModel.get(modelName)__			Object mavValue = mav.getModel().get(modelName)__			if (!assertionValue.equals(mavValue)) {_				sb.append("Value under name '").append(modelName).append("' differs, should have been '").append(_					assertionValue).append("' but was '").append(mavValue).append("'\n")__			}_		}__		if (sb.length() != 0) {_			sb.insert(0, "Values of expected model do not match.\n")__			fail(sb.toString())__		}_	};inspect,the,code,expected,model,to,see,if,all,elements,in,the,model,appear,and,are,equal,param,mav,model,and,view,to,test,against,never,code,null,param,expected,model,the,expected,model;public,static,void,assert,model,attribute,values,model,and,view,mav,map,string,object,expected,model,assert,true,model,and,view,is,null,mav,null,assert,true,model,is,null,mav,get,model,null,if,mav,get,model,key,set,equals,expected,model,key,set,string,builder,sb,new,string,builder,keyset,of,expected,model,does,not,match,n,append,non,matching,sets,error,message,expected,model,key,set,mav,get,model,key,set,sb,fail,sb,to,string,string,builder,sb,new,string,builder,for,string,model,name,mav,get,model,key,set,object,assertion,value,expected,model,get,model,name,object,mav,value,mav,get,model,get,model,name,if,assertion,value,equals,mav,value,sb,append,value,under,name,append,model,name,append,differs,should,have,been,append,assertion,value,append,but,was,append,mav,value,append,n,if,sb,length,0,sb,insert,0,values,of,expected,model,do,not,match,n,fail,sb,to,string
ModelAndViewAssert -> public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel);1496955179;Inspect the {@code expectedModel} to see if all elements in the_model appear and are equal._@param mav ModelAndView to test against (never {@code null})_@param expectedModel the expected model;public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel) {_		if (mav == null) {_			fail("ModelAndView is null")__		}_		Map<String, Object> model = mav.getModel()___		if (!model.keySet().equals(expectedModel.keySet())) {_			StringBuilder sb = new StringBuilder("Keyset of expected model does not match.\n")__			appendNonMatchingSetsErrorMessage(expectedModel.keySet(), model.keySet(), sb)__			fail(sb.toString())__		}__		StringBuilder sb = new StringBuilder()__		for (String modelName : model.keySet()) {_			Object assertionValue = expectedModel.get(modelName)__			Object mavValue = model.get(modelName)__			if (!assertionValue.equals(mavValue)) {_				sb.append("Value under name '").append(modelName).append("' differs, should have been '").append(_					assertionValue).append("' but was '").append(mavValue).append("'\n")__			}_		}__		if (sb.length() != 0) {_			sb.insert(0, "Values of expected model do not match.\n")__			fail(sb.toString())__		}_	};inspect,the,code,expected,model,to,see,if,all,elements,in,the,model,appear,and,are,equal,param,mav,model,and,view,to,test,against,never,code,null,param,expected,model,the,expected,model;public,static,void,assert,model,attribute,values,model,and,view,mav,map,string,object,expected,model,if,mav,null,fail,model,and,view,is,null,map,string,object,model,mav,get,model,if,model,key,set,equals,expected,model,key,set,string,builder,sb,new,string,builder,keyset,of,expected,model,does,not,match,n,append,non,matching,sets,error,message,expected,model,key,set,model,key,set,sb,fail,sb,to,string,string,builder,sb,new,string,builder,for,string,model,name,model,key,set,object,assertion,value,expected,model,get,model,name,object,mav,value,model,get,model,name,if,assertion,value,equals,mav,value,sb,append,value,under,name,append,model,name,append,differs,should,have,been,append,assertion,value,append,but,was,append,mav,value,append,n,if,sb,length,0,sb,insert,0,values,of,expected,model,do,not,match,n,fail,sb,to,string
ModelAndViewAssert -> public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel);1518167526;Inspect the {@code expectedModel} to see if all elements in the_model appear and are equal._@param mav ModelAndView to test against (never {@code null})_@param expectedModel the expected model;public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel) {_		if (mav == null) {_			fail("ModelAndView is null")__		}_		Map<String, Object> model = mav.getModel()___		if (!model.keySet().equals(expectedModel.keySet())) {_			StringBuilder sb = new StringBuilder("Keyset of expected model does not match.\n")__			appendNonMatchingSetsErrorMessage(expectedModel.keySet(), model.keySet(), sb)__			fail(sb.toString())__		}__		StringBuilder sb = new StringBuilder()__		for (String modelName : model.keySet()) {_			Object assertionValue = expectedModel.get(modelName)__			Object mavValue = model.get(modelName)__			if (!assertionValue.equals(mavValue)) {_				sb.append("Value under name '").append(modelName).append("' differs, should have been '").append(_					assertionValue).append("' but was '").append(mavValue).append("'\n")__			}_		}__		if (sb.length() != 0) {_			sb.insert(0, "Values of expected model do not match.\n")__			fail(sb.toString())__		}_	};inspect,the,code,expected,model,to,see,if,all,elements,in,the,model,appear,and,are,equal,param,mav,model,and,view,to,test,against,never,code,null,param,expected,model,the,expected,model;public,static,void,assert,model,attribute,values,model,and,view,mav,map,string,object,expected,model,if,mav,null,fail,model,and,view,is,null,map,string,object,model,mav,get,model,if,model,key,set,equals,expected,model,key,set,string,builder,sb,new,string,builder,keyset,of,expected,model,does,not,match,n,append,non,matching,sets,error,message,expected,model,key,set,model,key,set,sb,fail,sb,to,string,string,builder,sb,new,string,builder,for,string,model,name,model,key,set,object,assertion,value,expected,model,get,model,name,object,mav,value,model,get,model,name,if,assertion,value,equals,mav,value,sb,append,value,under,name,append,model,name,append,differs,should,have,been,append,assertion,value,append,but,was,append,mav,value,append,n,if,sb,length,0,sb,insert,0,values,of,expected,model,do,not,match,n,fail,sb,to,string
ModelAndViewAssert -> public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel);1518167818;Inspect the {@code expectedModel} to see if all elements in the_model appear and are equal._@param mav ModelAndView to test against (never {@code null})_@param expectedModel the expected model;public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel) {_		if (mav == null) {_			fail("ModelAndView is null")__		}_		Map<String, Object> model = mav.getModel()___		if (!model.keySet().equals(expectedModel.keySet())) {_			StringBuilder sb = new StringBuilder("Keyset of expected model does not match.\n")__			appendNonMatchingSetsErrorMessage(expectedModel.keySet(), model.keySet(), sb)__			fail(sb.toString())__		}__		StringBuilder sb = new StringBuilder()__		for (String modelName : model.keySet()) {_			Object assertionValue = expectedModel.get(modelName)__			Object mavValue = model.get(modelName)__			if (!assertionValue.equals(mavValue)) {_				sb.append("Value under name '").append(modelName).append("' differs, should have been '").append(_					assertionValue).append("' but was '").append(mavValue).append("'\n")__			}_		}__		if (sb.length() != 0) {_			sb.insert(0, "Values of expected model do not match.\n")__			fail(sb.toString())__		}_	};inspect,the,code,expected,model,to,see,if,all,elements,in,the,model,appear,and,are,equal,param,mav,model,and,view,to,test,against,never,code,null,param,expected,model,the,expected,model;public,static,void,assert,model,attribute,values,model,and,view,mav,map,string,object,expected,model,if,mav,null,fail,model,and,view,is,null,map,string,object,model,mav,get,model,if,model,key,set,equals,expected,model,key,set,string,builder,sb,new,string,builder,keyset,of,expected,model,does,not,match,n,append,non,matching,sets,error,message,expected,model,key,set,model,key,set,sb,fail,sb,to,string,string,builder,sb,new,string,builder,for,string,model,name,model,key,set,object,assertion,value,expected,model,get,model,name,object,mav,value,model,get,model,name,if,assertion,value,equals,mav,value,sb,append,value,under,name,append,model,name,append,differs,should,have,been,append,assertion,value,append,but,was,append,mav,value,append,n,if,sb,length,0,sb,insert,0,values,of,expected,model,do,not,match,n,fail,sb,to,string
ModelAndViewAssert -> public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel);1518772998;Inspect the {@code expectedModel} to see if all elements in the_model appear and are equal._@param mav ModelAndView to test against (never {@code null})_@param expectedModel the expected model;public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel) {_		if (mav == null) {_			fail("ModelAndView is null")__		}_		Map<String, Object> model = mav.getModel()___		if (!model.keySet().equals(expectedModel.keySet())) {_			StringBuilder sb = new StringBuilder("Keyset of expected model does not match.\n")__			appendNonMatchingSetsErrorMessage(expectedModel.keySet(), model.keySet(), sb)__			fail(sb.toString())__		}__		StringBuilder sb = new StringBuilder()__		for (String modelName : model.keySet()) {_			Object assertionValue = expectedModel.get(modelName)__			Object mavValue = model.get(modelName)__			if (!assertionValue.equals(mavValue)) {_				sb.append("Value under name '").append(modelName).append("' differs, should have been '").append(_					assertionValue).append("' but was '").append(mavValue).append("'\n")__			}_		}__		if (sb.length() != 0) {_			sb.insert(0, "Values of expected model do not match.\n")__			fail(sb.toString())__		}_	};inspect,the,code,expected,model,to,see,if,all,elements,in,the,model,appear,and,are,equal,param,mav,model,and,view,to,test,against,never,code,null,param,expected,model,the,expected,model;public,static,void,assert,model,attribute,values,model,and,view,mav,map,string,object,expected,model,if,mav,null,fail,model,and,view,is,null,map,string,object,model,mav,get,model,if,model,key,set,equals,expected,model,key,set,string,builder,sb,new,string,builder,keyset,of,expected,model,does,not,match,n,append,non,matching,sets,error,message,expected,model,key,set,model,key,set,sb,fail,sb,to,string,string,builder,sb,new,string,builder,for,string,model,name,model,key,set,object,assertion,value,expected,model,get,model,name,object,mav,value,model,get,model,name,if,assertion,value,equals,mav,value,sb,append,value,under,name,append,model,name,append,differs,should,have,been,append,assertion,value,append,but,was,append,mav,value,append,n,if,sb,length,0,sb,insert,0,values,of,expected,model,do,not,match,n,fail,sb,to,string
ModelAndViewAssert -> public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel);1518810557;Inspect the {@code expectedModel} to see if all elements in the_model appear and are equal._@param mav ModelAndView to test against (never {@code null})_@param expectedModel the expected model;public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel) {_		Map<String, Object> model = mav.getModel()___		if (!model.keySet().equals(expectedModel.keySet())) {_			StringBuilder sb = new StringBuilder("Keyset of expected model does not match.\n")__			appendNonMatchingSetsErrorMessage(expectedModel.keySet(), model.keySet(), sb)__			fail(sb.toString())__		}__		StringBuilder sb = new StringBuilder()__		for (String modelName : model.keySet()) {_			Object assertionValue = expectedModel.get(modelName)__			Object mavValue = model.get(modelName)__			if (!assertionValue.equals(mavValue)) {_				sb.append("Value under name '").append(modelName).append("' differs, should have been '").append(_					assertionValue).append("' but was '").append(mavValue).append("'\n")__			}_		}__		if (sb.length() != 0) {_			sb.insert(0, "Values of expected model do not match.\n")__			fail(sb.toString())__		}_	};inspect,the,code,expected,model,to,see,if,all,elements,in,the,model,appear,and,are,equal,param,mav,model,and,view,to,test,against,never,code,null,param,expected,model,the,expected,model;public,static,void,assert,model,attribute,values,model,and,view,mav,map,string,object,expected,model,map,string,object,model,mav,get,model,if,model,key,set,equals,expected,model,key,set,string,builder,sb,new,string,builder,keyset,of,expected,model,does,not,match,n,append,non,matching,sets,error,message,expected,model,key,set,model,key,set,sb,fail,sb,to,string,string,builder,sb,new,string,builder,for,string,model,name,model,key,set,object,assertion,value,expected,model,get,model,name,object,mav,value,model,get,model,name,if,assertion,value,equals,mav,value,sb,append,value,under,name,append,model,name,append,differs,should,have,been,append,assertion,value,append,but,was,append,mav,value,append,n,if,sb,length,0,sb,insert,0,values,of,expected,model,do,not,match,n,fail,sb,to,string
ModelAndViewAssert -> public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel);1522192143;Inspect the {@code expectedModel} to see if all elements in the_model appear and are equal._@param mav ModelAndView to test against (never {@code null})_@param expectedModel the expected model;public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel) {_		Map<String, Object> model = mav.getModel()___		if (!model.keySet().equals(expectedModel.keySet())) {_			StringBuilder sb = new StringBuilder("Keyset of expected model does not match.\n")__			appendNonMatchingSetsErrorMessage(expectedModel.keySet(), model.keySet(), sb)__			fail(sb.toString())__		}__		StringBuilder sb = new StringBuilder()__		model.forEach((modelName, mavValue) -> {_			Object assertionValue = expectedModel.get(modelName)__			if (!assertionValue.equals(mavValue)) {_				sb.append("Value under name '").append(modelName).append("' differs, should have been '").append(_					assertionValue).append("' but was '").append(mavValue).append("'\n")__			}_		})___		if (sb.length() != 0) {_			sb.insert(0, "Values of expected model do not match.\n")__			fail(sb.toString())__		}_	};inspect,the,code,expected,model,to,see,if,all,elements,in,the,model,appear,and,are,equal,param,mav,model,and,view,to,test,against,never,code,null,param,expected,model,the,expected,model;public,static,void,assert,model,attribute,values,model,and,view,mav,map,string,object,expected,model,map,string,object,model,mav,get,model,if,model,key,set,equals,expected,model,key,set,string,builder,sb,new,string,builder,keyset,of,expected,model,does,not,match,n,append,non,matching,sets,error,message,expected,model,key,set,model,key,set,sb,fail,sb,to,string,string,builder,sb,new,string,builder,model,for,each,model,name,mav,value,object,assertion,value,expected,model,get,model,name,if,assertion,value,equals,mav,value,sb,append,value,under,name,append,model,name,append,differs,should,have,been,append,assertion,value,append,but,was,append,mav,value,append,n,if,sb,length,0,sb,insert,0,values,of,expected,model,do,not,match,n,fail,sb,to,string
ModelAndViewAssert -> public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel);1530174524;Inspect the {@code expectedModel} to see if all elements in the_model appear and are equal._@param mav the ModelAndView to test against (never {@code null})_@param expectedModel the expected model;public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel) {_		Map<String, Object> model = mav.getModel()___		if (!model.keySet().equals(expectedModel.keySet())) {_			StringBuilder sb = new StringBuilder("Keyset of expected model does not match.\n")__			appendNonMatchingSetsErrorMessage(expectedModel.keySet(), model.keySet(), sb)__			fail(sb.toString())__		}__		StringBuilder sb = new StringBuilder()__		model.forEach((modelName, mavValue) -> {_			Object assertionValue = expectedModel.get(modelName)__			if (!assertionValue.equals(mavValue)) {_				sb.append("Value under name '").append(modelName).append("' differs, should have been '").append(_					assertionValue).append("' but was '").append(mavValue).append("'\n")__			}_		})___		if (sb.length() != 0) {_			sb.insert(0, "Values of expected model do not match.\n")__			fail(sb.toString())__		}_	};inspect,the,code,expected,model,to,see,if,all,elements,in,the,model,appear,and,are,equal,param,mav,the,model,and,view,to,test,against,never,code,null,param,expected,model,the,expected,model;public,static,void,assert,model,attribute,values,model,and,view,mav,map,string,object,expected,model,map,string,object,model,mav,get,model,if,model,key,set,equals,expected,model,key,set,string,builder,sb,new,string,builder,keyset,of,expected,model,does,not,match,n,append,non,matching,sets,error,message,expected,model,key,set,model,key,set,sb,fail,sb,to,string,string,builder,sb,new,string,builder,model,for,each,model,name,mav,value,object,assertion,value,expected,model,get,model,name,if,assertion,value,equals,mav,value,sb,append,value,under,name,append,model,name,append,differs,should,have,been,append,assertion,value,append,but,was,append,mav,value,append,n,if,sb,length,0,sb,insert,0,values,of,expected,model,do,not,match,n,fail,sb,to,string
ModelAndViewAssert -> public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel);1530174524;Inspect the {@code expectedModel} to see if all elements in the_model appear and are equal._@param mav the ModelAndView to test against (never {@code null})_@param expectedModel the expected model;public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel) {_		Map<String, Object> model = mav.getModel()___		if (!model.keySet().equals(expectedModel.keySet())) {_			StringBuilder sb = new StringBuilder("Keyset of expected model does not match.\n")__			appendNonMatchingSetsErrorMessage(expectedModel.keySet(), model.keySet(), sb)__			fail(sb.toString())__		}__		StringBuilder sb = new StringBuilder()__		model.forEach((modelName, mavValue) -> {_			Object assertionValue = expectedModel.get(modelName)__			if (!assertionValue.equals(mavValue)) {_				sb.append("Value under name '").append(modelName).append("' differs, should have been '").append(_					assertionValue).append("' but was '").append(mavValue).append("'\n")__			}_		})___		if (sb.length() != 0) {_			sb.insert(0, "Values of expected model do not match.\n")__			fail(sb.toString())__		}_	};inspect,the,code,expected,model,to,see,if,all,elements,in,the,model,appear,and,are,equal,param,mav,the,model,and,view,to,test,against,never,code,null,param,expected,model,the,expected,model;public,static,void,assert,model,attribute,values,model,and,view,mav,map,string,object,expected,model,map,string,object,model,mav,get,model,if,model,key,set,equals,expected,model,key,set,string,builder,sb,new,string,builder,keyset,of,expected,model,does,not,match,n,append,non,matching,sets,error,message,expected,model,key,set,model,key,set,sb,fail,sb,to,string,string,builder,sb,new,string,builder,model,for,each,model,name,mav,value,object,assertion,value,expected,model,get,model,name,if,assertion,value,equals,mav,value,sb,append,value,under,name,append,model,name,append,differs,should,have,been,append,assertion,value,append,but,was,append,mav,value,append,n,if,sb,length,0,sb,insert,0,values,of,expected,model,do,not,match,n,fail,sb,to,string
ModelAndViewAssert -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public static void assertSortAndCompareListModelAttribute( 			ModelAndView mav, String modelName, List expectedList, Comparator comparator);1496955179;Compare each individual entry in a list after having sorted both lists_(optionally using a comparator)._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedList the expected list_@param comparator the comparator to use (may be {@code null}). If not_specifying the comparator, both lists will be sorted not using any comparator.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public static void assertSortAndCompareListModelAttribute(_			ModelAndView mav, String modelName, List expectedList, Comparator comparator) {__		assertTrue("ModelAndView is null", mav != null)__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)___		assertTrue(_			"Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size()_					+ "'", expectedList.size() == modelList.size())___		if (comparator != null) {_			Collections.sort(modelList, comparator)__			Collections.sort(expectedList, comparator)__		}_		else {_			Collections.sort(modelList)__			Collections.sort(expectedList)__		}__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_			expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,after,having,sorted,both,lists,optionally,using,a,comparator,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list,param,comparator,the,comparator,to,use,may,be,code,null,if,not,specifying,the,comparator,both,lists,will,be,sorted,not,using,any,comparator;suppress,warnings,unchecked,rawtypes,public,static,void,assert,sort,and,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,comparator,comparator,assert,true,model,and,view,is,null,mav,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,if,comparator,null,collections,sort,model,list,comparator,collections,sort,expected,list,comparator,else,collections,sort,model,list,collections,sort,expected,list,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public static void assertSortAndCompareListModelAttribute( 			ModelAndView mav, String modelName, List expectedList, Comparator comparator);1518167526;Compare each individual entry in a list after having sorted both lists_(optionally using a comparator)._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedList the expected list_@param comparator the comparator to use (may be {@code null}). If not_specifying the comparator, both lists will be sorted not using any comparator.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public static void assertSortAndCompareListModelAttribute(_			ModelAndView mav, String modelName, List expectedList, Comparator comparator) {__		assertTrue("ModelAndView is null", mav != null)__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)___		assertTrue(_			"Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size()_					+ "'", expectedList.size() == modelList.size())___		if (comparator != null) {_			Collections.sort(modelList, comparator)__			Collections.sort(expectedList, comparator)__		}_		else {_			Collections.sort(modelList)__			Collections.sort(expectedList)__		}__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_			expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,after,having,sorted,both,lists,optionally,using,a,comparator,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list,param,comparator,the,comparator,to,use,may,be,code,null,if,not,specifying,the,comparator,both,lists,will,be,sorted,not,using,any,comparator;suppress,warnings,unchecked,rawtypes,public,static,void,assert,sort,and,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,comparator,comparator,assert,true,model,and,view,is,null,mav,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,if,comparator,null,collections,sort,model,list,comparator,collections,sort,expected,list,comparator,else,collections,sort,model,list,collections,sort,expected,list,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public static void assertSortAndCompareListModelAttribute( 			ModelAndView mav, String modelName, List expectedList, Comparator comparator);1518167818;Compare each individual entry in a list after having sorted both lists_(optionally using a comparator)._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedList the expected list_@param comparator the comparator to use (may be {@code null}). If not_specifying the comparator, both lists will be sorted not using any comparator.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public static void assertSortAndCompareListModelAttribute(_			ModelAndView mav, String modelName, List expectedList, Comparator comparator) {__		assertTrue("ModelAndView is null", mav != null)__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)___		assertTrue(_			"Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size()_					+ "'", expectedList.size() == modelList.size())___		if (comparator != null) {_			Collections.sort(modelList, comparator)__			Collections.sort(expectedList, comparator)__		}_		else {_			Collections.sort(modelList)__			Collections.sort(expectedList)__		}__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_			expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,after,having,sorted,both,lists,optionally,using,a,comparator,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list,param,comparator,the,comparator,to,use,may,be,code,null,if,not,specifying,the,comparator,both,lists,will,be,sorted,not,using,any,comparator;suppress,warnings,unchecked,rawtypes,public,static,void,assert,sort,and,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,comparator,comparator,assert,true,model,and,view,is,null,mav,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,if,comparator,null,collections,sort,model,list,comparator,collections,sort,expected,list,comparator,else,collections,sort,model,list,collections,sort,expected,list,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings("unchecked") 	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType);1328020251;Checks whether the model value under the given <code>modelName</code>_exists and checks it type, based on the <code>expectedType</code>. If the_model entry exists and the type matches, the model value is returned.__@param mav ModelAndView to test against (never <code>null</code>)_@param modelName name of the object to add to the model (never_<code>null</code>)_@param expectedType expected type of the model value_@return the model value;@SuppressWarnings("unchecked")_	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType) {_		assertCondition(mav != null, "ModelAndView is null")__		assertCondition(mav.getModel() != null, "Model is null")__		Object obj = mav.getModel().get(modelName)__		assertCondition(obj != null, "Model attribute with name '" + modelName + "' is null")__		assertCondition(expectedType.isAssignableFrom(obj.getClass()), "Model attribute is not of expected type '"_				+ expectedType.getName() + "' but rather of type '" + obj.getClass().getName() + "'")__		return (T) obj__	};checks,whether,the,model,value,under,the,given,code,model,name,code,exists,and,checks,it,type,based,on,the,code,expected,type,code,if,the,model,entry,exists,and,the,type,matches,the,model,value,is,returned,param,mav,model,and,view,to,test,against,never,code,null,code,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,code,param,expected,type,expected,type,of,the,model,value,return,the,model,value;suppress,warnings,unchecked,public,static,t,t,assert,and,return,model,attribute,of,type,model,and,view,mav,string,model,name,class,t,expected,type,assert,condition,mav,null,model,and,view,is,null,assert,condition,mav,get,model,null,model,is,null,object,obj,mav,get,model,get,model,name,assert,condition,obj,null,model,attribute,with,name,model,name,is,null,assert,condition,expected,type,is,assignable,from,obj,get,class,model,attribute,is,not,of,expected,type,expected,type,get,name,but,rather,of,type,obj,get,class,get,name,return,t,obj
ModelAndViewAssert -> @SuppressWarnings("unchecked") 	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType);1350692343;Checks whether the model value under the given <code>modelName</code>_exists and checks it type, based on the <code>expectedType</code>. If the_model entry exists and the type matches, the model value is returned.__@param mav ModelAndView to test against (never <code>null</code>)_@param modelName name of the object to add to the model (never_<code>null</code>)_@param expectedType expected type of the model value_@return the model value;@SuppressWarnings("unchecked")_	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType) {_		assertTrue("ModelAndView is null", mav != null)__		assertTrue("Model is null", mav.getModel() != null)__		Object obj = mav.getModel().get(modelName)__		assertTrue("Model attribute with name '" + modelName + "' is null", obj != null)__		assertTrue("Model attribute is not of expected type '" + expectedType.getName() + "' but rather of type '"_				+ obj.getClass().getName() + "'", expectedType.isAssignableFrom(obj.getClass()))__		return (T) obj__	};checks,whether,the,model,value,under,the,given,code,model,name,code,exists,and,checks,it,type,based,on,the,code,expected,type,code,if,the,model,entry,exists,and,the,type,matches,the,model,value,is,returned,param,mav,model,and,view,to,test,against,never,code,null,code,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,code,param,expected,type,expected,type,of,the,model,value,return,the,model,value;suppress,warnings,unchecked,public,static,t,t,assert,and,return,model,attribute,of,type,model,and,view,mav,string,model,name,class,t,expected,type,assert,true,model,and,view,is,null,mav,null,assert,true,model,is,null,mav,get,model,null,object,obj,mav,get,model,get,model,name,assert,true,model,attribute,with,name,model,name,is,null,obj,null,assert,true,model,attribute,is,not,of,expected,type,expected,type,get,name,but,rather,of,type,obj,get,class,get,name,expected,type,is,assignable,from,obj,get,class,return,t,obj
ModelAndViewAssert -> @SuppressWarnings("unchecked") 	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType);1356735495;Checks whether the model value under the given {@code modelName}_exists and checks it type, based on the {@code expectedType}. If the_model entry exists and the type matches, the model value is returned.__@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never_{@code null})_@param expectedType expected type of the model value_@return the model value;@SuppressWarnings("unchecked")_	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType) {_		assertTrue("ModelAndView is null", mav != null)__		assertTrue("Model is null", mav.getModel() != null)__		Object obj = mav.getModel().get(modelName)__		assertTrue("Model attribute with name '" + modelName + "' is null", obj != null)__		assertTrue("Model attribute is not of expected type '" + expectedType.getName() + "' but rather of type '"_				+ obj.getClass().getName() + "'", expectedType.isAssignableFrom(obj.getClass()))__		return (T) obj__	};checks,whether,the,model,value,under,the,given,code,model,name,exists,and,checks,it,type,based,on,the,code,expected,type,if,the,model,entry,exists,and,the,type,matches,the,model,value,is,returned,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,type,expected,type,of,the,model,value,return,the,model,value;suppress,warnings,unchecked,public,static,t,t,assert,and,return,model,attribute,of,type,model,and,view,mav,string,model,name,class,t,expected,type,assert,true,model,and,view,is,null,mav,null,assert,true,model,is,null,mav,get,model,null,object,obj,mav,get,model,get,model,name,assert,true,model,attribute,with,name,model,name,is,null,obj,null,assert,true,model,attribute,is,not,of,expected,type,expected,type,get,name,but,rather,of,type,obj,get,class,get,name,expected,type,is,assignable,from,obj,get,class,return,t,obj
ModelAndViewAssert -> @SuppressWarnings("unchecked") 	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType);1413848647;Checks whether the model value under the given {@code modelName}_exists and checks it type, based on the {@code expectedType}. If the_model entry exists and the type matches, the model value is returned.__@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never_{@code null})_@param expectedType expected type of the model value_@return the model value;@SuppressWarnings("unchecked")_	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType) {_		assertTrue("ModelAndView is null", mav != null)__		assertTrue("Model is null", mav.getModel() != null)__		Object obj = mav.getModel().get(modelName)__		assertTrue("Model attribute with name '" + modelName + "' is null", obj != null)__		assertTrue("Model attribute is not of expected type '" + expectedType.getName() + "' but rather of type '"_				+ obj.getClass().getName() + "'", expectedType.isAssignableFrom(obj.getClass()))__		return (T) obj__	};checks,whether,the,model,value,under,the,given,code,model,name,exists,and,checks,it,type,based,on,the,code,expected,type,if,the,model,entry,exists,and,the,type,matches,the,model,value,is,returned,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,type,expected,type,of,the,model,value,return,the,model,value;suppress,warnings,unchecked,public,static,t,t,assert,and,return,model,attribute,of,type,model,and,view,mav,string,model,name,class,t,expected,type,assert,true,model,and,view,is,null,mav,null,assert,true,model,is,null,mav,get,model,null,object,obj,mav,get,model,get,model,name,assert,true,model,attribute,with,name,model,name,is,null,obj,null,assert,true,model,attribute,is,not,of,expected,type,expected,type,get,name,but,rather,of,type,obj,get,class,get,name,expected,type,is,assignable,from,obj,get,class,return,t,obj
ModelAndViewAssert -> @SuppressWarnings("unchecked") 	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType);1467730834;Checks whether the model value under the given {@code modelName}_exists and checks it type, based on the {@code expectedType}. If the_model entry exists and the type matches, the model value is returned.__@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never_{@code null})_@param expectedType expected type of the model value_@return the model value;@SuppressWarnings("unchecked")_	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType) {_		assertTrue("ModelAndView is null", mav != null)__		assertTrue("Model is null", mav.getModel() != null)__		Object obj = mav.getModel().get(modelName)__		assertTrue("Model attribute with name '" + modelName + "' is null", obj != null)__		assertTrue("Model attribute is not of expected type '" + expectedType.getName() + "' but rather of type '"_				+ obj.getClass().getName() + "'", expectedType.isAssignableFrom(obj.getClass()))__		return (T) obj__	};checks,whether,the,model,value,under,the,given,code,model,name,exists,and,checks,it,type,based,on,the,code,expected,type,if,the,model,entry,exists,and,the,type,matches,the,model,value,is,returned,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,type,expected,type,of,the,model,value,return,the,model,value;suppress,warnings,unchecked,public,static,t,t,assert,and,return,model,attribute,of,type,model,and,view,mav,string,model,name,class,t,expected,type,assert,true,model,and,view,is,null,mav,null,assert,true,model,is,null,mav,get,model,null,object,obj,mav,get,model,get,model,name,assert,true,model,attribute,with,name,model,name,is,null,obj,null,assert,true,model,attribute,is,not,of,expected,type,expected,type,get,name,but,rather,of,type,obj,get,class,get,name,expected,type,is,assignable,from,obj,get,class,return,t,obj
ModelAndViewAssert -> @SuppressWarnings("unchecked") 	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType);1496955179;Checks whether the model value under the given {@code modelName}_exists and checks it type, based on the {@code expectedType}. If the_model entry exists and the type matches, the model value is returned._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedType expected type of the model value_@return the model value;@SuppressWarnings("unchecked")_	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType) {_		if (mav == null) {_			fail("ModelAndView is null")__		}_		Map<String, Object> model = mav.getModel()__		Object obj = model.get(modelName)__		if (obj == null) {_			fail("Model attribute with name '" + modelName + "' is null")__		}_		assertTrue("Model attribute is not of expected type '" + expectedType.getName() + "' but rather of type '" +_				obj.getClass().getName() + "'", expectedType.isAssignableFrom(obj.getClass()))__		return (T) obj__	};checks,whether,the,model,value,under,the,given,code,model,name,exists,and,checks,it,type,based,on,the,code,expected,type,if,the,model,entry,exists,and,the,type,matches,the,model,value,is,returned,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,type,expected,type,of,the,model,value,return,the,model,value;suppress,warnings,unchecked,public,static,t,t,assert,and,return,model,attribute,of,type,model,and,view,mav,string,model,name,class,t,expected,type,if,mav,null,fail,model,and,view,is,null,map,string,object,model,mav,get,model,object,obj,model,get,model,name,if,obj,null,fail,model,attribute,with,name,model,name,is,null,assert,true,model,attribute,is,not,of,expected,type,expected,type,get,name,but,rather,of,type,obj,get,class,get,name,expected,type,is,assignable,from,obj,get,class,return,t,obj
ModelAndViewAssert -> @SuppressWarnings("unchecked") 	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType);1518167526;Checks whether the model value under the given {@code modelName}_exists and checks it type, based on the {@code expectedType}. If the_model entry exists and the type matches, the model value is returned._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedType expected type of the model value_@return the model value;@SuppressWarnings("unchecked")_	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType) {_		if (mav == null) {_			fail("ModelAndView is null")__		}_		Map<String, Object> model = mav.getModel()__		Object obj = model.get(modelName)__		if (obj == null) {_			fail("Model attribute with name '" + modelName + "' is null")__		}_		assertTrue("Model attribute is not of expected type '" + expectedType.getName() + "' but rather of type '" +_				obj.getClass().getName() + "'", expectedType.isAssignableFrom(obj.getClass()))__		return (T) obj__	};checks,whether,the,model,value,under,the,given,code,model,name,exists,and,checks,it,type,based,on,the,code,expected,type,if,the,model,entry,exists,and,the,type,matches,the,model,value,is,returned,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,type,expected,type,of,the,model,value,return,the,model,value;suppress,warnings,unchecked,public,static,t,t,assert,and,return,model,attribute,of,type,model,and,view,mav,string,model,name,class,t,expected,type,if,mav,null,fail,model,and,view,is,null,map,string,object,model,mav,get,model,object,obj,model,get,model,name,if,obj,null,fail,model,attribute,with,name,model,name,is,null,assert,true,model,attribute,is,not,of,expected,type,expected,type,get,name,but,rather,of,type,obj,get,class,get,name,expected,type,is,assignable,from,obj,get,class,return,t,obj
ModelAndViewAssert -> @SuppressWarnings("unchecked") 	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType);1518167818;Checks whether the model value under the given {@code modelName}_exists and checks it type, based on the {@code expectedType}. If the_model entry exists and the type matches, the model value is returned._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedType expected type of the model value_@return the model value;@SuppressWarnings("unchecked")_	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType) {_		if (mav == null) {_			fail("ModelAndView is null")__		}_		Map<String, Object> model = mav.getModel()__		Object obj = model.get(modelName)__		if (obj == null) {_			fail("Model attribute with name '" + modelName + "' is null")__		}_		assertTrue("Model attribute is not of expected type '" + expectedType.getName() + "' but rather of type '" +_				obj.getClass().getName() + "'", expectedType.isAssignableFrom(obj.getClass()))__		return (T) obj__	};checks,whether,the,model,value,under,the,given,code,model,name,exists,and,checks,it,type,based,on,the,code,expected,type,if,the,model,entry,exists,and,the,type,matches,the,model,value,is,returned,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,type,expected,type,of,the,model,value,return,the,model,value;suppress,warnings,unchecked,public,static,t,t,assert,and,return,model,attribute,of,type,model,and,view,mav,string,model,name,class,t,expected,type,if,mav,null,fail,model,and,view,is,null,map,string,object,model,mav,get,model,object,obj,model,get,model,name,if,obj,null,fail,model,attribute,with,name,model,name,is,null,assert,true,model,attribute,is,not,of,expected,type,expected,type,get,name,but,rather,of,type,obj,get,class,get,name,expected,type,is,assignable,from,obj,get,class,return,t,obj
ModelAndViewAssert -> @SuppressWarnings("unchecked") 	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType);1518772998;Checks whether the model value under the given {@code modelName}_exists and checks it type, based on the {@code expectedType}. If the_model entry exists and the type matches, the model value is returned._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedType expected type of the model value_@return the model value;@SuppressWarnings("unchecked")_	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType) {_		if (mav == null) {_			fail("ModelAndView is null")__		}_		Map<String, Object> model = mav.getModel()__		Object obj = model.get(modelName)__		if (obj == null) {_			fail("Model attribute with name '" + modelName + "' is null")__		}_		assertTrue("Model attribute is not of expected type '" + expectedType.getName() + "' but rather of type '" +_				obj.getClass().getName() + "'", expectedType.isAssignableFrom(obj.getClass()))__		return (T) obj__	};checks,whether,the,model,value,under,the,given,code,model,name,exists,and,checks,it,type,based,on,the,code,expected,type,if,the,model,entry,exists,and,the,type,matches,the,model,value,is,returned,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,type,expected,type,of,the,model,value,return,the,model,value;suppress,warnings,unchecked,public,static,t,t,assert,and,return,model,attribute,of,type,model,and,view,mav,string,model,name,class,t,expected,type,if,mav,null,fail,model,and,view,is,null,map,string,object,model,mav,get,model,object,obj,model,get,model,name,if,obj,null,fail,model,attribute,with,name,model,name,is,null,assert,true,model,attribute,is,not,of,expected,type,expected,type,get,name,but,rather,of,type,obj,get,class,get,name,expected,type,is,assignable,from,obj,get,class,return,t,obj
ModelAndViewAssert -> @SuppressWarnings("unchecked") 	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType);1518810557;Checks whether the model value under the given {@code modelName}_exists and checks it type, based on the {@code expectedType}. If the_model entry exists and the type matches, the model value is returned._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedType expected type of the model value_@return the model value;@SuppressWarnings("unchecked")_	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType) {_		Map<String, Object> model = mav.getModel()__		Object obj = model.get(modelName)__		if (obj == null) {_			fail("Model attribute with name '" + modelName + "' is null")__		}_		assertTrue("Model attribute is not of expected type '" + expectedType.getName() + "' but rather of type '" +_				obj.getClass().getName() + "'", expectedType.isAssignableFrom(obj.getClass()))__		return (T) obj__	};checks,whether,the,model,value,under,the,given,code,model,name,exists,and,checks,it,type,based,on,the,code,expected,type,if,the,model,entry,exists,and,the,type,matches,the,model,value,is,returned,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,type,expected,type,of,the,model,value,return,the,model,value;suppress,warnings,unchecked,public,static,t,t,assert,and,return,model,attribute,of,type,model,and,view,mav,string,model,name,class,t,expected,type,map,string,object,model,mav,get,model,object,obj,model,get,model,name,if,obj,null,fail,model,attribute,with,name,model,name,is,null,assert,true,model,attribute,is,not,of,expected,type,expected,type,get,name,but,rather,of,type,obj,get,class,get,name,expected,type,is,assignable,from,obj,get,class,return,t,obj
ModelAndViewAssert -> @SuppressWarnings("unchecked") 	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType);1522192143;Checks whether the model value under the given {@code modelName}_exists and checks it type, based on the {@code expectedType}. If the_model entry exists and the type matches, the model value is returned._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedType expected type of the model value_@return the model value;@SuppressWarnings("unchecked")_	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType) {_		Map<String, Object> model = mav.getModel()__		Object obj = model.get(modelName)__		if (obj == null) {_			fail("Model attribute with name '" + modelName + "' is null")__		}_		assertTrue("Model attribute is not of expected type '" + expectedType.getName() + "' but rather of type '" +_				obj.getClass().getName() + "'", expectedType.isAssignableFrom(obj.getClass()))__		return (T) obj__	};checks,whether,the,model,value,under,the,given,code,model,name,exists,and,checks,it,type,based,on,the,code,expected,type,if,the,model,entry,exists,and,the,type,matches,the,model,value,is,returned,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,type,expected,type,of,the,model,value,return,the,model,value;suppress,warnings,unchecked,public,static,t,t,assert,and,return,model,attribute,of,type,model,and,view,mav,string,model,name,class,t,expected,type,map,string,object,model,mav,get,model,object,obj,model,get,model,name,if,obj,null,fail,model,attribute,with,name,model,name,is,null,assert,true,model,attribute,is,not,of,expected,type,expected,type,get,name,but,rather,of,type,obj,get,class,get,name,expected,type,is,assignable,from,obj,get,class,return,t,obj
ModelAndViewAssert -> @SuppressWarnings("unchecked") 	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType);1530174524;Checks whether the model value under the given {@code modelName}_exists and checks it type, based on the {@code expectedType}. If the_model entry exists and the type matches, the model value is returned._@param mav the ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedType expected type of the model value_@return the model value;@SuppressWarnings("unchecked")_	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType) {_		Map<String, Object> model = mav.getModel()__		Object obj = model.get(modelName)__		if (obj == null) {_			fail("Model attribute with name '" + modelName + "' is null")__		}_		assertTrue("Model attribute is not of expected type '" + expectedType.getName() + "' but rather of type '" +_				obj.getClass().getName() + "'", expectedType.isAssignableFrom(obj.getClass()))__		return (T) obj__	};checks,whether,the,model,value,under,the,given,code,model,name,exists,and,checks,it,type,based,on,the,code,expected,type,if,the,model,entry,exists,and,the,type,matches,the,model,value,is,returned,param,mav,the,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,type,expected,type,of,the,model,value,return,the,model,value;suppress,warnings,unchecked,public,static,t,t,assert,and,return,model,attribute,of,type,model,and,view,mav,string,model,name,class,t,expected,type,map,string,object,model,mav,get,model,object,obj,model,get,model,name,if,obj,null,fail,model,attribute,with,name,model,name,is,null,assert,true,model,attribute,is,not,of,expected,type,expected,type,get,name,but,rather,of,type,obj,get,class,get,name,expected,type,is,assignable,from,obj,get,class,return,t,obj
ModelAndViewAssert -> @SuppressWarnings("unchecked") 	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType);1530174524;Checks whether the model value under the given {@code modelName}_exists and checks it type, based on the {@code expectedType}. If the_model entry exists and the type matches, the model value is returned._@param mav the ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedType expected type of the model value_@return the model value;@SuppressWarnings("unchecked")_	public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType) {_		Map<String, Object> model = mav.getModel()__		Object obj = model.get(modelName)__		if (obj == null) {_			fail("Model attribute with name '" + modelName + "' is null")__		}_		assertTrue("Model attribute is not of expected type '" + expectedType.getName() + "' but rather of type '" +_				obj.getClass().getName() + "'", expectedType.isAssignableFrom(obj.getClass()))__		return (T) obj__	};checks,whether,the,model,value,under,the,given,code,model,name,exists,and,checks,it,type,based,on,the,code,expected,type,if,the,model,entry,exists,and,the,type,matches,the,model,value,is,returned,param,mav,the,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,type,expected,type,of,the,model,value,return,the,model,value;suppress,warnings,unchecked,public,static,t,t,assert,and,return,model,attribute,of,type,model,and,view,mav,string,model,name,class,t,expected,type,map,string,object,model,mav,get,model,object,obj,model,get,model,name,if,obj,null,fail,model,attribute,with,name,model,name,is,null,assert,true,model,attribute,is,not,of,expected,type,expected,type,get,name,but,rather,of,type,obj,get,class,get,name,expected,type,is,assignable,from,obj,get,class,return,t,obj
ModelAndViewAssert -> public static void assertModelAttributeAvailable(ModelAndView mav, String modelName);1328020251;Assert whether or not a model attribute is available.__@param mav ModelAndView to test against (never <code>null</code>)_@param modelName name of the object to add to the model (never_<code>null</code>);public static void assertModelAttributeAvailable(ModelAndView mav, String modelName) {_		assertCondition(mav != null, "ModelAndView is null")__		assertCondition(mav.getModel() != null, "Model is null")__		assertCondition(mav.getModel().containsKey(modelName), "Model attribute with name '" + modelName_				+ "' is not available")__	};assert,whether,or,not,a,model,attribute,is,available,param,mav,model,and,view,to,test,against,never,code,null,code,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,code;public,static,void,assert,model,attribute,available,model,and,view,mav,string,model,name,assert,condition,mav,null,model,and,view,is,null,assert,condition,mav,get,model,null,model,is,null,assert,condition,mav,get,model,contains,key,model,name,model,attribute,with,name,model,name,is,not,available
ModelAndViewAssert -> public static void assertModelAttributeAvailable(ModelAndView mav, String modelName);1350692343;Assert whether or not a model attribute is available.__@param mav ModelAndView to test against (never <code>null</code>)_@param modelName name of the object to add to the model (never_<code>null</code>);public static void assertModelAttributeAvailable(ModelAndView mav, String modelName) {_		assertTrue("ModelAndView is null", mav != null)__		assertTrue("Model is null", mav.getModel() != null)__		assertTrue("Model attribute with name '" + modelName + "' is not available",_			mav.getModel().containsKey(modelName))__	};assert,whether,or,not,a,model,attribute,is,available,param,mav,model,and,view,to,test,against,never,code,null,code,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,code;public,static,void,assert,model,attribute,available,model,and,view,mav,string,model,name,assert,true,model,and,view,is,null,mav,null,assert,true,model,is,null,mav,get,model,null,assert,true,model,attribute,with,name,model,name,is,not,available,mav,get,model,contains,key,model,name
ModelAndViewAssert -> public static void assertModelAttributeAvailable(ModelAndView mav, String modelName);1356735495;Assert whether or not a model attribute is available.__@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never_{@code null});public static void assertModelAttributeAvailable(ModelAndView mav, String modelName) {_		assertTrue("ModelAndView is null", mav != null)__		assertTrue("Model is null", mav.getModel() != null)__		assertTrue("Model attribute with name '" + modelName + "' is not available",_			mav.getModel().containsKey(modelName))__	};assert,whether,or,not,a,model,attribute,is,available,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null;public,static,void,assert,model,attribute,available,model,and,view,mav,string,model,name,assert,true,model,and,view,is,null,mav,null,assert,true,model,is,null,mav,get,model,null,assert,true,model,attribute,with,name,model,name,is,not,available,mav,get,model,contains,key,model,name
ModelAndViewAssert -> public static void assertModelAttributeAvailable(ModelAndView mav, String modelName);1413848647;Assert whether or not a model attribute is available.__@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never_{@code null});public static void assertModelAttributeAvailable(ModelAndView mav, String modelName) {_		assertTrue("ModelAndView is null", mav != null)__		assertTrue("Model is null", mav.getModel() != null)__		assertTrue("Model attribute with name '" + modelName + "' is not available",_			mav.getModel().containsKey(modelName))__	};assert,whether,or,not,a,model,attribute,is,available,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null;public,static,void,assert,model,attribute,available,model,and,view,mav,string,model,name,assert,true,model,and,view,is,null,mav,null,assert,true,model,is,null,mav,get,model,null,assert,true,model,attribute,with,name,model,name,is,not,available,mav,get,model,contains,key,model,name
ModelAndViewAssert -> public static void assertModelAttributeAvailable(ModelAndView mav, String modelName);1467730834;Assert whether or not a model attribute is available.__@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never_{@code null});public static void assertModelAttributeAvailable(ModelAndView mav, String modelName) {_		assertTrue("ModelAndView is null", mav != null)__		assertTrue("Model is null", mav.getModel() != null)__		assertTrue("Model attribute with name '" + modelName + "' is not available",_			mav.getModel().containsKey(modelName))__	};assert,whether,or,not,a,model,attribute,is,available,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null;public,static,void,assert,model,attribute,available,model,and,view,mav,string,model,name,assert,true,model,and,view,is,null,mav,null,assert,true,model,is,null,mav,get,model,null,assert,true,model,attribute,with,name,model,name,is,not,available,mav,get,model,contains,key,model,name
ModelAndViewAssert -> public static void assertModelAttributeAvailable(ModelAndView mav, String modelName);1496955179;Assert whether or not a model attribute is available._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null});public static void assertModelAttributeAvailable(ModelAndView mav, String modelName) {_		if (mav == null) {_			fail("ModelAndView is null")__		}_		Map<String, Object> model = mav.getModel()__		assertTrue("Model attribute with name '" + modelName + "' is not available", model.containsKey(modelName))__	};assert,whether,or,not,a,model,attribute,is,available,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null;public,static,void,assert,model,attribute,available,model,and,view,mav,string,model,name,if,mav,null,fail,model,and,view,is,null,map,string,object,model,mav,get,model,assert,true,model,attribute,with,name,model,name,is,not,available,model,contains,key,model,name
ModelAndViewAssert -> public static void assertModelAttributeAvailable(ModelAndView mav, String modelName);1518167526;Assert whether or not a model attribute is available._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null});public static void assertModelAttributeAvailable(ModelAndView mav, String modelName) {_		if (mav == null) {_			fail("ModelAndView is null")__		}_		Map<String, Object> model = mav.getModel()__		assertTrue("Model attribute with name '" + modelName + "' is not available", model.containsKey(modelName))__	};assert,whether,or,not,a,model,attribute,is,available,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null;public,static,void,assert,model,attribute,available,model,and,view,mav,string,model,name,if,mav,null,fail,model,and,view,is,null,map,string,object,model,mav,get,model,assert,true,model,attribute,with,name,model,name,is,not,available,model,contains,key,model,name
ModelAndViewAssert -> public static void assertModelAttributeAvailable(ModelAndView mav, String modelName);1518167818;Assert whether or not a model attribute is available._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null});public static void assertModelAttributeAvailable(ModelAndView mav, String modelName) {_		if (mav == null) {_			fail("ModelAndView is null")__		}_		Map<String, Object> model = mav.getModel()__		assertTrue("Model attribute with name '" + modelName + "' is not available", model.containsKey(modelName))__	};assert,whether,or,not,a,model,attribute,is,available,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null;public,static,void,assert,model,attribute,available,model,and,view,mav,string,model,name,if,mav,null,fail,model,and,view,is,null,map,string,object,model,mav,get,model,assert,true,model,attribute,with,name,model,name,is,not,available,model,contains,key,model,name
ModelAndViewAssert -> public static void assertModelAttributeAvailable(ModelAndView mav, String modelName);1518772998;Assert whether or not a model attribute is available._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null});public static void assertModelAttributeAvailable(ModelAndView mav, String modelName) {_		if (mav == null) {_			fail("ModelAndView is null")__		}_		Map<String, Object> model = mav.getModel()__		assertTrue("Model attribute with name '" + modelName + "' is not available", model.containsKey(modelName))__	};assert,whether,or,not,a,model,attribute,is,available,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null;public,static,void,assert,model,attribute,available,model,and,view,mav,string,model,name,if,mav,null,fail,model,and,view,is,null,map,string,object,model,mav,get,model,assert,true,model,attribute,with,name,model,name,is,not,available,model,contains,key,model,name
ModelAndViewAssert -> public static void assertModelAttributeAvailable(ModelAndView mav, String modelName);1518810557;Assert whether or not a model attribute is available._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null});public static void assertModelAttributeAvailable(ModelAndView mav, String modelName) {_		Map<String, Object> model = mav.getModel()__		assertTrue("Model attribute with name '" + modelName + "' is not available", model.containsKey(modelName))__	};assert,whether,or,not,a,model,attribute,is,available,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null;public,static,void,assert,model,attribute,available,model,and,view,mav,string,model,name,map,string,object,model,mav,get,model,assert,true,model,attribute,with,name,model,name,is,not,available,model,contains,key,model,name
ModelAndViewAssert -> public static void assertModelAttributeAvailable(ModelAndView mav, String modelName);1522192143;Assert whether or not a model attribute is available._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null});public static void assertModelAttributeAvailable(ModelAndView mav, String modelName) {_		Map<String, Object> model = mav.getModel()__		assertTrue("Model attribute with name '" + modelName + "' is not available", model.containsKey(modelName))__	};assert,whether,or,not,a,model,attribute,is,available,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null;public,static,void,assert,model,attribute,available,model,and,view,mav,string,model,name,map,string,object,model,mav,get,model,assert,true,model,attribute,with,name,model,name,is,not,available,model,contains,key,model,name
ModelAndViewAssert -> public static void assertModelAttributeAvailable(ModelAndView mav, String modelName);1530174524;Assert whether or not a model attribute is available._@param mav the ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null});public static void assertModelAttributeAvailable(ModelAndView mav, String modelName) {_		Map<String, Object> model = mav.getModel()__		assertTrue("Model attribute with name '" + modelName + "' is not available", model.containsKey(modelName))__	};assert,whether,or,not,a,model,attribute,is,available,param,mav,the,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null;public,static,void,assert,model,attribute,available,model,and,view,mav,string,model,name,map,string,object,model,mav,get,model,assert,true,model,attribute,with,name,model,name,is,not,available,model,contains,key,model,name
ModelAndViewAssert -> public static void assertModelAttributeAvailable(ModelAndView mav, String modelName);1530174524;Assert whether or not a model attribute is available._@param mav the ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null});public static void assertModelAttributeAvailable(ModelAndView mav, String modelName) {_		Map<String, Object> model = mav.getModel()__		assertTrue("Model attribute with name '" + modelName + "' is not available", model.containsKey(modelName))__	};assert,whether,or,not,a,model,attribute,is,available,param,mav,the,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null;public,static,void,assert,model,attribute,available,model,and,view,mav,string,model,name,map,string,object,model,mav,get,model,assert,true,model,attribute,with,name,model,name,is,not,available,model,contains,key,model,name
ModelAndViewAssert -> public static void assertViewName(ModelAndView mav, String expectedName);1328020251;Check to see if the view name in the ModelAndView matches the given_<code>expectedName</code>.__@param mav ModelAndView to test against (never <code>null</code>)_@param expectedName the name of the model value;public static void assertViewName(ModelAndView mav, String expectedName) {_		assertCondition(mav != null, "ModelAndView is null")__		assertCondition(ObjectUtils.nullSafeEquals(expectedName, mav.getViewName()), "View name is not equal to '"_				+ expectedName + "' but was '" + mav.getViewName() + "'")__	};check,to,see,if,the,view,name,in,the,model,and,view,matches,the,given,code,expected,name,code,param,mav,model,and,view,to,test,against,never,code,null,code,param,expected,name,the,name,of,the,model,value;public,static,void,assert,view,name,model,and,view,mav,string,expected,name,assert,condition,mav,null,model,and,view,is,null,assert,condition,object,utils,null,safe,equals,expected,name,mav,get,view,name,view,name,is,not,equal,to,expected,name,but,was,mav,get,view,name
ModelAndViewAssert -> public static void assertViewName(ModelAndView mav, String expectedName);1350692343;Check to see if the view name in the ModelAndView matches the given_<code>expectedName</code>.__@param mav ModelAndView to test against (never <code>null</code>)_@param expectedName the name of the model value;public static void assertViewName(ModelAndView mav, String expectedName) {_		assertTrue("ModelAndView is null", mav != null)__		assertTrue("View name is not equal to '" + expectedName + "' but was '" + mav.getViewName() + "'",_			ObjectUtils.nullSafeEquals(expectedName, mav.getViewName()))__	};check,to,see,if,the,view,name,in,the,model,and,view,matches,the,given,code,expected,name,code,param,mav,model,and,view,to,test,against,never,code,null,code,param,expected,name,the,name,of,the,model,value;public,static,void,assert,view,name,model,and,view,mav,string,expected,name,assert,true,model,and,view,is,null,mav,null,assert,true,view,name,is,not,equal,to,expected,name,but,was,mav,get,view,name,object,utils,null,safe,equals,expected,name,mav,get,view,name
ModelAndViewAssert -> public static void assertViewName(ModelAndView mav, String expectedName);1356735495;Check to see if the view name in the ModelAndView matches the given_{@code expectedName}.__@param mav ModelAndView to test against (never {@code null})_@param expectedName the name of the model value;public static void assertViewName(ModelAndView mav, String expectedName) {_		assertTrue("ModelAndView is null", mav != null)__		assertTrue("View name is not equal to '" + expectedName + "' but was '" + mav.getViewName() + "'",_			ObjectUtils.nullSafeEquals(expectedName, mav.getViewName()))__	};check,to,see,if,the,view,name,in,the,model,and,view,matches,the,given,code,expected,name,param,mav,model,and,view,to,test,against,never,code,null,param,expected,name,the,name,of,the,model,value;public,static,void,assert,view,name,model,and,view,mav,string,expected,name,assert,true,model,and,view,is,null,mav,null,assert,true,view,name,is,not,equal,to,expected,name,but,was,mav,get,view,name,object,utils,null,safe,equals,expected,name,mav,get,view,name
ModelAndViewAssert -> public static void assertViewName(ModelAndView mav, String expectedName);1413848647;Check to see if the view name in the ModelAndView matches the given_{@code expectedName}.__@param mav ModelAndView to test against (never {@code null})_@param expectedName the name of the model value;public static void assertViewName(ModelAndView mav, String expectedName) {_		assertTrue("ModelAndView is null", mav != null)__		assertTrue("View name is not equal to '" + expectedName + "' but was '" + mav.getViewName() + "'",_			ObjectUtils.nullSafeEquals(expectedName, mav.getViewName()))__	};check,to,see,if,the,view,name,in,the,model,and,view,matches,the,given,code,expected,name,param,mav,model,and,view,to,test,against,never,code,null,param,expected,name,the,name,of,the,model,value;public,static,void,assert,view,name,model,and,view,mav,string,expected,name,assert,true,model,and,view,is,null,mav,null,assert,true,view,name,is,not,equal,to,expected,name,but,was,mav,get,view,name,object,utils,null,safe,equals,expected,name,mav,get,view,name
ModelAndViewAssert -> public static void assertViewName(ModelAndView mav, String expectedName);1467730834;Check to see if the view name in the ModelAndView matches the given_{@code expectedName}.__@param mav ModelAndView to test against (never {@code null})_@param expectedName the name of the model value;public static void assertViewName(ModelAndView mav, String expectedName) {_		assertTrue("ModelAndView is null", mav != null)__		assertTrue("View name is not equal to '" + expectedName + "' but was '" + mav.getViewName() + "'",_			ObjectUtils.nullSafeEquals(expectedName, mav.getViewName()))__	};check,to,see,if,the,view,name,in,the,model,and,view,matches,the,given,code,expected,name,param,mav,model,and,view,to,test,against,never,code,null,param,expected,name,the,name,of,the,model,value;public,static,void,assert,view,name,model,and,view,mav,string,expected,name,assert,true,model,and,view,is,null,mav,null,assert,true,view,name,is,not,equal,to,expected,name,but,was,mav,get,view,name,object,utils,null,safe,equals,expected,name,mav,get,view,name
ModelAndViewAssert -> public static void assertViewName(ModelAndView mav, String expectedName);1496955179;Check to see if the view name in the ModelAndView matches the given_{@code expectedName}._@param mav ModelAndView to test against (never {@code null})_@param expectedName the name of the model value;public static void assertViewName(ModelAndView mav, String expectedName) {_		if (mav == null) {_			fail("ModelAndView is null")__		}_		assertTrue("View name is not equal to '" + expectedName + "' but was '" + mav.getViewName() + "'",_			ObjectUtils.nullSafeEquals(expectedName, mav.getViewName()))__	};check,to,see,if,the,view,name,in,the,model,and,view,matches,the,given,code,expected,name,param,mav,model,and,view,to,test,against,never,code,null,param,expected,name,the,name,of,the,model,value;public,static,void,assert,view,name,model,and,view,mav,string,expected,name,if,mav,null,fail,model,and,view,is,null,assert,true,view,name,is,not,equal,to,expected,name,but,was,mav,get,view,name,object,utils,null,safe,equals,expected,name,mav,get,view,name
ModelAndViewAssert -> public static void assertViewName(ModelAndView mav, String expectedName);1518167526;Check to see if the view name in the ModelAndView matches the given_{@code expectedName}._@param mav ModelAndView to test against (never {@code null})_@param expectedName the name of the model value;public static void assertViewName(ModelAndView mav, String expectedName) {_		if (mav == null) {_			fail("ModelAndView is null")__		}_		assertTrue("View name is not equal to '" + expectedName + "' but was '" + mav.getViewName() + "'",_			ObjectUtils.nullSafeEquals(expectedName, mav.getViewName()))__	};check,to,see,if,the,view,name,in,the,model,and,view,matches,the,given,code,expected,name,param,mav,model,and,view,to,test,against,never,code,null,param,expected,name,the,name,of,the,model,value;public,static,void,assert,view,name,model,and,view,mav,string,expected,name,if,mav,null,fail,model,and,view,is,null,assert,true,view,name,is,not,equal,to,expected,name,but,was,mav,get,view,name,object,utils,null,safe,equals,expected,name,mav,get,view,name
ModelAndViewAssert -> public static void assertViewName(ModelAndView mav, String expectedName);1518167818;Check to see if the view name in the ModelAndView matches the given_{@code expectedName}._@param mav ModelAndView to test against (never {@code null})_@param expectedName the name of the model value;public static void assertViewName(ModelAndView mav, String expectedName) {_		if (mav == null) {_			fail("ModelAndView is null")__		}_		assertTrue("View name is not equal to '" + expectedName + "' but was '" + mav.getViewName() + "'",_			ObjectUtils.nullSafeEquals(expectedName, mav.getViewName()))__	};check,to,see,if,the,view,name,in,the,model,and,view,matches,the,given,code,expected,name,param,mav,model,and,view,to,test,against,never,code,null,param,expected,name,the,name,of,the,model,value;public,static,void,assert,view,name,model,and,view,mav,string,expected,name,if,mav,null,fail,model,and,view,is,null,assert,true,view,name,is,not,equal,to,expected,name,but,was,mav,get,view,name,object,utils,null,safe,equals,expected,name,mav,get,view,name
ModelAndViewAssert -> public static void assertViewName(ModelAndView mav, String expectedName);1518772998;Check to see if the view name in the ModelAndView matches the given_{@code expectedName}._@param mav ModelAndView to test against (never {@code null})_@param expectedName the name of the model value;public static void assertViewName(ModelAndView mav, String expectedName) {_		if (mav == null) {_			fail("ModelAndView is null")__		}_		assertTrue("View name is not equal to '" + expectedName + "' but was '" + mav.getViewName() + "'",_				ObjectUtils.nullSafeEquals(expectedName, mav.getViewName()))__	};check,to,see,if,the,view,name,in,the,model,and,view,matches,the,given,code,expected,name,param,mav,model,and,view,to,test,against,never,code,null,param,expected,name,the,name,of,the,model,value;public,static,void,assert,view,name,model,and,view,mav,string,expected,name,if,mav,null,fail,model,and,view,is,null,assert,true,view,name,is,not,equal,to,expected,name,but,was,mav,get,view,name,object,utils,null,safe,equals,expected,name,mav,get,view,name
ModelAndViewAssert -> public static void assertViewName(ModelAndView mav, String expectedName);1518810557;Check to see if the view name in the ModelAndView matches the given_{@code expectedName}._@param mav ModelAndView to test against (never {@code null})_@param expectedName the name of the model value;public static void assertViewName(ModelAndView mav, String expectedName) {_		assertTrue("View name is not equal to '" + expectedName + "' but was '" + mav.getViewName() + "'",_				ObjectUtils.nullSafeEquals(expectedName, mav.getViewName()))__	};check,to,see,if,the,view,name,in,the,model,and,view,matches,the,given,code,expected,name,param,mav,model,and,view,to,test,against,never,code,null,param,expected,name,the,name,of,the,model,value;public,static,void,assert,view,name,model,and,view,mav,string,expected,name,assert,true,view,name,is,not,equal,to,expected,name,but,was,mav,get,view,name,object,utils,null,safe,equals,expected,name,mav,get,view,name
ModelAndViewAssert -> public static void assertViewName(ModelAndView mav, String expectedName);1522192143;Check to see if the view name in the ModelAndView matches the given_{@code expectedName}._@param mav ModelAndView to test against (never {@code null})_@param expectedName the name of the model value;public static void assertViewName(ModelAndView mav, String expectedName) {_		assertTrue("View name is not equal to '" + expectedName + "' but was '" + mav.getViewName() + "'",_				ObjectUtils.nullSafeEquals(expectedName, mav.getViewName()))__	};check,to,see,if,the,view,name,in,the,model,and,view,matches,the,given,code,expected,name,param,mav,model,and,view,to,test,against,never,code,null,param,expected,name,the,name,of,the,model,value;public,static,void,assert,view,name,model,and,view,mav,string,expected,name,assert,true,view,name,is,not,equal,to,expected,name,but,was,mav,get,view,name,object,utils,null,safe,equals,expected,name,mav,get,view,name
ModelAndViewAssert -> public static void assertViewName(ModelAndView mav, String expectedName);1530174524;Check to see if the view name in the ModelAndView matches the given_{@code expectedName}._@param mav the ModelAndView to test against (never {@code null})_@param expectedName the name of the model value;public static void assertViewName(ModelAndView mav, String expectedName) {_		assertTrue("View name is not equal to '" + expectedName + "' but was '" + mav.getViewName() + "'",_				ObjectUtils.nullSafeEquals(expectedName, mav.getViewName()))__	};check,to,see,if,the,view,name,in,the,model,and,view,matches,the,given,code,expected,name,param,mav,the,model,and,view,to,test,against,never,code,null,param,expected,name,the,name,of,the,model,value;public,static,void,assert,view,name,model,and,view,mav,string,expected,name,assert,true,view,name,is,not,equal,to,expected,name,but,was,mav,get,view,name,object,utils,null,safe,equals,expected,name,mav,get,view,name
ModelAndViewAssert -> public static void assertViewName(ModelAndView mav, String expectedName);1530174524;Check to see if the view name in the ModelAndView matches the given_{@code expectedName}._@param mav the ModelAndView to test against (never {@code null})_@param expectedName the name of the model value;public static void assertViewName(ModelAndView mav, String expectedName) {_		assertTrue("View name is not equal to '" + expectedName + "' but was '" + mav.getViewName() + "'",_				ObjectUtils.nullSafeEquals(expectedName, mav.getViewName()))__	};check,to,see,if,the,view,name,in,the,model,and,view,matches,the,given,code,expected,name,param,mav,the,model,and,view,to,test,against,never,code,null,param,expected,name,the,name,of,the,model,value;public,static,void,assert,view,name,model,and,view,mav,string,expected,name,assert,true,view,name,is,not,equal,to,expected,name,but,was,mav,get,view,name,object,utils,null,safe,equals,expected,name,mav,get,view,name
ModelAndViewAssert -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, 			Comparator comparator);1328020251;Compare each individual entry in a list after having sorted both lists_(optionally using a comparator).__@param mav ModelAndView to test against (never <code>null</code>)_@param modelName name of the object to add to the model (never_<code>null</code>)_@param expectedList the expected list_@param comparator the comparator to use (may be <code>null</code>). If_not specifying the comparator, both lists will be sorted not using any_comparator.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList,_			Comparator comparator) {__		assertCondition(mav != null, "ModelAndView is null")__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)___		assertCondition(expectedList.size() == modelList.size(), "Size of model list is '" + modelList.size()_				+ "' while size of expected list is '" + expectedList.size() + "'")___		if (comparator != null) {_			Collections.sort(modelList, comparator)__			Collections.sort(expectedList, comparator)__		}_		else {_			Collections.sort(modelList)__			Collections.sort(expectedList)__		}__		assertCondition(expectedList.equals(modelList), "List in model under name '" + modelName_				+ "' is not equal to the expected list.")__	};compare,each,individual,entry,in,a,list,after,having,sorted,both,lists,optionally,using,a,comparator,param,mav,model,and,view,to,test,against,never,code,null,code,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,code,param,expected,list,the,expected,list,param,comparator,the,comparator,to,use,may,be,code,null,code,if,not,specifying,the,comparator,both,lists,will,be,sorted,not,using,any,comparator;suppress,warnings,unchecked,rawtypes,public,static,void,assert,sort,and,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,comparator,comparator,assert,condition,mav,null,model,and,view,is,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,condition,expected,list,size,model,list,size,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,if,comparator,null,collections,sort,model,list,comparator,collections,sort,expected,list,comparator,else,collections,sort,model,list,collections,sort,expected,list,assert,condition,expected,list,equals,model,list,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list
ModelAndViewAssert -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, 			Comparator comparator);1350692343;Compare each individual entry in a list after having sorted both lists_(optionally using a comparator).__@param mav ModelAndView to test against (never <code>null</code>)_@param modelName name of the object to add to the model (never_<code>null</code>)_@param expectedList the expected list_@param comparator the comparator to use (may be <code>null</code>). If_not specifying the comparator, both lists will be sorted not using any_comparator.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList,_			Comparator comparator) {__		assertTrue("ModelAndView is null", mav != null)__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)___		assertTrue(_			"Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size()_					+ "'", expectedList.size() == modelList.size())___		if (comparator != null) {_			Collections.sort(modelList, comparator)__			Collections.sort(expectedList, comparator)__		}_		else {_			Collections.sort(modelList)__			Collections.sort(expectedList)__		}__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_			expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,after,having,sorted,both,lists,optionally,using,a,comparator,param,mav,model,and,view,to,test,against,never,code,null,code,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,code,param,expected,list,the,expected,list,param,comparator,the,comparator,to,use,may,be,code,null,code,if,not,specifying,the,comparator,both,lists,will,be,sorted,not,using,any,comparator;suppress,warnings,unchecked,rawtypes,public,static,void,assert,sort,and,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,comparator,comparator,assert,true,model,and,view,is,null,mav,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,if,comparator,null,collections,sort,model,list,comparator,collections,sort,expected,list,comparator,else,collections,sort,model,list,collections,sort,expected,list,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, 			Comparator comparator);1356735495;Compare each individual entry in a list after having sorted both lists_(optionally using a comparator).__@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never_{@code null})_@param expectedList the expected list_@param comparator the comparator to use (may be {@code null}). If_not specifying the comparator, both lists will be sorted not using any_comparator.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList,_			Comparator comparator) {__		assertTrue("ModelAndView is null", mav != null)__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)___		assertTrue(_			"Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size()_					+ "'", expectedList.size() == modelList.size())___		if (comparator != null) {_			Collections.sort(modelList, comparator)__			Collections.sort(expectedList, comparator)__		}_		else {_			Collections.sort(modelList)__			Collections.sort(expectedList)__		}__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_			expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,after,having,sorted,both,lists,optionally,using,a,comparator,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list,param,comparator,the,comparator,to,use,may,be,code,null,if,not,specifying,the,comparator,both,lists,will,be,sorted,not,using,any,comparator;suppress,warnings,unchecked,rawtypes,public,static,void,assert,sort,and,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,comparator,comparator,assert,true,model,and,view,is,null,mav,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,if,comparator,null,collections,sort,model,list,comparator,collections,sort,expected,list,comparator,else,collections,sort,model,list,collections,sort,expected,list,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, 			Comparator comparator);1413848647;Compare each individual entry in a list after having sorted both lists_(optionally using a comparator).__@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never_{@code null})_@param expectedList the expected list_@param comparator the comparator to use (may be {@code null}). If_not specifying the comparator, both lists will be sorted not using any_comparator.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList,_			Comparator comparator) {__		assertTrue("ModelAndView is null", mav != null)__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)___		assertTrue(_			"Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size()_					+ "'", expectedList.size() == modelList.size())___		if (comparator != null) {_			Collections.sort(modelList, comparator)__			Collections.sort(expectedList, comparator)__		}_		else {_			Collections.sort(modelList)__			Collections.sort(expectedList)__		}__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_			expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,after,having,sorted,both,lists,optionally,using,a,comparator,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list,param,comparator,the,comparator,to,use,may,be,code,null,if,not,specifying,the,comparator,both,lists,will,be,sorted,not,using,any,comparator;suppress,warnings,unchecked,rawtypes,public,static,void,assert,sort,and,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,comparator,comparator,assert,true,model,and,view,is,null,mav,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,if,comparator,null,collections,sort,model,list,comparator,collections,sort,expected,list,comparator,else,collections,sort,model,list,collections,sort,expected,list,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, 			Comparator comparator);1467730834;Compare each individual entry in a list after having sorted both lists_(optionally using a comparator).__@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never_{@code null})_@param expectedList the expected list_@param comparator the comparator to use (may be {@code null}). If_not specifying the comparator, both lists will be sorted not using any_comparator.;@SuppressWarnings({ "unchecked", "rawtypes" })_	public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList,_			Comparator comparator) {__		assertTrue("ModelAndView is null", mav != null)__		List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)___		assertTrue(_			"Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size()_					+ "'", expectedList.size() == modelList.size())___		if (comparator != null) {_			Collections.sort(modelList, comparator)__			Collections.sort(expectedList, comparator)__		}_		else {_			Collections.sort(modelList)__			Collections.sort(expectedList)__		}__		assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.",_			expectedList.equals(modelList))__	};compare,each,individual,entry,in,a,list,after,having,sorted,both,lists,optionally,using,a,comparator,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,list,the,expected,list,param,comparator,the,comparator,to,use,may,be,code,null,if,not,specifying,the,comparator,both,lists,will,be,sorted,not,using,any,comparator;suppress,warnings,unchecked,rawtypes,public,static,void,assert,sort,and,compare,list,model,attribute,model,and,view,mav,string,model,name,list,expected,list,comparator,comparator,assert,true,model,and,view,is,null,mav,null,list,model,list,assert,and,return,model,attribute,of,type,mav,model,name,list,class,assert,true,size,of,model,list,is,model,list,size,while,size,of,expected,list,is,expected,list,size,expected,list,size,model,list,size,if,comparator,null,collections,sort,model,list,comparator,collections,sort,expected,list,comparator,else,collections,sort,model,list,collections,sort,expected,list,assert,true,list,in,model,under,name,model,name,is,not,equal,to,the,expected,list,expected,list,equals,model,list
ModelAndViewAssert -> public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue);1328020251;Compare a given <code>expectedValue</code> to the value from the model_bound under the given <code>modelName</code>.__@param mav ModelAndView to test against (never <code>null</code>)_@param modelName name of the object to add to the model (never_<code>null</code>)_@param expectedValue the model value;public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue) {_		assertCondition(mav != null, "ModelAndView is null")__		Object modelValue = assertAndReturnModelAttributeOfType(mav, modelName, Object.class)__		assertCondition(modelValue.equals(expectedValue), "Model value with name '" + modelName_				+ "' is not the same as the expected value which was '" + expectedValue + "'")__	};compare,a,given,code,expected,value,code,to,the,value,from,the,model,bound,under,the,given,code,model,name,code,param,mav,model,and,view,to,test,against,never,code,null,code,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,code,param,expected,value,the,model,value;public,static,void,assert,model,attribute,value,model,and,view,mav,string,model,name,object,expected,value,assert,condition,mav,null,model,and,view,is,null,object,model,value,assert,and,return,model,attribute,of,type,mav,model,name,object,class,assert,condition,model,value,equals,expected,value,model,value,with,name,model,name,is,not,the,same,as,the,expected,value,which,was,expected,value
ModelAndViewAssert -> public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue);1350692343;Compare a given <code>expectedValue</code> to the value from the model_bound under the given <code>modelName</code>.__@param mav ModelAndView to test against (never <code>null</code>)_@param modelName name of the object to add to the model (never_<code>null</code>)_@param expectedValue the model value;public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue) {_		assertTrue("ModelAndView is null", mav != null)__		Object modelValue = assertAndReturnModelAttributeOfType(mav, modelName, Object.class)__		assertTrue("Model value with name '" + modelName + "' is not the same as the expected value which was '"_				+ expectedValue + "'", modelValue.equals(expectedValue))__	};compare,a,given,code,expected,value,code,to,the,value,from,the,model,bound,under,the,given,code,model,name,code,param,mav,model,and,view,to,test,against,never,code,null,code,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,code,param,expected,value,the,model,value;public,static,void,assert,model,attribute,value,model,and,view,mav,string,model,name,object,expected,value,assert,true,model,and,view,is,null,mav,null,object,model,value,assert,and,return,model,attribute,of,type,mav,model,name,object,class,assert,true,model,value,with,name,model,name,is,not,the,same,as,the,expected,value,which,was,expected,value,model,value,equals,expected,value
ModelAndViewAssert -> public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue);1356735495;Compare a given {@code expectedValue} to the value from the model_bound under the given {@code modelName}.__@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never_{@code null})_@param expectedValue the model value;public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue) {_		assertTrue("ModelAndView is null", mav != null)__		Object modelValue = assertAndReturnModelAttributeOfType(mav, modelName, Object.class)__		assertTrue("Model value with name '" + modelName + "' is not the same as the expected value which was '"_				+ expectedValue + "'", modelValue.equals(expectedValue))__	};compare,a,given,code,expected,value,to,the,value,from,the,model,bound,under,the,given,code,model,name,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,value,the,model,value;public,static,void,assert,model,attribute,value,model,and,view,mav,string,model,name,object,expected,value,assert,true,model,and,view,is,null,mav,null,object,model,value,assert,and,return,model,attribute,of,type,mav,model,name,object,class,assert,true,model,value,with,name,model,name,is,not,the,same,as,the,expected,value,which,was,expected,value,model,value,equals,expected,value
ModelAndViewAssert -> public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue);1413848647;Compare a given {@code expectedValue} to the value from the model_bound under the given {@code modelName}.__@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never_{@code null})_@param expectedValue the model value;public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue) {_		assertTrue("ModelAndView is null", mav != null)__		Object modelValue = assertAndReturnModelAttributeOfType(mav, modelName, Object.class)__		assertTrue("Model value with name '" + modelName + "' is not the same as the expected value which was '"_				+ expectedValue + "'", modelValue.equals(expectedValue))__	};compare,a,given,code,expected,value,to,the,value,from,the,model,bound,under,the,given,code,model,name,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,value,the,model,value;public,static,void,assert,model,attribute,value,model,and,view,mav,string,model,name,object,expected,value,assert,true,model,and,view,is,null,mav,null,object,model,value,assert,and,return,model,attribute,of,type,mav,model,name,object,class,assert,true,model,value,with,name,model,name,is,not,the,same,as,the,expected,value,which,was,expected,value,model,value,equals,expected,value
ModelAndViewAssert -> public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue);1467730834;Compare a given {@code expectedValue} to the value from the model_bound under the given {@code modelName}.__@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never_{@code null})_@param expectedValue the model value;public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue) {_		assertTrue("ModelAndView is null", mav != null)__		Object modelValue = assertAndReturnModelAttributeOfType(mav, modelName, Object.class)__		assertTrue("Model value with name '" + modelName + "' is not the same as the expected value which was '"_				+ expectedValue + "'", modelValue.equals(expectedValue))__	};compare,a,given,code,expected,value,to,the,value,from,the,model,bound,under,the,given,code,model,name,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,value,the,model,value;public,static,void,assert,model,attribute,value,model,and,view,mav,string,model,name,object,expected,value,assert,true,model,and,view,is,null,mav,null,object,model,value,assert,and,return,model,attribute,of,type,mav,model,name,object,class,assert,true,model,value,with,name,model,name,is,not,the,same,as,the,expected,value,which,was,expected,value,model,value,equals,expected,value
ModelAndViewAssert -> public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue);1496955179;Compare a given {@code expectedValue} to the value from the model_bound under the given {@code modelName}._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedValue the model value;public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue) {_		assertTrue("ModelAndView is null", mav != null)__		Object modelValue = assertAndReturnModelAttributeOfType(mav, modelName, Object.class)__		assertTrue("Model value with name '" + modelName + "' is not the same as the expected value which was '" +_				expectedValue + "'", modelValue.equals(expectedValue))__	};compare,a,given,code,expected,value,to,the,value,from,the,model,bound,under,the,given,code,model,name,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,value,the,model,value;public,static,void,assert,model,attribute,value,model,and,view,mav,string,model,name,object,expected,value,assert,true,model,and,view,is,null,mav,null,object,model,value,assert,and,return,model,attribute,of,type,mav,model,name,object,class,assert,true,model,value,with,name,model,name,is,not,the,same,as,the,expected,value,which,was,expected,value,model,value,equals,expected,value
ModelAndViewAssert -> public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue);1518167526;Compare a given {@code expectedValue} to the value from the model_bound under the given {@code modelName}._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedValue the model value;public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue) {_		assertTrue("ModelAndView is null", mav != null)__		Object modelValue = assertAndReturnModelAttributeOfType(mav, modelName, Object.class)__		assertTrue("Model value with name '" + modelName + "' is not the same as the expected value which was '" +_				expectedValue + "'", modelValue.equals(expectedValue))__	};compare,a,given,code,expected,value,to,the,value,from,the,model,bound,under,the,given,code,model,name,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,value,the,model,value;public,static,void,assert,model,attribute,value,model,and,view,mav,string,model,name,object,expected,value,assert,true,model,and,view,is,null,mav,null,object,model,value,assert,and,return,model,attribute,of,type,mav,model,name,object,class,assert,true,model,value,with,name,model,name,is,not,the,same,as,the,expected,value,which,was,expected,value,model,value,equals,expected,value
ModelAndViewAssert -> public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue);1518167818;Compare a given {@code expectedValue} to the value from the model_bound under the given {@code modelName}._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedValue the model value;public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue) {_		assertTrue("ModelAndView is null", mav != null)__		Object modelValue = assertAndReturnModelAttributeOfType(mav, modelName, Object.class)__		assertTrue("Model value with name '" + modelName + "' is not the same as the expected value which was '" +_				expectedValue + "'", modelValue.equals(expectedValue))__	};compare,a,given,code,expected,value,to,the,value,from,the,model,bound,under,the,given,code,model,name,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,value,the,model,value;public,static,void,assert,model,attribute,value,model,and,view,mav,string,model,name,object,expected,value,assert,true,model,and,view,is,null,mav,null,object,model,value,assert,and,return,model,attribute,of,type,mav,model,name,object,class,assert,true,model,value,with,name,model,name,is,not,the,same,as,the,expected,value,which,was,expected,value,model,value,equals,expected,value
ModelAndViewAssert -> public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue);1518772998;Compare a given {@code expectedValue} to the value from the model_bound under the given {@code modelName}._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedValue the model value;public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue) {_		assertTrue("ModelAndView is null", mav != null)__		Object modelValue = assertAndReturnModelAttributeOfType(mav, modelName, Object.class)__		assertTrue("Model value with name '" + modelName + "' is not the same as the expected value which was '" +_				expectedValue + "'", modelValue.equals(expectedValue))__	};compare,a,given,code,expected,value,to,the,value,from,the,model,bound,under,the,given,code,model,name,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,value,the,model,value;public,static,void,assert,model,attribute,value,model,and,view,mav,string,model,name,object,expected,value,assert,true,model,and,view,is,null,mav,null,object,model,value,assert,and,return,model,attribute,of,type,mav,model,name,object,class,assert,true,model,value,with,name,model,name,is,not,the,same,as,the,expected,value,which,was,expected,value,model,value,equals,expected,value
ModelAndViewAssert -> public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue);1518810557;Compare a given {@code expectedValue} to the value from the model_bound under the given {@code modelName}._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedValue the model value;public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue) {_		Object modelValue = assertAndReturnModelAttributeOfType(mav, modelName, Object.class)__		assertTrue("Model value with name '" + modelName + "' is not the same as the expected value which was '" +_				expectedValue + "'", modelValue.equals(expectedValue))__	};compare,a,given,code,expected,value,to,the,value,from,the,model,bound,under,the,given,code,model,name,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,value,the,model,value;public,static,void,assert,model,attribute,value,model,and,view,mav,string,model,name,object,expected,value,object,model,value,assert,and,return,model,attribute,of,type,mav,model,name,object,class,assert,true,model,value,with,name,model,name,is,not,the,same,as,the,expected,value,which,was,expected,value,model,value,equals,expected,value
ModelAndViewAssert -> public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue);1522192143;Compare a given {@code expectedValue} to the value from the model_bound under the given {@code modelName}._@param mav ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedValue the model value;public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue) {_		Object modelValue = assertAndReturnModelAttributeOfType(mav, modelName, Object.class)__		assertTrue("Model value with name '" + modelName + "' is not the same as the expected value which was '" +_				expectedValue + "'", modelValue.equals(expectedValue))__	};compare,a,given,code,expected,value,to,the,value,from,the,model,bound,under,the,given,code,model,name,param,mav,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,value,the,model,value;public,static,void,assert,model,attribute,value,model,and,view,mav,string,model,name,object,expected,value,object,model,value,assert,and,return,model,attribute,of,type,mav,model,name,object,class,assert,true,model,value,with,name,model,name,is,not,the,same,as,the,expected,value,which,was,expected,value,model,value,equals,expected,value
ModelAndViewAssert -> public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue);1530174524;Compare a given {@code expectedValue} to the value from the model_bound under the given {@code modelName}._@param mav the ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedValue the model value;public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue) {_		Object modelValue = assertAndReturnModelAttributeOfType(mav, modelName, Object.class)__		assertTrue("Model value with name '" + modelName + "' is not the same as the expected value which was '" +_				expectedValue + "'", modelValue.equals(expectedValue))__	};compare,a,given,code,expected,value,to,the,value,from,the,model,bound,under,the,given,code,model,name,param,mav,the,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,value,the,model,value;public,static,void,assert,model,attribute,value,model,and,view,mav,string,model,name,object,expected,value,object,model,value,assert,and,return,model,attribute,of,type,mav,model,name,object,class,assert,true,model,value,with,name,model,name,is,not,the,same,as,the,expected,value,which,was,expected,value,model,value,equals,expected,value
ModelAndViewAssert -> public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue);1530174524;Compare a given {@code expectedValue} to the value from the model_bound under the given {@code modelName}._@param mav the ModelAndView to test against (never {@code null})_@param modelName name of the object to add to the model (never {@code null})_@param expectedValue the model value;public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue) {_		Object modelValue = assertAndReturnModelAttributeOfType(mav, modelName, Object.class)__		assertTrue("Model value with name '" + modelName + "' is not the same as the expected value which was '" +_				expectedValue + "'", modelValue.equals(expectedValue))__	};compare,a,given,code,expected,value,to,the,value,from,the,model,bound,under,the,given,code,model,name,param,mav,the,model,and,view,to,test,against,never,code,null,param,model,name,name,of,the,object,to,add,to,the,model,never,code,null,param,expected,value,the,model,value;public,static,void,assert,model,attribute,value,model,and,view,mav,string,model,name,object,expected,value,object,model,value,assert,and,return,model,attribute,of,type,mav,model,name,object,class,assert,true,model,value,with,name,model,name,is,not,the,same,as,the,expected,value,which,was,expected,value,model,value,equals,expected,value
