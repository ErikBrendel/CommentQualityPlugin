commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;11;/**  * Checks whether the model value under the given {@code modelName}  * exists and checks it type, based on the {@code expectedType}. If the  * model entry exists and the type matches, the model value is returned.  * @param mav the ModelAndView to test against (never {@code null})  * @param modelName name of the object to add to the model (never {@code null})  * @param expectedType expected type of the model value  * @return the model value  */ ;/**  * Checks whether the model value under the given {@code modelName}  * exists and checks it type, based on the {@code expectedType}. If the  * model entry exists and the type matches, the model value is returned.  * @param mav the ModelAndView to test against (never {@code null})  * @param modelName name of the object to add to the model (never {@code null})  * @param expectedType expected type of the model value  * @return the model value  */ @SuppressWarnings("unchecked") public static <T> T assertAndReturnModelAttributeOfType(ModelAndView mav, String modelName, Class<T> expectedType) {     Map<String, Object> model = mav.getModel().     Object obj = model.get(modelName).     if (obj == null) {         fail("Model attribute with name '" + modelName + "' is null").     }     assertTrue("Model attribute is not of expected type '" + expectedType.getName() + "' but rather of type '" + obj.getClass().getName() + "'", expectedType.isAssignableFrom(obj.getClass())).     return (T) obj. }
true;public,static;3;8;/**  * Compare each individual entry in a list, without first sorting the lists.  * @param mav the ModelAndView to test against (never {@code null})  * @param modelName name of the object to add to the model (never {@code null})  * @param expectedList the expected list  */ ;/**  * Compare each individual entry in a list, without first sorting the lists.  * @param mav the ModelAndView to test against (never {@code null})  * @param modelName name of the object to add to the model (never {@code null})  * @param expectedList the expected list  */ @SuppressWarnings("rawtypes") public static void assertCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList) {     List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class).     assertTrue("Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size() + "'", expectedList.size() == modelList.size()).     assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.", expectedList.equals(modelList)). }
true;public,static;2;4;/**  * Assert whether or not a model attribute is available.  * @param mav the ModelAndView to test against (never {@code null})  * @param modelName name of the object to add to the model (never {@code null})  */ ;/**  * Assert whether or not a model attribute is available.  * @param mav the ModelAndView to test against (never {@code null})  * @param modelName name of the object to add to the model (never {@code null})  */ public static void assertModelAttributeAvailable(ModelAndView mav, String modelName) {     Map<String, Object> model = mav.getModel().     assertTrue("Model attribute with name '" + modelName + "' is not available", model.containsKey(modelName)). }
true;public,static;3;5;/**  * Compare a given {@code expectedValue} to the value from the model  * bound under the given {@code modelName}.  * @param mav the ModelAndView to test against (never {@code null})  * @param modelName name of the object to add to the model (never {@code null})  * @param expectedValue the model value  */ ;/**  * Compare a given {@code expectedValue} to the value from the model  * bound under the given {@code modelName}.  * @param mav the ModelAndView to test against (never {@code null})  * @param modelName name of the object to add to the model (never {@code null})  * @param expectedValue the model value  */ public static void assertModelAttributeValue(ModelAndView mav, String modelName, Object expectedValue) {     Object modelValue = assertAndReturnModelAttributeOfType(mav, modelName, Object.class).     assertTrue("Model value with name '" + modelName + "' is not the same as the expected value which was '" + expectedValue + "'", modelValue.equals(expectedValue)). }
true;public,static;2;23;/**  * Inspect the {@code expectedModel} to see if all elements in the  * model appear and are equal.  * @param mav the ModelAndView to test against (never {@code null})  * @param expectedModel the expected model  */ ;/**  * Inspect the {@code expectedModel} to see if all elements in the  * model appear and are equal.  * @param mav the ModelAndView to test against (never {@code null})  * @param expectedModel the expected model  */ public static void assertModelAttributeValues(ModelAndView mav, Map<String, Object> expectedModel) {     Map<String, Object> model = mav.getModel().     if (!model.keySet().equals(expectedModel.keySet())) {         StringBuilder sb = new StringBuilder("Keyset of expected model does not match.\n").         appendNonMatchingSetsErrorMessage(expectedModel.keySet(), model.keySet(), sb).         fail(sb.toString()).     }     StringBuilder sb = new StringBuilder().     model.forEach((modelName, mavValue) -> {         Object assertionValue = expectedModel.get(modelName).         if (!assertionValue.equals(mavValue)) {             sb.append("Value under name '").append(modelName).append("' differs, should have been '").append(assertionValue).append("' but was '").append(mavValue).append("'\n").         }     }).     if (sb.length() != 0) {         sb.insert(0, "Values of expected model do not match.\n").         fail(sb.toString()).     } }
true;public,static;4;14;/**  * Compare each individual entry in a list after having sorted both lists  * (optionally using a comparator).  * @param mav the ModelAndView to test against (never {@code null})  * @param modelName name of the object to add to the model (never {@code null})  * @param expectedList the expected list  * @param comparator the comparator to use (may be {@code null}). If not  * specifying the comparator, both lists will be sorted not using any comparator.  */ ;/**  * Compare each individual entry in a list after having sorted both lists  * (optionally using a comparator).  * @param mav the ModelAndView to test against (never {@code null})  * @param modelName name of the object to add to the model (never {@code null})  * @param expectedList the expected list  * @param comparator the comparator to use (may be {@code null}). If not  * specifying the comparator, both lists will be sorted not using any comparator.  */ @SuppressWarnings({ "unchecked", "rawtypes" }) public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, Comparator comparator) {     List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class).     assertTrue("Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size() + "'", expectedList.size() == modelList.size()).     modelList.sort(comparator).     expectedList.sort(comparator).     assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.", expectedList.equals(modelList)). }
true;public,static;2;4;/**  * Check to see if the view name in the ModelAndView matches the given  * {@code expectedName}.  * @param mav the ModelAndView to test against (never {@code null})  * @param expectedName the name of the model value  */ ;/**  * Check to see if the view name in the ModelAndView matches the given  * {@code expectedName}.  * @param mav the ModelAndView to test against (never {@code null})  * @param expectedName the name of the model value  */ public static void assertViewName(ModelAndView mav, String expectedName) {     assertTrue("View name is not equal to '" + expectedName + "' but was '" + mav.getViewName() + "'", ObjectUtils.nullSafeEquals(expectedName, mav.getViewName())). }
false;private,static;3;27;;private static void appendNonMatchingSetsErrorMessage(Set<String> assertionSet, Set<String> incorrectSet, StringBuilder sb) {     Set<String> tempSet = new HashSet<>(incorrectSet).     tempSet.removeAll(assertionSet).     if (!tempSet.isEmpty()) {         sb.append("Set has too many elements:\n").         for (Object element : tempSet) {             sb.append('-').             sb.append(element).             sb.append('\n').         }     }     tempSet = new HashSet<>(assertionSet).     tempSet.removeAll(incorrectSet).     if (!tempSet.isEmpty()) {         sb.append("Set is missing elements:\n").         for (Object element : tempSet) {             sb.append('-').             sb.append(element).             sb.append('\n').         }     } }
