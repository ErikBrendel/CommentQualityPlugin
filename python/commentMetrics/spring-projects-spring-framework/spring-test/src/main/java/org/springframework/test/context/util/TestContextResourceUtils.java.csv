# id;timestamp;commentText;codeText;commentWords;codeWords
TestContextResourceUtils -> public static Resource[] convertToResources(ResourceLoader resourceLoader, String... paths);1401991965;Convert the supplied paths to {@link Resource} handles using the given_{@link ResourceLoader}.__@param resourceLoader the {@code ResourceLoader} to use to convert the paths_@param paths the paths to be converted_@return a new array of resources_@see #convertToClasspathResourcePaths;public static Resource[] convertToResources(ResourceLoader resourceLoader, String... paths) {_		List<Resource> list = new ArrayList<Resource>()__		for (String path : paths) {_			list.add(resourceLoader.getResource(path))__		}_		return list.toArray(new Resource[list.size()])__	};convert,the,supplied,paths,to,link,resource,handles,using,the,given,link,resource,loader,param,resource,loader,the,code,resource,loader,to,use,to,convert,the,paths,param,paths,the,paths,to,be,converted,return,a,new,array,of,resources,see,convert,to,classpath,resource,paths;public,static,resource,convert,to,resources,resource,loader,resource,loader,string,paths,list,resource,list,new,array,list,resource,for,string,path,paths,list,add,resource,loader,get,resource,path,return,list,to,array,new,resource,list,size
TestContextResourceUtils -> public static Resource[] convertToResources(ResourceLoader resourceLoader, String... paths);1413848647;Convert the supplied paths to {@link Resource} handles using the given_{@link ResourceLoader}.__@param resourceLoader the {@code ResourceLoader} to use to convert the paths_@param paths the paths to be converted_@return a new array of resources_@see #convertToClasspathResourcePaths;public static Resource[] convertToResources(ResourceLoader resourceLoader, String... paths) {_		List<Resource> list = new ArrayList<Resource>()__		for (String path : paths) {_			list.add(resourceLoader.getResource(path))__		}_		return list.toArray(new Resource[list.size()])__	};convert,the,supplied,paths,to,link,resource,handles,using,the,given,link,resource,loader,param,resource,loader,the,code,resource,loader,to,use,to,convert,the,paths,param,paths,the,paths,to,be,converted,return,a,new,array,of,resources,see,convert,to,classpath,resource,paths;public,static,resource,convert,to,resources,resource,loader,resource,loader,string,paths,list,resource,list,new,array,list,resource,for,string,path,paths,list,add,resource,loader,get,resource,path,return,list,to,array,new,resource,list,size
TestContextResourceUtils -> public static Resource[] convertToResources(ResourceLoader resourceLoader, String... paths);1435085100;Convert the supplied paths to an array of {@link Resource} handles using_the given {@link ResourceLoader}.__@param resourceLoader the {@code ResourceLoader} to use to convert the paths_@param paths the paths to be converted_@return a new array of resources_@see #convertToResourceList(ResourceLoader, String...)_@see #convertToClasspathResourcePaths;public static Resource[] convertToResources(ResourceLoader resourceLoader, String... paths) {_		List<Resource> list = convertToResourceList(resourceLoader, paths)__		return list.toArray(new Resource[list.size()])__	};convert,the,supplied,paths,to,an,array,of,link,resource,handles,using,the,given,link,resource,loader,param,resource,loader,the,code,resource,loader,to,use,to,convert,the,paths,param,paths,the,paths,to,be,converted,return,a,new,array,of,resources,see,convert,to,resource,list,resource,loader,string,see,convert,to,classpath,resource,paths;public,static,resource,convert,to,resources,resource,loader,resource,loader,string,paths,list,resource,list,convert,to,resource,list,resource,loader,paths,return,list,to,array,new,resource,list,size
TestContextResourceUtils -> public static Resource[] convertToResources(ResourceLoader resourceLoader, String... paths);1467730834;Convert the supplied paths to an array of {@link Resource} handles using_the given {@link ResourceLoader}.__@param resourceLoader the {@code ResourceLoader} to use to convert the paths_@param paths the paths to be converted_@return a new array of resources_@see #convertToResourceList(ResourceLoader, String...)_@see #convertToClasspathResourcePaths;public static Resource[] convertToResources(ResourceLoader resourceLoader, String... paths) {_		List<Resource> list = convertToResourceList(resourceLoader, paths)__		return list.toArray(new Resource[list.size()])__	};convert,the,supplied,paths,to,an,array,of,link,resource,handles,using,the,given,link,resource,loader,param,resource,loader,the,code,resource,loader,to,use,to,convert,the,paths,param,paths,the,paths,to,be,converted,return,a,new,array,of,resources,see,convert,to,resource,list,resource,loader,string,see,convert,to,classpath,resource,paths;public,static,resource,convert,to,resources,resource,loader,resource,loader,string,paths,list,resource,list,convert,to,resource,list,resource,loader,paths,return,list,to,array,new,resource,list,size
TestContextResourceUtils -> public static Resource[] convertToResources(ResourceLoader resourceLoader, String... paths);1467992320;Convert the supplied paths to an array of {@link Resource} handles using_the given {@link ResourceLoader}.__@param resourceLoader the {@code ResourceLoader} to use to convert the paths_@param paths the paths to be converted_@return a new array of resources_@see #convertToResourceList(ResourceLoader, String...)_@see #convertToClasspathResourcePaths;public static Resource[] convertToResources(ResourceLoader resourceLoader, String... paths) {_		return stream(resourceLoader, paths).toArray(Resource[]::new)__	};convert,the,supplied,paths,to,an,array,of,link,resource,handles,using,the,given,link,resource,loader,param,resource,loader,the,code,resource,loader,to,use,to,convert,the,paths,param,paths,the,paths,to,be,converted,return,a,new,array,of,resources,see,convert,to,resource,list,resource,loader,string,see,convert,to,classpath,resource,paths;public,static,resource,convert,to,resources,resource,loader,resource,loader,string,paths,return,stream,resource,loader,paths,to,array,resource,new
TestContextResourceUtils -> public static Resource[] convertToResources(ResourceLoader resourceLoader, String... paths);1496955179;Convert the supplied paths to an array of {@link Resource} handles using_the given {@link ResourceLoader}._@param resourceLoader the {@code ResourceLoader} to use to convert the paths_@param paths the paths to be converted_@return a new array of resources_@see #convertToResourceList(ResourceLoader, String...)_@see #convertToClasspathResourcePaths;public static Resource[] convertToResources(ResourceLoader resourceLoader, String... paths) {_		return stream(resourceLoader, paths).toArray(Resource[]::new)__	};convert,the,supplied,paths,to,an,array,of,link,resource,handles,using,the,given,link,resource,loader,param,resource,loader,the,code,resource,loader,to,use,to,convert,the,paths,param,paths,the,paths,to,be,converted,return,a,new,array,of,resources,see,convert,to,resource,list,resource,loader,string,see,convert,to,classpath,resource,paths;public,static,resource,convert,to,resources,resource,loader,resource,loader,string,paths,return,stream,resource,loader,paths,to,array,resource,new
TestContextResourceUtils -> public static Resource[] convertToResources(ResourceLoader resourceLoader, String... paths);1530174524;Convert the supplied paths to an array of {@link Resource} handles using_the given {@link ResourceLoader}._@param resourceLoader the {@code ResourceLoader} to use to convert the paths_@param paths the paths to be converted_@return a new array of resources_@see #convertToResourceList(ResourceLoader, String...)_@see #convertToClasspathResourcePaths;public static Resource[] convertToResources(ResourceLoader resourceLoader, String... paths) {_		return stream(resourceLoader, paths).toArray(Resource[]::new)__	};convert,the,supplied,paths,to,an,array,of,link,resource,handles,using,the,given,link,resource,loader,param,resource,loader,the,code,resource,loader,to,use,to,convert,the,paths,param,paths,the,paths,to,be,converted,return,a,new,array,of,resources,see,convert,to,resource,list,resource,loader,string,see,convert,to,classpath,resource,paths;public,static,resource,convert,to,resources,resource,loader,resource,loader,string,paths,return,stream,resource,loader,paths,to,array,resource,new
TestContextResourceUtils -> public static String[] convertToClasspathResourcePaths(Class<?> clazz, String... paths);1401991965;Convert the supplied paths to classpath resource paths.__<p>For each of the supplied paths:_<ul>_<li>A plain path &mdash_ for example, {@code "context.xml"} &mdash_ will_be treated as a classpath resource that is relative to the package in_which the specified class is defined._<li>A path starting with a slash will be treated as an absolute path_within the classpath, for example: {@code "/org/example/schema.sql"}._<li>A path which is prefixed with a URL protocol (e.g.,_{@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link ResourceUtils#FILE_URL_PREFIX file:}, {@code http:}, etc.) will be_{@link StringUtils#cleanPath cleaned} but otherwise unmodified.__@param clazz the class with which the paths are associated_@param paths the paths to be converted_@return a new array of converted resource paths_@see #convertToResources;public static String[] convertToClasspathResourcePaths(Class<?> clazz, String... paths) {_		String[] convertedPaths = new String[paths.length]__		for (int i = 0_ i < paths.length_ i++) {_			String path = paths[i]__			if (path.startsWith(SLASH)) {_				convertedPaths[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path__			}_			else if (!ResourcePatternUtils.isUrl(path)) {_				convertedPaths[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH_						+ StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path)__			}_			else {_				convertedPaths[i] = StringUtils.cleanPath(path)__			}_		}_		return convertedPaths__	};convert,the,supplied,paths,to,classpath,resource,paths,p,for,each,of,the,supplied,paths,ul,li,a,plain,path,mdash,for,example,code,context,xml,mdash,will,be,treated,as,a,classpath,resource,that,is,relative,to,the,package,in,which,the,specified,class,is,defined,li,a,path,starting,with,a,slash,will,be,treated,as,an,absolute,path,within,the,classpath,for,example,code,org,example,schema,sql,li,a,path,which,is,prefixed,with,a,url,protocol,e,g,link,resource,utils,classpath,link,resource,utils,file,code,http,etc,will,be,link,string,utils,clean,path,cleaned,but,otherwise,unmodified,param,clazz,the,class,with,which,the,paths,are,associated,param,paths,the,paths,to,be,converted,return,a,new,array,of,converted,resource,paths,see,convert,to,resources;public,static,string,convert,to,classpath,resource,paths,class,clazz,string,paths,string,converted,paths,new,string,paths,length,for,int,i,0,i,paths,length,i,string,path,paths,i,if,path,starts,with,slash,converted,paths,i,resource,utils,path,else,if,resource,pattern,utils,is,url,path,converted,paths,i,resource,utils,slash,string,utils,clean,path,class,utils,class,package,as,resource,path,clazz,slash,path,else,converted,paths,i,string,utils,clean,path,path,return,converted,paths
TestContextResourceUtils -> public static String[] convertToClasspathResourcePaths(Class<?> clazz, String... paths);1413848647;Convert the supplied paths to classpath resource paths.__<p>For each of the supplied paths:_<ul>_<li>A plain path &mdash_ for example, {@code "context.xml"} &mdash_ will_be treated as a classpath resource that is relative to the package in_which the specified class is defined._<li>A path starting with a slash will be treated as an absolute path_within the classpath, for example: {@code "/org/example/schema.sql"}._<li>A path which is prefixed with a URL protocol (e.g.,_{@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link ResourceUtils#FILE_URL_PREFIX file:}, {@code http:}, etc.) will be_{@link StringUtils#cleanPath cleaned} but otherwise unmodified.__@param clazz the class with which the paths are associated_@param paths the paths to be converted_@return a new array of converted resource paths_@see #convertToResources;public static String[] convertToClasspathResourcePaths(Class<?> clazz, String... paths) {_		String[] convertedPaths = new String[paths.length]__		for (int i = 0_ i < paths.length_ i++) {_			String path = paths[i]__			if (path.startsWith(SLASH)) {_				convertedPaths[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path__			}_			else if (!ResourcePatternUtils.isUrl(path)) {_				convertedPaths[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH_						+ StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path)__			}_			else {_				convertedPaths[i] = StringUtils.cleanPath(path)__			}_		}_		return convertedPaths__	};convert,the,supplied,paths,to,classpath,resource,paths,p,for,each,of,the,supplied,paths,ul,li,a,plain,path,mdash,for,example,code,context,xml,mdash,will,be,treated,as,a,classpath,resource,that,is,relative,to,the,package,in,which,the,specified,class,is,defined,li,a,path,starting,with,a,slash,will,be,treated,as,an,absolute,path,within,the,classpath,for,example,code,org,example,schema,sql,li,a,path,which,is,prefixed,with,a,url,protocol,e,g,link,resource,utils,classpath,link,resource,utils,file,code,http,etc,will,be,link,string,utils,clean,path,cleaned,but,otherwise,unmodified,param,clazz,the,class,with,which,the,paths,are,associated,param,paths,the,paths,to,be,converted,return,a,new,array,of,converted,resource,paths,see,convert,to,resources;public,static,string,convert,to,classpath,resource,paths,class,clazz,string,paths,string,converted,paths,new,string,paths,length,for,int,i,0,i,paths,length,i,string,path,paths,i,if,path,starts,with,slash,converted,paths,i,resource,utils,path,else,if,resource,pattern,utils,is,url,path,converted,paths,i,resource,utils,slash,string,utils,clean,path,class,utils,class,package,as,resource,path,clazz,slash,path,else,converted,paths,i,string,utils,clean,path,path,return,converted,paths
TestContextResourceUtils -> public static String[] convertToClasspathResourcePaths(Class<?> clazz, String... paths);1435085100;Convert the supplied paths to classpath resource paths.__<p>For each of the supplied paths:_<ul>_<li>A plain path &mdash_ for example, {@code "context.xml"} &mdash_ will_be treated as a classpath resource that is relative to the package in_which the specified class is defined._<li>A path starting with a slash will be treated as an absolute path_within the classpath, for example: {@code "/org/example/schema.sql"}._<li>A path which is prefixed with a URL protocol (e.g.,_{@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link ResourceUtils#FILE_URL_PREFIX file:}, {@code http:}, etc.) will be_{@link StringUtils#cleanPath cleaned} but otherwise unmodified.__@param clazz the class with which the paths are associated_@param paths the paths to be converted_@return a new array of converted resource paths_@see #convertToResources;public static String[] convertToClasspathResourcePaths(Class<?> clazz, String... paths) {_		String[] convertedPaths = new String[paths.length]__		for (int i = 0_ i < paths.length_ i++) {_			String path = paths[i]__			if (path.startsWith(SLASH)) {_				convertedPaths[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path__			}_			else if (!ResourcePatternUtils.isUrl(path)) {_				convertedPaths[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH_						+ StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path)__			}_			else {_				convertedPaths[i] = StringUtils.cleanPath(path)__			}_		}_		return convertedPaths__	};convert,the,supplied,paths,to,classpath,resource,paths,p,for,each,of,the,supplied,paths,ul,li,a,plain,path,mdash,for,example,code,context,xml,mdash,will,be,treated,as,a,classpath,resource,that,is,relative,to,the,package,in,which,the,specified,class,is,defined,li,a,path,starting,with,a,slash,will,be,treated,as,an,absolute,path,within,the,classpath,for,example,code,org,example,schema,sql,li,a,path,which,is,prefixed,with,a,url,protocol,e,g,link,resource,utils,classpath,link,resource,utils,file,code,http,etc,will,be,link,string,utils,clean,path,cleaned,but,otherwise,unmodified,param,clazz,the,class,with,which,the,paths,are,associated,param,paths,the,paths,to,be,converted,return,a,new,array,of,converted,resource,paths,see,convert,to,resources;public,static,string,convert,to,classpath,resource,paths,class,clazz,string,paths,string,converted,paths,new,string,paths,length,for,int,i,0,i,paths,length,i,string,path,paths,i,if,path,starts,with,slash,converted,paths,i,resource,utils,path,else,if,resource,pattern,utils,is,url,path,converted,paths,i,resource,utils,slash,string,utils,clean,path,class,utils,class,package,as,resource,path,clazz,slash,path,else,converted,paths,i,string,utils,clean,path,path,return,converted,paths
TestContextResourceUtils -> public static String[] convertToClasspathResourcePaths(Class<?> clazz, String... paths);1467730834;Convert the supplied paths to classpath resource paths.__<p>For each of the supplied paths:_<ul>_<li>A plain path &mdash_ for example, {@code "context.xml"} &mdash_ will_be treated as a classpath resource that is relative to the package in_which the specified class is defined._<li>A path starting with a slash will be treated as an absolute path_within the classpath, for example: {@code "/org/example/schema.sql"}._<li>A path which is prefixed with a URL protocol (e.g.,_{@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link ResourceUtils#FILE_URL_PREFIX file:}, {@code http:}, etc.) will be_{@link StringUtils#cleanPath cleaned} but otherwise unmodified.__@param clazz the class with which the paths are associated_@param paths the paths to be converted_@return a new array of converted resource paths_@see #convertToResources;public static String[] convertToClasspathResourcePaths(Class<?> clazz, String... paths) {_		String[] convertedPaths = new String[paths.length]__		for (int i = 0_ i < paths.length_ i++) {_			String path = paths[i]__			if (path.startsWith(SLASH)) {_				convertedPaths[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path__			}_			else if (!ResourcePatternUtils.isUrl(path)) {_				convertedPaths[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH_						+ StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path)__			}_			else {_				convertedPaths[i] = StringUtils.cleanPath(path)__			}_		}_		return convertedPaths__	};convert,the,supplied,paths,to,classpath,resource,paths,p,for,each,of,the,supplied,paths,ul,li,a,plain,path,mdash,for,example,code,context,xml,mdash,will,be,treated,as,a,classpath,resource,that,is,relative,to,the,package,in,which,the,specified,class,is,defined,li,a,path,starting,with,a,slash,will,be,treated,as,an,absolute,path,within,the,classpath,for,example,code,org,example,schema,sql,li,a,path,which,is,prefixed,with,a,url,protocol,e,g,link,resource,utils,classpath,link,resource,utils,file,code,http,etc,will,be,link,string,utils,clean,path,cleaned,but,otherwise,unmodified,param,clazz,the,class,with,which,the,paths,are,associated,param,paths,the,paths,to,be,converted,return,a,new,array,of,converted,resource,paths,see,convert,to,resources;public,static,string,convert,to,classpath,resource,paths,class,clazz,string,paths,string,converted,paths,new,string,paths,length,for,int,i,0,i,paths,length,i,string,path,paths,i,if,path,starts,with,slash,converted,paths,i,resource,utils,path,else,if,resource,pattern,utils,is,url,path,converted,paths,i,resource,utils,slash,string,utils,clean,path,class,utils,class,package,as,resource,path,clazz,slash,path,else,converted,paths,i,string,utils,clean,path,path,return,converted,paths
TestContextResourceUtils -> public static String[] convertToClasspathResourcePaths(Class<?> clazz, String... paths);1467992320;Convert the supplied paths to classpath resource paths.__<p>For each of the supplied paths:_<ul>_<li>A plain path &mdash_ for example, {@code "context.xml"} &mdash_ will_be treated as a classpath resource that is relative to the package in_which the specified class is defined._<li>A path starting with a slash will be treated as an absolute path_within the classpath, for example: {@code "/org/example/schema.sql"}._<li>A path which is prefixed with a URL protocol (e.g.,_{@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link ResourceUtils#FILE_URL_PREFIX file:}, {@code http:}, etc.) will be_{@link StringUtils#cleanPath cleaned} but otherwise unmodified.__@param clazz the class with which the paths are associated_@param paths the paths to be converted_@return a new array of converted resource paths_@see #convertToResources;public static String[] convertToClasspathResourcePaths(Class<?> clazz, String... paths) {_		String[] convertedPaths = new String[paths.length]__		for (int i = 0_ i < paths.length_ i++) {_			String path = paths[i]__			if (path.startsWith(SLASH)) {_				convertedPaths[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path__			}_			else if (!ResourcePatternUtils.isUrl(path)) {_				convertedPaths[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH_						+ StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path)__			}_			else {_				convertedPaths[i] = StringUtils.cleanPath(path)__			}_		}_		return convertedPaths__	};convert,the,supplied,paths,to,classpath,resource,paths,p,for,each,of,the,supplied,paths,ul,li,a,plain,path,mdash,for,example,code,context,xml,mdash,will,be,treated,as,a,classpath,resource,that,is,relative,to,the,package,in,which,the,specified,class,is,defined,li,a,path,starting,with,a,slash,will,be,treated,as,an,absolute,path,within,the,classpath,for,example,code,org,example,schema,sql,li,a,path,which,is,prefixed,with,a,url,protocol,e,g,link,resource,utils,classpath,link,resource,utils,file,code,http,etc,will,be,link,string,utils,clean,path,cleaned,but,otherwise,unmodified,param,clazz,the,class,with,which,the,paths,are,associated,param,paths,the,paths,to,be,converted,return,a,new,array,of,converted,resource,paths,see,convert,to,resources;public,static,string,convert,to,classpath,resource,paths,class,clazz,string,paths,string,converted,paths,new,string,paths,length,for,int,i,0,i,paths,length,i,string,path,paths,i,if,path,starts,with,slash,converted,paths,i,resource,utils,path,else,if,resource,pattern,utils,is,url,path,converted,paths,i,resource,utils,slash,string,utils,clean,path,class,utils,class,package,as,resource,path,clazz,slash,path,else,converted,paths,i,string,utils,clean,path,path,return,converted,paths
TestContextResourceUtils -> public static String[] convertToClasspathResourcePaths(Class<?> clazz, String... paths);1496955179;Convert the supplied paths to classpath resource paths.__<p>For each of the supplied paths:_<ul>_<li>A plain path &mdash_ for example, {@code "context.xml"} &mdash_ will_be treated as a classpath resource that is relative to the package in_which the specified class is defined._<li>A path starting with a slash will be treated as an absolute path_within the classpath, for example: {@code "/org/example/schema.sql"}._<li>A path which is prefixed with a URL protocol (e.g.,_{@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link ResourceUtils#FILE_URL_PREFIX file:}, {@code http:}, etc.) will be_{@link StringUtils#cleanPath cleaned} but otherwise unmodified._@param clazz the class with which the paths are associated_@param paths the paths to be converted_@return a new array of converted resource paths_@see #convertToResources;public static String[] convertToClasspathResourcePaths(Class<?> clazz, String... paths) {_		String[] convertedPaths = new String[paths.length]__		for (int i = 0_ i < paths.length_ i++) {_			String path = paths[i]__			if (path.startsWith(SLASH)) {_				convertedPaths[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path__			}_			else if (!ResourcePatternUtils.isUrl(path)) {_				convertedPaths[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH +_						StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path)__			}_			else {_				convertedPaths[i] = StringUtils.cleanPath(path)__			}_		}_		return convertedPaths__	};convert,the,supplied,paths,to,classpath,resource,paths,p,for,each,of,the,supplied,paths,ul,li,a,plain,path,mdash,for,example,code,context,xml,mdash,will,be,treated,as,a,classpath,resource,that,is,relative,to,the,package,in,which,the,specified,class,is,defined,li,a,path,starting,with,a,slash,will,be,treated,as,an,absolute,path,within,the,classpath,for,example,code,org,example,schema,sql,li,a,path,which,is,prefixed,with,a,url,protocol,e,g,link,resource,utils,classpath,link,resource,utils,file,code,http,etc,will,be,link,string,utils,clean,path,cleaned,but,otherwise,unmodified,param,clazz,the,class,with,which,the,paths,are,associated,param,paths,the,paths,to,be,converted,return,a,new,array,of,converted,resource,paths,see,convert,to,resources;public,static,string,convert,to,classpath,resource,paths,class,clazz,string,paths,string,converted,paths,new,string,paths,length,for,int,i,0,i,paths,length,i,string,path,paths,i,if,path,starts,with,slash,converted,paths,i,resource,utils,path,else,if,resource,pattern,utils,is,url,path,converted,paths,i,resource,utils,slash,string,utils,clean,path,class,utils,class,package,as,resource,path,clazz,slash,path,else,converted,paths,i,string,utils,clean,path,path,return,converted,paths
TestContextResourceUtils -> public static String[] convertToClasspathResourcePaths(Class<?> clazz, String... paths);1530174524;Convert the supplied paths to classpath resource paths.__<p>For each of the supplied paths:_<ul>_<li>A plain path &mdash_ for example, {@code "context.xml"} &mdash_ will_be treated as a classpath resource that is relative to the package in_which the specified class is defined._<li>A path starting with a slash will be treated as an absolute path_within the classpath, for example: {@code "/org/example/schema.sql"}._<li>A path which is prefixed with a URL protocol (e.g.,_{@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},_{@link ResourceUtils#FILE_URL_PREFIX file:}, {@code http:}, etc.) will be_{@link StringUtils#cleanPath cleaned} but otherwise unmodified._</ul>_@param clazz the class with which the paths are associated_@param paths the paths to be converted_@return a new array of converted resource paths_@see #convertToResources;public static String[] convertToClasspathResourcePaths(Class<?> clazz, String... paths) {_		String[] convertedPaths = new String[paths.length]__		for (int i = 0_ i < paths.length_ i++) {_			String path = paths[i]__			if (path.startsWith(SLASH)) {_				convertedPaths[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path__			}_			else if (!ResourcePatternUtils.isUrl(path)) {_				convertedPaths[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH +_						StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path)__			}_			else {_				convertedPaths[i] = StringUtils.cleanPath(path)__			}_		}_		return convertedPaths__	};convert,the,supplied,paths,to,classpath,resource,paths,p,for,each,of,the,supplied,paths,ul,li,a,plain,path,mdash,for,example,code,context,xml,mdash,will,be,treated,as,a,classpath,resource,that,is,relative,to,the,package,in,which,the,specified,class,is,defined,li,a,path,starting,with,a,slash,will,be,treated,as,an,absolute,path,within,the,classpath,for,example,code,org,example,schema,sql,li,a,path,which,is,prefixed,with,a,url,protocol,e,g,link,resource,utils,classpath,link,resource,utils,file,code,http,etc,will,be,link,string,utils,clean,path,cleaned,but,otherwise,unmodified,ul,param,clazz,the,class,with,which,the,paths,are,associated,param,paths,the,paths,to,be,converted,return,a,new,array,of,converted,resource,paths,see,convert,to,resources;public,static,string,convert,to,classpath,resource,paths,class,clazz,string,paths,string,converted,paths,new,string,paths,length,for,int,i,0,i,paths,length,i,string,path,paths,i,if,path,starts,with,slash,converted,paths,i,resource,utils,path,else,if,resource,pattern,utils,is,url,path,converted,paths,i,resource,utils,slash,string,utils,clean,path,class,utils,class,package,as,resource,path,clazz,slash,path,else,converted,paths,i,string,utils,clean,path,path,return,converted,paths
TestContextResourceUtils -> public static List<Resource> convertToResourceList(ResourceLoader resourceLoader, String... paths);1435085100;Convert the supplied paths to a list of {@link Resource} handles using_the given {@link ResourceLoader}.__@param resourceLoader the {@code ResourceLoader} to use to convert the paths_@param paths the paths to be converted_@return a new list of resources_@since 4.2_@see #convertToResources(ResourceLoader, String...)_@see #convertToClasspathResourcePaths;public static List<Resource> convertToResourceList(ResourceLoader resourceLoader, String... paths) {_		List<Resource> list = new ArrayList<Resource>()__		for (String path : paths) {_			list.add(resourceLoader.getResource(path))__		}_		return list__	};convert,the,supplied,paths,to,a,list,of,link,resource,handles,using,the,given,link,resource,loader,param,resource,loader,the,code,resource,loader,to,use,to,convert,the,paths,param,paths,the,paths,to,be,converted,return,a,new,list,of,resources,since,4,2,see,convert,to,resources,resource,loader,string,see,convert,to,classpath,resource,paths;public,static,list,resource,convert,to,resource,list,resource,loader,resource,loader,string,paths,list,resource,list,new,array,list,resource,for,string,path,paths,list,add,resource,loader,get,resource,path,return,list
TestContextResourceUtils -> public static List<Resource> convertToResourceList(ResourceLoader resourceLoader, String... paths);1467730834;Convert the supplied paths to a list of {@link Resource} handles using_the given {@link ResourceLoader}.__@param resourceLoader the {@code ResourceLoader} to use to convert the paths_@param paths the paths to be converted_@return a new list of resources_@since 4.2_@see #convertToResources(ResourceLoader, String...)_@see #convertToClasspathResourcePaths;public static List<Resource> convertToResourceList(ResourceLoader resourceLoader, String... paths) {_		List<Resource> list = new ArrayList<>()__		for (String path : paths) {_			list.add(resourceLoader.getResource(path))__		}_		return list__	};convert,the,supplied,paths,to,a,list,of,link,resource,handles,using,the,given,link,resource,loader,param,resource,loader,the,code,resource,loader,to,use,to,convert,the,paths,param,paths,the,paths,to,be,converted,return,a,new,list,of,resources,since,4,2,see,convert,to,resources,resource,loader,string,see,convert,to,classpath,resource,paths;public,static,list,resource,convert,to,resource,list,resource,loader,resource,loader,string,paths,list,resource,list,new,array,list,for,string,path,paths,list,add,resource,loader,get,resource,path,return,list
TestContextResourceUtils -> public static List<Resource> convertToResourceList(ResourceLoader resourceLoader, String... paths);1467992320;Convert the supplied paths to a list of {@link Resource} handles using_the given {@link ResourceLoader}.__@param resourceLoader the {@code ResourceLoader} to use to convert the paths_@param paths the paths to be converted_@return a new list of resources_@since 4.2_@see #convertToResources(ResourceLoader, String...)_@see #convertToClasspathResourcePaths;public static List<Resource> convertToResourceList(ResourceLoader resourceLoader, String... paths) {_		return stream(resourceLoader, paths).collect(Collectors.toList())__	};convert,the,supplied,paths,to,a,list,of,link,resource,handles,using,the,given,link,resource,loader,param,resource,loader,the,code,resource,loader,to,use,to,convert,the,paths,param,paths,the,paths,to,be,converted,return,a,new,list,of,resources,since,4,2,see,convert,to,resources,resource,loader,string,see,convert,to,classpath,resource,paths;public,static,list,resource,convert,to,resource,list,resource,loader,resource,loader,string,paths,return,stream,resource,loader,paths,collect,collectors,to,list
TestContextResourceUtils -> public static List<Resource> convertToResourceList(ResourceLoader resourceLoader, String... paths);1496955179;Convert the supplied paths to a list of {@link Resource} handles using_the given {@link ResourceLoader}._@param resourceLoader the {@code ResourceLoader} to use to convert the paths_@param paths the paths to be converted_@return a new list of resources_@since 4.2_@see #convertToResources(ResourceLoader, String...)_@see #convertToClasspathResourcePaths;public static List<Resource> convertToResourceList(ResourceLoader resourceLoader, String... paths) {_		return stream(resourceLoader, paths).collect(Collectors.toList())__	};convert,the,supplied,paths,to,a,list,of,link,resource,handles,using,the,given,link,resource,loader,param,resource,loader,the,code,resource,loader,to,use,to,convert,the,paths,param,paths,the,paths,to,be,converted,return,a,new,list,of,resources,since,4,2,see,convert,to,resources,resource,loader,string,see,convert,to,classpath,resource,paths;public,static,list,resource,convert,to,resource,list,resource,loader,resource,loader,string,paths,return,stream,resource,loader,paths,collect,collectors,to,list
TestContextResourceUtils -> public static List<Resource> convertToResourceList(ResourceLoader resourceLoader, String... paths);1530174524;Convert the supplied paths to a list of {@link Resource} handles using_the given {@link ResourceLoader}._@param resourceLoader the {@code ResourceLoader} to use to convert the paths_@param paths the paths to be converted_@return a new list of resources_@since 4.2_@see #convertToResources(ResourceLoader, String...)_@see #convertToClasspathResourcePaths;public static List<Resource> convertToResourceList(ResourceLoader resourceLoader, String... paths) {_		return stream(resourceLoader, paths).collect(Collectors.toList())__	};convert,the,supplied,paths,to,a,list,of,link,resource,handles,using,the,given,link,resource,loader,param,resource,loader,the,code,resource,loader,to,use,to,convert,the,paths,param,paths,the,paths,to,be,converted,return,a,new,list,of,resources,since,4,2,see,convert,to,resources,resource,loader,string,see,convert,to,classpath,resource,paths;public,static,list,resource,convert,to,resource,list,resource,loader,resource,loader,string,paths,return,stream,resource,loader,paths,collect,collectors,to,list
