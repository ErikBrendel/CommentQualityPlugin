commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;17;/**  * Convert the supplied paths to classpath resource paths.  *  * <p>For each of the supplied paths:  * <ul>  * <li>A plain path &mdash. for example, {@code "context.xml"} &mdash. will  * be treated as a classpath resource that is relative to the package in  * which the specified class is defined.  * <li>A path starting with a slash will be treated as an absolute path  * within the classpath, for example: {@code "/org/example/schema.sql"}.  * <li>A path which is prefixed with a URL protocol (e.g.,  * {@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},  * {@link ResourceUtils#FILE_URL_PREFIX file:}, {@code http:}, etc.) will be  * {@link StringUtils#cleanPath cleaned} but otherwise unmodified.  * </ul>  * @param clazz the class with which the paths are associated  * @param paths the paths to be converted  * @return a new array of converted resource paths  * @see #convertToResources  */ ;/**  * Convert the supplied paths to classpath resource paths.  *  * <p>For each of the supplied paths:  * <ul>  * <li>A plain path &mdash. for example, {@code "context.xml"} &mdash. will  * be treated as a classpath resource that is relative to the package in  * which the specified class is defined.  * <li>A path starting with a slash will be treated as an absolute path  * within the classpath, for example: {@code "/org/example/schema.sql"}.  * <li>A path which is prefixed with a URL protocol (e.g.,  * {@link ResourceUtils#CLASSPATH_URL_PREFIX classpath:},  * {@link ResourceUtils#FILE_URL_PREFIX file:}, {@code http:}, etc.) will be  * {@link StringUtils#cleanPath cleaned} but otherwise unmodified.  * </ul>  * @param clazz the class with which the paths are associated  * @param paths the paths to be converted  * @return a new array of converted resource paths  * @see #convertToResources  */ public static String[] convertToClasspathResourcePaths(Class<?> clazz, String... paths) {     String[] convertedPaths = new String[paths.length].     for (int i = 0. i < paths.length. i++) {         String path = paths[i].         if (path.startsWith(SLASH)) {             convertedPaths[i] = ResourceUtils.CLASSPATH_URL_PREFIX + path.         } else if (!ResourcePatternUtils.isUrl(path)) {             convertedPaths[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH + StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path).         } else {             convertedPaths[i] = StringUtils.cleanPath(path).         }     }     return convertedPaths. }
true;public,static;2;3;/**  * Convert the supplied paths to an array of {@link Resource} handles using  * the given {@link ResourceLoader}.  * @param resourceLoader the {@code ResourceLoader} to use to convert the paths  * @param paths the paths to be converted  * @return a new array of resources  * @see #convertToResourceList(ResourceLoader, String...)  * @see #convertToClasspathResourcePaths  */ ;/**  * Convert the supplied paths to an array of {@link Resource} handles using  * the given {@link ResourceLoader}.  * @param resourceLoader the {@code ResourceLoader} to use to convert the paths  * @param paths the paths to be converted  * @return a new array of resources  * @see #convertToResourceList(ResourceLoader, String...)  * @see #convertToClasspathResourcePaths  */ public static Resource[] convertToResources(ResourceLoader resourceLoader, String... paths) {     return stream(resourceLoader, paths).toArray(Resource[]::new). }
true;public,static;2;3;/**  * Convert the supplied paths to a list of {@link Resource} handles using  * the given {@link ResourceLoader}.  * @param resourceLoader the {@code ResourceLoader} to use to convert the paths  * @param paths the paths to be converted  * @return a new list of resources  * @since 4.2  * @see #convertToResources(ResourceLoader, String...)  * @see #convertToClasspathResourcePaths  */ ;/**  * Convert the supplied paths to a list of {@link Resource} handles using  * the given {@link ResourceLoader}.  * @param resourceLoader the {@code ResourceLoader} to use to convert the paths  * @param paths the paths to be converted  * @return a new list of resources  * @since 4.2  * @see #convertToResources(ResourceLoader, String...)  * @see #convertToClasspathResourcePaths  */ public static List<Resource> convertToResourceList(ResourceLoader resourceLoader, String... paths) {     return stream(resourceLoader, paths).collect(Collectors.toList()). }
false;private,static;2;3;;private static Stream<Resource> stream(ResourceLoader resourceLoader, String... paths) {     return Arrays.stream(paths).map(resourceLoader::getResource). }
