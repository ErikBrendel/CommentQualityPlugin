commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Add the "SameSite" attribute to the cookie.  * <p>This limits the scope of the cookie such that it will only be attached  * to same site requests if {@code "Strict"} or cross-site requests if  * {@code "Lax"}.  * @see <a href="https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis#section-4.1.2.7">RFC6265 bis</a>  */ ;/**  * Add the "SameSite" attribute to the cookie.  * <p>This limits the scope of the cookie such that it will only be attached  * to same site requests if {@code "Strict"} or cross-site requests if  * {@code "Lax"}.  * @see <a href="https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis#section-4.1.2.7">RFC6265 bis</a>  */ public void setSameSite(@Nullable String sameSite) {     this.sameSite = sameSite. }
true;public;0;4;/**  * Return the "SameSite" attribute, or {@code null} if not set.  */ ;/**  * Return the "SameSite" attribute, or {@code null} if not set.  */ @Nullable public String getSameSite() {     return this.sameSite. }
true;public,static;1;34;/**  * Factory method that parses the value of a "Set-Cookie" header.  * @param setCookieHeader the "Set-Cookie" value. never {@code null} or empty  * @return the created cookie  */ ;/**  * Factory method that parses the value of a "Set-Cookie" header.  * @param setCookieHeader the "Set-Cookie" value. never {@code null} or empty  * @return the created cookie  */ public static MockCookie parse(String setCookieHeader) {     Assert.notNull(setCookieHeader, "Set-Cookie header must not be null").     String[] cookieParts = setCookieHeader.split("\\s*=\\s*", 2).     Assert.isTrue(cookieParts.length == 2, () -> "Invalid Set-Cookie header '" + setCookieHeader + "'").     String name = cookieParts[0].     String[] valueAndAttributes = cookieParts[1].split("\\s*.\\s*", 2).     String value = valueAndAttributes[0].     String[] attributes = (valueAndAttributes.length > 1 ? valueAndAttributes[1].split("\\s*.\\s*") : new String[0]).     MockCookie cookie = new MockCookie(name, value).     for (String attribute : attributes) {         if (attribute.startsWith("Domain")) {             cookie.setDomain(extractAttributeValue(attribute, setCookieHeader)).         } else if (attribute.startsWith("Max-Age")) {             cookie.setMaxAge(Integer.parseInt(extractAttributeValue(attribute, setCookieHeader))).         } else if (attribute.startsWith("Path")) {             cookie.setPath(extractAttributeValue(attribute, setCookieHeader)).         } else if (attribute.startsWith("Secure")) {             cookie.setSecure(true).         } else if (attribute.startsWith("HttpOnly")) {             cookie.setHttpOnly(true).         } else if (attribute.startsWith("SameSite")) {             cookie.setSameSite(extractAttributeValue(attribute, setCookieHeader)).         }     }     return cookie. }
false;private,static;2;6;;private static String extractAttributeValue(String attribute, String header) {     String[] nameAndValue = attribute.split("=").     Assert.isTrue(nameAndValue.length == 2, () -> "No value in attribute '" + nameAndValue[0] + "' for Set-Cookie header '" + header + "'").     return nameAndValue[1]. }
