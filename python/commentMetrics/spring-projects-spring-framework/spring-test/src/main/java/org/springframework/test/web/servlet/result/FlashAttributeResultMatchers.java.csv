commented;modifiers;parameterAmount;loc;comment;code
true;public;2;4;/**  * Assert a flash attribute's value with the given Hamcrest {@link Matcher}.  */ ;/**  * Assert a flash attribute's value with the given Hamcrest {@link Matcher}.  */ @SuppressWarnings("unchecked") public <T> ResultMatcher attribute(final String name, final Matcher<T> matcher) {     return result -> assertThat("Flash attribute '" + name + "'", (T) result.getFlashMap().get(name), matcher). }
true;public;2;3;/**  * Assert a flash attribute's value.  */ ;/**  * Assert a flash attribute's value.  */ public <T> ResultMatcher attribute(final String name, final Object value) {     return result -> assertEquals("Flash attribute '" + name + "'", value, result.getFlashMap().get(name)). }
true;public;1;7;/**  * Assert the existence of the given flash attributes.  */ ;/**  * Assert the existence of the given flash attributes.  */ public <T> ResultMatcher attributeExists(final String... names) {     return result -> {         for (String name : names) {             assertTrue("Flash attribute '" + name + "' does not exist", result.getFlashMap().get(name) != null).         }     }. }
true;public;1;3;/**  * Assert the number of flash attributes.  */ ;/**  * Assert the number of flash attributes.  */ public <T> ResultMatcher attributeCount(final int count) {     return result -> assertEquals("FlashMap size must be " + count, count, result.getFlashMap().size()). }
