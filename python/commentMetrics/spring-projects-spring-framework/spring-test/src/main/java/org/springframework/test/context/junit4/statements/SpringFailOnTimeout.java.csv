commented;modifiers;parameterAmount;loc;comment;code
true;public;0;15;/**  * Evaluate the next {@link Statement statement} in the execution chain  * (typically an instance of {@link SpringRepeat}) and throw a  * {@link TimeoutException} if the next {@code statement} executes longer  * than the specified {@code timeout}.  */ ;/**  * Evaluate the next {@link Statement statement} in the execution chain  * (typically an instance of {@link SpringRepeat}) and throw a  * {@link TimeoutException} if the next {@code statement} executes longer  * than the specified {@code timeout}.  */ @Override public void evaluate() throws Throwable {     if (this.timeout == 0) {         this.next.evaluate().     } else {         long startTime = System.currentTimeMillis().         this.next.evaluate().         long elapsed = System.currentTimeMillis() - startTime.         if (elapsed > this.timeout) {             throw new TimeoutException(String.format("Test took %s ms. limit was %s ms.", elapsed, this.timeout)).         }     } }
