# id;timestamp;commentText;codeText;commentWords;codeWords
SpringRepeat -> @Override 	public void evaluate() throws Throwable;1328020251;Invokes the next {@link Statement statement} in the execution chain for_the specified repeat count.;@Override_	public void evaluate() throws Throwable {_		for (int i = 0_ i < this.repeat_ i++) {_			if (this.repeat > 1 && logger.isInfoEnabled()) {_				logger.info(String.format("Repetition %d of test %s#%s()", (i + 1),_					ClassUtils.getShortName(this.testMethod.getDeclaringClass()), this.testMethod.getName()))__			}_			this.next.evaluate()__		}_	};invokes,the,next,link,statement,statement,in,the,execution,chain,for,the,specified,repeat,count;override,public,void,evaluate,throws,throwable,for,int,i,0,i,this,repeat,i,if,this,repeat,1,logger,is,info,enabled,logger,info,string,format,repetition,d,of,test,s,s,i,1,class,utils,get,short,name,this,test,method,get,declaring,class,this,test,method,get,name,this,next,evaluate
SpringRepeat -> @Override 	public void evaluate() throws Throwable;1356735495;Invokes the next {@link Statement statement} in the execution chain for_the specified repeat count.;@Override_	public void evaluate() throws Throwable {_		for (int i = 0_ i < this.repeat_ i++) {_			if (this.repeat > 1 && logger.isInfoEnabled()) {_				logger.info(String.format("Repetition %d of test %s#%s()", (i + 1),_					ClassUtils.getShortName(this.testMethod.getDeclaringClass()), this.testMethod.getName()))__			}_			this.next.evaluate()__		}_	};invokes,the,next,link,statement,statement,in,the,execution,chain,for,the,specified,repeat,count;override,public,void,evaluate,throws,throwable,for,int,i,0,i,this,repeat,i,if,this,repeat,1,logger,is,info,enabled,logger,info,string,format,repetition,d,of,test,s,s,i,1,class,utils,get,short,name,this,test,method,get,declaring,class,this,test,method,get,name,this,next,evaluate
SpringRepeat -> @Override 	public void evaluate() throws Throwable;1403683825;Invokes the next {@link Statement statement} in the execution chain for_the specified repeat count.;@Override_	public void evaluate() throws Throwable {_		for (int i = 0_ i < this.repeat_ i++) {_			if (this.repeat > 1 && logger.isInfoEnabled()) {_				logger.info(String.format("Repetition %d of test %s#%s()", (i + 1),_					ClassUtils.getShortName(this.testMethod.getDeclaringClass()), this.testMethod.getName()))__			}_			this.next.evaluate()__		}_	};invokes,the,next,link,statement,statement,in,the,execution,chain,for,the,specified,repeat,count;override,public,void,evaluate,throws,throwable,for,int,i,0,i,this,repeat,i,if,this,repeat,1,logger,is,info,enabled,logger,info,string,format,repetition,d,of,test,s,s,i,1,class,utils,get,short,name,this,test,method,get,declaring,class,this,test,method,get,name,this,next,evaluate
SpringRepeat -> @Override 	public void evaluate() throws Throwable;1413848647;Invokes the next {@link Statement statement} in the execution chain for_the specified repeat count.;@Override_	public void evaluate() throws Throwable {_		for (int i = 0_ i < this.repeat_ i++) {_			if (this.repeat > 1 && logger.isInfoEnabled()) {_				logger.info(String.format("Repetition %d of test %s#%s()", (i + 1),_					ClassUtils.getShortName(this.testMethod.getDeclaringClass()), this.testMethod.getName()))__			}_			this.next.evaluate()__		}_	};invokes,the,next,link,statement,statement,in,the,execution,chain,for,the,specified,repeat,count;override,public,void,evaluate,throws,throwable,for,int,i,0,i,this,repeat,i,if,this,repeat,1,logger,is,info,enabled,logger,info,string,format,repetition,d,of,test,s,s,i,1,class,utils,get,short,name,this,test,method,get,declaring,class,this,test,method,get,name,this,next,evaluate
SpringRepeat -> @Override 	public void evaluate() throws Throwable;1431344362;Evaluate the next {@link Statement statement} in the execution chain_repeatedly, using the specified repeat count.;@Override_	public void evaluate() throws Throwable {_		for (int i = 0_ i < this.repeat_ i++) {_			if (this.repeat > 1 && logger.isInfoEnabled()) {_				logger.info(String.format("Repetition %d of test %s#%s()", (i + 1),_					ClassUtils.getShortName(this.testMethod.getDeclaringClass()), this.testMethod.getName()))__			}_			this.next.evaluate()__		}_	};evaluate,the,next,link,statement,statement,in,the,execution,chain,repeatedly,using,the,specified,repeat,count;override,public,void,evaluate,throws,throwable,for,int,i,0,i,this,repeat,i,if,this,repeat,1,logger,is,info,enabled,logger,info,string,format,repetition,d,of,test,s,s,i,1,class,utils,get,short,name,this,test,method,get,declaring,class,this,test,method,get,name,this,next,evaluate
SpringRepeat -> @Override 	public void evaluate() throws Throwable;1431894269;Evaluate the next {@link Statement statement} in the execution chain_repeatedly, using the specified repeat count.;@Override_	public void evaluate() throws Throwable {_		for (int i = 0_ i < this.repeat_ i++) {_			if (this.repeat > 1 && logger.isInfoEnabled()) {_				logger.info(String.format("Repetition %d of test %s#%s()", (i + 1),_					this.testMethod.getDeclaringClass().getSimpleName(), this.testMethod.getName()))__			}_			this.next.evaluate()__		}_	};evaluate,the,next,link,statement,statement,in,the,execution,chain,repeatedly,using,the,specified,repeat,count;override,public,void,evaluate,throws,throwable,for,int,i,0,i,this,repeat,i,if,this,repeat,1,logger,is,info,enabled,logger,info,string,format,repetition,d,of,test,s,s,i,1,this,test,method,get,declaring,class,get,simple,name,this,test,method,get,name,this,next,evaluate
SpringRepeat -> @Override 	public void evaluate() throws Throwable;1443471070;Evaluate the next {@link Statement statement} in the execution chain_repeatedly, using the specified repeat count.;@Override_	public void evaluate() throws Throwable {_		for (int i = 0_ i < this.repeat_ i++) {_			if (this.repeat > 1 && logger.isInfoEnabled()) {_				logger.info(String.format("Repetition %d of test %s#%s()", (i + 1),_						this.testMethod.getDeclaringClass().getSimpleName(), this.testMethod.getName()))__			}_			this.next.evaluate()__		}_	};evaluate,the,next,link,statement,statement,in,the,execution,chain,repeatedly,using,the,specified,repeat,count;override,public,void,evaluate,throws,throwable,for,int,i,0,i,this,repeat,i,if,this,repeat,1,logger,is,info,enabled,logger,info,string,format,repetition,d,of,test,s,s,i,1,this,test,method,get,declaring,class,get,simple,name,this,test,method,get,name,this,next,evaluate
SpringRepeat -> public SpringRepeat(Statement next, Method testMethod);1431894269;Construct a new {@code SpringRepeat} statement for the supplied_{@code testMethod}, retrieving the configured repeat count from the_{@code @Repeat} annotation on the supplied method.__@param next the next {@code Statement} in the execution chain_@param testMethod the current test method_@see TestAnnotationUtils#getRepeatCount(Method);public SpringRepeat(Statement next, Method testMethod) {_		this(next, testMethod, TestAnnotationUtils.getRepeatCount(testMethod))__	};construct,a,new,code,spring,repeat,statement,for,the,supplied,code,test,method,retrieving,the,configured,repeat,count,from,the,code,repeat,annotation,on,the,supplied,method,param,next,the,next,code,statement,in,the,execution,chain,param,test,method,the,current,test,method,see,test,annotation,utils,get,repeat,count,method;public,spring,repeat,statement,next,method,test,method,this,next,test,method,test,annotation,utils,get,repeat,count,test,method
SpringRepeat -> public SpringRepeat(Statement next, Method testMethod);1443471070;Construct a new {@code SpringRepeat} statement for the supplied_{@code testMethod}, retrieving the configured repeat count from the_{@code @Repeat} annotation on the supplied method._@param next the next {@code Statement} in the execution chain_@param testMethod the current test method_@see TestAnnotationUtils#getRepeatCount(Method);public SpringRepeat(Statement next, Method testMethod) {_		this(next, testMethod, TestAnnotationUtils.getRepeatCount(testMethod))__	};construct,a,new,code,spring,repeat,statement,for,the,supplied,code,test,method,retrieving,the,configured,repeat,count,from,the,code,repeat,annotation,on,the,supplied,method,param,next,the,next,code,statement,in,the,execution,chain,param,test,method,the,current,test,method,see,test,annotation,utils,get,repeat,count,method;public,spring,repeat,statement,next,method,test,method,this,next,test,method,test,annotation,utils,get,repeat,count,test,method
SpringRepeat -> public SpringRepeat(Statement next, Method testMethod, int repeat);1328020251;Constructs a new <code>SpringRepeat</code> statement.__@param next the next <code>Statement</code> in the execution chain_@param testMethod the current test method_@param repeat the configured repeat count for the current test method_@see Repeat#value();public SpringRepeat(Statement next, Method testMethod, int repeat) {_		this.next = next__		this.testMethod = testMethod__		this.repeat = Math.max(1, repeat)__	};constructs,a,new,code,spring,repeat,code,statement,param,next,the,next,code,statement,code,in,the,execution,chain,param,test,method,the,current,test,method,param,repeat,the,configured,repeat,count,for,the,current,test,method,see,repeat,value;public,spring,repeat,statement,next,method,test,method,int,repeat,this,next,next,this,test,method,test,method,this,repeat,math,max,1,repeat
SpringRepeat -> public SpringRepeat(Statement next, Method testMethod, int repeat);1356735495;Constructs a new {@code SpringRepeat} statement.__@param next the next {@code Statement} in the execution chain_@param testMethod the current test method_@param repeat the configured repeat count for the current test method_@see Repeat#value();public SpringRepeat(Statement next, Method testMethod, int repeat) {_		this.next = next__		this.testMethod = testMethod__		this.repeat = Math.max(1, repeat)__	};constructs,a,new,code,spring,repeat,statement,param,next,the,next,code,statement,in,the,execution,chain,param,test,method,the,current,test,method,param,repeat,the,configured,repeat,count,for,the,current,test,method,see,repeat,value;public,spring,repeat,statement,next,method,test,method,int,repeat,this,next,next,this,test,method,test,method,this,repeat,math,max,1,repeat
SpringRepeat -> public SpringRepeat(Statement next, Method testMethod, int repeat);1403683825;Constructs a new {@code SpringRepeat} statement.__@param next the next {@code Statement} in the execution chain_@param testMethod the current test method_@param repeat the configured repeat count for the current test method_@see Repeat#value();public SpringRepeat(Statement next, Method testMethod, int repeat) {_		this.next = next__		this.testMethod = testMethod__		this.repeat = Math.max(1, repeat)__	};constructs,a,new,code,spring,repeat,statement,param,next,the,next,code,statement,in,the,execution,chain,param,test,method,the,current,test,method,param,repeat,the,configured,repeat,count,for,the,current,test,method,see,repeat,value;public,spring,repeat,statement,next,method,test,method,int,repeat,this,next,next,this,test,method,test,method,this,repeat,math,max,1,repeat
SpringRepeat -> public SpringRepeat(Statement next, Method testMethod, int repeat);1413848647;Constructs a new {@code SpringRepeat} statement.__@param next the next {@code Statement} in the execution chain_@param testMethod the current test method_@param repeat the configured repeat count for the current test method_@see Repeat#value();public SpringRepeat(Statement next, Method testMethod, int repeat) {_		this.next = next__		this.testMethod = testMethod__		this.repeat = Math.max(1, repeat)__	};constructs,a,new,code,spring,repeat,statement,param,next,the,next,code,statement,in,the,execution,chain,param,test,method,the,current,test,method,param,repeat,the,configured,repeat,count,for,the,current,test,method,see,repeat,value;public,spring,repeat,statement,next,method,test,method,int,repeat,this,next,next,this,test,method,test,method,this,repeat,math,max,1,repeat
SpringRepeat -> public SpringRepeat(Statement next, Method testMethod, int repeat);1431344362;Construct a new {@code SpringRepeat} statement.__@param next the next {@code Statement} in the execution chain_@param testMethod the current test method_@param repeat the configured repeat count for the current test method_@see Repeat#value();public SpringRepeat(Statement next, Method testMethod, int repeat) {_		this.next = next__		this.testMethod = testMethod__		this.repeat = Math.max(1, repeat)__	};construct,a,new,code,spring,repeat,statement,param,next,the,next,code,statement,in,the,execution,chain,param,test,method,the,current,test,method,param,repeat,the,configured,repeat,count,for,the,current,test,method,see,repeat,value;public,spring,repeat,statement,next,method,test,method,int,repeat,this,next,next,this,test,method,test,method,this,repeat,math,max,1,repeat
SpringRepeat -> public SpringRepeat(Statement next, Method testMethod, int repeat);1431894269;Construct a new {@code SpringRepeat} statement for the supplied_{@code testMethod} and {@code repeat} count.__@param next the next {@code Statement} in the execution chain_@param testMethod the current test method_@param repeat the configured repeat count for the current test method;public SpringRepeat(Statement next, Method testMethod, int repeat) {_		this.next = next__		this.testMethod = testMethod__		this.repeat = Math.max(1, repeat)__	};construct,a,new,code,spring,repeat,statement,for,the,supplied,code,test,method,and,code,repeat,count,param,next,the,next,code,statement,in,the,execution,chain,param,test,method,the,current,test,method,param,repeat,the,configured,repeat,count,for,the,current,test,method;public,spring,repeat,statement,next,method,test,method,int,repeat,this,next,next,this,test,method,test,method,this,repeat,math,max,1,repeat
SpringRepeat -> public SpringRepeat(Statement next, Method testMethod, int repeat);1443471070;Construct a new {@code SpringRepeat} statement for the supplied_{@code testMethod} and {@code repeat} count._@param next the next {@code Statement} in the execution chain_@param testMethod the current test method_@param repeat the configured repeat count for the current test method;public SpringRepeat(Statement next, Method testMethod, int repeat) {_		this.next = next__		this.testMethod = testMethod__		this.repeat = Math.max(1, repeat)__	};construct,a,new,code,spring,repeat,statement,for,the,supplied,code,test,method,and,code,repeat,count,param,next,the,next,code,statement,in,the,execution,chain,param,test,method,the,current,test,method,param,repeat,the,configured,repeat,count,for,the,current,test,method;public,spring,repeat,statement,next,method,test,method,int,repeat,this,next,next,this,test,method,test,method,this,repeat,math,max,1,repeat
