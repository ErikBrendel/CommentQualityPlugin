# id;timestamp;commentText;codeText;commentWords;codeWords
ContentRequestMatchers -> public RequestMatcher json(final String expectedJsonContent);1520940425;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict array_ordering)._<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert<a/> library._@param expectedJsonContent the expected JSON content_@since 5.0.5;public RequestMatcher json(final String expectedJsonContent) {_		return json(expectedJsonContent, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,expected,json,content,the,expected,json,content,since,5,0,5;public,request,matcher,json,final,string,expected,json,content,return,json,expected,json,content,false
ContentRequestMatchers -> public RequestMatcher json(final String expectedJsonContent);1521645162;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict array_ordering)._<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert<a/> library._@param expectedJsonContent the expected JSON content_@since 5.0.5;public RequestMatcher json(final String expectedJsonContent) {_		return json(expectedJsonContent, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,expected,json,content,the,expected,json,content,since,5,0,5;public,request,matcher,json,final,string,expected,json,content,return,json,expected,json,content,false
ContentRequestMatchers -> public RequestMatcher json(final String expectedJsonContent);1530174524;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict array_ordering)._<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert</a> library._@param expectedJsonContent the expected JSON content_@since 5.0.5;public RequestMatcher json(final String expectedJsonContent) {_		return json(expectedJsonContent, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,expected,json,content,the,expected,json,content,since,5,0,5;public,request,matcher,json,final,string,expected,json,content,return,json,expected,json,content,false
ContentRequestMatchers -> public RequestMatcher json(final String expectedJsonContent);1530174524;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict array_ordering)._<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert</a> library._@param expectedJsonContent the expected JSON content_@since 5.0.5;public RequestMatcher json(final String expectedJsonContent) {_		return json(expectedJsonContent, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,expected,json,content,the,expected,json,content,since,5,0,5;public,request,matcher,json,final,string,expected,json,content,return,json,expected,json,content,false
ContentRequestMatchers -> public RequestMatcher json(final String expectedJsonContent);1530174524;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict array_ordering)._<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert</a> library._@param expectedJsonContent the expected JSON content_@since 5.0.5;public RequestMatcher json(final String expectedJsonContent) {_		return json(expectedJsonContent, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,expected,json,content,the,expected,json,content,since,5,0,5;public,request,matcher,json,final,string,expected,json,content,return,json,expected,json,content,false
ContentRequestMatchers -> public RequestMatcher json(final String expectedJsonContent);1542613849;Parse the expected and actual strings as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting with a lenient checking (extensible, and non-strict array_ordering)._<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert</a> library._@param expectedJsonContent the expected JSON content_@since 5.0.5;public RequestMatcher json(final String expectedJsonContent) {_		return json(expectedJsonContent, false)__	};parse,the,expected,and,actual,strings,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,with,a,lenient,checking,extensible,and,non,strict,array,ordering,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,expected,json,content,the,expected,json,content,since,5,0,5;public,request,matcher,json,final,string,expected,json,content,return,json,expected,json,content,false
ContentRequestMatchers -> public RequestMatcher node(final Matcher<? super Node> matcher);1383669853;Parse the request content as {@link Node} and apply the given {@link Matcher}.;public RequestMatcher node(final Matcher<? super Node> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertNode(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,node,and,apply,the,given,link,matcher;public,request,matcher,node,final,matcher,super,node,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,node,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher node(final Matcher<? super Node> matcher);1413848647;Parse the request content as {@link Node} and apply the given {@link Matcher}.;public RequestMatcher node(final Matcher<? super Node> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertNode(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,node,and,apply,the,given,link,matcher;public,request,matcher,node,final,matcher,super,node,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,node,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher node(final Matcher<? super Node> matcher);1427238287;Parse the request content as {@link Node} and apply the given {@link Matcher}.;public RequestMatcher node(final Matcher<? super Node> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertNode(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,node,and,apply,the,given,link,matcher;public,request,matcher,node,final,matcher,super,node,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,node,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher node(final Matcher<? super Node> matcher);1453398153;Parse the request content as {@link Node} and apply the given {@link Matcher}.;public RequestMatcher node(final Matcher<? super Node> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertNode(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,node,and,apply,the,given,link,matcher;public,request,matcher,node,final,matcher,super,node,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,node,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher node(final Matcher<? super Node> matcher);1453413905;Parse the request content as {@link Node} and apply the given {@link Matcher}.;public RequestMatcher node(final Matcher<? super Node> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertNode(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,node,and,apply,the,given,link,matcher;public,request,matcher,node,final,matcher,super,node,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,node,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher node(final Matcher<? super Node> matcher);1464621363;Parse the request content as {@link Node} and apply the given {@link Matcher}.;public RequestMatcher node(final Matcher<? super Node> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertNode(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,node,and,apply,the,given,link,matcher;public,request,matcher,node,final,matcher,super,node,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,node,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher node(final Matcher<? super Node> matcher);1470739377;Parse the request content as {@link Node} and apply the given {@link Matcher}.;public RequestMatcher node(final Matcher<? super Node> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertNode(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,node,and,apply,the,given,link,matcher;public,request,matcher,node,final,matcher,super,node,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,node,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher node(final Matcher<? super Node> matcher);1472464380;Parse the request content as {@link Node} and apply the given {@link Matcher}.;public RequestMatcher node(final Matcher<? super Node> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertNode(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,node,and,apply,the,given,link,matcher;public,request,matcher,node,final,matcher,super,node,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,node,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher node(final Matcher<? super Node> matcher);1496955179;Parse the request content as {@link Node} and apply the given {@link Matcher}.;public RequestMatcher node(final Matcher<? super Node> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertNode(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,node,and,apply,the,given,link,matcher;public,request,matcher,node,final,matcher,super,node,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,node,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher node(final Matcher<? super Node> matcher);1497341397;Parse the request content as {@link Node} and apply the given {@link Matcher}.;public RequestMatcher node(final Matcher<? super Node> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertNode(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,node,and,apply,the,given,link,matcher;public,request,matcher,node,final,matcher,super,node,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,node,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher node(final Matcher<? super Node> matcher);1520940425;Parse the request content as {@link Node} and apply the given {@link Matcher}.;public RequestMatcher node(final Matcher<? super Node> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertNode(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,node,and,apply,the,given,link,matcher;public,request,matcher,node,final,matcher,super,node,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,node,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher node(final Matcher<? super Node> matcher);1521645162;Parse the request content as {@link Node} and apply the given {@link Matcher}.;public RequestMatcher node(final Matcher<? super Node> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertNode(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,node,and,apply,the,given,link,matcher;public,request,matcher,node,final,matcher,super,node,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,node,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher node(final Matcher<? super Node> matcher);1530174524;Parse the request content as {@link Node} and apply the given {@link Matcher}.;public RequestMatcher node(final Matcher<? super Node> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertNode(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,node,and,apply,the,given,link,matcher;public,request,matcher,node,final,matcher,super,node,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,node,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher node(final Matcher<? super Node> matcher);1530174524;Parse the request content as {@link Node} and apply the given {@link Matcher}.;public RequestMatcher node(final Matcher<? super Node> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertNode(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,node,and,apply,the,given,link,matcher;public,request,matcher,node,final,matcher,super,node,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,node,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher node(final Matcher<? super Node> matcher);1530174524;Parse the request content as {@link Node} and apply the given {@link Matcher}.;public RequestMatcher node(final Matcher<? super Node> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertNode(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,node,and,apply,the,given,link,matcher;public,request,matcher,node,final,matcher,super,node,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,node,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher node(final Matcher<? super Node> matcher);1542613849;Parse the request content as {@link Node} and apply the given {@link Matcher}.;public RequestMatcher node(final Matcher<? super Node> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertNode(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,node,and,apply,the,given,link,matcher;public,request,matcher,node,final,matcher,super,node,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,node,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher string(final Matcher<? super String> matcher);1383669853;Get the body of the request as a UTF-8 string and appply the given {@link Matcher}.;public RequestMatcher string(final Matcher<? super String> matcher) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertThat("Request content", mockRequest.getBodyAsString(), matcher)__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,appply,the,given,link,matcher;public,request,matcher,string,final,matcher,super,string,matcher,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,that,request,content,mock,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher string(final Matcher<? super String> matcher);1413848647;Get the body of the request as a UTF-8 string and appply the given {@link Matcher}.;public RequestMatcher string(final Matcher<? super String> matcher) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertThat("Request content", mockRequest.getBodyAsString(), matcher)__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,appply,the,given,link,matcher;public,request,matcher,string,final,matcher,super,string,matcher,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,that,request,content,mock,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher string(final Matcher<? super String> matcher);1427238287;Get the body of the request as a UTF-8 string and appply the given {@link Matcher}.;public RequestMatcher string(final Matcher<? super String> matcher) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertThat("Request content", mockRequest.getBodyAsString(), matcher)__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,appply,the,given,link,matcher;public,request,matcher,string,final,matcher,super,string,matcher,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,that,request,content,mock,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher string(final Matcher<? super String> matcher);1453398153;Get the body of the request as a UTF-8 string and appply the given {@link Matcher}.;public RequestMatcher string(final Matcher<? super String> matcher) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertThat("Request content", mockRequest.getBodyAsString(), matcher)__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,appply,the,given,link,matcher;public,request,matcher,string,final,matcher,super,string,matcher,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,that,request,content,mock,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher string(final Matcher<? super String> matcher);1453413905;Get the body of the request as a UTF-8 string and appply the given {@link Matcher}.;public RequestMatcher string(final Matcher<? super String> matcher) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertThat("Request content", mockRequest.getBodyAsString(), matcher)__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,appply,the,given,link,matcher;public,request,matcher,string,final,matcher,super,string,matcher,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,that,request,content,mock,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher string(final Matcher<? super String> matcher);1464621363;Get the body of the request as a UTF-8 string and appply the given {@link Matcher}.;public RequestMatcher string(final Matcher<? super String> matcher) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertThat("Request content", mockRequest.getBodyAsString(), matcher)__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,appply,the,given,link,matcher;public,request,matcher,string,final,matcher,super,string,matcher,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,that,request,content,mock,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher string(final Matcher<? super String> matcher);1470739377;Get the body of the request as a UTF-8 string and appply the given {@link Matcher}.;public RequestMatcher string(final Matcher<? super String> matcher) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertThat("Request content", mockRequest.getBodyAsString(), matcher)__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,appply,the,given,link,matcher;public,request,matcher,string,final,matcher,super,string,matcher,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,that,request,content,mock,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher string(final Matcher<? super String> matcher);1472464380;Get the body of the request as a UTF-8 string and appply the given {@link Matcher}.;public RequestMatcher string(final Matcher<? super String> matcher) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertThat("Request content", mockRequest.getBodyAsString(), matcher)__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,appply,the,given,link,matcher;public,request,matcher,string,final,matcher,super,string,matcher,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,that,request,content,mock,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher string(final Matcher<? super String> matcher);1496955179;Get the body of the request as a UTF-8 string and appply the given {@link Matcher}.;public RequestMatcher string(final Matcher<? super String> matcher) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertThat("Request content", mockRequest.getBodyAsString(), matcher)__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,appply,the,given,link,matcher;public,request,matcher,string,final,matcher,super,string,matcher,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,that,request,content,mock,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher string(final Matcher<? super String> matcher);1497341397;Get the body of the request as a UTF-8 string and appply the given {@link Matcher}.;public RequestMatcher string(final Matcher<? super String> matcher) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertThat("Request content", mockRequest.getBodyAsString(), matcher)__		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,appply,the,given,link,matcher;public,request,matcher,string,final,matcher,super,string,matcher,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,that,request,content,mock,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher string(final Matcher<? super String> matcher);1520940425;Get the body of the request as a UTF-8 string and appply the given {@link Matcher}.;public RequestMatcher string(final Matcher<? super String> matcher) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertThat("Request content", mockRequest.getBodyAsString(), matcher)__		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,appply,the,given,link,matcher;public,request,matcher,string,final,matcher,super,string,matcher,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,that,request,content,mock,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher string(final Matcher<? super String> matcher);1521645162;Get the body of the request as a UTF-8 string and appply the given {@link Matcher}.;public RequestMatcher string(final Matcher<? super String> matcher) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertThat("Request content", mockRequest.getBodyAsString(), matcher)__		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,appply,the,given,link,matcher;public,request,matcher,string,final,matcher,super,string,matcher,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,that,request,content,mock,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher string(final Matcher<? super String> matcher);1530174524;Get the body of the request as a UTF-8 string and appply the given {@link Matcher}.;public RequestMatcher string(final Matcher<? super String> matcher) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertThat("Request content", mockRequest.getBodyAsString(), matcher)__		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,appply,the,given,link,matcher;public,request,matcher,string,final,matcher,super,string,matcher,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,that,request,content,mock,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher string(final Matcher<? super String> matcher);1530174524;Get the body of the request as a UTF-8 string and appply the given {@link Matcher}.;public RequestMatcher string(final Matcher<? super String> matcher) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertThat("Request content", mockRequest.getBodyAsString(), matcher)__		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,appply,the,given,link,matcher;public,request,matcher,string,final,matcher,super,string,matcher,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,that,request,content,mock,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher string(final Matcher<? super String> matcher);1530174524;Get the body of the request as a UTF-8 string and appply the given {@link Matcher}.;public RequestMatcher string(final Matcher<? super String> matcher) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertThat("Request content", mockRequest.getBodyAsString(), matcher)__		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,appply,the,given,link,matcher;public,request,matcher,string,final,matcher,super,string,matcher,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,that,request,content,mock,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher string(final Matcher<? super String> matcher);1542613849;Get the body of the request as a UTF-8 string and apply the given {@link Matcher}.;public RequestMatcher string(final Matcher<? super String> matcher) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertThat("Request content", mockRequest.getBodyAsString(), matcher)__		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,apply,the,given,link,matcher;public,request,matcher,string,final,matcher,super,string,matcher,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,that,request,content,mock,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(String contentType);1383669853;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(String contentType);1413848647;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(String contentType);1427238287;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(String contentType);1453398153;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(String contentType);1453413905;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(String contentType);1464621363;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(String contentType);1470739377;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(String contentType);1472464380;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(String contentType);1496955179;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(String contentType);1497341397;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(String contentType);1520940425;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(String contentType);1521645162;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(String contentType);1530174524;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(String contentType);1530174524;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(String contentType);1530174524;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(String contentType);1542613849;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(String contentType) {_		return contentTypeCompatibleWith(MediaType.parseMediaType(contentType))__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,string,content,type,return,content,type,compatible,with,media,type,parse,media,type,content,type
ContentRequestMatchers -> public RequestMatcher contentType(String expectedContentType);1383669853;Assert the request content type as a String.;public RequestMatcher contentType(String expectedContentType) {_		return contentType(MediaType.parseMediaType(expectedContentType))__	};assert,the,request,content,type,as,a,string;public,request,matcher,content,type,string,expected,content,type,return,content,type,media,type,parse,media,type,expected,content,type
ContentRequestMatchers -> public RequestMatcher contentType(String expectedContentType);1413848647;Assert the request content type as a String.;public RequestMatcher contentType(String expectedContentType) {_		return contentType(MediaType.parseMediaType(expectedContentType))__	};assert,the,request,content,type,as,a,string;public,request,matcher,content,type,string,expected,content,type,return,content,type,media,type,parse,media,type,expected,content,type
ContentRequestMatchers -> public RequestMatcher contentType(String expectedContentType);1427238287;Assert the request content type as a String.;public RequestMatcher contentType(String expectedContentType) {_		return contentType(MediaType.parseMediaType(expectedContentType))__	};assert,the,request,content,type,as,a,string;public,request,matcher,content,type,string,expected,content,type,return,content,type,media,type,parse,media,type,expected,content,type
ContentRequestMatchers -> public RequestMatcher contentType(String expectedContentType);1453398153;Assert the request content type as a String.;public RequestMatcher contentType(String expectedContentType) {_		return contentType(MediaType.parseMediaType(expectedContentType))__	};assert,the,request,content,type,as,a,string;public,request,matcher,content,type,string,expected,content,type,return,content,type,media,type,parse,media,type,expected,content,type
ContentRequestMatchers -> public RequestMatcher contentType(String expectedContentType);1453413905;Assert the request content type as a String.;public RequestMatcher contentType(String expectedContentType) {_		return contentType(MediaType.parseMediaType(expectedContentType))__	};assert,the,request,content,type,as,a,string;public,request,matcher,content,type,string,expected,content,type,return,content,type,media,type,parse,media,type,expected,content,type
ContentRequestMatchers -> public RequestMatcher contentType(String expectedContentType);1464621363;Assert the request content type as a String.;public RequestMatcher contentType(String expectedContentType) {_		return contentType(MediaType.parseMediaType(expectedContentType))__	};assert,the,request,content,type,as,a,string;public,request,matcher,content,type,string,expected,content,type,return,content,type,media,type,parse,media,type,expected,content,type
ContentRequestMatchers -> public RequestMatcher contentType(String expectedContentType);1470739377;Assert the request content type as a String.;public RequestMatcher contentType(String expectedContentType) {_		return contentType(MediaType.parseMediaType(expectedContentType))__	};assert,the,request,content,type,as,a,string;public,request,matcher,content,type,string,expected,content,type,return,content,type,media,type,parse,media,type,expected,content,type
ContentRequestMatchers -> public RequestMatcher contentType(String expectedContentType);1472464380;Assert the request content type as a String.;public RequestMatcher contentType(String expectedContentType) {_		return contentType(MediaType.parseMediaType(expectedContentType))__	};assert,the,request,content,type,as,a,string;public,request,matcher,content,type,string,expected,content,type,return,content,type,media,type,parse,media,type,expected,content,type
ContentRequestMatchers -> public RequestMatcher contentType(String expectedContentType);1496955179;Assert the request content type as a String.;public RequestMatcher contentType(String expectedContentType) {_		return contentType(MediaType.parseMediaType(expectedContentType))__	};assert,the,request,content,type,as,a,string;public,request,matcher,content,type,string,expected,content,type,return,content,type,media,type,parse,media,type,expected,content,type
ContentRequestMatchers -> public RequestMatcher contentType(String expectedContentType);1497341397;Assert the request content type as a String.;public RequestMatcher contentType(String expectedContentType) {_		return contentType(MediaType.parseMediaType(expectedContentType))__	};assert,the,request,content,type,as,a,string;public,request,matcher,content,type,string,expected,content,type,return,content,type,media,type,parse,media,type,expected,content,type
ContentRequestMatchers -> public RequestMatcher contentType(String expectedContentType);1520940425;Assert the request content type as a String.;public RequestMatcher contentType(String expectedContentType) {_		return contentType(MediaType.parseMediaType(expectedContentType))__	};assert,the,request,content,type,as,a,string;public,request,matcher,content,type,string,expected,content,type,return,content,type,media,type,parse,media,type,expected,content,type
ContentRequestMatchers -> public RequestMatcher contentType(String expectedContentType);1521645162;Assert the request content type as a String.;public RequestMatcher contentType(String expectedContentType) {_		return contentType(MediaType.parseMediaType(expectedContentType))__	};assert,the,request,content,type,as,a,string;public,request,matcher,content,type,string,expected,content,type,return,content,type,media,type,parse,media,type,expected,content,type
ContentRequestMatchers -> public RequestMatcher contentType(String expectedContentType);1530174524;Assert the request content type as a String.;public RequestMatcher contentType(String expectedContentType) {_		return contentType(MediaType.parseMediaType(expectedContentType))__	};assert,the,request,content,type,as,a,string;public,request,matcher,content,type,string,expected,content,type,return,content,type,media,type,parse,media,type,expected,content,type
ContentRequestMatchers -> public RequestMatcher contentType(String expectedContentType);1530174524;Assert the request content type as a String.;public RequestMatcher contentType(String expectedContentType) {_		return contentType(MediaType.parseMediaType(expectedContentType))__	};assert,the,request,content,type,as,a,string;public,request,matcher,content,type,string,expected,content,type,return,content,type,media,type,parse,media,type,expected,content,type
ContentRequestMatchers -> public RequestMatcher contentType(String expectedContentType);1530174524;Assert the request content type as a String.;public RequestMatcher contentType(String expectedContentType) {_		return contentType(MediaType.parseMediaType(expectedContentType))__	};assert,the,request,content,type,as,a,string;public,request,matcher,content,type,string,expected,content,type,return,content,type,media,type,parse,media,type,expected,content,type
ContentRequestMatchers -> public RequestMatcher contentType(String expectedContentType);1542613849;Assert the request content type as a String.;public RequestMatcher contentType(String expectedContentType) {_		return contentType(MediaType.parseMediaType(expectedContentType))__	};assert,the,request,content,type,as,a,string;public,request,matcher,content,type,string,expected,content,type,return,content,type,media,type,parse,media,type,expected,content,type
ContentRequestMatchers -> protected ContentRequestMatchers();1383669853;Class constructor, not for direct instantiation._Use {@link MockRestRequestMatchers#content()}.;protected ContentRequestMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__	};class,constructor,not,for,direct,instantiation,use,link,mock,rest,request,matchers,content;protected,content,request,matchers,this,xml,helper,new,xml,expectations,helper
ContentRequestMatchers -> protected ContentRequestMatchers();1413848647;Class constructor, not for direct instantiation._Use {@link MockRestRequestMatchers#content()}.;protected ContentRequestMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__	};class,constructor,not,for,direct,instantiation,use,link,mock,rest,request,matchers,content;protected,content,request,matchers,this,xml,helper,new,xml,expectations,helper
ContentRequestMatchers -> protected ContentRequestMatchers();1427238287;Class constructor, not for direct instantiation._Use {@link MockRestRequestMatchers#content()}.;protected ContentRequestMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__	};class,constructor,not,for,direct,instantiation,use,link,mock,rest,request,matchers,content;protected,content,request,matchers,this,xml,helper,new,xml,expectations,helper
ContentRequestMatchers -> protected ContentRequestMatchers();1453398153;Class constructor, not for direct instantiation._Use {@link MockRestRequestMatchers#content()}.;protected ContentRequestMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__	};class,constructor,not,for,direct,instantiation,use,link,mock,rest,request,matchers,content;protected,content,request,matchers,this,xml,helper,new,xml,expectations,helper
ContentRequestMatchers -> protected ContentRequestMatchers();1453413905;Class constructor, not for direct instantiation._Use {@link MockRestRequestMatchers#content()}.;protected ContentRequestMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__	};class,constructor,not,for,direct,instantiation,use,link,mock,rest,request,matchers,content;protected,content,request,matchers,this,xml,helper,new,xml,expectations,helper
ContentRequestMatchers -> protected ContentRequestMatchers();1464621363;Class constructor, not for direct instantiation._Use {@link MockRestRequestMatchers#content()}.;protected ContentRequestMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__	};class,constructor,not,for,direct,instantiation,use,link,mock,rest,request,matchers,content;protected,content,request,matchers,this,xml,helper,new,xml,expectations,helper
ContentRequestMatchers -> protected ContentRequestMatchers();1470739377;Class constructor, not for direct instantiation._Use {@link MockRestRequestMatchers#content()}.;protected ContentRequestMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__	};class,constructor,not,for,direct,instantiation,use,link,mock,rest,request,matchers,content;protected,content,request,matchers,this,xml,helper,new,xml,expectations,helper
ContentRequestMatchers -> protected ContentRequestMatchers();1472464380;Class constructor, not for direct instantiation._Use {@link MockRestRequestMatchers#content()}.;protected ContentRequestMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__	};class,constructor,not,for,direct,instantiation,use,link,mock,rest,request,matchers,content;protected,content,request,matchers,this,xml,helper,new,xml,expectations,helper
ContentRequestMatchers -> protected ContentRequestMatchers();1496955179;Class constructor, not for direct instantiation._Use {@link MockRestRequestMatchers#content()}.;protected ContentRequestMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__	};class,constructor,not,for,direct,instantiation,use,link,mock,rest,request,matchers,content;protected,content,request,matchers,this,xml,helper,new,xml,expectations,helper
ContentRequestMatchers -> protected ContentRequestMatchers();1497341397;Class constructor, not for direct instantiation._Use {@link MockRestRequestMatchers#content()}.;protected ContentRequestMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__	};class,constructor,not,for,direct,instantiation,use,link,mock,rest,request,matchers,content;protected,content,request,matchers,this,xml,helper,new,xml,expectations,helper
ContentRequestMatchers -> protected ContentRequestMatchers();1520940425;Class constructor, not for direct instantiation._Use {@link MockRestRequestMatchers#content()}.;protected ContentRequestMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__		this.jsonHelper = new JsonExpectationsHelper()__	};class,constructor,not,for,direct,instantiation,use,link,mock,rest,request,matchers,content;protected,content,request,matchers,this,xml,helper,new,xml,expectations,helper,this,json,helper,new,json,expectations,helper
ContentRequestMatchers -> protected ContentRequestMatchers();1521645162;Class constructor, not for direct instantiation._Use {@link MockRestRequestMatchers#content()}.;protected ContentRequestMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__		this.jsonHelper = new JsonExpectationsHelper()__	};class,constructor,not,for,direct,instantiation,use,link,mock,rest,request,matchers,content;protected,content,request,matchers,this,xml,helper,new,xml,expectations,helper,this,json,helper,new,json,expectations,helper
ContentRequestMatchers -> protected ContentRequestMatchers();1530174524;Class constructor, not for direct instantiation._Use {@link MockRestRequestMatchers#content()}.;protected ContentRequestMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__		this.jsonHelper = new JsonExpectationsHelper()__	};class,constructor,not,for,direct,instantiation,use,link,mock,rest,request,matchers,content;protected,content,request,matchers,this,xml,helper,new,xml,expectations,helper,this,json,helper,new,json,expectations,helper
ContentRequestMatchers -> protected ContentRequestMatchers();1530174524;Class constructor, not for direct instantiation._Use {@link MockRestRequestMatchers#content()}.;protected ContentRequestMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__		this.jsonHelper = new JsonExpectationsHelper()__	};class,constructor,not,for,direct,instantiation,use,link,mock,rest,request,matchers,content;protected,content,request,matchers,this,xml,helper,new,xml,expectations,helper,this,json,helper,new,json,expectations,helper
ContentRequestMatchers -> protected ContentRequestMatchers();1530174524;Class constructor, not for direct instantiation._Use {@link MockRestRequestMatchers#content()}.;protected ContentRequestMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__		this.jsonHelper = new JsonExpectationsHelper()__	};class,constructor,not,for,direct,instantiation,use,link,mock,rest,request,matchers,content;protected,content,request,matchers,this,xml,helper,new,xml,expectations,helper,this,json,helper,new,json,expectations,helper
ContentRequestMatchers -> protected ContentRequestMatchers();1542613849;Class constructor, not for direct instantiation._Use {@link MockRestRequestMatchers#content()}.;protected ContentRequestMatchers() {_		this.xmlHelper = new XmlExpectationsHelper()__		this.jsonHelper = new JsonExpectationsHelper()__	};class,constructor,not,for,direct,instantiation,use,link,mock,rest,request,matchers,content;protected,content,request,matchers,this,xml,helper,new,xml,expectations,helper,this,json,helper,new,json,expectations,helper
ContentRequestMatchers -> public RequestMatcher source(final Matcher<? super Source> matcher);1383669853;Parse the request content as {@link DOMSource} and apply the given {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">http://code.google.com/p/xml-matchers/</a>;public RequestMatcher source(final Matcher<? super Source> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertSource(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,domsource,and,apply,the,given,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,http,code,google,com,p,xml,matchers,a;public,request,matcher,source,final,matcher,super,source,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,source,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher source(final Matcher<? super Source> matcher);1413848647;Parse the request content as {@link DOMSource} and apply the given {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">http://code.google.com/p/xml-matchers/</a>;public RequestMatcher source(final Matcher<? super Source> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertSource(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,domsource,and,apply,the,given,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,http,code,google,com,p,xml,matchers,a;public,request,matcher,source,final,matcher,super,source,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,source,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher source(final Matcher<? super Source> matcher);1427238287;Parse the request content as {@link DOMSource} and apply the given {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">http://code.google.com/p/xml-matchers/</a>;public RequestMatcher source(final Matcher<? super Source> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertSource(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,domsource,and,apply,the,given,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,http,code,google,com,p,xml,matchers,a;public,request,matcher,source,final,matcher,super,source,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,source,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher source(final Matcher<? super Source> matcher);1453398153;Parse the request content as {@link DOMSource} and apply the given {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">http://code.google.com/p/xml-matchers/</a>;public RequestMatcher source(final Matcher<? super Source> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertSource(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,domsource,and,apply,the,given,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,http,code,google,com,p,xml,matchers,a;public,request,matcher,source,final,matcher,super,source,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,source,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher source(final Matcher<? super Source> matcher);1453413905;Parse the request content as {@link DOMSource} and apply the given {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">http://code.google.com/p/xml-matchers/</a>;public RequestMatcher source(final Matcher<? super Source> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertSource(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,domsource,and,apply,the,given,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,http,code,google,com,p,xml,matchers,a;public,request,matcher,source,final,matcher,super,source,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,source,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher source(final Matcher<? super Source> matcher);1464621363;Parse the request content as {@link DOMSource} and apply the given {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">http://code.google.com/p/xml-matchers/</a>;public RequestMatcher source(final Matcher<? super Source> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertSource(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,domsource,and,apply,the,given,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,http,code,google,com,p,xml,matchers,a;public,request,matcher,source,final,matcher,super,source,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,source,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher source(final Matcher<? super Source> matcher);1470739377;Parse the request content as {@link DOMSource} and apply the given {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">http://code.google.com/p/xml-matchers/</a>;public RequestMatcher source(final Matcher<? super Source> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertSource(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,domsource,and,apply,the,given,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,http,code,google,com,p,xml,matchers,a;public,request,matcher,source,final,matcher,super,source,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,source,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher source(final Matcher<? super Source> matcher);1472464380;Parse the request content as {@link DOMSource} and apply the given {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">http://code.google.com/p/xml-matchers/</a>;public RequestMatcher source(final Matcher<? super Source> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertSource(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,domsource,and,apply,the,given,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,http,code,google,com,p,xml,matchers,a;public,request,matcher,source,final,matcher,super,source,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,source,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher source(final Matcher<? super Source> matcher);1496955179;Parse the request content as {@link DOMSource} and apply the given {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">http://code.google.com/p/xml-matchers/</a>;public RequestMatcher source(final Matcher<? super Source> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertSource(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,domsource,and,apply,the,given,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,http,code,google,com,p,xml,matchers,a;public,request,matcher,source,final,matcher,super,source,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,source,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher source(final Matcher<? super Source> matcher);1497341397;Parse the request content as {@link DOMSource} and apply the given {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">http://code.google.com/p/xml-matchers/</a>;public RequestMatcher source(final Matcher<? super Source> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertSource(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,domsource,and,apply,the,given,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,http,code,google,com,p,xml,matchers,a;public,request,matcher,source,final,matcher,super,source,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,source,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher source(final Matcher<? super Source> matcher);1520940425;Parse the request content as {@link DOMSource} and apply the given {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">http://code.google.com/p/xml-matchers/</a>;public RequestMatcher source(final Matcher<? super Source> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertSource(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,domsource,and,apply,the,given,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,http,code,google,com,p,xml,matchers,a;public,request,matcher,source,final,matcher,super,source,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,source,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher source(final Matcher<? super Source> matcher);1521645162;Parse the request content as {@link DOMSource} and apply the given {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">http://code.google.com/p/xml-matchers/</a>;public RequestMatcher source(final Matcher<? super Source> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertSource(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,domsource,and,apply,the,given,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,http,code,google,com,p,xml,matchers,a;public,request,matcher,source,final,matcher,super,source,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,source,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher source(final Matcher<? super Source> matcher);1530174524;Parse the request content as {@link DOMSource} and apply the given {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">http://code.google.com/p/xml-matchers/</a>;public RequestMatcher source(final Matcher<? super Source> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertSource(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,domsource,and,apply,the,given,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,http,code,google,com,p,xml,matchers,a;public,request,matcher,source,final,matcher,super,source,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,source,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher source(final Matcher<? super Source> matcher);1530174524;Parse the request content as {@link DOMSource} and apply the given {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">http://code.google.com/p/xml-matchers/</a>;public RequestMatcher source(final Matcher<? super Source> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertSource(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,domsource,and,apply,the,given,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,http,code,google,com,p,xml,matchers,a;public,request,matcher,source,final,matcher,super,source,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,source,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher source(final Matcher<? super Source> matcher);1530174524;Parse the request content as {@link DOMSource} and apply the given {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">http://code.google.com/p/xml-matchers/</a>;public RequestMatcher source(final Matcher<? super Source> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertSource(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,domsource,and,apply,the,given,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,http,code,google,com,p,xml,matchers,a;public,request,matcher,source,final,matcher,super,source,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,source,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher source(final Matcher<? super Source> matcher);1542613849;Parse the request content as {@link DOMSource} and apply the given {@link Matcher}._@see <a href="http://code.google.com/p/xml-matchers/">http://code.google.com/p/xml-matchers/</a>;public RequestMatcher source(final Matcher<? super Source> matcher) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertSource(request.getBodyAsString(), matcher)__			}_		}__	};parse,the,request,content,as,link,domsource,and,apply,the,given,link,matcher,see,a,href,http,code,google,com,p,xml,matchers,http,code,google,com,p,xml,matchers,a;public,request,matcher,source,final,matcher,super,source,matcher,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,source,request,get,body,as,string,matcher
ContentRequestMatchers -> public RequestMatcher contentType(final MediaType expectedContentType);1383669853;Assert the request content type as a {@link MediaType}.;public RequestMatcher contentType(final MediaType expectedContentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				assertEquals("Content type", expectedContentType, actualContentType)__			}_		}__	};assert,the,request,content,type,as,a,link,media,type;public,request,matcher,content,type,final,media,type,expected,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,equals,content,type,expected,content,type,actual,content,type
ContentRequestMatchers -> public RequestMatcher contentType(final MediaType expectedContentType);1413848647;Assert the request content type as a {@link MediaType}.;public RequestMatcher contentType(final MediaType expectedContentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				assertEquals("Content type", expectedContentType, actualContentType)__			}_		}__	};assert,the,request,content,type,as,a,link,media,type;public,request,matcher,content,type,final,media,type,expected,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,equals,content,type,expected,content,type,actual,content,type
ContentRequestMatchers -> public RequestMatcher contentType(final MediaType expectedContentType);1427238287;Assert the request content type as a {@link MediaType}.;public RequestMatcher contentType(final MediaType expectedContentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				assertEquals("Content type", expectedContentType, actualContentType)__			}_		}__	};assert,the,request,content,type,as,a,link,media,type;public,request,matcher,content,type,final,media,type,expected,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,equals,content,type,expected,content,type,actual,content,type
ContentRequestMatchers -> public RequestMatcher contentType(final MediaType expectedContentType);1453398153;Assert the request content type as a {@link MediaType}.;public RequestMatcher contentType(final MediaType expectedContentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				assertEquals("Content type", expectedContentType, actualContentType)__			}_		}__	};assert,the,request,content,type,as,a,link,media,type;public,request,matcher,content,type,final,media,type,expected,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,equals,content,type,expected,content,type,actual,content,type
ContentRequestMatchers -> public RequestMatcher contentType(final MediaType expectedContentType);1453413905;Assert the request content type as a {@link MediaType}.;public RequestMatcher contentType(final MediaType expectedContentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				assertEquals("Content type", expectedContentType, actualContentType)__			}_		}__	};assert,the,request,content,type,as,a,link,media,type;public,request,matcher,content,type,final,media,type,expected,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,equals,content,type,expected,content,type,actual,content,type
ContentRequestMatchers -> public RequestMatcher contentType(final MediaType expectedContentType);1464621363;Assert the request content type as a {@link MediaType}.;public RequestMatcher contentType(final MediaType expectedContentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				assertEquals("Content type", expectedContentType, actualContentType)__			}_		}__	};assert,the,request,content,type,as,a,link,media,type;public,request,matcher,content,type,final,media,type,expected,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,equals,content,type,expected,content,type,actual,content,type
ContentRequestMatchers -> public RequestMatcher contentType(final MediaType expectedContentType);1470739377;Assert the request content type as a {@link MediaType}.;public RequestMatcher contentType(final MediaType expectedContentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				assertEquals("Content type", expectedContentType, actualContentType)__			}_		}__	};assert,the,request,content,type,as,a,link,media,type;public,request,matcher,content,type,final,media,type,expected,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,equals,content,type,expected,content,type,actual,content,type
ContentRequestMatchers -> public RequestMatcher contentType(final MediaType expectedContentType);1472464380;Assert the request content type as a {@link MediaType}.;public RequestMatcher contentType(final MediaType expectedContentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				assertEquals("Content type", expectedContentType, actualContentType)__			}_		}__	};assert,the,request,content,type,as,a,link,media,type;public,request,matcher,content,type,final,media,type,expected,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,equals,content,type,expected,content,type,actual,content,type
ContentRequestMatchers -> public RequestMatcher contentType(final MediaType expectedContentType);1496955179;Assert the request content type as a {@link MediaType}.;public RequestMatcher contentType(final MediaType expectedContentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				assertEquals("Content type", expectedContentType, actualContentType)__			}_		}__	};assert,the,request,content,type,as,a,link,media,type;public,request,matcher,content,type,final,media,type,expected,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,equals,content,type,expected,content,type,actual,content,type
ContentRequestMatchers -> public RequestMatcher contentType(final MediaType expectedContentType);1497341397;Assert the request content type as a {@link MediaType}.;public RequestMatcher contentType(final MediaType expectedContentType) {_		return request -> {_			MediaType actualContentType = request.getHeaders().getContentType()__			assertTrue("Content type not set", actualContentType != null)__			assertEquals("Content type", expectedContentType, actualContentType)__		}__	};assert,the,request,content,type,as,a,link,media,type;public,request,matcher,content,type,final,media,type,expected,content,type,return,request,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,equals,content,type,expected,content,type,actual,content,type
ContentRequestMatchers -> public RequestMatcher contentType(final MediaType expectedContentType);1520940425;Assert the request content type as a {@link MediaType}.;public RequestMatcher contentType(final MediaType expectedContentType) {_		return request -> {_			MediaType actualContentType = request.getHeaders().getContentType()__			assertTrue("Content type not set", actualContentType != null)__			assertEquals("Content type", expectedContentType, actualContentType)__		}__	};assert,the,request,content,type,as,a,link,media,type;public,request,matcher,content,type,final,media,type,expected,content,type,return,request,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,equals,content,type,expected,content,type,actual,content,type
ContentRequestMatchers -> public RequestMatcher contentType(final MediaType expectedContentType);1521645162;Assert the request content type as a {@link MediaType}.;public RequestMatcher contentType(final MediaType expectedContentType) {_		return request -> {_			MediaType actualContentType = request.getHeaders().getContentType()__			assertTrue("Content type not set", actualContentType != null)__			assertEquals("Content type", expectedContentType, actualContentType)__		}__	};assert,the,request,content,type,as,a,link,media,type;public,request,matcher,content,type,final,media,type,expected,content,type,return,request,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,equals,content,type,expected,content,type,actual,content,type
ContentRequestMatchers -> public RequestMatcher contentType(final MediaType expectedContentType);1530174524;Assert the request content type as a {@link MediaType}.;public RequestMatcher contentType(final MediaType expectedContentType) {_		return request -> {_			MediaType actualContentType = request.getHeaders().getContentType()__			assertTrue("Content type not set", actualContentType != null)__			assertEquals("Content type", expectedContentType, actualContentType)__		}__	};assert,the,request,content,type,as,a,link,media,type;public,request,matcher,content,type,final,media,type,expected,content,type,return,request,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,equals,content,type,expected,content,type,actual,content,type
ContentRequestMatchers -> public RequestMatcher contentType(final MediaType expectedContentType);1530174524;Assert the request content type as a {@link MediaType}.;public RequestMatcher contentType(final MediaType expectedContentType) {_		return request -> {_			MediaType actualContentType = request.getHeaders().getContentType()__			assertTrue("Content type not set", actualContentType != null)__			assertEquals("Content type", expectedContentType, actualContentType)__		}__	};assert,the,request,content,type,as,a,link,media,type;public,request,matcher,content,type,final,media,type,expected,content,type,return,request,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,equals,content,type,expected,content,type,actual,content,type
ContentRequestMatchers -> public RequestMatcher contentType(final MediaType expectedContentType);1530174524;Assert the request content type as a {@link MediaType}.;public RequestMatcher contentType(final MediaType expectedContentType) {_		return request -> {_			MediaType actualContentType = request.getHeaders().getContentType()__			assertTrue("Content type not set", actualContentType != null)__			assertEquals("Content type", expectedContentType, actualContentType)__		}__	};assert,the,request,content,type,as,a,link,media,type;public,request,matcher,content,type,final,media,type,expected,content,type,return,request,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,equals,content,type,expected,content,type,actual,content,type
ContentRequestMatchers -> public RequestMatcher contentType(final MediaType expectedContentType);1542613849;Assert the request content type as a {@link MediaType}.;public RequestMatcher contentType(final MediaType expectedContentType) {_		return request -> {_			MediaType actualContentType = request.getHeaders().getContentType()__			assertTrue("Content type not set", actualContentType != null)__			assertEquals("Content type", expectedContentType, actualContentType)__		}__	};assert,the,request,content,type,as,a,link,media,type;public,request,matcher,content,type,final,media,type,expected,content,type,return,request,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,equals,content,type,expected,content,type,actual,content,type
ContentRequestMatchers -> public RequestMatcher bytes(final byte[] expectedContent);1383669853;Compare the body of the request to the given byte array.;public RequestMatcher bytes(final byte[] expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsBytes())__			}_		}__	};compare,the,body,of,the,request,to,the,given,byte,array;public,request,matcher,bytes,final,byte,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,bytes
ContentRequestMatchers -> public RequestMatcher bytes(final byte[] expectedContent);1413848647;Compare the body of the request to the given byte array.;public RequestMatcher bytes(final byte[] expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsBytes())__			}_		}__	};compare,the,body,of,the,request,to,the,given,byte,array;public,request,matcher,bytes,final,byte,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,bytes
ContentRequestMatchers -> public RequestMatcher bytes(final byte[] expectedContent);1427238287;Compare the body of the request to the given byte array.;public RequestMatcher bytes(final byte[] expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsBytes())__			}_		}__	};compare,the,body,of,the,request,to,the,given,byte,array;public,request,matcher,bytes,final,byte,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,bytes
ContentRequestMatchers -> public RequestMatcher bytes(final byte[] expectedContent);1453398153;Compare the body of the request to the given byte array.;public RequestMatcher bytes(final byte[] expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsBytes())__			}_		}__	};compare,the,body,of,the,request,to,the,given,byte,array;public,request,matcher,bytes,final,byte,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,bytes
ContentRequestMatchers -> public RequestMatcher bytes(final byte[] expectedContent);1453413905;Compare the body of the request to the given byte array.;public RequestMatcher bytes(final byte[] expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsBytes())__			}_		}__	};compare,the,body,of,the,request,to,the,given,byte,array;public,request,matcher,bytes,final,byte,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,bytes
ContentRequestMatchers -> public RequestMatcher bytes(final byte[] expectedContent);1464621363;Compare the body of the request to the given byte array.;public RequestMatcher bytes(final byte[] expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsBytes())__			}_		}__	};compare,the,body,of,the,request,to,the,given,byte,array;public,request,matcher,bytes,final,byte,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,bytes
ContentRequestMatchers -> public RequestMatcher bytes(final byte[] expectedContent);1470739377;Compare the body of the request to the given byte array.;public RequestMatcher bytes(final byte[] expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsBytes())__			}_		}__	};compare,the,body,of,the,request,to,the,given,byte,array;public,request,matcher,bytes,final,byte,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,bytes
ContentRequestMatchers -> public RequestMatcher bytes(final byte[] expectedContent);1472464380;Compare the body of the request to the given byte array.;public RequestMatcher bytes(final byte[] expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsBytes())__			}_		}__	};compare,the,body,of,the,request,to,the,given,byte,array;public,request,matcher,bytes,final,byte,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,bytes
ContentRequestMatchers -> public RequestMatcher bytes(final byte[] expectedContent);1496955179;Compare the body of the request to the given byte array.;public RequestMatcher bytes(final byte[] expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsBytes())__			}_		}__	};compare,the,body,of,the,request,to,the,given,byte,array;public,request,matcher,bytes,final,byte,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,bytes
ContentRequestMatchers -> public RequestMatcher bytes(final byte[] expectedContent);1497341397;Compare the body of the request to the given byte array.;public RequestMatcher bytes(final byte[] expectedContent) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertEquals("Request content", expectedContent, mockRequest.getBodyAsBytes())__		}__	};compare,the,body,of,the,request,to,the,given,byte,array;public,request,matcher,bytes,final,byte,expected,content,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,bytes
ContentRequestMatchers -> public RequestMatcher bytes(final byte[] expectedContent);1520940425;Compare the body of the request to the given byte array.;public RequestMatcher bytes(final byte[] expectedContent) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertEquals("Request content", expectedContent, mockRequest.getBodyAsBytes())__		}__	};compare,the,body,of,the,request,to,the,given,byte,array;public,request,matcher,bytes,final,byte,expected,content,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,bytes
ContentRequestMatchers -> public RequestMatcher bytes(final byte[] expectedContent);1521645162;Compare the body of the request to the given byte array.;public RequestMatcher bytes(final byte[] expectedContent) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertEquals("Request content", expectedContent, mockRequest.getBodyAsBytes())__		}__	};compare,the,body,of,the,request,to,the,given,byte,array;public,request,matcher,bytes,final,byte,expected,content,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,bytes
ContentRequestMatchers -> public RequestMatcher bytes(final byte[] expectedContent);1530174524;Compare the body of the request to the given byte array.;public RequestMatcher bytes(final byte[] expectedContent) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertEquals("Request content", expectedContent, mockRequest.getBodyAsBytes())__		}__	};compare,the,body,of,the,request,to,the,given,byte,array;public,request,matcher,bytes,final,byte,expected,content,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,bytes
ContentRequestMatchers -> public RequestMatcher bytes(final byte[] expectedContent);1530174524;Compare the body of the request to the given byte array.;public RequestMatcher bytes(final byte[] expectedContent) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertEquals("Request content", expectedContent, mockRequest.getBodyAsBytes())__		}__	};compare,the,body,of,the,request,to,the,given,byte,array;public,request,matcher,bytes,final,byte,expected,content,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,bytes
ContentRequestMatchers -> public RequestMatcher bytes(final byte[] expectedContent);1530174524;Compare the body of the request to the given byte array.;public RequestMatcher bytes(final byte[] expectedContent) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertEquals("Request content", expectedContent, mockRequest.getBodyAsBytes())__		}__	};compare,the,body,of,the,request,to,the,given,byte,array;public,request,matcher,bytes,final,byte,expected,content,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,bytes
ContentRequestMatchers -> public RequestMatcher bytes(final byte[] expectedContent);1542613849;Compare the body of the request to the given byte array.;public RequestMatcher bytes(final byte[] expectedContent) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertEquals("Request content", expectedContent, mockRequest.getBodyAsBytes())__		}__	};compare,the,body,of,the,request,to,the,given,byte,array;public,request,matcher,bytes,final,byte,expected,content,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,bytes
ContentRequestMatchers -> public RequestMatcher formData(final MultiValueMap<String, String> expectedContent);1453398153;Parse the body as form data and compare to the given {@code MultiValueMap}.;public RequestMatcher formData(final MultiValueMap<String, String> expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				HttpInputMessage inputMessage = new HttpInputMessage() {_					@Override_					public InputStream getBody() throws IOException {_						MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__						return new ByteArrayInputStream(mockRequest.getBodyAsBytes())__					}_					@Override_					public HttpHeaders getHeaders() {_						return request.getHeaders()__					}_				}__				FormHttpMessageConverter converter = new FormHttpMessageConverter()__				assertEquals("Request content", expectedContent, converter.read(null, inputMessage))__			}_		}__	};parse,the,body,as,form,data,and,compare,to,the,given,code,multi,value,map;public,request,matcher,form,data,final,multi,value,map,string,string,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,http,input,message,input,message,new,http,input,message,override,public,input,stream,get,body,throws,ioexception,mock,client,http,request,mock,request,mock,client,http,request,request,return,new,byte,array,input,stream,mock,request,get,body,as,bytes,override,public,http,headers,get,headers,return,request,get,headers,form,http,message,converter,converter,new,form,http,message,converter,assert,equals,request,content,expected,content,converter,read,null,input,message
ContentRequestMatchers -> public RequestMatcher formData(final MultiValueMap<String, String> expectedContent);1453413905;Parse the body as form data and compare to the given {@code MultiValueMap}.;public RequestMatcher formData(final MultiValueMap<String, String> expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(final ClientHttpRequest request) throws IOException, AssertionError {_				HttpInputMessage inputMessage = new HttpInputMessage() {_					@Override_					public InputStream getBody() throws IOException {_						MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__						return new ByteArrayInputStream(mockRequest.getBodyAsBytes())__					}_					@Override_					public HttpHeaders getHeaders() {_						return request.getHeaders()__					}_				}__				FormHttpMessageConverter converter = new FormHttpMessageConverter()__				assertEquals("Request content", expectedContent, converter.read(null, inputMessage))__			}_		}__	};parse,the,body,as,form,data,and,compare,to,the,given,code,multi,value,map;public,request,matcher,form,data,final,multi,value,map,string,string,expected,content,return,new,request,matcher,override,public,void,match,final,client,http,request,request,throws,ioexception,assertion,error,http,input,message,input,message,new,http,input,message,override,public,input,stream,get,body,throws,ioexception,mock,client,http,request,mock,request,mock,client,http,request,request,return,new,byte,array,input,stream,mock,request,get,body,as,bytes,override,public,http,headers,get,headers,return,request,get,headers,form,http,message,converter,converter,new,form,http,message,converter,assert,equals,request,content,expected,content,converter,read,null,input,message
ContentRequestMatchers -> public RequestMatcher formData(final MultiValueMap<String, String> expectedContent);1464621363;Parse the body as form data and compare to the given {@code MultiValueMap}._@since 4.3;public RequestMatcher formData(final MultiValueMap<String, String> expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(final ClientHttpRequest request) throws IOException, AssertionError {_				HttpInputMessage inputMessage = new HttpInputMessage() {_					@Override_					public InputStream getBody() throws IOException {_						MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__						return new ByteArrayInputStream(mockRequest.getBodyAsBytes())__					}_					@Override_					public HttpHeaders getHeaders() {_						return request.getHeaders()__					}_				}__				FormHttpMessageConverter converter = new FormHttpMessageConverter()__				assertEquals("Request content", expectedContent, converter.read(null, inputMessage))__			}_		}__	};parse,the,body,as,form,data,and,compare,to,the,given,code,multi,value,map,since,4,3;public,request,matcher,form,data,final,multi,value,map,string,string,expected,content,return,new,request,matcher,override,public,void,match,final,client,http,request,request,throws,ioexception,assertion,error,http,input,message,input,message,new,http,input,message,override,public,input,stream,get,body,throws,ioexception,mock,client,http,request,mock,request,mock,client,http,request,request,return,new,byte,array,input,stream,mock,request,get,body,as,bytes,override,public,http,headers,get,headers,return,request,get,headers,form,http,message,converter,converter,new,form,http,message,converter,assert,equals,request,content,expected,content,converter,read,null,input,message
ContentRequestMatchers -> public RequestMatcher formData(final MultiValueMap<String, String> expectedContent);1470739377;Parse the body as form data and compare to the given {@code MultiValueMap}._@since 4.3;public RequestMatcher formData(final MultiValueMap<String, String> expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(final ClientHttpRequest request) throws IOException, AssertionError {_				HttpInputMessage inputMessage = new HttpInputMessage() {_					@Override_					public InputStream getBody() throws IOException {_						MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__						return new ByteArrayInputStream(mockRequest.getBodyAsBytes())__					}_					@Override_					public HttpHeaders getHeaders() {_						return request.getHeaders()__					}_				}__				FormHttpMessageConverter converter = new FormHttpMessageConverter()__				assertEquals("Request content", expectedContent, converter.read(null, inputMessage))__			}_		}__	};parse,the,body,as,form,data,and,compare,to,the,given,code,multi,value,map,since,4,3;public,request,matcher,form,data,final,multi,value,map,string,string,expected,content,return,new,request,matcher,override,public,void,match,final,client,http,request,request,throws,ioexception,assertion,error,http,input,message,input,message,new,http,input,message,override,public,input,stream,get,body,throws,ioexception,mock,client,http,request,mock,request,mock,client,http,request,request,return,new,byte,array,input,stream,mock,request,get,body,as,bytes,override,public,http,headers,get,headers,return,request,get,headers,form,http,message,converter,converter,new,form,http,message,converter,assert,equals,request,content,expected,content,converter,read,null,input,message
ContentRequestMatchers -> public RequestMatcher formData(final MultiValueMap<String, String> expectedContent);1472464380;Parse the body as form data and compare to the given {@code MultiValueMap}._@since 4.3;public RequestMatcher formData(final MultiValueMap<String, String> expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(final ClientHttpRequest request) throws IOException, AssertionError {_				HttpInputMessage inputMessage = new HttpInputMessage() {_					@Override_					public InputStream getBody() throws IOException {_						MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__						return new ByteArrayInputStream(mockRequest.getBodyAsBytes())__					}_					@Override_					public HttpHeaders getHeaders() {_						return request.getHeaders()__					}_				}__				FormHttpMessageConverter converter = new FormHttpMessageConverter()__				assertEquals("Request content", expectedContent, converter.read(null, inputMessage))__			}_		}__	};parse,the,body,as,form,data,and,compare,to,the,given,code,multi,value,map,since,4,3;public,request,matcher,form,data,final,multi,value,map,string,string,expected,content,return,new,request,matcher,override,public,void,match,final,client,http,request,request,throws,ioexception,assertion,error,http,input,message,input,message,new,http,input,message,override,public,input,stream,get,body,throws,ioexception,mock,client,http,request,mock,request,mock,client,http,request,request,return,new,byte,array,input,stream,mock,request,get,body,as,bytes,override,public,http,headers,get,headers,return,request,get,headers,form,http,message,converter,converter,new,form,http,message,converter,assert,equals,request,content,expected,content,converter,read,null,input,message
ContentRequestMatchers -> public RequestMatcher formData(final MultiValueMap<String, String> expectedContent);1496955179;Parse the body as form data and compare to the given {@code MultiValueMap}._@since 4.3;public RequestMatcher formData(final MultiValueMap<String, String> expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(final ClientHttpRequest request) throws IOException, AssertionError {_				HttpInputMessage inputMessage = new HttpInputMessage() {_					@Override_					public InputStream getBody() throws IOException {_						MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__						return new ByteArrayInputStream(mockRequest.getBodyAsBytes())__					}_					@Override_					public HttpHeaders getHeaders() {_						return request.getHeaders()__					}_				}__				FormHttpMessageConverter converter = new FormHttpMessageConverter()__				assertEquals("Request content", expectedContent, converter.read(null, inputMessage))__			}_		}__	};parse,the,body,as,form,data,and,compare,to,the,given,code,multi,value,map,since,4,3;public,request,matcher,form,data,final,multi,value,map,string,string,expected,content,return,new,request,matcher,override,public,void,match,final,client,http,request,request,throws,ioexception,assertion,error,http,input,message,input,message,new,http,input,message,override,public,input,stream,get,body,throws,ioexception,mock,client,http,request,mock,request,mock,client,http,request,request,return,new,byte,array,input,stream,mock,request,get,body,as,bytes,override,public,http,headers,get,headers,return,request,get,headers,form,http,message,converter,converter,new,form,http,message,converter,assert,equals,request,content,expected,content,converter,read,null,input,message
ContentRequestMatchers -> public RequestMatcher formData(final MultiValueMap<String, String> expectedContent);1497341397;Parse the body as form data and compare to the given {@code MultiValueMap}._@since 4.3;public RequestMatcher formData(final MultiValueMap<String, String> expectedContent) {_		return request -> {_			HttpInputMessage inputMessage = new HttpInputMessage() {_				@Override_				public InputStream getBody() throws IOException {_					MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__					return new ByteArrayInputStream(mockRequest.getBodyAsBytes())__				}_				@Override_				public HttpHeaders getHeaders() {_					return request.getHeaders()__				}_			}__			FormHttpMessageConverter converter = new FormHttpMessageConverter()__			assertEquals("Request content", expectedContent, converter.read(null, inputMessage))__		}__	};parse,the,body,as,form,data,and,compare,to,the,given,code,multi,value,map,since,4,3;public,request,matcher,form,data,final,multi,value,map,string,string,expected,content,return,request,http,input,message,input,message,new,http,input,message,override,public,input,stream,get,body,throws,ioexception,mock,client,http,request,mock,request,mock,client,http,request,request,return,new,byte,array,input,stream,mock,request,get,body,as,bytes,override,public,http,headers,get,headers,return,request,get,headers,form,http,message,converter,converter,new,form,http,message,converter,assert,equals,request,content,expected,content,converter,read,null,input,message
ContentRequestMatchers -> public RequestMatcher formData(final MultiValueMap<String, String> expectedContent);1520940425;Parse the body as form data and compare to the given {@code MultiValueMap}._@since 4.3;public RequestMatcher formData(final MultiValueMap<String, String> expectedContent) {_		return request -> {_			HttpInputMessage inputMessage = new HttpInputMessage() {_				@Override_				public InputStream getBody() throws IOException {_					MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__					return new ByteArrayInputStream(mockRequest.getBodyAsBytes())__				}_				@Override_				public HttpHeaders getHeaders() {_					return request.getHeaders()__				}_			}__			FormHttpMessageConverter converter = new FormHttpMessageConverter()__			assertEquals("Request content", expectedContent, converter.read(null, inputMessage))__		}__	};parse,the,body,as,form,data,and,compare,to,the,given,code,multi,value,map,since,4,3;public,request,matcher,form,data,final,multi,value,map,string,string,expected,content,return,request,http,input,message,input,message,new,http,input,message,override,public,input,stream,get,body,throws,ioexception,mock,client,http,request,mock,request,mock,client,http,request,request,return,new,byte,array,input,stream,mock,request,get,body,as,bytes,override,public,http,headers,get,headers,return,request,get,headers,form,http,message,converter,converter,new,form,http,message,converter,assert,equals,request,content,expected,content,converter,read,null,input,message
ContentRequestMatchers -> public RequestMatcher formData(final MultiValueMap<String, String> expectedContent);1521645162;Parse the body as form data and compare to the given {@code MultiValueMap}._@since 4.3;public RequestMatcher formData(final MultiValueMap<String, String> expectedContent) {_		return request -> {_			HttpInputMessage inputMessage = new HttpInputMessage() {_				@Override_				public InputStream getBody() throws IOException {_					MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__					return new ByteArrayInputStream(mockRequest.getBodyAsBytes())__				}_				@Override_				public HttpHeaders getHeaders() {_					return request.getHeaders()__				}_			}__			FormHttpMessageConverter converter = new FormHttpMessageConverter()__			assertEquals("Request content", expectedContent, converter.read(null, inputMessage))__		}__	};parse,the,body,as,form,data,and,compare,to,the,given,code,multi,value,map,since,4,3;public,request,matcher,form,data,final,multi,value,map,string,string,expected,content,return,request,http,input,message,input,message,new,http,input,message,override,public,input,stream,get,body,throws,ioexception,mock,client,http,request,mock,request,mock,client,http,request,request,return,new,byte,array,input,stream,mock,request,get,body,as,bytes,override,public,http,headers,get,headers,return,request,get,headers,form,http,message,converter,converter,new,form,http,message,converter,assert,equals,request,content,expected,content,converter,read,null,input,message
ContentRequestMatchers -> public RequestMatcher formData(final MultiValueMap<String, String> expectedContent);1530174524;Parse the body as form data and compare to the given {@code MultiValueMap}._@since 4.3;public RequestMatcher formData(final MultiValueMap<String, String> expectedContent) {_		return request -> {_			HttpInputMessage inputMessage = new HttpInputMessage() {_				@Override_				public InputStream getBody() throws IOException {_					MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__					return new ByteArrayInputStream(mockRequest.getBodyAsBytes())__				}_				@Override_				public HttpHeaders getHeaders() {_					return request.getHeaders()__				}_			}__			FormHttpMessageConverter converter = new FormHttpMessageConverter()__			assertEquals("Request content", expectedContent, converter.read(null, inputMessage))__		}__	};parse,the,body,as,form,data,and,compare,to,the,given,code,multi,value,map,since,4,3;public,request,matcher,form,data,final,multi,value,map,string,string,expected,content,return,request,http,input,message,input,message,new,http,input,message,override,public,input,stream,get,body,throws,ioexception,mock,client,http,request,mock,request,mock,client,http,request,request,return,new,byte,array,input,stream,mock,request,get,body,as,bytes,override,public,http,headers,get,headers,return,request,get,headers,form,http,message,converter,converter,new,form,http,message,converter,assert,equals,request,content,expected,content,converter,read,null,input,message
ContentRequestMatchers -> public RequestMatcher formData(final MultiValueMap<String, String> expectedContent);1530174524;Parse the body as form data and compare to the given {@code MultiValueMap}._@since 4.3;public RequestMatcher formData(final MultiValueMap<String, String> expectedContent) {_		return request -> {_			HttpInputMessage inputMessage = new HttpInputMessage() {_				@Override_				public InputStream getBody() throws IOException {_					MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__					return new ByteArrayInputStream(mockRequest.getBodyAsBytes())__				}_				@Override_				public HttpHeaders getHeaders() {_					return request.getHeaders()__				}_			}__			FormHttpMessageConverter converter = new FormHttpMessageConverter()__			assertEquals("Request content", expectedContent, converter.read(null, inputMessage))__		}__	};parse,the,body,as,form,data,and,compare,to,the,given,code,multi,value,map,since,4,3;public,request,matcher,form,data,final,multi,value,map,string,string,expected,content,return,request,http,input,message,input,message,new,http,input,message,override,public,input,stream,get,body,throws,ioexception,mock,client,http,request,mock,request,mock,client,http,request,request,return,new,byte,array,input,stream,mock,request,get,body,as,bytes,override,public,http,headers,get,headers,return,request,get,headers,form,http,message,converter,converter,new,form,http,message,converter,assert,equals,request,content,expected,content,converter,read,null,input,message
ContentRequestMatchers -> public RequestMatcher formData(final MultiValueMap<String, String> expectedContent);1530174524;Parse the body as form data and compare to the given {@code MultiValueMap}._@since 4.3;public RequestMatcher formData(final MultiValueMap<String, String> expectedContent) {_		return request -> {_			HttpInputMessage inputMessage = new HttpInputMessage() {_				@Override_				public InputStream getBody() throws IOException {_					MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__					return new ByteArrayInputStream(mockRequest.getBodyAsBytes())__				}_				@Override_				public HttpHeaders getHeaders() {_					return request.getHeaders()__				}_			}__			FormHttpMessageConverter converter = new FormHttpMessageConverter()__			assertEquals("Request content", expectedContent, converter.read(null, inputMessage))__		}__	};parse,the,body,as,form,data,and,compare,to,the,given,code,multi,value,map,since,4,3;public,request,matcher,form,data,final,multi,value,map,string,string,expected,content,return,request,http,input,message,input,message,new,http,input,message,override,public,input,stream,get,body,throws,ioexception,mock,client,http,request,mock,request,mock,client,http,request,request,return,new,byte,array,input,stream,mock,request,get,body,as,bytes,override,public,http,headers,get,headers,return,request,get,headers,form,http,message,converter,converter,new,form,http,message,converter,assert,equals,request,content,expected,content,converter,read,null,input,message
ContentRequestMatchers -> public RequestMatcher formData(final MultiValueMap<String, String> expectedContent);1542613849;Parse the body as form data and compare to the given {@code MultiValueMap}._@since 4.3;public RequestMatcher formData(final MultiValueMap<String, String> expectedContent) {_		return request -> {_			HttpInputMessage inputMessage = new HttpInputMessage() {_				@Override_				public InputStream getBody() throws IOException {_					MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__					return new ByteArrayInputStream(mockRequest.getBodyAsBytes())__				}_				@Override_				public HttpHeaders getHeaders() {_					return request.getHeaders()__				}_			}__			FormHttpMessageConverter converter = new FormHttpMessageConverter()__			assertEquals("Request content", expectedContent, converter.read(null, inputMessage))__		}__	};parse,the,body,as,form,data,and,compare,to,the,given,code,multi,value,map,since,4,3;public,request,matcher,form,data,final,multi,value,map,string,string,expected,content,return,request,http,input,message,input,message,new,http,input,message,override,public,input,stream,get,body,throws,ioexception,mock,client,http,request,mock,request,mock,client,http,request,request,return,new,byte,array,input,stream,mock,request,get,body,as,bytes,override,public,http,headers,get,headers,return,request,get,headers,form,http,message,converter,converter,new,form,http,message,converter,assert,equals,request,content,expected,content,converter,read,null,input,message
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(final MediaType contentType);1383669853;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,final,media,type,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,true,content,type,actual,content,type,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(final MediaType contentType);1413848647;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,final,media,type,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,true,content,type,actual,content,type,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(final MediaType contentType);1427238287;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,final,media,type,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,true,content,type,actual,content,type,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(final MediaType contentType);1453398153;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,final,media,type,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,true,content,type,actual,content,type,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(final MediaType contentType);1453413905;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,final,media,type,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,true,content,type,actual,content,type,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(final MediaType contentType);1464621363;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,final,media,type,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,true,content,type,actual,content,type,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(final MediaType contentType);1470739377;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,final,media,type,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,true,content,type,actual,content,type,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(final MediaType contentType);1472464380;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,final,media,type,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,assert,true,content,type,actual,content,type,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(final MediaType contentType);1496955179;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MediaType actualContentType = request.getHeaders().getContentType()__				assertTrue("Content type not set", actualContentType != null)__				if (actualContentType != null) {_					assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",_							actualContentType.isCompatibleWith(contentType))__				}_			}_		}__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,final,media,type,content,type,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,if,actual,content,type,null,assert,true,content,type,actual,content,type,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(final MediaType contentType);1497341397;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return request -> {_			MediaType actualContentType = request.getHeaders().getContentType()__			assertTrue("Content type not set", actualContentType != null)__			if (actualContentType != null) {_				assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,final,media,type,content,type,return,request,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,if,actual,content,type,null,assert,true,content,type,actual,content,type,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(final MediaType contentType);1520940425;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return request -> {_			MediaType actualContentType = request.getHeaders().getContentType()__			assertTrue("Content type not set", actualContentType != null)__			if (actualContentType != null) {_				assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,final,media,type,content,type,return,request,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,if,actual,content,type,null,assert,true,content,type,actual,content,type,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(final MediaType contentType);1521645162;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return request -> {_			MediaType actualContentType = request.getHeaders().getContentType()__			assertTrue("Content type not set", actualContentType != null)__			if (actualContentType != null) {_				assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,final,media,type,content,type,return,request,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,if,actual,content,type,null,assert,true,content,type,actual,content,type,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(final MediaType contentType);1530174524;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return request -> {_			MediaType actualContentType = request.getHeaders().getContentType()__			assertTrue("Content type not set", actualContentType != null)__			if (actualContentType != null) {_				assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,final,media,type,content,type,return,request,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,if,actual,content,type,null,assert,true,content,type,actual,content,type,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(final MediaType contentType);1530174524;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return request -> {_			MediaType actualContentType = request.getHeaders().getContentType()__			assertTrue("Content type not set", actualContentType != null)__			if (actualContentType != null) {_				assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,final,media,type,content,type,return,request,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,if,actual,content,type,null,assert,true,content,type,actual,content,type,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(final MediaType contentType);1530174524;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return request -> {_			MediaType actualContentType = request.getHeaders().getContentType()__			assertTrue("Content type not set", actualContentType != null)__			if (actualContentType != null) {_				assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,final,media,type,content,type,return,request,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,if,actual,content,type,null,assert,true,content,type,actual,content,type,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentRequestMatchers -> public RequestMatcher contentTypeCompatibleWith(final MediaType contentType);1542613849;Assert the request content type is compatible with the given_content type as defined by {@link MediaType#isCompatibleWith(MediaType)}.;public RequestMatcher contentTypeCompatibleWith(final MediaType contentType) {_		return request -> {_			MediaType actualContentType = request.getHeaders().getContentType()__			assertTrue("Content type not set", actualContentType != null)__			if (actualContentType != null) {_				assertTrue("Content type [" + actualContentType + "] is not compatible with [" + contentType + "]",_						actualContentType.isCompatibleWith(contentType))__			}_		}__	};assert,the,request,content,type,is,compatible,with,the,given,content,type,as,defined,by,link,media,type,is,compatible,with,media,type;public,request,matcher,content,type,compatible,with,final,media,type,content,type,return,request,media,type,actual,content,type,request,get,headers,get,content,type,assert,true,content,type,not,set,actual,content,type,null,if,actual,content,type,null,assert,true,content,type,actual,content,type,is,not,compatible,with,content,type,actual,content,type,is,compatible,with,content,type
ContentRequestMatchers -> public RequestMatcher string(final String expectedContent);1383669853;Get the body of the request as a UTF-8 string and compare it to the given String.;public RequestMatcher string(final String expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsString())__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,compare,it,to,the,given,string;public,request,matcher,string,final,string,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher string(final String expectedContent);1413848647;Get the body of the request as a UTF-8 string and compare it to the given String.;public RequestMatcher string(final String expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsString())__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,compare,it,to,the,given,string;public,request,matcher,string,final,string,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher string(final String expectedContent);1427238287;Get the body of the request as a UTF-8 string and compare it to the given String.;public RequestMatcher string(final String expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsString())__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,compare,it,to,the,given,string;public,request,matcher,string,final,string,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher string(final String expectedContent);1453398153;Get the body of the request as a UTF-8 string and compare it to the given String.;public RequestMatcher string(final String expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsString())__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,compare,it,to,the,given,string;public,request,matcher,string,final,string,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher string(final String expectedContent);1453413905;Get the body of the request as a UTF-8 string and compare it to the given String.;public RequestMatcher string(final String expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsString())__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,compare,it,to,the,given,string;public,request,matcher,string,final,string,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher string(final String expectedContent);1464621363;Get the body of the request as a UTF-8 string and compare it to the given String.;public RequestMatcher string(final String expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsString())__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,compare,it,to,the,given,string;public,request,matcher,string,final,string,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher string(final String expectedContent);1470739377;Get the body of the request as a UTF-8 string and compare it to the given String.;public RequestMatcher string(final String expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsString())__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,compare,it,to,the,given,string;public,request,matcher,string,final,string,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher string(final String expectedContent);1472464380;Get the body of the request as a UTF-8 string and compare it to the given String.;public RequestMatcher string(final String expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsString())__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,compare,it,to,the,given,string;public,request,matcher,string,final,string,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher string(final String expectedContent);1496955179;Get the body of the request as a UTF-8 string and compare it to the given String.;public RequestMatcher string(final String expectedContent) {_		return new RequestMatcher() {_			@Override_			public void match(ClientHttpRequest request) throws IOException, AssertionError {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				assertEquals("Request content", expectedContent, mockRequest.getBodyAsString())__			}_		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,compare,it,to,the,given,string;public,request,matcher,string,final,string,expected,content,return,new,request,matcher,override,public,void,match,client,http,request,request,throws,ioexception,assertion,error,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher string(final String expectedContent);1497341397;Get the body of the request as a UTF-8 string and compare it to the given String.;public RequestMatcher string(final String expectedContent) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertEquals("Request content", expectedContent, mockRequest.getBodyAsString())__		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,compare,it,to,the,given,string;public,request,matcher,string,final,string,expected,content,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher string(final String expectedContent);1520940425;Get the body of the request as a UTF-8 string and compare it to the given String.;public RequestMatcher string(final String expectedContent) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertEquals("Request content", expectedContent, mockRequest.getBodyAsString())__		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,compare,it,to,the,given,string;public,request,matcher,string,final,string,expected,content,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher string(final String expectedContent);1521645162;Get the body of the request as a UTF-8 string and compare it to the given String.;public RequestMatcher string(final String expectedContent) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertEquals("Request content", expectedContent, mockRequest.getBodyAsString())__		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,compare,it,to,the,given,string;public,request,matcher,string,final,string,expected,content,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher string(final String expectedContent);1530174524;Get the body of the request as a UTF-8 string and compare it to the given String.;public RequestMatcher string(final String expectedContent) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertEquals("Request content", expectedContent, mockRequest.getBodyAsString())__		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,compare,it,to,the,given,string;public,request,matcher,string,final,string,expected,content,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher string(final String expectedContent);1530174524;Get the body of the request as a UTF-8 string and compare it to the given String.;public RequestMatcher string(final String expectedContent) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertEquals("Request content", expectedContent, mockRequest.getBodyAsString())__		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,compare,it,to,the,given,string;public,request,matcher,string,final,string,expected,content,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher string(final String expectedContent);1530174524;Get the body of the request as a UTF-8 string and compare it to the given String.;public RequestMatcher string(final String expectedContent) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertEquals("Request content", expectedContent, mockRequest.getBodyAsString())__		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,compare,it,to,the,given,string;public,request,matcher,string,final,string,expected,content,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher string(final String expectedContent);1542613849;Get the body of the request as a UTF-8 string and compare it to the given String.;public RequestMatcher string(final String expectedContent) {_		return request -> {_			MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__			assertEquals("Request content", expectedContent, mockRequest.getBodyAsString())__		}__	};get,the,body,of,the,request,as,a,utf,8,string,and,compare,it,to,the,given,string;public,request,matcher,string,final,string,expected,content,return,request,mock,client,http,request,mock,request,mock,client,http,request,request,assert,equals,request,content,expected,content,mock,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher json(final String expectedJsonContent, final boolean strict);1520940425;Parse the request body and the given string as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting._<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>_<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert<a/> library._@param expectedJsonContent the expected JSON content_@param strict enables strict checking_@since 5.0.5;public RequestMatcher json(final String expectedJsonContent, final boolean strict) {_		return request -> {_			try {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				jsonHelper.assertJsonEqual(expectedJsonContent, mockRequest.getBodyAsString(), strict)__			} catch (Exception e) {_				throw new AssertionError("Failed to parse expected or actual JSON request content", e)__			}_		}__	};parse,the,request,body,and,the,given,string,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,expected,json,content,the,expected,json,content,param,strict,enables,strict,checking,since,5,0,5;public,request,matcher,json,final,string,expected,json,content,final,boolean,strict,return,request,try,mock,client,http,request,mock,request,mock,client,http,request,request,json,helper,assert,json,equal,expected,json,content,mock,request,get,body,as,string,strict,catch,exception,e,throw,new,assertion,error,failed,to,parse,expected,or,actual,json,request,content,e
ContentRequestMatchers -> public RequestMatcher json(final String expectedJsonContent, final boolean strict);1521645162;Parse the request body and the given string as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting._<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>_<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert<a/> library._@param expectedJsonContent the expected JSON content_@param strict enables strict checking_@since 5.0.5;public RequestMatcher json(final String expectedJsonContent, final boolean strict) {_		return request -> {_			try {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				jsonHelper.assertJsonEqual(expectedJsonContent, mockRequest.getBodyAsString(), strict)__			}_			catch (Exception ex) {_				throw new AssertionError("Failed to parse expected or actual JSON request content", ex)__			}_		}__	};parse,the,request,body,and,the,given,string,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,expected,json,content,the,expected,json,content,param,strict,enables,strict,checking,since,5,0,5;public,request,matcher,json,final,string,expected,json,content,final,boolean,strict,return,request,try,mock,client,http,request,mock,request,mock,client,http,request,request,json,helper,assert,json,equal,expected,json,content,mock,request,get,body,as,string,strict,catch,exception,ex,throw,new,assertion,error,failed,to,parse,expected,or,actual,json,request,content,ex
ContentRequestMatchers -> public RequestMatcher json(final String expectedJsonContent, final boolean strict);1530174524;Parse the request body and the given string as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting._<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>_<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert</a> library._@param expectedJsonContent the expected JSON content_@param strict enables strict checking_@since 5.0.5;public RequestMatcher json(final String expectedJsonContent, final boolean strict) {_		return request -> {_			try {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				jsonHelper.assertJsonEqual(expectedJsonContent, mockRequest.getBodyAsString(), strict)__			}_			catch (Exception ex) {_				throw new AssertionError("Failed to parse expected or actual JSON request content", ex)__			}_		}__	};parse,the,request,body,and,the,given,string,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,expected,json,content,the,expected,json,content,param,strict,enables,strict,checking,since,5,0,5;public,request,matcher,json,final,string,expected,json,content,final,boolean,strict,return,request,try,mock,client,http,request,mock,request,mock,client,http,request,request,json,helper,assert,json,equal,expected,json,content,mock,request,get,body,as,string,strict,catch,exception,ex,throw,new,assertion,error,failed,to,parse,expected,or,actual,json,request,content,ex
ContentRequestMatchers -> public RequestMatcher json(final String expectedJsonContent, final boolean strict);1530174524;Parse the request body and the given string as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting._<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>_<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert</a> library._@param expectedJsonContent the expected JSON content_@param strict enables strict checking_@since 5.0.5;public RequestMatcher json(final String expectedJsonContent, final boolean strict) {_		return request -> {_			try {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				this.jsonHelper.assertJsonEqual(expectedJsonContent, mockRequest.getBodyAsString(), strict)__			}_			catch (Exception ex) {_				throw new AssertionError("Failed to parse expected or actual JSON request content", ex)__			}_		}__	};parse,the,request,body,and,the,given,string,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,expected,json,content,the,expected,json,content,param,strict,enables,strict,checking,since,5,0,5;public,request,matcher,json,final,string,expected,json,content,final,boolean,strict,return,request,try,mock,client,http,request,mock,request,mock,client,http,request,request,this,json,helper,assert,json,equal,expected,json,content,mock,request,get,body,as,string,strict,catch,exception,ex,throw,new,assertion,error,failed,to,parse,expected,or,actual,json,request,content,ex
ContentRequestMatchers -> public RequestMatcher json(final String expectedJsonContent, final boolean strict);1530174524;Parse the request body and the given string as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting._<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>_<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert</a> library._@param expectedJsonContent the expected JSON content_@param strict enables strict checking_@since 5.0.5;public RequestMatcher json(final String expectedJsonContent, final boolean strict) {_		return request -> {_			try {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				this.jsonHelper.assertJsonEqual(expectedJsonContent, mockRequest.getBodyAsString(), strict)__			}_			catch (Exception ex) {_				throw new AssertionError("Failed to parse expected or actual JSON request content", ex)__			}_		}__	};parse,the,request,body,and,the,given,string,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,expected,json,content,the,expected,json,content,param,strict,enables,strict,checking,since,5,0,5;public,request,matcher,json,final,string,expected,json,content,final,boolean,strict,return,request,try,mock,client,http,request,mock,request,mock,client,http,request,request,this,json,helper,assert,json,equal,expected,json,content,mock,request,get,body,as,string,strict,catch,exception,ex,throw,new,assertion,error,failed,to,parse,expected,or,actual,json,request,content,ex
ContentRequestMatchers -> public RequestMatcher json(final String expectedJsonContent, final boolean strict);1542613849;Parse the request body and the given string as JSON and assert the two_are "similar" - i.e. they contain the same attribute-value pairs_regardless of formatting._<p>Can compare in two modes, depending on {@code strict} parameter value:_<ul>_<li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>_<li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>_</ul>_<p>Use of this matcher requires the <a_href="http://jsonassert.skyscreamer.org/">JSONassert</a> library._@param expectedJsonContent the expected JSON content_@param strict enables strict checking_@since 5.0.5;public RequestMatcher json(final String expectedJsonContent, final boolean strict) {_		return request -> {_			try {_				MockClientHttpRequest mockRequest = (MockClientHttpRequest) request__				this.jsonHelper.assertJsonEqual(expectedJsonContent, mockRequest.getBodyAsString(), strict)__			}_			catch (Exception ex) {_				throw new AssertionError("Failed to parse expected or actual JSON request content", ex)__			}_		}__	};parse,the,request,body,and,the,given,string,as,json,and,assert,the,two,are,similar,i,e,they,contain,the,same,attribute,value,pairs,regardless,of,formatting,p,can,compare,in,two,modes,depending,on,code,strict,parameter,value,ul,li,code,true,strict,checking,not,extensible,and,strict,array,ordering,li,li,code,false,lenient,checking,extensible,and,non,strict,array,ordering,li,ul,p,use,of,this,matcher,requires,the,a,href,http,jsonassert,skyscreamer,org,jsonassert,a,library,param,expected,json,content,the,expected,json,content,param,strict,enables,strict,checking,since,5,0,5;public,request,matcher,json,final,string,expected,json,content,final,boolean,strict,return,request,try,mock,client,http,request,mock,request,mock,client,http,request,request,this,json,helper,assert,json,equal,expected,json,content,mock,request,get,body,as,string,strict,catch,exception,ex,throw,new,assertion,error,failed,to,parse,expected,or,actual,json,request,content,ex
ContentRequestMatchers -> public RequestMatcher xml(final String expectedXmlContent);1383669853;Parse the request body and the given String as XML and assert that the_two are "similar" - i.e. they contain the same elements and attributes_regardless of order.__<p>Use of this matcher assumes the_<a href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library is available.__@param expectedXmlContent the expected XML content;public RequestMatcher xml(final String expectedXmlContent) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertXmlEqual(expectedXmlContent, request.getBodyAsString())__			}_		}__	};parse,the,request,body,and,the,given,string,as,xml,and,assert,that,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,assumes,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,is,available,param,expected,xml,content,the,expected,xml,content;public,request,matcher,xml,final,string,expected,xml,content,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,xml,equal,expected,xml,content,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher xml(final String expectedXmlContent);1413848647;Parse the request body and the given String as XML and assert that the_two are "similar" - i.e. they contain the same elements and attributes_regardless of order.__<p>Use of this matcher assumes the_<a href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library is available.__@param expectedXmlContent the expected XML content;public RequestMatcher xml(final String expectedXmlContent) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertXmlEqual(expectedXmlContent, request.getBodyAsString())__			}_		}__	};parse,the,request,body,and,the,given,string,as,xml,and,assert,that,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,assumes,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,is,available,param,expected,xml,content,the,expected,xml,content;public,request,matcher,xml,final,string,expected,xml,content,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,xml,equal,expected,xml,content,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher xml(final String expectedXmlContent);1427238287;Parse the request body and the given String as XML and assert that the_two are "similar" - i.e. they contain the same elements and attributes_regardless of order.__<p>Use of this matcher assumes the_<a href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library is available.__@param expectedXmlContent the expected XML content;public RequestMatcher xml(final String expectedXmlContent) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertXmlEqual(expectedXmlContent, request.getBodyAsString())__			}_		}__	};parse,the,request,body,and,the,given,string,as,xml,and,assert,that,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,assumes,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,is,available,param,expected,xml,content,the,expected,xml,content;public,request,matcher,xml,final,string,expected,xml,content,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,xml,equal,expected,xml,content,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher xml(final String expectedXmlContent);1453398153;Parse the request body and the given String as XML and assert that the_two are "similar" - i.e. they contain the same elements and attributes_regardless of order.__<p>Use of this matcher assumes the_<a href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library is available.__@param expectedXmlContent the expected XML content;public RequestMatcher xml(final String expectedXmlContent) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertXmlEqual(expectedXmlContent, request.getBodyAsString())__			}_		}__	};parse,the,request,body,and,the,given,string,as,xml,and,assert,that,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,assumes,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,is,available,param,expected,xml,content,the,expected,xml,content;public,request,matcher,xml,final,string,expected,xml,content,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,xml,equal,expected,xml,content,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher xml(final String expectedXmlContent);1453413905;Parse the request body and the given String as XML and assert that the_two are "similar" - i.e. they contain the same elements and attributes_regardless of order.__<p>Use of this matcher assumes the_<a href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library is available.__@param expectedXmlContent the expected XML content;public RequestMatcher xml(final String expectedXmlContent) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertXmlEqual(expectedXmlContent, request.getBodyAsString())__			}_		}__	};parse,the,request,body,and,the,given,string,as,xml,and,assert,that,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,assumes,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,is,available,param,expected,xml,content,the,expected,xml,content;public,request,matcher,xml,final,string,expected,xml,content,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,xml,equal,expected,xml,content,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher xml(final String expectedXmlContent);1464621363;Parse the request body and the given String as XML and assert that the_two are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher assumes the_<a href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library is available._@param expectedXmlContent the expected XML content;public RequestMatcher xml(final String expectedXmlContent) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertXmlEqual(expectedXmlContent, request.getBodyAsString())__			}_		}__	};parse,the,request,body,and,the,given,string,as,xml,and,assert,that,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,assumes,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,is,available,param,expected,xml,content,the,expected,xml,content;public,request,matcher,xml,final,string,expected,xml,content,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,xml,equal,expected,xml,content,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher xml(final String expectedXmlContent);1470739377;Parse the request body and the given String as XML and assert that the_two are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher assumes the_<a href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library is available._@param expectedXmlContent the expected XML content;public RequestMatcher xml(final String expectedXmlContent) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertXmlEqual(expectedXmlContent, request.getBodyAsString())__			}_		}__	};parse,the,request,body,and,the,given,string,as,xml,and,assert,that,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,assumes,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,is,available,param,expected,xml,content,the,expected,xml,content;public,request,matcher,xml,final,string,expected,xml,content,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,xml,equal,expected,xml,content,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher xml(final String expectedXmlContent);1472464380;Parse the request body and the given String as XML and assert that the_two are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher assumes the_<a href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library is available._@param expectedXmlContent the expected XML content;public RequestMatcher xml(final String expectedXmlContent) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertXmlEqual(expectedXmlContent, request.getBodyAsString())__			}_		}__	};parse,the,request,body,and,the,given,string,as,xml,and,assert,that,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,assumes,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,is,available,param,expected,xml,content,the,expected,xml,content;public,request,matcher,xml,final,string,expected,xml,content,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,xml,equal,expected,xml,content,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher xml(final String expectedXmlContent);1496955179;Parse the request body and the given String as XML and assert that the_two are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher assumes the_<a href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library is available._@param expectedXmlContent the expected XML content;public RequestMatcher xml(final String expectedXmlContent) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertXmlEqual(expectedXmlContent, request.getBodyAsString())__			}_		}__	};parse,the,request,body,and,the,given,string,as,xml,and,assert,that,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,assumes,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,is,available,param,expected,xml,content,the,expected,xml,content;public,request,matcher,xml,final,string,expected,xml,content,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,xml,equal,expected,xml,content,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher xml(final String expectedXmlContent);1497341397;Parse the request body and the given String as XML and assert that the_two are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher assumes the_<a href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library is available._@param expectedXmlContent the expected XML content;public RequestMatcher xml(final String expectedXmlContent) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertXmlEqual(expectedXmlContent, request.getBodyAsString())__			}_		}__	};parse,the,request,body,and,the,given,string,as,xml,and,assert,that,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,assumes,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,is,available,param,expected,xml,content,the,expected,xml,content;public,request,matcher,xml,final,string,expected,xml,content,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,xml,equal,expected,xml,content,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher xml(final String expectedXmlContent);1520940425;Parse the request body and the given String as XML and assert that the_two are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher assumes the_<a href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library is available._@param expectedXmlContent the expected XML content;public RequestMatcher xml(final String expectedXmlContent) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertXmlEqual(expectedXmlContent, request.getBodyAsString())__			}_		}__	};parse,the,request,body,and,the,given,string,as,xml,and,assert,that,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,assumes,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,is,available,param,expected,xml,content,the,expected,xml,content;public,request,matcher,xml,final,string,expected,xml,content,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,xml,equal,expected,xml,content,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher xml(final String expectedXmlContent);1521645162;Parse the request body and the given String as XML and assert that the_two are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher assumes the_<a href="http://xmlunit.sourceforge.net/">XMLUnit<a/> library is available._@param expectedXmlContent the expected XML content;public RequestMatcher xml(final String expectedXmlContent) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertXmlEqual(expectedXmlContent, request.getBodyAsString())__			}_		}__	};parse,the,request,body,and,the,given,string,as,xml,and,assert,that,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,assumes,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,is,available,param,expected,xml,content,the,expected,xml,content;public,request,matcher,xml,final,string,expected,xml,content,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,xml,equal,expected,xml,content,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher xml(final String expectedXmlContent);1530174524;Parse the request body and the given String as XML and assert that the_two are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher assumes the_<a href="http://xmlunit.sourceforge.net/">XMLUnit</a> library is available._@param expectedXmlContent the expected XML content;public RequestMatcher xml(final String expectedXmlContent) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertXmlEqual(expectedXmlContent, request.getBodyAsString())__			}_		}__	};parse,the,request,body,and,the,given,string,as,xml,and,assert,that,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,assumes,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,is,available,param,expected,xml,content,the,expected,xml,content;public,request,matcher,xml,final,string,expected,xml,content,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,xml,equal,expected,xml,content,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher xml(final String expectedXmlContent);1530174524;Parse the request body and the given String as XML and assert that the_two are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher assumes the_<a href="http://xmlunit.sourceforge.net/">XMLUnit</a> library is available._@param expectedXmlContent the expected XML content;public RequestMatcher xml(final String expectedXmlContent) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertXmlEqual(expectedXmlContent, request.getBodyAsString())__			}_		}__	};parse,the,request,body,and,the,given,string,as,xml,and,assert,that,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,assumes,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,is,available,param,expected,xml,content,the,expected,xml,content;public,request,matcher,xml,final,string,expected,xml,content,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,xml,equal,expected,xml,content,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher xml(final String expectedXmlContent);1530174524;Parse the request body and the given String as XML and assert that the_two are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher assumes the_<a href="http://xmlunit.sourceforge.net/">XMLUnit</a> library is available._@param expectedXmlContent the expected XML content;public RequestMatcher xml(final String expectedXmlContent) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertXmlEqual(expectedXmlContent, request.getBodyAsString())__			}_		}__	};parse,the,request,body,and,the,given,string,as,xml,and,assert,that,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,assumes,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,is,available,param,expected,xml,content,the,expected,xml,content;public,request,matcher,xml,final,string,expected,xml,content,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,xml,equal,expected,xml,content,request,get,body,as,string
ContentRequestMatchers -> public RequestMatcher xml(final String expectedXmlContent);1542613849;Parse the request body and the given String as XML and assert that the_two are "similar" - i.e. they contain the same elements and attributes_regardless of order._<p>Use of this matcher assumes the_<a href="http://xmlunit.sourceforge.net/">XMLUnit</a> library is available._@param expectedXmlContent the expected XML content;public RequestMatcher xml(final String expectedXmlContent) {_		return new AbstractXmlRequestMatcher() {_			@Override_			protected void matchInternal(MockClientHttpRequest request) throws Exception {_				xmlHelper.assertXmlEqual(expectedXmlContent, request.getBodyAsString())__			}_		}__	};parse,the,request,body,and,the,given,string,as,xml,and,assert,that,the,two,are,similar,i,e,they,contain,the,same,elements,and,attributes,regardless,of,order,p,use,of,this,matcher,assumes,the,a,href,http,xmlunit,sourceforge,net,xmlunit,a,library,is,available,param,expected,xml,content,the,expected,xml,content;public,request,matcher,xml,final,string,expected,xml,content,return,new,abstract,xml,request,matcher,override,protected,void,match,internal,mock,client,http,request,request,throws,exception,xml,helper,assert,xml,equal,expected,xml,content,request,get,body,as,string
