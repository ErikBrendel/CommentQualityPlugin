commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     this.messagingTemplate = new JmsMessagingTemplate(this.jmsTemplate). }
false;public;0;4;;@Test public void validateJmsTemplate() {     assertSame(this.jmsTemplate, this.messagingTemplate.getJmsTemplate()). }
false;public;0;8;;@Test public void payloadConverterIsConsistentConstructor() {     MessageConverter messageConverter = mock(MessageConverter.class).     given(this.jmsTemplate.getMessageConverter()).willReturn(messageConverter).     JmsMessagingTemplate messagingTemplate = new JmsMessagingTemplate(this.jmsTemplate).     messagingTemplate.afterPropertiesSet().     assertPayloadConverter(messagingTemplate, messageConverter). }
false;public;0;9;;@Test public void payloadConverterIsConsistentSetter() {     MessageConverter messageConverter = mock(MessageConverter.class).     given(this.jmsTemplate.getMessageConverter()).willReturn(messageConverter).     JmsMessagingTemplate messagingTemplate = new JmsMessagingTemplate().     messagingTemplate.setJmsTemplate(this.jmsTemplate).     messagingTemplate.afterPropertiesSet().     assertPayloadConverter(messagingTemplate, messageConverter). }
false;public;0;12;;@Test public void customConverterAlwaysTakesPrecedence() {     MessageConverter messageConverter = mock(MessageConverter.class).     given(this.jmsTemplate.getMessageConverter()).willReturn(messageConverter).     MessageConverter customMessageConverter = mock(MessageConverter.class).     JmsMessagingTemplate messagingTemplate = new JmsMessagingTemplate().     messagingTemplate.setJmsMessageConverter(new MessagingMessageConverter(customMessageConverter)).     messagingTemplate.setJmsTemplate(this.jmsTemplate).     messagingTemplate.afterPropertiesSet().     assertPayloadConverter(messagingTemplate, customMessageConverter). }
false;private;2;8;;private void assertPayloadConverter(JmsMessagingTemplate messagingTemplate, MessageConverter messageConverter) {     MessageConverter jmsMessageConverter = messagingTemplate.getJmsMessageConverter().     assertNotNull(jmsMessageConverter).     assertEquals(MessagingMessageConverter.class, jmsMessageConverter.getClass()).     assertSame(messageConverter, new DirectFieldAccessor(jmsMessageConverter).getPropertyValue("payloadConverter")). }
false;public;0;9;;@Test public void send() {     Destination destination = new Destination() {     }.     Message<String> message = createTextMessage().     this.messagingTemplate.send(destination, message).     verify(this.jmsTemplate).send(eq(destination), this.messageCreator.capture()).     assertTextMessage(this.messageCreator.getValue()). }
false;public;0;8;;@Test public void sendName() {     Message<String> message = createTextMessage().     this.messagingTemplate.send("myQueue", message).     verify(this.jmsTemplate).send(eq("myQueue"), this.messageCreator.capture()).     assertTextMessage(this.messageCreator.getValue()). }
false;public;0;10;;@Test public void sendDefaultDestination() {     Destination destination = new Destination() {     }.     this.messagingTemplate.setDefaultDestination(destination).     Message<String> message = createTextMessage().     this.messagingTemplate.send(message).     verify(this.jmsTemplate).send(eq(destination), this.messageCreator.capture()).     assertTextMessage(this.messageCreator.getValue()). }
false;public;0;9;;@Test public void sendDefaultDestinationName() {     this.messagingTemplate.setDefaultDestinationName("myQueue").     Message<String> message = createTextMessage().     this.messagingTemplate.send(message).     verify(this.jmsTemplate).send(eq("myQueue"), this.messageCreator.capture()).     assertTextMessage(this.messageCreator.getValue()). }
false;public;0;7;;@Test public void sendNoDefaultSet() {     Message<String> message = createTextMessage().     this.thrown.expect(IllegalStateException.class).     this.messagingTemplate.send(message). }
false;public;0;12;;@Test public void sendPropertyInjection() {     JmsMessagingTemplate t = new JmsMessagingTemplate().     t.setJmsTemplate(this.jmsTemplate).     t.setDefaultDestinationName("myQueue").     t.afterPropertiesSet().     Message<String> message = createTextMessage().     t.send(message).     verify(this.jmsTemplate).send(eq("myQueue"), this.messageCreator.capture()).     assertTextMessage(this.messageCreator.getValue()). }
false;public;0;9;;@Test public void convertAndSendPayload() throws JMSException {     Destination destination = new Destination() {     }.     this.messagingTemplate.convertAndSend(destination, "my Payload").     verify(this.jmsTemplate).send(eq(destination), this.messageCreator.capture()).     TextMessage textMessage = createTextMessage(this.messageCreator.getValue()).     assertEquals("my Payload", textMessage.getText()). }
false;public;0;7;;@Test public void convertAndSendPayloadName() throws JMSException {     this.messagingTemplate.convertAndSend("myQueue", "my Payload").     verify(this.jmsTemplate).send(eq("myQueue"), this.messageCreator.capture()).     TextMessage textMessage = createTextMessage(this.messageCreator.getValue()).     assertEquals("my Payload", textMessage.getText()). }
false;public;0;10;;@Test public void convertAndSendDefaultDestination() throws JMSException {     Destination destination = new Destination() {     }.     this.messagingTemplate.setDefaultDestination(destination).     this.messagingTemplate.convertAndSend("my Payload").     verify(this.jmsTemplate).send(eq(destination), this.messageCreator.capture()).     TextMessage textMessage = createTextMessage(this.messageCreator.getValue()).     assertEquals("my Payload", textMessage.getText()). }
false;public;0;9;;@Test public void convertAndSendDefaultDestinationName() throws JMSException {     this.messagingTemplate.setDefaultDestinationName("myQueue").     this.messagingTemplate.convertAndSend("my Payload").     verify(this.jmsTemplate).send(eq("myQueue"), this.messageCreator.capture()).     TextMessage textMessage = createTextMessage(this.messageCreator.getValue()).     assertEquals("my Payload", textMessage.getText()). }
false;public;0;5;;@Test public void convertAndSendNoDefaultSet() throws JMSException {     this.thrown.expect(IllegalStateException.class).     this.messagingTemplate.convertAndSend("my Payload"). }
false;public;2;5;;@Override public javax.jms.Message toMessage(Object object, Session session) throws JMSException, org.springframework.jms.support.converter.MessageConversionException {     throw new org.springframework.jms.support.converter.MessageConversionException("Test exception"). }
false;public;0;17;;@Test public void convertAndSendCustomJmsMessageConverter() throws JMSException {     this.messagingTemplate.setJmsMessageConverter(new SimpleMessageConverter() {          @Override         public javax.jms.Message toMessage(Object object, Session session) throws JMSException, org.springframework.jms.support.converter.MessageConversionException {             throw new org.springframework.jms.support.converter.MessageConversionException("Test exception").         }     }).     this.messagingTemplate.convertAndSend("myQueue", "msg to convert").     verify(this.jmsTemplate).send(eq("myQueue"), this.messageCreator.capture()).     this.thrown.expect(org.springframework.messaging.converter.MessageConversionException.class).     this.thrown.expectMessage(new StringContains("Test exception")).     this.messageCreator.getValue().createMessage(mock(Session.class)). }
false;public;0;10;;@Test public void convertAndSendPayloadAndHeaders() throws JMSException {     Destination destination = new Destination() {     }.     Map<String, Object> headers = new HashMap<>().     headers.put("foo", "bar").     this.messagingTemplate.convertAndSend(destination, "Hello", headers).     verify(this.jmsTemplate).send(eq(destination), this.messageCreator.capture()).     // see createTextMessage     assertTextMessage(this.messageCreator.getValue()). }
false;public;0;9;;@Test public void convertAndSendPayloadAndHeadersName() throws JMSException {     Map<String, Object> headers = new HashMap<>().     headers.put("foo", "bar").     this.messagingTemplate.convertAndSend("myQueue", "Hello", headers).     verify(this.jmsTemplate).send(eq("myQueue"), this.messageCreator.capture()).     // see createTextMessage     assertTextMessage(this.messageCreator.getValue()). }
false;public;0;10;;@Test public void receive() {     Destination destination = new Destination() {     }.     javax.jms.Message jmsMessage = createJmsTextMessage().     given(this.jmsTemplate.receive(destination)).willReturn(jmsMessage).     Message<?> message = this.messagingTemplate.receive(destination).     verify(this.jmsTemplate).receive(destination).     assertTextMessage(message). }
false;public;0;9;;@Test public void receiveName() {     javax.jms.Message jmsMessage = createJmsTextMessage().     given(this.jmsTemplate.receive("myQueue")).willReturn(jmsMessage).     Message<?> message = this.messagingTemplate.receive("myQueue").     verify(this.jmsTemplate).receive("myQueue").     assertTextMessage(message). }
false;public;0;11;;@Test public void receiveDefaultDestination() {     Destination destination = new Destination() {     }.     this.messagingTemplate.setDefaultDestination(destination).     javax.jms.Message jmsMessage = createJmsTextMessage().     given(this.jmsTemplate.receive(destination)).willReturn(jmsMessage).     Message<?> message = this.messagingTemplate.receive().     verify(this.jmsTemplate).receive(destination).     assertTextMessage(message). }
false;public;0;10;;@Test public void receiveDefaultDestinationName() {     this.messagingTemplate.setDefaultDestinationName("myQueue").     javax.jms.Message jmsMessage = createJmsTextMessage().     given(this.jmsTemplate.receive("myQueue")).willReturn(jmsMessage).     Message<?> message = this.messagingTemplate.receive().     verify(this.jmsTemplate).receive("myQueue").     assertTextMessage(message). }
false;public;0;5;;@Test public void receiveNoDefaultSet() {     this.thrown.expect(IllegalStateException.class).     this.messagingTemplate.receive(). }
false;public;0;10;;@Test public void receiveAndConvert() {     Destination destination = new Destination() {     }.     javax.jms.Message jmsMessage = createJmsTextMessage("my Payload").     given(this.jmsTemplate.receive(destination)).willReturn(jmsMessage).     String payload = this.messagingTemplate.receiveAndConvert(destination, String.class).     assertEquals("my Payload", payload).     verify(this.jmsTemplate).receive(destination). }
false;public;0;9;;@Test public void receiveAndConvertName() {     javax.jms.Message jmsMessage = createJmsTextMessage("my Payload").     given(this.jmsTemplate.receive("myQueue")).willReturn(jmsMessage).     String payload = this.messagingTemplate.receiveAndConvert("myQueue", String.class).     assertEquals("my Payload", payload).     verify(this.jmsTemplate).receive("myQueue"). }
false;public;0;11;;@Test public void receiveAndConvertDefaultDestination() {     Destination destination = new Destination() {     }.     this.messagingTemplate.setDefaultDestination(destination).     javax.jms.Message jmsMessage = createJmsTextMessage("my Payload").     given(this.jmsTemplate.receive(destination)).willReturn(jmsMessage).     String payload = this.messagingTemplate.receiveAndConvert(String.class).     assertEquals("my Payload", payload).     verify(this.jmsTemplate).receive(destination). }
false;public;0;10;;@Test public void receiveAndConvertDefaultDestinationName() {     this.messagingTemplate.setDefaultDestinationName("myQueue").     javax.jms.Message jmsMessage = createJmsTextMessage("my Payload").     given(this.jmsTemplate.receive("myQueue")).willReturn(jmsMessage).     String payload = this.messagingTemplate.receiveAndConvert(String.class).     assertEquals("my Payload", payload).     verify(this.jmsTemplate).receive("myQueue"). }
false;public;0;11;;@Test public void receiveAndConvertWithConversion() {     javax.jms.Message jmsMessage = createJmsTextMessage("123").     given(this.jmsTemplate.receive("myQueue")).willReturn(jmsMessage).     this.messagingTemplate.setMessageConverter(new GenericMessageConverter()).     Integer payload = this.messagingTemplate.receiveAndConvert("myQueue", Integer.class).     assertEquals(Integer.valueOf(123), payload).     verify(this.jmsTemplate).receive("myQueue"). }
false;public;0;8;;@Test public void receiveAndConvertNoConverter() {     javax.jms.Message jmsMessage = createJmsTextMessage("Hello").     given(this.jmsTemplate.receive("myQueue")).willReturn(jmsMessage).     this.thrown.expect(org.springframework.messaging.converter.MessageConversionException.class).     this.messagingTemplate.receiveAndConvert("myQueue", Writer.class). }
false;public;0;6;;@Test public void receiveAndConvertNoInput() {     given(this.jmsTemplate.receive("myQueue")).willReturn(null).     assertNull(this.messagingTemplate.receiveAndConvert("myQueue", String.class)). }
false;public;0;11;;@Test public void sendAndReceive() {     Destination destination = new Destination() {     }.     Message<String> request = createTextMessage().     javax.jms.Message replyJmsMessage = createJmsTextMessage().     given(this.jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage).     Message<?> actual = this.messagingTemplate.sendAndReceive(destination, request).     verify(this.jmsTemplate, times(1)).sendAndReceive(eq(destination), any()).     assertTextMessage(actual). }
false;public;0;10;;@Test public void sendAndReceiveName() {     Message<String> request = createTextMessage().     javax.jms.Message replyJmsMessage = createJmsTextMessage().     given(this.jmsTemplate.sendAndReceive(eq("myQueue"), any())).willReturn(replyJmsMessage).     Message<?> actual = this.messagingTemplate.sendAndReceive("myQueue", request).     verify(this.jmsTemplate, times(1)).sendAndReceive(eq("myQueue"), any()).     assertTextMessage(actual). }
false;public;0;12;;@Test public void sendAndReceiveDefaultDestination() {     Destination destination = new Destination() {     }.     this.messagingTemplate.setDefaultDestination(destination).     Message<String> request = createTextMessage().     javax.jms.Message replyJmsMessage = createJmsTextMessage().     given(this.jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage).     Message<?> actual = this.messagingTemplate.sendAndReceive(request).     verify(this.jmsTemplate, times(1)).sendAndReceive(eq(destination), any()).     assertTextMessage(actual). }
false;public;0;11;;@Test public void sendAndReceiveDefaultDestinationName() {     this.messagingTemplate.setDefaultDestinationName("myQueue").     Message<String> request = createTextMessage().     javax.jms.Message replyJmsMessage = createJmsTextMessage().     given(this.jmsTemplate.sendAndReceive(eq("myQueue"), any())).willReturn(replyJmsMessage).     Message<?> actual = this.messagingTemplate.sendAndReceive(request).     verify(this.jmsTemplate, times(1)).sendAndReceive(eq("myQueue"), any()).     assertTextMessage(actual). }
false;public;0;7;;@Test public void sendAndReceiveNoDefaultSet() {     Message<String> message = createTextMessage().     this.thrown.expect(IllegalStateException.class).     this.messagingTemplate.sendAndReceive(message). }
false;public;0;10;;@Test public void convertSendAndReceivePayload() throws JMSException {     Destination destination = new Destination() {     }.     javax.jms.Message replyJmsMessage = createJmsTextMessage("My reply").     given(this.jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage).     String reply = this.messagingTemplate.convertSendAndReceive(destination, "my Payload", String.class).     verify(this.jmsTemplate, times(1)).sendAndReceive(eq(destination), any()).     assertEquals("My reply", reply). }
false;public;0;9;;@Test public void convertSendAndReceivePayloadName() throws JMSException {     javax.jms.Message replyJmsMessage = createJmsTextMessage("My reply").     given(this.jmsTemplate.sendAndReceive(eq("myQueue"), any())).willReturn(replyJmsMessage).     String reply = this.messagingTemplate.convertSendAndReceive("myQueue", "my Payload", String.class).     verify(this.jmsTemplate, times(1)).sendAndReceive(eq("myQueue"), any()).     assertEquals("My reply", reply). }
false;public;0;11;;@Test public void convertSendAndReceiveDefaultDestination() throws JMSException {     Destination destination = new Destination() {     }.     this.messagingTemplate.setDefaultDestination(destination).     javax.jms.Message replyJmsMessage = createJmsTextMessage("My reply").     given(this.jmsTemplate.sendAndReceive(eq(destination), any())).willReturn(replyJmsMessage).     String reply = this.messagingTemplate.convertSendAndReceive("my Payload", String.class).     verify(this.jmsTemplate, times(1)).sendAndReceive(eq(destination), any()).     assertEquals("My reply", reply). }
false;public;0;10;;@Test public void convertSendAndReceiveDefaultDestinationName() throws JMSException {     this.messagingTemplate.setDefaultDestinationName("myQueue").     javax.jms.Message replyJmsMessage = createJmsTextMessage("My reply").     given(this.jmsTemplate.sendAndReceive(eq("myQueue"), any())).willReturn(replyJmsMessage).     String reply = this.messagingTemplate.convertSendAndReceive("my Payload", String.class).     verify(this.jmsTemplate, times(1)).sendAndReceive(eq("myQueue"), any()).     assertEquals("My reply", reply). }
false;public;0;5;;@Test public void convertSendAndReceiveNoDefaultSet() throws JMSException {     this.thrown.expect(IllegalStateException.class).     this.messagingTemplate.convertSendAndReceive("my Payload", String.class). }
false;public;0;12;;@Test public void convertMessageConversionExceptionOnSend() throws JMSException {     Message<String> message = createTextMessage().     MessageConverter messageConverter = mock(MessageConverter.class).     willThrow(org.springframework.jms.support.converter.MessageConversionException.class).given(messageConverter).toMessage(eq(message), any()).     this.messagingTemplate.setJmsMessageConverter(messageConverter).     invokeMessageCreator().     this.thrown.expect(org.springframework.messaging.converter.MessageConversionException.class).     this.messagingTemplate.send("myQueue", message). }
false;public;0;12;;@Test public void convertMessageConversionExceptionOnReceive() throws JMSException {     javax.jms.Message message = createJmsTextMessage().     MessageConverter messageConverter = mock(MessageConverter.class).     willThrow(org.springframework.jms.support.converter.MessageConversionException.class).given(messageConverter).fromMessage(message).     this.messagingTemplate.setJmsMessageConverter(messageConverter).     given(this.jmsTemplate.receive("myQueue")).willReturn(message).     this.thrown.expect(org.springframework.messaging.converter.MessageConversionException.class).     this.messagingTemplate.receive("myQueue"). }
false;public;0;7;;@Test public void convertMessageNotReadableException() throws JMSException {     willThrow(MessageNotReadableException.class).given(this.jmsTemplate).receive("myQueue").     this.thrown.expect(MessagingException.class).     this.messagingTemplate.receive("myQueue"). }
false;public;0;8;;@Test public void convertDestinationResolutionExceptionOnSend() {     Destination destination = new Destination() {     }.     willThrow(DestinationResolutionException.class).given(this.jmsTemplate).send(eq(destination), any()).     this.thrown.expect(org.springframework.messaging.core.DestinationResolutionException.class).     this.messagingTemplate.send(destination, createTextMessage()). }
false;public;0;8;;@Test public void convertDestinationResolutionExceptionOnReceive() {     Destination destination = new Destination() {     }.     willThrow(DestinationResolutionException.class).given(this.jmsTemplate).receive(destination).     this.thrown.expect(org.springframework.messaging.core.DestinationResolutionException.class).     this.messagingTemplate.receive(destination). }
false;public;0;11;;@Test public void convertMessageFormatException() throws JMSException {     Message<String> message = createTextMessage().     MessageConverter messageConverter = mock(MessageConverter.class).     willThrow(MessageFormatException.class).given(messageConverter).toMessage(eq(message), any()).     this.messagingTemplate.setJmsMessageConverter(messageConverter).     invokeMessageCreator().     this.thrown.expect(org.springframework.messaging.converter.MessageConversionException.class).     this.messagingTemplate.send("myQueue", message). }
false;public;0;11;;@Test public void convertMessageNotWritableException() throws JMSException {     Message<String> message = createTextMessage().     MessageConverter messageConverter = mock(MessageConverter.class).     willThrow(MessageNotWriteableException.class).given(messageConverter).toMessage(eq(message), any()).     this.messagingTemplate.setJmsMessageConverter(messageConverter).     invokeMessageCreator().     this.thrown.expect(org.springframework.messaging.converter.MessageConversionException.class).     this.messagingTemplate.send("myQueue", message). }
false;public;0;7;;@Test public void convertInvalidDestinationExceptionOnSendAndReceiveWithName() {     willThrow(InvalidDestinationException.class).given(this.jmsTemplate).sendAndReceive(eq("unknownQueue"), any()).     this.thrown.expect(org.springframework.messaging.core.DestinationResolutionException.class).     this.messagingTemplate.sendAndReceive("unknownQueue", createTextMessage()). }
false;public;0;8;;@Test public void convertInvalidDestinationExceptionOnSendAndReceive() {     Destination destination = new Destination() {     }.     willThrow(InvalidDestinationException.class).given(this.jmsTemplate).sendAndReceive(eq(destination), any()).     this.thrown.expect(org.springframework.messaging.core.DestinationResolutionException.class).     this.messagingTemplate.sendAndReceive(destination, createTextMessage()). }
false;private;0;7;;private void invokeMessageCreator() {     willAnswer(invocation -> {         MessageCreator messageCreator = (MessageCreator) invocation.getArguments()[1].         messageCreator.createMessage(null).         return null.     }).given(this.jmsTemplate).send(eq("myQueue"), any()). }
false;private;1;4;;private Message<String> createTextMessage(String payload) {     return MessageBuilder.withPayload(payload).setHeader("foo", "bar").build(). }
false;private;0;3;;private Message<String> createTextMessage() {     return createTextMessage("Hello"). }
false;private;1;10;;private javax.jms.Message createJmsTextMessage(String payload) {     try {         StubTextMessage jmsMessage = new StubTextMessage(payload).         jmsMessage.setStringProperty("foo", "bar").         return jmsMessage.     } catch (JMSException e) {         throw new IllegalStateException("Should not happen", e).     } }
false;private;0;3;;private javax.jms.Message createJmsTextMessage() {     return createJmsTextMessage("Hello"). }
false;private;1;10;;private void assertTextMessage(MessageCreator messageCreator) {     try {         TextMessage jmsMessage = createTextMessage(messageCreator).         assertEquals("Wrong body message", "Hello", jmsMessage.getText()).         assertEquals("Invalid foo property", "bar", jmsMessage.getStringProperty("foo")).     } catch (JMSException e) {         throw new IllegalStateException("Wrong text message", e).     } }
false;private;1;5;;private void assertTextMessage(Message<?> message) {     assertNotNull("message should not be null", message).     assertEquals("Wrong payload", "Hello", message.getPayload()).     assertEquals("Invalid foo property", "bar", message.getHeaders().get("foo")). }
false;protected;1;9;;protected TextMessage createTextMessage(MessageCreator creator) throws JMSException {     Session mock = mock(Session.class).     given(mock.createTextMessage(BDDMockito.any())).willAnswer((Answer<TextMessage>) invocation -> new StubTextMessage((String) invocation.getArguments()[0])).     javax.jms.Message message = creator.createMessage(mock).     verify(mock).createTextMessage(BDDMockito.any()).     return TextMessage.class.cast(message). }
