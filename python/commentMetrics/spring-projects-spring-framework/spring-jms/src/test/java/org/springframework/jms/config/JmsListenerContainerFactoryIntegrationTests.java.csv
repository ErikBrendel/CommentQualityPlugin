commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     initializeFactory(factory). }
false;public;0;5;;@Test public void messageConverterUsedIfSet() throws JMSException {     this.containerFactory.setMessageConverter(new UpperCaseMessageConverter()).     testMessageConverterIsUsed(). }
false;public;0;7;;@Test public void messagingMessageConverterCanBeUsed() throws JMSException {     MessagingMessageConverter converter = new MessagingMessageConverter().     converter.setPayloadConverter(new UpperCaseMessageConverter()).     this.containerFactory.setMessageConverter(converter).     testMessageConverterIsUsed(). }
false;private;0;9;;private void testMessageConverterIsUsed() throws JMSException {     MethodJmsListenerEndpoint endpoint = createDefaultMethodJmsEndpoint(this.listener.getClass(), "handleIt", String.class, String.class).     Message message = new StubTextMessage("foo-bar").     message.setStringProperty("my-header", "my-value").     invokeListener(endpoint, message).     assertListenerMethodInvocation("handleIt"). }
false;public;0;15;;@Test public void parameterAnnotationWithJdkProxy() throws JMSException {     ProxyFactory pf = new ProxyFactory(sample).     listener = (JmsEndpointSampleInterface) pf.getProxy().     containerFactory.setMessageConverter(new UpperCaseMessageConverter()).     MethodJmsListenerEndpoint endpoint = createDefaultMethodJmsEndpoint(JmsEndpointSampleInterface.class, "handleIt", String.class, String.class).     Message message = new StubTextMessage("foo-bar").     message.setStringProperty("my-header", "my-value").     invokeListener(endpoint, message).     assertListenerMethodInvocation("handleIt"). }
false;public;0;16;;@Test public void parameterAnnotationWithCglibProxy() throws JMSException {     ProxyFactory pf = new ProxyFactory(sample).     pf.setProxyTargetClass(true).     listener = (JmsEndpointSampleBean) pf.getProxy().     containerFactory.setMessageConverter(new UpperCaseMessageConverter()).     MethodJmsListenerEndpoint endpoint = createDefaultMethodJmsEndpoint(JmsEndpointSampleBean.class, "handleIt", String.class, String.class).     Message message = new StubTextMessage("foo-bar").     message.setStringProperty("my-header", "my-value").     invokeListener(endpoint, message).     assertListenerMethodInvocation("handleIt"). }
false;private;2;11;;@SuppressWarnings("unchecked") private void invokeListener(JmsListenerEndpoint endpoint, Message message) throws JMSException {     DefaultMessageListenerContainer messageListenerContainer = containerFactory.createListenerContainer(endpoint).     Object listener = messageListenerContainer.getMessageListener().     if (listener instanceof SessionAwareMessageListener) {         ((SessionAwareMessageListener<Message>) listener).onMessage(message, mock(Session.class)).     } else {         ((MessageListener) listener).onMessage(message).     } }
false;private;1;3;;private void assertListenerMethodInvocation(String methodName) {     assertTrue("Method " + methodName + " should have been invoked", sample.invocations.get(methodName)). }
false;private;2;7;;private MethodJmsListenerEndpoint createMethodJmsEndpoint(DefaultMessageHandlerMethodFactory factory, Method method) {     MethodJmsListenerEndpoint endpoint = new MethodJmsListenerEndpoint().     endpoint.setBean(listener).     endpoint.setMethod(method).     endpoint.setMessageHandlerMethodFactory(factory).     return endpoint. }
false;private;3;3;;private MethodJmsListenerEndpoint createDefaultMethodJmsEndpoint(Class<?> clazz, String methodName, Class<?>... paramTypes) {     return createMethodJmsEndpoint(this.factory, ReflectionUtils.findMethod(clazz, methodName, paramTypes)). }
false;private;1;4;;private void initializeFactory(DefaultMessageHandlerMethodFactory factory) {     factory.setBeanFactory(new StaticListableBeanFactory()).     factory.afterPropertiesSet(). }
false;;2;1;;void handleIt(@Payload String msg, @Header("my-header") String myHeader).
false;public;2;5;;public void handleIt(@Payload String msg, @Header("my-header") String myHeader) {     invocations.put("handleIt", true).     assertEquals("Unexpected payload message", "FOO-BAR", msg).     assertEquals("Unexpected header value", "my-value", myHeader). }
false;public;2;4;;@Override public Message toMessage(Object object, Session session) throws JMSException, MessageConversionException {     return new StubTextMessage(object.toString().toUpperCase()). }
false;public;1;5;;@Override public Object fromMessage(Message message) throws JMSException, MessageConversionException {     String content = ((TextMessage) message).getText().     return content.toUpperCase(). }
