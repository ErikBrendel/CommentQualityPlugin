commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;@Test public void simpleMessageListener() throws Exception {     ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(Config.class, SimpleMessageListenerTestBean.class).     JmsListenerContainerTestFactory factory = context.getBean(JmsListenerContainerTestFactory.class).     assertEquals("One container should have been registered", 1, factory.getListenerContainers().size()).     MessageListenerTestContainer container = factory.getListenerContainers().get(0).     JmsListenerEndpoint endpoint = container.getEndpoint().     assertEquals("Wrong endpoint type", MethodJmsListenerEndpoint.class, endpoint.getClass()).     MethodJmsListenerEndpoint methodEndpoint = (MethodJmsListenerEndpoint) endpoint.     assertEquals(SimpleMessageListenerTestBean.class, methodEndpoint.getBean().getClass()).     assertEquals(SimpleMessageListenerTestBean.class.getMethod("handleIt", String.class), methodEndpoint.getMethod()).     assertEquals(SimpleMessageListenerTestBean.class.getMethod("handleIt", String.class), methodEndpoint.getMostSpecificMethod()).     SimpleMessageListenerContainer listenerContainer = new SimpleMessageListenerContainer().     methodEndpoint.setupListenerContainer(listenerContainer).     assertNotNull(listenerContainer.getMessageListener()).     assertTrue("Should have been started " + container, container.isStarted()).     // Close and stop the listeners     context.close().     assertTrue("Should have been stopped " + container, container.isStopped()). }
false;public;0;23;;@Test public void metaAnnotationIsDiscovered() throws Exception {     ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(Config.class, MetaAnnotationTestBean.class).     try {         JmsListenerContainerTestFactory factory = context.getBean(JmsListenerContainerTestFactory.class).         assertEquals("one container should have been registered", 1, factory.getListenerContainers().size()).         JmsListenerEndpoint endpoint = factory.getListenerContainers().get(0).getEndpoint().         assertEquals("Wrong endpoint type", MethodJmsListenerEndpoint.class, endpoint.getClass()).         MethodJmsListenerEndpoint methodEndpoint = (MethodJmsListenerEndpoint) endpoint.         assertEquals(MetaAnnotationTestBean.class, methodEndpoint.getBean().getClass()).         assertEquals(MetaAnnotationTestBean.class.getMethod("handleIt", String.class), methodEndpoint.getMethod()).         assertEquals(MetaAnnotationTestBean.class.getMethod("handleIt", String.class), methodEndpoint.getMostSpecificMethod()).         assertEquals("metaTestQueue", ((AbstractJmsListenerEndpoint) endpoint).getDestination()).     } finally {         context.close().     } }
false;public;0;27;;@Test public void sendToAnnotationFoundOnInterfaceProxy() throws Exception {     ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(Config.class, ProxyConfig.class, InterfaceProxyTestBean.class).     try {         JmsListenerContainerTestFactory factory = context.getBean(JmsListenerContainerTestFactory.class).         assertEquals("one container should have been registered", 1, factory.getListenerContainers().size()).         JmsListenerEndpoint endpoint = factory.getListenerContainers().get(0).getEndpoint().         assertEquals("Wrong endpoint type", MethodJmsListenerEndpoint.class, endpoint.getClass()).         MethodJmsListenerEndpoint methodEndpoint = (MethodJmsListenerEndpoint) endpoint.         assertTrue(AopUtils.isJdkDynamicProxy(methodEndpoint.getBean())).         assertTrue(methodEndpoint.getBean() instanceof SimpleService).         assertEquals(SimpleService.class.getMethod("handleIt", String.class, String.class), methodEndpoint.getMethod()).         assertEquals(InterfaceProxyTestBean.class.getMethod("handleIt", String.class, String.class), methodEndpoint.getMostSpecificMethod()).         Method method = ReflectionUtils.findMethod(endpoint.getClass(), "getDefaultResponseDestination").         ReflectionUtils.makeAccessible(method).         Object destination = ReflectionUtils.invokeMethod(method, endpoint).         assertEquals("SendTo annotation not found on proxy", "foobar", destination).     } finally {         context.close().     } }
false;public;0;27;;@Test public void sendToAnnotationFoundOnCglibProxy() throws Exception {     ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(Config.class, ProxyConfig.class, ClassProxyTestBean.class).     try {         JmsListenerContainerTestFactory factory = context.getBean(JmsListenerContainerTestFactory.class).         assertEquals("one container should have been registered", 1, factory.getListenerContainers().size()).         JmsListenerEndpoint endpoint = factory.getListenerContainers().get(0).getEndpoint().         assertEquals("Wrong endpoint type", MethodJmsListenerEndpoint.class, endpoint.getClass()).         MethodJmsListenerEndpoint methodEndpoint = (MethodJmsListenerEndpoint) endpoint.         assertTrue(AopUtils.isCglibProxy(methodEndpoint.getBean())).         assertTrue(methodEndpoint.getBean() instanceof ClassProxyTestBean).         assertEquals(ClassProxyTestBean.class.getMethod("handleIt", String.class, String.class), methodEndpoint.getMethod()).         assertEquals(ClassProxyTestBean.class.getMethod("handleIt", String.class, String.class), methodEndpoint.getMostSpecificMethod()).         Method method = ReflectionUtils.findMethod(endpoint.getClass(), "getDefaultResponseDestination").         ReflectionUtils.makeAccessible(method).         Object destination = ReflectionUtils.invokeMethod(method, endpoint).         assertEquals("SendTo annotation not found on proxy", "foobar", destination).     } finally {         context.close().     } }
false;public;0;8;;@Test @SuppressWarnings("resource") public void invalidProxy() {     thrown.expect(BeanCreationException.class).     thrown.expectCause(is(instanceOf(IllegalStateException.class))).     thrown.expectMessage("handleIt2").     new AnnotationConfigApplicationContext(Config.class, ProxyConfig.class, InvalidProxyTestBean.class). }
false;public;1;3;;@JmsListener(destination = "testQueue") public void handleIt(String body) { }
false;public;1;3;;@FooListener public void handleIt(String body) { }
false;public;0;7;;@Bean public JmsListenerAnnotationBeanPostProcessor postProcessor() {     JmsListenerAnnotationBeanPostProcessor postProcessor = new JmsListenerAnnotationBeanPostProcessor().     postProcessor.setContainerFactoryBeanName("testFactory").     postProcessor.setEndpointRegistry(jmsListenerEndpointRegistry()).     return postProcessor. }
false;public;0;4;;@Bean public JmsListenerEndpointRegistry jmsListenerEndpointRegistry() {     return new JmsListenerEndpointRegistry(). }
false;public;0;4;;@Bean public JmsListenerContainerTestFactory testFactory() {     return new JmsListenerContainerTestFactory(). }
false;public;0;4;;@Bean public PlatformTransactionManager transactionManager() {     return mock(PlatformTransactionManager.class). }
false;;2;1;;void handleIt(String value, String body).
false;public;2;6;;@Override @Transactional @JmsListener(destination = "testQueue") @SendTo("foobar") public void handleIt(@Header String value, String body) { }
false;public;2;5;;@Transactional @JmsListener(destination = "testQueue") @SendTo("foobar") public void handleIt(@Header String value, String body) { }
false;public;2;3;;@Override public void handleIt(String value, String body) { }
false;public;1;5;;@Transactional @JmsListener(destination = "testQueue") @SendTo("foobar") public void handleIt2(String body) { }
