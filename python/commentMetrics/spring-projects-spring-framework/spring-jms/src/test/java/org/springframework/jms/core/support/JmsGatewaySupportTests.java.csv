commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected void initGateway() {     test.add("test"). }
false;public;0;16;;@Test public void testJmsGatewaySupportWithConnectionFactory() throws Exception {     ConnectionFactory mockConnectionFactory = mock(ConnectionFactory.class).     final List<String> test = new ArrayList<>(1).     JmsGatewaySupport gateway = new JmsGatewaySupport() {          @Override         protected void initGateway() {             test.add("test").         }     }.     gateway.setConnectionFactory(mockConnectionFactory).     gateway.afterPropertiesSet().     assertEquals("Correct ConnectionFactory", mockConnectionFactory, gateway.getConnectionFactory()).     assertEquals("Correct JmsTemplate", mockConnectionFactory, gateway.getJmsTemplate().getConnectionFactory()).     assertEquals("initGateway called", 1, test.size()). }
false;protected;0;4;;@Override protected void initGateway() {     test.add("test"). }
false;public;0;15;;@Test public void testJmsGatewaySupportWithJmsTemplate() throws Exception {     JmsTemplate template = new JmsTemplate().     final List<String> test = new ArrayList<>(1).     JmsGatewaySupport gateway = new JmsGatewaySupport() {          @Override         protected void initGateway() {             test.add("test").         }     }.     gateway.setJmsTemplate(template).     gateway.afterPropertiesSet().     assertEquals("Correct JmsTemplate", template, gateway.getJmsTemplate()).     assertEquals("initGateway called", 1, test.size()). }
