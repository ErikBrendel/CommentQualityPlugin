commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     initializeFactory(this.factory). }
false;public;0;9;;@Test public void createMessageListenerNoFactory() {     MethodJmsListenerEndpoint endpoint = new MethodJmsListenerEndpoint().     endpoint.setBean(this).     endpoint.setMethod(getTestMethod()).     this.thrown.expect(IllegalStateException.class).     endpoint.createMessageListener(this.container). }
false;public;0;9;;@Test public void createMessageListener() {     MethodJmsListenerEndpoint endpoint = new MethodJmsListenerEndpoint().     endpoint.setBean(this).     endpoint.setMethod(getTestMethod()).     endpoint.setMessageHandlerMethodFactory(this.factory).     assertNotNull(endpoint.createMessageListener(this.container)). }
false;public;0;13;;@Test public void setExtraCollaborators() {     MessageConverter messageConverter = mock(MessageConverter.class).     DestinationResolver destinationResolver = mock(DestinationResolver.class).     this.container.setMessageConverter(messageConverter).     this.container.setDestinationResolver(destinationResolver).     MessagingMessageListenerAdapter listener = createInstance(this.factory, getListenerMethod("resolveObjectPayload", MyBean.class), this.container).     DirectFieldAccessor accessor = new DirectFieldAccessor(listener).     assertSame(messageConverter, accessor.getPropertyValue("messageConverter")).     assertSame(destinationResolver, accessor.getPropertyValue("destinationResolver")). }
false;public;0;8;;@Test public void resolveMessageAndSession() throws JMSException {     MessagingMessageListenerAdapter listener = createDefaultInstance(javax.jms.Message.class, Session.class).     Session session = mock(Session.class).     listener.onMessage(createSimpleJmsTextMessage("test"), session).     assertDefaultListenerMethodInvocation(). }
false;public;0;8;;@Test public void resolveGenericMessage() throws JMSException {     MessagingMessageListenerAdapter listener = createDefaultInstance(Message.class).     Session session = mock(Session.class).     listener.onMessage(createSimpleJmsTextMessage("test"), session).     assertDefaultListenerMethodInvocation(). }
false;public;0;10;;@Test public void resolveHeaderAndPayload() throws JMSException {     MessagingMessageListenerAdapter listener = createDefaultInstance(String.class, int.class).     Session session = mock(Session.class).     StubTextMessage message = createSimpleJmsTextMessage("my payload").     message.setIntProperty("myCounter", 55).     listener.onMessage(message, session).     assertDefaultListenerMethodInvocation(). }
false;public;0;10;;@Test public void resolveCustomHeaderNameAndPayload() throws JMSException {     MessagingMessageListenerAdapter listener = createDefaultInstance(String.class, int.class).     Session session = mock(Session.class).     StubTextMessage message = createSimpleJmsTextMessage("my payload").     message.setIntProperty("myCounter", 24).     listener.onMessage(message, session).     assertDefaultListenerMethodInvocation(). }
false;public;0;10;;@Test public void resolveCustomHeaderNameAndPayloadWithHeaderNameSet() throws JMSException {     MessagingMessageListenerAdapter listener = createDefaultInstance(String.class, int.class).     Session session = mock(Session.class).     StubTextMessage message = createSimpleJmsTextMessage("my payload").     message.setIntProperty("myCounter", 24).     listener.onMessage(message, session).     assertDefaultListenerMethodInvocation(). }
false;public;0;11;;@Test public void resolveHeaders() throws JMSException {     MessagingMessageListenerAdapter listener = createDefaultInstance(String.class, Map.class).     Session session = mock(Session.class).     StubTextMessage message = createSimpleJmsTextMessage("my payload").     message.setIntProperty("customInt", 1234).     message.setJMSMessageID("abcd-1234").     listener.onMessage(message, session).     assertDefaultListenerMethodInvocation(). }
false;public;0;11;;@Test public void resolveMessageHeaders() throws JMSException {     MessagingMessageListenerAdapter listener = createDefaultInstance(MessageHeaders.class).     Session session = mock(Session.class).     StubTextMessage message = createSimpleJmsTextMessage("my payload").     message.setLongProperty("customLong", 4567L).     message.setJMSType("myMessageType").     listener.onMessage(message, session).     assertDefaultListenerMethodInvocation(). }
false;public;0;11;;@Test public void resolveJmsMessageHeaderAccessor() throws JMSException {     MessagingMessageListenerAdapter listener = createDefaultInstance(JmsMessageHeaderAccessor.class).     Session session = mock(Session.class).     StubTextMessage message = createSimpleJmsTextMessage("my payload").     message.setBooleanProperty("customBoolean", true).     message.setJMSPriority(9).     listener.onMessage(message, session).     assertDefaultListenerMethodInvocation(). }
false;public;0;13;;@Test public void resolveObjectPayload() throws JMSException {     MessagingMessageListenerAdapter listener = createDefaultInstance(MyBean.class).     MyBean myBean = new MyBean().     myBean.name = "myBean name".     Session session = mock(Session.class).     ObjectMessage message = mock(ObjectMessage.class).     given(message.getObject()).willReturn(myBean).     listener.onMessage(message, session).     assertDefaultListenerMethodInvocation(). }
false;public;0;9;;@Test public void resolveConvertedPayload() throws JMSException {     MessagingMessageListenerAdapter listener = createDefaultInstance(Integer.class).     Session session = mock(Session.class).     listener.onMessage(createSimpleJmsTextMessage("33"), session).     assertDefaultListenerMethodInvocation(). }
false;public;0;23;;@Test public void processAndReply() throws JMSException {     MessagingMessageListenerAdapter listener = createDefaultInstance(String.class).     String body = "echo text".     String correlationId = "link-1234".     Destination replyDestination = new Destination() {     }.     TextMessage reply = mock(TextMessage.class).     QueueSender queueSender = mock(QueueSender.class).     Session session = mock(Session.class).     given(session.createTextMessage(body)).willReturn(reply).     given(session.createProducer(replyDestination)).willReturn(queueSender).     listener.setDefaultResponseDestination(replyDestination).     StubTextMessage inputMessage = createSimpleJmsTextMessage(body).     inputMessage.setJMSCorrelationID(correlationId).     listener.onMessage(inputMessage, session).     assertDefaultListenerMethodInvocation().     verify(reply).setJMSCorrelationID(correlationId).     verify(queueSender).send(reply).     verify(queueSender).close(). }
false;public;0;9;;@Test public void processAndReplyWithSendToQueue() throws JMSException {     String methodName = "processAndReplyWithSendTo".     SimpleMessageListenerContainer container = new SimpleMessageListenerContainer().     MessagingMessageListenerAdapter listener = createInstance(this.factory, getListenerMethod(methodName, String.class), container).     processAndReplyWithSendTo(listener, "replyDestination", false).     assertListenerMethodInvocation(this.sample, methodName). }
false;public;0;11;;@Test public void processFromTopicAndReplyWithSendToQueue() throws JMSException {     String methodName = "processAndReplyWithSendTo".     SimpleMessageListenerContainer container = new SimpleMessageListenerContainer().     container.setPubSubDomain(true).     container.setReplyPubSubDomain(false).     MessagingMessageListenerAdapter listener = createInstance(this.factory, getListenerMethod(methodName, String.class), container).     processAndReplyWithSendTo(listener, "replyDestination", false).     assertListenerMethodInvocation(this.sample, methodName). }
false;public;0;10;;@Test public void processAndReplyWithSendToTopic() throws JMSException {     String methodName = "processAndReplyWithSendTo".     SimpleMessageListenerContainer container = new SimpleMessageListenerContainer().     container.setPubSubDomain(true).     MessagingMessageListenerAdapter listener = createInstance(this.factory, getListenerMethod(methodName, String.class), container).     processAndReplyWithSendTo(listener, "replyDestination", true).     assertListenerMethodInvocation(this.sample, methodName). }
false;public;0;10;;@Test public void processFromQueueAndReplyWithSendToTopic() throws JMSException {     String methodName = "processAndReplyWithSendTo".     SimpleMessageListenerContainer container = new SimpleMessageListenerContainer().     container.setReplyPubSubDomain(true).     MessagingMessageListenerAdapter listener = createInstance(this.factory, getListenerMethod(methodName, String.class), container).     processAndReplyWithSendTo(listener, "replyDestination", true).     assertListenerMethodInvocation(this.sample, methodName). }
false;public;0;6;;@Test public void processAndReplyWithDefaultSendTo() throws JMSException {     MessagingMessageListenerAdapter listener = createDefaultInstance(String.class).     processAndReplyWithSendTo(listener, "defaultReply", false).     assertDefaultListenerMethodInvocation(). }
false;public;0;11;;@Test public void processAndReplyWithCustomReplyQosSettings() throws JMSException {     String methodName = "processAndReplyWithSendTo".     SimpleMessageListenerContainer container = new SimpleMessageListenerContainer().     QosSettings replyQosSettings = new QosSettings(1, 6, 6000).     container.setReplyQosSettings(replyQosSettings).     MessagingMessageListenerAdapter listener = createInstance(this.factory, getListenerMethod(methodName, String.class), container).     processAndReplyWithSendTo(listener, "replyDestination", false, replyQosSettings).     assertListenerMethodInvocation(this.sample, methodName). }
false;public;0;10;;@Test public void processAndReplyWithNullReplyQosSettings() throws JMSException {     String methodName = "processAndReplyWithSendTo".     SimpleMessageListenerContainer container = new SimpleMessageListenerContainer().     container.setReplyQosSettings(null).     MessagingMessageListenerAdapter listener = createInstance(this.factory, getListenerMethod(methodName, String.class), container).     processAndReplyWithSendTo(listener, "replyDestination", false).     assertListenerMethodInvocation(this.sample, methodName). }
false;private;3;4;;private void processAndReplyWithSendTo(MessagingMessageListenerAdapter listener, String replyDestinationName, boolean pubSubDomain) throws JMSException {     processAndReplyWithSendTo(listener, replyDestinationName, pubSubDomain, null). }
false;private;4;33;;private void processAndReplyWithSendTo(MessagingMessageListenerAdapter listener, String replyDestinationName, boolean pubSubDomain, QosSettings replyQosSettings) throws JMSException {     String body = "echo text".     String correlationId = "link-1234".     Destination replyDestination = new Destination() {     }.     DestinationResolver destinationResolver = mock(DestinationResolver.class).     TextMessage reply = mock(TextMessage.class).     QueueSender queueSender = mock(QueueSender.class).     Session session = mock(Session.class).     given(destinationResolver.resolveDestinationName(session, replyDestinationName, pubSubDomain)).willReturn(replyDestination).     given(session.createTextMessage(body)).willReturn(reply).     given(session.createProducer(replyDestination)).willReturn(queueSender).     listener.setDestinationResolver(destinationResolver).     StubTextMessage inputMessage = createSimpleJmsTextMessage(body).     inputMessage.setJMSCorrelationID(correlationId).     listener.onMessage(inputMessage, session).     verify(destinationResolver).resolveDestinationName(session, replyDestinationName, pubSubDomain).     verify(reply).setJMSCorrelationID(correlationId).     if (replyQosSettings != null) {         verify(queueSender).send(reply, replyQosSettings.getDeliveryMode(), replyQosSettings.getPriority(), replyQosSettings.getTimeToLive()).     } else {         verify(queueSender).send(reply).     }     verify(queueSender).close(). }
false;public;0;12;;@Test public void emptySendTo() throws JMSException {     MessagingMessageListenerAdapter listener = createDefaultInstance(String.class).     TextMessage reply = mock(TextMessage.class).     Session session = mock(Session.class).     given(session.createTextMessage("content")).willReturn(reply).     this.thrown.expect(ReplyFailureException.class).     this.thrown.expectCause(Matchers.isA(InvalidDestinationException.class)).     listener.onMessage(createSimpleJmsTextMessage("content"), session). }
false;public;0;7;;@Test public void invalidSendTo() {     this.thrown.expect(IllegalStateException.class).     this.thrown.expectMessage("firstDestination").     this.thrown.expectMessage("secondDestination").     createDefaultInstance(String.class). }
false;public;0;14;;@Test public void validatePayloadValid() throws JMSException {     String methodName = "validatePayload".     DefaultMessageHandlerMethodFactory customFactory = new DefaultMessageHandlerMethodFactory().     customFactory.setValidator(testValidator("invalid value")).     initializeFactory(customFactory).     Method method = getListenerMethod(methodName, String.class).     MessagingMessageListenerAdapter listener = createInstance(customFactory, method).     Session session = mock(Session.class).     // test is a valid value     listener.onMessage(createSimpleJmsTextMessage("test"), session).     assertListenerMethodInvocation(this.sample, methodName). }
false;public;0;13;;@Test public void validatePayloadInvalid() throws JMSException {     DefaultMessageHandlerMethodFactory customFactory = new DefaultMessageHandlerMethodFactory().     customFactory.setValidator(testValidator("invalid value")).     Method method = getListenerMethod("validatePayload", String.class).     MessagingMessageListenerAdapter listener = createInstance(customFactory, method).     Session session = mock(Session.class).     this.thrown.expect(ListenerExecutionFailedException.class).     // test is an invalid value     listener.onMessage(createSimpleJmsTextMessage("invalid value"), session). }
false;public;0;10;;// failure scenario @Test public void invalidPayloadType() throws JMSException {     MessagingMessageListenerAdapter listener = createDefaultInstance(Integer.class).     Session session = mock(Session.class).     this.thrown.expect(ListenerExecutionFailedException.class).     this.thrown.expectCause(Matchers.isA(MessageConversionException.class)).     // ref to method     this.thrown.expectMessage(getDefaultListenerMethod(Integer.class).toGenericString()).     // test is not a valid integer     listener.onMessage(createSimpleJmsTextMessage("test"), session). }
false;public;0;9;;@Test public void invalidMessagePayloadType() throws JMSException {     MessagingMessageListenerAdapter listener = createDefaultInstance(Message.class).     Session session = mock(Session.class).     this.thrown.expect(ListenerExecutionFailedException.class).     this.thrown.expectCause(Matchers.isA(MessageConversionException.class)).     // Message<String> as Message<Integer>     listener.onMessage(createSimpleJmsTextMessage("test"), session). }
false;private;3;9;;private MessagingMessageListenerAdapter createInstance(DefaultMessageHandlerMethodFactory factory, Method method, MessageListenerContainer container) {     MethodJmsListenerEndpoint endpoint = new MethodJmsListenerEndpoint().     endpoint.setBean(this.sample).     endpoint.setMethod(method).     endpoint.setMessageHandlerMethodFactory(factory).     return endpoint.createMessageListener(container). }
false;private;2;3;;private MessagingMessageListenerAdapter createInstance(DefaultMessageHandlerMethodFactory factory, Method method) {     return createInstance(factory, method, new SimpleMessageListenerContainer()). }
false;private;1;3;;private MessagingMessageListenerAdapter createDefaultInstance(Class<?>... parameterTypes) {     return createInstance(this.factory, getDefaultListenerMethod(parameterTypes)). }
false;private;1;3;;private StubTextMessage createSimpleJmsTextMessage(String body) {     return new StubTextMessage(body). }
false;private;2;5;;private Method getListenerMethod(String methodName, Class<?>... parameterTypes) {     Method method = ReflectionUtils.findMethod(JmsEndpointSampleBean.class, methodName, parameterTypes).     assertNotNull("no method found with name " + methodName + " and parameters " + Arrays.toString(parameterTypes)).     return method. }
false;private;1;3;;private Method getDefaultListenerMethod(Class<?>... parameterTypes) {     return getListenerMethod(this.name.getMethodName(), parameterTypes). }
false;private;0;3;;private void assertDefaultListenerMethodInvocation() {     assertListenerMethodInvocation(this.sample, this.name.getMethodName()). }
false;private;2;3;;private void assertListenerMethodInvocation(JmsEndpointSampleBean bean, String methodName) {     assertTrue("Method " + methodName + " should have been invoked", bean.invocations.get(methodName)). }
false;private;1;4;;private void initializeFactory(DefaultMessageHandlerMethodFactory factory) {     factory.setBeanFactory(new StaticListableBeanFactory()).     factory.afterPropertiesSet(). }
false;public;1;4;;@Override public boolean supports(Class<?> clazz) {     return String.class.isAssignableFrom(clazz). }
false;public;2;7;;@Override public void validate(@Nullable Object target, Errors errors) {     String value = (String) target.     if (invalidValue.equals(value)) {         errors.reject("not a valid value").     } }
false;private;1;15;;private Validator testValidator(final String invalidValue) {     return new Validator() {          @Override         public boolean supports(Class<?> clazz) {             return String.class.isAssignableFrom(clazz).         }          @Override         public void validate(@Nullable Object target, Errors errors) {             String value = (String) target.             if (invalidValue.equals(value)) {                 errors.reject("not a valid value").             }         }     }. }
false;private;0;3;;private Method getTestMethod() {     return ReflectionUtils.findMethod(MethodJmsListenerEndpointTests.class, this.name.getMethodName()). }
false;public;2;5;;public void resolveMessageAndSession(javax.jms.Message message, Session session) {     this.invocations.put("resolveMessageAndSession", true).     assertNotNull("Message not injected", message).     assertNotNull("Session not injected", session). }
false;public;1;5;;public void resolveGenericMessage(Message<String> message) {     this.invocations.put("resolveGenericMessage", true).     assertNotNull("Generic message not injected", message).     assertEquals("Wrong message payload", "test", message.getPayload()). }
false;public;2;5;;public void resolveHeaderAndPayload(@Payload String content, @Header int myCounter) {     this.invocations.put("resolveHeaderAndPayload", true).     assertEquals("Wrong @Payload resolution", "my payload", content).     assertEquals("Wrong @Header resolution", 55, myCounter). }
false;public;2;5;;public void resolveCustomHeaderNameAndPayload(@Payload String content, @Header("myCounter") int counter) {     this.invocations.put("resolveCustomHeaderNameAndPayload", true).     assertEquals("Wrong @Payload resolution", "my payload", content).     assertEquals("Wrong @Header resolution", 24, counter). }
false;public;2;5;;public void resolveCustomHeaderNameAndPayloadWithHeaderNameSet(@Payload String content, @Header(name = "myCounter") int counter) {     this.invocations.put("resolveCustomHeaderNameAndPayloadWithHeaderNameSet", true).     assertEquals("Wrong @Payload resolution", "my payload", content).     assertEquals("Wrong @Header resolution", 24, counter). }
false;public;2;7;;public void resolveHeaders(String content, @Headers Map<String, Object> headers) {     this.invocations.put("resolveHeaders", true).     assertEquals("Wrong payload resolution", "my payload", content).     assertNotNull("headers not injected", headers).     assertEquals("Missing JMS message id header", "abcd-1234", headers.get(JmsHeaders.MESSAGE_ID)).     assertEquals("Missing custom header", 1234, headers.get("customInt")). }
false;public;1;6;;public void resolveMessageHeaders(MessageHeaders headers) {     this.invocations.put("resolveMessageHeaders", true).     assertNotNull("MessageHeaders not injected", headers).     assertEquals("Missing JMS message type header", "myMessageType", headers.get(JmsHeaders.TYPE)).     assertEquals("Missing custom header", 4567L, (long) headers.get("customLong"), 0.0). }
false;public;1;6;;public void resolveJmsMessageHeaderAccessor(JmsMessageHeaderAccessor headers) {     this.invocations.put("resolveJmsMessageHeaderAccessor", true).     assertNotNull("MessageHeaders not injected", headers).     assertEquals("Missing JMS message priority header", Integer.valueOf(9), headers.getPriority()).     assertEquals("Missing custom header", true, headers.getHeader("customBoolean")). }
false;public;1;5;;public void resolveObjectPayload(MyBean bean) {     this.invocations.put("resolveObjectPayload", true).     assertNotNull("Object payload not injected", bean).     assertEquals("Wrong content for payload", "myBean name", bean.name). }
false;public;1;5;;public void resolveConvertedPayload(Integer counter) {     this.invocations.put("resolveConvertedPayload", true).     assertNotNull("Payload not injected", counter).     assertEquals("Wrong content for payload", Integer.valueOf(33), counter). }
false;public;1;4;;public String processAndReply(@Payload String content) {     this.invocations.put("processAndReply", true).     return content. }
false;public;1;5;;@SendTo("replyDestination") public String processAndReplyWithSendTo(String content) {     this.invocations.put("processAndReplyWithSendTo", true).     return content. }
false;public;1;4;;public String processAndReplyWithDefaultSendTo(String content) {     this.invocations.put("processAndReplyWithDefaultSendTo", true).     return content. }
false;public;1;5;;@SendTo("") public String emptySendTo(String content) {     this.invocations.put("emptySendTo", true).     return content. }
false;public;1;5;;@SendTo({ "firstDestination", "secondDestination" }) public String invalidSendTo(String content) {     this.invocations.put("invalidSendTo", true).     return content. }
false;public;1;3;;public void validatePayload(@Validated String payload) {     this.invocations.put("validatePayload", true). }
false;public;1;3;;public void invalidPayloadType(@Payload Integer payload) {     throw new IllegalStateException("Should never be called."). }
false;public;1;3;;public void invalidMessagePayloadType(Message<Integer> message) {     throw new IllegalStateException("Should never be called."). }
