commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setUpMocks() throws Exception {     mockConnectionFactory = mock(QueueConnectionFactory.class).     mockConnection = mock(QueueConnection.class).     mockSession = mock(QueueSession.class).     mockQueue = mock(Queue.class).     given(mockConnectionFactory.createConnection()).willReturn(mockConnection).     given(mockConnection.createSession(false, Session.AUTO_ACKNOWLEDGE)).willReturn(mockSession). }
false;public;0;4;;@Test public void testJmsInvokerProxyFactoryBeanAndServiceExporter() throws Throwable {     doTestJmsInvokerProxyFactoryBeanAndServiceExporter(false). }
false;public;0;5;;@Test public void testJmsInvokerProxyFactoryBeanAndServiceExporterWithDynamicQueue() throws Throwable {     given(mockSession.createQueue("myQueue")).willReturn(mockQueue).     doTestJmsInvokerProxyFactoryBeanAndServiceExporter(true). }
false;protected;3;4;;@Override protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException {     // faking no message received     return null. }
false;public;0;20;;@Test public void receiveTimeoutExpired() {     JmsInvokerProxyFactoryBean pfb = new JmsInvokerProxyFactoryBean() {          @Override         protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException {             // faking no message received             return null.         }     }.     pfb.setServiceInterface(ITestBean.class).     pfb.setConnectionFactory(this.mockConnectionFactory).     pfb.setQueue(this.mockQueue).     pfb.setReceiveTimeout(1500).     pfb.afterPropertiesSet().     ITestBean proxy = (ITestBean) pfb.getObject().     thrown.expect(RemoteTimeoutException.class).     thrown.expectMessage("1500 ms").     thrown.expectMessage("getAge").     proxy.getAge(). }
false;protected;3;9;;@Override protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException {     Session mockExporterSession = mock(Session.class).     ResponseStoringProducer mockProducer = new ResponseStoringProducer().     given(mockExporterSession.createProducer(requestMessage.getJMSReplyTo())).willReturn(mockProducer).     exporter.onMessage(requestMessage, mockExporterSession).     assertTrue(mockProducer.closed).     return mockProducer.response. }
false;private;1;55;;private void doTestJmsInvokerProxyFactoryBeanAndServiceExporter(boolean dynamicQueue) throws Throwable {     TestBean target = new TestBean("myname", 99).     final JmsInvokerServiceExporter exporter = new JmsInvokerServiceExporter().     exporter.setServiceInterface(ITestBean.class).     exporter.setService(target).     exporter.setMessageConverter(new MockSimpleMessageConverter()).     exporter.afterPropertiesSet().     JmsInvokerProxyFactoryBean pfb = new JmsInvokerProxyFactoryBean() {          @Override         protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException {             Session mockExporterSession = mock(Session.class).             ResponseStoringProducer mockProducer = new ResponseStoringProducer().             given(mockExporterSession.createProducer(requestMessage.getJMSReplyTo())).willReturn(mockProducer).             exporter.onMessage(requestMessage, mockExporterSession).             assertTrue(mockProducer.closed).             return mockProducer.response.         }     }.     pfb.setServiceInterface(ITestBean.class).     pfb.setConnectionFactory(this.mockConnectionFactory).     if (dynamicQueue) {         pfb.setQueueName("myQueue").     } else {         pfb.setQueue(this.mockQueue).     }     pfb.setMessageConverter(new MockSimpleMessageConverter()).     pfb.afterPropertiesSet().     ITestBean proxy = (ITestBean) pfb.getObject().     assertEquals("myname", proxy.getName()).     assertEquals(99, proxy.getAge()).     proxy.setAge(50).     assertEquals(50, proxy.getAge()).     proxy.setStringArray(new String[] { "str1", "str2" }).     assertTrue(Arrays.equals(new String[] { "str1", "str2" }, proxy.getStringArray())).     try {         proxy.exceptional(new IllegalStateException()).         fail("Should have thrown IllegalStateException").     } catch (IllegalStateException ex) {     // expected     }     try {         proxy.exceptional(new IllegalAccessException()).         fail("Should have thrown IllegalAccessException").     } catch (IllegalAccessException ex) {     // expected     } }
false;public;1;3;;@Override public void setDisableMessageID(boolean b) throws JMSException { }
false;public;0;4;;@Override public boolean getDisableMessageID() throws JMSException {     return false. }
false;public;1;3;;@Override public void setDisableMessageTimestamp(boolean b) throws JMSException { }
false;public;0;4;;@Override public boolean getDisableMessageTimestamp() throws JMSException {     return false. }
false;public;1;3;;@Override public void setDeliveryMode(int i) throws JMSException { }
false;public;0;4;;@Override public int getDeliveryMode() throws JMSException {     return 0. }
false;public;1;3;;@Override public void setPriority(int i) throws JMSException { }
false;public;0;4;;@Override public int getPriority() throws JMSException {     return 0. }
false;public;1;3;;@Override public void setTimeToLive(long l) throws JMSException { }
false;public;0;4;;@Override public long getTimeToLive() throws JMSException {     return 0. }
false;public;1;3;;@Override public void setDeliveryDelay(long deliveryDelay) throws JMSException { }
false;public;0;4;;@Override public long getDeliveryDelay() throws JMSException {     return 0. }
false;public;0;4;;@Override public Destination getDestination() throws JMSException {     return null. }
false;public;0;4;;@Override public void close() throws JMSException {     this.closed = true. }
false;public;1;4;;@Override public void send(Message message) throws JMSException {     this.response = message. }
false;public;4;3;;@Override public void send(Message message, int i, int i1, long l) throws JMSException { }
false;public;2;3;;@Override public void send(Destination destination, Message message) throws JMSException { }
false;public;5;3;;@Override public void send(Destination destination, Message message, int i, int i1, long l) throws JMSException { }
false;public;2;3;;@Override public void send(Message message, CompletionListener completionListener) throws JMSException { }
false;public;5;3;;@Override public void send(Message message, int deliveryMode, int priority, long timeToLive, CompletionListener completionListener) throws JMSException { }
false;public;3;3;;@Override public void send(Destination destination, Message message, CompletionListener completionListener) throws JMSException { }
false;public;6;3;;@Override public void send(Destination destination, Message message, int deliveryMode, int priority, long timeToLive, CompletionListener completionListener) throws JMSException { }
false;public;1;4;;@Override public void setObject(Serializable serializable) throws JMSException {     this.serializable = serializable. }
false;public;0;4;;@Override public Serializable getObject() throws JMSException {     return serializable. }
false;public;0;4;;@Override public String getJMSMessageID() throws JMSException {     return null. }
false;public;1;3;;@Override public void setJMSMessageID(String string) throws JMSException { }
false;public;0;4;;@Override public long getJMSTimestamp() throws JMSException {     return 0. }
false;public;1;3;;@Override public void setJMSTimestamp(long l) throws JMSException { }
false;public;0;4;;@Override public byte[] getJMSCorrelationIDAsBytes() throws JMSException {     return new byte[0]. }
false;public;1;3;;@Override public void setJMSCorrelationIDAsBytes(byte[] bytes) throws JMSException { }
false;public;1;3;;@Override public void setJMSCorrelationID(String string) throws JMSException { }
false;public;0;4;;@Override public String getJMSCorrelationID() throws JMSException {     return null. }
false;public;0;4;;@Override public Destination getJMSReplyTo() throws JMSException {     return replyTo. }
false;public;1;4;;@Override public void setJMSReplyTo(Destination destination) throws JMSException {     this.replyTo = destination. }
false;public;0;4;;@Override public Destination getJMSDestination() throws JMSException {     return null. }
false;public;1;3;;@Override public void setJMSDestination(Destination destination) throws JMSException { }
false;public;0;4;;@Override public int getJMSDeliveryMode() throws JMSException {     return 0. }
false;public;1;3;;@Override public void setJMSDeliveryMode(int i) throws JMSException { }
false;public;0;4;;@Override public boolean getJMSRedelivered() throws JMSException {     return false. }
false;public;1;3;;@Override public void setJMSRedelivered(boolean b) throws JMSException { }
false;public;0;4;;@Override public String getJMSType() throws JMSException {     return null. }
false;public;1;3;;@Override public void setJMSType(String string) throws JMSException { }
false;public;0;4;;@Override public long getJMSExpiration() throws JMSException {     return 0. }
false;public;1;3;;@Override public void setJMSExpiration(long l) throws JMSException { }
false;public;0;4;;@Override public int getJMSPriority() throws JMSException {     return 0. }
false;public;1;3;;@Override public void setJMSPriority(int i) throws JMSException { }
false;public;0;4;;@Override public long getJMSDeliveryTime() throws JMSException {     return 0. }
false;public;1;3;;@Override public void setJMSDeliveryTime(long deliveryTime) throws JMSException { }
false;public;1;4;;@Override public <T> T getBody(Class<T> c) throws JMSException {     return null. }
false;public;1;4;;@Override public boolean isBodyAssignableTo(Class c) throws JMSException {     return false. }
false;public;0;3;;@Override public void clearProperties() throws JMSException { }
false;public;1;4;;@Override public boolean propertyExists(String string) throws JMSException {     return false. }
false;public;1;4;;@Override public boolean getBooleanProperty(String string) throws JMSException {     return false. }
false;public;1;4;;@Override public byte getByteProperty(String string) throws JMSException {     return 0. }
false;public;1;4;;@Override public short getShortProperty(String string) throws JMSException {     return 0. }
false;public;1;4;;@Override public int getIntProperty(String string) throws JMSException {     return 0. }
false;public;1;4;;@Override public long getLongProperty(String string) throws JMSException {     return 0. }
false;public;1;4;;@Override public float getFloatProperty(String string) throws JMSException {     return 0. }
false;public;1;4;;@Override public double getDoubleProperty(String string) throws JMSException {     return 0. }
false;public;1;4;;@Override public String getStringProperty(String string) throws JMSException {     return null. }
false;public;1;4;;@Override public Object getObjectProperty(String string) throws JMSException {     return null. }
false;public;0;4;;@Override public Enumeration getPropertyNames() throws JMSException {     return null. }
false;public;2;3;;@Override public void setBooleanProperty(String string, boolean b) throws JMSException { }
false;public;2;3;;@Override public void setByteProperty(String string, byte b) throws JMSException { }
false;public;2;3;;@Override public void setShortProperty(String string, short i) throws JMSException { }
false;public;2;3;;@Override public void setIntProperty(String string, int i) throws JMSException { }
false;public;2;3;;@Override public void setLongProperty(String string, long l) throws JMSException { }
false;public;2;3;;@Override public void setFloatProperty(String string, float v) throws JMSException { }
false;public;2;3;;@Override public void setDoubleProperty(String string, double v) throws JMSException { }
false;public;2;3;;@Override public void setStringProperty(String string, String string1) throws JMSException { }
false;public;2;3;;@Override public void setObjectProperty(String string, Object object) throws JMSException { }
false;public;0;3;;@Override public void acknowledge() throws JMSException { }
false;public;0;3;;@Override public void clearBody() throws JMSException { }
false;public;2;4;;@Override public Message toMessage(Object object, Session session) throws JMSException, MessageConversionException {     return new MockObjectMessage((Serializable) object). }
