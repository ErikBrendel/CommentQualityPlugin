commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     initializeFactory(factory). }
false;public;0;21;;@Test public void buildMessageWithStandardMessage() throws JMSException {     Destination replyTo = new Destination() {     }.     Message<String> result = MessageBuilder.withPayload("Response").setHeader("foo", "bar").setHeader(JmsHeaders.TYPE, "msg_type").setHeader(JmsHeaders.REPLY_TO, replyTo).build().     Session session = mock(Session.class).     given(session.createTextMessage("Response")).willReturn(new StubTextMessage("Response")).     MessagingMessageListenerAdapter listener = getSimpleInstance("echo", Message.class).     javax.jms.Message replyMessage = listener.buildMessage(session, result).     verify(session).createTextMessage("Response").     assertNotNull("reply should never be null", replyMessage).     assertEquals("Response", ((TextMessage) replyMessage).getText()).     assertEquals("custom header not copied", "bar", replyMessage.getStringProperty("foo")).     assertEquals("type header not copied", "msg_type", replyMessage.getJMSType()).     assertEquals("replyTo header not copied", replyTo, replyMessage.getJMSReplyTo()). }
false;public;0;18;;@Test public void exceptionInListener() {     javax.jms.Message message = new StubTextMessage("foo").     Session session = mock(Session.class).     MessagingMessageListenerAdapter listener = getSimpleInstance("fail", String.class).     try {         listener.onMessage(message, session).         fail("Should have thrown an exception").     } catch (JMSException ex) {         fail("Should not have thrown a JMS exception").     } catch (ListenerExecutionFailedException ex) {         assertEquals(IllegalArgumentException.class, ex.getCause().getClass()).         assertEquals("Expected test exception", ex.getCause().getMessage()).     } }
false;public;0;17;;@Test public void exceptionInInvocation() {     javax.jms.Message message = new StubTextMessage("foo").     Session session = mock(Session.class).     MessagingMessageListenerAdapter listener = getSimpleInstance("wrongParam", Integer.class).     try {         listener.onMessage(message, session).         fail("Should have thrown an exception").     } catch (JMSException ex) {         fail("Should not have thrown a JMS exception").     } catch (ListenerExecutionFailedException ex) {         assertEquals(MessageConversionException.class, ex.getCause().getClass()).     } }
false;public;0;12;;@Test public void payloadConversionLazilyInvoked() throws JMSException {     javax.jms.Message jmsMessage = mock(javax.jms.Message.class).     MessageConverter messageConverter = mock(MessageConverter.class).     given(messageConverter.fromMessage(jmsMessage)).willReturn("FooBar").     MessagingMessageListenerAdapter listener = getSimpleInstance("simple", Message.class).     listener.setMessageConverter(messageConverter).     Message<?> message = listener.toMessagingMessage(jmsMessage).     verify(messageConverter, never()).fromMessage(jmsMessage).     assertEquals("FooBar", message.getPayload()).     verify(messageConverter, times(1)).fromMessage(jmsMessage). }
false;public;0;11;;@Test public void headerConversionLazilyInvoked() throws JMSException {     javax.jms.Message jmsMessage = mock(javax.jms.Message.class).     when(jmsMessage.getPropertyNames()).thenThrow(new IllegalArgumentException("Header failure")).     MessagingMessageListenerAdapter listener = getSimpleInstance("simple", Message.class).     Message<?> message = listener.toMessagingMessage(jmsMessage).     this.thrown.expect(IllegalArgumentException.class).     this.thrown.expectMessage("Header failure").     // Triggers headers resolution     message.getHeaders(). }
false;public;0;13;;@Test public void incomingMessageUsesMessageConverter() throws JMSException {     javax.jms.Message jmsMessage = mock(javax.jms.Message.class).     Session session = mock(Session.class).     MessageConverter messageConverter = mock(MessageConverter.class).     given(messageConverter.fromMessage(jmsMessage)).willReturn("FooBar").     MessagingMessageListenerAdapter listener = getSimpleInstance("simple", Message.class).     listener.setMessageConverter(messageConverter).     listener.onMessage(jmsMessage, session).     verify(messageConverter, times(1)).fromMessage(jmsMessage).     assertEquals(1, sample.simples.size()).     assertEquals("FooBar", sample.simples.get(0).getPayload()). }
false;public;0;15;;@Test public void replyUsesMessageConverterForPayload() throws JMSException {     Session session = mock(Session.class).     MessageConverter messageConverter = mock(MessageConverter.class).     given(messageConverter.toMessage("Response", session)).willReturn(new StubTextMessage("Response")).     Message<String> result = MessageBuilder.withPayload("Response").build().     MessagingMessageListenerAdapter listener = getSimpleInstance("echo", Message.class).     listener.setMessageConverter(messageConverter).     javax.jms.Message replyMessage = listener.buildMessage(session, result).     verify(messageConverter, times(1)).toMessage("Response", session).     assertNotNull("reply should never be null", replyMessage).     assertEquals("Response", ((TextMessage) replyMessage).getText()). }
false;public;0;19;;@Test public void replyPayloadToQueue() throws JMSException {     Session session = mock(Session.class).     Queue replyDestination = mock(Queue.class).     given(session.createQueue("queueOut")).willReturn(replyDestination).     MessageProducer messageProducer = mock(MessageProducer.class).     TextMessage responseMessage = mock(TextMessage.class).     given(session.createTextMessage("Response")).willReturn(responseMessage).     given(session.createProducer(replyDestination)).willReturn(messageProducer).     MessagingMessageListenerAdapter listener = getPayloadInstance("Response", "replyPayloadToQueue", Message.class).     listener.onMessage(mock(javax.jms.Message.class), session).     verify(session).createQueue("queueOut").     verify(session).createTextMessage("Response").     verify(messageProducer).send(responseMessage).     verify(messageProducer).close(). }
false;public;0;22;;@Test public void replyWithCustomTimeToLive() throws JMSException {     Session session = mock(Session.class).     Queue replyDestination = mock(Queue.class).     given(session.createQueue("queueOut")).willReturn(replyDestination).     MessageProducer messageProducer = mock(MessageProducer.class).     TextMessage responseMessage = mock(TextMessage.class).     given(session.createTextMessage("Response")).willReturn(responseMessage).     given(session.createProducer(replyDestination)).willReturn(messageProducer).     MessagingMessageListenerAdapter listener = getPayloadInstance("Response", "replyPayloadToQueue", Message.class).     QosSettings settings = new QosSettings().     settings.setTimeToLive(6000).     listener.setResponseQosSettings(settings).     listener.onMessage(mock(javax.jms.Message.class), session).     verify(session).createQueue("queueOut").     verify(session).createTextMessage("Response").     verify(messageProducer).send(responseMessage, javax.jms.Message.DEFAULT_DELIVERY_MODE, javax.jms.Message.DEFAULT_PRIORITY, 6000).     verify(messageProducer).close(). }
false;public;0;20;;@Test public void replyWithFullQoS() throws JMSException {     Session session = mock(Session.class).     Queue replyDestination = mock(Queue.class).     given(session.createQueue("queueOut")).willReturn(replyDestination).     MessageProducer messageProducer = mock(MessageProducer.class).     TextMessage responseMessage = mock(TextMessage.class).     given(session.createTextMessage("Response")).willReturn(responseMessage).     given(session.createProducer(replyDestination)).willReturn(messageProducer).     MessagingMessageListenerAdapter listener = getPayloadInstance("Response", "replyPayloadToQueue", Message.class).     QosSettings settings = new QosSettings(DeliveryMode.NON_PERSISTENT, 6, 6000).     listener.setResponseQosSettings(settings).     listener.onMessage(mock(javax.jms.Message.class), session).     verify(session).createQueue("queueOut").     verify(session).createTextMessage("Response").     verify(messageProducer).send(responseMessage, DeliveryMode.NON_PERSISTENT, 6, 6000).     verify(messageProducer).close(). }
false;public;0;19;;@Test public void replyPayloadToTopic() throws JMSException {     Session session = mock(Session.class).     Topic replyDestination = mock(Topic.class).     given(session.createTopic("topicOut")).willReturn(replyDestination).     MessageProducer messageProducer = mock(MessageProducer.class).     TextMessage responseMessage = mock(TextMessage.class).     given(session.createTextMessage("Response")).willReturn(responseMessage).     given(session.createProducer(replyDestination)).willReturn(messageProducer).     MessagingMessageListenerAdapter listener = getPayloadInstance("Response", "replyPayloadToTopic", Message.class).     listener.onMessage(mock(javax.jms.Message.class), session).     verify(session).createTopic("topicOut").     verify(session).createTextMessage("Response").     verify(messageProducer).send(responseMessage).     verify(messageProducer).close(). }
false;public;0;16;;@Test public void replyPayloadToDestination() throws JMSException {     Session session = mock(Session.class).     MessageProducer messageProducer = mock(MessageProducer.class).     TextMessage responseMessage = mock(TextMessage.class).     given(session.createTextMessage("Response")).willReturn(responseMessage).     given(session.createProducer(sharedReplyDestination)).willReturn(messageProducer).     MessagingMessageListenerAdapter listener = getPayloadInstance("Response", "replyPayloadToDestination", Message.class).     listener.onMessage(mock(javax.jms.Message.class), session).     verify(session, times(0)).createQueue(anyString()).     verify(session).createTextMessage("Response").     verify(messageProducer).send(responseMessage).     verify(messageProducer).close(). }
false;public;0;20;;@Test public void replyPayloadNoDestination() throws JMSException {     Queue replyDestination = mock(Queue.class).     Session session = mock(Session.class).     MessageProducer messageProducer = mock(MessageProducer.class).     TextMessage responseMessage = mock(TextMessage.class).     given(session.createTextMessage("Response")).willReturn(responseMessage).     given(session.createProducer(replyDestination)).willReturn(messageProducer).     MessagingMessageListenerAdapter listener = getPayloadInstance("Response", "replyPayloadNoDestination", Message.class).     listener.setDefaultResponseDestination(replyDestination).     listener.onMessage(mock(javax.jms.Message.class), session).     verify(session, times(0)).createQueue(anyString()).     verify(session).createTextMessage("Response").     verify(messageProducer).send(responseMessage).     verify(messageProducer).close(). }
false;public;0;6;;@Test public void replyJackson() throws JMSException {     TextMessage reply = testReplyWithJackson("replyJackson", "{\"counter\":42,\"name\":\"Response\",\"description\":\"lengthy description\"}").     verify(reply).setObjectProperty("foo", "bar"). }
false;public;0;6;;@Test public void replyJacksonMessageAndJsonView() throws JMSException {     TextMessage reply = testReplyWithJackson("replyJacksonMessageAndJsonView", "{\"name\":\"Response\"}").     verify(reply).setObjectProperty("foo", "bar"). }
false;public;0;6;;@Test public void replyJacksonPojoAndJsonView() throws JMSException {     TextMessage reply = testReplyWithJackson("replyJacksonPojoAndJsonView", "{\"name\":\"Response\"}").     verify(reply, never()).setObjectProperty("foo", "bar"). }
false;public;2;22;;public TextMessage testReplyWithJackson(String methodName, String replyContent) throws JMSException {     Queue replyDestination = mock(Queue.class).     Session session = mock(Session.class).     MessageProducer messageProducer = mock(MessageProducer.class).     TextMessage responseMessage = mock(TextMessage.class).     given(session.createTextMessage(replyContent)).willReturn(responseMessage).     given(session.createProducer(replyDestination)).willReturn(messageProducer).     MessagingMessageListenerAdapter listener = getPayloadInstance("Response", methodName, Message.class).     MappingJackson2MessageConverter messageConverter = new MappingJackson2MessageConverter().     messageConverter.setTargetType(MessageType.TEXT).     listener.setMessageConverter(messageConverter).     listener.setDefaultResponseDestination(replyDestination).     listener.onMessage(mock(javax.jms.Message.class), session).     verify(session, times(0)).createQueue(anyString()).     verify(session).createTextMessage(replyContent).     verify(messageProducer).send(responseMessage).     verify(messageProducer).close().     return responseMessage. }
false;protected;2;4;;protected MessagingMessageListenerAdapter getSimpleInstance(String methodName, Class... parameterTypes) {     Method m = ReflectionUtils.findMethod(SampleBean.class, methodName, parameterTypes).     return createInstance(m). }
false;protected;1;5;;protected MessagingMessageListenerAdapter createInstance(Method m) {     MessagingMessageListenerAdapter adapter = new MessagingMessageListenerAdapter().     adapter.setHandlerMethod(factory.createInvocableHandlerMethod(sample, m)).     return adapter. }
false;protected;1;4;;@Override protected Object extractMessage(javax.jms.Message message) {     return payload. }
false;protected;3;13;;protected MessagingMessageListenerAdapter getPayloadInstance(final Object payload, String methodName, Class... parameterTypes) {     Method method = ReflectionUtils.findMethod(SampleBean.class, methodName, parameterTypes).     MessagingMessageListenerAdapter adapter = new MessagingMessageListenerAdapter() {          @Override         protected Object extractMessage(javax.jms.Message message) {             return payload.         }     }.     adapter.setHandlerMethod(factory.createInvocableHandlerMethod(sample, method)).     return adapter. }
false;private;1;4;;private void initializeFactory(DefaultMessageHandlerMethodFactory factory) {     factory.setBeanFactory(new StaticListableBeanFactory()).     factory.afterPropertiesSet(). }
false;public;1;3;;public void simple(Message<String> input) {     simples.add(input). }
false;public;1;5;;public Message<String> echo(Message<String> input) {     return MessageBuilder.withPayload(input.getPayload()).setHeader(JmsHeaders.TYPE, "reply").build(). }
false;public;1;3;;public JmsResponse<String> replyPayloadToQueue(Message<String> input) {     return JmsResponse.forQueue(input.getPayload(), "queueOut"). }
false;public;1;3;;public JmsResponse<String> replyPayloadToTopic(Message<String> input) {     return JmsResponse.forTopic(input.getPayload(), "topicOut"). }
false;public;1;3;;public JmsResponse<String> replyPayloadToDestination(Message<String> input) {     return JmsResponse.forDestination(input.getPayload(), sharedReplyDestination). }
false;public;1;3;;public JmsResponse<String> replyPayloadNoDestination(Message<String> input) {     return new JmsResponse<>(input.getPayload(), null). }
false;public;1;4;;public Message<SampleResponse> replyJackson(Message<String> input) {     return MessageBuilder.withPayload(createSampleResponse(input.getPayload())).setHeader("foo", "bar").build(). }
false;public;1;5;;@JsonView(Summary.class) public Message<SampleResponse> replyJacksonMessageAndJsonView(Message<String> input) {     return MessageBuilder.withPayload(createSampleResponse(input.getPayload())).setHeader("foo", "bar").build(). }
false;public;1;4;;@JsonView(Summary.class) public SampleResponse replyJacksonPojoAndJsonView(Message<String> input) {     return createSampleResponse(input.getPayload()). }
false;private;1;3;;private SampleResponse createSampleResponse(String name) {     return new SampleResponse(name, "lengthy description"). }
false;public;1;3;;public void fail(String input) {     throw new IllegalArgumentException("Expected test exception"). }
false;public;1;3;;public void wrongParam(Integer i) {     throw new IllegalArgumentException("Should not have been called"). }
false;public;0;3;;public int getCounter() {     return counter. }
false;public;1;3;;public void setCounter(int counter) {     this.counter = counter. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getDescription() {     return description. }
false;public;1;3;;public void setDescription(String description) {     this.description = description. }
