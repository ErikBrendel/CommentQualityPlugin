commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@After public void verifyTransactionSynchronizationManagerState() {     assertTrue(TransactionSynchronizationManager.getResourceMap().isEmpty()).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()). }
false;public;0;22;;@Test public void testTransactionCommit() throws JMSException {     ConnectionFactory cf = mock(ConnectionFactory.class).     Connection con = mock(Connection.class).     final Session session = mock(Session.class).     given(cf.createConnection()).willReturn(con).     given(con.createSession(true, Session.AUTO_ACKNOWLEDGE)).willReturn(session).     JmsTransactionManager tm = new JmsTransactionManager(cf).     TransactionStatus ts = tm.getTransaction(new DefaultTransactionDefinition()).     JmsTemplate jt = new JmsTemplate(cf).     jt.execute((SessionCallback<Void>) sess -> {         assertSame(sess, session).         return null.     }).     tm.commit(ts).     verify(session).commit().     verify(session).close().     verify(con).close(). }
false;public;0;22;;@Test public void testTransactionRollback() throws JMSException {     ConnectionFactory cf = mock(ConnectionFactory.class).     Connection con = mock(Connection.class).     final Session session = mock(Session.class).     given(cf.createConnection()).willReturn(con).     given(con.createSession(true, Session.AUTO_ACKNOWLEDGE)).willReturn(session).     JmsTransactionManager tm = new JmsTransactionManager(cf).     TransactionStatus ts = tm.getTransaction(new DefaultTransactionDefinition()).     JmsTemplate jt = new JmsTemplate(cf).     jt.execute((SessionCallback<Void>) sess -> {         assertSame(sess, session).         return null.     }).     tm.rollback(ts).     verify(session).rollback().     verify(session).close().     verify(con).close(). }
false;protected;1;7;;@Override protected void doInTransactionWithoutResult(TransactionStatus status) {     jt.execute((SessionCallback<Void>) sess -> {         assertSame(sess, session).         return null.     }). }
false;public;0;32;;@Test public void testParticipatingTransactionWithCommit() throws JMSException {     ConnectionFactory cf = mock(ConnectionFactory.class).     Connection con = mock(Connection.class).     final Session session = mock(Session.class).     given(cf.createConnection()).willReturn(con).     given(con.createSession(true, Session.AUTO_ACKNOWLEDGE)).willReturn(session).     JmsTransactionManager tm = new JmsTransactionManager(cf).     TransactionStatus ts = tm.getTransaction(new DefaultTransactionDefinition()).     final JmsTemplate jt = new JmsTemplate(cf).     jt.execute((SessionCallback<Void>) sess -> {         assertSame(sess, session).         return null.     }).     TransactionTemplate tt = new TransactionTemplate(tm).     tt.execute(new TransactionCallbackWithoutResult() {          @Override         protected void doInTransactionWithoutResult(TransactionStatus status) {             jt.execute((SessionCallback<Void>) sess -> {                 assertSame(sess, session).                 return null.             }).         }     }).     tm.commit(ts).     verify(session).commit().     verify(session).close().     verify(con).close(). }
false;protected;1;8;;@Override protected void doInTransactionWithoutResult(TransactionStatus status) {     jt.execute((SessionCallback<Void>) sess -> {         assertSame(sess, session).         return null.     }).     status.setRollbackOnly(). }
false;public;0;39;;@Test public void testParticipatingTransactionWithRollbackOnly() throws JMSException {     ConnectionFactory cf = mock(ConnectionFactory.class).     Connection con = mock(Connection.class).     final Session session = mock(Session.class).     given(cf.createConnection()).willReturn(con).     given(con.createSession(true, Session.AUTO_ACKNOWLEDGE)).willReturn(session).     JmsTransactionManager tm = new JmsTransactionManager(cf).     TransactionStatus ts = tm.getTransaction(new DefaultTransactionDefinition()).     final JmsTemplate jt = new JmsTemplate(cf).     jt.execute((SessionCallback<Void>) sess -> {         assertSame(sess, session).         return null.     }).     TransactionTemplate tt = new TransactionTemplate(tm).     tt.execute(new TransactionCallbackWithoutResult() {          @Override         protected void doInTransactionWithoutResult(TransactionStatus status) {             jt.execute((SessionCallback<Void>) sess -> {                 assertSame(sess, session).                 return null.             }).             status.setRollbackOnly().         }     }).     try {         tm.commit(ts).         fail("Should have thrown UnexpectedRollbackException").     } catch (UnexpectedRollbackException ex) {     // expected     }     verify(session).rollback().     verify(session).close().     verify(con).close(). }
false;protected;1;7;;@Override protected void doInTransactionWithoutResult(TransactionStatus status) {     jt.execute((SessionCallback<Void>) sess -> {         assertNotSame(sess, session).         return null.     }). }
false;public;0;40;;@Test public void testSuspendedTransaction() throws JMSException {     final ConnectionFactory cf = mock(ConnectionFactory.class).     Connection con = mock(Connection.class).     final Session session = mock(Session.class).     final Session session2 = mock(Session.class).     given(cf.createConnection()).willReturn(con).     given(con.createSession(true, Session.AUTO_ACKNOWLEDGE)).willReturn(session).     given(con.createSession(false, Session.AUTO_ACKNOWLEDGE)).willReturn(session2).     JmsTransactionManager tm = new JmsTransactionManager(cf).     TransactionStatus ts = tm.getTransaction(new DefaultTransactionDefinition()).     final JmsTemplate jt = new JmsTemplate(cf).     jt.execute((SessionCallback<Void>) sess -> {         assertSame(sess, session).         return null.     }).     TransactionTemplate tt = new TransactionTemplate(tm).     tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_NOT_SUPPORTED).     tt.execute(new TransactionCallbackWithoutResult() {          @Override         protected void doInTransactionWithoutResult(TransactionStatus status) {             jt.execute((SessionCallback<Void>) sess -> {                 assertNotSame(sess, session).                 return null.             }).         }     }).     jt.execute((SessionCallback<Void>) sess -> {         assertSame(sess, session).         return null.     }).     tm.commit(ts).     verify(session).commit().     verify(session).close().     verify(session2).close().     verify(con, times(2)).close(). }
false;protected;1;7;;@Override protected void doInTransactionWithoutResult(TransactionStatus status) {     jt.execute((SessionCallback<Void>) sess -> {         assertNotSame(sess, session).         return null.     }). }
false;public;0;40;;@Test public void testTransactionSuspension() throws JMSException {     final ConnectionFactory cf = mock(ConnectionFactory.class).     Connection con = mock(Connection.class).     final Session session = mock(Session.class).     final Session session2 = mock(Session.class).     given(cf.createConnection()).willReturn(con).     given(con.createSession(true, Session.AUTO_ACKNOWLEDGE)).willReturn(session, session2).     JmsTransactionManager tm = new JmsTransactionManager(cf).     TransactionStatus ts = tm.getTransaction(new DefaultTransactionDefinition()).     final JmsTemplate jt = new JmsTemplate(cf).     jt.execute((SessionCallback<Void>) sess -> {         assertSame(sess, session).         return null.     }).     TransactionTemplate tt = new TransactionTemplate(tm).     tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW).     tt.execute(new TransactionCallbackWithoutResult() {          @Override         protected void doInTransactionWithoutResult(TransactionStatus status) {             jt.execute((SessionCallback<Void>) sess -> {                 assertNotSame(sess, session).                 return null.             }).         }     }).     jt.execute((SessionCallback<Void>) sess -> {         assertSame(sess, session).         return null.     }).     tm.commit(ts).     verify(session).commit().     verify(session2).commit().     verify(session).close().     verify(session2).close().     verify(con, times(2)).close(). }
false;public;0;27;;@Test public void testTransactionCommitWithMessageProducer() throws JMSException {     Destination dest = new StubQueue().     ConnectionFactory cf = mock(ConnectionFactory.class).     Connection con = mock(Connection.class).     Session session = mock(Session.class).     MessageProducer producer = mock(MessageProducer.class).     final Message message = mock(Message.class).     given(cf.createConnection()).willReturn(con).     given(con.createSession(true, Session.AUTO_ACKNOWLEDGE)).willReturn(session).     given(session.createProducer(dest)).willReturn(producer).     given(session.getTransacted()).willReturn(true).     JmsTransactionManager tm = new JmsTransactionManager(cf).     TransactionStatus ts = tm.getTransaction(new DefaultTransactionDefinition()).     JmsTemplate jt = new JmsTemplate(cf).     jt.send(dest, sess -> message).     tm.commit(ts).     verify(producer).send(message).     verify(session).commit().     verify(producer).close().     verify(session).close().     verify(con).close(). }
false;public;0;24;;@Test public void testLazyTransactionalSession() throws JMSException {     ConnectionFactory cf = mock(ConnectionFactory.class).     Connection con = mock(Connection.class).     final Session session = mock(Session.class).     JmsTransactionManager tm = new JmsTransactionManager(cf).     tm.setLazyResourceRetrieval(true).     TransactionStatus ts = tm.getTransaction(new DefaultTransactionDefinition()).     given(cf.createConnection()).willReturn(con).     given(con.createSession(true, Session.AUTO_ACKNOWLEDGE)).willReturn(session).     JmsTemplate jt = new JmsTemplate(cf).     jt.execute((SessionCallback<Void>) sess -> {         assertSame(sess, session).         return null.     }).     tm.commit(ts).     verify(session).commit().     verify(session).close().     verify(con).close(). }
false;public;0;9;;@Test public void testLazyWithoutSessionAccess() {     ConnectionFactory cf = mock(ConnectionFactory.class).     JmsTransactionManager tm = new JmsTransactionManager(cf).     tm.setLazyResourceRetrieval(true).     TransactionStatus ts = tm.getTransaction(new DefaultTransactionDefinition()).     tm.commit(ts). }
