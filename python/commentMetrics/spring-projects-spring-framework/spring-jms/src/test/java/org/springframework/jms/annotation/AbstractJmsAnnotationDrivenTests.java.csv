# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractJmsAnnotationDrivenTests -> public void testCustomConfiguration(ApplicationContext context);1397718966;Test for {@link CustomBean} and an manually endpoint registered_with "myCustomEndpointId".;public void testCustomConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("defaultFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory customFactory =_				context.getBean("customFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getContainers().size())__		assertEquals(1, customFactory.getContainers().size())__		JmsListenerEndpoint endpoint = defaultFactory.getContainers().get(0).getEndpoint()__		assertEquals("Wrong endpoint type", SimpleJmsListenerEndpoint.class, endpoint.getClass())__		assertEquals("Wrong listener set in custom endpoint", context.getBean("simpleMessageListener"),_				((SimpleJmsListenerEndpoint) endpoint).getMessageListener())___		JmsListenerEndpointRegistry customRegistry =_				context.getBean("customRegistry", JmsListenerEndpointRegistry.class)__		assertEquals("Wrong number of containers in the registry", 2,_				customRegistry.getContainers().size())__		assertNotNull("Container with custom id on the annotation should be found",_				customRegistry.getContainer("listenerId"))__		assertNotNull("Container created with custom id should be found",_				customRegistry.getContainer("myCustomEndpointId"))__	};test,for,link,custom,bean,and,an,manually,endpoint,registered,with,my,custom,endpoint,id;public,void,test,custom,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,default,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,custom,factory,context,get,bean,custom,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,containers,size,assert,equals,1,custom,factory,get,containers,size,jms,listener,endpoint,endpoint,default,factory,get,containers,get,0,get,endpoint,assert,equals,wrong,endpoint,type,simple,jms,listener,endpoint,class,endpoint,get,class,assert,equals,wrong,listener,set,in,custom,endpoint,context,get,bean,simple,message,listener,simple,jms,listener,endpoint,endpoint,get,message,listener,jms,listener,endpoint,registry,custom,registry,context,get,bean,custom,registry,jms,listener,endpoint,registry,class,assert,equals,wrong,number,of,containers,in,the,registry,2,custom,registry,get,containers,size,assert,not,null,container,with,custom,id,on,the,annotation,should,be,found,custom,registry,get,container,listener,id,assert,not,null,container,created,with,custom,id,should,be,found,custom,registry,get,container,my,custom,endpoint,id
AbstractJmsAnnotationDrivenTests -> public void testCustomConfiguration(ApplicationContext context);1398325263;Test for {@link CustomBean} and an manually endpoint registered_with "myCustomEndpointId". The custom endpoint does not provide_any factory so it's registered with the default one;public void testCustomConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory customFactory =_				context.getBean("customFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getContainers().size())__		assertEquals(1, customFactory.getContainers().size())__		JmsListenerEndpoint endpoint = defaultFactory.getContainers().get(0).getEndpoint()__		assertEquals("Wrong endpoint type", SimpleJmsListenerEndpoint.class, endpoint.getClass())__		assertEquals("Wrong listener set in custom endpoint", context.getBean("simpleMessageListener"),_				((SimpleJmsListenerEndpoint) endpoint).getMessageListener())___		JmsListenerEndpointRegistry customRegistry =_				context.getBean("customRegistry", JmsListenerEndpointRegistry.class)__		assertEquals("Wrong number of containers in the registry", 2,_				customRegistry.getContainers().size())__		assertNotNull("Container with custom id on the annotation should be found",_				customRegistry.getContainer("listenerId"))__		assertNotNull("Container created with custom id should be found",_				customRegistry.getContainer("myCustomEndpointId"))__	};test,for,link,custom,bean,and,an,manually,endpoint,registered,with,my,custom,endpoint,id,the,custom,endpoint,does,not,provide,any,factory,so,it,s,registered,with,the,default,one;public,void,test,custom,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,custom,factory,context,get,bean,custom,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,containers,size,assert,equals,1,custom,factory,get,containers,size,jms,listener,endpoint,endpoint,default,factory,get,containers,get,0,get,endpoint,assert,equals,wrong,endpoint,type,simple,jms,listener,endpoint,class,endpoint,get,class,assert,equals,wrong,listener,set,in,custom,endpoint,context,get,bean,simple,message,listener,simple,jms,listener,endpoint,endpoint,get,message,listener,jms,listener,endpoint,registry,custom,registry,context,get,bean,custom,registry,jms,listener,endpoint,registry,class,assert,equals,wrong,number,of,containers,in,the,registry,2,custom,registry,get,containers,size,assert,not,null,container,with,custom,id,on,the,annotation,should,be,found,custom,registry,get,container,listener,id,assert,not,null,container,created,with,custom,id,should,be,found,custom,registry,get,container,my,custom,endpoint,id
AbstractJmsAnnotationDrivenTests -> public void testCustomConfiguration(ApplicationContext context);1398342804;Test for {@link CustomBean} and an manually endpoint registered_with "myCustomEndpointId". The custom endpoint does not provide_any factory so it's registered with the default one;public void testCustomConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory customFactory =_				context.getBean("customFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getContainers().size())__		assertEquals(1, customFactory.getContainers().size())__		JmsListenerEndpoint endpoint = defaultFactory.getContainers().get(0).getEndpoint()__		assertEquals("Wrong endpoint type", SimpleJmsListenerEndpoint.class, endpoint.getClass())__		assertEquals("Wrong listener set in custom endpoint", context.getBean("simpleMessageListener"),_				((SimpleJmsListenerEndpoint) endpoint).getMessageListener())___		JmsListenerEndpointRegistry customRegistry =_				context.getBean("customRegistry", JmsListenerEndpointRegistry.class)__		assertEquals("Wrong number of containers in the registry", 2,_				customRegistry.getContainers().size())__		assertNotNull("Container with custom id on the annotation should be found",_				customRegistry.getContainer("listenerId"))__		assertNotNull("Container created with custom id should be found",_				customRegistry.getContainer("myCustomEndpointId"))__	};test,for,link,custom,bean,and,an,manually,endpoint,registered,with,my,custom,endpoint,id,the,custom,endpoint,does,not,provide,any,factory,so,it,s,registered,with,the,default,one;public,void,test,custom,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,custom,factory,context,get,bean,custom,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,containers,size,assert,equals,1,custom,factory,get,containers,size,jms,listener,endpoint,endpoint,default,factory,get,containers,get,0,get,endpoint,assert,equals,wrong,endpoint,type,simple,jms,listener,endpoint,class,endpoint,get,class,assert,equals,wrong,listener,set,in,custom,endpoint,context,get,bean,simple,message,listener,simple,jms,listener,endpoint,endpoint,get,message,listener,jms,listener,endpoint,registry,custom,registry,context,get,bean,custom,registry,jms,listener,endpoint,registry,class,assert,equals,wrong,number,of,containers,in,the,registry,2,custom,registry,get,containers,size,assert,not,null,container,with,custom,id,on,the,annotation,should,be,found,custom,registry,get,container,listener,id,assert,not,null,container,created,with,custom,id,should,be,found,custom,registry,get,container,my,custom,endpoint,id
AbstractJmsAnnotationDrivenTests -> public void testCustomConfiguration(ApplicationContext context);1398347811;Test for {@link CustomBean} and an manually endpoint registered_with "myCustomEndpointId". The custom endpoint does not provide_any factory so it's registered with the default one;public void testCustomConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory customFactory =_				context.getBean("customFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getContainers().size())__		assertEquals(1, customFactory.getContainers().size())__		JmsListenerEndpoint endpoint = defaultFactory.getContainers().get(0).getEndpoint()__		assertEquals("Wrong endpoint type", SimpleJmsListenerEndpoint.class, endpoint.getClass())__		assertEquals("Wrong listener set in custom endpoint", context.getBean("simpleMessageListener"),_				((SimpleJmsListenerEndpoint) endpoint).getMessageListener())___		JmsListenerEndpointRegistry customRegistry =_				context.getBean("customRegistry", JmsListenerEndpointRegistry.class)__		assertEquals("Wrong number of containers in the registry", 2,_				customRegistry.getContainers().size())__		assertNotNull("Container with custom id on the annotation should be found",_				customRegistry.getContainer("listenerId"))__		assertNotNull("Container created with custom id should be found",_				customRegistry.getContainer("myCustomEndpointId"))__	};test,for,link,custom,bean,and,an,manually,endpoint,registered,with,my,custom,endpoint,id,the,custom,endpoint,does,not,provide,any,factory,so,it,s,registered,with,the,default,one;public,void,test,custom,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,custom,factory,context,get,bean,custom,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,containers,size,assert,equals,1,custom,factory,get,containers,size,jms,listener,endpoint,endpoint,default,factory,get,containers,get,0,get,endpoint,assert,equals,wrong,endpoint,type,simple,jms,listener,endpoint,class,endpoint,get,class,assert,equals,wrong,listener,set,in,custom,endpoint,context,get,bean,simple,message,listener,simple,jms,listener,endpoint,endpoint,get,message,listener,jms,listener,endpoint,registry,custom,registry,context,get,bean,custom,registry,jms,listener,endpoint,registry,class,assert,equals,wrong,number,of,containers,in,the,registry,2,custom,registry,get,containers,size,assert,not,null,container,with,custom,id,on,the,annotation,should,be,found,custom,registry,get,container,listener,id,assert,not,null,container,created,with,custom,id,should,be,found,custom,registry,get,container,my,custom,endpoint,id
AbstractJmsAnnotationDrivenTests -> public void testCustomConfiguration(ApplicationContext context);1405696881;Test for {@link CustomBean} and an manually endpoint registered_with "myCustomEndpointId". The custom endpoint does not provide_any factory so it's registered with the default one;public void testCustomConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory customFactory =_				context.getBean("customFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, customFactory.getListenerContainers().size())__		JmsListenerEndpoint endpoint = defaultFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("Wrong endpoint type", SimpleJmsListenerEndpoint.class, endpoint.getClass())__		assertEquals("Wrong listener set in custom endpoint", context.getBean("simpleMessageListener"),_				((SimpleJmsListenerEndpoint) endpoint).getMessageListener())___		JmsListenerEndpointRegistry customRegistry =_				context.getBean("customRegistry", JmsListenerEndpointRegistry.class)__		assertEquals("Wrong number of containers in the registry", 2,_				customRegistry.getListenerContainers().size())__		assertNotNull("Container with custom id on the annotation should be found",_				customRegistry.getListenerContainer("listenerId"))__		assertNotNull("Container created with custom id should be found",_				customRegistry.getListenerContainer("myCustomEndpointId"))__	};test,for,link,custom,bean,and,an,manually,endpoint,registered,with,my,custom,endpoint,id,the,custom,endpoint,does,not,provide,any,factory,so,it,s,registered,with,the,default,one;public,void,test,custom,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,custom,factory,context,get,bean,custom,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,custom,factory,get,listener,containers,size,jms,listener,endpoint,endpoint,default,factory,get,listener,containers,get,0,get,endpoint,assert,equals,wrong,endpoint,type,simple,jms,listener,endpoint,class,endpoint,get,class,assert,equals,wrong,listener,set,in,custom,endpoint,context,get,bean,simple,message,listener,simple,jms,listener,endpoint,endpoint,get,message,listener,jms,listener,endpoint,registry,custom,registry,context,get,bean,custom,registry,jms,listener,endpoint,registry,class,assert,equals,wrong,number,of,containers,in,the,registry,2,custom,registry,get,listener,containers,size,assert,not,null,container,with,custom,id,on,the,annotation,should,be,found,custom,registry,get,listener,container,listener,id,assert,not,null,container,created,with,custom,id,should,be,found,custom,registry,get,listener,container,my,custom,endpoint,id
AbstractJmsAnnotationDrivenTests -> public void testCustomConfiguration(ApplicationContext context);1406902111;Test for {@link CustomBean} and an manually endpoint registered_with "myCustomEndpointId". The custom endpoint does not provide_any factory so it's registered with the default one;public void testCustomConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory customFactory =_				context.getBean("customFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, customFactory.getListenerContainers().size())__		JmsListenerEndpoint endpoint = defaultFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("Wrong endpoint type", SimpleJmsListenerEndpoint.class, endpoint.getClass())__		assertEquals("Wrong listener set in custom endpoint", context.getBean("simpleMessageListener"),_				((SimpleJmsListenerEndpoint) endpoint).getMessageListener())___		JmsListenerEndpointRegistry customRegistry =_				context.getBean("customRegistry", JmsListenerEndpointRegistry.class)__		assertEquals("Wrong number of containers in the registry", 2,_				customRegistry.getListenerContainers().size())__		assertNotNull("Container with custom id on the annotation should be found",_				customRegistry.getListenerContainer("listenerId"))__		assertNotNull("Container created with custom id should be found",_				customRegistry.getListenerContainer("myCustomEndpointId"))__	};test,for,link,custom,bean,and,an,manually,endpoint,registered,with,my,custom,endpoint,id,the,custom,endpoint,does,not,provide,any,factory,so,it,s,registered,with,the,default,one;public,void,test,custom,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,custom,factory,context,get,bean,custom,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,custom,factory,get,listener,containers,size,jms,listener,endpoint,endpoint,default,factory,get,listener,containers,get,0,get,endpoint,assert,equals,wrong,endpoint,type,simple,jms,listener,endpoint,class,endpoint,get,class,assert,equals,wrong,listener,set,in,custom,endpoint,context,get,bean,simple,message,listener,simple,jms,listener,endpoint,endpoint,get,message,listener,jms,listener,endpoint,registry,custom,registry,context,get,bean,custom,registry,jms,listener,endpoint,registry,class,assert,equals,wrong,number,of,containers,in,the,registry,2,custom,registry,get,listener,containers,size,assert,not,null,container,with,custom,id,on,the,annotation,should,be,found,custom,registry,get,listener,container,listener,id,assert,not,null,container,created,with,custom,id,should,be,found,custom,registry,get,listener,container,my,custom,endpoint,id
AbstractJmsAnnotationDrivenTests -> public void testCustomConfiguration(ApplicationContext context);1409581667;Test for {@link CustomBean} and an manually endpoint registered_with "myCustomEndpointId". The custom endpoint does not provide_any factory so it's registered with the default one;public void testCustomConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory customFactory =_				context.getBean("customFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, customFactory.getListenerContainers().size())__		JmsListenerEndpoint endpoint = defaultFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("Wrong endpoint type", SimpleJmsListenerEndpoint.class, endpoint.getClass())__		assertEquals("Wrong listener set in custom endpoint", context.getBean("simpleMessageListener"),_				((SimpleJmsListenerEndpoint) endpoint).getMessageListener())___		JmsListenerEndpointRegistry customRegistry =_				context.getBean("customRegistry", JmsListenerEndpointRegistry.class)__		assertEquals("Wrong number of containers in the registry", 2,_				customRegistry.getListenerContainers().size())__		assertNotNull("Container with custom id on the annotation should be found",_				customRegistry.getListenerContainer("listenerId"))__		assertNotNull("Container created with custom id should be found",_				customRegistry.getListenerContainer("myCustomEndpointId"))__	};test,for,link,custom,bean,and,an,manually,endpoint,registered,with,my,custom,endpoint,id,the,custom,endpoint,does,not,provide,any,factory,so,it,s,registered,with,the,default,one;public,void,test,custom,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,custom,factory,context,get,bean,custom,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,custom,factory,get,listener,containers,size,jms,listener,endpoint,endpoint,default,factory,get,listener,containers,get,0,get,endpoint,assert,equals,wrong,endpoint,type,simple,jms,listener,endpoint,class,endpoint,get,class,assert,equals,wrong,listener,set,in,custom,endpoint,context,get,bean,simple,message,listener,simple,jms,listener,endpoint,endpoint,get,message,listener,jms,listener,endpoint,registry,custom,registry,context,get,bean,custom,registry,jms,listener,endpoint,registry,class,assert,equals,wrong,number,of,containers,in,the,registry,2,custom,registry,get,listener,containers,size,assert,not,null,container,with,custom,id,on,the,annotation,should,be,found,custom,registry,get,listener,container,listener,id,assert,not,null,container,created,with,custom,id,should,be,found,custom,registry,get,listener,container,my,custom,endpoint,id
AbstractJmsAnnotationDrivenTests -> public void testCustomConfiguration(ApplicationContext context);1413848647;Test for {@link CustomBean} and an manually endpoint registered_with "myCustomEndpointId". The custom endpoint does not provide_any factory so it's registered with the default one;public void testCustomConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory customFactory =_				context.getBean("customFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, customFactory.getListenerContainers().size())__		JmsListenerEndpoint endpoint = defaultFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("Wrong endpoint type", SimpleJmsListenerEndpoint.class, endpoint.getClass())__		assertEquals("Wrong listener set in custom endpoint", context.getBean("simpleMessageListener"),_				((SimpleJmsListenerEndpoint) endpoint).getMessageListener())___		JmsListenerEndpointRegistry customRegistry =_				context.getBean("customRegistry", JmsListenerEndpointRegistry.class)__		assertEquals("Wrong number of containers in the registry", 2,_				customRegistry.getListenerContainers().size())__		assertNotNull("Container with custom id on the annotation should be found",_				customRegistry.getListenerContainer("listenerId"))__		assertNotNull("Container created with custom id should be found",_				customRegistry.getListenerContainer("myCustomEndpointId"))__	};test,for,link,custom,bean,and,an,manually,endpoint,registered,with,my,custom,endpoint,id,the,custom,endpoint,does,not,provide,any,factory,so,it,s,registered,with,the,default,one;public,void,test,custom,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,custom,factory,context,get,bean,custom,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,custom,factory,get,listener,containers,size,jms,listener,endpoint,endpoint,default,factory,get,listener,containers,get,0,get,endpoint,assert,equals,wrong,endpoint,type,simple,jms,listener,endpoint,class,endpoint,get,class,assert,equals,wrong,listener,set,in,custom,endpoint,context,get,bean,simple,message,listener,simple,jms,listener,endpoint,endpoint,get,message,listener,jms,listener,endpoint,registry,custom,registry,context,get,bean,custom,registry,jms,listener,endpoint,registry,class,assert,equals,wrong,number,of,containers,in,the,registry,2,custom,registry,get,listener,containers,size,assert,not,null,container,with,custom,id,on,the,annotation,should,be,found,custom,registry,get,listener,container,listener,id,assert,not,null,container,created,with,custom,id,should,be,found,custom,registry,get,listener,container,my,custom,endpoint,id
AbstractJmsAnnotationDrivenTests -> public void testCustomConfiguration(ApplicationContext context);1429201109;Test for {@link CustomBean} and an manually endpoint registered_with "myCustomEndpointId". The custom endpoint does not provide_any factory so it's registered with the default one;public void testCustomConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory customFactory =_				context.getBean("customFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, customFactory.getListenerContainers().size())__		JmsListenerEndpoint endpoint = defaultFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("Wrong endpoint type", SimpleJmsListenerEndpoint.class, endpoint.getClass())__		assertEquals("Wrong listener set in custom endpoint", context.getBean("simpleMessageListener"),_				((SimpleJmsListenerEndpoint) endpoint).getMessageListener())___		JmsListenerEndpointRegistry customRegistry =_				context.getBean("customRegistry", JmsListenerEndpointRegistry.class)__		assertEquals("Wrong number of containers in the registry", 2,_				customRegistry.getListenerContainers().size())__		assertNotNull("Container with custom id on the annotation should be found",_				customRegistry.getListenerContainer("listenerId"))__		assertNotNull("Container created with custom id should be found",_				customRegistry.getListenerContainer("myCustomEndpointId"))__	};test,for,link,custom,bean,and,an,manually,endpoint,registered,with,my,custom,endpoint,id,the,custom,endpoint,does,not,provide,any,factory,so,it,s,registered,with,the,default,one;public,void,test,custom,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,custom,factory,context,get,bean,custom,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,custom,factory,get,listener,containers,size,jms,listener,endpoint,endpoint,default,factory,get,listener,containers,get,0,get,endpoint,assert,equals,wrong,endpoint,type,simple,jms,listener,endpoint,class,endpoint,get,class,assert,equals,wrong,listener,set,in,custom,endpoint,context,get,bean,simple,message,listener,simple,jms,listener,endpoint,endpoint,get,message,listener,jms,listener,endpoint,registry,custom,registry,context,get,bean,custom,registry,jms,listener,endpoint,registry,class,assert,equals,wrong,number,of,containers,in,the,registry,2,custom,registry,get,listener,containers,size,assert,not,null,container,with,custom,id,on,the,annotation,should,be,found,custom,registry,get,listener,container,listener,id,assert,not,null,container,created,with,custom,id,should,be,found,custom,registry,get,listener,container,my,custom,endpoint,id
AbstractJmsAnnotationDrivenTests -> public void testCustomConfiguration(ApplicationContext context);1434970902;Test for {@link CustomBean} and an manually endpoint registered_with "myCustomEndpointId". The custom endpoint does not provide_any factory so it's registered with the default one;public void testCustomConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory customFactory =_				context.getBean("customFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, customFactory.getListenerContainers().size())__		JmsListenerEndpoint endpoint = defaultFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("Wrong endpoint type", SimpleJmsListenerEndpoint.class, endpoint.getClass())__		assertEquals("Wrong listener set in custom endpoint", context.getBean("simpleMessageListener"),_				((SimpleJmsListenerEndpoint) endpoint).getMessageListener())___		JmsListenerEndpointRegistry customRegistry =_				context.getBean("customRegistry", JmsListenerEndpointRegistry.class)__		assertEquals("Wrong number of containers in the registry", 2,_				customRegistry.getListenerContainers().size())__		assertNotNull("Container with custom id on the annotation should be found",_				customRegistry.getListenerContainer("listenerId"))__		assertNotNull("Container created with custom id should be found",_				customRegistry.getListenerContainer("myCustomEndpointId"))__	};test,for,link,custom,bean,and,an,manually,endpoint,registered,with,my,custom,endpoint,id,the,custom,endpoint,does,not,provide,any,factory,so,it,s,registered,with,the,default,one;public,void,test,custom,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,custom,factory,context,get,bean,custom,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,custom,factory,get,listener,containers,size,jms,listener,endpoint,endpoint,default,factory,get,listener,containers,get,0,get,endpoint,assert,equals,wrong,endpoint,type,simple,jms,listener,endpoint,class,endpoint,get,class,assert,equals,wrong,listener,set,in,custom,endpoint,context,get,bean,simple,message,listener,simple,jms,listener,endpoint,endpoint,get,message,listener,jms,listener,endpoint,registry,custom,registry,context,get,bean,custom,registry,jms,listener,endpoint,registry,class,assert,equals,wrong,number,of,containers,in,the,registry,2,custom,registry,get,listener,containers,size,assert,not,null,container,with,custom,id,on,the,annotation,should,be,found,custom,registry,get,listener,container,listener,id,assert,not,null,container,created,with,custom,id,should,be,found,custom,registry,get,listener,container,my,custom,endpoint,id
AbstractJmsAnnotationDrivenTests -> public void testCustomConfiguration(ApplicationContext context);1446477227;Test for {@link CustomBean} and an manually endpoint registered_with "myCustomEndpointId". The custom endpoint does not provide_any factory so it's registered with the default one;public void testCustomConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory customFactory =_				context.getBean("customFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, customFactory.getListenerContainers().size())__		JmsListenerEndpoint endpoint = defaultFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("Wrong endpoint type", SimpleJmsListenerEndpoint.class, endpoint.getClass())__		assertEquals("Wrong listener set in custom endpoint", context.getBean("simpleMessageListener"),_				((SimpleJmsListenerEndpoint) endpoint).getMessageListener())___		JmsListenerEndpointRegistry customRegistry =_				context.getBean("customRegistry", JmsListenerEndpointRegistry.class)__		assertEquals("Wrong number of containers in the registry", 2,_				customRegistry.getListenerContainerIds().size())__		assertEquals("Wrong number of containers in the registry", 2,_				customRegistry.getListenerContainers().size())__		assertNotNull("Container with custom id on the annotation should be found",_				customRegistry.getListenerContainer("listenerId"))__		assertNotNull("Container created with custom id should be found",_				customRegistry.getListenerContainer("myCustomEndpointId"))__	};test,for,link,custom,bean,and,an,manually,endpoint,registered,with,my,custom,endpoint,id,the,custom,endpoint,does,not,provide,any,factory,so,it,s,registered,with,the,default,one;public,void,test,custom,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,custom,factory,context,get,bean,custom,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,custom,factory,get,listener,containers,size,jms,listener,endpoint,endpoint,default,factory,get,listener,containers,get,0,get,endpoint,assert,equals,wrong,endpoint,type,simple,jms,listener,endpoint,class,endpoint,get,class,assert,equals,wrong,listener,set,in,custom,endpoint,context,get,bean,simple,message,listener,simple,jms,listener,endpoint,endpoint,get,message,listener,jms,listener,endpoint,registry,custom,registry,context,get,bean,custom,registry,jms,listener,endpoint,registry,class,assert,equals,wrong,number,of,containers,in,the,registry,2,custom,registry,get,listener,container,ids,size,assert,equals,wrong,number,of,containers,in,the,registry,2,custom,registry,get,listener,containers,size,assert,not,null,container,with,custom,id,on,the,annotation,should,be,found,custom,registry,get,listener,container,listener,id,assert,not,null,container,created,with,custom,id,should,be,found,custom,registry,get,listener,container,my,custom,endpoint,id
AbstractJmsAnnotationDrivenTests -> public void testCustomConfiguration(ApplicationContext context);1447077794;Test for {@link CustomBean} and an manually endpoint registered_with "myCustomEndpointId". The custom endpoint does not provide_any factory so it's registered with the default one;public void testCustomConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory customFactory =_				context.getBean("customFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, customFactory.getListenerContainers().size())__		JmsListenerEndpoint endpoint = defaultFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("Wrong endpoint type", SimpleJmsListenerEndpoint.class, endpoint.getClass())__		assertEquals("Wrong listener set in custom endpoint", context.getBean("simpleMessageListener"),_				((SimpleJmsListenerEndpoint) endpoint).getMessageListener())___		JmsListenerEndpointRegistry customRegistry =_				context.getBean("customRegistry", JmsListenerEndpointRegistry.class)__		assertEquals("Wrong number of containers in the registry", 2,_				customRegistry.getListenerContainerIds().size())__		assertEquals("Wrong number of containers in the registry", 2,_				customRegistry.getListenerContainers().size())__		assertNotNull("Container with custom id on the annotation should be found",_				customRegistry.getListenerContainer("listenerId"))__		assertNotNull("Container created with custom id should be found",_				customRegistry.getListenerContainer("myCustomEndpointId"))__	};test,for,link,custom,bean,and,an,manually,endpoint,registered,with,my,custom,endpoint,id,the,custom,endpoint,does,not,provide,any,factory,so,it,s,registered,with,the,default,one;public,void,test,custom,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,custom,factory,context,get,bean,custom,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,custom,factory,get,listener,containers,size,jms,listener,endpoint,endpoint,default,factory,get,listener,containers,get,0,get,endpoint,assert,equals,wrong,endpoint,type,simple,jms,listener,endpoint,class,endpoint,get,class,assert,equals,wrong,listener,set,in,custom,endpoint,context,get,bean,simple,message,listener,simple,jms,listener,endpoint,endpoint,get,message,listener,jms,listener,endpoint,registry,custom,registry,context,get,bean,custom,registry,jms,listener,endpoint,registry,class,assert,equals,wrong,number,of,containers,in,the,registry,2,custom,registry,get,listener,container,ids,size,assert,equals,wrong,number,of,containers,in,the,registry,2,custom,registry,get,listener,containers,size,assert,not,null,container,with,custom,id,on,the,annotation,should,be,found,custom,registry,get,listener,container,listener,id,assert,not,null,container,created,with,custom,id,should,be,found,custom,registry,get,listener,container,my,custom,endpoint,id
AbstractJmsAnnotationDrivenTests -> public void testCustomConfiguration(ApplicationContext context);1496242568;Test for {@link CustomBean} and an manually endpoint registered_with "myCustomEndpointId". The custom endpoint does not provide_any factory so it's registered with the default one;public void testCustomConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory customFactory =_				context.getBean("customFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, customFactory.getListenerContainers().size())__		JmsListenerEndpoint endpoint = defaultFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("Wrong endpoint type", SimpleJmsListenerEndpoint.class, endpoint.getClass())__		assertEquals("Wrong listener set in custom endpoint", context.getBean("simpleMessageListener"),_				((SimpleJmsListenerEndpoint) endpoint).getMessageListener())___		JmsListenerEndpointRegistry customRegistry =_				context.getBean("customRegistry", JmsListenerEndpointRegistry.class)__		assertEquals("Wrong number of containers in the registry", 2,_				customRegistry.getListenerContainerIds().size())__		assertEquals("Wrong number of containers in the registry", 2,_				customRegistry.getListenerContainers().size())__		assertNotNull("Container with custom id on the annotation should be found",_				customRegistry.getListenerContainer("listenerId"))__		assertNotNull("Container created with custom id should be found",_				customRegistry.getListenerContainer("myCustomEndpointId"))__	};test,for,link,custom,bean,and,an,manually,endpoint,registered,with,my,custom,endpoint,id,the,custom,endpoint,does,not,provide,any,factory,so,it,s,registered,with,the,default,one;public,void,test,custom,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,custom,factory,context,get,bean,custom,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,custom,factory,get,listener,containers,size,jms,listener,endpoint,endpoint,default,factory,get,listener,containers,get,0,get,endpoint,assert,equals,wrong,endpoint,type,simple,jms,listener,endpoint,class,endpoint,get,class,assert,equals,wrong,listener,set,in,custom,endpoint,context,get,bean,simple,message,listener,simple,jms,listener,endpoint,endpoint,get,message,listener,jms,listener,endpoint,registry,custom,registry,context,get,bean,custom,registry,jms,listener,endpoint,registry,class,assert,equals,wrong,number,of,containers,in,the,registry,2,custom,registry,get,listener,container,ids,size,assert,equals,wrong,number,of,containers,in,the,registry,2,custom,registry,get,listener,containers,size,assert,not,null,container,with,custom,id,on,the,annotation,should,be,found,custom,registry,get,listener,container,listener,id,assert,not,null,container,created,with,custom,id,should,be,found,custom,registry,get,listener,container,my,custom,endpoint,id
AbstractJmsAnnotationDrivenTests -> public void testSampleConfiguration(ApplicationContext context);1397718966;Test for {@link SampleBean} discovery.;public void testSampleConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("defaultFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getContainers().size())__		assertEquals(1, simpleFactory.getContainers().size())__	};test,for,link,sample,bean,discovery;public,void,test,sample,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,default,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,containers,size,assert,equals,1,simple,factory,get,containers,size
AbstractJmsAnnotationDrivenTests -> public void testSampleConfiguration(ApplicationContext context);1398325263;Test for {@link SampleBean} discovery. If a factory with the default name_is set, an endpoint will use it automatically;public void testSampleConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getContainers().size())__		assertEquals(1, simpleFactory.getContainers().size())__	};test,for,link,sample,bean,discovery,if,a,factory,with,the,default,name,is,set,an,endpoint,will,use,it,automatically;public,void,test,sample,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,containers,size,assert,equals,1,simple,factory,get,containers,size
AbstractJmsAnnotationDrivenTests -> public void testSampleConfiguration(ApplicationContext context);1398342804;Test for {@link SampleBean} discovery. If a factory with the default name_is set, an endpoint will use it automatically;public void testSampleConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getContainers().size())__		assertEquals(1, simpleFactory.getContainers().size())__	};test,for,link,sample,bean,discovery,if,a,factory,with,the,default,name,is,set,an,endpoint,will,use,it,automatically;public,void,test,sample,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,containers,size,assert,equals,1,simple,factory,get,containers,size
AbstractJmsAnnotationDrivenTests -> public void testSampleConfiguration(ApplicationContext context);1398347811;Test for {@link SampleBean} discovery. If a factory with the default name_is set, an endpoint will use it automatically;public void testSampleConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getContainers().size())__		assertEquals(1, simpleFactory.getContainers().size())__	};test,for,link,sample,bean,discovery,if,a,factory,with,the,default,name,is,set,an,endpoint,will,use,it,automatically;public,void,test,sample,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,containers,size,assert,equals,1,simple,factory,get,containers,size
AbstractJmsAnnotationDrivenTests -> public void testSampleConfiguration(ApplicationContext context);1405696881;Test for {@link SampleBean} discovery. If a factory with the default name_is set, an endpoint will use it automatically;public void testSampleConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, simpleFactory.getListenerContainers().size())__	};test,for,link,sample,bean,discovery,if,a,factory,with,the,default,name,is,set,an,endpoint,will,use,it,automatically;public,void,test,sample,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,simple,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testSampleConfiguration(ApplicationContext context);1406902111;Test for {@link SampleBean} discovery. If a factory with the default name_is set, an endpoint will use it automatically;public void testSampleConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, simpleFactory.getListenerContainers().size())__	};test,for,link,sample,bean,discovery,if,a,factory,with,the,default,name,is,set,an,endpoint,will,use,it,automatically;public,void,test,sample,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,simple,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testSampleConfiguration(ApplicationContext context);1409581667;Test for {@link SampleBean} discovery. If a factory with the default name_is set, an endpoint will use it automatically;public void testSampleConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, simpleFactory.getListenerContainers().size())__	};test,for,link,sample,bean,discovery,if,a,factory,with,the,default,name,is,set,an,endpoint,will,use,it,automatically;public,void,test,sample,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,simple,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testSampleConfiguration(ApplicationContext context);1413848647;Test for {@link SampleBean} discovery. If a factory with the default name_is set, an endpoint will use it automatically;public void testSampleConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, simpleFactory.getListenerContainers().size())__	};test,for,link,sample,bean,discovery,if,a,factory,with,the,default,name,is,set,an,endpoint,will,use,it,automatically;public,void,test,sample,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,simple,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testSampleConfiguration(ApplicationContext context);1429201109;Test for {@link SampleBean} discovery. If a factory with the default name_is set, an endpoint will use it automatically;public void testSampleConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, simpleFactory.getListenerContainers().size())__	};test,for,link,sample,bean,discovery,if,a,factory,with,the,default,name,is,set,an,endpoint,will,use,it,automatically;public,void,test,sample,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,simple,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testSampleConfiguration(ApplicationContext context);1434970902;Test for {@link SampleBean} discovery. If a factory with the default name_is set, an endpoint will use it automatically;public void testSampleConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, simpleFactory.getListenerContainers().size())__	};test,for,link,sample,bean,discovery,if,a,factory,with,the,default,name,is,set,an,endpoint,will,use,it,automatically;public,void,test,sample,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,simple,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testSampleConfiguration(ApplicationContext context);1446477227;Test for {@link SampleBean} discovery. If a factory with the default name_is set, an endpoint will use it automatically;public void testSampleConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, simpleFactory.getListenerContainers().size())__	};test,for,link,sample,bean,discovery,if,a,factory,with,the,default,name,is,set,an,endpoint,will,use,it,automatically;public,void,test,sample,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,simple,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testSampleConfiguration(ApplicationContext context);1447077794;Test for {@link SampleBean} discovery. If a factory with the default name_is set, an endpoint will use it automatically;public void testSampleConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, simpleFactory.getListenerContainers().size())__	};test,for,link,sample,bean,discovery,if,a,factory,with,the,default,name,is,set,an,endpoint,will,use,it,automatically;public,void,test,sample,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,simple,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testSampleConfiguration(ApplicationContext context);1496242568;Test for {@link SampleBean} discovery. If a factory with the default name_is set, an endpoint will use it automatically;public void testSampleConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__		assertEquals(1, simpleFactory.getListenerContainers().size())__	};test,for,link,sample,bean,discovery,if,a,factory,with,the,default,name,is,set,an,endpoint,will,use,it,automatically;public,void,test,sample,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size,assert,equals,1,simple,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testDefaultContainerFactoryConfiguration(ApplicationContext context);1397718966;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered.;public void testDefaultContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("defaultFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered;public,void,test,default,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,default,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,containers,size
AbstractJmsAnnotationDrivenTests -> public void testDefaultContainerFactoryConfiguration(ApplicationContext context);1398325263;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with the default name.;public void testDefaultContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,the,default,name;public,void,test,default,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,containers,size
AbstractJmsAnnotationDrivenTests -> public void testDefaultContainerFactoryConfiguration(ApplicationContext context);1398342804;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with the default name.;public void testDefaultContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,the,default,name;public,void,test,default,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,containers,size
AbstractJmsAnnotationDrivenTests -> public void testDefaultContainerFactoryConfiguration(ApplicationContext context);1398347811;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with the default name.;public void testDefaultContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,the,default,name;public,void,test,default,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,containers,size
AbstractJmsAnnotationDrivenTests -> public void testDefaultContainerFactoryConfiguration(ApplicationContext context);1405696881;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with the default name.;public void testDefaultContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,the,default,name;public,void,test,default,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testDefaultContainerFactoryConfiguration(ApplicationContext context);1406902111;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with the default name.;public void testDefaultContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,the,default,name;public,void,test,default,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testDefaultContainerFactoryConfiguration(ApplicationContext context);1409581667;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with the default name.;public void testDefaultContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,the,default,name;public,void,test,default,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testDefaultContainerFactoryConfiguration(ApplicationContext context);1413848647;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with the default name.;public void testDefaultContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,the,default,name;public,void,test,default,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testDefaultContainerFactoryConfiguration(ApplicationContext context);1429201109;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with the default name.;public void testDefaultContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,the,default,name;public,void,test,default,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testDefaultContainerFactoryConfiguration(ApplicationContext context);1434970902;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with the default name.;public void testDefaultContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,the,default,name;public,void,test,default,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testDefaultContainerFactoryConfiguration(ApplicationContext context);1446477227;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with the default name.;public void testDefaultContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,the,default,name;public,void,test,default,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testDefaultContainerFactoryConfiguration(ApplicationContext context);1447077794;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with the default name.;public void testDefaultContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,the,default,name;public,void,test,default,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testDefaultContainerFactoryConfiguration(ApplicationContext context);1496242568;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with the default name.;public void testDefaultContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,the,default,name;public,void,test,default,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testJmsListenerRepeatable(ApplicationContext context);1434970902;Test for {@link JmsListenerRepeatableBean} and {@link JmsListenersBean} that validates that the_{@code @JmsListener} annotation is repeatable and generate one specific container per annotation.;public void testJmsListenerRepeatable(ApplicationContext context) {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		assertEquals(2, simpleFactory.getListenerContainers().size())___		MethodJmsListenerEndpoint first = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainer("first").getEndpoint()__		assertEquals("first", first.getId())__		assertEquals("myQueue", first.getDestination())__		assertEquals(null, first.getConcurrency())___		MethodJmsListenerEndpoint second = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainer("second").getEndpoint()__		assertEquals("second", second.getId())__		assertEquals("anotherQueue", second.getDestination())__		assertEquals("2-10", second.getConcurrency())__	};test,for,link,jms,listener,repeatable,bean,and,link,jms,listeners,bean,that,validates,that,the,code,jms,listener,annotation,is,repeatable,and,generate,one,specific,container,per,annotation;public,void,test,jms,listener,repeatable,application,context,context,jms,listener,container,test,factory,simple,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,assert,equals,2,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,first,method,jms,listener,endpoint,simple,factory,get,listener,container,first,get,endpoint,assert,equals,first,first,get,id,assert,equals,my,queue,first,get,destination,assert,equals,null,first,get,concurrency,method,jms,listener,endpoint,second,method,jms,listener,endpoint,simple,factory,get,listener,container,second,get,endpoint,assert,equals,second,second,get,id,assert,equals,another,queue,second,get,destination,assert,equals,2,10,second,get,concurrency
AbstractJmsAnnotationDrivenTests -> public void testJmsListenerRepeatable(ApplicationContext context);1446477227;Test for {@link JmsListenerRepeatableBean} and {@link JmsListenersBean} that validates that the_{@code @JmsListener} annotation is repeatable and generate one specific container per annotation.;public void testJmsListenerRepeatable(ApplicationContext context) {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		assertEquals(2, simpleFactory.getListenerContainers().size())___		MethodJmsListenerEndpoint first = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainer("first").getEndpoint()__		assertEquals("first", first.getId())__		assertEquals("myQueue", first.getDestination())__		assertEquals(null, first.getConcurrency())___		MethodJmsListenerEndpoint second = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainer("second").getEndpoint()__		assertEquals("second", second.getId())__		assertEquals("anotherQueue", second.getDestination())__		assertEquals("2-10", second.getConcurrency())__	};test,for,link,jms,listener,repeatable,bean,and,link,jms,listeners,bean,that,validates,that,the,code,jms,listener,annotation,is,repeatable,and,generate,one,specific,container,per,annotation;public,void,test,jms,listener,repeatable,application,context,context,jms,listener,container,test,factory,simple,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,assert,equals,2,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,first,method,jms,listener,endpoint,simple,factory,get,listener,container,first,get,endpoint,assert,equals,first,first,get,id,assert,equals,my,queue,first,get,destination,assert,equals,null,first,get,concurrency,method,jms,listener,endpoint,second,method,jms,listener,endpoint,simple,factory,get,listener,container,second,get,endpoint,assert,equals,second,second,get,id,assert,equals,another,queue,second,get,destination,assert,equals,2,10,second,get,concurrency
AbstractJmsAnnotationDrivenTests -> public void testJmsListenerRepeatable(ApplicationContext context);1447077794;Test for {@link JmsListenerRepeatableBean} and {@link JmsListenersBean} that validates that the_{@code @JmsListener} annotation is repeatable and generate one specific container per annotation.;public void testJmsListenerRepeatable(ApplicationContext context) {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		assertEquals(2, simpleFactory.getListenerContainers().size())___		MethodJmsListenerEndpoint first = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainer("first").getEndpoint()__		assertEquals("first", first.getId())__		assertEquals("myQueue", first.getDestination())__		assertEquals(null, first.getConcurrency())___		MethodJmsListenerEndpoint second = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainer("second").getEndpoint()__		assertEquals("second", second.getId())__		assertEquals("anotherQueue", second.getDestination())__		assertEquals("2-10", second.getConcurrency())__	};test,for,link,jms,listener,repeatable,bean,and,link,jms,listeners,bean,that,validates,that,the,code,jms,listener,annotation,is,repeatable,and,generate,one,specific,container,per,annotation;public,void,test,jms,listener,repeatable,application,context,context,jms,listener,container,test,factory,simple,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,assert,equals,2,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,first,method,jms,listener,endpoint,simple,factory,get,listener,container,first,get,endpoint,assert,equals,first,first,get,id,assert,equals,my,queue,first,get,destination,assert,equals,null,first,get,concurrency,method,jms,listener,endpoint,second,method,jms,listener,endpoint,simple,factory,get,listener,container,second,get,endpoint,assert,equals,second,second,get,id,assert,equals,another,queue,second,get,destination,assert,equals,2,10,second,get,concurrency
AbstractJmsAnnotationDrivenTests -> public void testJmsListenerRepeatable(ApplicationContext context);1496242568;Test for {@link JmsListenerRepeatableBean} and {@link JmsListenersBean} that validates that the_{@code @JmsListener} annotation is repeatable and generate one specific container per annotation.;public void testJmsListenerRepeatable(ApplicationContext context) {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class)__		assertEquals(2, simpleFactory.getListenerContainers().size())___		MethodJmsListenerEndpoint first = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainer("first").getEndpoint()__		assertEquals("first", first.getId())__		assertEquals("myQueue", first.getDestination())__		assertEquals(null, first.getConcurrency())___		MethodJmsListenerEndpoint second = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainer("second").getEndpoint()__		assertEquals("second", second.getId())__		assertEquals("anotherQueue", second.getDestination())__		assertEquals("2-10", second.getConcurrency())__	};test,for,link,jms,listener,repeatable,bean,and,link,jms,listeners,bean,that,validates,that,the,code,jms,listener,annotation,is,repeatable,and,generate,one,specific,container,per,annotation;public,void,test,jms,listener,repeatable,application,context,context,jms,listener,container,test,factory,simple,factory,context,get,bean,jms,listener,container,factory,jms,listener,container,test,factory,class,assert,equals,2,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,first,method,jms,listener,endpoint,simple,factory,get,listener,container,first,get,endpoint,assert,equals,first,first,get,id,assert,equals,my,queue,first,get,destination,assert,equals,null,first,get,concurrency,method,jms,listener,endpoint,second,method,jms,listener,endpoint,simple,factory,get,listener,container,second,get,endpoint,assert,equals,second,second,get,id,assert,equals,another,queue,second,get,destination,assert,equals,2,10,second,get,concurrency
AbstractJmsAnnotationDrivenTests -> public void testFullConfiguration(ApplicationContext context);1397718966;Test for {@link FullBean} discovery.;public void testFullConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getContainers().get(0).getEndpoint()__		assertEquals("listener1", endpoint.getId())__		assertEquals("queueIn", endpoint.getDestination())__		assertTrue(endpoint.isQueue())__		assertEquals("mySelector", endpoint.getSelector())__		assertEquals("mySubscription", endpoint.getSubscription())__	};test,for,link,full,bean,discovery;public,void,test,full,configuration,application,context,context,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,containers,get,0,get,endpoint,assert,equals,listener1,endpoint,get,id,assert,equals,queue,in,endpoint,get,destination,assert,true,endpoint,is,queue,assert,equals,my,selector,endpoint,get,selector,assert,equals,my,subscription,endpoint,get,subscription
AbstractJmsAnnotationDrivenTests -> public void testFullConfiguration(ApplicationContext context);1398325263;Test for {@link FullBean} discovery. In this case, no default is set because_all endpoints provide a default registry. This shows that the default factory_is only retrieved if it needs to be.;public void testFullConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getContainers().get(0).getEndpoint()__		assertEquals("listener1", endpoint.getId())__		assertEquals("queueIn", endpoint.getDestination())__		assertTrue(endpoint.isQueue())__		assertEquals("mySelector", endpoint.getSelector())__		assertEquals("mySubscription", endpoint.getSubscription())__	};test,for,link,full,bean,discovery,in,this,case,no,default,is,set,because,all,endpoints,provide,a,default,registry,this,shows,that,the,default,factory,is,only,retrieved,if,it,needs,to,be;public,void,test,full,configuration,application,context,context,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,containers,get,0,get,endpoint,assert,equals,listener1,endpoint,get,id,assert,equals,queue,in,endpoint,get,destination,assert,true,endpoint,is,queue,assert,equals,my,selector,endpoint,get,selector,assert,equals,my,subscription,endpoint,get,subscription
AbstractJmsAnnotationDrivenTests -> public void testFullConfiguration(ApplicationContext context);1398342804;Test for {@link FullBean} discovery. In this case, no default is set because_all endpoints provide a default registry. This shows that the default factory_is only retrieved if it needs to be.;public void testFullConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getContainers().get(0).getEndpoint()__		assertEquals("listener1", endpoint.getId())__		assertEquals("queueIn", endpoint.getDestination())__		assertTrue(endpoint.isQueue())__		assertEquals("mySelector", endpoint.getSelector())__		assertEquals("mySubscription", endpoint.getSubscription())__	};test,for,link,full,bean,discovery,in,this,case,no,default,is,set,because,all,endpoints,provide,a,default,registry,this,shows,that,the,default,factory,is,only,retrieved,if,it,needs,to,be;public,void,test,full,configuration,application,context,context,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,containers,get,0,get,endpoint,assert,equals,listener1,endpoint,get,id,assert,equals,queue,in,endpoint,get,destination,assert,true,endpoint,is,queue,assert,equals,my,selector,endpoint,get,selector,assert,equals,my,subscription,endpoint,get,subscription
AbstractJmsAnnotationDrivenTests -> public void testFullConfiguration(ApplicationContext context);1398347811;Test for {@link FullBean} discovery. In this case, no default is set because_all endpoints provide a default registry. This shows that the default factory_is only retrieved if it needs to be.;public void testFullConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getContainers().get(0).getEndpoint()__		assertEquals("listener1", endpoint.getId())__		assertEquals("queueIn", endpoint.getDestination())__		assertEquals("mySelector", endpoint.getSelector())__		assertEquals("mySubscription", endpoint.getSubscription())__	};test,for,link,full,bean,discovery,in,this,case,no,default,is,set,because,all,endpoints,provide,a,default,registry,this,shows,that,the,default,factory,is,only,retrieved,if,it,needs,to,be;public,void,test,full,configuration,application,context,context,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,containers,get,0,get,endpoint,assert,equals,listener1,endpoint,get,id,assert,equals,queue,in,endpoint,get,destination,assert,equals,my,selector,endpoint,get,selector,assert,equals,my,subscription,endpoint,get,subscription
AbstractJmsAnnotationDrivenTests -> public void testFullConfiguration(ApplicationContext context);1405696881;Test for {@link FullBean} discovery. In this case, no default is set because_all endpoints provide a default registry. This shows that the default factory_is only retrieved if it needs to be.;public void testFullConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("listener1", endpoint.getId())__		assertEquals("queueIn", endpoint.getDestination())__		assertEquals("mySelector", endpoint.getSelector())__		assertEquals("mySubscription", endpoint.getSubscription())__	};test,for,link,full,bean,discovery,in,this,case,no,default,is,set,because,all,endpoints,provide,a,default,registry,this,shows,that,the,default,factory,is,only,retrieved,if,it,needs,to,be;public,void,test,full,configuration,application,context,context,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,assert,equals,listener1,endpoint,get,id,assert,equals,queue,in,endpoint,get,destination,assert,equals,my,selector,endpoint,get,selector,assert,equals,my,subscription,endpoint,get,subscription
AbstractJmsAnnotationDrivenTests -> public void testFullConfiguration(ApplicationContext context);1406902111;Test for {@link FullBean} discovery. In this case, no default is set because_all endpoints provide a default registry. This shows that the default factory_is only retrieved if it needs to be.;public void testFullConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("listener1", endpoint.getId())__		assertEquals("queueIn", endpoint.getDestination())__		assertEquals("mySelector", endpoint.getSelector())__		assertEquals("mySubscription", endpoint.getSubscription())__	};test,for,link,full,bean,discovery,in,this,case,no,default,is,set,because,all,endpoints,provide,a,default,registry,this,shows,that,the,default,factory,is,only,retrieved,if,it,needs,to,be;public,void,test,full,configuration,application,context,context,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,assert,equals,listener1,endpoint,get,id,assert,equals,queue,in,endpoint,get,destination,assert,equals,my,selector,endpoint,get,selector,assert,equals,my,subscription,endpoint,get,subscription
AbstractJmsAnnotationDrivenTests -> public void testFullConfiguration(ApplicationContext context);1409581667;Test for {@link FullBean} discovery. In this case, no default is set because_all endpoints provide a default registry. This shows that the default factory_is only retrieved if it needs to be.;public void testFullConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("listener1", endpoint.getId())__		assertEquals("queueIn", endpoint.getDestination())__		assertEquals("mySelector", endpoint.getSelector())__		assertEquals("mySubscription", endpoint.getSubscription())__		assertEquals("1-10", endpoint.getConcurrency())__	};test,for,link,full,bean,discovery,in,this,case,no,default,is,set,because,all,endpoints,provide,a,default,registry,this,shows,that,the,default,factory,is,only,retrieved,if,it,needs,to,be;public,void,test,full,configuration,application,context,context,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,assert,equals,listener1,endpoint,get,id,assert,equals,queue,in,endpoint,get,destination,assert,equals,my,selector,endpoint,get,selector,assert,equals,my,subscription,endpoint,get,subscription,assert,equals,1,10,endpoint,get,concurrency
AbstractJmsAnnotationDrivenTests -> public void testFullConfiguration(ApplicationContext context);1413848647;Test for {@link FullBean} discovery. In this case, no default is set because_all endpoints provide a default registry. This shows that the default factory_is only retrieved if it needs to be.;public void testFullConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("listener1", endpoint.getId())__		assertEquals("queueIn", endpoint.getDestination())__		assertEquals("mySelector", endpoint.getSelector())__		assertEquals("mySubscription", endpoint.getSubscription())__		assertEquals("1-10", endpoint.getConcurrency())__	};test,for,link,full,bean,discovery,in,this,case,no,default,is,set,because,all,endpoints,provide,a,default,registry,this,shows,that,the,default,factory,is,only,retrieved,if,it,needs,to,be;public,void,test,full,configuration,application,context,context,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,assert,equals,listener1,endpoint,get,id,assert,equals,queue,in,endpoint,get,destination,assert,equals,my,selector,endpoint,get,selector,assert,equals,my,subscription,endpoint,get,subscription,assert,equals,1,10,endpoint,get,concurrency
AbstractJmsAnnotationDrivenTests -> public void testFullConfiguration(ApplicationContext context);1429201109;Test for {@link FullBean} discovery. In this case, no default is set because_all endpoints provide a default registry. This shows that the default factory_is only retrieved if it needs to be.;public void testFullConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("listener1", endpoint.getId())__		assertEquals("queueIn", endpoint.getDestination())__		assertEquals("mySelector", endpoint.getSelector())__		assertEquals("mySubscription", endpoint.getSubscription())__		assertEquals("1-10", endpoint.getConcurrency())___		Method m = ReflectionUtils.findMethod(endpoint.getClass(), "getDefaultResponseDestination")__		ReflectionUtils.makeAccessible(m)__		Object destination = ReflectionUtils.invokeMethod(m, endpoint)__		assertEquals("queueOut", destination)__	};test,for,link,full,bean,discovery,in,this,case,no,default,is,set,because,all,endpoints,provide,a,default,registry,this,shows,that,the,default,factory,is,only,retrieved,if,it,needs,to,be;public,void,test,full,configuration,application,context,context,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,assert,equals,listener1,endpoint,get,id,assert,equals,queue,in,endpoint,get,destination,assert,equals,my,selector,endpoint,get,selector,assert,equals,my,subscription,endpoint,get,subscription,assert,equals,1,10,endpoint,get,concurrency,method,m,reflection,utils,find,method,endpoint,get,class,get,default,response,destination,reflection,utils,make,accessible,m,object,destination,reflection,utils,invoke,method,m,endpoint,assert,equals,queue,out,destination
AbstractJmsAnnotationDrivenTests -> public void testFullConfiguration(ApplicationContext context);1434970902;Test for {@link FullBean} discovery. In this case, no default is set because_all endpoints provide a default registry. This shows that the default factory_is only retrieved if it needs to be.;public void testFullConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("listener1", endpoint.getId())__		assertEquals("queueIn", endpoint.getDestination())__		assertEquals("mySelector", endpoint.getSelector())__		assertEquals("mySubscription", endpoint.getSubscription())__		assertEquals("1-10", endpoint.getConcurrency())___		Method m = ReflectionUtils.findMethod(endpoint.getClass(), "getDefaultResponseDestination")__		ReflectionUtils.makeAccessible(m)__		Object destination = ReflectionUtils.invokeMethod(m, endpoint)__		assertEquals("queueOut", destination)__	};test,for,link,full,bean,discovery,in,this,case,no,default,is,set,because,all,endpoints,provide,a,default,registry,this,shows,that,the,default,factory,is,only,retrieved,if,it,needs,to,be;public,void,test,full,configuration,application,context,context,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,assert,equals,listener1,endpoint,get,id,assert,equals,queue,in,endpoint,get,destination,assert,equals,my,selector,endpoint,get,selector,assert,equals,my,subscription,endpoint,get,subscription,assert,equals,1,10,endpoint,get,concurrency,method,m,reflection,utils,find,method,endpoint,get,class,get,default,response,destination,reflection,utils,make,accessible,m,object,destination,reflection,utils,invoke,method,m,endpoint,assert,equals,queue,out,destination
AbstractJmsAnnotationDrivenTests -> public void testFullConfiguration(ApplicationContext context);1446477227;Test for {@link FullBean} discovery. In this case, no default is set because_all endpoints provide a default registry. This shows that the default factory_is only retrieved if it needs to be.;public void testFullConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("listener1", endpoint.getId())__		assertEquals("queueIn", endpoint.getDestination())__		assertEquals("mySelector", endpoint.getSelector())__		assertEquals("mySubscription", endpoint.getSubscription())__		assertEquals("1-10", endpoint.getConcurrency())___		Method m = ReflectionUtils.findMethod(endpoint.getClass(), "getDefaultResponseDestination")__		ReflectionUtils.makeAccessible(m)__		Object destination = ReflectionUtils.invokeMethod(m, endpoint)__		assertEquals("queueOut", destination)__	};test,for,link,full,bean,discovery,in,this,case,no,default,is,set,because,all,endpoints,provide,a,default,registry,this,shows,that,the,default,factory,is,only,retrieved,if,it,needs,to,be;public,void,test,full,configuration,application,context,context,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,assert,equals,listener1,endpoint,get,id,assert,equals,queue,in,endpoint,get,destination,assert,equals,my,selector,endpoint,get,selector,assert,equals,my,subscription,endpoint,get,subscription,assert,equals,1,10,endpoint,get,concurrency,method,m,reflection,utils,find,method,endpoint,get,class,get,default,response,destination,reflection,utils,make,accessible,m,object,destination,reflection,utils,invoke,method,m,endpoint,assert,equals,queue,out,destination
AbstractJmsAnnotationDrivenTests -> public void testFullConfiguration(ApplicationContext context);1447077794;Test for {@link FullBean} discovery. In this case, no default is set because_all endpoints provide a default registry. This shows that the default factory_is only retrieved if it needs to be.;public void testFullConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("listener1", endpoint.getId())__		assertEquals("queueIn", endpoint.getDestination())__		assertEquals("mySelector", endpoint.getSelector())__		assertEquals("mySubscription", endpoint.getSubscription())__		assertEquals("1-10", endpoint.getConcurrency())___		Method m = ReflectionUtils.findMethod(endpoint.getClass(), "getDefaultResponseDestination")__		ReflectionUtils.makeAccessible(m)__		Object destination = ReflectionUtils.invokeMethod(m, endpoint)__		assertEquals("queueOut", destination)__	};test,for,link,full,bean,discovery,in,this,case,no,default,is,set,because,all,endpoints,provide,a,default,registry,this,shows,that,the,default,factory,is,only,retrieved,if,it,needs,to,be;public,void,test,full,configuration,application,context,context,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,assert,equals,listener1,endpoint,get,id,assert,equals,queue,in,endpoint,get,destination,assert,equals,my,selector,endpoint,get,selector,assert,equals,my,subscription,endpoint,get,subscription,assert,equals,1,10,endpoint,get,concurrency,method,m,reflection,utils,find,method,endpoint,get,class,get,default,response,destination,reflection,utils,make,accessible,m,object,destination,reflection,utils,invoke,method,m,endpoint,assert,equals,queue,out,destination
AbstractJmsAnnotationDrivenTests -> public void testFullConfiguration(ApplicationContext context);1496242568;Test for {@link FullBean} discovery. In this case, no default is set because_all endpoints provide a default registry. This shows that the default factory_is only retrieved if it needs to be.;public void testFullConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()__		assertEquals("listener1", endpoint.getId())__		assertEquals("queueIn", endpoint.getDestination())__		assertEquals("mySelector", endpoint.getSelector())__		assertEquals("mySubscription", endpoint.getSubscription())__		assertEquals("1-10", endpoint.getConcurrency())___		Method m = ReflectionUtils.findMethod(endpoint.getClass(), "getDefaultResponseDestination")__		ReflectionUtils.makeAccessible(m)__		Object destination = ReflectionUtils.invokeMethod(m, endpoint)__		assertEquals("queueOut", destination)__	};test,for,link,full,bean,discovery,in,this,case,no,default,is,set,because,all,endpoints,provide,a,default,registry,this,shows,that,the,default,factory,is,only,retrieved,if,it,needs,to,be;public,void,test,full,configuration,application,context,context,jms,listener,container,test,factory,simple,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,assert,equals,listener1,endpoint,get,id,assert,equals,queue,in,endpoint,get,destination,assert,equals,my,selector,endpoint,get,selector,assert,equals,my,subscription,endpoint,get,subscription,assert,equals,1,10,endpoint,get,concurrency,method,m,reflection,utils,find,method,endpoint,get,class,get,default,response,destination,reflection,utils,make,accessible,m,object,destination,reflection,utils,invoke,method,m,endpoint,assert,equals,queue,out,destination
AbstractJmsAnnotationDrivenTests -> public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException;1397718966;Test for {@link ValidationBean} with a validator ({@link TestValidator}) specified_in a custom {@link org.springframework.jms.config.DefaultJmsHandlerMethodFactory}.__The test should throw a {@link org.springframework.jms.listener.adapter.ListenerExecutionFailedException};public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("defaultFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getContainers().get(0).getEndpoint()___		SimpleMessageListenerContainer container = new SimpleMessageListenerContainer()__		endpoint.setupMessageContainer(container)__		MessagingMessageListenerAdapter listener = (MessagingMessageListenerAdapter) container.getMessageListener()__		listener.onMessage(new StubTextMessage("failValidation"), mock(Session.class))__	};test,for,link,validation,bean,with,a,validator,link,test,validator,specified,in,a,custom,link,org,springframework,jms,config,default,jms,handler,method,factory,the,test,should,throw,a,link,org,springframework,jms,listener,adapter,listener,execution,failed,exception;public,void,test,jms,handler,method,factory,configuration,application,context,context,throws,jmsexception,jms,listener,container,test,factory,simple,factory,context,get,bean,default,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,containers,get,0,get,endpoint,simple,message,listener,container,container,new,simple,message,listener,container,endpoint,setup,message,container,container,messaging,message,listener,adapter,listener,messaging,message,listener,adapter,container,get,message,listener,listener,on,message,new,stub,text,message,fail,validation,mock,session,class
AbstractJmsAnnotationDrivenTests -> public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException;1398325263;Test for {@link ValidationBean} with a validator ({@link TestValidator}) specified_in a custom {@link org.springframework.jms.config.DefaultJmsHandlerMethodFactory}.__The test should throw a {@link org.springframework.jms.listener.adapter.ListenerExecutionFailedException};public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("defaultFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getContainers().get(0).getEndpoint()___		SimpleMessageListenerContainer container = new SimpleMessageListenerContainer()__		endpoint.setupMessageContainer(container)__		MessagingMessageListenerAdapter listener = (MessagingMessageListenerAdapter) container.getMessageListener()__		listener.onMessage(new StubTextMessage("failValidation"), mock(Session.class))__	};test,for,link,validation,bean,with,a,validator,link,test,validator,specified,in,a,custom,link,org,springframework,jms,config,default,jms,handler,method,factory,the,test,should,throw,a,link,org,springframework,jms,listener,adapter,listener,execution,failed,exception;public,void,test,jms,handler,method,factory,configuration,application,context,context,throws,jmsexception,jms,listener,container,test,factory,simple,factory,context,get,bean,default,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,containers,get,0,get,endpoint,simple,message,listener,container,container,new,simple,message,listener,container,endpoint,setup,message,container,container,messaging,message,listener,adapter,listener,messaging,message,listener,adapter,container,get,message,listener,listener,on,message,new,stub,text,message,fail,validation,mock,session,class
AbstractJmsAnnotationDrivenTests -> public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException;1398342804;Test for {@link ValidationBean} with a validator ({@link TestValidator}) specified_in a custom {@link org.springframework.jms.config.DefaultJmsHandlerMethodFactory}.__The test should throw a {@link org.springframework.jms.listener.adapter.ListenerExecutionFailedException};public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("defaultFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getContainers().get(0).getEndpoint()___		SimpleMessageListenerContainer container = new SimpleMessageListenerContainer()__		endpoint.setupMessageContainer(container)__		MessagingMessageListenerAdapter listener = (MessagingMessageListenerAdapter) container.getMessageListener()__		listener.onMessage(new StubTextMessage("failValidation"), mock(Session.class))__	};test,for,link,validation,bean,with,a,validator,link,test,validator,specified,in,a,custom,link,org,springframework,jms,config,default,jms,handler,method,factory,the,test,should,throw,a,link,org,springframework,jms,listener,adapter,listener,execution,failed,exception;public,void,test,jms,handler,method,factory,configuration,application,context,context,throws,jmsexception,jms,listener,container,test,factory,simple,factory,context,get,bean,default,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,containers,get,0,get,endpoint,simple,message,listener,container,container,new,simple,message,listener,container,endpoint,setup,message,container,container,messaging,message,listener,adapter,listener,messaging,message,listener,adapter,container,get,message,listener,listener,on,message,new,stub,text,message,fail,validation,mock,session,class
AbstractJmsAnnotationDrivenTests -> public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException;1398347811;Test for {@link ValidationBean} with a validator ({@link TestValidator}) specified_in a custom {@link org.springframework.jms.config.DefaultJmsHandlerMethodFactory}.__The test should throw a {@link org.springframework.jms.listener.adapter.ListenerExecutionFailedException};public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("defaultFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getContainers().get(0).getEndpoint()___		SimpleMessageListenerContainer container = new SimpleMessageListenerContainer()__		endpoint.setupMessageContainer(container)__		MessagingMessageListenerAdapter listener = (MessagingMessageListenerAdapter) container.getMessageListener()__		listener.onMessage(new StubTextMessage("failValidation"), mock(Session.class))__	};test,for,link,validation,bean,with,a,validator,link,test,validator,specified,in,a,custom,link,org,springframework,jms,config,default,jms,handler,method,factory,the,test,should,throw,a,link,org,springframework,jms,listener,adapter,listener,execution,failed,exception;public,void,test,jms,handler,method,factory,configuration,application,context,context,throws,jmsexception,jms,listener,container,test,factory,simple,factory,context,get,bean,default,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,containers,get,0,get,endpoint,simple,message,listener,container,container,new,simple,message,listener,container,endpoint,setup,message,container,container,messaging,message,listener,adapter,listener,messaging,message,listener,adapter,container,get,message,listener,listener,on,message,new,stub,text,message,fail,validation,mock,session,class
AbstractJmsAnnotationDrivenTests -> public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException;1405696881;Test for {@link ValidationBean} with a validator ({@link TestValidator}) specified_in a custom {@link org.springframework.jms.config.DefaultJmsHandlerMethodFactory}.__The test should throw a {@link org.springframework.jms.listener.adapter.ListenerExecutionFailedException};public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("defaultFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()___		SimpleMessageListenerContainer container = new SimpleMessageListenerContainer()__		endpoint.setupListenerContainer(container)__		MessagingMessageListenerAdapter listener = (MessagingMessageListenerAdapter) container.getMessageListener()__		listener.onMessage(new StubTextMessage("failValidation"), mock(Session.class))__	};test,for,link,validation,bean,with,a,validator,link,test,validator,specified,in,a,custom,link,org,springframework,jms,config,default,jms,handler,method,factory,the,test,should,throw,a,link,org,springframework,jms,listener,adapter,listener,execution,failed,exception;public,void,test,jms,handler,method,factory,configuration,application,context,context,throws,jmsexception,jms,listener,container,test,factory,simple,factory,context,get,bean,default,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,simple,message,listener,container,container,new,simple,message,listener,container,endpoint,setup,listener,container,container,messaging,message,listener,adapter,listener,messaging,message,listener,adapter,container,get,message,listener,listener,on,message,new,stub,text,message,fail,validation,mock,session,class
AbstractJmsAnnotationDrivenTests -> public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException;1406902111;Test for {@link ValidationBean} with a validator ({@link TestValidator}) specified_in a custom {@link org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory}.__The test should throw a {@link org.springframework.jms.listener.adapter.ListenerExecutionFailedException};public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("defaultFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()___		SimpleMessageListenerContainer container = new SimpleMessageListenerContainer()__		endpoint.setupListenerContainer(container)__		MessagingMessageListenerAdapter listener = (MessagingMessageListenerAdapter) container.getMessageListener()__		listener.onMessage(new StubTextMessage("failValidation"), mock(Session.class))__	};test,for,link,validation,bean,with,a,validator,link,test,validator,specified,in,a,custom,link,org,springframework,messaging,handler,annotation,support,message,handler,method,factory,the,test,should,throw,a,link,org,springframework,jms,listener,adapter,listener,execution,failed,exception;public,void,test,jms,handler,method,factory,configuration,application,context,context,throws,jmsexception,jms,listener,container,test,factory,simple,factory,context,get,bean,default,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,simple,message,listener,container,container,new,simple,message,listener,container,endpoint,setup,listener,container,container,messaging,message,listener,adapter,listener,messaging,message,listener,adapter,container,get,message,listener,listener,on,message,new,stub,text,message,fail,validation,mock,session,class
AbstractJmsAnnotationDrivenTests -> public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException;1409581667;Test for {@link ValidationBean} with a validator ({@link TestValidator}) specified_in a custom {@link org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory}.__The test should throw a {@link org.springframework.jms.listener.adapter.ListenerExecutionFailedException};public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("defaultFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()___		SimpleMessageListenerContainer container = new SimpleMessageListenerContainer()__		endpoint.setupListenerContainer(container)__		MessagingMessageListenerAdapter listener = (MessagingMessageListenerAdapter) container.getMessageListener()__		listener.onMessage(new StubTextMessage("failValidation"), mock(Session.class))__	};test,for,link,validation,bean,with,a,validator,link,test,validator,specified,in,a,custom,link,org,springframework,messaging,handler,annotation,support,message,handler,method,factory,the,test,should,throw,a,link,org,springframework,jms,listener,adapter,listener,execution,failed,exception;public,void,test,jms,handler,method,factory,configuration,application,context,context,throws,jmsexception,jms,listener,container,test,factory,simple,factory,context,get,bean,default,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,simple,message,listener,container,container,new,simple,message,listener,container,endpoint,setup,listener,container,container,messaging,message,listener,adapter,listener,messaging,message,listener,adapter,container,get,message,listener,listener,on,message,new,stub,text,message,fail,validation,mock,session,class
AbstractJmsAnnotationDrivenTests -> public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException;1413848647;Test for {@link ValidationBean} with a validator ({@link TestValidator}) specified_in a custom {@link org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory}.__The test should throw a {@link org.springframework.jms.listener.adapter.ListenerExecutionFailedException};public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("defaultFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()___		SimpleMessageListenerContainer container = new SimpleMessageListenerContainer()__		endpoint.setupListenerContainer(container)__		MessagingMessageListenerAdapter listener = (MessagingMessageListenerAdapter) container.getMessageListener()__		listener.onMessage(new StubTextMessage("failValidation"), mock(Session.class))__	};test,for,link,validation,bean,with,a,validator,link,test,validator,specified,in,a,custom,link,org,springframework,messaging,handler,annotation,support,message,handler,method,factory,the,test,should,throw,a,link,org,springframework,jms,listener,adapter,listener,execution,failed,exception;public,void,test,jms,handler,method,factory,configuration,application,context,context,throws,jmsexception,jms,listener,container,test,factory,simple,factory,context,get,bean,default,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,simple,message,listener,container,container,new,simple,message,listener,container,endpoint,setup,listener,container,container,messaging,message,listener,adapter,listener,messaging,message,listener,adapter,container,get,message,listener,listener,on,message,new,stub,text,message,fail,validation,mock,session,class
AbstractJmsAnnotationDrivenTests -> public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException;1429201109;Test for {@link ValidationBean} with a validator ({@link TestValidator}) specified_in a custom {@link org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory}.__The test should throw a {@link org.springframework.jms.listener.adapter.ListenerExecutionFailedException};public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("defaultFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()___		SimpleMessageListenerContainer container = new SimpleMessageListenerContainer()__		endpoint.setupListenerContainer(container)__		MessagingMessageListenerAdapter listener = (MessagingMessageListenerAdapter) container.getMessageListener()__		listener.onMessage(new StubTextMessage("failValidation"), mock(Session.class))__	};test,for,link,validation,bean,with,a,validator,link,test,validator,specified,in,a,custom,link,org,springframework,messaging,handler,annotation,support,message,handler,method,factory,the,test,should,throw,a,link,org,springframework,jms,listener,adapter,listener,execution,failed,exception;public,void,test,jms,handler,method,factory,configuration,application,context,context,throws,jmsexception,jms,listener,container,test,factory,simple,factory,context,get,bean,default,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,simple,message,listener,container,container,new,simple,message,listener,container,endpoint,setup,listener,container,container,messaging,message,listener,adapter,listener,messaging,message,listener,adapter,container,get,message,listener,listener,on,message,new,stub,text,message,fail,validation,mock,session,class
AbstractJmsAnnotationDrivenTests -> public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException;1434970902;Test for {@link ValidationBean} with a validator ({@link TestValidator}) specified_in a custom {@link org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory}.__The test should throw a {@link org.springframework.jms.listener.adapter.ListenerExecutionFailedException};public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("defaultFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()___		SimpleMessageListenerContainer container = new SimpleMessageListenerContainer()__		endpoint.setupListenerContainer(container)__		MessagingMessageListenerAdapter listener = (MessagingMessageListenerAdapter) container.getMessageListener()__		listener.onMessage(new StubTextMessage("failValidation"), mock(Session.class))__	};test,for,link,validation,bean,with,a,validator,link,test,validator,specified,in,a,custom,link,org,springframework,messaging,handler,annotation,support,message,handler,method,factory,the,test,should,throw,a,link,org,springframework,jms,listener,adapter,listener,execution,failed,exception;public,void,test,jms,handler,method,factory,configuration,application,context,context,throws,jmsexception,jms,listener,container,test,factory,simple,factory,context,get,bean,default,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,simple,message,listener,container,container,new,simple,message,listener,container,endpoint,setup,listener,container,container,messaging,message,listener,adapter,listener,messaging,message,listener,adapter,container,get,message,listener,listener,on,message,new,stub,text,message,fail,validation,mock,session,class
AbstractJmsAnnotationDrivenTests -> public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException;1446477227;Test for {@link ValidationBean} with a validator ({@link TestValidator}) specified_in a custom {@link org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory}.__The test should throw a {@link org.springframework.jms.listener.adapter.ListenerExecutionFailedException};public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("defaultFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()___		SimpleMessageListenerContainer container = new SimpleMessageListenerContainer()__		endpoint.setupListenerContainer(container)__		MessagingMessageListenerAdapter listener = (MessagingMessageListenerAdapter) container.getMessageListener()__		listener.onMessage(new StubTextMessage("failValidation"), mock(Session.class))__	};test,for,link,validation,bean,with,a,validator,link,test,validator,specified,in,a,custom,link,org,springframework,messaging,handler,annotation,support,message,handler,method,factory,the,test,should,throw,a,link,org,springframework,jms,listener,adapter,listener,execution,failed,exception;public,void,test,jms,handler,method,factory,configuration,application,context,context,throws,jmsexception,jms,listener,container,test,factory,simple,factory,context,get,bean,default,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,simple,message,listener,container,container,new,simple,message,listener,container,endpoint,setup,listener,container,container,messaging,message,listener,adapter,listener,messaging,message,listener,adapter,container,get,message,listener,listener,on,message,new,stub,text,message,fail,validation,mock,session,class
AbstractJmsAnnotationDrivenTests -> public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException;1447077794;Test for {@link ValidationBean} with a validator ({@link TestValidator}) specified_in a custom {@link org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory}.__The test should throw a {@link org.springframework.jms.listener.adapter.ListenerExecutionFailedException};public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("defaultFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()___		SimpleMessageListenerContainer container = new SimpleMessageListenerContainer()__		endpoint.setupListenerContainer(container)__		MessagingMessageListenerAdapter listener = (MessagingMessageListenerAdapter) container.getMessageListener()__		listener.onMessage(new StubTextMessage("failValidation"), mock(Session.class))__	};test,for,link,validation,bean,with,a,validator,link,test,validator,specified,in,a,custom,link,org,springframework,messaging,handler,annotation,support,message,handler,method,factory,the,test,should,throw,a,link,org,springframework,jms,listener,adapter,listener,execution,failed,exception;public,void,test,jms,handler,method,factory,configuration,application,context,context,throws,jmsexception,jms,listener,container,test,factory,simple,factory,context,get,bean,default,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,simple,message,listener,container,container,new,simple,message,listener,container,endpoint,setup,listener,container,container,messaging,message,listener,adapter,listener,messaging,message,listener,adapter,container,get,message,listener,listener,on,message,new,stub,text,message,fail,validation,mock,session,class
AbstractJmsAnnotationDrivenTests -> public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException;1496242568;Test for {@link ValidationBean} with a validator ({@link TestValidator}) specified_in a custom {@link org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory}.__The test should throw a {@link org.springframework.jms.listener.adapter.ListenerExecutionFailedException};public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException {_		JmsListenerContainerTestFactory simpleFactory =_				context.getBean("defaultFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, simpleFactory.getListenerContainers().size())__		MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint)_				simpleFactory.getListenerContainers().get(0).getEndpoint()___		SimpleMessageListenerContainer container = new SimpleMessageListenerContainer()__		endpoint.setupListenerContainer(container)__		MessagingMessageListenerAdapter listener = (MessagingMessageListenerAdapter) container.getMessageListener()__		listener.onMessage(new StubTextMessage("failValidation"), mock(Session.class))__	};test,for,link,validation,bean,with,a,validator,link,test,validator,specified,in,a,custom,link,org,springframework,messaging,handler,annotation,support,message,handler,method,factory,the,test,should,throw,a,link,org,springframework,jms,listener,adapter,listener,execution,failed,exception;public,void,test,jms,handler,method,factory,configuration,application,context,context,throws,jmsexception,jms,listener,container,test,factory,simple,factory,context,get,bean,default,factory,jms,listener,container,test,factory,class,assert,equals,1,simple,factory,get,listener,containers,size,method,jms,listener,endpoint,endpoint,method,jms,listener,endpoint,simple,factory,get,listener,containers,get,0,get,endpoint,simple,message,listener,container,container,new,simple,message,listener,container,endpoint,setup,listener,container,container,messaging,message,listener,adapter,listener,messaging,message,listener,adapter,container,get,message,listener,listener,on,message,new,stub,text,message,fail,validation,mock,session,class
AbstractJmsAnnotationDrivenTests -> public void testExplicitContainerFactoryConfiguration(ApplicationContext context);1398325263;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with an explicit_default.;public void testExplicitContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,an,explicit,default;public,void,test,explicit,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,containers,size
AbstractJmsAnnotationDrivenTests -> public void testExplicitContainerFactoryConfiguration(ApplicationContext context);1398342804;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with an explicit_default.;public void testExplicitContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,an,explicit,default;public,void,test,explicit,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,containers,size
AbstractJmsAnnotationDrivenTests -> public void testExplicitContainerFactoryConfiguration(ApplicationContext context);1398347811;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with an explicit_default.;public void testExplicitContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,an,explicit,default;public,void,test,explicit,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,containers,size
AbstractJmsAnnotationDrivenTests -> public void testExplicitContainerFactoryConfiguration(ApplicationContext context);1405696881;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with an explicit_default.;public void testExplicitContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,an,explicit,default;public,void,test,explicit,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testExplicitContainerFactoryConfiguration(ApplicationContext context);1406902111;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with an explicit_default.;public void testExplicitContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,an,explicit,default;public,void,test,explicit,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testExplicitContainerFactoryConfiguration(ApplicationContext context);1409581667;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with an explicit_default.;public void testExplicitContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,an,explicit,default;public,void,test,explicit,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testExplicitContainerFactoryConfiguration(ApplicationContext context);1413848647;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with an explicit_default.;public void testExplicitContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,an,explicit,default;public,void,test,explicit,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testExplicitContainerFactoryConfiguration(ApplicationContext context);1429201109;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with an explicit_default.;public void testExplicitContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,an,explicit,default;public,void,test,explicit,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testExplicitContainerFactoryConfiguration(ApplicationContext context);1434970902;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with an explicit_default.;public void testExplicitContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,an,explicit,default;public,void,test,explicit,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testExplicitContainerFactoryConfiguration(ApplicationContext context);1446477227;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with an explicit_default.;public void testExplicitContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,an,explicit,default;public,void,test,explicit,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testExplicitContainerFactoryConfiguration(ApplicationContext context);1447077794;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with an explicit_default.;public void testExplicitContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,an,explicit,default;public,void,test,explicit,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
AbstractJmsAnnotationDrivenTests -> public void testExplicitContainerFactoryConfiguration(ApplicationContext context);1496242568;Test for {@link DefaultBean} that does not define the container_factory to use as a default is registered with an explicit_default.;public void testExplicitContainerFactoryConfiguration(ApplicationContext context) {_		JmsListenerContainerTestFactory defaultFactory =_				context.getBean("simpleFactory", JmsListenerContainerTestFactory.class)__		assertEquals(1, defaultFactory.getListenerContainers().size())__	};test,for,link,default,bean,that,does,not,define,the,container,factory,to,use,as,a,default,is,registered,with,an,explicit,default;public,void,test,explicit,container,factory,configuration,application,context,context,jms,listener,container,test,factory,default,factory,context,get,bean,simple,factory,jms,listener,container,test,factory,class,assert,equals,1,default,factory,get,listener,containers,size
