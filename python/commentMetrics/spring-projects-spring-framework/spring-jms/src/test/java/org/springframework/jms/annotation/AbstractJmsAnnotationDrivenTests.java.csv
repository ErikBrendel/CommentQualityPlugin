commented;modifiers;parameterAmount;loc;comment;code
false;public,abstract;0;2;;@Test public abstract void sampleConfiguration().
false;public,abstract;0;2;;@Test public abstract void fullConfiguration().
false;public,abstract;0;2;;@Test public abstract void fullConfigurableConfiguration().
false;public,abstract;0;2;;@Test public abstract void customConfiguration().
false;public,abstract;0;2;;@Test public abstract void explicitContainerFactory().
false;public,abstract;0;2;;@Test public abstract void defaultContainerFactory().
false;public,abstract;0;2;;@Test public abstract void jmsHandlerMethodFactoryConfiguration() throws JMSException.
false;public,abstract;0;2;;@Test public abstract void jmsListenerIsRepeatable().
false;public,abstract;0;2;;@Test public abstract void jmsListeners().
true;public;1;8;/**  * Test for {@link SampleBean} discovery. If a factory with the default name  * is set, an endpoint will use it automatically  */ ;/**  * Test for {@link SampleBean} discovery. If a factory with the default name  * is set, an endpoint will use it automatically  */ public void testSampleConfiguration(ApplicationContext context) {     JmsListenerContainerTestFactory defaultFactory = context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class).     JmsListenerContainerTestFactory simpleFactory = context.getBean("simpleFactory", JmsListenerContainerTestFactory.class).     assertEquals(1, defaultFactory.getListenerContainers().size()).     assertEquals(1, simpleFactory.getListenerContainers().size()). }
true;public;1;17;/**  * Test for {@link FullBean} discovery. In this case, no default is set because  * all endpoints provide a default registry. This shows that the default factory  * is only retrieved if it needs to be.  */ ;/**  * Test for {@link FullBean} discovery. In this case, no default is set because  * all endpoints provide a default registry. This shows that the default factory  * is only retrieved if it needs to be.  */ public void testFullConfiguration(ApplicationContext context) {     JmsListenerContainerTestFactory simpleFactory = context.getBean("simpleFactory", JmsListenerContainerTestFactory.class).     assertEquals(1, simpleFactory.getListenerContainers().size()).     MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint) simpleFactory.getListenerContainers().get(0).getEndpoint().     assertEquals("listener1", endpoint.getId()).     assertEquals("queueIn", endpoint.getDestination()).     assertEquals("mySelector", endpoint.getSelector()).     assertEquals("mySubscription", endpoint.getSubscription()).     assertEquals("1-10", endpoint.getConcurrency()).     Method m = ReflectionUtils.findMethod(endpoint.getClass(), "getDefaultResponseDestination").     ReflectionUtils.makeAccessible(m).     Object destination = ReflectionUtils.invokeMethod(m, endpoint).     assertEquals("queueOut", destination). }
true;public;1;23;/**  * Test for {@link CustomBean} and an manually endpoint registered  * with "myCustomEndpointId". The custom endpoint does not provide  * any factory so it's registered with the default one  */ ;/**  * Test for {@link CustomBean} and an manually endpoint registered  * with "myCustomEndpointId". The custom endpoint does not provide  * any factory so it's registered with the default one  */ public void testCustomConfiguration(ApplicationContext context) {     JmsListenerContainerTestFactory defaultFactory = context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class).     JmsListenerContainerTestFactory customFactory = context.getBean("customFactory", JmsListenerContainerTestFactory.class).     assertEquals(1, defaultFactory.getListenerContainers().size()).     assertEquals(1, customFactory.getListenerContainers().size()).     JmsListenerEndpoint endpoint = defaultFactory.getListenerContainers().get(0).getEndpoint().     assertEquals("Wrong endpoint type", SimpleJmsListenerEndpoint.class, endpoint.getClass()).     assertEquals("Wrong listener set in custom endpoint", context.getBean("simpleMessageListener"), ((SimpleJmsListenerEndpoint) endpoint).getMessageListener()).     JmsListenerEndpointRegistry customRegistry = context.getBean("customRegistry", JmsListenerEndpointRegistry.class).     assertEquals("Wrong number of containers in the registry", 2, customRegistry.getListenerContainerIds().size()).     assertEquals("Wrong number of containers in the registry", 2, customRegistry.getListenerContainers().size()).     assertNotNull("Container with custom id on the annotation should be found", customRegistry.getListenerContainer("listenerId")).     assertNotNull("Container created with custom id should be found", customRegistry.getListenerContainer("myCustomEndpointId")). }
true;public;1;5;/**  * Test for {@link DefaultBean} that does not define the container  * factory to use as a default is registered with an explicit  * default.  */ ;/**  * Test for {@link DefaultBean} that does not define the container  * factory to use as a default is registered with an explicit  * default.  */ public void testExplicitContainerFactoryConfiguration(ApplicationContext context) {     JmsListenerContainerTestFactory defaultFactory = context.getBean("simpleFactory", JmsListenerContainerTestFactory.class).     assertEquals(1, defaultFactory.getListenerContainers().size()). }
true;public;1;5;/**  * Test for {@link DefaultBean} that does not define the container  * factory to use as a default is registered with the default name.  */ ;/**  * Test for {@link DefaultBean} that does not define the container  * factory to use as a default is registered with the default name.  */ public void testDefaultContainerFactoryConfiguration(ApplicationContext context) {     JmsListenerContainerTestFactory defaultFactory = context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class).     assertEquals(1, defaultFactory.getListenerContainers().size()). }
true;public;1;12;/**  * Test for {@link ValidationBean} with a validator ({@link TestValidator}) specified  * in a custom {@link org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory}.  *  * The test should throw a {@link org.springframework.jms.listener.adapter.ListenerExecutionFailedException}  */ ;/**  * Test for {@link ValidationBean} with a validator ({@link TestValidator}) specified  * in a custom {@link org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory}.  *  * The test should throw a {@link org.springframework.jms.listener.adapter.ListenerExecutionFailedException}  */ public void testJmsHandlerMethodFactoryConfiguration(ApplicationContext context) throws JMSException {     JmsListenerContainerTestFactory simpleFactory = context.getBean("defaultFactory", JmsListenerContainerTestFactory.class).     assertEquals(1, simpleFactory.getListenerContainers().size()).     MethodJmsListenerEndpoint endpoint = (MethodJmsListenerEndpoint) simpleFactory.getListenerContainers().get(0).getEndpoint().     SimpleMessageListenerContainer container = new SimpleMessageListenerContainer().     endpoint.setupListenerContainer(container).     MessagingMessageListenerAdapter listener = (MessagingMessageListenerAdapter) container.getMessageListener().     listener.onMessage(new StubTextMessage("failValidation"), mock(Session.class)). }
true;public;1;17;/**  * Test for {@link JmsListenerRepeatableBean} and {@link JmsListenersBean} that validates that the  * {@code @JmsListener} annotation is repeatable and generate one specific container per annotation.  */ ;/**  * Test for {@link JmsListenerRepeatableBean} and {@link JmsListenersBean} that validates that the  * {@code @JmsListener} annotation is repeatable and generate one specific container per annotation.  */ public void testJmsListenerRepeatable(ApplicationContext context) {     JmsListenerContainerTestFactory simpleFactory = context.getBean("jmsListenerContainerFactory", JmsListenerContainerTestFactory.class).     assertEquals(2, simpleFactory.getListenerContainers().size()).     MethodJmsListenerEndpoint first = (MethodJmsListenerEndpoint) simpleFactory.getListenerContainer("first").getEndpoint().     assertEquals("first", first.getId()).     assertEquals("myQueue", first.getDestination()).     assertEquals(null, first.getConcurrency()).     MethodJmsListenerEndpoint second = (MethodJmsListenerEndpoint) simpleFactory.getListenerContainer("second").getEndpoint().     assertEquals("second", second.getId()).     assertEquals("anotherQueue", second.getDestination()).     assertEquals("2-10", second.getConcurrency()). }
false;public;1;3;;@JmsListener(destination = "myQueue") public void defaultHandle(String msg) { }
false;public;1;3;;@JmsListener(containerFactory = "simpleFactory", destination = "myQueue") public void simpleHandle(String msg) { }
false;public;1;6;;@JmsListener(id = "listener1", containerFactory = "simpleFactory", destination = "queueIn", selector = "mySelector", subscription = "mySubscription", concurrency = "1-10") @SendTo("queueOut") public String fullHandle(String msg) {     return "reply". }
false;public;1;7;;@JmsListener(id = "${jms.listener.id}", containerFactory = "${jms.listener.containerFactory}", destination = "${jms.listener.destination}", selector = "${jms.listener.selector}", subscription = "${jms.listener.subscription}", concurrency = "${jms.listener.concurrency}") @SendTo("${jms.listener.sendTo}") public String fullHandle(String msg) {     return "reply". }
false;public;1;3;;@JmsListener(id = "listenerId", containerFactory = "customFactory", destination = "myQueue") public void customHandle(String msg) { }
false;public;1;3;;@JmsListener(destination = "myQueue") public void handleIt(String msg) { }
false;public;1;3;;@JmsListener(containerFactory = "defaultFactory", destination = "myQueue") public void defaultHandle(@Validated String msg) { }
false;public;1;4;;@JmsListener(id = "first", destination = "myQueue") @JmsListener(id = "second", destination = "anotherQueue", concurrency = "2-10") public void repeatableHandle(String msg) { }
false;public;1;6;;@JmsListeners({ @JmsListener(id = "first", destination = "myQueue"), @JmsListener(id = "second", destination = "anotherQueue", concurrency = "2-10") }) public void repeatableHandle(String msg) { }
false;public;1;4;;@Override public boolean supports(Class<?> clazz) {     return String.class.isAssignableFrom(clazz). }
false;public;2;7;;@Override public void validate(@Nullable Object target, Errors errors) {     String value = (String) target.     if ("failValidation".equals(value)) {         errors.reject("TEST: expected invalid value").     } }
