commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setAutoStartup(boolean autoStartup) {     this.autoStartup = autoStartup. }
false;public;0;3;;public JmsListenerEndpoint getEndpoint() {     return this.endpoint. }
false;public;0;3;;public boolean isStarted() {     return this.startInvoked && this.initializationInvoked. }
false;public;0;3;;public boolean isStopped() {     return this.stopInvoked && this.destroyInvoked. }
false;public;0;10;;@Override public void start() throws JmsException {     if (!this.initializationInvoked) {         throw new IllegalStateException("afterPropertiesSet should have been invoked before start on " + this).     }     if (this.startInvoked) {         throw new IllegalStateException("Start already invoked on " + this).     }     this.startInvoked = true. }
false;public;0;7;;@Override public void stop() throws JmsException {     if (this.stopInvoked) {         throw new IllegalStateException("Stop already invoked on " + this).     }     this.stopInvoked = true. }
false;public;0;4;;@Override public boolean isRunning() {     return this.startInvoked && !this.stopInvoked. }
false;public;0;4;;@Override public int getPhase() {     return 0. }
false;public;0;4;;@Override public boolean isAutoStartup() {     return this.autoStartup. }
false;public;1;5;;@Override public void stop(Runnable callback) {     this.stopInvoked = true.     callback.run(). }
false;public;1;3;;@Override public void setupMessageListener(Object messageListener) { }
false;public;0;4;;@Override public MessageConverter getMessageConverter() {     return null. }
false;public;0;4;;@Override public DestinationResolver getDestinationResolver() {     return null. }
false;public;0;4;;@Override public boolean isPubSubDomain() {     return true. }
false;public;0;4;;@Override public boolean isReplyPubSubDomain() {     return isPubSubDomain(). }
false;public;0;4;;@Override public QosSettings getReplyQosSettings() {     return null. }
false;public;0;4;;@Override public void afterPropertiesSet() {     this.initializationInvoked = true. }
false;public;0;7;;@Override public void destroy() {     if (!this.stopInvoked) {         throw new IllegalStateException("Stop should have been invoked before " + "destroy on " + this).     }     this.destroyInvoked = true. }
false;public;0;11;;@Override public String toString() {     final StringBuilder sb = new StringBuilder("TestContainer{").     sb.append("endpoint=").append(this.endpoint).     sb.append(", startInvoked=").append(this.startInvoked).     sb.append(", initializationInvoked=").append(this.initializationInvoked).     sb.append(", stopInvoked=").append(this.stopInvoked).     sb.append(", destroyInvoked=").append(this.destroyInvoked).     sb.append('}').     return sb.toString(). }
