# id;timestamp;commentText;codeText;commentWords;codeWords
JmsInvokerClientInterceptor -> public void setQueue(Queue queue);1328020251;Set the target Queue to send invoker requests to.;public void setQueue(Queue queue) {_		this.queue = queue__	};set,the,target,queue,to,send,invoker,requests,to;public,void,set,queue,queue,queue,this,queue,queue
JmsInvokerClientInterceptor -> public void setQueue(Queue queue);1356735495;Set the target Queue to send invoker requests to.;public void setQueue(Queue queue) {_		this.queue = queue__	};set,the,target,queue,to,send,invoker,requests,to;public,void,set,queue,queue,queue,this,queue,queue
JmsInvokerClientInterceptor -> public void setQueue(Queue queue);1357119239;Set the target Queue to send invoker requests to.;public void setQueue(Queue queue) {_		this.queue = queue__	};set,the,target,queue,to,send,invoker,requests,to;public,void,set,queue,queue,queue,this,queue,queue
JmsInvokerClientInterceptor -> public void setQueue(Queue queue);1368482696;Set the target Queue to send invoker requests to.;public void setQueue(Queue queue) {_		this.queue = queue__	};set,the,target,queue,to,send,invoker,requests,to;public,void,set,queue,queue,queue,this,queue,queue
JmsInvokerClientInterceptor -> public void setQueue(Queue queue);1405696891;Set the target Queue to send invoker requests to.;public void setQueue(Queue queue) {_		this.queue = queue__	};set,the,target,queue,to,send,invoker,requests,to;public,void,set,queue,queue,queue,this,queue,queue
JmsInvokerClientInterceptor -> public void setQueue(Queue queue);1424362428;Set the target Queue to send invoker requests to.;public void setQueue(Queue queue) {_		this.queue = queue__	};set,the,target,queue,to,send,invoker,requests,to;public,void,set,queue,queue,queue,this,queue,queue
JmsInvokerClientInterceptor -> public void setQueue(Queue queue);1424380551;Set the target Queue to send invoker requests to.;public void setQueue(Queue queue) {_		this.queue = queue__	};set,the,target,queue,to,send,invoker,requests,to;public,void,set,queue,queue,queue,this,queue,queue
JmsInvokerClientInterceptor -> public void setQueue(Queue queue);1424380732;Set the target Queue to send invoker requests to.;public void setQueue(Queue queue) {_		this.queue = queue__	};set,the,target,queue,to,send,invoker,requests,to;public,void,set,queue,queue,queue,this,queue,queue
JmsInvokerClientInterceptor -> public void setQueue(Queue queue);1496837955;Set the target Queue to send invoker requests to.;public void setQueue(Queue queue) {_		this.queue = queue__	};set,the,target,queue,to,send,invoker,requests,to;public,void,set,queue,queue,queue,this,queue,queue
JmsInvokerClientInterceptor -> public void setQueue(Queue queue);1498780456;Set the target Queue to send invoker requests to.;public void setQueue(Queue queue) {_		this.queue = queue__	};set,the,target,queue,to,send,invoker,requests,to;public,void,set,queue,queue,queue,this,queue,queue
JmsInvokerClientInterceptor -> public void setQueue(Queue queue);1500416137;Set the target Queue to send invoker requests to.;public void setQueue(Queue queue) {_		this.queue = queue__	};set,the,target,queue,to,send,invoker,requests,to;public,void,set,queue,queue,queue,this,queue,queue
JmsInvokerClientInterceptor -> public void setQueue(Queue queue);1500448076;Set the target Queue to send invoker requests to.;public void setQueue(Queue queue) {_		this.queue = queue__	};set,the,target,queue,to,send,invoker,requests,to;public,void,set,queue,queue,queue,this,queue,queue
JmsInvokerClientInterceptor -> public void setDestinationResolver(@Nullable DestinationResolver destinationResolver);1496837955;Set the DestinationResolver that is to be used to resolve Queue_references for this accessor._<p>The default resolver is a {@code DynamicDestinationResolver}. Specify a_{@code JndiDestinationResolver} for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(@Nullable DestinationResolver destinationResolver) {_		this.destinationResolver =_				(destinationResolver != null ? destinationResolver : new DynamicDestinationResolver())__	};set,the,destination,resolver,that,is,to,be,used,to,resolve,queue,references,for,this,accessor,p,the,default,resolver,is,a,code,dynamic,destination,resolver,specify,a,code,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,nullable,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver,null,destination,resolver,new,dynamic,destination,resolver
JmsInvokerClientInterceptor -> public void setDestinationResolver(@Nullable DestinationResolver destinationResolver);1498780456;Set the DestinationResolver that is to be used to resolve Queue_references for this accessor._<p>The default resolver is a {@code DynamicDestinationResolver}. Specify a_{@code JndiDestinationResolver} for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(@Nullable DestinationResolver destinationResolver) {_		this.destinationResolver =_				(destinationResolver != null ? destinationResolver : new DynamicDestinationResolver())__	};set,the,destination,resolver,that,is,to,be,used,to,resolve,queue,references,for,this,accessor,p,the,default,resolver,is,a,code,dynamic,destination,resolver,specify,a,code,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,nullable,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver,null,destination,resolver,new,dynamic,destination,resolver
JmsInvokerClientInterceptor -> public void setDestinationResolver(@Nullable DestinationResolver destinationResolver);1500416137;Set the DestinationResolver that is to be used to resolve Queue_references for this accessor._<p>The default resolver is a {@code DynamicDestinationResolver}. Specify a_{@code JndiDestinationResolver} for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(@Nullable DestinationResolver destinationResolver) {_		this.destinationResolver =_				(destinationResolver != null ? destinationResolver : new DynamicDestinationResolver())__	};set,the,destination,resolver,that,is,to,be,used,to,resolve,queue,references,for,this,accessor,p,the,default,resolver,is,a,code,dynamic,destination,resolver,specify,a,code,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,nullable,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver,null,destination,resolver,new,dynamic,destination,resolver
JmsInvokerClientInterceptor -> public void setDestinationResolver(@Nullable DestinationResolver destinationResolver);1500448076;Set the DestinationResolver that is to be used to resolve Queue_references for this accessor._<p>The default resolver is a {@code DynamicDestinationResolver}. Specify a_{@code JndiDestinationResolver} for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(@Nullable DestinationResolver destinationResolver) {_		this.destinationResolver =_				(destinationResolver != null ? destinationResolver : new DynamicDestinationResolver())__	};set,the,destination,resolver,that,is,to,be,used,to,resolve,queue,references,for,this,accessor,p,the,default,resolver,is,a,code,dynamic,destination,resolver,specify,a,code,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,nullable,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver,null,destination,resolver,new,dynamic,destination,resolver
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onReceiveTimeout(RemoteInvocation invocation);1424362428;Callback that is invoked by {@code executeRequest} when the receive_timeout has expired for the specified {@link RemoteInvocation}_<p>By default, an {@link RemoteTimeoutException} is thrown. Sub-classes_can choose to either throw a more dedicated exception or event return_a default {@link RemoteInvocationResult} as a fallback._@param invocation the invocation_@return a default result when the receive timeout has expired;protected RemoteInvocationResult onReceiveTimeout(RemoteInvocation invocation) {_		throw new RemoteTimeoutException("Receive timeout after " + this.receiveTimeout + " ms for " + invocation)__	};callback,that,is,invoked,by,code,execute,request,when,the,receive,timeout,has,expired,for,the,specified,link,remote,invocation,p,by,default,an,link,remote,timeout,exception,is,thrown,sub,classes,can,choose,to,either,throw,a,more,dedicated,exception,or,event,return,a,default,link,remote,invocation,result,as,a,fallback,param,invocation,the,invocation,return,a,default,result,when,the,receive,timeout,has,expired;protected,remote,invocation,result,on,receive,timeout,remote,invocation,invocation,throw,new,remote,timeout,exception,receive,timeout,after,this,receive,timeout,ms,for,invocation
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onReceiveTimeout(RemoteInvocation invocation);1424380551;Callback that is invoked by {@link #executeRequest} when the receive_timeout has expired for the specified {@link RemoteInvocation}._<p>By default, an {@link RemoteTimeoutException} is thrown. Sub-classes_can choose to either throw a more dedicated exception or even return_a default {@link RemoteInvocationResult} as a fallback._@param invocation the invocation_@return a default result when the receive timeout has expired;protected RemoteInvocationResult onReceiveTimeout(RemoteInvocation invocation) {_		throw new RemoteTimeoutException("Receive timeout after " + this.receiveTimeout + " ms for " + invocation)__	};callback,that,is,invoked,by,link,execute,request,when,the,receive,timeout,has,expired,for,the,specified,link,remote,invocation,p,by,default,an,link,remote,timeout,exception,is,thrown,sub,classes,can,choose,to,either,throw,a,more,dedicated,exception,or,even,return,a,default,link,remote,invocation,result,as,a,fallback,param,invocation,the,invocation,return,a,default,result,when,the,receive,timeout,has,expired;protected,remote,invocation,result,on,receive,timeout,remote,invocation,invocation,throw,new,remote,timeout,exception,receive,timeout,after,this,receive,timeout,ms,for,invocation
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onReceiveTimeout(RemoteInvocation invocation);1424380732;Callback that is invoked by {@link #executeRequest} when the receive_timeout has expired for the specified {@link RemoteInvocation}._<p>By default, an {@link RemoteTimeoutException} is thrown. Sub-classes_can choose to either throw a more dedicated exception or even return_a default {@link RemoteInvocationResult} as a fallback._@param invocation the invocation_@return a default result when the receive timeout has expired;protected RemoteInvocationResult onReceiveTimeout(RemoteInvocation invocation) {_		throw new RemoteTimeoutException("Receive timeout after " + this.receiveTimeout + " ms for " + invocation)__	};callback,that,is,invoked,by,link,execute,request,when,the,receive,timeout,has,expired,for,the,specified,link,remote,invocation,p,by,default,an,link,remote,timeout,exception,is,thrown,sub,classes,can,choose,to,either,throw,a,more,dedicated,exception,or,even,return,a,default,link,remote,invocation,result,as,a,fallback,param,invocation,the,invocation,return,a,default,result,when,the,receive,timeout,has,expired;protected,remote,invocation,result,on,receive,timeout,remote,invocation,invocation,throw,new,remote,timeout,exception,receive,timeout,after,this,receive,timeout,ms,for,invocation
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onReceiveTimeout(RemoteInvocation invocation);1496837955;Callback that is invoked by {@link #executeRequest} when the receive_timeout has expired for the specified {@link RemoteInvocation}._<p>By default, an {@link RemoteTimeoutException} is thrown. Sub-classes_can choose to either throw a more dedicated exception or even return_a default {@link RemoteInvocationResult} as a fallback._@param invocation the invocation_@return a default result when the receive timeout has expired;protected RemoteInvocationResult onReceiveTimeout(RemoteInvocation invocation) {_		throw new RemoteTimeoutException("Receive timeout after " + this.receiveTimeout + " ms for " + invocation)__	};callback,that,is,invoked,by,link,execute,request,when,the,receive,timeout,has,expired,for,the,specified,link,remote,invocation,p,by,default,an,link,remote,timeout,exception,is,thrown,sub,classes,can,choose,to,either,throw,a,more,dedicated,exception,or,even,return,a,default,link,remote,invocation,result,as,a,fallback,param,invocation,the,invocation,return,a,default,result,when,the,receive,timeout,has,expired;protected,remote,invocation,result,on,receive,timeout,remote,invocation,invocation,throw,new,remote,timeout,exception,receive,timeout,after,this,receive,timeout,ms,for,invocation
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onReceiveTimeout(RemoteInvocation invocation);1498780456;Callback that is invoked by {@link #executeRequest} when the receive_timeout has expired for the specified {@link RemoteInvocation}._<p>By default, an {@link RemoteTimeoutException} is thrown. Sub-classes_can choose to either throw a more dedicated exception or even return_a default {@link RemoteInvocationResult} as a fallback._@param invocation the invocation_@return a default result when the receive timeout has expired;protected RemoteInvocationResult onReceiveTimeout(RemoteInvocation invocation) {_		throw new RemoteTimeoutException("Receive timeout after " + this.receiveTimeout + " ms for " + invocation)__	};callback,that,is,invoked,by,link,execute,request,when,the,receive,timeout,has,expired,for,the,specified,link,remote,invocation,p,by,default,an,link,remote,timeout,exception,is,thrown,sub,classes,can,choose,to,either,throw,a,more,dedicated,exception,or,even,return,a,default,link,remote,invocation,result,as,a,fallback,param,invocation,the,invocation,return,a,default,result,when,the,receive,timeout,has,expired;protected,remote,invocation,result,on,receive,timeout,remote,invocation,invocation,throw,new,remote,timeout,exception,receive,timeout,after,this,receive,timeout,ms,for,invocation
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onReceiveTimeout(RemoteInvocation invocation);1500416137;Callback that is invoked by {@link #executeRequest} when the receive_timeout has expired for the specified {@link RemoteInvocation}._<p>By default, an {@link RemoteTimeoutException} is thrown. Sub-classes_can choose to either throw a more dedicated exception or even return_a default {@link RemoteInvocationResult} as a fallback._@param invocation the invocation_@return a default result when the receive timeout has expired;protected RemoteInvocationResult onReceiveTimeout(RemoteInvocation invocation) {_		throw new RemoteTimeoutException("Receive timeout after " + this.receiveTimeout + " ms for " + invocation)__	};callback,that,is,invoked,by,link,execute,request,when,the,receive,timeout,has,expired,for,the,specified,link,remote,invocation,p,by,default,an,link,remote,timeout,exception,is,thrown,sub,classes,can,choose,to,either,throw,a,more,dedicated,exception,or,even,return,a,default,link,remote,invocation,result,as,a,fallback,param,invocation,the,invocation,return,a,default,result,when,the,receive,timeout,has,expired;protected,remote,invocation,result,on,receive,timeout,remote,invocation,invocation,throw,new,remote,timeout,exception,receive,timeout,after,this,receive,timeout,ms,for,invocation
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onReceiveTimeout(RemoteInvocation invocation);1500448076;Callback that is invoked by {@link #executeRequest} when the receive_timeout has expired for the specified {@link RemoteInvocation}._<p>By default, an {@link RemoteTimeoutException} is thrown. Sub-classes_can choose to either throw a more dedicated exception or even return_a default {@link RemoteInvocationResult} as a fallback._@param invocation the invocation_@return a default result when the receive timeout has expired;protected RemoteInvocationResult onReceiveTimeout(RemoteInvocation invocation) {_		throw new RemoteTimeoutException("Receive timeout after " + this.receiveTimeout + " ms for " + invocation)__	};callback,that,is,invoked,by,link,execute,request,when,the,receive,timeout,has,expired,for,the,specified,link,remote,invocation,p,by,default,an,link,remote,timeout,exception,is,thrown,sub,classes,can,choose,to,either,throw,a,more,dedicated,exception,or,even,return,a,default,link,remote,invocation,result,as,a,fallback,param,invocation,the,invocation,return,a,default,result,when,the,receive,timeout,has,expired;protected,remote,invocation,result,on,receive,timeout,remote,invocation,invocation,throw,new,remote,timeout,exception,receive,timeout,after,this,receive,timeout,ms,for,invocation
JmsInvokerClientInterceptor -> protected Session createSession(Connection con) throws JMSException;1328020251;Create a new JMS Session for this JMS invoker.;protected Session createSession(Connection con) throws JMSException {_		if (jms11Available) {_			return con.createSession(false, Session.AUTO_ACKNOWLEDGE)__		}_		else {_			return ((QueueConnection) con).createQueueSession(false, Session.AUTO_ACKNOWLEDGE)__		}_	};create,a,new,jms,session,for,this,jms,invoker;protected,session,create,session,connection,con,throws,jmsexception,if,jms11available,return,con,create,session,false,session,else,return,queue,connection,con,create,queue,session,false,session
JmsInvokerClientInterceptor -> protected Session createSession(Connection con) throws JMSException;1356735495;Create a new JMS Session for this JMS invoker.;protected Session createSession(Connection con) throws JMSException {_		if (jms11Available) {_			return con.createSession(false, Session.AUTO_ACKNOWLEDGE)__		}_		else {_			return ((QueueConnection) con).createQueueSession(false, Session.AUTO_ACKNOWLEDGE)__		}_	};create,a,new,jms,session,for,this,jms,invoker;protected,session,create,session,connection,con,throws,jmsexception,if,jms11available,return,con,create,session,false,session,else,return,queue,connection,con,create,queue,session,false,session
JmsInvokerClientInterceptor -> protected Session createSession(Connection con) throws JMSException;1357119239;Create a new JMS Session for this JMS invoker.;protected Session createSession(Connection con) throws JMSException {_		if (jms11Available) {_			return con.createSession(false, Session.AUTO_ACKNOWLEDGE)__		}_		else {_			return ((QueueConnection) con).createQueueSession(false, Session.AUTO_ACKNOWLEDGE)__		}_	};create,a,new,jms,session,for,this,jms,invoker;protected,session,create,session,connection,con,throws,jmsexception,if,jms11available,return,con,create,session,false,session,else,return,queue,connection,con,create,queue,session,false,session
JmsInvokerClientInterceptor -> protected Session createSession(Connection con) throws JMSException;1368482696;Create a new JMS Session for this JMS invoker.;protected Session createSession(Connection con) throws JMSException {_		if (jms11Available) {_			return con.createSession(false, Session.AUTO_ACKNOWLEDGE)__		}_		else {_			return ((QueueConnection) con).createQueueSession(false, Session.AUTO_ACKNOWLEDGE)__		}_	};create,a,new,jms,session,for,this,jms,invoker;protected,session,create,session,connection,con,throws,jmsexception,if,jms11available,return,con,create,session,false,session,else,return,queue,connection,con,create,queue,session,false,session
JmsInvokerClientInterceptor -> protected Session createSession(Connection con) throws JMSException;1405696891;Create a new JMS Session for this JMS invoker.;protected Session createSession(Connection con) throws JMSException {_		return con.createSession(false, Session.AUTO_ACKNOWLEDGE)__	};create,a,new,jms,session,for,this,jms,invoker;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,false,session
JmsInvokerClientInterceptor -> protected Session createSession(Connection con) throws JMSException;1424362428;Create a new JMS Session for this JMS invoker.;protected Session createSession(Connection con) throws JMSException {_		return con.createSession(false, Session.AUTO_ACKNOWLEDGE)__	};create,a,new,jms,session,for,this,jms,invoker;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,false,session
JmsInvokerClientInterceptor -> protected Session createSession(Connection con) throws JMSException;1424380551;Create a new JMS Session for this JMS invoker.;protected Session createSession(Connection con) throws JMSException {_		return con.createSession(false, Session.AUTO_ACKNOWLEDGE)__	};create,a,new,jms,session,for,this,jms,invoker;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,false,session
JmsInvokerClientInterceptor -> protected Session createSession(Connection con) throws JMSException;1424380732;Create a new JMS Session for this JMS invoker.;protected Session createSession(Connection con) throws JMSException {_		return con.createSession(false, Session.AUTO_ACKNOWLEDGE)__	};create,a,new,jms,session,for,this,jms,invoker;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,false,session
JmsInvokerClientInterceptor -> protected Session createSession(Connection con) throws JMSException;1496837955;Create a new JMS Session for this JMS invoker.;protected Session createSession(Connection con) throws JMSException {_		return con.createSession(false, Session.AUTO_ACKNOWLEDGE)__	};create,a,new,jms,session,for,this,jms,invoker;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,false,session
JmsInvokerClientInterceptor -> protected Session createSession(Connection con) throws JMSException;1498780456;Create a new JMS Session for this JMS invoker.;protected Session createSession(Connection con) throws JMSException {_		return con.createSession(false, Session.AUTO_ACKNOWLEDGE)__	};create,a,new,jms,session,for,this,jms,invoker;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,false,session
JmsInvokerClientInterceptor -> protected Session createSession(Connection con) throws JMSException;1500416137;Create a new JMS Session for this JMS invoker.;protected Session createSession(Connection con) throws JMSException {_		return con.createSession(false, Session.AUTO_ACKNOWLEDGE)__	};create,a,new,jms,session,for,this,jms,invoker;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,false,session
JmsInvokerClientInterceptor -> protected Session createSession(Connection con) throws JMSException;1500448076;Create a new JMS Session for this JMS invoker.;protected Session createSession(Connection con) throws JMSException {_		return con.createSession(false, Session.AUTO_ACKNOWLEDGE)__	};create,a,new,jms,session,for,this,jms,invoker;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,false,session
JmsInvokerClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1328020251;Create a new RemoteInvocation object for the given AOP method invocation._The default implementation delegates to the RemoteInvocationFactory._<p>Can be overridden in subclasses to provide custom RemoteInvocation_subclasses, containing additional invocation parameters like user credentials._Note that it is preferable to use a custom RemoteInvocationFactory which_is a reusable strategy._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return this.remoteInvocationFactory.createRemoteInvocation(methodInvocation)__	};create,a,new,remote,invocation,object,for,the,given,aop,method,invocation,the,default,implementation,delegates,to,the,remote,invocation,factory,p,can,be,overridden,in,subclasses,to,provide,custom,remote,invocation,subclasses,containing,additional,invocation,parameters,like,user,credentials,note,that,it,is,preferable,to,use,a,custom,remote,invocation,factory,which,is,a,reusable,strategy,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,this,remote,invocation,factory,create,remote,invocation,method,invocation
JmsInvokerClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1356735495;Create a new RemoteInvocation object for the given AOP method invocation._The default implementation delegates to the RemoteInvocationFactory._<p>Can be overridden in subclasses to provide custom RemoteInvocation_subclasses, containing additional invocation parameters like user credentials._Note that it is preferable to use a custom RemoteInvocationFactory which_is a reusable strategy._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return this.remoteInvocationFactory.createRemoteInvocation(methodInvocation)__	};create,a,new,remote,invocation,object,for,the,given,aop,method,invocation,the,default,implementation,delegates,to,the,remote,invocation,factory,p,can,be,overridden,in,subclasses,to,provide,custom,remote,invocation,subclasses,containing,additional,invocation,parameters,like,user,credentials,note,that,it,is,preferable,to,use,a,custom,remote,invocation,factory,which,is,a,reusable,strategy,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,this,remote,invocation,factory,create,remote,invocation,method,invocation
JmsInvokerClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1357119239;Create a new RemoteInvocation object for the given AOP method invocation._The default implementation delegates to the RemoteInvocationFactory._<p>Can be overridden in subclasses to provide custom RemoteInvocation_subclasses, containing additional invocation parameters like user credentials._Note that it is preferable to use a custom RemoteInvocationFactory which_is a reusable strategy._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return this.remoteInvocationFactory.createRemoteInvocation(methodInvocation)__	};create,a,new,remote,invocation,object,for,the,given,aop,method,invocation,the,default,implementation,delegates,to,the,remote,invocation,factory,p,can,be,overridden,in,subclasses,to,provide,custom,remote,invocation,subclasses,containing,additional,invocation,parameters,like,user,credentials,note,that,it,is,preferable,to,use,a,custom,remote,invocation,factory,which,is,a,reusable,strategy,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,this,remote,invocation,factory,create,remote,invocation,method,invocation
JmsInvokerClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1368482696;Create a new RemoteInvocation object for the given AOP method invocation._The default implementation delegates to the RemoteInvocationFactory._<p>Can be overridden in subclasses to provide custom RemoteInvocation_subclasses, containing additional invocation parameters like user credentials._Note that it is preferable to use a custom RemoteInvocationFactory which_is a reusable strategy._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return this.remoteInvocationFactory.createRemoteInvocation(methodInvocation)__	};create,a,new,remote,invocation,object,for,the,given,aop,method,invocation,the,default,implementation,delegates,to,the,remote,invocation,factory,p,can,be,overridden,in,subclasses,to,provide,custom,remote,invocation,subclasses,containing,additional,invocation,parameters,like,user,credentials,note,that,it,is,preferable,to,use,a,custom,remote,invocation,factory,which,is,a,reusable,strategy,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,this,remote,invocation,factory,create,remote,invocation,method,invocation
JmsInvokerClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1405696891;Create a new RemoteInvocation object for the given AOP method invocation._The default implementation delegates to the RemoteInvocationFactory._<p>Can be overridden in subclasses to provide custom RemoteInvocation_subclasses, containing additional invocation parameters like user credentials._Note that it is preferable to use a custom RemoteInvocationFactory which_is a reusable strategy._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return this.remoteInvocationFactory.createRemoteInvocation(methodInvocation)__	};create,a,new,remote,invocation,object,for,the,given,aop,method,invocation,the,default,implementation,delegates,to,the,remote,invocation,factory,p,can,be,overridden,in,subclasses,to,provide,custom,remote,invocation,subclasses,containing,additional,invocation,parameters,like,user,credentials,note,that,it,is,preferable,to,use,a,custom,remote,invocation,factory,which,is,a,reusable,strategy,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,this,remote,invocation,factory,create,remote,invocation,method,invocation
JmsInvokerClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1424362428;Create a new RemoteInvocation object for the given AOP method invocation._The default implementation delegates to the RemoteInvocationFactory._<p>Can be overridden in subclasses to provide custom RemoteInvocation_subclasses, containing additional invocation parameters like user credentials._Note that it is preferable to use a custom RemoteInvocationFactory which_is a reusable strategy._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return this.remoteInvocationFactory.createRemoteInvocation(methodInvocation)__	};create,a,new,remote,invocation,object,for,the,given,aop,method,invocation,the,default,implementation,delegates,to,the,remote,invocation,factory,p,can,be,overridden,in,subclasses,to,provide,custom,remote,invocation,subclasses,containing,additional,invocation,parameters,like,user,credentials,note,that,it,is,preferable,to,use,a,custom,remote,invocation,factory,which,is,a,reusable,strategy,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,this,remote,invocation,factory,create,remote,invocation,method,invocation
JmsInvokerClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1424380551;Create a new {@code RemoteInvocation} object for the given AOP method invocation._<p>The default implementation delegates to the {@link RemoteInvocationFactory}._<p>Can be overridden in subclasses to provide custom {@code RemoteInvocation}_subclasses, containing additional invocation parameters like user credentials._Note that it is preferable to use a custom {@code RemoteInvocationFactory} which_is a reusable strategy._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return this.remoteInvocationFactory.createRemoteInvocation(methodInvocation)__	};create,a,new,code,remote,invocation,object,for,the,given,aop,method,invocation,p,the,default,implementation,delegates,to,the,link,remote,invocation,factory,p,can,be,overridden,in,subclasses,to,provide,custom,code,remote,invocation,subclasses,containing,additional,invocation,parameters,like,user,credentials,note,that,it,is,preferable,to,use,a,custom,code,remote,invocation,factory,which,is,a,reusable,strategy,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,this,remote,invocation,factory,create,remote,invocation,method,invocation
JmsInvokerClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1424380732;Create a new {@code RemoteInvocation} object for the given AOP method invocation._<p>The default implementation delegates to the {@link RemoteInvocationFactory}._<p>Can be overridden in subclasses to provide custom {@code RemoteInvocation}_subclasses, containing additional invocation parameters like user credentials._Note that it is preferable to use a custom {@code RemoteInvocationFactory} which_is a reusable strategy._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return this.remoteInvocationFactory.createRemoteInvocation(methodInvocation)__	};create,a,new,code,remote,invocation,object,for,the,given,aop,method,invocation,p,the,default,implementation,delegates,to,the,link,remote,invocation,factory,p,can,be,overridden,in,subclasses,to,provide,custom,code,remote,invocation,subclasses,containing,additional,invocation,parameters,like,user,credentials,note,that,it,is,preferable,to,use,a,custom,code,remote,invocation,factory,which,is,a,reusable,strategy,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,this,remote,invocation,factory,create,remote,invocation,method,invocation
JmsInvokerClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1496837955;Create a new {@code RemoteInvocation} object for the given AOP method invocation._<p>The default implementation delegates to the {@link RemoteInvocationFactory}._<p>Can be overridden in subclasses to provide custom {@code RemoteInvocation}_subclasses, containing additional invocation parameters like user credentials._Note that it is preferable to use a custom {@code RemoteInvocationFactory} which_is a reusable strategy._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return this.remoteInvocationFactory.createRemoteInvocation(methodInvocation)__	};create,a,new,code,remote,invocation,object,for,the,given,aop,method,invocation,p,the,default,implementation,delegates,to,the,link,remote,invocation,factory,p,can,be,overridden,in,subclasses,to,provide,custom,code,remote,invocation,subclasses,containing,additional,invocation,parameters,like,user,credentials,note,that,it,is,preferable,to,use,a,custom,code,remote,invocation,factory,which,is,a,reusable,strategy,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,this,remote,invocation,factory,create,remote,invocation,method,invocation
JmsInvokerClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1498780456;Create a new {@code RemoteInvocation} object for the given AOP method invocation._<p>The default implementation delegates to the {@link RemoteInvocationFactory}._<p>Can be overridden in subclasses to provide custom {@code RemoteInvocation}_subclasses, containing additional invocation parameters like user credentials._Note that it is preferable to use a custom {@code RemoteInvocationFactory} which_is a reusable strategy._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return this.remoteInvocationFactory.createRemoteInvocation(methodInvocation)__	};create,a,new,code,remote,invocation,object,for,the,given,aop,method,invocation,p,the,default,implementation,delegates,to,the,link,remote,invocation,factory,p,can,be,overridden,in,subclasses,to,provide,custom,code,remote,invocation,subclasses,containing,additional,invocation,parameters,like,user,credentials,note,that,it,is,preferable,to,use,a,custom,code,remote,invocation,factory,which,is,a,reusable,strategy,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,this,remote,invocation,factory,create,remote,invocation,method,invocation
JmsInvokerClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1500416137;Create a new {@code RemoteInvocation} object for the given AOP method invocation._<p>The default implementation delegates to the {@link RemoteInvocationFactory}._<p>Can be overridden in subclasses to provide custom {@code RemoteInvocation}_subclasses, containing additional invocation parameters like user credentials._Note that it is preferable to use a custom {@code RemoteInvocationFactory} which_is a reusable strategy._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return this.remoteInvocationFactory.createRemoteInvocation(methodInvocation)__	};create,a,new,code,remote,invocation,object,for,the,given,aop,method,invocation,p,the,default,implementation,delegates,to,the,link,remote,invocation,factory,p,can,be,overridden,in,subclasses,to,provide,custom,code,remote,invocation,subclasses,containing,additional,invocation,parameters,like,user,credentials,note,that,it,is,preferable,to,use,a,custom,code,remote,invocation,factory,which,is,a,reusable,strategy,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,this,remote,invocation,factory,create,remote,invocation,method,invocation
JmsInvokerClientInterceptor -> protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation);1500448076;Create a new {@code RemoteInvocation} object for the given AOP method invocation._<p>The default implementation delegates to the {@link RemoteInvocationFactory}._<p>Can be overridden in subclasses to provide custom {@code RemoteInvocation}_subclasses, containing additional invocation parameters like user credentials._Note that it is preferable to use a custom {@code RemoteInvocationFactory} which_is a reusable strategy._@param methodInvocation the current AOP method invocation_@return the RemoteInvocation object_@see RemoteInvocationFactory#createRemoteInvocation;protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {_		return this.remoteInvocationFactory.createRemoteInvocation(methodInvocation)__	};create,a,new,code,remote,invocation,object,for,the,given,aop,method,invocation,p,the,default,implementation,delegates,to,the,link,remote,invocation,factory,p,can,be,overridden,in,subclasses,to,provide,custom,code,remote,invocation,subclasses,containing,additional,invocation,parameters,like,user,credentials,note,that,it,is,preferable,to,use,a,custom,code,remote,invocation,factory,which,is,a,reusable,strategy,param,method,invocation,the,current,aop,method,invocation,return,the,remote,invocation,object,see,remote,invocation,factory,create,remote,invocation;protected,remote,invocation,create,remote,invocation,method,invocation,method,invocation,return,this,remote,invocation,factory,create,remote,invocation,method,invocation
JmsInvokerClientInterceptor -> protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable;1328020251;Recreate the invocation result contained in the given RemoteInvocationResult_object. The default implementation calls the default recreate method._<p>Can be overridden in subclass to provide custom recreation, potentially_processing the returned result object._@param result the RemoteInvocationResult to recreate_@return a return value if the invocation result is a successful return_@throws Throwable if the invocation result is an exception_@see org.springframework.remoting.support.RemoteInvocationResult#recreate();protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable {_		return result.recreate()__	};recreate,the,invocation,result,contained,in,the,given,remote,invocation,result,object,the,default,implementation,calls,the,default,recreate,method,p,can,be,overridden,in,subclass,to,provide,custom,recreation,potentially,processing,the,returned,result,object,param,result,the,remote,invocation,result,to,recreate,return,a,return,value,if,the,invocation,result,is,a,successful,return,throws,throwable,if,the,invocation,result,is,an,exception,see,org,springframework,remoting,support,remote,invocation,result,recreate;protected,object,recreate,remote,invocation,result,remote,invocation,result,result,throws,throwable,return,result,recreate
JmsInvokerClientInterceptor -> protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable;1356735495;Recreate the invocation result contained in the given RemoteInvocationResult_object. The default implementation calls the default recreate method._<p>Can be overridden in subclass to provide custom recreation, potentially_processing the returned result object._@param result the RemoteInvocationResult to recreate_@return a return value if the invocation result is a successful return_@throws Throwable if the invocation result is an exception_@see org.springframework.remoting.support.RemoteInvocationResult#recreate();protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable {_		return result.recreate()__	};recreate,the,invocation,result,contained,in,the,given,remote,invocation,result,object,the,default,implementation,calls,the,default,recreate,method,p,can,be,overridden,in,subclass,to,provide,custom,recreation,potentially,processing,the,returned,result,object,param,result,the,remote,invocation,result,to,recreate,return,a,return,value,if,the,invocation,result,is,a,successful,return,throws,throwable,if,the,invocation,result,is,an,exception,see,org,springframework,remoting,support,remote,invocation,result,recreate;protected,object,recreate,remote,invocation,result,remote,invocation,result,result,throws,throwable,return,result,recreate
JmsInvokerClientInterceptor -> protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable;1357119239;Recreate the invocation result contained in the given RemoteInvocationResult_object. The default implementation calls the default recreate method._<p>Can be overridden in subclass to provide custom recreation, potentially_processing the returned result object._@param result the RemoteInvocationResult to recreate_@return a return value if the invocation result is a successful return_@throws Throwable if the invocation result is an exception_@see org.springframework.remoting.support.RemoteInvocationResult#recreate();protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable {_		return result.recreate()__	};recreate,the,invocation,result,contained,in,the,given,remote,invocation,result,object,the,default,implementation,calls,the,default,recreate,method,p,can,be,overridden,in,subclass,to,provide,custom,recreation,potentially,processing,the,returned,result,object,param,result,the,remote,invocation,result,to,recreate,return,a,return,value,if,the,invocation,result,is,a,successful,return,throws,throwable,if,the,invocation,result,is,an,exception,see,org,springframework,remoting,support,remote,invocation,result,recreate;protected,object,recreate,remote,invocation,result,remote,invocation,result,result,throws,throwable,return,result,recreate
JmsInvokerClientInterceptor -> protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable;1368482696;Recreate the invocation result contained in the given RemoteInvocationResult_object. The default implementation calls the default recreate method._<p>Can be overridden in subclass to provide custom recreation, potentially_processing the returned result object._@param result the RemoteInvocationResult to recreate_@return a return value if the invocation result is a successful return_@throws Throwable if the invocation result is an exception_@see org.springframework.remoting.support.RemoteInvocationResult#recreate();protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable {_		return result.recreate()__	};recreate,the,invocation,result,contained,in,the,given,remote,invocation,result,object,the,default,implementation,calls,the,default,recreate,method,p,can,be,overridden,in,subclass,to,provide,custom,recreation,potentially,processing,the,returned,result,object,param,result,the,remote,invocation,result,to,recreate,return,a,return,value,if,the,invocation,result,is,a,successful,return,throws,throwable,if,the,invocation,result,is,an,exception,see,org,springframework,remoting,support,remote,invocation,result,recreate;protected,object,recreate,remote,invocation,result,remote,invocation,result,result,throws,throwable,return,result,recreate
JmsInvokerClientInterceptor -> protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable;1405696891;Recreate the invocation result contained in the given RemoteInvocationResult_object. The default implementation calls the default recreate method._<p>Can be overridden in subclass to provide custom recreation, potentially_processing the returned result object._@param result the RemoteInvocationResult to recreate_@return a return value if the invocation result is a successful return_@throws Throwable if the invocation result is an exception_@see org.springframework.remoting.support.RemoteInvocationResult#recreate();protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable {_		return result.recreate()__	};recreate,the,invocation,result,contained,in,the,given,remote,invocation,result,object,the,default,implementation,calls,the,default,recreate,method,p,can,be,overridden,in,subclass,to,provide,custom,recreation,potentially,processing,the,returned,result,object,param,result,the,remote,invocation,result,to,recreate,return,a,return,value,if,the,invocation,result,is,a,successful,return,throws,throwable,if,the,invocation,result,is,an,exception,see,org,springframework,remoting,support,remote,invocation,result,recreate;protected,object,recreate,remote,invocation,result,remote,invocation,result,result,throws,throwable,return,result,recreate
JmsInvokerClientInterceptor -> protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable;1424362428;Recreate the invocation result contained in the given RemoteInvocationResult_object. The default implementation calls the default recreate method._<p>Can be overridden in subclass to provide custom recreation, potentially_processing the returned result object._@param result the RemoteInvocationResult to recreate_@return a return value if the invocation result is a successful return_@throws Throwable if the invocation result is an exception_@see org.springframework.remoting.support.RemoteInvocationResult#recreate();protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable {_		return result.recreate()__	};recreate,the,invocation,result,contained,in,the,given,remote,invocation,result,object,the,default,implementation,calls,the,default,recreate,method,p,can,be,overridden,in,subclass,to,provide,custom,recreation,potentially,processing,the,returned,result,object,param,result,the,remote,invocation,result,to,recreate,return,a,return,value,if,the,invocation,result,is,a,successful,return,throws,throwable,if,the,invocation,result,is,an,exception,see,org,springframework,remoting,support,remote,invocation,result,recreate;protected,object,recreate,remote,invocation,result,remote,invocation,result,result,throws,throwable,return,result,recreate
JmsInvokerClientInterceptor -> protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable;1424380551;Recreate the invocation result contained in the given {@link RemoteInvocationResult}_object._<p>The default implementation calls the default {@code recreate()} method._<p>Can be overridden in subclasses to provide custom recreation, potentially_processing the returned result object._@param result the RemoteInvocationResult to recreate_@return a return value if the invocation result is a successful return_@throws Throwable if the invocation result is an exception_@see org.springframework.remoting.support.RemoteInvocationResult#recreate();protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable {_		return result.recreate()__	};recreate,the,invocation,result,contained,in,the,given,link,remote,invocation,result,object,p,the,default,implementation,calls,the,default,code,recreate,method,p,can,be,overridden,in,subclasses,to,provide,custom,recreation,potentially,processing,the,returned,result,object,param,result,the,remote,invocation,result,to,recreate,return,a,return,value,if,the,invocation,result,is,a,successful,return,throws,throwable,if,the,invocation,result,is,an,exception,see,org,springframework,remoting,support,remote,invocation,result,recreate;protected,object,recreate,remote,invocation,result,remote,invocation,result,result,throws,throwable,return,result,recreate
JmsInvokerClientInterceptor -> protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable;1424380732;Recreate the invocation result contained in the given {@link RemoteInvocationResult}_object._<p>The default implementation calls the default {@code recreate()} method._<p>Can be overridden in subclasses to provide custom recreation, potentially_processing the returned result object._@param result the RemoteInvocationResult to recreate_@return a return value if the invocation result is a successful return_@throws Throwable if the invocation result is an exception_@see org.springframework.remoting.support.RemoteInvocationResult#recreate();protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable {_		return result.recreate()__	};recreate,the,invocation,result,contained,in,the,given,link,remote,invocation,result,object,p,the,default,implementation,calls,the,default,code,recreate,method,p,can,be,overridden,in,subclasses,to,provide,custom,recreation,potentially,processing,the,returned,result,object,param,result,the,remote,invocation,result,to,recreate,return,a,return,value,if,the,invocation,result,is,a,successful,return,throws,throwable,if,the,invocation,result,is,an,exception,see,org,springframework,remoting,support,remote,invocation,result,recreate;protected,object,recreate,remote,invocation,result,remote,invocation,result,result,throws,throwable,return,result,recreate
JmsInvokerClientInterceptor -> protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex);1328020251;Convert the given JMS invoker access exception to an appropriate_Spring RemoteAccessException._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex) {_		throw new RemoteAccessException("Could not access JMS invoker queue [" + this.queue + "]", ex)__	};convert,the,given,jms,invoker,access,exception,to,an,appropriate,spring,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,jms,invoker,access,exception,jmsexception,ex,throw,new,remote,access,exception,could,not,access,jms,invoker,queue,this,queue,ex
JmsInvokerClientInterceptor -> protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex);1356735495;Convert the given JMS invoker access exception to an appropriate_Spring RemoteAccessException._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex) {_		throw new RemoteAccessException("Could not access JMS invoker queue [" + this.queue + "]", ex)__	};convert,the,given,jms,invoker,access,exception,to,an,appropriate,spring,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,jms,invoker,access,exception,jmsexception,ex,throw,new,remote,access,exception,could,not,access,jms,invoker,queue,this,queue,ex
JmsInvokerClientInterceptor -> protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex);1357119239;Convert the given JMS invoker access exception to an appropriate_Spring RemoteAccessException._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex) {_		throw new RemoteAccessException("Could not access JMS invoker queue [" + this.queue + "]", ex)__	};convert,the,given,jms,invoker,access,exception,to,an,appropriate,spring,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,jms,invoker,access,exception,jmsexception,ex,throw,new,remote,access,exception,could,not,access,jms,invoker,queue,this,queue,ex
JmsInvokerClientInterceptor -> protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex);1368482696;Convert the given JMS invoker access exception to an appropriate_Spring RemoteAccessException._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex) {_		throw new RemoteAccessException("Could not access JMS invoker queue [" + this.queue + "]", ex)__	};convert,the,given,jms,invoker,access,exception,to,an,appropriate,spring,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,jms,invoker,access,exception,jmsexception,ex,throw,new,remote,access,exception,could,not,access,jms,invoker,queue,this,queue,ex
JmsInvokerClientInterceptor -> protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex);1405696891;Convert the given JMS invoker access exception to an appropriate_Spring RemoteAccessException._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex) {_		throw new RemoteAccessException("Could not access JMS invoker queue [" + this.queue + "]", ex)__	};convert,the,given,jms,invoker,access,exception,to,an,appropriate,spring,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,jms,invoker,access,exception,jmsexception,ex,throw,new,remote,access,exception,could,not,access,jms,invoker,queue,this,queue,ex
JmsInvokerClientInterceptor -> protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex);1424362428;Convert the given JMS invoker access exception to an appropriate_Spring RemoteAccessException._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex) {_		throw new RemoteAccessException("Could not access JMS invoker queue [" + this.queue + "]", ex)__	};convert,the,given,jms,invoker,access,exception,to,an,appropriate,spring,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,jms,invoker,access,exception,jmsexception,ex,throw,new,remote,access,exception,could,not,access,jms,invoker,queue,this,queue,ex
JmsInvokerClientInterceptor -> protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex);1424380551;Convert the given JMS invoker access exception to an appropriate_Spring {@link RemoteAccessException}._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex) {_		throw new RemoteAccessException("Could not access JMS invoker queue [" + this.queue + "]", ex)__	};convert,the,given,jms,invoker,access,exception,to,an,appropriate,spring,link,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,jms,invoker,access,exception,jmsexception,ex,throw,new,remote,access,exception,could,not,access,jms,invoker,queue,this,queue,ex
JmsInvokerClientInterceptor -> protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex);1424380732;Convert the given JMS invoker access exception to an appropriate_Spring {@link RemoteAccessException}._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex) {_		return new RemoteAccessException("Could not access JMS invoker queue [" + this.queue + "]", ex)__	};convert,the,given,jms,invoker,access,exception,to,an,appropriate,spring,link,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,jms,invoker,access,exception,jmsexception,ex,return,new,remote,access,exception,could,not,access,jms,invoker,queue,this,queue,ex
JmsInvokerClientInterceptor -> protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex);1496837955;Convert the given JMS invoker access exception to an appropriate_Spring {@link RemoteAccessException}._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex) {_		return new RemoteAccessException("Could not access JMS invoker queue [" + this.queue + "]", ex)__	};convert,the,given,jms,invoker,access,exception,to,an,appropriate,spring,link,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,jms,invoker,access,exception,jmsexception,ex,return,new,remote,access,exception,could,not,access,jms,invoker,queue,this,queue,ex
JmsInvokerClientInterceptor -> protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex);1498780456;Convert the given JMS invoker access exception to an appropriate_Spring {@link RemoteAccessException}._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex) {_		return new RemoteAccessException("Could not access JMS invoker queue [" + this.queue + "]", ex)__	};convert,the,given,jms,invoker,access,exception,to,an,appropriate,spring,link,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,jms,invoker,access,exception,jmsexception,ex,return,new,remote,access,exception,could,not,access,jms,invoker,queue,this,queue,ex
JmsInvokerClientInterceptor -> protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex);1500416137;Convert the given JMS invoker access exception to an appropriate_Spring {@link RemoteAccessException}._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex) {_		return new RemoteAccessException("Could not access JMS invoker queue [" + this.queue + "]", ex)__	};convert,the,given,jms,invoker,access,exception,to,an,appropriate,spring,link,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,jms,invoker,access,exception,jmsexception,ex,return,new,remote,access,exception,could,not,access,jms,invoker,queue,this,queue,ex
JmsInvokerClientInterceptor -> protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex);1500448076;Convert the given JMS invoker access exception to an appropriate_Spring {@link RemoteAccessException}._@param ex the exception to convert_@return the RemoteAccessException to throw;protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex) {_		return new RemoteAccessException("Could not access JMS invoker queue [" + this.queue + "]", ex)__	};convert,the,given,jms,invoker,access,exception,to,an,appropriate,spring,link,remote,access,exception,param,ex,the,exception,to,convert,return,the,remote,access,exception,to,throw;protected,remote,access,exception,convert,jms,invoker,access,exception,jmsexception,ex,return,new,remote,access,exception,could,not,access,jms,invoker,queue,this,queue,ex
JmsInvokerClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1328020251;Set the RemoteInvocationFactory to use for this accessor._Default is a {@link org.springframework.remoting.support.DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory =_				(remoteInvocationFactory != null ? remoteInvocationFactory : new DefaultRemoteInvocationFactory())__	};set,the,remote,invocation,factory,to,use,for,this,accessor,default,is,a,link,org,springframework,remoting,support,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory,null,remote,invocation,factory,new,default,remote,invocation,factory
JmsInvokerClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1356735495;Set the RemoteInvocationFactory to use for this accessor._Default is a {@link org.springframework.remoting.support.DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory =_				(remoteInvocationFactory != null ? remoteInvocationFactory : new DefaultRemoteInvocationFactory())__	};set,the,remote,invocation,factory,to,use,for,this,accessor,default,is,a,link,org,springframework,remoting,support,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory,null,remote,invocation,factory,new,default,remote,invocation,factory
JmsInvokerClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1357119239;Set the RemoteInvocationFactory to use for this accessor._Default is a {@link org.springframework.remoting.support.DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory =_				(remoteInvocationFactory != null ? remoteInvocationFactory : new DefaultRemoteInvocationFactory())__	};set,the,remote,invocation,factory,to,use,for,this,accessor,default,is,a,link,org,springframework,remoting,support,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory,null,remote,invocation,factory,new,default,remote,invocation,factory
JmsInvokerClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1368482696;Set the RemoteInvocationFactory to use for this accessor._Default is a {@link org.springframework.remoting.support.DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory =_				(remoteInvocationFactory != null ? remoteInvocationFactory : new DefaultRemoteInvocationFactory())__	};set,the,remote,invocation,factory,to,use,for,this,accessor,default,is,a,link,org,springframework,remoting,support,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory,null,remote,invocation,factory,new,default,remote,invocation,factory
JmsInvokerClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1405696891;Set the RemoteInvocationFactory to use for this accessor._Default is a {@link org.springframework.remoting.support.DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory =_				(remoteInvocationFactory != null ? remoteInvocationFactory : new DefaultRemoteInvocationFactory())__	};set,the,remote,invocation,factory,to,use,for,this,accessor,default,is,a,link,org,springframework,remoting,support,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory,null,remote,invocation,factory,new,default,remote,invocation,factory
JmsInvokerClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1424362428;Set the RemoteInvocationFactory to use for this accessor._Default is a {@link org.springframework.remoting.support.DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory =_				(remoteInvocationFactory != null ? remoteInvocationFactory : new DefaultRemoteInvocationFactory())__	};set,the,remote,invocation,factory,to,use,for,this,accessor,default,is,a,link,org,springframework,remoting,support,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory,null,remote,invocation,factory,new,default,remote,invocation,factory
JmsInvokerClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1424380551;Set the {@link RemoteInvocationFactory} to use for this accessor._<p>Default is a {@link DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory =_				(remoteInvocationFactory != null ? remoteInvocationFactory : new DefaultRemoteInvocationFactory())__	};set,the,link,remote,invocation,factory,to,use,for,this,accessor,p,default,is,a,link,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory,null,remote,invocation,factory,new,default,remote,invocation,factory
JmsInvokerClientInterceptor -> public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory);1424380732;Set the {@link RemoteInvocationFactory} to use for this accessor._<p>Default is a {@link DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory =_				(remoteInvocationFactory != null ? remoteInvocationFactory : new DefaultRemoteInvocationFactory())__	};set,the,link,remote,invocation,factory,to,use,for,this,accessor,p,default,is,a,link,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory,null,remote,invocation,factory,new,default,remote,invocation,factory
JmsInvokerClientInterceptor -> public void setReceiveTimeout(long receiveTimeout);1328020251;Set the timeout to use for receiving the response message for a request_(in milliseconds)._<p>The default is 0, which indicates a blocking receive without timeout._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive();public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds,p,the,default,is,0,which,indicates,a,blocking,receive,without,timeout,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
JmsInvokerClientInterceptor -> public void setReceiveTimeout(long receiveTimeout);1356735495;Set the timeout to use for receiving the response message for a request_(in milliseconds)._<p>The default is 0, which indicates a blocking receive without timeout._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive();public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds,p,the,default,is,0,which,indicates,a,blocking,receive,without,timeout,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
JmsInvokerClientInterceptor -> public void setReceiveTimeout(long receiveTimeout);1357119239;Set the timeout to use for receiving the response message for a request_(in milliseconds)._<p>The default is 0, which indicates a blocking receive without timeout._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive();public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds,p,the,default,is,0,which,indicates,a,blocking,receive,without,timeout,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
JmsInvokerClientInterceptor -> public void setReceiveTimeout(long receiveTimeout);1368482696;Set the timeout to use for receiving the response message for a request_(in milliseconds)._<p>The default is 0, which indicates a blocking receive without timeout._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive();public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds,p,the,default,is,0,which,indicates,a,blocking,receive,without,timeout,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
JmsInvokerClientInterceptor -> public void setReceiveTimeout(long receiveTimeout);1405696891;Set the timeout to use for receiving the response message for a request_(in milliseconds)._<p>The default is 0, which indicates a blocking receive without timeout._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive();public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds,p,the,default,is,0,which,indicates,a,blocking,receive,without,timeout,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
JmsInvokerClientInterceptor -> public void setReceiveTimeout(long receiveTimeout);1424362428;Set the timeout to use for receiving the response message for a request_(in milliseconds)._<p>The default is 0, which indicates a blocking receive without timeout._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive();public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds,p,the,default,is,0,which,indicates,a,blocking,receive,without,timeout,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
JmsInvokerClientInterceptor -> public void setReceiveTimeout(long receiveTimeout);1424380551;Set the timeout to use for receiving the response message for a request_(in milliseconds)._<p>The default is 0, which indicates a blocking receive without timeout._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive();public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds,p,the,default,is,0,which,indicates,a,blocking,receive,without,timeout,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
JmsInvokerClientInterceptor -> public void setReceiveTimeout(long receiveTimeout);1424380732;Set the timeout to use for receiving the response message for a request_(in milliseconds)._<p>The default is 0, which indicates a blocking receive without timeout._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive();public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds,p,the,default,is,0,which,indicates,a,blocking,receive,without,timeout,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
JmsInvokerClientInterceptor -> public void setReceiveTimeout(long receiveTimeout);1496837955;Set the timeout to use for receiving the response message for a request_(in milliseconds)._<p>The default is 0, which indicates a blocking receive without timeout._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive();public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds,p,the,default,is,0,which,indicates,a,blocking,receive,without,timeout,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
JmsInvokerClientInterceptor -> public void setReceiveTimeout(long receiveTimeout);1498780456;Set the timeout to use for receiving the response message for a request_(in milliseconds)._<p>The default is 0, which indicates a blocking receive without timeout._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive();public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds,p,the,default,is,0,which,indicates,a,blocking,receive,without,timeout,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
JmsInvokerClientInterceptor -> public void setReceiveTimeout(long receiveTimeout);1500416137;Set the timeout to use for receiving the response message for a request_(in milliseconds)._<p>The default is 0, which indicates a blocking receive without timeout._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive();public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds,p,the,default,is,0,which,indicates,a,blocking,receive,without,timeout,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
JmsInvokerClientInterceptor -> public void setReceiveTimeout(long receiveTimeout);1500448076;Set the timeout to use for receiving the response message for a request_(in milliseconds)._<p>The default is 0, which indicates a blocking receive without timeout._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive();public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds,p,the,default,is,0,which,indicates,a,blocking,receive,without,timeout,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
JmsInvokerClientInterceptor -> protected Connection createConnection() throws JMSException;1328020251;Create a new JMS Connection for this JMS invoker.;protected Connection createConnection() throws JMSException {_		ConnectionFactory cf = getConnectionFactory()__		if (jms11Available) {_			return cf.createConnection()__		}_		else {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_	};create,a,new,jms,connection,for,this,jms,invoker;protected,connection,create,connection,throws,jmsexception,connection,factory,cf,get,connection,factory,if,jms11available,return,cf,create,connection,else,return,queue,connection,factory,cf,create,queue,connection
JmsInvokerClientInterceptor -> protected Connection createConnection() throws JMSException;1356735495;Create a new JMS Connection for this JMS invoker.;protected Connection createConnection() throws JMSException {_		ConnectionFactory cf = getConnectionFactory()__		if (jms11Available) {_			return cf.createConnection()__		}_		else {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_	};create,a,new,jms,connection,for,this,jms,invoker;protected,connection,create,connection,throws,jmsexception,connection,factory,cf,get,connection,factory,if,jms11available,return,cf,create,connection,else,return,queue,connection,factory,cf,create,queue,connection
JmsInvokerClientInterceptor -> protected Connection createConnection() throws JMSException;1357119239;Create a new JMS Connection for this JMS invoker.;protected Connection createConnection() throws JMSException {_		ConnectionFactory cf = getConnectionFactory()__		if (jms11Available) {_			return cf.createConnection()__		}_		else {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_	};create,a,new,jms,connection,for,this,jms,invoker;protected,connection,create,connection,throws,jmsexception,connection,factory,cf,get,connection,factory,if,jms11available,return,cf,create,connection,else,return,queue,connection,factory,cf,create,queue,connection
JmsInvokerClientInterceptor -> protected Connection createConnection() throws JMSException;1368482696;Create a new JMS Connection for this JMS invoker.;protected Connection createConnection() throws JMSException {_		ConnectionFactory cf = getConnectionFactory()__		if (jms11Available) {_			return cf.createConnection()__		}_		else {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_	};create,a,new,jms,connection,for,this,jms,invoker;protected,connection,create,connection,throws,jmsexception,connection,factory,cf,get,connection,factory,if,jms11available,return,cf,create,connection,else,return,queue,connection,factory,cf,create,queue,connection
JmsInvokerClientInterceptor -> protected Connection createConnection() throws JMSException;1405696891;Create a new JMS Connection for this JMS invoker.;protected Connection createConnection() throws JMSException {_		return getConnectionFactory().createConnection()__	};create,a,new,jms,connection,for,this,jms,invoker;protected,connection,create,connection,throws,jmsexception,return,get,connection,factory,create,connection
JmsInvokerClientInterceptor -> protected Connection createConnection() throws JMSException;1424362428;Create a new JMS Connection for this JMS invoker.;protected Connection createConnection() throws JMSException {_		return getConnectionFactory().createConnection()__	};create,a,new,jms,connection,for,this,jms,invoker;protected,connection,create,connection,throws,jmsexception,return,get,connection,factory,create,connection
JmsInvokerClientInterceptor -> protected Connection createConnection() throws JMSException;1424380551;Create a new JMS Connection for this JMS invoker.;protected Connection createConnection() throws JMSException {_		return getConnectionFactory().createConnection()__	};create,a,new,jms,connection,for,this,jms,invoker;protected,connection,create,connection,throws,jmsexception,return,get,connection,factory,create,connection
JmsInvokerClientInterceptor -> protected Connection createConnection() throws JMSException;1424380732;Create a new JMS Connection for this JMS invoker.;protected Connection createConnection() throws JMSException {_		return getConnectionFactory().createConnection()__	};create,a,new,jms,connection,for,this,jms,invoker;protected,connection,create,connection,throws,jmsexception,return,get,connection,factory,create,connection
JmsInvokerClientInterceptor -> protected Connection createConnection() throws JMSException;1496837955;Create a new JMS Connection for this JMS invoker.;protected Connection createConnection() throws JMSException {_		ConnectionFactory connectionFactory = getConnectionFactory()__		Assert.state(connectionFactory != null, "No ConnectionFactory set")__		return connectionFactory.createConnection()__	};create,a,new,jms,connection,for,this,jms,invoker;protected,connection,create,connection,throws,jmsexception,connection,factory,connection,factory,get,connection,factory,assert,state,connection,factory,null,no,connection,factory,set,return,connection,factory,create,connection
JmsInvokerClientInterceptor -> protected Connection createConnection() throws JMSException;1498780456;Create a new JMS Connection for this JMS invoker.;protected Connection createConnection() throws JMSException {_		ConnectionFactory connectionFactory = getConnectionFactory()__		Assert.state(connectionFactory != null, "No ConnectionFactory set")__		return connectionFactory.createConnection()__	};create,a,new,jms,connection,for,this,jms,invoker;protected,connection,create,connection,throws,jmsexception,connection,factory,connection,factory,get,connection,factory,assert,state,connection,factory,null,no,connection,factory,set,return,connection,factory,create,connection
JmsInvokerClientInterceptor -> protected Connection createConnection() throws JMSException;1500416137;Create a new JMS Connection for this JMS invoker.;protected Connection createConnection() throws JMSException {_		ConnectionFactory connectionFactory = getConnectionFactory()__		Assert.state(connectionFactory != null, "No ConnectionFactory set")__		return connectionFactory.createConnection()__	};create,a,new,jms,connection,for,this,jms,invoker;protected,connection,create,connection,throws,jmsexception,connection,factory,connection,factory,get,connection,factory,assert,state,connection,factory,null,no,connection,factory,set,return,connection,factory,create,connection
JmsInvokerClientInterceptor -> protected Connection createConnection() throws JMSException;1500448076;Create a new JMS Connection for this JMS invoker.;protected Connection createConnection() throws JMSException {_		ConnectionFactory connectionFactory = getConnectionFactory()__		Assert.state(connectionFactory != null, "No ConnectionFactory set")__		return connectionFactory.createConnection()__	};create,a,new,jms,connection,for,this,jms,invoker;protected,connection,create,connection,throws,jmsexception,connection,factory,connection,factory,get,connection,factory,assert,state,connection,factory,null,no,connection,factory,set,return,connection,factory,create,connection
JmsInvokerClientInterceptor -> protected Queue resolveQueue(Session session) throws JMSException;1328020251;Resolve this accessor's target queue._@param session the current JMS Session_@return the resolved target Queue_@throws JMSException if resolution failed;protected Queue resolveQueue(Session session) throws JMSException {_		if (this.queue instanceof Queue) {_			return (Queue) this.queue__		}_		else if (this.queue instanceof String) {_			return resolveQueueName(session, (String) this.queue)__		}_		else {_			throw new javax.jms.IllegalStateException(_					"Queue object [" + this.queue + "] is neither a [javax.jms.Queue] nor a queue name String")__		}_	};resolve,this,accessor,s,target,queue,param,session,the,current,jms,session,return,the,resolved,target,queue,throws,jmsexception,if,resolution,failed;protected,queue,resolve,queue,session,session,throws,jmsexception,if,this,queue,instanceof,queue,return,queue,this,queue,else,if,this,queue,instanceof,string,return,resolve,queue,name,session,string,this,queue,else,throw,new,javax,jms,illegal,state,exception,queue,object,this,queue,is,neither,a,javax,jms,queue,nor,a,queue,name,string
JmsInvokerClientInterceptor -> protected Queue resolveQueue(Session session) throws JMSException;1356735495;Resolve this accessor's target queue._@param session the current JMS Session_@return the resolved target Queue_@throws JMSException if resolution failed;protected Queue resolveQueue(Session session) throws JMSException {_		if (this.queue instanceof Queue) {_			return (Queue) this.queue__		}_		else if (this.queue instanceof String) {_			return resolveQueueName(session, (String) this.queue)__		}_		else {_			throw new javax.jms.IllegalStateException(_					"Queue object [" + this.queue + "] is neither a [javax.jms.Queue] nor a queue name String")__		}_	};resolve,this,accessor,s,target,queue,param,session,the,current,jms,session,return,the,resolved,target,queue,throws,jmsexception,if,resolution,failed;protected,queue,resolve,queue,session,session,throws,jmsexception,if,this,queue,instanceof,queue,return,queue,this,queue,else,if,this,queue,instanceof,string,return,resolve,queue,name,session,string,this,queue,else,throw,new,javax,jms,illegal,state,exception,queue,object,this,queue,is,neither,a,javax,jms,queue,nor,a,queue,name,string
JmsInvokerClientInterceptor -> protected Queue resolveQueue(Session session) throws JMSException;1357119239;Resolve this accessor's target queue._@param session the current JMS Session_@return the resolved target Queue_@throws JMSException if resolution failed;protected Queue resolveQueue(Session session) throws JMSException {_		if (this.queue instanceof Queue) {_			return (Queue) this.queue__		}_		else if (this.queue instanceof String) {_			return resolveQueueName(session, (String) this.queue)__		}_		else {_			throw new javax.jms.IllegalStateException(_					"Queue object [" + this.queue + "] is neither a [javax.jms.Queue] nor a queue name String")__		}_	};resolve,this,accessor,s,target,queue,param,session,the,current,jms,session,return,the,resolved,target,queue,throws,jmsexception,if,resolution,failed;protected,queue,resolve,queue,session,session,throws,jmsexception,if,this,queue,instanceof,queue,return,queue,this,queue,else,if,this,queue,instanceof,string,return,resolve,queue,name,session,string,this,queue,else,throw,new,javax,jms,illegal,state,exception,queue,object,this,queue,is,neither,a,javax,jms,queue,nor,a,queue,name,string
JmsInvokerClientInterceptor -> protected Queue resolveQueue(Session session) throws JMSException;1368482696;Resolve this accessor's target queue._@param session the current JMS Session_@return the resolved target Queue_@throws JMSException if resolution failed;protected Queue resolveQueue(Session session) throws JMSException {_		if (this.queue instanceof Queue) {_			return (Queue) this.queue__		}_		else if (this.queue instanceof String) {_			return resolveQueueName(session, (String) this.queue)__		}_		else {_			throw new javax.jms.IllegalStateException(_					"Queue object [" + this.queue + "] is neither a [javax.jms.Queue] nor a queue name String")__		}_	};resolve,this,accessor,s,target,queue,param,session,the,current,jms,session,return,the,resolved,target,queue,throws,jmsexception,if,resolution,failed;protected,queue,resolve,queue,session,session,throws,jmsexception,if,this,queue,instanceof,queue,return,queue,this,queue,else,if,this,queue,instanceof,string,return,resolve,queue,name,session,string,this,queue,else,throw,new,javax,jms,illegal,state,exception,queue,object,this,queue,is,neither,a,javax,jms,queue,nor,a,queue,name,string
JmsInvokerClientInterceptor -> protected Queue resolveQueue(Session session) throws JMSException;1405696891;Resolve this accessor's target queue._@param session the current JMS Session_@return the resolved target Queue_@throws JMSException if resolution failed;protected Queue resolveQueue(Session session) throws JMSException {_		if (this.queue instanceof Queue) {_			return (Queue) this.queue__		}_		else if (this.queue instanceof String) {_			return resolveQueueName(session, (String) this.queue)__		}_		else {_			throw new javax.jms.IllegalStateException(_					"Queue object [" + this.queue + "] is neither a [javax.jms.Queue] nor a queue name String")__		}_	};resolve,this,accessor,s,target,queue,param,session,the,current,jms,session,return,the,resolved,target,queue,throws,jmsexception,if,resolution,failed;protected,queue,resolve,queue,session,session,throws,jmsexception,if,this,queue,instanceof,queue,return,queue,this,queue,else,if,this,queue,instanceof,string,return,resolve,queue,name,session,string,this,queue,else,throw,new,javax,jms,illegal,state,exception,queue,object,this,queue,is,neither,a,javax,jms,queue,nor,a,queue,name,string
JmsInvokerClientInterceptor -> protected Queue resolveQueue(Session session) throws JMSException;1424362428;Resolve this accessor's target queue._@param session the current JMS Session_@return the resolved target Queue_@throws JMSException if resolution failed;protected Queue resolveQueue(Session session) throws JMSException {_		if (this.queue instanceof Queue) {_			return (Queue) this.queue__		}_		else if (this.queue instanceof String) {_			return resolveQueueName(session, (String) this.queue)__		}_		else {_			throw new javax.jms.IllegalStateException(_					"Queue object [" + this.queue + "] is neither a [javax.jms.Queue] nor a queue name String")__		}_	};resolve,this,accessor,s,target,queue,param,session,the,current,jms,session,return,the,resolved,target,queue,throws,jmsexception,if,resolution,failed;protected,queue,resolve,queue,session,session,throws,jmsexception,if,this,queue,instanceof,queue,return,queue,this,queue,else,if,this,queue,instanceof,string,return,resolve,queue,name,session,string,this,queue,else,throw,new,javax,jms,illegal,state,exception,queue,object,this,queue,is,neither,a,javax,jms,queue,nor,a,queue,name,string
JmsInvokerClientInterceptor -> protected Queue resolveQueue(Session session) throws JMSException;1424380551;Resolve this accessor's target queue._@param session the current JMS Session_@return the resolved target Queue_@throws JMSException if resolution failed;protected Queue resolveQueue(Session session) throws JMSException {_		if (this.queue instanceof Queue) {_			return (Queue) this.queue__		}_		else if (this.queue instanceof String) {_			return resolveQueueName(session, (String) this.queue)__		}_		else {_			throw new javax.jms.IllegalStateException(_					"Queue object [" + this.queue + "] is neither a [javax.jms.Queue] nor a queue name String")__		}_	};resolve,this,accessor,s,target,queue,param,session,the,current,jms,session,return,the,resolved,target,queue,throws,jmsexception,if,resolution,failed;protected,queue,resolve,queue,session,session,throws,jmsexception,if,this,queue,instanceof,queue,return,queue,this,queue,else,if,this,queue,instanceof,string,return,resolve,queue,name,session,string,this,queue,else,throw,new,javax,jms,illegal,state,exception,queue,object,this,queue,is,neither,a,javax,jms,queue,nor,a,queue,name,string
JmsInvokerClientInterceptor -> protected Queue resolveQueue(Session session) throws JMSException;1424380732;Resolve this accessor's target queue._@param session the current JMS Session_@return the resolved target Queue_@throws JMSException if resolution failed;protected Queue resolveQueue(Session session) throws JMSException {_		if (this.queue instanceof Queue) {_			return (Queue) this.queue__		}_		else if (this.queue instanceof String) {_			return resolveQueueName(session, (String) this.queue)__		}_		else {_			throw new javax.jms.IllegalStateException(_					"Queue object [" + this.queue + "] is neither a [javax.jms.Queue] nor a queue name String")__		}_	};resolve,this,accessor,s,target,queue,param,session,the,current,jms,session,return,the,resolved,target,queue,throws,jmsexception,if,resolution,failed;protected,queue,resolve,queue,session,session,throws,jmsexception,if,this,queue,instanceof,queue,return,queue,this,queue,else,if,this,queue,instanceof,string,return,resolve,queue,name,session,string,this,queue,else,throw,new,javax,jms,illegal,state,exception,queue,object,this,queue,is,neither,a,javax,jms,queue,nor,a,queue,name,string
JmsInvokerClientInterceptor -> protected Queue resolveQueue(Session session) throws JMSException;1496837955;Resolve this accessor's target queue._@param session the current JMS Session_@return the resolved target Queue_@throws JMSException if resolution failed;protected Queue resolveQueue(Session session) throws JMSException {_		if (this.queue instanceof Queue) {_			return (Queue) this.queue__		}_		else if (this.queue instanceof String) {_			return resolveQueueName(session, (String) this.queue)__		}_		else {_			throw new javax.jms.IllegalStateException(_					"Queue object [" + this.queue + "] is neither a [javax.jms.Queue] nor a queue name String")__		}_	};resolve,this,accessor,s,target,queue,param,session,the,current,jms,session,return,the,resolved,target,queue,throws,jmsexception,if,resolution,failed;protected,queue,resolve,queue,session,session,throws,jmsexception,if,this,queue,instanceof,queue,return,queue,this,queue,else,if,this,queue,instanceof,string,return,resolve,queue,name,session,string,this,queue,else,throw,new,javax,jms,illegal,state,exception,queue,object,this,queue,is,neither,a,javax,jms,queue,nor,a,queue,name,string
JmsInvokerClientInterceptor -> protected Queue resolveQueue(Session session) throws JMSException;1498780456;Resolve this accessor's target queue._@param session the current JMS Session_@return the resolved target Queue_@throws JMSException if resolution failed;protected Queue resolveQueue(Session session) throws JMSException {_		if (this.queue instanceof Queue) {_			return (Queue) this.queue__		}_		else if (this.queue instanceof String) {_			return resolveQueueName(session, (String) this.queue)__		}_		else {_			throw new javax.jms.IllegalStateException(_					"Queue object [" + this.queue + "] is neither a [javax.jms.Queue] nor a queue name String")__		}_	};resolve,this,accessor,s,target,queue,param,session,the,current,jms,session,return,the,resolved,target,queue,throws,jmsexception,if,resolution,failed;protected,queue,resolve,queue,session,session,throws,jmsexception,if,this,queue,instanceof,queue,return,queue,this,queue,else,if,this,queue,instanceof,string,return,resolve,queue,name,session,string,this,queue,else,throw,new,javax,jms,illegal,state,exception,queue,object,this,queue,is,neither,a,javax,jms,queue,nor,a,queue,name,string
JmsInvokerClientInterceptor -> protected Queue resolveQueue(Session session) throws JMSException;1500416137;Resolve this accessor's target queue._@param session the current JMS Session_@return the resolved target Queue_@throws JMSException if resolution failed;protected Queue resolveQueue(Session session) throws JMSException {_		if (this.queue instanceof Queue) {_			return (Queue) this.queue__		}_		else if (this.queue instanceof String) {_			return resolveQueueName(session, (String) this.queue)__		}_		else {_			throw new javax.jms.IllegalStateException(_					"Queue object [" + this.queue + "] is neither a [javax.jms.Queue] nor a queue name String")__		}_	};resolve,this,accessor,s,target,queue,param,session,the,current,jms,session,return,the,resolved,target,queue,throws,jmsexception,if,resolution,failed;protected,queue,resolve,queue,session,session,throws,jmsexception,if,this,queue,instanceof,queue,return,queue,this,queue,else,if,this,queue,instanceof,string,return,resolve,queue,name,session,string,this,queue,else,throw,new,javax,jms,illegal,state,exception,queue,object,this,queue,is,neither,a,javax,jms,queue,nor,a,queue,name,string
JmsInvokerClientInterceptor -> protected Queue resolveQueue(Session session) throws JMSException;1500448076;Resolve this accessor's target queue._@param session the current JMS Session_@return the resolved target Queue_@throws JMSException if resolution failed;protected Queue resolveQueue(Session session) throws JMSException {_		if (this.queue instanceof Queue) {_			return (Queue) this.queue__		}_		else if (this.queue instanceof String) {_			return resolveQueueName(session, (String) this.queue)__		}_		else {_			throw new javax.jms.IllegalStateException(_					"Queue object [" + this.queue + "] is neither a [javax.jms.Queue] nor a queue name String")__		}_	};resolve,this,accessor,s,target,queue,param,session,the,current,jms,session,return,the,resolved,target,queue,throws,jmsexception,if,resolution,failed;protected,queue,resolve,queue,session,session,throws,jmsexception,if,this,queue,instanceof,queue,return,queue,this,queue,else,if,this,queue,instanceof,string,return,resolve,queue,name,session,string,this,queue,else,throw,new,javax,jms,illegal,state,exception,queue,object,this,queue,is,neither,a,javax,jms,queue,nor,a,queue,name,string
JmsInvokerClientInterceptor -> protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException;1328020251;Actually execute the given request, sending the invoker request message_to the specified target queue and waiting for a corresponding response._<p>The default implementation is based on standard JMS send/receive,_using a {@link javax.jms.TemporaryQueue} for receiving the response._@param session the JMS Session to use_@param queue the resolved target Queue to send to_@param requestMessage the JMS Message to send_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure;protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException {_		TemporaryQueue responseQueue = null__		MessageProducer producer = null__		MessageConsumer consumer = null__		try {_			if (jms11Available) {_				_				responseQueue = session.createTemporaryQueue()__				producer = session.createProducer(queue)__				consumer = session.createConsumer(responseQueue)__				requestMessage.setJMSReplyTo(responseQueue)__				producer.send(requestMessage)__			}_			else {_				_				_				QueueSession queueSession = (QueueSession) session__				responseQueue = queueSession.createTemporaryQueue()__				QueueSender sender = queueSession.createSender(queue)__				producer = sender__				consumer = queueSession.createReceiver(responseQueue)__				requestMessage.setJMSReplyTo(responseQueue)__				sender.send(requestMessage)__			}_			long timeout = getReceiveTimeout()__			return (timeout > 0 ? consumer.receive(timeout) : consumer.receive())__		}_		finally {_			JmsUtils.closeMessageConsumer(consumer)__			JmsUtils.closeMessageProducer(producer)__			if (responseQueue != null) {_				responseQueue.delete()__			}_		}_	};actually,execute,the,given,request,sending,the,invoker,request,message,to,the,specified,target,queue,and,waiting,for,a,corresponding,response,p,the,default,implementation,is,based,on,standard,jms,send,receive,using,a,link,javax,jms,temporary,queue,for,receiving,the,response,param,session,the,jms,session,to,use,param,queue,the,resolved,target,queue,to,send,to,param,request,message,the,jms,message,to,send,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure;protected,message,do,execute,request,session,session,queue,queue,message,request,message,throws,jmsexception,temporary,queue,response,queue,null,message,producer,producer,null,message,consumer,consumer,null,try,if,jms11available,response,queue,session,create,temporary,queue,producer,session,create,producer,queue,consumer,session,create,consumer,response,queue,request,message,set,jmsreply,to,response,queue,producer,send,request,message,else,queue,session,queue,session,queue,session,session,response,queue,queue,session,create,temporary,queue,queue,sender,sender,queue,session,create,sender,queue,producer,sender,consumer,queue,session,create,receiver,response,queue,request,message,set,jmsreply,to,response,queue,sender,send,request,message,long,timeout,get,receive,timeout,return,timeout,0,consumer,receive,timeout,consumer,receive,finally,jms,utils,close,message,consumer,consumer,jms,utils,close,message,producer,producer,if,response,queue,null,response,queue,delete
JmsInvokerClientInterceptor -> protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException;1356735495;Actually execute the given request, sending the invoker request message_to the specified target queue and waiting for a corresponding response._<p>The default implementation is based on standard JMS send/receive,_using a {@link javax.jms.TemporaryQueue} for receiving the response._@param session the JMS Session to use_@param queue the resolved target Queue to send to_@param requestMessage the JMS Message to send_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure;protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException {_		TemporaryQueue responseQueue = null__		MessageProducer producer = null__		MessageConsumer consumer = null__		try {_			if (jms11Available) {_				_				responseQueue = session.createTemporaryQueue()__				producer = session.createProducer(queue)__				consumer = session.createConsumer(responseQueue)__				requestMessage.setJMSReplyTo(responseQueue)__				producer.send(requestMessage)__			}_			else {_				_				_				QueueSession queueSession = (QueueSession) session__				responseQueue = queueSession.createTemporaryQueue()__				QueueSender sender = queueSession.createSender(queue)__				producer = sender__				consumer = queueSession.createReceiver(responseQueue)__				requestMessage.setJMSReplyTo(responseQueue)__				sender.send(requestMessage)__			}_			long timeout = getReceiveTimeout()__			return (timeout > 0 ? consumer.receive(timeout) : consumer.receive())__		}_		finally {_			JmsUtils.closeMessageConsumer(consumer)__			JmsUtils.closeMessageProducer(producer)__			if (responseQueue != null) {_				responseQueue.delete()__			}_		}_	};actually,execute,the,given,request,sending,the,invoker,request,message,to,the,specified,target,queue,and,waiting,for,a,corresponding,response,p,the,default,implementation,is,based,on,standard,jms,send,receive,using,a,link,javax,jms,temporary,queue,for,receiving,the,response,param,session,the,jms,session,to,use,param,queue,the,resolved,target,queue,to,send,to,param,request,message,the,jms,message,to,send,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure;protected,message,do,execute,request,session,session,queue,queue,message,request,message,throws,jmsexception,temporary,queue,response,queue,null,message,producer,producer,null,message,consumer,consumer,null,try,if,jms11available,response,queue,session,create,temporary,queue,producer,session,create,producer,queue,consumer,session,create,consumer,response,queue,request,message,set,jmsreply,to,response,queue,producer,send,request,message,else,queue,session,queue,session,queue,session,session,response,queue,queue,session,create,temporary,queue,queue,sender,sender,queue,session,create,sender,queue,producer,sender,consumer,queue,session,create,receiver,response,queue,request,message,set,jmsreply,to,response,queue,sender,send,request,message,long,timeout,get,receive,timeout,return,timeout,0,consumer,receive,timeout,consumer,receive,finally,jms,utils,close,message,consumer,consumer,jms,utils,close,message,producer,producer,if,response,queue,null,response,queue,delete
JmsInvokerClientInterceptor -> protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException;1357119239;Actually execute the given request, sending the invoker request message_to the specified target queue and waiting for a corresponding response._<p>The default implementation is based on standard JMS send/receive,_using a {@link javax.jms.TemporaryQueue} for receiving the response._@param session the JMS Session to use_@param queue the resolved target Queue to send to_@param requestMessage the JMS Message to send_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure;protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException {_		TemporaryQueue responseQueue = null__		MessageProducer producer = null__		MessageConsumer consumer = null__		try {_			if (jms11Available) {_				_				responseQueue = session.createTemporaryQueue()__				producer = session.createProducer(queue)__				consumer = session.createConsumer(responseQueue)__				requestMessage.setJMSReplyTo(responseQueue)__				producer.send(requestMessage)__			}_			else {_				_				_				QueueSession queueSession = (QueueSession) session__				responseQueue = queueSession.createTemporaryQueue()__				QueueSender sender = queueSession.createSender(queue)__				producer = sender__				consumer = queueSession.createReceiver(responseQueue)__				requestMessage.setJMSReplyTo(responseQueue)__				sender.send(requestMessage)__			}_			long timeout = getReceiveTimeout()__			return (timeout > 0 ? consumer.receive(timeout) : consumer.receive())__		}_		finally {_			JmsUtils.closeMessageConsumer(consumer)__			JmsUtils.closeMessageProducer(producer)__			if (responseQueue != null) {_				responseQueue.delete()__			}_		}_	};actually,execute,the,given,request,sending,the,invoker,request,message,to,the,specified,target,queue,and,waiting,for,a,corresponding,response,p,the,default,implementation,is,based,on,standard,jms,send,receive,using,a,link,javax,jms,temporary,queue,for,receiving,the,response,param,session,the,jms,session,to,use,param,queue,the,resolved,target,queue,to,send,to,param,request,message,the,jms,message,to,send,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure;protected,message,do,execute,request,session,session,queue,queue,message,request,message,throws,jmsexception,temporary,queue,response,queue,null,message,producer,producer,null,message,consumer,consumer,null,try,if,jms11available,response,queue,session,create,temporary,queue,producer,session,create,producer,queue,consumer,session,create,consumer,response,queue,request,message,set,jmsreply,to,response,queue,producer,send,request,message,else,queue,session,queue,session,queue,session,session,response,queue,queue,session,create,temporary,queue,queue,sender,sender,queue,session,create,sender,queue,producer,sender,consumer,queue,session,create,receiver,response,queue,request,message,set,jmsreply,to,response,queue,sender,send,request,message,long,timeout,get,receive,timeout,return,timeout,0,consumer,receive,timeout,consumer,receive,finally,jms,utils,close,message,consumer,consumer,jms,utils,close,message,producer,producer,if,response,queue,null,response,queue,delete
JmsInvokerClientInterceptor -> protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException;1368482696;Actually execute the given request, sending the invoker request message_to the specified target queue and waiting for a corresponding response._<p>The default implementation is based on standard JMS send/receive,_using a {@link javax.jms.TemporaryQueue} for receiving the response._@param session the JMS Session to use_@param queue the resolved target Queue to send to_@param requestMessage the JMS Message to send_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure;protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException {_		TemporaryQueue responseQueue = null__		MessageProducer producer = null__		MessageConsumer consumer = null__		try {_			if (jms11Available) {_				_				responseQueue = session.createTemporaryQueue()__				producer = session.createProducer(queue)__				consumer = session.createConsumer(responseQueue)__				requestMessage.setJMSReplyTo(responseQueue)__				producer.send(requestMessage)__			}_			else {_				_				_				QueueSession queueSession = (QueueSession) session__				responseQueue = queueSession.createTemporaryQueue()__				QueueSender sender = queueSession.createSender(queue)__				producer = sender__				consumer = queueSession.createReceiver(responseQueue)__				requestMessage.setJMSReplyTo(responseQueue)__				sender.send(requestMessage)__			}_			long timeout = getReceiveTimeout()__			return (timeout > 0 ? consumer.receive(timeout) : consumer.receive())__		}_		finally {_			JmsUtils.closeMessageConsumer(consumer)__			JmsUtils.closeMessageProducer(producer)__			if (responseQueue != null) {_				responseQueue.delete()__			}_		}_	};actually,execute,the,given,request,sending,the,invoker,request,message,to,the,specified,target,queue,and,waiting,for,a,corresponding,response,p,the,default,implementation,is,based,on,standard,jms,send,receive,using,a,link,javax,jms,temporary,queue,for,receiving,the,response,param,session,the,jms,session,to,use,param,queue,the,resolved,target,queue,to,send,to,param,request,message,the,jms,message,to,send,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure;protected,message,do,execute,request,session,session,queue,queue,message,request,message,throws,jmsexception,temporary,queue,response,queue,null,message,producer,producer,null,message,consumer,consumer,null,try,if,jms11available,response,queue,session,create,temporary,queue,producer,session,create,producer,queue,consumer,session,create,consumer,response,queue,request,message,set,jmsreply,to,response,queue,producer,send,request,message,else,queue,session,queue,session,queue,session,session,response,queue,queue,session,create,temporary,queue,queue,sender,sender,queue,session,create,sender,queue,producer,sender,consumer,queue,session,create,receiver,response,queue,request,message,set,jmsreply,to,response,queue,sender,send,request,message,long,timeout,get,receive,timeout,return,timeout,0,consumer,receive,timeout,consumer,receive,finally,jms,utils,close,message,consumer,consumer,jms,utils,close,message,producer,producer,if,response,queue,null,response,queue,delete
JmsInvokerClientInterceptor -> protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException;1405696891;Actually execute the given request, sending the invoker request message_to the specified target queue and waiting for a corresponding response._<p>The default implementation is based on standard JMS send/receive,_using a {@link javax.jms.TemporaryQueue} for receiving the response._@param session the JMS Session to use_@param queue the resolved target Queue to send to_@param requestMessage the JMS Message to send_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure;protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException {_		TemporaryQueue responseQueue = null__		MessageProducer producer = null__		MessageConsumer consumer = null__		try {_			responseQueue = session.createTemporaryQueue()__			producer = session.createProducer(queue)__			consumer = session.createConsumer(responseQueue)__			requestMessage.setJMSReplyTo(responseQueue)__			producer.send(requestMessage)__			long timeout = getReceiveTimeout()__			return (timeout > 0 ? consumer.receive(timeout) : consumer.receive())__		}_		finally {_			JmsUtils.closeMessageConsumer(consumer)__			JmsUtils.closeMessageProducer(producer)__			if (responseQueue != null) {_				responseQueue.delete()__			}_		}_	};actually,execute,the,given,request,sending,the,invoker,request,message,to,the,specified,target,queue,and,waiting,for,a,corresponding,response,p,the,default,implementation,is,based,on,standard,jms,send,receive,using,a,link,javax,jms,temporary,queue,for,receiving,the,response,param,session,the,jms,session,to,use,param,queue,the,resolved,target,queue,to,send,to,param,request,message,the,jms,message,to,send,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure;protected,message,do,execute,request,session,session,queue,queue,message,request,message,throws,jmsexception,temporary,queue,response,queue,null,message,producer,producer,null,message,consumer,consumer,null,try,response,queue,session,create,temporary,queue,producer,session,create,producer,queue,consumer,session,create,consumer,response,queue,request,message,set,jmsreply,to,response,queue,producer,send,request,message,long,timeout,get,receive,timeout,return,timeout,0,consumer,receive,timeout,consumer,receive,finally,jms,utils,close,message,consumer,consumer,jms,utils,close,message,producer,producer,if,response,queue,null,response,queue,delete
JmsInvokerClientInterceptor -> protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException;1424362428;Actually execute the given request, sending the invoker request message_to the specified target queue and waiting for a corresponding response._<p>The default implementation is based on standard JMS send/receive,_using a {@link javax.jms.TemporaryQueue} for receiving the response._@param session the JMS Session to use_@param queue the resolved target Queue to send to_@param requestMessage the JMS Message to send_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure;protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException {_		TemporaryQueue responseQueue = null__		MessageProducer producer = null__		MessageConsumer consumer = null__		try {_			responseQueue = session.createTemporaryQueue()__			producer = session.createProducer(queue)__			consumer = session.createConsumer(responseQueue)__			requestMessage.setJMSReplyTo(responseQueue)__			producer.send(requestMessage)__			long timeout = getReceiveTimeout()__			return (timeout > 0 ? consumer.receive(timeout) : consumer.receive())__		}_		finally {_			JmsUtils.closeMessageConsumer(consumer)__			JmsUtils.closeMessageProducer(producer)__			if (responseQueue != null) {_				responseQueue.delete()__			}_		}_	};actually,execute,the,given,request,sending,the,invoker,request,message,to,the,specified,target,queue,and,waiting,for,a,corresponding,response,p,the,default,implementation,is,based,on,standard,jms,send,receive,using,a,link,javax,jms,temporary,queue,for,receiving,the,response,param,session,the,jms,session,to,use,param,queue,the,resolved,target,queue,to,send,to,param,request,message,the,jms,message,to,send,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure;protected,message,do,execute,request,session,session,queue,queue,message,request,message,throws,jmsexception,temporary,queue,response,queue,null,message,producer,producer,null,message,consumer,consumer,null,try,response,queue,session,create,temporary,queue,producer,session,create,producer,queue,consumer,session,create,consumer,response,queue,request,message,set,jmsreply,to,response,queue,producer,send,request,message,long,timeout,get,receive,timeout,return,timeout,0,consumer,receive,timeout,consumer,receive,finally,jms,utils,close,message,consumer,consumer,jms,utils,close,message,producer,producer,if,response,queue,null,response,queue,delete
JmsInvokerClientInterceptor -> protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException;1424380551;Actually execute the given request, sending the invoker request message_to the specified target queue and waiting for a corresponding response._<p>The default implementation is based on standard JMS send/receive,_using a {@link javax.jms.TemporaryQueue} for receiving the response._@param session the JMS Session to use_@param queue the resolved target Queue to send to_@param requestMessage the JMS Message to send_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure;protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException {_		TemporaryQueue responseQueue = null__		MessageProducer producer = null__		MessageConsumer consumer = null__		try {_			responseQueue = session.createTemporaryQueue()__			producer = session.createProducer(queue)__			consumer = session.createConsumer(responseQueue)__			requestMessage.setJMSReplyTo(responseQueue)__			producer.send(requestMessage)__			long timeout = getReceiveTimeout()__			return (timeout > 0 ? consumer.receive(timeout) : consumer.receive())__		}_		finally {_			JmsUtils.closeMessageConsumer(consumer)__			JmsUtils.closeMessageProducer(producer)__			if (responseQueue != null) {_				responseQueue.delete()__			}_		}_	};actually,execute,the,given,request,sending,the,invoker,request,message,to,the,specified,target,queue,and,waiting,for,a,corresponding,response,p,the,default,implementation,is,based,on,standard,jms,send,receive,using,a,link,javax,jms,temporary,queue,for,receiving,the,response,param,session,the,jms,session,to,use,param,queue,the,resolved,target,queue,to,send,to,param,request,message,the,jms,message,to,send,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure;protected,message,do,execute,request,session,session,queue,queue,message,request,message,throws,jmsexception,temporary,queue,response,queue,null,message,producer,producer,null,message,consumer,consumer,null,try,response,queue,session,create,temporary,queue,producer,session,create,producer,queue,consumer,session,create,consumer,response,queue,request,message,set,jmsreply,to,response,queue,producer,send,request,message,long,timeout,get,receive,timeout,return,timeout,0,consumer,receive,timeout,consumer,receive,finally,jms,utils,close,message,consumer,consumer,jms,utils,close,message,producer,producer,if,response,queue,null,response,queue,delete
JmsInvokerClientInterceptor -> protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException;1424380732;Actually execute the given request, sending the invoker request message_to the specified target queue and waiting for a corresponding response._<p>The default implementation is based on standard JMS send/receive,_using a {@link javax.jms.TemporaryQueue} for receiving the response._@param session the JMS Session to use_@param queue the resolved target Queue to send to_@param requestMessage the JMS Message to send_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure;protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException {_		TemporaryQueue responseQueue = null__		MessageProducer producer = null__		MessageConsumer consumer = null__		try {_			responseQueue = session.createTemporaryQueue()__			producer = session.createProducer(queue)__			consumer = session.createConsumer(responseQueue)__			requestMessage.setJMSReplyTo(responseQueue)__			producer.send(requestMessage)__			long timeout = getReceiveTimeout()__			return (timeout > 0 ? consumer.receive(timeout) : consumer.receive())__		}_		finally {_			JmsUtils.closeMessageConsumer(consumer)__			JmsUtils.closeMessageProducer(producer)__			if (responseQueue != null) {_				responseQueue.delete()__			}_		}_	};actually,execute,the,given,request,sending,the,invoker,request,message,to,the,specified,target,queue,and,waiting,for,a,corresponding,response,p,the,default,implementation,is,based,on,standard,jms,send,receive,using,a,link,javax,jms,temporary,queue,for,receiving,the,response,param,session,the,jms,session,to,use,param,queue,the,resolved,target,queue,to,send,to,param,request,message,the,jms,message,to,send,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure;protected,message,do,execute,request,session,session,queue,queue,message,request,message,throws,jmsexception,temporary,queue,response,queue,null,message,producer,producer,null,message,consumer,consumer,null,try,response,queue,session,create,temporary,queue,producer,session,create,producer,queue,consumer,session,create,consumer,response,queue,request,message,set,jmsreply,to,response,queue,producer,send,request,message,long,timeout,get,receive,timeout,return,timeout,0,consumer,receive,timeout,consumer,receive,finally,jms,utils,close,message,consumer,consumer,jms,utils,close,message,producer,producer,if,response,queue,null,response,queue,delete
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException;1328020251;Callback that is invoked by <code>extractInvocationResult</code>_when it encounters an invalid response message._<p>The default implementation throws a MessageFormatException._@param responseMessage the invalid response message_@return an alternative invocation result that should be_returned to the caller (if desired)_@throws JMSException if the invalid response should lead_to an infrastructure exception propagated to the caller_@see #extractInvocationResult;protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException {_		throw new MessageFormatException("Invalid response message: " + responseMessage)__	};callback,that,is,invoked,by,code,extract,invocation,result,code,when,it,encounters,an,invalid,response,message,p,the,default,implementation,throws,a,message,format,exception,param,response,message,the,invalid,response,message,return,an,alternative,invocation,result,that,should,be,returned,to,the,caller,if,desired,throws,jmsexception,if,the,invalid,response,should,lead,to,an,infrastructure,exception,propagated,to,the,caller,see,extract,invocation,result;protected,remote,invocation,result,on,invalid,response,message,response,message,throws,jmsexception,throw,new,message,format,exception,invalid,response,message,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException;1356735495;Callback that is invoked by {@code extractInvocationResult}_when it encounters an invalid response message._<p>The default implementation throws a MessageFormatException._@param responseMessage the invalid response message_@return an alternative invocation result that should be_returned to the caller (if desired)_@throws JMSException if the invalid response should lead_to an infrastructure exception propagated to the caller_@see #extractInvocationResult;protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException {_		throw new MessageFormatException("Invalid response message: " + responseMessage)__	};callback,that,is,invoked,by,code,extract,invocation,result,when,it,encounters,an,invalid,response,message,p,the,default,implementation,throws,a,message,format,exception,param,response,message,the,invalid,response,message,return,an,alternative,invocation,result,that,should,be,returned,to,the,caller,if,desired,throws,jmsexception,if,the,invalid,response,should,lead,to,an,infrastructure,exception,propagated,to,the,caller,see,extract,invocation,result;protected,remote,invocation,result,on,invalid,response,message,response,message,throws,jmsexception,throw,new,message,format,exception,invalid,response,message,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException;1357119239;Callback that is invoked by {@code extractInvocationResult}_when it encounters an invalid response message._<p>The default implementation throws a MessageFormatException._@param responseMessage the invalid response message_@return an alternative invocation result that should be_returned to the caller (if desired)_@throws JMSException if the invalid response should lead_to an infrastructure exception propagated to the caller_@see #extractInvocationResult;protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException {_		throw new MessageFormatException("Invalid response message: " + responseMessage)__	};callback,that,is,invoked,by,code,extract,invocation,result,when,it,encounters,an,invalid,response,message,p,the,default,implementation,throws,a,message,format,exception,param,response,message,the,invalid,response,message,return,an,alternative,invocation,result,that,should,be,returned,to,the,caller,if,desired,throws,jmsexception,if,the,invalid,response,should,lead,to,an,infrastructure,exception,propagated,to,the,caller,see,extract,invocation,result;protected,remote,invocation,result,on,invalid,response,message,response,message,throws,jmsexception,throw,new,message,format,exception,invalid,response,message,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException;1368482696;Callback that is invoked by {@code extractInvocationResult}_when it encounters an invalid response message._<p>The default implementation throws a MessageFormatException._@param responseMessage the invalid response message_@return an alternative invocation result that should be_returned to the caller (if desired)_@throws JMSException if the invalid response should lead_to an infrastructure exception propagated to the caller_@see #extractInvocationResult;protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException {_		throw new MessageFormatException("Invalid response message: " + responseMessage)__	};callback,that,is,invoked,by,code,extract,invocation,result,when,it,encounters,an,invalid,response,message,p,the,default,implementation,throws,a,message,format,exception,param,response,message,the,invalid,response,message,return,an,alternative,invocation,result,that,should,be,returned,to,the,caller,if,desired,throws,jmsexception,if,the,invalid,response,should,lead,to,an,infrastructure,exception,propagated,to,the,caller,see,extract,invocation,result;protected,remote,invocation,result,on,invalid,response,message,response,message,throws,jmsexception,throw,new,message,format,exception,invalid,response,message,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException;1405696891;Callback that is invoked by {@code extractInvocationResult}_when it encounters an invalid response message._<p>The default implementation throws a MessageFormatException._@param responseMessage the invalid response message_@return an alternative invocation result that should be_returned to the caller (if desired)_@throws JMSException if the invalid response should lead_to an infrastructure exception propagated to the caller_@see #extractInvocationResult;protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException {_		throw new MessageFormatException("Invalid response message: " + responseMessage)__	};callback,that,is,invoked,by,code,extract,invocation,result,when,it,encounters,an,invalid,response,message,p,the,default,implementation,throws,a,message,format,exception,param,response,message,the,invalid,response,message,return,an,alternative,invocation,result,that,should,be,returned,to,the,caller,if,desired,throws,jmsexception,if,the,invalid,response,should,lead,to,an,infrastructure,exception,propagated,to,the,caller,see,extract,invocation,result;protected,remote,invocation,result,on,invalid,response,message,response,message,throws,jmsexception,throw,new,message,format,exception,invalid,response,message,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException;1424362428;Callback that is invoked by {@code extractInvocationResult}_when it encounters an invalid response message._<p>The default implementation throws a MessageFormatException._@param responseMessage the invalid response message_@return an alternative invocation result that should be_returned to the caller (if desired)_@throws JMSException if the invalid response should lead_to an infrastructure exception propagated to the caller_@see #extractInvocationResult;protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException {_		throw new MessageFormatException("Invalid response message: " + responseMessage)__	};callback,that,is,invoked,by,code,extract,invocation,result,when,it,encounters,an,invalid,response,message,p,the,default,implementation,throws,a,message,format,exception,param,response,message,the,invalid,response,message,return,an,alternative,invocation,result,that,should,be,returned,to,the,caller,if,desired,throws,jmsexception,if,the,invalid,response,should,lead,to,an,infrastructure,exception,propagated,to,the,caller,see,extract,invocation,result;protected,remote,invocation,result,on,invalid,response,message,response,message,throws,jmsexception,throw,new,message,format,exception,invalid,response,message,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException;1424380551;Callback that is invoked by {@link #extractInvocationResult} when_it encounters an invalid response message._<p>The default implementation throws a {@link MessageFormatException}._@param responseMessage the invalid response message_@return an alternative invocation result that should be returned to_the caller (if desired)_@throws JMSException if the invalid response should lead to an_infrastructure exception propagated to the caller_@see #extractInvocationResult;protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException {_		throw new MessageFormatException("Invalid response message: " + responseMessage)__	};callback,that,is,invoked,by,link,extract,invocation,result,when,it,encounters,an,invalid,response,message,p,the,default,implementation,throws,a,link,message,format,exception,param,response,message,the,invalid,response,message,return,an,alternative,invocation,result,that,should,be,returned,to,the,caller,if,desired,throws,jmsexception,if,the,invalid,response,should,lead,to,an,infrastructure,exception,propagated,to,the,caller,see,extract,invocation,result;protected,remote,invocation,result,on,invalid,response,message,response,message,throws,jmsexception,throw,new,message,format,exception,invalid,response,message,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException;1424380732;Callback that is invoked by {@link #extractInvocationResult} when_it encounters an invalid response message._<p>The default implementation throws a {@link MessageFormatException}._@param responseMessage the invalid response message_@return an alternative invocation result that should be returned to_the caller (if desired)_@throws JMSException if the invalid response should lead to an_infrastructure exception propagated to the caller_@see #extractInvocationResult;protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException {_		throw new MessageFormatException("Invalid response message: " + responseMessage)__	};callback,that,is,invoked,by,link,extract,invocation,result,when,it,encounters,an,invalid,response,message,p,the,default,implementation,throws,a,link,message,format,exception,param,response,message,the,invalid,response,message,return,an,alternative,invocation,result,that,should,be,returned,to,the,caller,if,desired,throws,jmsexception,if,the,invalid,response,should,lead,to,an,infrastructure,exception,propagated,to,the,caller,see,extract,invocation,result;protected,remote,invocation,result,on,invalid,response,message,response,message,throws,jmsexception,throw,new,message,format,exception,invalid,response,message,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException;1496837955;Callback that is invoked by {@link #extractInvocationResult} when_it encounters an invalid response message._<p>The default implementation throws a {@link MessageFormatException}._@param responseMessage the invalid response message_@return an alternative invocation result that should be returned to_the caller (if desired)_@throws JMSException if the invalid response should lead to an_infrastructure exception propagated to the caller_@see #extractInvocationResult;protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException {_		throw new MessageFormatException("Invalid response message: " + responseMessage)__	};callback,that,is,invoked,by,link,extract,invocation,result,when,it,encounters,an,invalid,response,message,p,the,default,implementation,throws,a,link,message,format,exception,param,response,message,the,invalid,response,message,return,an,alternative,invocation,result,that,should,be,returned,to,the,caller,if,desired,throws,jmsexception,if,the,invalid,response,should,lead,to,an,infrastructure,exception,propagated,to,the,caller,see,extract,invocation,result;protected,remote,invocation,result,on,invalid,response,message,response,message,throws,jmsexception,throw,new,message,format,exception,invalid,response,message,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException;1498780456;Callback that is invoked by {@link #extractInvocationResult} when_it encounters an invalid response message._<p>The default implementation throws a {@link MessageFormatException}._@param responseMessage the invalid response message_@return an alternative invocation result that should be returned to_the caller (if desired)_@throws JMSException if the invalid response should lead to an_infrastructure exception propagated to the caller_@see #extractInvocationResult;protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException {_		throw new MessageFormatException("Invalid response message: " + responseMessage)__	};callback,that,is,invoked,by,link,extract,invocation,result,when,it,encounters,an,invalid,response,message,p,the,default,implementation,throws,a,link,message,format,exception,param,response,message,the,invalid,response,message,return,an,alternative,invocation,result,that,should,be,returned,to,the,caller,if,desired,throws,jmsexception,if,the,invalid,response,should,lead,to,an,infrastructure,exception,propagated,to,the,caller,see,extract,invocation,result;protected,remote,invocation,result,on,invalid,response,message,response,message,throws,jmsexception,throw,new,message,format,exception,invalid,response,message,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException;1500416137;Callback that is invoked by {@link #extractInvocationResult} when_it encounters an invalid response message._<p>The default implementation throws a {@link MessageFormatException}._@param responseMessage the invalid response message_@return an alternative invocation result that should be returned to_the caller (if desired)_@throws JMSException if the invalid response should lead to an_infrastructure exception propagated to the caller_@see #extractInvocationResult;protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException {_		throw new MessageFormatException("Invalid response message: " + responseMessage)__	};callback,that,is,invoked,by,link,extract,invocation,result,when,it,encounters,an,invalid,response,message,p,the,default,implementation,throws,a,link,message,format,exception,param,response,message,the,invalid,response,message,return,an,alternative,invocation,result,that,should,be,returned,to,the,caller,if,desired,throws,jmsexception,if,the,invalid,response,should,lead,to,an,infrastructure,exception,propagated,to,the,caller,see,extract,invocation,result;protected,remote,invocation,result,on,invalid,response,message,response,message,throws,jmsexception,throw,new,message,format,exception,invalid,response,message,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException;1500448076;Callback that is invoked by {@link #extractInvocationResult} when_it encounters an invalid response message._<p>The default implementation throws a {@link MessageFormatException}._@param responseMessage the invalid response message_@return an alternative invocation result that should be returned to_the caller (if desired)_@throws JMSException if the invalid response should lead to an_infrastructure exception propagated to the caller_@see #extractInvocationResult;protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException {_		throw new MessageFormatException("Invalid response message: " + responseMessage)__	};callback,that,is,invoked,by,link,extract,invocation,result,when,it,encounters,an,invalid,response,message,p,the,default,implementation,throws,a,link,message,format,exception,param,response,message,the,invalid,response,message,return,an,alternative,invocation,result,that,should,be,returned,to,the,caller,if,desired,throws,jmsexception,if,the,invalid,response,should,lead,to,an,infrastructure,exception,propagated,to,the,caller,see,extract,invocation,result;protected,remote,invocation,result,on,invalid,response,message,response,message,throws,jmsexception,throw,new,message,format,exception,invalid,response,message,response,message
JmsInvokerClientInterceptor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1328020251;Set the QueueConnectionFactory to use for obtaining JMS QueueConnections.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsInvokerClientInterceptor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1356735495;Set the QueueConnectionFactory to use for obtaining JMS QueueConnections.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsInvokerClientInterceptor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1357119239;Set the QueueConnectionFactory to use for obtaining JMS QueueConnections.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsInvokerClientInterceptor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1368482696;Set the QueueConnectionFactory to use for obtaining JMS QueueConnections.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsInvokerClientInterceptor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1405696891;Set the QueueConnectionFactory to use for obtaining JMS QueueConnections.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsInvokerClientInterceptor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1424362428;Set the QueueConnectionFactory to use for obtaining JMS QueueConnections.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsInvokerClientInterceptor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1424380551;Set the QueueConnectionFactory to use for obtaining JMS QueueConnections.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsInvokerClientInterceptor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1424380732;Set the QueueConnectionFactory to use for obtaining JMS QueueConnections.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsInvokerClientInterceptor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1496837955;Set the QueueConnectionFactory to use for obtaining JMS QueueConnections.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsInvokerClientInterceptor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1498780456;Set the QueueConnectionFactory to use for obtaining JMS QueueConnections.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsInvokerClientInterceptor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1500416137;Set the QueueConnectionFactory to use for obtaining JMS QueueConnections.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsInvokerClientInterceptor -> protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException;1328020251;Extract the invocation result from the response message._<p>The default implementation expects a JMS ObjectMessage carrying_a RemoteInvocationResult object. If an invalid response message is_encountered, the <code>onInvalidResponse</code> callback gets invoked._@param responseMessage the response message_@return the invocation result_@throws JMSException is thrown if a JMS exception occurs_@see #onInvalidResponse;protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException {_		Object content = this.messageConverter.fromMessage(responseMessage)__		if (content instanceof RemoteInvocationResult) {_			return (RemoteInvocationResult) content__		}_		return onInvalidResponse(responseMessage)__	};extract,the,invocation,result,from,the,response,message,p,the,default,implementation,expects,a,jms,object,message,carrying,a,remote,invocation,result,object,if,an,invalid,response,message,is,encountered,the,code,on,invalid,response,code,callback,gets,invoked,param,response,message,the,response,message,return,the,invocation,result,throws,jmsexception,is,thrown,if,a,jms,exception,occurs,see,on,invalid,response;protected,remote,invocation,result,extract,invocation,result,message,response,message,throws,jmsexception,object,content,this,message,converter,from,message,response,message,if,content,instanceof,remote,invocation,result,return,remote,invocation,result,content,return,on,invalid,response,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException;1356735495;Extract the invocation result from the response message._<p>The default implementation expects a JMS ObjectMessage carrying_a RemoteInvocationResult object. If an invalid response message is_encountered, the {@code onInvalidResponse} callback gets invoked._@param responseMessage the response message_@return the invocation result_@throws JMSException is thrown if a JMS exception occurs_@see #onInvalidResponse;protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException {_		Object content = this.messageConverter.fromMessage(responseMessage)__		if (content instanceof RemoteInvocationResult) {_			return (RemoteInvocationResult) content__		}_		return onInvalidResponse(responseMessage)__	};extract,the,invocation,result,from,the,response,message,p,the,default,implementation,expects,a,jms,object,message,carrying,a,remote,invocation,result,object,if,an,invalid,response,message,is,encountered,the,code,on,invalid,response,callback,gets,invoked,param,response,message,the,response,message,return,the,invocation,result,throws,jmsexception,is,thrown,if,a,jms,exception,occurs,see,on,invalid,response;protected,remote,invocation,result,extract,invocation,result,message,response,message,throws,jmsexception,object,content,this,message,converter,from,message,response,message,if,content,instanceof,remote,invocation,result,return,remote,invocation,result,content,return,on,invalid,response,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException;1357119239;Extract the invocation result from the response message._<p>The default implementation expects a JMS ObjectMessage carrying_a RemoteInvocationResult object. If an invalid response message is_encountered, the {@code onInvalidResponse} callback gets invoked._@param responseMessage the response message_@return the invocation result_@throws JMSException is thrown if a JMS exception occurs_@see #onInvalidResponse;protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException {_		Object content = this.messageConverter.fromMessage(responseMessage)__		if (content instanceof RemoteInvocationResult) {_			return (RemoteInvocationResult) content__		}_		return onInvalidResponse(responseMessage)__	};extract,the,invocation,result,from,the,response,message,p,the,default,implementation,expects,a,jms,object,message,carrying,a,remote,invocation,result,object,if,an,invalid,response,message,is,encountered,the,code,on,invalid,response,callback,gets,invoked,param,response,message,the,response,message,return,the,invocation,result,throws,jmsexception,is,thrown,if,a,jms,exception,occurs,see,on,invalid,response;protected,remote,invocation,result,extract,invocation,result,message,response,message,throws,jmsexception,object,content,this,message,converter,from,message,response,message,if,content,instanceof,remote,invocation,result,return,remote,invocation,result,content,return,on,invalid,response,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException;1368482696;Extract the invocation result from the response message._<p>The default implementation expects a JMS ObjectMessage carrying_a RemoteInvocationResult object. If an invalid response message is_encountered, the {@code onInvalidResponse} callback gets invoked._@param responseMessage the response message_@return the invocation result_@throws JMSException is thrown if a JMS exception occurs_@see #onInvalidResponse;protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException {_		Object content = this.messageConverter.fromMessage(responseMessage)__		if (content instanceof RemoteInvocationResult) {_			return (RemoteInvocationResult) content__		}_		return onInvalidResponse(responseMessage)__	};extract,the,invocation,result,from,the,response,message,p,the,default,implementation,expects,a,jms,object,message,carrying,a,remote,invocation,result,object,if,an,invalid,response,message,is,encountered,the,code,on,invalid,response,callback,gets,invoked,param,response,message,the,response,message,return,the,invocation,result,throws,jmsexception,is,thrown,if,a,jms,exception,occurs,see,on,invalid,response;protected,remote,invocation,result,extract,invocation,result,message,response,message,throws,jmsexception,object,content,this,message,converter,from,message,response,message,if,content,instanceof,remote,invocation,result,return,remote,invocation,result,content,return,on,invalid,response,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException;1405696891;Extract the invocation result from the response message._<p>The default implementation expects a JMS ObjectMessage carrying_a RemoteInvocationResult object. If an invalid response message is_encountered, the {@code onInvalidResponse} callback gets invoked._@param responseMessage the response message_@return the invocation result_@throws JMSException is thrown if a JMS exception occurs_@see #onInvalidResponse;protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException {_		Object content = this.messageConverter.fromMessage(responseMessage)__		if (content instanceof RemoteInvocationResult) {_			return (RemoteInvocationResult) content__		}_		return onInvalidResponse(responseMessage)__	};extract,the,invocation,result,from,the,response,message,p,the,default,implementation,expects,a,jms,object,message,carrying,a,remote,invocation,result,object,if,an,invalid,response,message,is,encountered,the,code,on,invalid,response,callback,gets,invoked,param,response,message,the,response,message,return,the,invocation,result,throws,jmsexception,is,thrown,if,a,jms,exception,occurs,see,on,invalid,response;protected,remote,invocation,result,extract,invocation,result,message,response,message,throws,jmsexception,object,content,this,message,converter,from,message,response,message,if,content,instanceof,remote,invocation,result,return,remote,invocation,result,content,return,on,invalid,response,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException;1424362428;Extract the invocation result from the response message._<p>The default implementation expects a JMS ObjectMessage carrying_a RemoteInvocationResult object. If an invalid response message is_encountered, the {@code onInvalidResponse} callback gets invoked._@param responseMessage the response message_@return the invocation result_@throws JMSException is thrown if a JMS exception occurs_@see #onInvalidResponse;protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException {_		Object content = this.messageConverter.fromMessage(responseMessage)__		if (content instanceof RemoteInvocationResult) {_			return (RemoteInvocationResult) content__		}_		return onInvalidResponse(responseMessage)__	};extract,the,invocation,result,from,the,response,message,p,the,default,implementation,expects,a,jms,object,message,carrying,a,remote,invocation,result,object,if,an,invalid,response,message,is,encountered,the,code,on,invalid,response,callback,gets,invoked,param,response,message,the,response,message,return,the,invocation,result,throws,jmsexception,is,thrown,if,a,jms,exception,occurs,see,on,invalid,response;protected,remote,invocation,result,extract,invocation,result,message,response,message,throws,jmsexception,object,content,this,message,converter,from,message,response,message,if,content,instanceof,remote,invocation,result,return,remote,invocation,result,content,return,on,invalid,response,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException;1424380551;Extract the invocation result from the response message._<p>The default implementation expects a JMS {@link javax.jms.ObjectMessage}_carrying a {@link RemoteInvocationResult} object. If an invalid response_message is encountered, the {@code onInvalidResponse} callback gets invoked._@param responseMessage the response message_@return the invocation result_@throws JMSException is thrown if a JMS exception occurs_@see #onInvalidResponse;protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException {_		Object content = this.messageConverter.fromMessage(responseMessage)__		if (content instanceof RemoteInvocationResult) {_			return (RemoteInvocationResult) content__		}_		return onInvalidResponse(responseMessage)__	};extract,the,invocation,result,from,the,response,message,p,the,default,implementation,expects,a,jms,link,javax,jms,object,message,carrying,a,link,remote,invocation,result,object,if,an,invalid,response,message,is,encountered,the,code,on,invalid,response,callback,gets,invoked,param,response,message,the,response,message,return,the,invocation,result,throws,jmsexception,is,thrown,if,a,jms,exception,occurs,see,on,invalid,response;protected,remote,invocation,result,extract,invocation,result,message,response,message,throws,jmsexception,object,content,this,message,converter,from,message,response,message,if,content,instanceof,remote,invocation,result,return,remote,invocation,result,content,return,on,invalid,response,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException;1424380732;Extract the invocation result from the response message._<p>The default implementation expects a JMS {@link javax.jms.ObjectMessage}_carrying a {@link RemoteInvocationResult} object. If an invalid response_message is encountered, the {@code onInvalidResponse} callback gets invoked._@param responseMessage the response message_@return the invocation result_@throws JMSException is thrown if a JMS exception occurs_@see #onInvalidResponse;protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException {_		Object content = this.messageConverter.fromMessage(responseMessage)__		if (content instanceof RemoteInvocationResult) {_			return (RemoteInvocationResult) content__		}_		return onInvalidResponse(responseMessage)__	};extract,the,invocation,result,from,the,response,message,p,the,default,implementation,expects,a,jms,link,javax,jms,object,message,carrying,a,link,remote,invocation,result,object,if,an,invalid,response,message,is,encountered,the,code,on,invalid,response,callback,gets,invoked,param,response,message,the,response,message,return,the,invocation,result,throws,jmsexception,is,thrown,if,a,jms,exception,occurs,see,on,invalid,response;protected,remote,invocation,result,extract,invocation,result,message,response,message,throws,jmsexception,object,content,this,message,converter,from,message,response,message,if,content,instanceof,remote,invocation,result,return,remote,invocation,result,content,return,on,invalid,response,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException;1496837955;Extract the invocation result from the response message._<p>The default implementation expects a JMS {@link javax.jms.ObjectMessage}_carrying a {@link RemoteInvocationResult} object. If an invalid response_message is encountered, the {@code onInvalidResponse} callback gets invoked._@param responseMessage the response message_@return the invocation result_@throws JMSException is thrown if a JMS exception occurs_@see #onInvalidResponse;protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException {_		Object content = this.messageConverter.fromMessage(responseMessage)__		if (content instanceof RemoteInvocationResult) {_			return (RemoteInvocationResult) content__		}_		return onInvalidResponse(responseMessage)__	};extract,the,invocation,result,from,the,response,message,p,the,default,implementation,expects,a,jms,link,javax,jms,object,message,carrying,a,link,remote,invocation,result,object,if,an,invalid,response,message,is,encountered,the,code,on,invalid,response,callback,gets,invoked,param,response,message,the,response,message,return,the,invocation,result,throws,jmsexception,is,thrown,if,a,jms,exception,occurs,see,on,invalid,response;protected,remote,invocation,result,extract,invocation,result,message,response,message,throws,jmsexception,object,content,this,message,converter,from,message,response,message,if,content,instanceof,remote,invocation,result,return,remote,invocation,result,content,return,on,invalid,response,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException;1498780456;Extract the invocation result from the response message._<p>The default implementation expects a JMS {@link javax.jms.ObjectMessage}_carrying a {@link RemoteInvocationResult} object. If an invalid response_message is encountered, the {@code onInvalidResponse} callback gets invoked._@param responseMessage the response message_@return the invocation result_@throws JMSException is thrown if a JMS exception occurs_@see #onInvalidResponse;protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException {_		Object content = this.messageConverter.fromMessage(responseMessage)__		if (content instanceof RemoteInvocationResult) {_			return (RemoteInvocationResult) content__		}_		return onInvalidResponse(responseMessage)__	};extract,the,invocation,result,from,the,response,message,p,the,default,implementation,expects,a,jms,link,javax,jms,object,message,carrying,a,link,remote,invocation,result,object,if,an,invalid,response,message,is,encountered,the,code,on,invalid,response,callback,gets,invoked,param,response,message,the,response,message,return,the,invocation,result,throws,jmsexception,is,thrown,if,a,jms,exception,occurs,see,on,invalid,response;protected,remote,invocation,result,extract,invocation,result,message,response,message,throws,jmsexception,object,content,this,message,converter,from,message,response,message,if,content,instanceof,remote,invocation,result,return,remote,invocation,result,content,return,on,invalid,response,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException;1500416137;Extract the invocation result from the response message._<p>The default implementation expects a JMS {@link javax.jms.ObjectMessage}_carrying a {@link RemoteInvocationResult} object. If an invalid response_message is encountered, the {@code onInvalidResponse} callback gets invoked._@param responseMessage the response message_@return the invocation result_@throws JMSException is thrown if a JMS exception occurs_@see #onInvalidResponse;protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException {_		Object content = this.messageConverter.fromMessage(responseMessage)__		if (content instanceof RemoteInvocationResult) {_			return (RemoteInvocationResult) content__		}_		return onInvalidResponse(responseMessage)__	};extract,the,invocation,result,from,the,response,message,p,the,default,implementation,expects,a,jms,link,javax,jms,object,message,carrying,a,link,remote,invocation,result,object,if,an,invalid,response,message,is,encountered,the,code,on,invalid,response,callback,gets,invoked,param,response,message,the,response,message,return,the,invocation,result,throws,jmsexception,is,thrown,if,a,jms,exception,occurs,see,on,invalid,response;protected,remote,invocation,result,extract,invocation,result,message,response,message,throws,jmsexception,object,content,this,message,converter,from,message,response,message,if,content,instanceof,remote,invocation,result,return,remote,invocation,result,content,return,on,invalid,response,response,message
JmsInvokerClientInterceptor -> protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException;1500448076;Extract the invocation result from the response message._<p>The default implementation expects a JMS {@link javax.jms.ObjectMessage}_carrying a {@link RemoteInvocationResult} object. If an invalid response_message is encountered, the {@code onInvalidResponse} callback gets invoked._@param responseMessage the response message_@return the invocation result_@throws JMSException is thrown if a JMS exception occurs_@see #onInvalidResponse;protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException {_		Object content = this.messageConverter.fromMessage(responseMessage)__		if (content instanceof RemoteInvocationResult) {_			return (RemoteInvocationResult) content__		}_		return onInvalidResponse(responseMessage)__	};extract,the,invocation,result,from,the,response,message,p,the,default,implementation,expects,a,jms,link,javax,jms,object,message,carrying,a,link,remote,invocation,result,object,if,an,invalid,response,message,is,encountered,the,code,on,invalid,response,callback,gets,invoked,param,response,message,the,response,message,return,the,invocation,result,throws,jmsexception,is,thrown,if,a,jms,exception,occurs,see,on,invalid,response;protected,remote,invocation,result,extract,invocation,result,message,response,message,throws,jmsexception,object,content,this,message,converter,from,message,response,message,if,content,instanceof,remote,invocation,result,return,remote,invocation,result,content,return,on,invalid,response,response,message
JmsInvokerClientInterceptor -> @Nullable 	protected ConnectionFactory getConnectionFactory();1496837955;Return the QueueConnectionFactory to use for obtaining JMS QueueConnections.;@Nullable_	protected ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;nullable,protected,connection,factory,get,connection,factory,return,this,connection,factory
JmsInvokerClientInterceptor -> @Nullable 	protected ConnectionFactory getConnectionFactory();1498780456;Return the QueueConnectionFactory to use for obtaining JMS QueueConnections.;@Nullable_	protected ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;nullable,protected,connection,factory,get,connection,factory,return,this,connection,factory
JmsInvokerClientInterceptor -> @Nullable 	protected ConnectionFactory getConnectionFactory();1500416137;Return the QueueConnectionFactory to use for obtaining JMS QueueConnections.;@Nullable_	protected ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;nullable,protected,connection,factory,get,connection,factory,return,this,connection,factory
JmsInvokerClientInterceptor -> @Nullable 	protected ConnectionFactory getConnectionFactory();1500448076;Return the QueueConnectionFactory to use for obtaining JMS QueueConnections.;@Nullable_	protected ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;nullable,protected,connection,factory,get,connection,factory,return,this,connection,factory
JmsInvokerClientInterceptor -> public void setMessageConverter(MessageConverter messageConverter);1328020251;Specify the MessageConverter to use for turning_{@link org.springframework.remoting.support.RemoteInvocation}_objects into request messages, as well as response messages into_{@link org.springframework.remoting.support.RemoteInvocationResult} objects._<p>Default is a {@link org.springframework.jms.support.converter.SimpleMessageConverter},_using a standard JMS {@link javax.jms.ObjectMessage} for each invocation /_invocation result object._<p>Custom implementations may generally adapt Serializables into_special kinds of messages, or might be specifically tailored for_translating RemoteInvocation(Result)s into specific kinds of messages.;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = (messageConverter != null ? messageConverter : new SimpleMessageConverter())__	};specify,the,message,converter,to,use,for,turning,link,org,springframework,remoting,support,remote,invocation,objects,into,request,messages,as,well,as,response,messages,into,link,org,springframework,remoting,support,remote,invocation,result,objects,p,default,is,a,link,org,springframework,jms,support,converter,simple,message,converter,using,a,standard,jms,link,javax,jms,object,message,for,each,invocation,invocation,result,object,p,custom,implementations,may,generally,adapt,serializables,into,special,kinds,of,messages,or,might,be,specifically,tailored,for,translating,remote,invocation,result,s,into,specific,kinds,of,messages;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter,null,message,converter,new,simple,message,converter
JmsInvokerClientInterceptor -> public void setMessageConverter(MessageConverter messageConverter);1356735495;Specify the MessageConverter to use for turning_{@link org.springframework.remoting.support.RemoteInvocation}_objects into request messages, as well as response messages into_{@link org.springframework.remoting.support.RemoteInvocationResult} objects._<p>Default is a {@link org.springframework.jms.support.converter.SimpleMessageConverter},_using a standard JMS {@link javax.jms.ObjectMessage} for each invocation /_invocation result object._<p>Custom implementations may generally adapt Serializables into_special kinds of messages, or might be specifically tailored for_translating RemoteInvocation(Result)s into specific kinds of messages.;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = (messageConverter != null ? messageConverter : new SimpleMessageConverter())__	};specify,the,message,converter,to,use,for,turning,link,org,springframework,remoting,support,remote,invocation,objects,into,request,messages,as,well,as,response,messages,into,link,org,springframework,remoting,support,remote,invocation,result,objects,p,default,is,a,link,org,springframework,jms,support,converter,simple,message,converter,using,a,standard,jms,link,javax,jms,object,message,for,each,invocation,invocation,result,object,p,custom,implementations,may,generally,adapt,serializables,into,special,kinds,of,messages,or,might,be,specifically,tailored,for,translating,remote,invocation,result,s,into,specific,kinds,of,messages;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter,null,message,converter,new,simple,message,converter
JmsInvokerClientInterceptor -> public void setMessageConverter(MessageConverter messageConverter);1357119239;Specify the MessageConverter to use for turning_{@link org.springframework.remoting.support.RemoteInvocation}_objects into request messages, as well as response messages into_{@link org.springframework.remoting.support.RemoteInvocationResult} objects._<p>Default is a {@link org.springframework.jms.support.converter.SimpleMessageConverter},_using a standard JMS {@link javax.jms.ObjectMessage} for each invocation /_invocation result object._<p>Custom implementations may generally adapt Serializables into_special kinds of messages, or might be specifically tailored for_translating RemoteInvocation(Result)s into specific kinds of messages.;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = (messageConverter != null ? messageConverter : new SimpleMessageConverter())__	};specify,the,message,converter,to,use,for,turning,link,org,springframework,remoting,support,remote,invocation,objects,into,request,messages,as,well,as,response,messages,into,link,org,springframework,remoting,support,remote,invocation,result,objects,p,default,is,a,link,org,springframework,jms,support,converter,simple,message,converter,using,a,standard,jms,link,javax,jms,object,message,for,each,invocation,invocation,result,object,p,custom,implementations,may,generally,adapt,serializables,into,special,kinds,of,messages,or,might,be,specifically,tailored,for,translating,remote,invocation,result,s,into,specific,kinds,of,messages;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter,null,message,converter,new,simple,message,converter
JmsInvokerClientInterceptor -> public void setMessageConverter(MessageConverter messageConverter);1368482696;Specify the MessageConverter to use for turning_{@link org.springframework.remoting.support.RemoteInvocation}_objects into request messages, as well as response messages into_{@link org.springframework.remoting.support.RemoteInvocationResult} objects._<p>Default is a {@link org.springframework.jms.support.converter.SimpleMessageConverter},_using a standard JMS {@link javax.jms.ObjectMessage} for each invocation /_invocation result object._<p>Custom implementations may generally adapt Serializables into_special kinds of messages, or might be specifically tailored for_translating RemoteInvocation(Result)s into specific kinds of messages.;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = (messageConverter != null ? messageConverter : new SimpleMessageConverter())__	};specify,the,message,converter,to,use,for,turning,link,org,springframework,remoting,support,remote,invocation,objects,into,request,messages,as,well,as,response,messages,into,link,org,springframework,remoting,support,remote,invocation,result,objects,p,default,is,a,link,org,springframework,jms,support,converter,simple,message,converter,using,a,standard,jms,link,javax,jms,object,message,for,each,invocation,invocation,result,object,p,custom,implementations,may,generally,adapt,serializables,into,special,kinds,of,messages,or,might,be,specifically,tailored,for,translating,remote,invocation,result,s,into,specific,kinds,of,messages;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter,null,message,converter,new,simple,message,converter
JmsInvokerClientInterceptor -> public void setMessageConverter(MessageConverter messageConverter);1405696891;Specify the MessageConverter to use for turning_{@link org.springframework.remoting.support.RemoteInvocation}_objects into request messages, as well as response messages into_{@link org.springframework.remoting.support.RemoteInvocationResult} objects._<p>Default is a {@link org.springframework.jms.support.converter.SimpleMessageConverter},_using a standard JMS {@link javax.jms.ObjectMessage} for each invocation /_invocation result object._<p>Custom implementations may generally adapt Serializables into_special kinds of messages, or might be specifically tailored for_translating RemoteInvocation(Result)s into specific kinds of messages.;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = (messageConverter != null ? messageConverter : new SimpleMessageConverter())__	};specify,the,message,converter,to,use,for,turning,link,org,springframework,remoting,support,remote,invocation,objects,into,request,messages,as,well,as,response,messages,into,link,org,springframework,remoting,support,remote,invocation,result,objects,p,default,is,a,link,org,springframework,jms,support,converter,simple,message,converter,using,a,standard,jms,link,javax,jms,object,message,for,each,invocation,invocation,result,object,p,custom,implementations,may,generally,adapt,serializables,into,special,kinds,of,messages,or,might,be,specifically,tailored,for,translating,remote,invocation,result,s,into,specific,kinds,of,messages;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter,null,message,converter,new,simple,message,converter
JmsInvokerClientInterceptor -> public void setMessageConverter(MessageConverter messageConverter);1424362428;Specify the MessageConverter to use for turning_{@link org.springframework.remoting.support.RemoteInvocation}_objects into request messages, as well as response messages into_{@link org.springframework.remoting.support.RemoteInvocationResult} objects._<p>Default is a {@link org.springframework.jms.support.converter.SimpleMessageConverter},_using a standard JMS {@link javax.jms.ObjectMessage} for each invocation /_invocation result object._<p>Custom implementations may generally adapt Serializables into_special kinds of messages, or might be specifically tailored for_translating RemoteInvocation(Result)s into specific kinds of messages.;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = (messageConverter != null ? messageConverter : new SimpleMessageConverter())__	};specify,the,message,converter,to,use,for,turning,link,org,springframework,remoting,support,remote,invocation,objects,into,request,messages,as,well,as,response,messages,into,link,org,springframework,remoting,support,remote,invocation,result,objects,p,default,is,a,link,org,springframework,jms,support,converter,simple,message,converter,using,a,standard,jms,link,javax,jms,object,message,for,each,invocation,invocation,result,object,p,custom,implementations,may,generally,adapt,serializables,into,special,kinds,of,messages,or,might,be,specifically,tailored,for,translating,remote,invocation,result,s,into,specific,kinds,of,messages;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter,null,message,converter,new,simple,message,converter
JmsInvokerClientInterceptor -> public void setMessageConverter(MessageConverter messageConverter);1424380551;Specify the {@link MessageConverter} to use for turning_{@link org.springframework.remoting.support.RemoteInvocation}_objects into request messages, as well as response messages into_{@link org.springframework.remoting.support.RemoteInvocationResult} objects._<p>Default is a {@link SimpleMessageConverter}, using a standard JMS_{@link javax.jms.ObjectMessage} for each invocation / invocation result_object._<p>Custom implementations may generally adapt {@link java.io.Serializable}_objects into special kinds of messages, or might be specifically tailored for_translating {@code RemoteInvocation(Result)s} into specific kinds of messages.;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = (messageConverter != null ? messageConverter : new SimpleMessageConverter())__	};specify,the,link,message,converter,to,use,for,turning,link,org,springframework,remoting,support,remote,invocation,objects,into,request,messages,as,well,as,response,messages,into,link,org,springframework,remoting,support,remote,invocation,result,objects,p,default,is,a,link,simple,message,converter,using,a,standard,jms,link,javax,jms,object,message,for,each,invocation,invocation,result,object,p,custom,implementations,may,generally,adapt,link,java,io,serializable,objects,into,special,kinds,of,messages,or,might,be,specifically,tailored,for,translating,code,remote,invocation,result,s,into,specific,kinds,of,messages;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter,null,message,converter,new,simple,message,converter
JmsInvokerClientInterceptor -> public void setMessageConverter(MessageConverter messageConverter);1424380732;Specify the {@link MessageConverter} to use for turning_{@link org.springframework.remoting.support.RemoteInvocation}_objects into request messages, as well as response messages into_{@link org.springframework.remoting.support.RemoteInvocationResult} objects._<p>Default is a {@link SimpleMessageConverter}, using a standard JMS_{@link javax.jms.ObjectMessage} for each invocation / invocation result_object._<p>Custom implementations may generally adapt {@link java.io.Serializable}_objects into special kinds of messages, or might be specifically tailored for_translating {@code RemoteInvocation(Result)s} into specific kinds of messages.;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = (messageConverter != null ? messageConverter : new SimpleMessageConverter())__	};specify,the,link,message,converter,to,use,for,turning,link,org,springframework,remoting,support,remote,invocation,objects,into,request,messages,as,well,as,response,messages,into,link,org,springframework,remoting,support,remote,invocation,result,objects,p,default,is,a,link,simple,message,converter,using,a,standard,jms,link,javax,jms,object,message,for,each,invocation,invocation,result,object,p,custom,implementations,may,generally,adapt,link,java,io,serializable,objects,into,special,kinds,of,messages,or,might,be,specifically,tailored,for,translating,code,remote,invocation,result,s,into,specific,kinds,of,messages;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter,null,message,converter,new,simple,message,converter
JmsInvokerClientInterceptor -> @Nullable 	protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable;1496837955;Recreate the invocation result contained in the given {@link RemoteInvocationResult}_object._<p>The default implementation calls the default {@code recreate()} method._<p>Can be overridden in subclasses to provide custom recreation, potentially_processing the returned result object._@param result the RemoteInvocationResult to recreate_@return a return value if the invocation result is a successful return_@throws Throwable if the invocation result is an exception_@see org.springframework.remoting.support.RemoteInvocationResult#recreate();@Nullable_	protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable {_		return result.recreate()__	};recreate,the,invocation,result,contained,in,the,given,link,remote,invocation,result,object,p,the,default,implementation,calls,the,default,code,recreate,method,p,can,be,overridden,in,subclasses,to,provide,custom,recreation,potentially,processing,the,returned,result,object,param,result,the,remote,invocation,result,to,recreate,return,a,return,value,if,the,invocation,result,is,a,successful,return,throws,throwable,if,the,invocation,result,is,an,exception,see,org,springframework,remoting,support,remote,invocation,result,recreate;nullable,protected,object,recreate,remote,invocation,result,remote,invocation,result,result,throws,throwable,return,result,recreate
JmsInvokerClientInterceptor -> @Nullable 	protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable;1498780456;Recreate the invocation result contained in the given {@link RemoteInvocationResult}_object._<p>The default implementation calls the default {@code recreate()} method._<p>Can be overridden in subclasses to provide custom recreation, potentially_processing the returned result object._@param result the RemoteInvocationResult to recreate_@return a return value if the invocation result is a successful return_@throws Throwable if the invocation result is an exception_@see org.springframework.remoting.support.RemoteInvocationResult#recreate();@Nullable_	protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable {_		return result.recreate()__	};recreate,the,invocation,result,contained,in,the,given,link,remote,invocation,result,object,p,the,default,implementation,calls,the,default,code,recreate,method,p,can,be,overridden,in,subclasses,to,provide,custom,recreation,potentially,processing,the,returned,result,object,param,result,the,remote,invocation,result,to,recreate,return,a,return,value,if,the,invocation,result,is,a,successful,return,throws,throwable,if,the,invocation,result,is,an,exception,see,org,springframework,remoting,support,remote,invocation,result,recreate;nullable,protected,object,recreate,remote,invocation,result,remote,invocation,result,result,throws,throwable,return,result,recreate
JmsInvokerClientInterceptor -> @Nullable 	protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable;1500416137;Recreate the invocation result contained in the given {@link RemoteInvocationResult}_object._<p>The default implementation calls the default {@code recreate()} method._<p>Can be overridden in subclasses to provide custom recreation, potentially_processing the returned result object._@param result the RemoteInvocationResult to recreate_@return a return value if the invocation result is a successful return_@throws Throwable if the invocation result is an exception_@see org.springframework.remoting.support.RemoteInvocationResult#recreate();@Nullable_	protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable {_		return result.recreate()__	};recreate,the,invocation,result,contained,in,the,given,link,remote,invocation,result,object,p,the,default,implementation,calls,the,default,code,recreate,method,p,can,be,overridden,in,subclasses,to,provide,custom,recreation,potentially,processing,the,returned,result,object,param,result,the,remote,invocation,result,to,recreate,return,a,return,value,if,the,invocation,result,is,a,successful,return,throws,throwable,if,the,invocation,result,is,an,exception,see,org,springframework,remoting,support,remote,invocation,result,recreate;nullable,protected,object,recreate,remote,invocation,result,remote,invocation,result,result,throws,throwable,return,result,recreate
JmsInvokerClientInterceptor -> @Nullable 	protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable;1500448076;Recreate the invocation result contained in the given {@link RemoteInvocationResult}_object._<p>The default implementation calls the default {@code recreate()} method._<p>Can be overridden in subclasses to provide custom recreation, potentially_processing the returned result object._@param result the RemoteInvocationResult to recreate_@return a return value if the invocation result is a successful return_@throws Throwable if the invocation result is an exception_@see org.springframework.remoting.support.RemoteInvocationResult#recreate();@Nullable_	protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable {_		return result.recreate()__	};recreate,the,invocation,result,contained,in,the,given,link,remote,invocation,result,object,p,the,default,implementation,calls,the,default,code,recreate,method,p,can,be,overridden,in,subclasses,to,provide,custom,recreation,potentially,processing,the,returned,result,object,param,result,the,remote,invocation,result,to,recreate,return,a,return,value,if,the,invocation,result,is,a,successful,return,throws,throwable,if,the,invocation,result,is,an,exception,see,org,springframework,remoting,support,remote,invocation,result,recreate;nullable,protected,object,recreate,remote,invocation,result,remote,invocation,result,result,throws,throwable,return,result,recreate
JmsInvokerClientInterceptor -> protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException;1328020251;Execute the given remote invocation, sending an invoker request message_to this accessor's target queue and waiting for a corresponding response._@param invocation the RemoteInvocation to execute_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure_@see #doExecuteRequest;protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException {_		Connection con = createConnection()__		Session session = null__		try {_			session = createSession(con)__			Queue queueToUse = resolveQueue(session)__			Message requestMessage = createRequestMessage(session, invocation)__			con.start()__			Message responseMessage = doExecuteRequest(session, queueToUse, requestMessage)__			return extractInvocationResult(responseMessage)__		}_		finally {_			JmsUtils.closeSession(session)__			ConnectionFactoryUtils.releaseConnection(con, getConnectionFactory(), true)__		}_	};execute,the,given,remote,invocation,sending,an,invoker,request,message,to,this,accessor,s,target,queue,and,waiting,for,a,corresponding,response,param,invocation,the,remote,invocation,to,execute,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure,see,do,execute,request;protected,remote,invocation,result,execute,request,remote,invocation,invocation,throws,jmsexception,connection,con,create,connection,session,session,null,try,session,create,session,con,queue,queue,to,use,resolve,queue,session,message,request,message,create,request,message,session,invocation,con,start,message,response,message,do,execute,request,session,queue,to,use,request,message,return,extract,invocation,result,response,message,finally,jms,utils,close,session,session,connection,factory,utils,release,connection,con,get,connection,factory,true
JmsInvokerClientInterceptor -> protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException;1356735495;Execute the given remote invocation, sending an invoker request message_to this accessor's target queue and waiting for a corresponding response._@param invocation the RemoteInvocation to execute_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure_@see #doExecuteRequest;protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException {_		Connection con = createConnection()__		Session session = null__		try {_			session = createSession(con)__			Queue queueToUse = resolveQueue(session)__			Message requestMessage = createRequestMessage(session, invocation)__			con.start()__			Message responseMessage = doExecuteRequest(session, queueToUse, requestMessage)__			return extractInvocationResult(responseMessage)__		}_		finally {_			JmsUtils.closeSession(session)__			ConnectionFactoryUtils.releaseConnection(con, getConnectionFactory(), true)__		}_	};execute,the,given,remote,invocation,sending,an,invoker,request,message,to,this,accessor,s,target,queue,and,waiting,for,a,corresponding,response,param,invocation,the,remote,invocation,to,execute,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure,see,do,execute,request;protected,remote,invocation,result,execute,request,remote,invocation,invocation,throws,jmsexception,connection,con,create,connection,session,session,null,try,session,create,session,con,queue,queue,to,use,resolve,queue,session,message,request,message,create,request,message,session,invocation,con,start,message,response,message,do,execute,request,session,queue,to,use,request,message,return,extract,invocation,result,response,message,finally,jms,utils,close,session,session,connection,factory,utils,release,connection,con,get,connection,factory,true
JmsInvokerClientInterceptor -> protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException;1357119239;Execute the given remote invocation, sending an invoker request message_to this accessor's target queue and waiting for a corresponding response._@param invocation the RemoteInvocation to execute_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure_@see #doExecuteRequest;protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException {_		Connection con = createConnection()__		Session session = null__		try {_			session = createSession(con)__			Queue queueToUse = resolveQueue(session)__			Message requestMessage = createRequestMessage(session, invocation)__			con.start()__			Message responseMessage = doExecuteRequest(session, queueToUse, requestMessage)__			return extractInvocationResult(responseMessage)__		}_		finally {_			JmsUtils.closeSession(session)__			ConnectionFactoryUtils.releaseConnection(con, getConnectionFactory(), true)__		}_	};execute,the,given,remote,invocation,sending,an,invoker,request,message,to,this,accessor,s,target,queue,and,waiting,for,a,corresponding,response,param,invocation,the,remote,invocation,to,execute,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure,see,do,execute,request;protected,remote,invocation,result,execute,request,remote,invocation,invocation,throws,jmsexception,connection,con,create,connection,session,session,null,try,session,create,session,con,queue,queue,to,use,resolve,queue,session,message,request,message,create,request,message,session,invocation,con,start,message,response,message,do,execute,request,session,queue,to,use,request,message,return,extract,invocation,result,response,message,finally,jms,utils,close,session,session,connection,factory,utils,release,connection,con,get,connection,factory,true
JmsInvokerClientInterceptor -> protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException;1368482696;Execute the given remote invocation, sending an invoker request message_to this accessor's target queue and waiting for a corresponding response._@param invocation the RemoteInvocation to execute_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure_@see #doExecuteRequest;protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException {_		Connection con = createConnection()__		Session session = null__		try {_			session = createSession(con)__			Queue queueToUse = resolveQueue(session)__			Message requestMessage = createRequestMessage(session, invocation)__			con.start()__			Message responseMessage = doExecuteRequest(session, queueToUse, requestMessage)__			return extractInvocationResult(responseMessage)__		}_		finally {_			JmsUtils.closeSession(session)__			ConnectionFactoryUtils.releaseConnection(con, getConnectionFactory(), true)__		}_	};execute,the,given,remote,invocation,sending,an,invoker,request,message,to,this,accessor,s,target,queue,and,waiting,for,a,corresponding,response,param,invocation,the,remote,invocation,to,execute,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure,see,do,execute,request;protected,remote,invocation,result,execute,request,remote,invocation,invocation,throws,jmsexception,connection,con,create,connection,session,session,null,try,session,create,session,con,queue,queue,to,use,resolve,queue,session,message,request,message,create,request,message,session,invocation,con,start,message,response,message,do,execute,request,session,queue,to,use,request,message,return,extract,invocation,result,response,message,finally,jms,utils,close,session,session,connection,factory,utils,release,connection,con,get,connection,factory,true
JmsInvokerClientInterceptor -> protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException;1405696891;Execute the given remote invocation, sending an invoker request message_to this accessor's target queue and waiting for a corresponding response._@param invocation the RemoteInvocation to execute_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure_@see #doExecuteRequest;protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException {_		Connection con = createConnection()__		Session session = null__		try {_			session = createSession(con)__			Queue queueToUse = resolveQueue(session)__			Message requestMessage = createRequestMessage(session, invocation)__			con.start()__			Message responseMessage = doExecuteRequest(session, queueToUse, requestMessage)__			return extractInvocationResult(responseMessage)__		}_		finally {_			JmsUtils.closeSession(session)__			ConnectionFactoryUtils.releaseConnection(con, getConnectionFactory(), true)__		}_	};execute,the,given,remote,invocation,sending,an,invoker,request,message,to,this,accessor,s,target,queue,and,waiting,for,a,corresponding,response,param,invocation,the,remote,invocation,to,execute,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure,see,do,execute,request;protected,remote,invocation,result,execute,request,remote,invocation,invocation,throws,jmsexception,connection,con,create,connection,session,session,null,try,session,create,session,con,queue,queue,to,use,resolve,queue,session,message,request,message,create,request,message,session,invocation,con,start,message,response,message,do,execute,request,session,queue,to,use,request,message,return,extract,invocation,result,response,message,finally,jms,utils,close,session,session,connection,factory,utils,release,connection,con,get,connection,factory,true
JmsInvokerClientInterceptor -> protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException;1424362428;Execute the given remote invocation, sending an invoker request message_to this accessor's target queue and waiting for a corresponding response._@param invocation the RemoteInvocation to execute_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure_@see #doExecuteRequest;protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException {_		Connection con = createConnection()__		Session session = null__		try {_			session = createSession(con)__			Queue queueToUse = resolveQueue(session)__			Message requestMessage = createRequestMessage(session, invocation)__			con.start()__			Message responseMessage = doExecuteRequest(session, queueToUse, requestMessage)__			if (responseMessage != null) {_				return extractInvocationResult(responseMessage)__			}_			else {_				return onReceiveTimeout(invocation)__			}_		}_		finally {_			JmsUtils.closeSession(session)__			ConnectionFactoryUtils.releaseConnection(con, getConnectionFactory(), true)__		}_	};execute,the,given,remote,invocation,sending,an,invoker,request,message,to,this,accessor,s,target,queue,and,waiting,for,a,corresponding,response,param,invocation,the,remote,invocation,to,execute,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure,see,do,execute,request;protected,remote,invocation,result,execute,request,remote,invocation,invocation,throws,jmsexception,connection,con,create,connection,session,session,null,try,session,create,session,con,queue,queue,to,use,resolve,queue,session,message,request,message,create,request,message,session,invocation,con,start,message,response,message,do,execute,request,session,queue,to,use,request,message,if,response,message,null,return,extract,invocation,result,response,message,else,return,on,receive,timeout,invocation,finally,jms,utils,close,session,session,connection,factory,utils,release,connection,con,get,connection,factory,true
JmsInvokerClientInterceptor -> protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException;1424380551;Execute the given remote invocation, sending an invoker request message_to this accessor's target queue and waiting for a corresponding response._@param invocation the RemoteInvocation to execute_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure_@see #doExecuteRequest;protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException {_		Connection con = createConnection()__		Session session = null__		try {_			session = createSession(con)__			Queue queueToUse = resolveQueue(session)__			Message requestMessage = createRequestMessage(session, invocation)__			con.start()__			Message responseMessage = doExecuteRequest(session, queueToUse, requestMessage)__			if (responseMessage != null) {_				return extractInvocationResult(responseMessage)__			}_			else {_				return onReceiveTimeout(invocation)__			}_		}_		finally {_			JmsUtils.closeSession(session)__			ConnectionFactoryUtils.releaseConnection(con, getConnectionFactory(), true)__		}_	};execute,the,given,remote,invocation,sending,an,invoker,request,message,to,this,accessor,s,target,queue,and,waiting,for,a,corresponding,response,param,invocation,the,remote,invocation,to,execute,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure,see,do,execute,request;protected,remote,invocation,result,execute,request,remote,invocation,invocation,throws,jmsexception,connection,con,create,connection,session,session,null,try,session,create,session,con,queue,queue,to,use,resolve,queue,session,message,request,message,create,request,message,session,invocation,con,start,message,response,message,do,execute,request,session,queue,to,use,request,message,if,response,message,null,return,extract,invocation,result,response,message,else,return,on,receive,timeout,invocation,finally,jms,utils,close,session,session,connection,factory,utils,release,connection,con,get,connection,factory,true
JmsInvokerClientInterceptor -> protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException;1424380732;Execute the given remote invocation, sending an invoker request message_to this accessor's target queue and waiting for a corresponding response._@param invocation the RemoteInvocation to execute_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure_@see #doExecuteRequest;protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException {_		Connection con = createConnection()__		Session session = null__		try {_			session = createSession(con)__			Queue queueToUse = resolveQueue(session)__			Message requestMessage = createRequestMessage(session, invocation)__			con.start()__			Message responseMessage = doExecuteRequest(session, queueToUse, requestMessage)__			if (responseMessage != null) {_				return extractInvocationResult(responseMessage)__			}_			else {_				return onReceiveTimeout(invocation)__			}_		}_		finally {_			JmsUtils.closeSession(session)__			ConnectionFactoryUtils.releaseConnection(con, getConnectionFactory(), true)__		}_	};execute,the,given,remote,invocation,sending,an,invoker,request,message,to,this,accessor,s,target,queue,and,waiting,for,a,corresponding,response,param,invocation,the,remote,invocation,to,execute,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure,see,do,execute,request;protected,remote,invocation,result,execute,request,remote,invocation,invocation,throws,jmsexception,connection,con,create,connection,session,session,null,try,session,create,session,con,queue,queue,to,use,resolve,queue,session,message,request,message,create,request,message,session,invocation,con,start,message,response,message,do,execute,request,session,queue,to,use,request,message,if,response,message,null,return,extract,invocation,result,response,message,else,return,on,receive,timeout,invocation,finally,jms,utils,close,session,session,connection,factory,utils,release,connection,con,get,connection,factory,true
JmsInvokerClientInterceptor -> protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException;1496837955;Execute the given remote invocation, sending an invoker request message_to this accessor's target queue and waiting for a corresponding response._@param invocation the RemoteInvocation to execute_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure_@see #doExecuteRequest;protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException {_		Connection con = createConnection()__		Session session = null__		try {_			session = createSession(con)__			Queue queueToUse = resolveQueue(session)__			Message requestMessage = createRequestMessage(session, invocation)__			con.start()__			Message responseMessage = doExecuteRequest(session, queueToUse, requestMessage)__			if (responseMessage != null) {_				return extractInvocationResult(responseMessage)__			}_			else {_				return onReceiveTimeout(invocation)__			}_		}_		finally {_			JmsUtils.closeSession(session)__			ConnectionFactoryUtils.releaseConnection(con, getConnectionFactory(), true)__		}_	};execute,the,given,remote,invocation,sending,an,invoker,request,message,to,this,accessor,s,target,queue,and,waiting,for,a,corresponding,response,param,invocation,the,remote,invocation,to,execute,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure,see,do,execute,request;protected,remote,invocation,result,execute,request,remote,invocation,invocation,throws,jmsexception,connection,con,create,connection,session,session,null,try,session,create,session,con,queue,queue,to,use,resolve,queue,session,message,request,message,create,request,message,session,invocation,con,start,message,response,message,do,execute,request,session,queue,to,use,request,message,if,response,message,null,return,extract,invocation,result,response,message,else,return,on,receive,timeout,invocation,finally,jms,utils,close,session,session,connection,factory,utils,release,connection,con,get,connection,factory,true
JmsInvokerClientInterceptor -> protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException;1498780456;Execute the given remote invocation, sending an invoker request message_to this accessor's target queue and waiting for a corresponding response._@param invocation the RemoteInvocation to execute_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure_@see #doExecuteRequest;protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException {_		Connection con = createConnection()__		Session session = null__		try {_			session = createSession(con)__			Queue queueToUse = resolveQueue(session)__			Message requestMessage = createRequestMessage(session, invocation)__			con.start()__			Message responseMessage = doExecuteRequest(session, queueToUse, requestMessage)__			if (responseMessage != null) {_				return extractInvocationResult(responseMessage)__			}_			else {_				return onReceiveTimeout(invocation)__			}_		}_		finally {_			JmsUtils.closeSession(session)__			ConnectionFactoryUtils.releaseConnection(con, getConnectionFactory(), true)__		}_	};execute,the,given,remote,invocation,sending,an,invoker,request,message,to,this,accessor,s,target,queue,and,waiting,for,a,corresponding,response,param,invocation,the,remote,invocation,to,execute,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure,see,do,execute,request;protected,remote,invocation,result,execute,request,remote,invocation,invocation,throws,jmsexception,connection,con,create,connection,session,session,null,try,session,create,session,con,queue,queue,to,use,resolve,queue,session,message,request,message,create,request,message,session,invocation,con,start,message,response,message,do,execute,request,session,queue,to,use,request,message,if,response,message,null,return,extract,invocation,result,response,message,else,return,on,receive,timeout,invocation,finally,jms,utils,close,session,session,connection,factory,utils,release,connection,con,get,connection,factory,true
JmsInvokerClientInterceptor -> protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException;1500416137;Execute the given remote invocation, sending an invoker request message_to this accessor's target queue and waiting for a corresponding response._@param invocation the RemoteInvocation to execute_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure_@see #doExecuteRequest;protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException {_		Connection con = createConnection()__		Session session = null__		try {_			session = createSession(con)__			Queue queueToUse = resolveQueue(session)__			Message requestMessage = createRequestMessage(session, invocation)__			con.start()__			Message responseMessage = doExecuteRequest(session, queueToUse, requestMessage)__			if (responseMessage != null) {_				return extractInvocationResult(responseMessage)__			}_			else {_				return onReceiveTimeout(invocation)__			}_		}_		finally {_			JmsUtils.closeSession(session)__			ConnectionFactoryUtils.releaseConnection(con, getConnectionFactory(), true)__		}_	};execute,the,given,remote,invocation,sending,an,invoker,request,message,to,this,accessor,s,target,queue,and,waiting,for,a,corresponding,response,param,invocation,the,remote,invocation,to,execute,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure,see,do,execute,request;protected,remote,invocation,result,execute,request,remote,invocation,invocation,throws,jmsexception,connection,con,create,connection,session,session,null,try,session,create,session,con,queue,queue,to,use,resolve,queue,session,message,request,message,create,request,message,session,invocation,con,start,message,response,message,do,execute,request,session,queue,to,use,request,message,if,response,message,null,return,extract,invocation,result,response,message,else,return,on,receive,timeout,invocation,finally,jms,utils,close,session,session,connection,factory,utils,release,connection,con,get,connection,factory,true
JmsInvokerClientInterceptor -> protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException;1500448076;Execute the given remote invocation, sending an invoker request message_to this accessor's target queue and waiting for a corresponding response._@param invocation the RemoteInvocation to execute_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure_@see #doExecuteRequest;protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException {_		Connection con = createConnection()__		Session session = null__		try {_			session = createSession(con)__			Queue queueToUse = resolveQueue(session)__			Message requestMessage = createRequestMessage(session, invocation)__			con.start()__			Message responseMessage = doExecuteRequest(session, queueToUse, requestMessage)__			if (responseMessage != null) {_				return extractInvocationResult(responseMessage)__			}_			else {_				return onReceiveTimeout(invocation)__			}_		}_		finally {_			JmsUtils.closeSession(session)__			ConnectionFactoryUtils.releaseConnection(con, getConnectionFactory(), true)__		}_	};execute,the,given,remote,invocation,sending,an,invoker,request,message,to,this,accessor,s,target,queue,and,waiting,for,a,corresponding,response,param,invocation,the,remote,invocation,to,execute,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure,see,do,execute,request;protected,remote,invocation,result,execute,request,remote,invocation,invocation,throws,jmsexception,connection,con,create,connection,session,session,null,try,session,create,session,con,queue,queue,to,use,resolve,queue,session,message,request,message,create,request,message,session,invocation,con,start,message,response,message,do,execute,request,session,queue,to,use,request,message,if,response,message,null,return,extract,invocation,result,response,message,else,return,on,receive,timeout,invocation,finally,jms,utils,close,session,session,connection,factory,utils,release,connection,con,get,connection,factory,true
JmsInvokerClientInterceptor -> protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException;1328020251;Create the invoker request message._<p>The default implementation creates a JMS ObjectMessage_for the given RemoteInvocation object._@param session the current JMS Session_@param invocation the remote invocation to send_@return the JMS Message to send_@throws JMSException if the message could not be created;protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException {_		return this.messageConverter.toMessage(invocation, session)__	};create,the,invoker,request,message,p,the,default,implementation,creates,a,jms,object,message,for,the,given,remote,invocation,object,param,session,the,current,jms,session,param,invocation,the,remote,invocation,to,send,return,the,jms,message,to,send,throws,jmsexception,if,the,message,could,not,be,created;protected,message,create,request,message,session,session,remote,invocation,invocation,throws,jmsexception,return,this,message,converter,to,message,invocation,session
JmsInvokerClientInterceptor -> protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException;1356735495;Create the invoker request message._<p>The default implementation creates a JMS ObjectMessage_for the given RemoteInvocation object._@param session the current JMS Session_@param invocation the remote invocation to send_@return the JMS Message to send_@throws JMSException if the message could not be created;protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException {_		return this.messageConverter.toMessage(invocation, session)__	};create,the,invoker,request,message,p,the,default,implementation,creates,a,jms,object,message,for,the,given,remote,invocation,object,param,session,the,current,jms,session,param,invocation,the,remote,invocation,to,send,return,the,jms,message,to,send,throws,jmsexception,if,the,message,could,not,be,created;protected,message,create,request,message,session,session,remote,invocation,invocation,throws,jmsexception,return,this,message,converter,to,message,invocation,session
JmsInvokerClientInterceptor -> protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException;1357119239;Create the invoker request message._<p>The default implementation creates a JMS ObjectMessage_for the given RemoteInvocation object._@param session the current JMS Session_@param invocation the remote invocation to send_@return the JMS Message to send_@throws JMSException if the message could not be created;protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException {_		return this.messageConverter.toMessage(invocation, session)__	};create,the,invoker,request,message,p,the,default,implementation,creates,a,jms,object,message,for,the,given,remote,invocation,object,param,session,the,current,jms,session,param,invocation,the,remote,invocation,to,send,return,the,jms,message,to,send,throws,jmsexception,if,the,message,could,not,be,created;protected,message,create,request,message,session,session,remote,invocation,invocation,throws,jmsexception,return,this,message,converter,to,message,invocation,session
JmsInvokerClientInterceptor -> protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException;1368482696;Create the invoker request message._<p>The default implementation creates a JMS ObjectMessage_for the given RemoteInvocation object._@param session the current JMS Session_@param invocation the remote invocation to send_@return the JMS Message to send_@throws JMSException if the message could not be created;protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException {_		return this.messageConverter.toMessage(invocation, session)__	};create,the,invoker,request,message,p,the,default,implementation,creates,a,jms,object,message,for,the,given,remote,invocation,object,param,session,the,current,jms,session,param,invocation,the,remote,invocation,to,send,return,the,jms,message,to,send,throws,jmsexception,if,the,message,could,not,be,created;protected,message,create,request,message,session,session,remote,invocation,invocation,throws,jmsexception,return,this,message,converter,to,message,invocation,session
JmsInvokerClientInterceptor -> protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException;1405696891;Create the invoker request message._<p>The default implementation creates a JMS ObjectMessage_for the given RemoteInvocation object._@param session the current JMS Session_@param invocation the remote invocation to send_@return the JMS Message to send_@throws JMSException if the message could not be created;protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException {_		return this.messageConverter.toMessage(invocation, session)__	};create,the,invoker,request,message,p,the,default,implementation,creates,a,jms,object,message,for,the,given,remote,invocation,object,param,session,the,current,jms,session,param,invocation,the,remote,invocation,to,send,return,the,jms,message,to,send,throws,jmsexception,if,the,message,could,not,be,created;protected,message,create,request,message,session,session,remote,invocation,invocation,throws,jmsexception,return,this,message,converter,to,message,invocation,session
JmsInvokerClientInterceptor -> protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException;1424362428;Create the invoker request message._<p>The default implementation creates a JMS ObjectMessage_for the given RemoteInvocation object._@param session the current JMS Session_@param invocation the remote invocation to send_@return the JMS Message to send_@throws JMSException if the message could not be created;protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException {_		return this.messageConverter.toMessage(invocation, session)__	};create,the,invoker,request,message,p,the,default,implementation,creates,a,jms,object,message,for,the,given,remote,invocation,object,param,session,the,current,jms,session,param,invocation,the,remote,invocation,to,send,return,the,jms,message,to,send,throws,jmsexception,if,the,message,could,not,be,created;protected,message,create,request,message,session,session,remote,invocation,invocation,throws,jmsexception,return,this,message,converter,to,message,invocation,session
JmsInvokerClientInterceptor -> protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException;1424380551;Create the invoker request message._<p>The default implementation creates a JMS {@link javax.jms.ObjectMessage}_for the given RemoteInvocation object._@param session the current JMS Session_@param invocation the remote invocation to send_@return the JMS Message to send_@throws JMSException if the message could not be created;protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException {_		return this.messageConverter.toMessage(invocation, session)__	};create,the,invoker,request,message,p,the,default,implementation,creates,a,jms,link,javax,jms,object,message,for,the,given,remote,invocation,object,param,session,the,current,jms,session,param,invocation,the,remote,invocation,to,send,return,the,jms,message,to,send,throws,jmsexception,if,the,message,could,not,be,created;protected,message,create,request,message,session,session,remote,invocation,invocation,throws,jmsexception,return,this,message,converter,to,message,invocation,session
JmsInvokerClientInterceptor -> protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException;1424380732;Create the invoker request message._<p>The default implementation creates a JMS {@link javax.jms.ObjectMessage}_for the given RemoteInvocation object._@param session the current JMS Session_@param invocation the remote invocation to send_@return the JMS Message to send_@throws JMSException if the message could not be created;protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException {_		return this.messageConverter.toMessage(invocation, session)__	};create,the,invoker,request,message,p,the,default,implementation,creates,a,jms,link,javax,jms,object,message,for,the,given,remote,invocation,object,param,session,the,current,jms,session,param,invocation,the,remote,invocation,to,send,return,the,jms,message,to,send,throws,jmsexception,if,the,message,could,not,be,created;protected,message,create,request,message,session,session,remote,invocation,invocation,throws,jmsexception,return,this,message,converter,to,message,invocation,session
JmsInvokerClientInterceptor -> protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException;1496837955;Create the invoker request message._<p>The default implementation creates a JMS {@link javax.jms.ObjectMessage}_for the given RemoteInvocation object._@param session the current JMS Session_@param invocation the remote invocation to send_@return the JMS Message to send_@throws JMSException if the message could not be created;protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException {_		return this.messageConverter.toMessage(invocation, session)__	};create,the,invoker,request,message,p,the,default,implementation,creates,a,jms,link,javax,jms,object,message,for,the,given,remote,invocation,object,param,session,the,current,jms,session,param,invocation,the,remote,invocation,to,send,return,the,jms,message,to,send,throws,jmsexception,if,the,message,could,not,be,created;protected,message,create,request,message,session,session,remote,invocation,invocation,throws,jmsexception,return,this,message,converter,to,message,invocation,session
JmsInvokerClientInterceptor -> protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException;1498780456;Create the invoker request message._<p>The default implementation creates a JMS {@link javax.jms.ObjectMessage}_for the given RemoteInvocation object._@param session the current JMS Session_@param invocation the remote invocation to send_@return the JMS Message to send_@throws JMSException if the message could not be created;protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException {_		return this.messageConverter.toMessage(invocation, session)__	};create,the,invoker,request,message,p,the,default,implementation,creates,a,jms,link,javax,jms,object,message,for,the,given,remote,invocation,object,param,session,the,current,jms,session,param,invocation,the,remote,invocation,to,send,return,the,jms,message,to,send,throws,jmsexception,if,the,message,could,not,be,created;protected,message,create,request,message,session,session,remote,invocation,invocation,throws,jmsexception,return,this,message,converter,to,message,invocation,session
JmsInvokerClientInterceptor -> protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException;1500416137;Create the invoker request message._<p>The default implementation creates a JMS {@link javax.jms.ObjectMessage}_for the given RemoteInvocation object._@param session the current JMS Session_@param invocation the remote invocation to send_@return the JMS Message to send_@throws JMSException if the message could not be created;protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException {_		return this.messageConverter.toMessage(invocation, session)__	};create,the,invoker,request,message,p,the,default,implementation,creates,a,jms,link,javax,jms,object,message,for,the,given,remote,invocation,object,param,session,the,current,jms,session,param,invocation,the,remote,invocation,to,send,return,the,jms,message,to,send,throws,jmsexception,if,the,message,could,not,be,created;protected,message,create,request,message,session,session,remote,invocation,invocation,throws,jmsexception,return,this,message,converter,to,message,invocation,session
JmsInvokerClientInterceptor -> protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException;1500448076;Create the invoker request message._<p>The default implementation creates a JMS {@link javax.jms.ObjectMessage}_for the given RemoteInvocation object._@param session the current JMS Session_@param invocation the remote invocation to send_@return the JMS Message to send_@throws JMSException if the message could not be created;protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException {_		return this.messageConverter.toMessage(invocation, session)__	};create,the,invoker,request,message,p,the,default,implementation,creates,a,jms,link,javax,jms,object,message,for,the,given,remote,invocation,object,param,session,the,current,jms,session,param,invocation,the,remote,invocation,to,send,return,the,jms,message,to,send,throws,jmsexception,if,the,message,could,not,be,created;protected,message,create,request,message,session,session,remote,invocation,invocation,throws,jmsexception,return,this,message,converter,to,message,invocation,session
JmsInvokerClientInterceptor -> protected ConnectionFactory getConnectionFactory();1328020251;Return the QueueConnectionFactory to use for obtaining JMS QueueConnections.;protected ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;protected,connection,factory,get,connection,factory,return,this,connection,factory
JmsInvokerClientInterceptor -> protected ConnectionFactory getConnectionFactory();1356735495;Return the QueueConnectionFactory to use for obtaining JMS QueueConnections.;protected ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;protected,connection,factory,get,connection,factory,return,this,connection,factory
JmsInvokerClientInterceptor -> protected ConnectionFactory getConnectionFactory();1357119239;Return the QueueConnectionFactory to use for obtaining JMS QueueConnections.;protected ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;protected,connection,factory,get,connection,factory,return,this,connection,factory
JmsInvokerClientInterceptor -> protected ConnectionFactory getConnectionFactory();1368482696;Return the QueueConnectionFactory to use for obtaining JMS QueueConnections.;protected ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;protected,connection,factory,get,connection,factory,return,this,connection,factory
JmsInvokerClientInterceptor -> protected ConnectionFactory getConnectionFactory();1405696891;Return the QueueConnectionFactory to use for obtaining JMS QueueConnections.;protected ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;protected,connection,factory,get,connection,factory,return,this,connection,factory
JmsInvokerClientInterceptor -> protected ConnectionFactory getConnectionFactory();1424362428;Return the QueueConnectionFactory to use for obtaining JMS QueueConnections.;protected ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;protected,connection,factory,get,connection,factory,return,this,connection,factory
JmsInvokerClientInterceptor -> protected ConnectionFactory getConnectionFactory();1424380551;Return the QueueConnectionFactory to use for obtaining JMS QueueConnections.;protected ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;protected,connection,factory,get,connection,factory,return,this,connection,factory
JmsInvokerClientInterceptor -> protected ConnectionFactory getConnectionFactory();1424380732;Return the QueueConnectionFactory to use for obtaining JMS QueueConnections.;protected ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,queue,connection,factory,to,use,for,obtaining,jms,queue,connections;protected,connection,factory,get,connection,factory,return,this,connection,factory
JmsInvokerClientInterceptor -> protected Queue resolveQueueName(Session session, String queueName) throws JMSException;1328020251;Resolve the given queue name into a JMS {@link javax.jms.Queue},_via this accessor's {@link DestinationResolver}._@param session the current JMS Session_@param queueName the name of the queue_@return the located Queue_@throws JMSException if resolution failed_@see #setDestinationResolver;protected Queue resolveQueueName(Session session, String queueName) throws JMSException {_		return (Queue) this.destinationResolver.resolveDestinationName(session, queueName, false)__	};resolve,the,given,queue,name,into,a,jms,link,javax,jms,queue,via,this,accessor,s,link,destination,resolver,param,session,the,current,jms,session,param,queue,name,the,name,of,the,queue,return,the,located,queue,throws,jmsexception,if,resolution,failed,see,set,destination,resolver;protected,queue,resolve,queue,name,session,session,string,queue,name,throws,jmsexception,return,queue,this,destination,resolver,resolve,destination,name,session,queue,name,false
JmsInvokerClientInterceptor -> protected Queue resolveQueueName(Session session, String queueName) throws JMSException;1356735495;Resolve the given queue name into a JMS {@link javax.jms.Queue},_via this accessor's {@link DestinationResolver}._@param session the current JMS Session_@param queueName the name of the queue_@return the located Queue_@throws JMSException if resolution failed_@see #setDestinationResolver;protected Queue resolveQueueName(Session session, String queueName) throws JMSException {_		return (Queue) this.destinationResolver.resolveDestinationName(session, queueName, false)__	};resolve,the,given,queue,name,into,a,jms,link,javax,jms,queue,via,this,accessor,s,link,destination,resolver,param,session,the,current,jms,session,param,queue,name,the,name,of,the,queue,return,the,located,queue,throws,jmsexception,if,resolution,failed,see,set,destination,resolver;protected,queue,resolve,queue,name,session,session,string,queue,name,throws,jmsexception,return,queue,this,destination,resolver,resolve,destination,name,session,queue,name,false
JmsInvokerClientInterceptor -> protected Queue resolveQueueName(Session session, String queueName) throws JMSException;1357119239;Resolve the given queue name into a JMS {@link javax.jms.Queue},_via this accessor's {@link DestinationResolver}._@param session the current JMS Session_@param queueName the name of the queue_@return the located Queue_@throws JMSException if resolution failed_@see #setDestinationResolver;protected Queue resolveQueueName(Session session, String queueName) throws JMSException {_		return (Queue) this.destinationResolver.resolveDestinationName(session, queueName, false)__	};resolve,the,given,queue,name,into,a,jms,link,javax,jms,queue,via,this,accessor,s,link,destination,resolver,param,session,the,current,jms,session,param,queue,name,the,name,of,the,queue,return,the,located,queue,throws,jmsexception,if,resolution,failed,see,set,destination,resolver;protected,queue,resolve,queue,name,session,session,string,queue,name,throws,jmsexception,return,queue,this,destination,resolver,resolve,destination,name,session,queue,name,false
JmsInvokerClientInterceptor -> protected Queue resolveQueueName(Session session, String queueName) throws JMSException;1368482696;Resolve the given queue name into a JMS {@link javax.jms.Queue},_via this accessor's {@link DestinationResolver}._@param session the current JMS Session_@param queueName the name of the queue_@return the located Queue_@throws JMSException if resolution failed_@see #setDestinationResolver;protected Queue resolveQueueName(Session session, String queueName) throws JMSException {_		return (Queue) this.destinationResolver.resolveDestinationName(session, queueName, false)__	};resolve,the,given,queue,name,into,a,jms,link,javax,jms,queue,via,this,accessor,s,link,destination,resolver,param,session,the,current,jms,session,param,queue,name,the,name,of,the,queue,return,the,located,queue,throws,jmsexception,if,resolution,failed,see,set,destination,resolver;protected,queue,resolve,queue,name,session,session,string,queue,name,throws,jmsexception,return,queue,this,destination,resolver,resolve,destination,name,session,queue,name,false
JmsInvokerClientInterceptor -> protected Queue resolveQueueName(Session session, String queueName) throws JMSException;1405696891;Resolve the given queue name into a JMS {@link javax.jms.Queue},_via this accessor's {@link DestinationResolver}._@param session the current JMS Session_@param queueName the name of the queue_@return the located Queue_@throws JMSException if resolution failed_@see #setDestinationResolver;protected Queue resolveQueueName(Session session, String queueName) throws JMSException {_		return (Queue) this.destinationResolver.resolveDestinationName(session, queueName, false)__	};resolve,the,given,queue,name,into,a,jms,link,javax,jms,queue,via,this,accessor,s,link,destination,resolver,param,session,the,current,jms,session,param,queue,name,the,name,of,the,queue,return,the,located,queue,throws,jmsexception,if,resolution,failed,see,set,destination,resolver;protected,queue,resolve,queue,name,session,session,string,queue,name,throws,jmsexception,return,queue,this,destination,resolver,resolve,destination,name,session,queue,name,false
JmsInvokerClientInterceptor -> protected Queue resolveQueueName(Session session, String queueName) throws JMSException;1424362428;Resolve the given queue name into a JMS {@link javax.jms.Queue},_via this accessor's {@link DestinationResolver}._@param session the current JMS Session_@param queueName the name of the queue_@return the located Queue_@throws JMSException if resolution failed_@see #setDestinationResolver;protected Queue resolveQueueName(Session session, String queueName) throws JMSException {_		return (Queue) this.destinationResolver.resolveDestinationName(session, queueName, false)__	};resolve,the,given,queue,name,into,a,jms,link,javax,jms,queue,via,this,accessor,s,link,destination,resolver,param,session,the,current,jms,session,param,queue,name,the,name,of,the,queue,return,the,located,queue,throws,jmsexception,if,resolution,failed,see,set,destination,resolver;protected,queue,resolve,queue,name,session,session,string,queue,name,throws,jmsexception,return,queue,this,destination,resolver,resolve,destination,name,session,queue,name,false
JmsInvokerClientInterceptor -> protected Queue resolveQueueName(Session session, String queueName) throws JMSException;1424380551;Resolve the given queue name into a JMS {@link javax.jms.Queue},_via this accessor's {@link DestinationResolver}._@param session the current JMS Session_@param queueName the name of the queue_@return the located Queue_@throws JMSException if resolution failed_@see #setDestinationResolver;protected Queue resolveQueueName(Session session, String queueName) throws JMSException {_		return (Queue) this.destinationResolver.resolveDestinationName(session, queueName, false)__	};resolve,the,given,queue,name,into,a,jms,link,javax,jms,queue,via,this,accessor,s,link,destination,resolver,param,session,the,current,jms,session,param,queue,name,the,name,of,the,queue,return,the,located,queue,throws,jmsexception,if,resolution,failed,see,set,destination,resolver;protected,queue,resolve,queue,name,session,session,string,queue,name,throws,jmsexception,return,queue,this,destination,resolver,resolve,destination,name,session,queue,name,false
JmsInvokerClientInterceptor -> protected Queue resolveQueueName(Session session, String queueName) throws JMSException;1424380732;Resolve the given queue name into a JMS {@link javax.jms.Queue},_via this accessor's {@link DestinationResolver}._@param session the current JMS Session_@param queueName the name of the queue_@return the located Queue_@throws JMSException if resolution failed_@see #setDestinationResolver;protected Queue resolveQueueName(Session session, String queueName) throws JMSException {_		return (Queue) this.destinationResolver.resolveDestinationName(session, queueName, false)__	};resolve,the,given,queue,name,into,a,jms,link,javax,jms,queue,via,this,accessor,s,link,destination,resolver,param,session,the,current,jms,session,param,queue,name,the,name,of,the,queue,return,the,located,queue,throws,jmsexception,if,resolution,failed,see,set,destination,resolver;protected,queue,resolve,queue,name,session,session,string,queue,name,throws,jmsexception,return,queue,this,destination,resolver,resolve,destination,name,session,queue,name,false
JmsInvokerClientInterceptor -> protected Queue resolveQueueName(Session session, String queueName) throws JMSException;1496837955;Resolve the given queue name into a JMS {@link javax.jms.Queue},_via this accessor's {@link DestinationResolver}._@param session the current JMS Session_@param queueName the name of the queue_@return the located Queue_@throws JMSException if resolution failed_@see #setDestinationResolver;protected Queue resolveQueueName(Session session, String queueName) throws JMSException {_		return (Queue) this.destinationResolver.resolveDestinationName(session, queueName, false)__	};resolve,the,given,queue,name,into,a,jms,link,javax,jms,queue,via,this,accessor,s,link,destination,resolver,param,session,the,current,jms,session,param,queue,name,the,name,of,the,queue,return,the,located,queue,throws,jmsexception,if,resolution,failed,see,set,destination,resolver;protected,queue,resolve,queue,name,session,session,string,queue,name,throws,jmsexception,return,queue,this,destination,resolver,resolve,destination,name,session,queue,name,false
JmsInvokerClientInterceptor -> protected Queue resolveQueueName(Session session, String queueName) throws JMSException;1498780456;Resolve the given queue name into a JMS {@link javax.jms.Queue},_via this accessor's {@link DestinationResolver}._@param session the current JMS Session_@param queueName the name of the queue_@return the located Queue_@throws JMSException if resolution failed_@see #setDestinationResolver;protected Queue resolveQueueName(Session session, String queueName) throws JMSException {_		return (Queue) this.destinationResolver.resolveDestinationName(session, queueName, false)__	};resolve,the,given,queue,name,into,a,jms,link,javax,jms,queue,via,this,accessor,s,link,destination,resolver,param,session,the,current,jms,session,param,queue,name,the,name,of,the,queue,return,the,located,queue,throws,jmsexception,if,resolution,failed,see,set,destination,resolver;protected,queue,resolve,queue,name,session,session,string,queue,name,throws,jmsexception,return,queue,this,destination,resolver,resolve,destination,name,session,queue,name,false
JmsInvokerClientInterceptor -> protected Queue resolveQueueName(Session session, String queueName) throws JMSException;1500416137;Resolve the given queue name into a JMS {@link javax.jms.Queue},_via this accessor's {@link DestinationResolver}._@param session the current JMS Session_@param queueName the name of the queue_@return the located Queue_@throws JMSException if resolution failed_@see #setDestinationResolver;protected Queue resolveQueueName(Session session, String queueName) throws JMSException {_		return (Queue) this.destinationResolver.resolveDestinationName(session, queueName, false)__	};resolve,the,given,queue,name,into,a,jms,link,javax,jms,queue,via,this,accessor,s,link,destination,resolver,param,session,the,current,jms,session,param,queue,name,the,name,of,the,queue,return,the,located,queue,throws,jmsexception,if,resolution,failed,see,set,destination,resolver;protected,queue,resolve,queue,name,session,session,string,queue,name,throws,jmsexception,return,queue,this,destination,resolver,resolve,destination,name,session,queue,name,false
JmsInvokerClientInterceptor -> protected Queue resolveQueueName(Session session, String queueName) throws JMSException;1500448076;Resolve the given queue name into a JMS {@link javax.jms.Queue},_via this accessor's {@link DestinationResolver}._@param session the current JMS Session_@param queueName the name of the queue_@return the located Queue_@throws JMSException if resolution failed_@see #setDestinationResolver;protected Queue resolveQueueName(Session session, String queueName) throws JMSException {_		return (Queue) this.destinationResolver.resolveDestinationName(session, queueName, false)__	};resolve,the,given,queue,name,into,a,jms,link,javax,jms,queue,via,this,accessor,s,link,destination,resolver,param,session,the,current,jms,session,param,queue,name,the,name,of,the,queue,return,the,located,queue,throws,jmsexception,if,resolution,failed,see,set,destination,resolver;protected,queue,resolve,queue,name,session,session,string,queue,name,throws,jmsexception,return,queue,this,destination,resolver,resolve,destination,name,session,queue,name,false
JmsInvokerClientInterceptor -> public void setDestinationResolver(DestinationResolver destinationResolver);1328020251;Set the DestinationResolver that is to be used to resolve Queue_references for this accessor._<p>The default resolver is a DynamicDestinationResolver. Specify a_JndiDestinationResolver for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		this.destinationResolver =_				(destinationResolver != null ? destinationResolver : new DynamicDestinationResolver())__	};set,the,destination,resolver,that,is,to,be,used,to,resolve,queue,references,for,this,accessor,p,the,default,resolver,is,a,dynamic,destination,resolver,specify,a,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver,null,destination,resolver,new,dynamic,destination,resolver
JmsInvokerClientInterceptor -> public void setDestinationResolver(DestinationResolver destinationResolver);1356735495;Set the DestinationResolver that is to be used to resolve Queue_references for this accessor._<p>The default resolver is a DynamicDestinationResolver. Specify a_JndiDestinationResolver for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		this.destinationResolver =_				(destinationResolver != null ? destinationResolver : new DynamicDestinationResolver())__	};set,the,destination,resolver,that,is,to,be,used,to,resolve,queue,references,for,this,accessor,p,the,default,resolver,is,a,dynamic,destination,resolver,specify,a,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver,null,destination,resolver,new,dynamic,destination,resolver
JmsInvokerClientInterceptor -> public void setDestinationResolver(DestinationResolver destinationResolver);1357119239;Set the DestinationResolver that is to be used to resolve Queue_references for this accessor._<p>The default resolver is a DynamicDestinationResolver. Specify a_JndiDestinationResolver for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		this.destinationResolver =_				(destinationResolver != null ? destinationResolver : new DynamicDestinationResolver())__	};set,the,destination,resolver,that,is,to,be,used,to,resolve,queue,references,for,this,accessor,p,the,default,resolver,is,a,dynamic,destination,resolver,specify,a,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver,null,destination,resolver,new,dynamic,destination,resolver
JmsInvokerClientInterceptor -> public void setDestinationResolver(DestinationResolver destinationResolver);1368482696;Set the DestinationResolver that is to be used to resolve Queue_references for this accessor._<p>The default resolver is a DynamicDestinationResolver. Specify a_JndiDestinationResolver for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		this.destinationResolver =_				(destinationResolver != null ? destinationResolver : new DynamicDestinationResolver())__	};set,the,destination,resolver,that,is,to,be,used,to,resolve,queue,references,for,this,accessor,p,the,default,resolver,is,a,dynamic,destination,resolver,specify,a,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver,null,destination,resolver,new,dynamic,destination,resolver
JmsInvokerClientInterceptor -> public void setDestinationResolver(DestinationResolver destinationResolver);1405696891;Set the DestinationResolver that is to be used to resolve Queue_references for this accessor._<p>The default resolver is a DynamicDestinationResolver. Specify a_JndiDestinationResolver for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		this.destinationResolver =_				(destinationResolver != null ? destinationResolver : new DynamicDestinationResolver())__	};set,the,destination,resolver,that,is,to,be,used,to,resolve,queue,references,for,this,accessor,p,the,default,resolver,is,a,dynamic,destination,resolver,specify,a,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver,null,destination,resolver,new,dynamic,destination,resolver
JmsInvokerClientInterceptor -> public void setDestinationResolver(DestinationResolver destinationResolver);1424362428;Set the DestinationResolver that is to be used to resolve Queue_references for this accessor._<p>The default resolver is a DynamicDestinationResolver. Specify a_JndiDestinationResolver for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		this.destinationResolver =_				(destinationResolver != null ? destinationResolver : new DynamicDestinationResolver())__	};set,the,destination,resolver,that,is,to,be,used,to,resolve,queue,references,for,this,accessor,p,the,default,resolver,is,a,dynamic,destination,resolver,specify,a,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver,null,destination,resolver,new,dynamic,destination,resolver
JmsInvokerClientInterceptor -> public void setDestinationResolver(DestinationResolver destinationResolver);1424380551;Set the DestinationResolver that is to be used to resolve Queue_references for this accessor._<p>The default resolver is a {@code DynamicDestinationResolver}. Specify a_{@code JndiDestinationResolver} for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		this.destinationResolver =_				(destinationResolver != null ? destinationResolver : new DynamicDestinationResolver())__	};set,the,destination,resolver,that,is,to,be,used,to,resolve,queue,references,for,this,accessor,p,the,default,resolver,is,a,code,dynamic,destination,resolver,specify,a,code,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver,null,destination,resolver,new,dynamic,destination,resolver
JmsInvokerClientInterceptor -> public void setDestinationResolver(DestinationResolver destinationResolver);1424380732;Set the DestinationResolver that is to be used to resolve Queue_references for this accessor._<p>The default resolver is a {@code DynamicDestinationResolver}. Specify a_{@code JndiDestinationResolver} for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		this.destinationResolver =_				(destinationResolver != null ? destinationResolver : new DynamicDestinationResolver())__	};set,the,destination,resolver,that,is,to,be,used,to,resolve,queue,references,for,this,accessor,p,the,default,resolver,is,a,code,dynamic,destination,resolver,specify,a,code,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver,null,destination,resolver,new,dynamic,destination,resolver
JmsInvokerClientInterceptor -> public void setQueueName(String queueName);1328020251;Set the name of target queue to send invoker requests to._The specified name will be dynamically resolved via the_{@link #setDestinationResolver DestinationResolver}.;public void setQueueName(String queueName) {_		this.queue = queueName__	};set,the,name,of,target,queue,to,send,invoker,requests,to,the,specified,name,will,be,dynamically,resolved,via,the,link,set,destination,resolver,destination,resolver;public,void,set,queue,name,string,queue,name,this,queue,queue,name
JmsInvokerClientInterceptor -> public void setQueueName(String queueName);1356735495;Set the name of target queue to send invoker requests to._The specified name will be dynamically resolved via the_{@link #setDestinationResolver DestinationResolver}.;public void setQueueName(String queueName) {_		this.queue = queueName__	};set,the,name,of,target,queue,to,send,invoker,requests,to,the,specified,name,will,be,dynamically,resolved,via,the,link,set,destination,resolver,destination,resolver;public,void,set,queue,name,string,queue,name,this,queue,queue,name
JmsInvokerClientInterceptor -> public void setQueueName(String queueName);1357119239;Set the name of target queue to send invoker requests to._The specified name will be dynamically resolved via the_{@link #setDestinationResolver DestinationResolver}.;public void setQueueName(String queueName) {_		this.queue = queueName__	};set,the,name,of,target,queue,to,send,invoker,requests,to,the,specified,name,will,be,dynamically,resolved,via,the,link,set,destination,resolver,destination,resolver;public,void,set,queue,name,string,queue,name,this,queue,queue,name
JmsInvokerClientInterceptor -> public void setQueueName(String queueName);1368482696;Set the name of target queue to send invoker requests to._The specified name will be dynamically resolved via the_{@link #setDestinationResolver DestinationResolver}.;public void setQueueName(String queueName) {_		this.queue = queueName__	};set,the,name,of,target,queue,to,send,invoker,requests,to,the,specified,name,will,be,dynamically,resolved,via,the,link,set,destination,resolver,destination,resolver;public,void,set,queue,name,string,queue,name,this,queue,queue,name
JmsInvokerClientInterceptor -> public void setQueueName(String queueName);1405696891;Set the name of target queue to send invoker requests to._The specified name will be dynamically resolved via the_{@link #setDestinationResolver DestinationResolver}.;public void setQueueName(String queueName) {_		this.queue = queueName__	};set,the,name,of,target,queue,to,send,invoker,requests,to,the,specified,name,will,be,dynamically,resolved,via,the,link,set,destination,resolver,destination,resolver;public,void,set,queue,name,string,queue,name,this,queue,queue,name
JmsInvokerClientInterceptor -> public void setQueueName(String queueName);1424362428;Set the name of target queue to send invoker requests to._The specified name will be dynamically resolved via the_{@link #setDestinationResolver DestinationResolver}.;public void setQueueName(String queueName) {_		this.queue = queueName__	};set,the,name,of,target,queue,to,send,invoker,requests,to,the,specified,name,will,be,dynamically,resolved,via,the,link,set,destination,resolver,destination,resolver;public,void,set,queue,name,string,queue,name,this,queue,queue,name
JmsInvokerClientInterceptor -> public void setQueueName(String queueName);1424380551;Set the name of target queue to send invoker requests to._<p>The specified name will be dynamically resolved via the_{@link #setDestinationResolver DestinationResolver}.;public void setQueueName(String queueName) {_		this.queue = queueName__	};set,the,name,of,target,queue,to,send,invoker,requests,to,p,the,specified,name,will,be,dynamically,resolved,via,the,link,set,destination,resolver,destination,resolver;public,void,set,queue,name,string,queue,name,this,queue,queue,name
JmsInvokerClientInterceptor -> public void setQueueName(String queueName);1424380732;Set the name of target queue to send invoker requests to._<p>The specified name will be dynamically resolved via the_{@link #setDestinationResolver DestinationResolver}.;public void setQueueName(String queueName) {_		this.queue = queueName__	};set,the,name,of,target,queue,to,send,invoker,requests,to,p,the,specified,name,will,be,dynamically,resolved,via,the,link,set,destination,resolver,destination,resolver;public,void,set,queue,name,string,queue,name,this,queue,queue,name
JmsInvokerClientInterceptor -> public void setQueueName(String queueName);1496837955;Set the name of target queue to send invoker requests to._<p>The specified name will be dynamically resolved via the_{@link #setDestinationResolver DestinationResolver}.;public void setQueueName(String queueName) {_		this.queue = queueName__	};set,the,name,of,target,queue,to,send,invoker,requests,to,p,the,specified,name,will,be,dynamically,resolved,via,the,link,set,destination,resolver,destination,resolver;public,void,set,queue,name,string,queue,name,this,queue,queue,name
JmsInvokerClientInterceptor -> public void setQueueName(String queueName);1498780456;Set the name of target queue to send invoker requests to._<p>The specified name will be dynamically resolved via the_{@link #setDestinationResolver DestinationResolver}.;public void setQueueName(String queueName) {_		this.queue = queueName__	};set,the,name,of,target,queue,to,send,invoker,requests,to,p,the,specified,name,will,be,dynamically,resolved,via,the,link,set,destination,resolver,destination,resolver;public,void,set,queue,name,string,queue,name,this,queue,queue,name
JmsInvokerClientInterceptor -> public void setQueueName(String queueName);1500416137;Set the name of target queue to send invoker requests to._<p>The specified name will be dynamically resolved via the_{@link #setDestinationResolver DestinationResolver}.;public void setQueueName(String queueName) {_		this.queue = queueName__	};set,the,name,of,target,queue,to,send,invoker,requests,to,p,the,specified,name,will,be,dynamically,resolved,via,the,link,set,destination,resolver,destination,resolver;public,void,set,queue,name,string,queue,name,this,queue,queue,name
JmsInvokerClientInterceptor -> public void setQueueName(String queueName);1500448076;Set the name of target queue to send invoker requests to._<p>The specified name will be dynamically resolved via the_{@link #setDestinationResolver DestinationResolver}.;public void setQueueName(String queueName) {_		this.queue = queueName__	};set,the,name,of,target,queue,to,send,invoker,requests,to,p,the,specified,name,will,be,dynamically,resolved,via,the,link,set,destination,resolver,destination,resolver;public,void,set,queue,name,string,queue,name,this,queue,queue,name
JmsInvokerClientInterceptor -> public void setRemoteInvocationFactory(@Nullable RemoteInvocationFactory remoteInvocationFactory);1496837955;Set the {@link RemoteInvocationFactory} to use for this accessor._<p>Default is a {@link DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(@Nullable RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory =_				(remoteInvocationFactory != null ? remoteInvocationFactory : new DefaultRemoteInvocationFactory())__	};set,the,link,remote,invocation,factory,to,use,for,this,accessor,p,default,is,a,link,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,nullable,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory,null,remote,invocation,factory,new,default,remote,invocation,factory
JmsInvokerClientInterceptor -> public void setRemoteInvocationFactory(@Nullable RemoteInvocationFactory remoteInvocationFactory);1498780456;Set the {@link RemoteInvocationFactory} to use for this accessor._<p>Default is a {@link DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(@Nullable RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory =_				(remoteInvocationFactory != null ? remoteInvocationFactory : new DefaultRemoteInvocationFactory())__	};set,the,link,remote,invocation,factory,to,use,for,this,accessor,p,default,is,a,link,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,nullable,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory,null,remote,invocation,factory,new,default,remote,invocation,factory
JmsInvokerClientInterceptor -> public void setRemoteInvocationFactory(@Nullable RemoteInvocationFactory remoteInvocationFactory);1500416137;Set the {@link RemoteInvocationFactory} to use for this accessor._<p>Default is a {@link DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(@Nullable RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory =_				(remoteInvocationFactory != null ? remoteInvocationFactory : new DefaultRemoteInvocationFactory())__	};set,the,link,remote,invocation,factory,to,use,for,this,accessor,p,default,is,a,link,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,nullable,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory,null,remote,invocation,factory,new,default,remote,invocation,factory
JmsInvokerClientInterceptor -> public void setRemoteInvocationFactory(@Nullable RemoteInvocationFactory remoteInvocationFactory);1500448076;Set the {@link RemoteInvocationFactory} to use for this accessor._<p>Default is a {@link DefaultRemoteInvocationFactory}._<p>A custom invocation factory can add further context information_to the invocation, for example user credentials.;public void setRemoteInvocationFactory(@Nullable RemoteInvocationFactory remoteInvocationFactory) {_		this.remoteInvocationFactory =_				(remoteInvocationFactory != null ? remoteInvocationFactory : new DefaultRemoteInvocationFactory())__	};set,the,link,remote,invocation,factory,to,use,for,this,accessor,p,default,is,a,link,default,remote,invocation,factory,p,a,custom,invocation,factory,can,add,further,context,information,to,the,invocation,for,example,user,credentials;public,void,set,remote,invocation,factory,nullable,remote,invocation,factory,remote,invocation,factory,this,remote,invocation,factory,remote,invocation,factory,null,remote,invocation,factory,new,default,remote,invocation,factory
JmsInvokerClientInterceptor -> public void setMessageConverter(@Nullable MessageConverter messageConverter);1496837955;Specify the {@link MessageConverter} to use for turning_{@link org.springframework.remoting.support.RemoteInvocation}_objects into request messages, as well as response messages into_{@link org.springframework.remoting.support.RemoteInvocationResult} objects._<p>Default is a {@link SimpleMessageConverter}, using a standard JMS_{@link javax.jms.ObjectMessage} for each invocation / invocation result_object._<p>Custom implementations may generally adapt {@link java.io.Serializable}_objects into special kinds of messages, or might be specifically tailored for_translating {@code RemoteInvocation(Result)s} into specific kinds of messages.;public void setMessageConverter(@Nullable MessageConverter messageConverter) {_		this.messageConverter = (messageConverter != null ? messageConverter : new SimpleMessageConverter())__	};specify,the,link,message,converter,to,use,for,turning,link,org,springframework,remoting,support,remote,invocation,objects,into,request,messages,as,well,as,response,messages,into,link,org,springframework,remoting,support,remote,invocation,result,objects,p,default,is,a,link,simple,message,converter,using,a,standard,jms,link,javax,jms,object,message,for,each,invocation,invocation,result,object,p,custom,implementations,may,generally,adapt,link,java,io,serializable,objects,into,special,kinds,of,messages,or,might,be,specifically,tailored,for,translating,code,remote,invocation,result,s,into,specific,kinds,of,messages;public,void,set,message,converter,nullable,message,converter,message,converter,this,message,converter,message,converter,null,message,converter,new,simple,message,converter
JmsInvokerClientInterceptor -> public void setMessageConverter(@Nullable MessageConverter messageConverter);1498780456;Specify the {@link MessageConverter} to use for turning_{@link org.springframework.remoting.support.RemoteInvocation}_objects into request messages, as well as response messages into_{@link org.springframework.remoting.support.RemoteInvocationResult} objects._<p>Default is a {@link SimpleMessageConverter}, using a standard JMS_{@link javax.jms.ObjectMessage} for each invocation / invocation result_object._<p>Custom implementations may generally adapt {@link java.io.Serializable}_objects into special kinds of messages, or might be specifically tailored for_translating {@code RemoteInvocation(Result)s} into specific kinds of messages.;public void setMessageConverter(@Nullable MessageConverter messageConverter) {_		this.messageConverter = (messageConverter != null ? messageConverter : new SimpleMessageConverter())__	};specify,the,link,message,converter,to,use,for,turning,link,org,springframework,remoting,support,remote,invocation,objects,into,request,messages,as,well,as,response,messages,into,link,org,springframework,remoting,support,remote,invocation,result,objects,p,default,is,a,link,simple,message,converter,using,a,standard,jms,link,javax,jms,object,message,for,each,invocation,invocation,result,object,p,custom,implementations,may,generally,adapt,link,java,io,serializable,objects,into,special,kinds,of,messages,or,might,be,specifically,tailored,for,translating,code,remote,invocation,result,s,into,specific,kinds,of,messages;public,void,set,message,converter,nullable,message,converter,message,converter,this,message,converter,message,converter,null,message,converter,new,simple,message,converter
JmsInvokerClientInterceptor -> public void setMessageConverter(@Nullable MessageConverter messageConverter);1500416137;Specify the {@link MessageConverter} to use for turning_{@link org.springframework.remoting.support.RemoteInvocation}_objects into request messages, as well as response messages into_{@link org.springframework.remoting.support.RemoteInvocationResult} objects._<p>Default is a {@link SimpleMessageConverter}, using a standard JMS_{@link javax.jms.ObjectMessage} for each invocation / invocation result_object._<p>Custom implementations may generally adapt {@link java.io.Serializable}_objects into special kinds of messages, or might be specifically tailored for_translating {@code RemoteInvocation(Result)s} into specific kinds of messages.;public void setMessageConverter(@Nullable MessageConverter messageConverter) {_		this.messageConverter = (messageConverter != null ? messageConverter : new SimpleMessageConverter())__	};specify,the,link,message,converter,to,use,for,turning,link,org,springframework,remoting,support,remote,invocation,objects,into,request,messages,as,well,as,response,messages,into,link,org,springframework,remoting,support,remote,invocation,result,objects,p,default,is,a,link,simple,message,converter,using,a,standard,jms,link,javax,jms,object,message,for,each,invocation,invocation,result,object,p,custom,implementations,may,generally,adapt,link,java,io,serializable,objects,into,special,kinds,of,messages,or,might,be,specifically,tailored,for,translating,code,remote,invocation,result,s,into,specific,kinds,of,messages;public,void,set,message,converter,nullable,message,converter,message,converter,this,message,converter,message,converter,null,message,converter,new,simple,message,converter
JmsInvokerClientInterceptor -> public void setMessageConverter(@Nullable MessageConverter messageConverter);1500448076;Specify the {@link MessageConverter} to use for turning_{@link org.springframework.remoting.support.RemoteInvocation}_objects into request messages, as well as response messages into_{@link org.springframework.remoting.support.RemoteInvocationResult} objects._<p>Default is a {@link SimpleMessageConverter}, using a standard JMS_{@link javax.jms.ObjectMessage} for each invocation / invocation result_object._<p>Custom implementations may generally adapt {@link java.io.Serializable}_objects into special kinds of messages, or might be specifically tailored for_translating {@code RemoteInvocation(Result)s} into specific kinds of messages.;public void setMessageConverter(@Nullable MessageConverter messageConverter) {_		this.messageConverter = (messageConverter != null ? messageConverter : new SimpleMessageConverter())__	};specify,the,link,message,converter,to,use,for,turning,link,org,springframework,remoting,support,remote,invocation,objects,into,request,messages,as,well,as,response,messages,into,link,org,springframework,remoting,support,remote,invocation,result,objects,p,default,is,a,link,simple,message,converter,using,a,standard,jms,link,javax,jms,object,message,for,each,invocation,invocation,result,object,p,custom,implementations,may,generally,adapt,link,java,io,serializable,objects,into,special,kinds,of,messages,or,might,be,specifically,tailored,for,translating,code,remote,invocation,result,s,into,specific,kinds,of,messages;public,void,set,message,converter,nullable,message,converter,message,converter,this,message,converter,message,converter,null,message,converter,new,simple,message,converter
JmsInvokerClientInterceptor -> @Nullable 	protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException;1496837955;Actually execute the given request, sending the invoker request message_to the specified target queue and waiting for a corresponding response._<p>The default implementation is based on standard JMS send/receive,_using a {@link javax.jms.TemporaryQueue} for receiving the response._@param session the JMS Session to use_@param queue the resolved target Queue to send to_@param requestMessage the JMS Message to send_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure;@Nullable_	protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException {_		TemporaryQueue responseQueue = null__		MessageProducer producer = null__		MessageConsumer consumer = null__		try {_			responseQueue = session.createTemporaryQueue()__			producer = session.createProducer(queue)__			consumer = session.createConsumer(responseQueue)__			requestMessage.setJMSReplyTo(responseQueue)__			producer.send(requestMessage)__			long timeout = getReceiveTimeout()__			return (timeout > 0 ? consumer.receive(timeout) : consumer.receive())__		}_		finally {_			JmsUtils.closeMessageConsumer(consumer)__			JmsUtils.closeMessageProducer(producer)__			if (responseQueue != null) {_				responseQueue.delete()__			}_		}_	};actually,execute,the,given,request,sending,the,invoker,request,message,to,the,specified,target,queue,and,waiting,for,a,corresponding,response,p,the,default,implementation,is,based,on,standard,jms,send,receive,using,a,link,javax,jms,temporary,queue,for,receiving,the,response,param,session,the,jms,session,to,use,param,queue,the,resolved,target,queue,to,send,to,param,request,message,the,jms,message,to,send,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure;nullable,protected,message,do,execute,request,session,session,queue,queue,message,request,message,throws,jmsexception,temporary,queue,response,queue,null,message,producer,producer,null,message,consumer,consumer,null,try,response,queue,session,create,temporary,queue,producer,session,create,producer,queue,consumer,session,create,consumer,response,queue,request,message,set,jmsreply,to,response,queue,producer,send,request,message,long,timeout,get,receive,timeout,return,timeout,0,consumer,receive,timeout,consumer,receive,finally,jms,utils,close,message,consumer,consumer,jms,utils,close,message,producer,producer,if,response,queue,null,response,queue,delete
JmsInvokerClientInterceptor -> @Nullable 	protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException;1498780456;Actually execute the given request, sending the invoker request message_to the specified target queue and waiting for a corresponding response._<p>The default implementation is based on standard JMS send/receive,_using a {@link javax.jms.TemporaryQueue} for receiving the response._@param session the JMS Session to use_@param queue the resolved target Queue to send to_@param requestMessage the JMS Message to send_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure;@Nullable_	protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException {_		TemporaryQueue responseQueue = null__		MessageProducer producer = null__		MessageConsumer consumer = null__		try {_			responseQueue = session.createTemporaryQueue()__			producer = session.createProducer(queue)__			consumer = session.createConsumer(responseQueue)__			requestMessage.setJMSReplyTo(responseQueue)__			producer.send(requestMessage)__			long timeout = getReceiveTimeout()__			return (timeout > 0 ? consumer.receive(timeout) : consumer.receive())__		}_		finally {_			JmsUtils.closeMessageConsumer(consumer)__			JmsUtils.closeMessageProducer(producer)__			if (responseQueue != null) {_				responseQueue.delete()__			}_		}_	};actually,execute,the,given,request,sending,the,invoker,request,message,to,the,specified,target,queue,and,waiting,for,a,corresponding,response,p,the,default,implementation,is,based,on,standard,jms,send,receive,using,a,link,javax,jms,temporary,queue,for,receiving,the,response,param,session,the,jms,session,to,use,param,queue,the,resolved,target,queue,to,send,to,param,request,message,the,jms,message,to,send,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure;nullable,protected,message,do,execute,request,session,session,queue,queue,message,request,message,throws,jmsexception,temporary,queue,response,queue,null,message,producer,producer,null,message,consumer,consumer,null,try,response,queue,session,create,temporary,queue,producer,session,create,producer,queue,consumer,session,create,consumer,response,queue,request,message,set,jmsreply,to,response,queue,producer,send,request,message,long,timeout,get,receive,timeout,return,timeout,0,consumer,receive,timeout,consumer,receive,finally,jms,utils,close,message,consumer,consumer,jms,utils,close,message,producer,producer,if,response,queue,null,response,queue,delete
JmsInvokerClientInterceptor -> @Nullable 	protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException;1500416137;Actually execute the given request, sending the invoker request message_to the specified target queue and waiting for a corresponding response._<p>The default implementation is based on standard JMS send/receive,_using a {@link javax.jms.TemporaryQueue} for receiving the response._@param session the JMS Session to use_@param queue the resolved target Queue to send to_@param requestMessage the JMS Message to send_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure;@Nullable_	protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException {_		TemporaryQueue responseQueue = null__		MessageProducer producer = null__		MessageConsumer consumer = null__		try {_			responseQueue = session.createTemporaryQueue()__			producer = session.createProducer(queue)__			consumer = session.createConsumer(responseQueue)__			requestMessage.setJMSReplyTo(responseQueue)__			producer.send(requestMessage)__			long timeout = getReceiveTimeout()__			return (timeout > 0 ? consumer.receive(timeout) : consumer.receive())__		}_		finally {_			JmsUtils.closeMessageConsumer(consumer)__			JmsUtils.closeMessageProducer(producer)__			if (responseQueue != null) {_				responseQueue.delete()__			}_		}_	};actually,execute,the,given,request,sending,the,invoker,request,message,to,the,specified,target,queue,and,waiting,for,a,corresponding,response,p,the,default,implementation,is,based,on,standard,jms,send,receive,using,a,link,javax,jms,temporary,queue,for,receiving,the,response,param,session,the,jms,session,to,use,param,queue,the,resolved,target,queue,to,send,to,param,request,message,the,jms,message,to,send,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure;nullable,protected,message,do,execute,request,session,session,queue,queue,message,request,message,throws,jmsexception,temporary,queue,response,queue,null,message,producer,producer,null,message,consumer,consumer,null,try,response,queue,session,create,temporary,queue,producer,session,create,producer,queue,consumer,session,create,consumer,response,queue,request,message,set,jmsreply,to,response,queue,producer,send,request,message,long,timeout,get,receive,timeout,return,timeout,0,consumer,receive,timeout,consumer,receive,finally,jms,utils,close,message,consumer,consumer,jms,utils,close,message,producer,producer,if,response,queue,null,response,queue,delete
JmsInvokerClientInterceptor -> @Nullable 	protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException;1500448076;Actually execute the given request, sending the invoker request message_to the specified target queue and waiting for a corresponding response._<p>The default implementation is based on standard JMS send/receive,_using a {@link javax.jms.TemporaryQueue} for receiving the response._@param session the JMS Session to use_@param queue the resolved target Queue to send to_@param requestMessage the JMS Message to send_@return the RemoteInvocationResult object_@throws JMSException in case of JMS failure;@Nullable_	protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException {_		TemporaryQueue responseQueue = null__		MessageProducer producer = null__		MessageConsumer consumer = null__		try {_			responseQueue = session.createTemporaryQueue()__			producer = session.createProducer(queue)__			consumer = session.createConsumer(responseQueue)__			requestMessage.setJMSReplyTo(responseQueue)__			producer.send(requestMessage)__			long timeout = getReceiveTimeout()__			return (timeout > 0 ? consumer.receive(timeout) : consumer.receive())__		}_		finally {_			JmsUtils.closeMessageConsumer(consumer)__			JmsUtils.closeMessageProducer(producer)__			if (responseQueue != null) {_				responseQueue.delete()__			}_		}_	};actually,execute,the,given,request,sending,the,invoker,request,message,to,the,specified,target,queue,and,waiting,for,a,corresponding,response,p,the,default,implementation,is,based,on,standard,jms,send,receive,using,a,link,javax,jms,temporary,queue,for,receiving,the,response,param,session,the,jms,session,to,use,param,queue,the,resolved,target,queue,to,send,to,param,request,message,the,jms,message,to,send,return,the,remote,invocation,result,object,throws,jmsexception,in,case,of,jms,failure;nullable,protected,message,do,execute,request,session,session,queue,queue,message,request,message,throws,jmsexception,temporary,queue,response,queue,null,message,producer,producer,null,message,consumer,consumer,null,try,response,queue,session,create,temporary,queue,producer,session,create,producer,queue,consumer,session,create,consumer,response,queue,request,message,set,jmsreply,to,response,queue,producer,send,request,message,long,timeout,get,receive,timeout,return,timeout,0,consumer,receive,timeout,consumer,receive,finally,jms,utils,close,message,consumer,consumer,jms,utils,close,message,producer,producer,if,response,queue,null,response,queue,delete
JmsInvokerClientInterceptor -> protected long getReceiveTimeout();1328020251;Return the timeout to use for receiving the response message for a request_(in milliseconds).;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds;protected,long,get,receive,timeout,return,this,receive,timeout
JmsInvokerClientInterceptor -> protected long getReceiveTimeout();1356735495;Return the timeout to use for receiving the response message for a request_(in milliseconds).;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds;protected,long,get,receive,timeout,return,this,receive,timeout
JmsInvokerClientInterceptor -> protected long getReceiveTimeout();1357119239;Return the timeout to use for receiving the response message for a request_(in milliseconds).;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds;protected,long,get,receive,timeout,return,this,receive,timeout
JmsInvokerClientInterceptor -> protected long getReceiveTimeout();1368482696;Return the timeout to use for receiving the response message for a request_(in milliseconds).;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds;protected,long,get,receive,timeout,return,this,receive,timeout
JmsInvokerClientInterceptor -> protected long getReceiveTimeout();1405696891;Return the timeout to use for receiving the response message for a request_(in milliseconds).;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds;protected,long,get,receive,timeout,return,this,receive,timeout
JmsInvokerClientInterceptor -> protected long getReceiveTimeout();1424362428;Return the timeout to use for receiving the response message for a request_(in milliseconds).;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds;protected,long,get,receive,timeout,return,this,receive,timeout
JmsInvokerClientInterceptor -> protected long getReceiveTimeout();1424380551;Return the timeout to use for receiving the response message for a request_(in milliseconds).;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds;protected,long,get,receive,timeout,return,this,receive,timeout
JmsInvokerClientInterceptor -> protected long getReceiveTimeout();1424380732;Return the timeout to use for receiving the response message for a request_(in milliseconds).;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds;protected,long,get,receive,timeout,return,this,receive,timeout
JmsInvokerClientInterceptor -> protected long getReceiveTimeout();1496837955;Return the timeout to use for receiving the response message for a request_(in milliseconds).;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds;protected,long,get,receive,timeout,return,this,receive,timeout
JmsInvokerClientInterceptor -> protected long getReceiveTimeout();1498780456;Return the timeout to use for receiving the response message for a request_(in milliseconds).;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds;protected,long,get,receive,timeout,return,this,receive,timeout
JmsInvokerClientInterceptor -> protected long getReceiveTimeout();1500416137;Return the timeout to use for receiving the response message for a request_(in milliseconds).;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds;protected,long,get,receive,timeout,return,this,receive,timeout
JmsInvokerClientInterceptor -> protected long getReceiveTimeout();1500448076;Return the timeout to use for receiving the response message for a request_(in milliseconds).;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,timeout,to,use,for,receiving,the,response,message,for,a,request,in,milliseconds;protected,long,get,receive,timeout,return,this,receive,timeout
