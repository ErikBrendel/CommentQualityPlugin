commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the {@link InvocableHandlerMethod} to use to invoke the method  * processing an incoming {@link javax.jms.Message}.  */ ;/**  * Set the {@link InvocableHandlerMethod} to use to invoke the method  * processing an incoming {@link javax.jms.Message}.  */ public void setHandlerMethod(InvocableHandlerMethod handlerMethod) {     this.handlerMethod = handlerMethod. }
false;private;0;4;;private InvocableHandlerMethod getHandlerMethod() {     Assert.state(this.handlerMethod != null, "No HandlerMethod set").     return this.handlerMethod. }
false;public;2;14;;@Override public void onMessage(javax.jms.Message jmsMessage, @Nullable Session session) throws JMSException {     Message<?> message = toMessagingMessage(jmsMessage).     if (logger.isDebugEnabled()) {         logger.debug("Processing [" + message + "]").     }     Object result = invokeHandler(jmsMessage, session, message).     if (result != null) {         handleResult(result, jmsMessage, session).     } else {         logger.trace("No result object given - no result to handle").     } }
false;protected;1;10;;@Override protected Object preProcessResponse(Object result) {     MethodParameter returnType = getHandlerMethod().getReturnType().     if (result instanceof Message) {         return MessageBuilder.fromMessage((Message<?>) result).setHeader(AbstractMessageSendingTemplate.CONVERSION_HINT_HEADER, returnType).build().     }     return MessageBuilder.withPayload(result).setHeader(AbstractMessageSendingTemplate.CONVERSION_HINT_HEADER, returnType).build(). }
false;protected;1;8;;protected Message<?> toMessagingMessage(javax.jms.Message jmsMessage) {     try {         return (Message<?>) getMessagingMessageConverter().fromMessage(jmsMessage).     } catch (JMSException ex) {         throw new MessageConversionException("Could not convert JMS message", ex).     } }
true;private;3;15;/**  * Invoke the handler, wrapping any exception to a {@link ListenerExecutionFailedException}  * with a dedicated error message.  */ ;/**  * Invoke the handler, wrapping any exception to a {@link ListenerExecutionFailedException}  * with a dedicated error message.  */ @Nullable private Object invokeHandler(javax.jms.Message jmsMessage, @Nullable Session session, Message<?> message) {     InvocableHandlerMethod handlerMethod = getHandlerMethod().     try {         return handlerMethod.invoke(message, jmsMessage, session).     } catch (MessagingException ex) {         throw new ListenerExecutionFailedException(createMessagingErrorMessage("Listener method could not be invoked with incoming message"), ex).     } catch (Exception ex) {         throw new ListenerExecutionFailedException("Listener method '" + handlerMethod.getMethod().toGenericString() + "' threw exception", ex).     } }
false;private;1;8;;private String createMessagingErrorMessage(String description) {     InvocableHandlerMethod handlerMethod = getHandlerMethod().     StringBuilder sb = new StringBuilder(description).append("\n").append("Endpoint handler details:\n").append("Method [").append(handlerMethod.getMethod()).append("]\n").append("Bean [").append(handlerMethod.getBean()).append("]\n").     return sb.toString(). }
