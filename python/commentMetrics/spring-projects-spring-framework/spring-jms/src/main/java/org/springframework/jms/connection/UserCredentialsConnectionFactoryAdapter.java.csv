# id;timestamp;commentText;codeText;commentWords;codeWords
UserCredentialsConnectionFactoryAdapter -> protected QueueConnection doCreateQueueConnection( 			@Nullable String username, @Nullable String password) throws JMSException;1498780456;This implementation delegates to the {@code createQueueConnection(username, password)}_method of the target QueueConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createQueueConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.QueueConnectionFactory#createQueueConnection(String, String)_@see javax.jms.QueueConnectionFactory#createQueueConnection();protected QueueConnection doCreateQueueConnection(_			@Nullable String username, @Nullable String password) throws JMSException {__		ConnectionFactory target = obtainTargetConnectionFactory()__		if (!(target instanceof QueueConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a QueueConnectionFactory")__		}_		QueueConnectionFactory queueFactory = (QueueConnectionFactory) target__		if (StringUtils.hasLength(username)) {_			return queueFactory.createQueueConnection(username, password)__		}_		else {_			return queueFactory.createQueueConnection()__		}_	};this,implementation,delegates,to,the,code,create,queue,connection,username,password,method,of,the,target,queue,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,queue,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,queue,connection,factory,create,queue,connection,string,string,see,javax,jms,queue,connection,factory,create,queue,connection;protected,queue,connection,do,create,queue,connection,nullable,string,username,nullable,string,password,throws,jmsexception,connection,factory,target,obtain,target,connection,factory,if,target,instanceof,queue,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,queue,connection,factory,queue,connection,factory,queue,factory,queue,connection,factory,target,if,string,utils,has,length,username,return,queue,factory,create,queue,connection,username,password,else,return,queue,factory,create,queue,connection
UserCredentialsConnectionFactoryAdapter -> protected QueueConnection doCreateQueueConnection( 			@Nullable String username, @Nullable String password) throws JMSException;1530174524;This implementation delegates to the {@code createQueueConnection(username, password)}_method of the target QueueConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createQueueConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.QueueConnectionFactory#createQueueConnection(String, String)_@see javax.jms.QueueConnectionFactory#createQueueConnection();protected QueueConnection doCreateQueueConnection(_			@Nullable String username, @Nullable String password) throws JMSException {__		ConnectionFactory target = obtainTargetConnectionFactory()__		if (!(target instanceof QueueConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a QueueConnectionFactory")__		}_		QueueConnectionFactory queueFactory = (QueueConnectionFactory) target__		if (StringUtils.hasLength(username)) {_			return queueFactory.createQueueConnection(username, password)__		}_		else {_			return queueFactory.createQueueConnection()__		}_	};this,implementation,delegates,to,the,code,create,queue,connection,username,password,method,of,the,target,queue,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,queue,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,queue,connection,factory,create,queue,connection,string,string,see,javax,jms,queue,connection,factory,create,queue,connection;protected,queue,connection,do,create,queue,connection,nullable,string,username,nullable,string,password,throws,jmsexception,connection,factory,target,obtain,target,connection,factory,if,target,instanceof,queue,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,queue,connection,factory,queue,connection,factory,queue,factory,queue,connection,factory,target,if,string,utils,has,length,username,return,queue,factory,create,queue,connection,username,password,else,return,queue,factory,create,queue,connection
UserCredentialsConnectionFactoryAdapter -> protected QueueConnection doCreateQueueConnection( 			@Nullable String username, @Nullable String password) throws JMSException;1544613334;This implementation delegates to the {@code createQueueConnection(username, password)}_method of the target QueueConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createQueueConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.QueueConnectionFactory#createQueueConnection(String, String)_@see javax.jms.QueueConnectionFactory#createQueueConnection();protected QueueConnection doCreateQueueConnection(_			@Nullable String username, @Nullable String password) throws JMSException {__		ConnectionFactory target = obtainTargetConnectionFactory()__		if (!(target instanceof QueueConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a QueueConnectionFactory")__		}_		QueueConnectionFactory queueFactory = (QueueConnectionFactory) target__		if (StringUtils.hasLength(username)) {_			return queueFactory.createQueueConnection(username, password)__		}_		else {_			return queueFactory.createQueueConnection()__		}_	};this,implementation,delegates,to,the,code,create,queue,connection,username,password,method,of,the,target,queue,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,queue,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,queue,connection,factory,create,queue,connection,string,string,see,javax,jms,queue,connection,factory,create,queue,connection;protected,queue,connection,do,create,queue,connection,nullable,string,username,nullable,string,password,throws,jmsexception,connection,factory,target,obtain,target,connection,factory,if,target,instanceof,queue,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,queue,connection,factory,queue,connection,factory,queue,factory,queue,connection,factory,target,if,string,utils,has,length,username,return,queue,factory,create,queue,connection,username,password,else,return,queue,factory,create,queue,connection
UserCredentialsConnectionFactoryAdapter -> protected QueueConnection doCreateQueueConnection( 			@Nullable String username, @Nullable String password) throws JMSException;1544617266;This implementation delegates to the {@code createQueueConnection(username, password)}_method of the target QueueConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createQueueConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.QueueConnectionFactory#createQueueConnection(String, String)_@see javax.jms.QueueConnectionFactory#createQueueConnection();protected QueueConnection doCreateQueueConnection(_			@Nullable String username, @Nullable String password) throws JMSException {__		ConnectionFactory target = obtainTargetConnectionFactory()__		if (!(target instanceof QueueConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a QueueConnectionFactory")__		}_		QueueConnectionFactory queueFactory = (QueueConnectionFactory) target__		if (StringUtils.hasLength(username)) {_			return queueFactory.createQueueConnection(username, password)__		}_		else {_			return queueFactory.createQueueConnection()__		}_	};this,implementation,delegates,to,the,code,create,queue,connection,username,password,method,of,the,target,queue,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,queue,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,queue,connection,factory,create,queue,connection,string,string,see,javax,jms,queue,connection,factory,create,queue,connection;protected,queue,connection,do,create,queue,connection,nullable,string,username,nullable,string,password,throws,jmsexception,connection,factory,target,obtain,target,connection,factory,if,target,instanceof,queue,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,queue,connection,factory,queue,connection,factory,queue,factory,queue,connection,factory,target,if,string,utils,has,length,username,return,queue,factory,create,queue,connection,username,password,else,return,queue,factory,create,queue,connection
UserCredentialsConnectionFactoryAdapter -> protected Connection doCreateConnection(String username, String password) throws JMSException;1328020251;This implementation delegates to the <code>createConnection(username, password)</code>_method of the target ConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_<code>createConnection()</code> method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.ConnectionFactory#createConnection(String, String)_@see javax.jms.ConnectionFactory#createConnection();protected Connection doCreateConnection(String username, String password) throws JMSException {_		Assert.state(this.targetConnectionFactory != null, "'targetConnectionFactory' is required")__		if (StringUtils.hasLength(username)) {_			return this.targetConnectionFactory.createConnection(username, password)__		}_		else {_			return this.targetConnectionFactory.createConnection()__		}_	};this,implementation,delegates,to,the,code,create,connection,username,password,code,method,of,the,target,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,connection,code,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,connection,factory,create,connection,string,string,see,javax,jms,connection,factory,create,connection;protected,connection,do,create,connection,string,username,string,password,throws,jmsexception,assert,state,this,target,connection,factory,null,target,connection,factory,is,required,if,string,utils,has,length,username,return,this,target,connection,factory,create,connection,username,password,else,return,this,target,connection,factory,create,connection
UserCredentialsConnectionFactoryAdapter -> protected Connection doCreateConnection(String username, String password) throws JMSException;1356735495;This implementation delegates to the {@code createConnection(username, password)}_method of the target ConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.ConnectionFactory#createConnection(String, String)_@see javax.jms.ConnectionFactory#createConnection();protected Connection doCreateConnection(String username, String password) throws JMSException {_		Assert.state(this.targetConnectionFactory != null, "'targetConnectionFactory' is required")__		if (StringUtils.hasLength(username)) {_			return this.targetConnectionFactory.createConnection(username, password)__		}_		else {_			return this.targetConnectionFactory.createConnection()__		}_	};this,implementation,delegates,to,the,code,create,connection,username,password,method,of,the,target,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,connection,factory,create,connection,string,string,see,javax,jms,connection,factory,create,connection;protected,connection,do,create,connection,string,username,string,password,throws,jmsexception,assert,state,this,target,connection,factory,null,target,connection,factory,is,required,if,string,utils,has,length,username,return,this,target,connection,factory,create,connection,username,password,else,return,this,target,connection,factory,create,connection
UserCredentialsConnectionFactoryAdapter -> protected Connection doCreateConnection(String username, String password) throws JMSException;1357119239;This implementation delegates to the {@code createConnection(username, password)}_method of the target ConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.ConnectionFactory#createConnection(String, String)_@see javax.jms.ConnectionFactory#createConnection();protected Connection doCreateConnection(String username, String password) throws JMSException {_		Assert.state(this.targetConnectionFactory != null, "'targetConnectionFactory' is required")__		if (StringUtils.hasLength(username)) {_			return this.targetConnectionFactory.createConnection(username, password)__		}_		else {_			return this.targetConnectionFactory.createConnection()__		}_	};this,implementation,delegates,to,the,code,create,connection,username,password,method,of,the,target,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,connection,factory,create,connection,string,string,see,javax,jms,connection,factory,create,connection;protected,connection,do,create,connection,string,username,string,password,throws,jmsexception,assert,state,this,target,connection,factory,null,target,connection,factory,is,required,if,string,utils,has,length,username,return,this,target,connection,factory,create,connection,username,password,else,return,this,target,connection,factory,create,connection
UserCredentialsConnectionFactoryAdapter -> protected Connection doCreateConnection(String username, String password) throws JMSException;1368482696;This implementation delegates to the {@code createConnection(username, password)}_method of the target ConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.ConnectionFactory#createConnection(String, String)_@see javax.jms.ConnectionFactory#createConnection();protected Connection doCreateConnection(String username, String password) throws JMSException {_		Assert.state(this.targetConnectionFactory != null, "'targetConnectionFactory' is required")__		if (StringUtils.hasLength(username)) {_			return this.targetConnectionFactory.createConnection(username, password)__		}_		else {_			return this.targetConnectionFactory.createConnection()__		}_	};this,implementation,delegates,to,the,code,create,connection,username,password,method,of,the,target,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,connection,factory,create,connection,string,string,see,javax,jms,connection,factory,create,connection;protected,connection,do,create,connection,string,username,string,password,throws,jmsexception,assert,state,this,target,connection,factory,null,target,connection,factory,is,required,if,string,utils,has,length,username,return,this,target,connection,factory,create,connection,username,password,else,return,this,target,connection,factory,create,connection
UserCredentialsConnectionFactoryAdapter -> protected Connection doCreateConnection(String username, String password) throws JMSException;1467730834;This implementation delegates to the {@code createConnection(username, password)}_method of the target ConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.ConnectionFactory#createConnection(String, String)_@see javax.jms.ConnectionFactory#createConnection();protected Connection doCreateConnection(String username, String password) throws JMSException {_		Assert.state(this.targetConnectionFactory != null, "'targetConnectionFactory' is required")__		if (StringUtils.hasLength(username)) {_			return this.targetConnectionFactory.createConnection(username, password)__		}_		else {_			return this.targetConnectionFactory.createConnection()__		}_	};this,implementation,delegates,to,the,code,create,connection,username,password,method,of,the,target,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,connection,factory,create,connection,string,string,see,javax,jms,connection,factory,create,connection;protected,connection,do,create,connection,string,username,string,password,throws,jmsexception,assert,state,this,target,connection,factory,null,target,connection,factory,is,required,if,string,utils,has,length,username,return,this,target,connection,factory,create,connection,username,password,else,return,this,target,connection,factory,create,connection
UserCredentialsConnectionFactoryAdapter -> protected Connection doCreateConnection(String username, String password) throws JMSException;1467749899;This implementation delegates to the {@code createConnection(username, password)}_method of the target ConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.ConnectionFactory#createConnection(String, String)_@see javax.jms.ConnectionFactory#createConnection();protected Connection doCreateConnection(String username, String password) throws JMSException {_		ConnectionFactory target = obtainTargetConnectionFactory()__		if (StringUtils.hasLength(username)) {_			return target.createConnection(username, password)__		}_		else {_			return target.createConnection()__		}_	};this,implementation,delegates,to,the,code,create,connection,username,password,method,of,the,target,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,connection,factory,create,connection,string,string,see,javax,jms,connection,factory,create,connection;protected,connection,do,create,connection,string,username,string,password,throws,jmsexception,connection,factory,target,obtain,target,connection,factory,if,string,utils,has,length,username,return,target,create,connection,username,password,else,return,target,create,connection
UserCredentialsConnectionFactoryAdapter -> protected QueueConnection doCreateQueueConnection(String username, String password) throws JMSException;1328020251;This implementation delegates to the <code>createQueueConnection(username, password)</code>_method of the target QueueConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_<code>createQueueConnection()</code> method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.QueueConnectionFactory#createQueueConnection(String, String)_@see javax.jms.QueueConnectionFactory#createQueueConnection();protected QueueConnection doCreateQueueConnection(String username, String password) throws JMSException {_		Assert.state(this.targetConnectionFactory != null, "'targetConnectionFactory' is required")__		if (!(this.targetConnectionFactory instanceof QueueConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a QueueConnectionFactory")__		}_		QueueConnectionFactory queueFactory = (QueueConnectionFactory) this.targetConnectionFactory__		if (StringUtils.hasLength(username)) {_			return queueFactory.createQueueConnection(username, password)__		}_		else {_			return queueFactory.createQueueConnection()__		}_	};this,implementation,delegates,to,the,code,create,queue,connection,username,password,code,method,of,the,target,queue,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,queue,connection,code,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,queue,connection,factory,create,queue,connection,string,string,see,javax,jms,queue,connection,factory,create,queue,connection;protected,queue,connection,do,create,queue,connection,string,username,string,password,throws,jmsexception,assert,state,this,target,connection,factory,null,target,connection,factory,is,required,if,this,target,connection,factory,instanceof,queue,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,queue,connection,factory,queue,connection,factory,queue,factory,queue,connection,factory,this,target,connection,factory,if,string,utils,has,length,username,return,queue,factory,create,queue,connection,username,password,else,return,queue,factory,create,queue,connection
UserCredentialsConnectionFactoryAdapter -> protected QueueConnection doCreateQueueConnection(String username, String password) throws JMSException;1356735495;This implementation delegates to the {@code createQueueConnection(username, password)}_method of the target QueueConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createQueueConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.QueueConnectionFactory#createQueueConnection(String, String)_@see javax.jms.QueueConnectionFactory#createQueueConnection();protected QueueConnection doCreateQueueConnection(String username, String password) throws JMSException {_		Assert.state(this.targetConnectionFactory != null, "'targetConnectionFactory' is required")__		if (!(this.targetConnectionFactory instanceof QueueConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a QueueConnectionFactory")__		}_		QueueConnectionFactory queueFactory = (QueueConnectionFactory) this.targetConnectionFactory__		if (StringUtils.hasLength(username)) {_			return queueFactory.createQueueConnection(username, password)__		}_		else {_			return queueFactory.createQueueConnection()__		}_	};this,implementation,delegates,to,the,code,create,queue,connection,username,password,method,of,the,target,queue,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,queue,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,queue,connection,factory,create,queue,connection,string,string,see,javax,jms,queue,connection,factory,create,queue,connection;protected,queue,connection,do,create,queue,connection,string,username,string,password,throws,jmsexception,assert,state,this,target,connection,factory,null,target,connection,factory,is,required,if,this,target,connection,factory,instanceof,queue,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,queue,connection,factory,queue,connection,factory,queue,factory,queue,connection,factory,this,target,connection,factory,if,string,utils,has,length,username,return,queue,factory,create,queue,connection,username,password,else,return,queue,factory,create,queue,connection
UserCredentialsConnectionFactoryAdapter -> protected QueueConnection doCreateQueueConnection(String username, String password) throws JMSException;1357119239;This implementation delegates to the {@code createQueueConnection(username, password)}_method of the target QueueConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createQueueConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.QueueConnectionFactory#createQueueConnection(String, String)_@see javax.jms.QueueConnectionFactory#createQueueConnection();protected QueueConnection doCreateQueueConnection(String username, String password) throws JMSException {_		Assert.state(this.targetConnectionFactory != null, "'targetConnectionFactory' is required")__		if (!(this.targetConnectionFactory instanceof QueueConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a QueueConnectionFactory")__		}_		QueueConnectionFactory queueFactory = (QueueConnectionFactory) this.targetConnectionFactory__		if (StringUtils.hasLength(username)) {_			return queueFactory.createQueueConnection(username, password)__		}_		else {_			return queueFactory.createQueueConnection()__		}_	};this,implementation,delegates,to,the,code,create,queue,connection,username,password,method,of,the,target,queue,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,queue,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,queue,connection,factory,create,queue,connection,string,string,see,javax,jms,queue,connection,factory,create,queue,connection;protected,queue,connection,do,create,queue,connection,string,username,string,password,throws,jmsexception,assert,state,this,target,connection,factory,null,target,connection,factory,is,required,if,this,target,connection,factory,instanceof,queue,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,queue,connection,factory,queue,connection,factory,queue,factory,queue,connection,factory,this,target,connection,factory,if,string,utils,has,length,username,return,queue,factory,create,queue,connection,username,password,else,return,queue,factory,create,queue,connection
UserCredentialsConnectionFactoryAdapter -> protected QueueConnection doCreateQueueConnection(String username, String password) throws JMSException;1368482696;This implementation delegates to the {@code createQueueConnection(username, password)}_method of the target QueueConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createQueueConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.QueueConnectionFactory#createQueueConnection(String, String)_@see javax.jms.QueueConnectionFactory#createQueueConnection();protected QueueConnection doCreateQueueConnection(String username, String password) throws JMSException {_		Assert.state(this.targetConnectionFactory != null, "'targetConnectionFactory' is required")__		if (!(this.targetConnectionFactory instanceof QueueConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a QueueConnectionFactory")__		}_		QueueConnectionFactory queueFactory = (QueueConnectionFactory) this.targetConnectionFactory__		if (StringUtils.hasLength(username)) {_			return queueFactory.createQueueConnection(username, password)__		}_		else {_			return queueFactory.createQueueConnection()__		}_	};this,implementation,delegates,to,the,code,create,queue,connection,username,password,method,of,the,target,queue,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,queue,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,queue,connection,factory,create,queue,connection,string,string,see,javax,jms,queue,connection,factory,create,queue,connection;protected,queue,connection,do,create,queue,connection,string,username,string,password,throws,jmsexception,assert,state,this,target,connection,factory,null,target,connection,factory,is,required,if,this,target,connection,factory,instanceof,queue,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,queue,connection,factory,queue,connection,factory,queue,factory,queue,connection,factory,this,target,connection,factory,if,string,utils,has,length,username,return,queue,factory,create,queue,connection,username,password,else,return,queue,factory,create,queue,connection
UserCredentialsConnectionFactoryAdapter -> protected QueueConnection doCreateQueueConnection(String username, String password) throws JMSException;1467730834;This implementation delegates to the {@code createQueueConnection(username, password)}_method of the target QueueConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createQueueConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.QueueConnectionFactory#createQueueConnection(String, String)_@see javax.jms.QueueConnectionFactory#createQueueConnection();protected QueueConnection doCreateQueueConnection(String username, String password) throws JMSException {_		Assert.state(this.targetConnectionFactory != null, "'targetConnectionFactory' is required")__		if (!(this.targetConnectionFactory instanceof QueueConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a QueueConnectionFactory")__		}_		QueueConnectionFactory queueFactory = (QueueConnectionFactory) this.targetConnectionFactory__		if (StringUtils.hasLength(username)) {_			return queueFactory.createQueueConnection(username, password)__		}_		else {_			return queueFactory.createQueueConnection()__		}_	};this,implementation,delegates,to,the,code,create,queue,connection,username,password,method,of,the,target,queue,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,queue,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,queue,connection,factory,create,queue,connection,string,string,see,javax,jms,queue,connection,factory,create,queue,connection;protected,queue,connection,do,create,queue,connection,string,username,string,password,throws,jmsexception,assert,state,this,target,connection,factory,null,target,connection,factory,is,required,if,this,target,connection,factory,instanceof,queue,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,queue,connection,factory,queue,connection,factory,queue,factory,queue,connection,factory,this,target,connection,factory,if,string,utils,has,length,username,return,queue,factory,create,queue,connection,username,password,else,return,queue,factory,create,queue,connection
UserCredentialsConnectionFactoryAdapter -> protected QueueConnection doCreateQueueConnection(String username, String password) throws JMSException;1467749899;This implementation delegates to the {@code createQueueConnection(username, password)}_method of the target QueueConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createQueueConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.QueueConnectionFactory#createQueueConnection(String, String)_@see javax.jms.QueueConnectionFactory#createQueueConnection();protected QueueConnection doCreateQueueConnection(String username, String password) throws JMSException {_		ConnectionFactory target = obtainTargetConnectionFactory()__		if (!(target instanceof QueueConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a QueueConnectionFactory")__		}_		QueueConnectionFactory queueFactory = (QueueConnectionFactory) target__		if (StringUtils.hasLength(username)) {_			return queueFactory.createQueueConnection(username, password)__		}_		else {_			return queueFactory.createQueueConnection()__		}_	};this,implementation,delegates,to,the,code,create,queue,connection,username,password,method,of,the,target,queue,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,queue,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,queue,connection,factory,create,queue,connection,string,string,see,javax,jms,queue,connection,factory,create,queue,connection;protected,queue,connection,do,create,queue,connection,string,username,string,password,throws,jmsexception,connection,factory,target,obtain,target,connection,factory,if,target,instanceof,queue,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,queue,connection,factory,queue,connection,factory,queue,factory,queue,connection,factory,target,if,string,utils,has,length,username,return,queue,factory,create,queue,connection,username,password,else,return,queue,factory,create,queue,connection
UserCredentialsConnectionFactoryAdapter -> public final TopicConnection createTopicConnection() throws JMSException;1328020251;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateTopicConnection;public final TopicConnection createTopicConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateTopicConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateTopicConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,topic,connection;public,final,topic,connection,create,topic,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,topic,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,topic,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> public final TopicConnection createTopicConnection() throws JMSException;1357119239;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateTopicConnection;public final TopicConnection createTopicConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateTopicConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateTopicConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,topic,connection;public,final,topic,connection,create,topic,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,topic,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,topic,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> public void setUsername(String username);1328020251;Set the username that this adapter should use for retrieving Connections._Default is no specific user.;public void setUsername(String username) {_		this.username = username__	};set,the,username,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,user;public,void,set,username,string,username,this,username,username
UserCredentialsConnectionFactoryAdapter -> public void setUsername(String username);1356735495;Set the username that this adapter should use for retrieving Connections._Default is no specific user.;public void setUsername(String username) {_		this.username = username__	};set,the,username,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,user;public,void,set,username,string,username,this,username,username
UserCredentialsConnectionFactoryAdapter -> public void setUsername(String username);1357119239;Set the username that this adapter should use for retrieving Connections._Default is no specific user.;public void setUsername(String username) {_		this.username = username__	};set,the,username,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,user;public,void,set,username,string,username,this,username,username
UserCredentialsConnectionFactoryAdapter -> public void setUsername(String username);1368482696;Set the username that this adapter should use for retrieving Connections._Default is no specific user.;public void setUsername(String username) {_		this.username = username__	};set,the,username,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,user;public,void,set,username,string,username,this,username,username
UserCredentialsConnectionFactoryAdapter -> public void setUsername(String username);1467730834;Set the username that this adapter should use for retrieving Connections._Default is no specific user.;public void setUsername(String username) {_		this.username = username__	};set,the,username,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,user;public,void,set,username,string,username,this,username,username
UserCredentialsConnectionFactoryAdapter -> public void setUsername(String username);1467749899;Set the username that this adapter should use for retrieving Connections._Default is no specific user.;public void setUsername(String username) {_		this.username = username__	};set,the,username,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,user;public,void,set,username,string,username,this,username,username
UserCredentialsConnectionFactoryAdapter -> public void setUsername(String username);1498780456;Set the username that this adapter should use for retrieving Connections._Default is no specific user.;public void setUsername(String username) {_		this.username = username__	};set,the,username,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,user;public,void,set,username,string,username,this,username,username
UserCredentialsConnectionFactoryAdapter -> public void setUsername(String username);1530174524;Set the username that this adapter should use for retrieving Connections._Default is no specific user.;public void setUsername(String username) {_		this.username = username__	};set,the,username,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,user;public,void,set,username,string,username,this,username,username
UserCredentialsConnectionFactoryAdapter -> public void setUsername(String username);1544613334;Set the username that this adapter should use for retrieving Connections._Default is no specific user.;public void setUsername(String username) {_		this.username = username__	};set,the,username,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,user;public,void,set,username,string,username,this,username,username
UserCredentialsConnectionFactoryAdapter -> public void setUsername(String username);1544617266;Set the username that this adapter should use for retrieving Connections._Default is no specific user.;public void setUsername(String username) {_		this.username = username__	};set,the,username,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,user;public,void,set,username,string,username,this,username,username
UserCredentialsConnectionFactoryAdapter -> @Override 	public Connection createConnection(String username, String password) throws JMSException;1356735495;Delegate the call straight to the target ConnectionFactory.;@Override_	public Connection createConnection(String username, String password) throws JMSException {_		return doCreateConnection(username, password)__	};delegate,the,call,straight,to,the,target,connection,factory;override,public,connection,create,connection,string,username,string,password,throws,jmsexception,return,do,create,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public Connection createConnection(String username, String password) throws JMSException;1368482696;Delegate the call straight to the target ConnectionFactory.;@Override_	public Connection createConnection(String username, String password) throws JMSException {_		return doCreateConnection(username, password)__	};delegate,the,call,straight,to,the,target,connection,factory;override,public,connection,create,connection,string,username,string,password,throws,jmsexception,return,do,create,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public Connection createConnection(String username, String password) throws JMSException;1467730834;Delegate the call straight to the target ConnectionFactory.;@Override_	public Connection createConnection(String username, String password) throws JMSException {_		return doCreateConnection(username, password)__	};delegate,the,call,straight,to,the,target,connection,factory;override,public,connection,create,connection,string,username,string,password,throws,jmsexception,return,do,create,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public Connection createConnection(String username, String password) throws JMSException;1467749899;Delegate the call straight to the target ConnectionFactory.;@Override_	public Connection createConnection(String username, String password) throws JMSException {_		return doCreateConnection(username, password)__	};delegate,the,call,straight,to,the,target,connection,factory;override,public,connection,create,connection,string,username,string,password,throws,jmsexception,return,do,create,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public Connection createConnection(String username, String password) throws JMSException;1498780456;Delegate the call straight to the target ConnectionFactory.;@Override_	public Connection createConnection(String username, String password) throws JMSException {_		return doCreateConnection(username, password)__	};delegate,the,call,straight,to,the,target,connection,factory;override,public,connection,create,connection,string,username,string,password,throws,jmsexception,return,do,create,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public Connection createConnection(String username, String password) throws JMSException;1530174524;Delegate the call straight to the target ConnectionFactory.;@Override_	public Connection createConnection(String username, String password) throws JMSException {_		return doCreateConnection(username, password)__	};delegate,the,call,straight,to,the,target,connection,factory;override,public,connection,create,connection,string,username,string,password,throws,jmsexception,return,do,create,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public Connection createConnection(String username, String password) throws JMSException;1544613334;Delegate the call straight to the target ConnectionFactory.;@Override_	public Connection createConnection(String username, String password) throws JMSException {_		return doCreateConnection(username, password)__	};delegate,the,call,straight,to,the,target,connection,factory;override,public,connection,create,connection,string,username,string,password,throws,jmsexception,return,do,create,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public Connection createConnection(String username, String password) throws JMSException;1544617266;Delegate the call straight to the target ConnectionFactory.;@Override_	public Connection createConnection(String username, String password) throws JMSException {_		return doCreateConnection(username, password)__	};delegate,the,call,straight,to,the,target,connection,factory;override,public,connection,create,connection,string,username,string,password,throws,jmsexception,return,do,create,connection,username,password
UserCredentialsConnectionFactoryAdapter -> public final QueueConnection createQueueConnection() throws JMSException;1328020251;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateQueueConnection;public final QueueConnection createQueueConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateQueueConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateQueueConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,queue,connection;public,final,queue,connection,create,queue,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,queue,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,queue,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> public final QueueConnection createQueueConnection() throws JMSException;1357119239;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateQueueConnection;public final QueueConnection createQueueConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateQueueConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateQueueConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,queue,connection;public,final,queue,connection,create,queue,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,queue,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,queue,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> protected TopicConnection doCreateTopicConnection(String username, String password) throws JMSException;1328020251;This implementation delegates to the <code>createTopicConnection(username, password)</code>_method of the target TopicConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_<code>createTopicConnection()</code> method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.TopicConnectionFactory#createTopicConnection(String, String)_@see javax.jms.TopicConnectionFactory#createTopicConnection();protected TopicConnection doCreateTopicConnection(String username, String password) throws JMSException {_		Assert.state(this.targetConnectionFactory != null, "'targetConnectionFactory' is required")__		if (!(this.targetConnectionFactory instanceof TopicConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a TopicConnectionFactory")__		}_		TopicConnectionFactory queueFactory = (TopicConnectionFactory) this.targetConnectionFactory__		if (StringUtils.hasLength(username)) {_			return queueFactory.createTopicConnection(username, password)__		}_		else {_			return queueFactory.createTopicConnection()__		}_	};this,implementation,delegates,to,the,code,create,topic,connection,username,password,code,method,of,the,target,topic,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,topic,connection,code,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,topic,connection,factory,create,topic,connection,string,string,see,javax,jms,topic,connection,factory,create,topic,connection;protected,topic,connection,do,create,topic,connection,string,username,string,password,throws,jmsexception,assert,state,this,target,connection,factory,null,target,connection,factory,is,required,if,this,target,connection,factory,instanceof,topic,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,topic,connection,factory,topic,connection,factory,queue,factory,topic,connection,factory,this,target,connection,factory,if,string,utils,has,length,username,return,queue,factory,create,topic,connection,username,password,else,return,queue,factory,create,topic,connection
UserCredentialsConnectionFactoryAdapter -> protected TopicConnection doCreateTopicConnection(String username, String password) throws JMSException;1356735495;This implementation delegates to the {@code createTopicConnection(username, password)}_method of the target TopicConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createTopicConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.TopicConnectionFactory#createTopicConnection(String, String)_@see javax.jms.TopicConnectionFactory#createTopicConnection();protected TopicConnection doCreateTopicConnection(String username, String password) throws JMSException {_		Assert.state(this.targetConnectionFactory != null, "'targetConnectionFactory' is required")__		if (!(this.targetConnectionFactory instanceof TopicConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a TopicConnectionFactory")__		}_		TopicConnectionFactory queueFactory = (TopicConnectionFactory) this.targetConnectionFactory__		if (StringUtils.hasLength(username)) {_			return queueFactory.createTopicConnection(username, password)__		}_		else {_			return queueFactory.createTopicConnection()__		}_	};this,implementation,delegates,to,the,code,create,topic,connection,username,password,method,of,the,target,topic,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,topic,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,topic,connection,factory,create,topic,connection,string,string,see,javax,jms,topic,connection,factory,create,topic,connection;protected,topic,connection,do,create,topic,connection,string,username,string,password,throws,jmsexception,assert,state,this,target,connection,factory,null,target,connection,factory,is,required,if,this,target,connection,factory,instanceof,topic,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,topic,connection,factory,topic,connection,factory,queue,factory,topic,connection,factory,this,target,connection,factory,if,string,utils,has,length,username,return,queue,factory,create,topic,connection,username,password,else,return,queue,factory,create,topic,connection
UserCredentialsConnectionFactoryAdapter -> protected TopicConnection doCreateTopicConnection(String username, String password) throws JMSException;1357119239;This implementation delegates to the {@code createTopicConnection(username, password)}_method of the target TopicConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createTopicConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.TopicConnectionFactory#createTopicConnection(String, String)_@see javax.jms.TopicConnectionFactory#createTopicConnection();protected TopicConnection doCreateTopicConnection(String username, String password) throws JMSException {_		Assert.state(this.targetConnectionFactory != null, "'targetConnectionFactory' is required")__		if (!(this.targetConnectionFactory instanceof TopicConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a TopicConnectionFactory")__		}_		TopicConnectionFactory queueFactory = (TopicConnectionFactory) this.targetConnectionFactory__		if (StringUtils.hasLength(username)) {_			return queueFactory.createTopicConnection(username, password)__		}_		else {_			return queueFactory.createTopicConnection()__		}_	};this,implementation,delegates,to,the,code,create,topic,connection,username,password,method,of,the,target,topic,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,topic,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,topic,connection,factory,create,topic,connection,string,string,see,javax,jms,topic,connection,factory,create,topic,connection;protected,topic,connection,do,create,topic,connection,string,username,string,password,throws,jmsexception,assert,state,this,target,connection,factory,null,target,connection,factory,is,required,if,this,target,connection,factory,instanceof,topic,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,topic,connection,factory,topic,connection,factory,queue,factory,topic,connection,factory,this,target,connection,factory,if,string,utils,has,length,username,return,queue,factory,create,topic,connection,username,password,else,return,queue,factory,create,topic,connection
UserCredentialsConnectionFactoryAdapter -> protected TopicConnection doCreateTopicConnection(String username, String password) throws JMSException;1368482696;This implementation delegates to the {@code createTopicConnection(username, password)}_method of the target TopicConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createTopicConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.TopicConnectionFactory#createTopicConnection(String, String)_@see javax.jms.TopicConnectionFactory#createTopicConnection();protected TopicConnection doCreateTopicConnection(String username, String password) throws JMSException {_		Assert.state(this.targetConnectionFactory != null, "'targetConnectionFactory' is required")__		if (!(this.targetConnectionFactory instanceof TopicConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a TopicConnectionFactory")__		}_		TopicConnectionFactory queueFactory = (TopicConnectionFactory) this.targetConnectionFactory__		if (StringUtils.hasLength(username)) {_			return queueFactory.createTopicConnection(username, password)__		}_		else {_			return queueFactory.createTopicConnection()__		}_	};this,implementation,delegates,to,the,code,create,topic,connection,username,password,method,of,the,target,topic,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,topic,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,topic,connection,factory,create,topic,connection,string,string,see,javax,jms,topic,connection,factory,create,topic,connection;protected,topic,connection,do,create,topic,connection,string,username,string,password,throws,jmsexception,assert,state,this,target,connection,factory,null,target,connection,factory,is,required,if,this,target,connection,factory,instanceof,topic,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,topic,connection,factory,topic,connection,factory,queue,factory,topic,connection,factory,this,target,connection,factory,if,string,utils,has,length,username,return,queue,factory,create,topic,connection,username,password,else,return,queue,factory,create,topic,connection
UserCredentialsConnectionFactoryAdapter -> protected TopicConnection doCreateTopicConnection(String username, String password) throws JMSException;1467730834;This implementation delegates to the {@code createTopicConnection(username, password)}_method of the target TopicConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createTopicConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.TopicConnectionFactory#createTopicConnection(String, String)_@see javax.jms.TopicConnectionFactory#createTopicConnection();protected TopicConnection doCreateTopicConnection(String username, String password) throws JMSException {_		Assert.state(this.targetConnectionFactory != null, "'targetConnectionFactory' is required")__		if (!(this.targetConnectionFactory instanceof TopicConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a TopicConnectionFactory")__		}_		TopicConnectionFactory queueFactory = (TopicConnectionFactory) this.targetConnectionFactory__		if (StringUtils.hasLength(username)) {_			return queueFactory.createTopicConnection(username, password)__		}_		else {_			return queueFactory.createTopicConnection()__		}_	};this,implementation,delegates,to,the,code,create,topic,connection,username,password,method,of,the,target,topic,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,topic,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,topic,connection,factory,create,topic,connection,string,string,see,javax,jms,topic,connection,factory,create,topic,connection;protected,topic,connection,do,create,topic,connection,string,username,string,password,throws,jmsexception,assert,state,this,target,connection,factory,null,target,connection,factory,is,required,if,this,target,connection,factory,instanceof,topic,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,topic,connection,factory,topic,connection,factory,queue,factory,topic,connection,factory,this,target,connection,factory,if,string,utils,has,length,username,return,queue,factory,create,topic,connection,username,password,else,return,queue,factory,create,topic,connection
UserCredentialsConnectionFactoryAdapter -> protected TopicConnection doCreateTopicConnection(String username, String password) throws JMSException;1467749899;This implementation delegates to the {@code createTopicConnection(username, password)}_method of the target TopicConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createTopicConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.TopicConnectionFactory#createTopicConnection(String, String)_@see javax.jms.TopicConnectionFactory#createTopicConnection();protected TopicConnection doCreateTopicConnection(String username, String password) throws JMSException {_		ConnectionFactory target = obtainTargetConnectionFactory()__		if (!(target instanceof TopicConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a TopicConnectionFactory")__		}_		TopicConnectionFactory queueFactory = (TopicConnectionFactory) target__		if (StringUtils.hasLength(username)) {_			return queueFactory.createTopicConnection(username, password)__		}_		else {_			return queueFactory.createTopicConnection()__		}_	};this,implementation,delegates,to,the,code,create,topic,connection,username,password,method,of,the,target,topic,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,topic,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,topic,connection,factory,create,topic,connection,string,string,see,javax,jms,topic,connection,factory,create,topic,connection;protected,topic,connection,do,create,topic,connection,string,username,string,password,throws,jmsexception,connection,factory,target,obtain,target,connection,factory,if,target,instanceof,topic,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,topic,connection,factory,topic,connection,factory,queue,factory,topic,connection,factory,target,if,string,utils,has,length,username,return,queue,factory,create,topic,connection,username,password,else,return,queue,factory,create,topic,connection
UserCredentialsConnectionFactoryAdapter -> @Override 	public TopicConnection createTopicConnection(String username, String password) throws JMSException;1356735495;Delegate the call straight to the target TopicConnectionFactory.;@Override_	public TopicConnection createTopicConnection(String username, String password) throws JMSException {_		return doCreateTopicConnection(username, password)__	};delegate,the,call,straight,to,the,target,topic,connection,factory;override,public,topic,connection,create,topic,connection,string,username,string,password,throws,jmsexception,return,do,create,topic,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public TopicConnection createTopicConnection(String username, String password) throws JMSException;1368482696;Delegate the call straight to the target TopicConnectionFactory.;@Override_	public TopicConnection createTopicConnection(String username, String password) throws JMSException {_		return doCreateTopicConnection(username, password)__	};delegate,the,call,straight,to,the,target,topic,connection,factory;override,public,topic,connection,create,topic,connection,string,username,string,password,throws,jmsexception,return,do,create,topic,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public TopicConnection createTopicConnection(String username, String password) throws JMSException;1467730834;Delegate the call straight to the target TopicConnectionFactory.;@Override_	public TopicConnection createTopicConnection(String username, String password) throws JMSException {_		return doCreateTopicConnection(username, password)__	};delegate,the,call,straight,to,the,target,topic,connection,factory;override,public,topic,connection,create,topic,connection,string,username,string,password,throws,jmsexception,return,do,create,topic,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public TopicConnection createTopicConnection(String username, String password) throws JMSException;1467749899;Delegate the call straight to the target TopicConnectionFactory.;@Override_	public TopicConnection createTopicConnection(String username, String password) throws JMSException {_		return doCreateTopicConnection(username, password)__	};delegate,the,call,straight,to,the,target,topic,connection,factory;override,public,topic,connection,create,topic,connection,string,username,string,password,throws,jmsexception,return,do,create,topic,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public TopicConnection createTopicConnection(String username, String password) throws JMSException;1498780456;Delegate the call straight to the target TopicConnectionFactory.;@Override_	public TopicConnection createTopicConnection(String username, String password) throws JMSException {_		return doCreateTopicConnection(username, password)__	};delegate,the,call,straight,to,the,target,topic,connection,factory;override,public,topic,connection,create,topic,connection,string,username,string,password,throws,jmsexception,return,do,create,topic,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public TopicConnection createTopicConnection(String username, String password) throws JMSException;1530174524;Delegate the call straight to the target TopicConnectionFactory.;@Override_	public TopicConnection createTopicConnection(String username, String password) throws JMSException {_		return doCreateTopicConnection(username, password)__	};delegate,the,call,straight,to,the,target,topic,connection,factory;override,public,topic,connection,create,topic,connection,string,username,string,password,throws,jmsexception,return,do,create,topic,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public TopicConnection createTopicConnection(String username, String password) throws JMSException;1544613334;Delegate the call straight to the target TopicConnectionFactory.;@Override_	public TopicConnection createTopicConnection(String username, String password) throws JMSException {_		return doCreateTopicConnection(username, password)__	};delegate,the,call,straight,to,the,target,topic,connection,factory;override,public,topic,connection,create,topic,connection,string,username,string,password,throws,jmsexception,return,do,create,topic,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public TopicConnection createTopicConnection(String username, String password) throws JMSException;1544617266;Delegate the call straight to the target TopicConnectionFactory.;@Override_	public TopicConnection createTopicConnection(String username, String password) throws JMSException {_		return doCreateTopicConnection(username, password)__	};delegate,the,call,straight,to,the,target,topic,connection,factory;override,public,topic,connection,create,topic,connection,string,username,string,password,throws,jmsexception,return,do,create,topic,connection,username,password
UserCredentialsConnectionFactoryAdapter -> public final Connection createConnection() throws JMSException;1328020251;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateConnection;public final Connection createConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,connection;public,final,connection,create,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> public final Connection createConnection() throws JMSException;1357119239;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateConnection;public final Connection createConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,connection;public,final,connection,create,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final TopicConnection createTopicConnection() throws JMSException;1356735495;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateTopicConnection;@Override_	public final TopicConnection createTopicConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateTopicConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateTopicConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,topic,connection;override,public,final,topic,connection,create,topic,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,topic,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,topic,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final TopicConnection createTopicConnection() throws JMSException;1368482696;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateTopicConnection;@Override_	public final TopicConnection createTopicConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateTopicConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateTopicConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,topic,connection;override,public,final,topic,connection,create,topic,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,topic,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,topic,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final TopicConnection createTopicConnection() throws JMSException;1467730834;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateTopicConnection;@Override_	public final TopicConnection createTopicConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateTopicConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateTopicConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,topic,connection;override,public,final,topic,connection,create,topic,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,topic,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,topic,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final TopicConnection createTopicConnection() throws JMSException;1467749899;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateTopicConnection;@Override_	public final TopicConnection createTopicConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateTopicConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateTopicConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,topic,connection;override,public,final,topic,connection,create,topic,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,topic,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,topic,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final TopicConnection createTopicConnection() throws JMSException;1498780456;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateTopicConnection;@Override_	public final TopicConnection createTopicConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateTopicConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateTopicConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,topic,connection;override,public,final,topic,connection,create,topic,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,topic,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,topic,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final TopicConnection createTopicConnection() throws JMSException;1530174524;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateTopicConnection;@Override_	public final TopicConnection createTopicConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateTopicConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateTopicConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,topic,connection;override,public,final,topic,connection,create,topic,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,topic,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,topic,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final TopicConnection createTopicConnection() throws JMSException;1544613334;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateTopicConnection;@Override_	public final TopicConnection createTopicConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateTopicConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateTopicConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,topic,connection;override,public,final,topic,connection,create,topic,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,topic,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,topic,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final TopicConnection createTopicConnection() throws JMSException;1544617266;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateTopicConnection;@Override_	public final TopicConnection createTopicConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateTopicConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateTopicConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,topic,connection;override,public,final,topic,connection,create,topic,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,topic,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,topic,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> protected Connection doCreateConnection(@Nullable String username, @Nullable String password) throws JMSException;1498780456;This implementation delegates to the {@code createConnection(username, password)}_method of the target ConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.ConnectionFactory#createConnection(String, String)_@see javax.jms.ConnectionFactory#createConnection();protected Connection doCreateConnection(@Nullable String username, @Nullable String password) throws JMSException {_		ConnectionFactory target = obtainTargetConnectionFactory()__		if (StringUtils.hasLength(username)) {_			return target.createConnection(username, password)__		}_		else {_			return target.createConnection()__		}_	};this,implementation,delegates,to,the,code,create,connection,username,password,method,of,the,target,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,connection,factory,create,connection,string,string,see,javax,jms,connection,factory,create,connection;protected,connection,do,create,connection,nullable,string,username,nullable,string,password,throws,jmsexception,connection,factory,target,obtain,target,connection,factory,if,string,utils,has,length,username,return,target,create,connection,username,password,else,return,target,create,connection
UserCredentialsConnectionFactoryAdapter -> protected Connection doCreateConnection(@Nullable String username, @Nullable String password) throws JMSException;1530174524;This implementation delegates to the {@code createConnection(username, password)}_method of the target ConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.ConnectionFactory#createConnection(String, String)_@see javax.jms.ConnectionFactory#createConnection();protected Connection doCreateConnection(@Nullable String username, @Nullable String password) throws JMSException {_		ConnectionFactory target = obtainTargetConnectionFactory()__		if (StringUtils.hasLength(username)) {_			return target.createConnection(username, password)__		}_		else {_			return target.createConnection()__		}_	};this,implementation,delegates,to,the,code,create,connection,username,password,method,of,the,target,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,connection,factory,create,connection,string,string,see,javax,jms,connection,factory,create,connection;protected,connection,do,create,connection,nullable,string,username,nullable,string,password,throws,jmsexception,connection,factory,target,obtain,target,connection,factory,if,string,utils,has,length,username,return,target,create,connection,username,password,else,return,target,create,connection
UserCredentialsConnectionFactoryAdapter -> protected Connection doCreateConnection(@Nullable String username, @Nullable String password) throws JMSException;1544613334;This implementation delegates to the {@code createConnection(username, password)}_method of the target ConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.ConnectionFactory#createConnection(String, String)_@see javax.jms.ConnectionFactory#createConnection();protected Connection doCreateConnection(@Nullable String username, @Nullable String password) throws JMSException {_		ConnectionFactory target = obtainTargetConnectionFactory()__		if (StringUtils.hasLength(username)) {_			return target.createConnection(username, password)__		}_		else {_			return target.createConnection()__		}_	};this,implementation,delegates,to,the,code,create,connection,username,password,method,of,the,target,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,connection,factory,create,connection,string,string,see,javax,jms,connection,factory,create,connection;protected,connection,do,create,connection,nullable,string,username,nullable,string,password,throws,jmsexception,connection,factory,target,obtain,target,connection,factory,if,string,utils,has,length,username,return,target,create,connection,username,password,else,return,target,create,connection
UserCredentialsConnectionFactoryAdapter -> protected Connection doCreateConnection(@Nullable String username, @Nullable String password) throws JMSException;1544617266;This implementation delegates to the {@code createConnection(username, password)}_method of the target ConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.ConnectionFactory#createConnection(String, String)_@see javax.jms.ConnectionFactory#createConnection();protected Connection doCreateConnection(@Nullable String username, @Nullable String password) throws JMSException {_		ConnectionFactory target = obtainTargetConnectionFactory()__		if (StringUtils.hasLength(username)) {_			return target.createConnection(username, password)__		}_		else {_			return target.createConnection()__		}_	};this,implementation,delegates,to,the,code,create,connection,username,password,method,of,the,target,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,connection,factory,create,connection,string,string,see,javax,jms,connection,factory,create,connection;protected,connection,do,create,connection,nullable,string,username,nullable,string,password,throws,jmsexception,connection,factory,target,obtain,target,connection,factory,if,string,utils,has,length,username,return,target,create,connection,username,password,else,return,target,create,connection
UserCredentialsConnectionFactoryAdapter -> @Override 	public final QueueConnection createQueueConnection() throws JMSException;1356735495;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateQueueConnection;@Override_	public final QueueConnection createQueueConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateQueueConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateQueueConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,queue,connection;override,public,final,queue,connection,create,queue,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,queue,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,queue,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final QueueConnection createQueueConnection() throws JMSException;1368482696;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateQueueConnection;@Override_	public final QueueConnection createQueueConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateQueueConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateQueueConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,queue,connection;override,public,final,queue,connection,create,queue,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,queue,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,queue,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final QueueConnection createQueueConnection() throws JMSException;1467730834;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateQueueConnection;@Override_	public final QueueConnection createQueueConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateQueueConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateQueueConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,queue,connection;override,public,final,queue,connection,create,queue,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,queue,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,queue,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final QueueConnection createQueueConnection() throws JMSException;1467749899;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateQueueConnection;@Override_	public final QueueConnection createQueueConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateQueueConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateQueueConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,queue,connection;override,public,final,queue,connection,create,queue,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,queue,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,queue,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final QueueConnection createQueueConnection() throws JMSException;1498780456;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateQueueConnection;@Override_	public final QueueConnection createQueueConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateQueueConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateQueueConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,queue,connection;override,public,final,queue,connection,create,queue,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,queue,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,queue,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final QueueConnection createQueueConnection() throws JMSException;1530174524;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateQueueConnection;@Override_	public final QueueConnection createQueueConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateQueueConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateQueueConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,queue,connection;override,public,final,queue,connection,create,queue,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,queue,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,queue,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final QueueConnection createQueueConnection() throws JMSException;1544613334;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateQueueConnection;@Override_	public final QueueConnection createQueueConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateQueueConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateQueueConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,queue,connection;override,public,final,queue,connection,create,queue,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,queue,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,queue,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final QueueConnection createQueueConnection() throws JMSException;1544617266;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateQueueConnection;@Override_	public final QueueConnection createQueueConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateQueueConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateQueueConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,queue,connection;override,public,final,queue,connection,create,queue,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,queue,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,queue,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1328020251;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "'targetConnectionFactory' must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
UserCredentialsConnectionFactoryAdapter -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1356735495;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "'targetConnectionFactory' must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
UserCredentialsConnectionFactoryAdapter -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1357119239;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "'targetConnectionFactory' must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
UserCredentialsConnectionFactoryAdapter -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1368482696;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "'targetConnectionFactory' must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
UserCredentialsConnectionFactoryAdapter -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1467730834;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "'targetConnectionFactory' must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
UserCredentialsConnectionFactoryAdapter -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1467749899;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "'targetConnectionFactory' must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
UserCredentialsConnectionFactoryAdapter -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1498780456;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "'targetConnectionFactory' must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
UserCredentialsConnectionFactoryAdapter -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1530174524;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "'targetConnectionFactory' must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
UserCredentialsConnectionFactoryAdapter -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1544613334;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "'targetConnectionFactory' must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
UserCredentialsConnectionFactoryAdapter -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1544617266;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "'targetConnectionFactory' must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
UserCredentialsConnectionFactoryAdapter -> public void setCredentialsForCurrentThread(String username, String password);1328020251;Set user credententials for this proxy and the current thread._The given username and password will be applied to all subsequent_<code>createConnection()</code> calls on this ConnectionFactory proxy._<p>This will override any statically specified user credentials,_that is, values of the "username" and "password" bean properties._@param username the username to apply_@param password the password to apply_@see #removeCredentialsFromCurrentThread;public void setCredentialsForCurrentThread(String username, String password) {_		this.threadBoundCredentials.set(new JmsUserCredentials(username, password))__	};set,user,credententials,for,this,proxy,and,the,current,thread,the,given,username,and,password,will,be,applied,to,all,subsequent,code,create,connection,code,calls,on,this,connection,factory,proxy,p,this,will,override,any,statically,specified,user,credentials,that,is,values,of,the,username,and,password,bean,properties,param,username,the,username,to,apply,param,password,the,password,to,apply,see,remove,credentials,from,current,thread;public,void,set,credentials,for,current,thread,string,username,string,password,this,thread,bound,credentials,set,new,jms,user,credentials,username,password
UserCredentialsConnectionFactoryAdapter -> public void setCredentialsForCurrentThread(String username, String password);1356735495;Set user credententials for this proxy and the current thread._The given username and password will be applied to all subsequent_{@code createConnection()} calls on this ConnectionFactory proxy._<p>This will override any statically specified user credentials,_that is, values of the "username" and "password" bean properties._@param username the username to apply_@param password the password to apply_@see #removeCredentialsFromCurrentThread;public void setCredentialsForCurrentThread(String username, String password) {_		this.threadBoundCredentials.set(new JmsUserCredentials(username, password))__	};set,user,credententials,for,this,proxy,and,the,current,thread,the,given,username,and,password,will,be,applied,to,all,subsequent,code,create,connection,calls,on,this,connection,factory,proxy,p,this,will,override,any,statically,specified,user,credentials,that,is,values,of,the,username,and,password,bean,properties,param,username,the,username,to,apply,param,password,the,password,to,apply,see,remove,credentials,from,current,thread;public,void,set,credentials,for,current,thread,string,username,string,password,this,thread,bound,credentials,set,new,jms,user,credentials,username,password
UserCredentialsConnectionFactoryAdapter -> public void setCredentialsForCurrentThread(String username, String password);1357119239;Set user credententials for this proxy and the current thread._The given username and password will be applied to all subsequent_{@code createConnection()} calls on this ConnectionFactory proxy._<p>This will override any statically specified user credentials,_that is, values of the "username" and "password" bean properties._@param username the username to apply_@param password the password to apply_@see #removeCredentialsFromCurrentThread;public void setCredentialsForCurrentThread(String username, String password) {_		this.threadBoundCredentials.set(new JmsUserCredentials(username, password))__	};set,user,credententials,for,this,proxy,and,the,current,thread,the,given,username,and,password,will,be,applied,to,all,subsequent,code,create,connection,calls,on,this,connection,factory,proxy,p,this,will,override,any,statically,specified,user,credentials,that,is,values,of,the,username,and,password,bean,properties,param,username,the,username,to,apply,param,password,the,password,to,apply,see,remove,credentials,from,current,thread;public,void,set,credentials,for,current,thread,string,username,string,password,this,thread,bound,credentials,set,new,jms,user,credentials,username,password
UserCredentialsConnectionFactoryAdapter -> public void setCredentialsForCurrentThread(String username, String password);1368482696;Set user credententials for this proxy and the current thread._The given username and password will be applied to all subsequent_{@code createConnection()} calls on this ConnectionFactory proxy._<p>This will override any statically specified user credentials,_that is, values of the "username" and "password" bean properties._@param username the username to apply_@param password the password to apply_@see #removeCredentialsFromCurrentThread;public void setCredentialsForCurrentThread(String username, String password) {_		this.threadBoundCredentials.set(new JmsUserCredentials(username, password))__	};set,user,credententials,for,this,proxy,and,the,current,thread,the,given,username,and,password,will,be,applied,to,all,subsequent,code,create,connection,calls,on,this,connection,factory,proxy,p,this,will,override,any,statically,specified,user,credentials,that,is,values,of,the,username,and,password,bean,properties,param,username,the,username,to,apply,param,password,the,password,to,apply,see,remove,credentials,from,current,thread;public,void,set,credentials,for,current,thread,string,username,string,password,this,thread,bound,credentials,set,new,jms,user,credentials,username,password
UserCredentialsConnectionFactoryAdapter -> public void setCredentialsForCurrentThread(String username, String password);1467730834;Set user credententials for this proxy and the current thread._The given username and password will be applied to all subsequent_{@code createConnection()} calls on this ConnectionFactory proxy._<p>This will override any statically specified user credentials,_that is, values of the "username" and "password" bean properties._@param username the username to apply_@param password the password to apply_@see #removeCredentialsFromCurrentThread;public void setCredentialsForCurrentThread(String username, String password) {_		this.threadBoundCredentials.set(new JmsUserCredentials(username, password))__	};set,user,credententials,for,this,proxy,and,the,current,thread,the,given,username,and,password,will,be,applied,to,all,subsequent,code,create,connection,calls,on,this,connection,factory,proxy,p,this,will,override,any,statically,specified,user,credentials,that,is,values,of,the,username,and,password,bean,properties,param,username,the,username,to,apply,param,password,the,password,to,apply,see,remove,credentials,from,current,thread;public,void,set,credentials,for,current,thread,string,username,string,password,this,thread,bound,credentials,set,new,jms,user,credentials,username,password
UserCredentialsConnectionFactoryAdapter -> public void setCredentialsForCurrentThread(String username, String password);1467749899;Set user credententials for this proxy and the current thread._The given username and password will be applied to all subsequent_{@code createConnection()} calls on this ConnectionFactory proxy._<p>This will override any statically specified user credentials,_that is, values of the "username" and "password" bean properties._@param username the username to apply_@param password the password to apply_@see #removeCredentialsFromCurrentThread;public void setCredentialsForCurrentThread(String username, String password) {_		this.threadBoundCredentials.set(new JmsUserCredentials(username, password))__	};set,user,credententials,for,this,proxy,and,the,current,thread,the,given,username,and,password,will,be,applied,to,all,subsequent,code,create,connection,calls,on,this,connection,factory,proxy,p,this,will,override,any,statically,specified,user,credentials,that,is,values,of,the,username,and,password,bean,properties,param,username,the,username,to,apply,param,password,the,password,to,apply,see,remove,credentials,from,current,thread;public,void,set,credentials,for,current,thread,string,username,string,password,this,thread,bound,credentials,set,new,jms,user,credentials,username,password
UserCredentialsConnectionFactoryAdapter -> public void setCredentialsForCurrentThread(String username, String password);1498780456;Set user credententials for this proxy and the current thread._The given username and password will be applied to all subsequent_{@code createConnection()} calls on this ConnectionFactory proxy._<p>This will override any statically specified user credentials,_that is, values of the "username" and "password" bean properties._@param username the username to apply_@param password the password to apply_@see #removeCredentialsFromCurrentThread;public void setCredentialsForCurrentThread(String username, String password) {_		this.threadBoundCredentials.set(new JmsUserCredentials(username, password))__	};set,user,credententials,for,this,proxy,and,the,current,thread,the,given,username,and,password,will,be,applied,to,all,subsequent,code,create,connection,calls,on,this,connection,factory,proxy,p,this,will,override,any,statically,specified,user,credentials,that,is,values,of,the,username,and,password,bean,properties,param,username,the,username,to,apply,param,password,the,password,to,apply,see,remove,credentials,from,current,thread;public,void,set,credentials,for,current,thread,string,username,string,password,this,thread,bound,credentials,set,new,jms,user,credentials,username,password
UserCredentialsConnectionFactoryAdapter -> public void setCredentialsForCurrentThread(String username, String password);1530174524;Set user credententials for this proxy and the current thread._The given username and password will be applied to all subsequent_{@code createConnection()} calls on this ConnectionFactory proxy._<p>This will override any statically specified user credentials,_that is, values of the "username" and "password" bean properties._@param username the username to apply_@param password the password to apply_@see #removeCredentialsFromCurrentThread;public void setCredentialsForCurrentThread(String username, String password) {_		this.threadBoundCredentials.set(new JmsUserCredentials(username, password))__	};set,user,credententials,for,this,proxy,and,the,current,thread,the,given,username,and,password,will,be,applied,to,all,subsequent,code,create,connection,calls,on,this,connection,factory,proxy,p,this,will,override,any,statically,specified,user,credentials,that,is,values,of,the,username,and,password,bean,properties,param,username,the,username,to,apply,param,password,the,password,to,apply,see,remove,credentials,from,current,thread;public,void,set,credentials,for,current,thread,string,username,string,password,this,thread,bound,credentials,set,new,jms,user,credentials,username,password
UserCredentialsConnectionFactoryAdapter -> public void setCredentialsForCurrentThread(String username, String password);1544613334;Set user credententials for this proxy and the current thread._The given username and password will be applied to all subsequent_{@code createConnection()} calls on this ConnectionFactory proxy._<p>This will override any statically specified user credentials,_that is, values of the "username" and "password" bean properties._@param username the username to apply_@param password the password to apply_@see #removeCredentialsFromCurrentThread;public void setCredentialsForCurrentThread(String username, String password) {_		this.threadBoundCredentials.set(new JmsUserCredentials(username, password))__	};set,user,credententials,for,this,proxy,and,the,current,thread,the,given,username,and,password,will,be,applied,to,all,subsequent,code,create,connection,calls,on,this,connection,factory,proxy,p,this,will,override,any,statically,specified,user,credentials,that,is,values,of,the,username,and,password,bean,properties,param,username,the,username,to,apply,param,password,the,password,to,apply,see,remove,credentials,from,current,thread;public,void,set,credentials,for,current,thread,string,username,string,password,this,thread,bound,credentials,set,new,jms,user,credentials,username,password
UserCredentialsConnectionFactoryAdapter -> public void setCredentialsForCurrentThread(String username, String password);1544617266;Set user credententials for this proxy and the current thread._The given username and password will be applied to all subsequent_{@code createConnection()} calls on this ConnectionFactory proxy._<p>This will override any statically specified user credentials,_that is, values of the "username" and "password" bean properties._@param username the username to apply_@param password the password to apply_@see #removeCredentialsFromCurrentThread;public void setCredentialsForCurrentThread(String username, String password) {_		this.threadBoundCredentials.set(new JmsUserCredentials(username, password))__	};set,user,credententials,for,this,proxy,and,the,current,thread,the,given,username,and,password,will,be,applied,to,all,subsequent,code,create,connection,calls,on,this,connection,factory,proxy,p,this,will,override,any,statically,specified,user,credentials,that,is,values,of,the,username,and,password,bean,properties,param,username,the,username,to,apply,param,password,the,password,to,apply,see,remove,credentials,from,current,thread;public,void,set,credentials,for,current,thread,string,username,string,password,this,thread,bound,credentials,set,new,jms,user,credentials,username,password
UserCredentialsConnectionFactoryAdapter -> public void removeCredentialsFromCurrentThread();1328020251;Remove any user credentials for this proxy from the current thread._Statically specified user credentials apply again afterwards._@see #setCredentialsForCurrentThread;public void removeCredentialsFromCurrentThread() {_		this.threadBoundCredentials.remove()__	};remove,any,user,credentials,for,this,proxy,from,the,current,thread,statically,specified,user,credentials,apply,again,afterwards,see,set,credentials,for,current,thread;public,void,remove,credentials,from,current,thread,this,thread,bound,credentials,remove
UserCredentialsConnectionFactoryAdapter -> public void removeCredentialsFromCurrentThread();1356735495;Remove any user credentials for this proxy from the current thread._Statically specified user credentials apply again afterwards._@see #setCredentialsForCurrentThread;public void removeCredentialsFromCurrentThread() {_		this.threadBoundCredentials.remove()__	};remove,any,user,credentials,for,this,proxy,from,the,current,thread,statically,specified,user,credentials,apply,again,afterwards,see,set,credentials,for,current,thread;public,void,remove,credentials,from,current,thread,this,thread,bound,credentials,remove
UserCredentialsConnectionFactoryAdapter -> public void removeCredentialsFromCurrentThread();1357119239;Remove any user credentials for this proxy from the current thread._Statically specified user credentials apply again afterwards._@see #setCredentialsForCurrentThread;public void removeCredentialsFromCurrentThread() {_		this.threadBoundCredentials.remove()__	};remove,any,user,credentials,for,this,proxy,from,the,current,thread,statically,specified,user,credentials,apply,again,afterwards,see,set,credentials,for,current,thread;public,void,remove,credentials,from,current,thread,this,thread,bound,credentials,remove
UserCredentialsConnectionFactoryAdapter -> public void removeCredentialsFromCurrentThread();1368482696;Remove any user credentials for this proxy from the current thread._Statically specified user credentials apply again afterwards._@see #setCredentialsForCurrentThread;public void removeCredentialsFromCurrentThread() {_		this.threadBoundCredentials.remove()__	};remove,any,user,credentials,for,this,proxy,from,the,current,thread,statically,specified,user,credentials,apply,again,afterwards,see,set,credentials,for,current,thread;public,void,remove,credentials,from,current,thread,this,thread,bound,credentials,remove
UserCredentialsConnectionFactoryAdapter -> public void removeCredentialsFromCurrentThread();1467730834;Remove any user credentials for this proxy from the current thread._Statically specified user credentials apply again afterwards._@see #setCredentialsForCurrentThread;public void removeCredentialsFromCurrentThread() {_		this.threadBoundCredentials.remove()__	};remove,any,user,credentials,for,this,proxy,from,the,current,thread,statically,specified,user,credentials,apply,again,afterwards,see,set,credentials,for,current,thread;public,void,remove,credentials,from,current,thread,this,thread,bound,credentials,remove
UserCredentialsConnectionFactoryAdapter -> public void removeCredentialsFromCurrentThread();1467749899;Remove any user credentials for this proxy from the current thread._Statically specified user credentials apply again afterwards._@see #setCredentialsForCurrentThread;public void removeCredentialsFromCurrentThread() {_		this.threadBoundCredentials.remove()__	};remove,any,user,credentials,for,this,proxy,from,the,current,thread,statically,specified,user,credentials,apply,again,afterwards,see,set,credentials,for,current,thread;public,void,remove,credentials,from,current,thread,this,thread,bound,credentials,remove
UserCredentialsConnectionFactoryAdapter -> public void removeCredentialsFromCurrentThread();1498780456;Remove any user credentials for this proxy from the current thread._Statically specified user credentials apply again afterwards._@see #setCredentialsForCurrentThread;public void removeCredentialsFromCurrentThread() {_		this.threadBoundCredentials.remove()__	};remove,any,user,credentials,for,this,proxy,from,the,current,thread,statically,specified,user,credentials,apply,again,afterwards,see,set,credentials,for,current,thread;public,void,remove,credentials,from,current,thread,this,thread,bound,credentials,remove
UserCredentialsConnectionFactoryAdapter -> public void removeCredentialsFromCurrentThread();1530174524;Remove any user credentials for this proxy from the current thread._Statically specified user credentials apply again afterwards._@see #setCredentialsForCurrentThread;public void removeCredentialsFromCurrentThread() {_		this.threadBoundCredentials.remove()__	};remove,any,user,credentials,for,this,proxy,from,the,current,thread,statically,specified,user,credentials,apply,again,afterwards,see,set,credentials,for,current,thread;public,void,remove,credentials,from,current,thread,this,thread,bound,credentials,remove
UserCredentialsConnectionFactoryAdapter -> public void removeCredentialsFromCurrentThread();1544613334;Remove any user credentials for this proxy from the current thread._Statically specified user credentials apply again afterwards._@see #setCredentialsForCurrentThread;public void removeCredentialsFromCurrentThread() {_		this.threadBoundCredentials.remove()__	};remove,any,user,credentials,for,this,proxy,from,the,current,thread,statically,specified,user,credentials,apply,again,afterwards,see,set,credentials,for,current,thread;public,void,remove,credentials,from,current,thread,this,thread,bound,credentials,remove
UserCredentialsConnectionFactoryAdapter -> public void removeCredentialsFromCurrentThread();1544617266;Remove any user credentials for this proxy from the current thread._Statically specified user credentials apply again afterwards._@see #setCredentialsForCurrentThread;public void removeCredentialsFromCurrentThread() {_		this.threadBoundCredentials.remove()__	};remove,any,user,credentials,for,this,proxy,from,the,current,thread,statically,specified,user,credentials,apply,again,afterwards,see,set,credentials,for,current,thread;public,void,remove,credentials,from,current,thread,this,thread,bound,credentials,remove
UserCredentialsConnectionFactoryAdapter -> public QueueConnection createQueueConnection(String username, String password) throws JMSException;1328020251;Delegate the call straight to the target QueueConnectionFactory.;public QueueConnection createQueueConnection(String username, String password) throws JMSException {_		return doCreateQueueConnection(username, password)__	};delegate,the,call,straight,to,the,target,queue,connection,factory;public,queue,connection,create,queue,connection,string,username,string,password,throws,jmsexception,return,do,create,queue,connection,username,password
UserCredentialsConnectionFactoryAdapter -> public QueueConnection createQueueConnection(String username, String password) throws JMSException;1357119239;Delegate the call straight to the target QueueConnectionFactory.;public QueueConnection createQueueConnection(String username, String password) throws JMSException {_		return doCreateQueueConnection(username, password)__	};delegate,the,call,straight,to,the,target,queue,connection,factory;public,queue,connection,create,queue,connection,string,username,string,password,throws,jmsexception,return,do,create,queue,connection,username,password
UserCredentialsConnectionFactoryAdapter -> public TopicConnection createTopicConnection(String username, String password) throws JMSException;1328020251;Delegate the call straight to the target TopicConnectionFactory.;public TopicConnection createTopicConnection(String username, String password) throws JMSException {_		return doCreateTopicConnection(username, password)__	};delegate,the,call,straight,to,the,target,topic,connection,factory;public,topic,connection,create,topic,connection,string,username,string,password,throws,jmsexception,return,do,create,topic,connection,username,password
UserCredentialsConnectionFactoryAdapter -> public TopicConnection createTopicConnection(String username, String password) throws JMSException;1357119239;Delegate the call straight to the target TopicConnectionFactory.;public TopicConnection createTopicConnection(String username, String password) throws JMSException {_		return doCreateTopicConnection(username, password)__	};delegate,the,call,straight,to,the,target,topic,connection,factory;public,topic,connection,create,topic,connection,string,username,string,password,throws,jmsexception,return,do,create,topic,connection,username,password
UserCredentialsConnectionFactoryAdapter -> protected TopicConnection doCreateTopicConnection( 			@Nullable String username, @Nullable String password) throws JMSException;1498780456;This implementation delegates to the {@code createTopicConnection(username, password)}_method of the target TopicConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createTopicConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.TopicConnectionFactory#createTopicConnection(String, String)_@see javax.jms.TopicConnectionFactory#createTopicConnection();protected TopicConnection doCreateTopicConnection(_			@Nullable String username, @Nullable String password) throws JMSException {__		ConnectionFactory target = obtainTargetConnectionFactory()__		if (!(target instanceof TopicConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a TopicConnectionFactory")__		}_		TopicConnectionFactory queueFactory = (TopicConnectionFactory) target__		if (StringUtils.hasLength(username)) {_			return queueFactory.createTopicConnection(username, password)__		}_		else {_			return queueFactory.createTopicConnection()__		}_	};this,implementation,delegates,to,the,code,create,topic,connection,username,password,method,of,the,target,topic,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,topic,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,topic,connection,factory,create,topic,connection,string,string,see,javax,jms,topic,connection,factory,create,topic,connection;protected,topic,connection,do,create,topic,connection,nullable,string,username,nullable,string,password,throws,jmsexception,connection,factory,target,obtain,target,connection,factory,if,target,instanceof,topic,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,topic,connection,factory,topic,connection,factory,queue,factory,topic,connection,factory,target,if,string,utils,has,length,username,return,queue,factory,create,topic,connection,username,password,else,return,queue,factory,create,topic,connection
UserCredentialsConnectionFactoryAdapter -> protected TopicConnection doCreateTopicConnection( 			@Nullable String username, @Nullable String password) throws JMSException;1530174524;This implementation delegates to the {@code createTopicConnection(username, password)}_method of the target TopicConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createTopicConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.TopicConnectionFactory#createTopicConnection(String, String)_@see javax.jms.TopicConnectionFactory#createTopicConnection();protected TopicConnection doCreateTopicConnection(_			@Nullable String username, @Nullable String password) throws JMSException {__		ConnectionFactory target = obtainTargetConnectionFactory()__		if (!(target instanceof TopicConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a TopicConnectionFactory")__		}_		TopicConnectionFactory queueFactory = (TopicConnectionFactory) target__		if (StringUtils.hasLength(username)) {_			return queueFactory.createTopicConnection(username, password)__		}_		else {_			return queueFactory.createTopicConnection()__		}_	};this,implementation,delegates,to,the,code,create,topic,connection,username,password,method,of,the,target,topic,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,topic,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,topic,connection,factory,create,topic,connection,string,string,see,javax,jms,topic,connection,factory,create,topic,connection;protected,topic,connection,do,create,topic,connection,nullable,string,username,nullable,string,password,throws,jmsexception,connection,factory,target,obtain,target,connection,factory,if,target,instanceof,topic,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,topic,connection,factory,topic,connection,factory,queue,factory,topic,connection,factory,target,if,string,utils,has,length,username,return,queue,factory,create,topic,connection,username,password,else,return,queue,factory,create,topic,connection
UserCredentialsConnectionFactoryAdapter -> protected TopicConnection doCreateTopicConnection( 			@Nullable String username, @Nullable String password) throws JMSException;1544613334;This implementation delegates to the {@code createTopicConnection(username, password)}_method of the target TopicConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createTopicConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.TopicConnectionFactory#createTopicConnection(String, String)_@see javax.jms.TopicConnectionFactory#createTopicConnection();protected TopicConnection doCreateTopicConnection(_			@Nullable String username, @Nullable String password) throws JMSException {__		ConnectionFactory target = obtainTargetConnectionFactory()__		if (!(target instanceof TopicConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a TopicConnectionFactory")__		}_		TopicConnectionFactory queueFactory = (TopicConnectionFactory) target__		if (StringUtils.hasLength(username)) {_			return queueFactory.createTopicConnection(username, password)__		}_		else {_			return queueFactory.createTopicConnection()__		}_	};this,implementation,delegates,to,the,code,create,topic,connection,username,password,method,of,the,target,topic,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,topic,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,topic,connection,factory,create,topic,connection,string,string,see,javax,jms,topic,connection,factory,create,topic,connection;protected,topic,connection,do,create,topic,connection,nullable,string,username,nullable,string,password,throws,jmsexception,connection,factory,target,obtain,target,connection,factory,if,target,instanceof,topic,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,topic,connection,factory,topic,connection,factory,queue,factory,topic,connection,factory,target,if,string,utils,has,length,username,return,queue,factory,create,topic,connection,username,password,else,return,queue,factory,create,topic,connection
UserCredentialsConnectionFactoryAdapter -> protected TopicConnection doCreateTopicConnection( 			@Nullable String username, @Nullable String password) throws JMSException;1544617266;This implementation delegates to the {@code createTopicConnection(username, password)}_method of the target TopicConnectionFactory, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code createTopicConnection()} method of the target ConnectionFactory._@param username the username to use_@param password the password to use_@return the Connection_@see javax.jms.TopicConnectionFactory#createTopicConnection(String, String)_@see javax.jms.TopicConnectionFactory#createTopicConnection();protected TopicConnection doCreateTopicConnection(_			@Nullable String username, @Nullable String password) throws JMSException {__		ConnectionFactory target = obtainTargetConnectionFactory()__		if (!(target instanceof TopicConnectionFactory)) {_			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a TopicConnectionFactory")__		}_		TopicConnectionFactory queueFactory = (TopicConnectionFactory) target__		if (StringUtils.hasLength(username)) {_			return queueFactory.createTopicConnection(username, password)__		}_		else {_			return queueFactory.createTopicConnection()__		}_	};this,implementation,delegates,to,the,code,create,topic,connection,username,password,method,of,the,target,topic,connection,factory,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,create,topic,connection,method,of,the,target,connection,factory,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,jms,topic,connection,factory,create,topic,connection,string,string,see,javax,jms,topic,connection,factory,create,topic,connection;protected,topic,connection,do,create,topic,connection,nullable,string,username,nullable,string,password,throws,jmsexception,connection,factory,target,obtain,target,connection,factory,if,target,instanceof,topic,connection,factory,throw,new,javax,jms,illegal,state,exception,target,connection,factory,is,not,a,topic,connection,factory,topic,connection,factory,queue,factory,topic,connection,factory,target,if,string,utils,has,length,username,return,queue,factory,create,topic,connection,username,password,else,return,queue,factory,create,topic,connection
UserCredentialsConnectionFactoryAdapter -> public void setPassword(String password);1328020251;Set the password that this adapter should use for retrieving Connections._Default is no specific password.;public void setPassword(String password) {_		this.password = password__	};set,the,password,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,password;public,void,set,password,string,password,this,password,password
UserCredentialsConnectionFactoryAdapter -> public void setPassword(String password);1356735495;Set the password that this adapter should use for retrieving Connections._Default is no specific password.;public void setPassword(String password) {_		this.password = password__	};set,the,password,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,password;public,void,set,password,string,password,this,password,password
UserCredentialsConnectionFactoryAdapter -> public void setPassword(String password);1357119239;Set the password that this adapter should use for retrieving Connections._Default is no specific password.;public void setPassword(String password) {_		this.password = password__	};set,the,password,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,password;public,void,set,password,string,password,this,password,password
UserCredentialsConnectionFactoryAdapter -> public void setPassword(String password);1368482696;Set the password that this adapter should use for retrieving Connections._Default is no specific password.;public void setPassword(String password) {_		this.password = password__	};set,the,password,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,password;public,void,set,password,string,password,this,password,password
UserCredentialsConnectionFactoryAdapter -> public void setPassword(String password);1467730834;Set the password that this adapter should use for retrieving Connections._Default is no specific password.;public void setPassword(String password) {_		this.password = password__	};set,the,password,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,password;public,void,set,password,string,password,this,password,password
UserCredentialsConnectionFactoryAdapter -> public void setPassword(String password);1467749899;Set the password that this adapter should use for retrieving Connections._Default is no specific password.;public void setPassword(String password) {_		this.password = password__	};set,the,password,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,password;public,void,set,password,string,password,this,password,password
UserCredentialsConnectionFactoryAdapter -> public void setPassword(String password);1498780456;Set the password that this adapter should use for retrieving Connections._Default is no specific password.;public void setPassword(String password) {_		this.password = password__	};set,the,password,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,password;public,void,set,password,string,password,this,password,password
UserCredentialsConnectionFactoryAdapter -> public void setPassword(String password);1530174524;Set the password that this adapter should use for retrieving Connections._Default is no specific password.;public void setPassword(String password) {_		this.password = password__	};set,the,password,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,password;public,void,set,password,string,password,this,password,password
UserCredentialsConnectionFactoryAdapter -> public void setPassword(String password);1544613334;Set the password that this adapter should use for retrieving Connections._Default is no specific password.;public void setPassword(String password) {_		this.password = password__	};set,the,password,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,password;public,void,set,password,string,password,this,password,password
UserCredentialsConnectionFactoryAdapter -> public void setPassword(String password);1544617266;Set the password that this adapter should use for retrieving Connections._Default is no specific password.;public void setPassword(String password) {_		this.password = password__	};set,the,password,that,this,adapter,should,use,for,retrieving,connections,default,is,no,specific,password;public,void,set,password,string,password,this,password,password
UserCredentialsConnectionFactoryAdapter -> public Connection createConnection(String username, String password) throws JMSException;1328020251;Delegate the call straight to the target ConnectionFactory.;public Connection createConnection(String username, String password) throws JMSException {_		return doCreateConnection(username, password)__	};delegate,the,call,straight,to,the,target,connection,factory;public,connection,create,connection,string,username,string,password,throws,jmsexception,return,do,create,connection,username,password
UserCredentialsConnectionFactoryAdapter -> public Connection createConnection(String username, String password) throws JMSException;1357119239;Delegate the call straight to the target ConnectionFactory.;public Connection createConnection(String username, String password) throws JMSException {_		return doCreateConnection(username, password)__	};delegate,the,call,straight,to,the,target,connection,factory;public,connection,create,connection,string,username,string,password,throws,jmsexception,return,do,create,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public QueueConnection createQueueConnection(String username, String password) throws JMSException;1356735495;Delegate the call straight to the target QueueConnectionFactory.;@Override_	public QueueConnection createQueueConnection(String username, String password) throws JMSException {_		return doCreateQueueConnection(username, password)__	};delegate,the,call,straight,to,the,target,queue,connection,factory;override,public,queue,connection,create,queue,connection,string,username,string,password,throws,jmsexception,return,do,create,queue,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public QueueConnection createQueueConnection(String username, String password) throws JMSException;1368482696;Delegate the call straight to the target QueueConnectionFactory.;@Override_	public QueueConnection createQueueConnection(String username, String password) throws JMSException {_		return doCreateQueueConnection(username, password)__	};delegate,the,call,straight,to,the,target,queue,connection,factory;override,public,queue,connection,create,queue,connection,string,username,string,password,throws,jmsexception,return,do,create,queue,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public QueueConnection createQueueConnection(String username, String password) throws JMSException;1467730834;Delegate the call straight to the target QueueConnectionFactory.;@Override_	public QueueConnection createQueueConnection(String username, String password) throws JMSException {_		return doCreateQueueConnection(username, password)__	};delegate,the,call,straight,to,the,target,queue,connection,factory;override,public,queue,connection,create,queue,connection,string,username,string,password,throws,jmsexception,return,do,create,queue,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public QueueConnection createQueueConnection(String username, String password) throws JMSException;1467749899;Delegate the call straight to the target QueueConnectionFactory.;@Override_	public QueueConnection createQueueConnection(String username, String password) throws JMSException {_		return doCreateQueueConnection(username, password)__	};delegate,the,call,straight,to,the,target,queue,connection,factory;override,public,queue,connection,create,queue,connection,string,username,string,password,throws,jmsexception,return,do,create,queue,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public QueueConnection createQueueConnection(String username, String password) throws JMSException;1498780456;Delegate the call straight to the target QueueConnectionFactory.;@Override_	public QueueConnection createQueueConnection(String username, String password) throws JMSException {_		return doCreateQueueConnection(username, password)__	};delegate,the,call,straight,to,the,target,queue,connection,factory;override,public,queue,connection,create,queue,connection,string,username,string,password,throws,jmsexception,return,do,create,queue,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public QueueConnection createQueueConnection(String username, String password) throws JMSException;1530174524;Delegate the call straight to the target QueueConnectionFactory.;@Override_	public QueueConnection createQueueConnection(String username, String password) throws JMSException {_		return doCreateQueueConnection(username, password)__	};delegate,the,call,straight,to,the,target,queue,connection,factory;override,public,queue,connection,create,queue,connection,string,username,string,password,throws,jmsexception,return,do,create,queue,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public QueueConnection createQueueConnection(String username, String password) throws JMSException;1544613334;Delegate the call straight to the target QueueConnectionFactory.;@Override_	public QueueConnection createQueueConnection(String username, String password) throws JMSException {_		return doCreateQueueConnection(username, password)__	};delegate,the,call,straight,to,the,target,queue,connection,factory;override,public,queue,connection,create,queue,connection,string,username,string,password,throws,jmsexception,return,do,create,queue,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public QueueConnection createQueueConnection(String username, String password) throws JMSException;1544617266;Delegate the call straight to the target QueueConnectionFactory.;@Override_	public QueueConnection createQueueConnection(String username, String password) throws JMSException {_		return doCreateQueueConnection(username, password)__	};delegate,the,call,straight,to,the,target,queue,connection,factory;override,public,queue,connection,create,queue,connection,string,username,string,password,throws,jmsexception,return,do,create,queue,connection,username,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final Connection createConnection() throws JMSException;1356735495;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateConnection;@Override_	public final Connection createConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,connection;override,public,final,connection,create,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final Connection createConnection() throws JMSException;1368482696;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateConnection;@Override_	public final Connection createConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,connection;override,public,final,connection,create,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final Connection createConnection() throws JMSException;1467730834;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateConnection;@Override_	public final Connection createConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,connection;override,public,final,connection,create,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final Connection createConnection() throws JMSException;1467749899;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateConnection;@Override_	public final Connection createConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,connection;override,public,final,connection,create,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final Connection createConnection() throws JMSException;1498780456;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateConnection;@Override_	public final Connection createConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,connection;override,public,final,connection,create,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final Connection createConnection() throws JMSException;1530174524;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateConnection;@Override_	public final Connection createConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,connection;override,public,final,connection,create,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final Connection createConnection() throws JMSException;1544613334;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._@see #doCreateConnection;@Override_	public final Connection createConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,see,do,create,connection;override,public,final,connection,create,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,connection,this,username,this,password
UserCredentialsConnectionFactoryAdapter -> @Override 	public final Connection createConnection() throws JMSException;1544617266;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) otherwise._@see #doCreateConnection;@Override_	public final Connection createConnection() throws JMSException {_		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doCreateConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doCreateConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,otherwise,see,do,create,connection;override,public,final,connection,create,connection,throws,jmsexception,jms,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,create,connection,thread,credentials,username,thread,credentials,password,else,return,do,create,connection,this,username,this,password
