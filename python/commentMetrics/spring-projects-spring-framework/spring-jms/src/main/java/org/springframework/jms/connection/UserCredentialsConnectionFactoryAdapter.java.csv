commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the target ConnectionFactory that this ConnectionFactory should delegate to.  */ ;/**  * Set the target ConnectionFactory that this ConnectionFactory should delegate to.  */ public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {     Assert.notNull(targetConnectionFactory, "'targetConnectionFactory' must not be null").     this.targetConnectionFactory = targetConnectionFactory. }
true;public;1;3;/**  * Set the username that this adapter should use for retrieving Connections.  * Default is no specific user.  */ ;/**  * Set the username that this adapter should use for retrieving Connections.  * Default is no specific user.  */ public void setUsername(String username) {     this.username = username. }
true;public;1;3;/**  * Set the password that this adapter should use for retrieving Connections.  * Default is no specific password.  */ ;/**  * Set the password that this adapter should use for retrieving Connections.  * Default is no specific password.  */ public void setPassword(String password) {     this.password = password. }
false;public;0;6;;@Override public void afterPropertiesSet() {     if (this.targetConnectionFactory == null) {         throw new IllegalArgumentException("Property 'targetConnectionFactory' is required").     } }
true;public;2;3;/**  * Set user credententials for this proxy and the current thread.  * The given username and password will be applied to all subsequent  * {@code createConnection()} calls on this ConnectionFactory proxy.  * <p>This will override any statically specified user credentials,  * that is, values of the "username" and "password" bean properties.  * @param username the username to apply  * @param password the password to apply  * @see #removeCredentialsFromCurrentThread  */ ;/**  * Set user credententials for this proxy and the current thread.  * The given username and password will be applied to all subsequent  * {@code createConnection()} calls on this ConnectionFactory proxy.  * <p>This will override any statically specified user credentials,  * that is, values of the "username" and "password" bean properties.  * @param username the username to apply  * @param password the password to apply  * @see #removeCredentialsFromCurrentThread  */ public void setCredentialsForCurrentThread(String username, String password) {     this.threadBoundCredentials.set(new JmsUserCredentials(username, password)). }
true;public;0;3;/**  * Remove any user credentials for this proxy from the current thread.  * Statically specified user credentials apply again afterwards.  * @see #setCredentialsForCurrentThread  */ ;/**  * Remove any user credentials for this proxy from the current thread.  * Statically specified user credentials apply again afterwards.  * @see #setCredentialsForCurrentThread  */ public void removeCredentialsFromCurrentThread() {     this.threadBoundCredentials.remove(). }
true;public,final;0;10;/**  * Determine whether there are currently thread-bound credentials,  * using them if available, falling back to the statically specified  * username and password (i.e. values of the bean properties) otherwise.  * @see #doCreateConnection  */ ;/**  * Determine whether there are currently thread-bound credentials,  * using them if available, falling back to the statically specified  * username and password (i.e. values of the bean properties) otherwise.  * @see #doCreateConnection  */ @Override public final Connection createConnection() throws JMSException {     JmsUserCredentials threadCredentials = this.threadBoundCredentials.get().     if (threadCredentials != null) {         return doCreateConnection(threadCredentials.username, threadCredentials.password).     } else {         return doCreateConnection(this.username, this.password).     } }
true;public;2;4;/**  * Delegate the call straight to the target ConnectionFactory.  */ ;/**  * Delegate the call straight to the target ConnectionFactory.  */ @Override public Connection createConnection(String username, String password) throws JMSException {     return doCreateConnection(username, password). }
true;protected;2;9;/**  * This implementation delegates to the {@code createConnection(username, password)}  * method of the target ConnectionFactory, passing in the specified user credentials.  * If the specified username is empty, it will simply delegate to the standard  * {@code createConnection()} method of the target ConnectionFactory.  * @param username the username to use  * @param password the password to use  * @return the Connection  * @see javax.jms.ConnectionFactory#createConnection(String, String)  * @see javax.jms.ConnectionFactory#createConnection()  */ ;/**  * This implementation delegates to the {@code createConnection(username, password)}  * method of the target ConnectionFactory, passing in the specified user credentials.  * If the specified username is empty, it will simply delegate to the standard  * {@code createConnection()} method of the target ConnectionFactory.  * @param username the username to use  * @param password the password to use  * @return the Connection  * @see javax.jms.ConnectionFactory#createConnection(String, String)  * @see javax.jms.ConnectionFactory#createConnection()  */ protected Connection doCreateConnection(@Nullable String username, @Nullable String password) throws JMSException {     ConnectionFactory target = obtainTargetConnectionFactory().     if (StringUtils.hasLength(username)) {         return target.createConnection(username, password).     } else {         return target.createConnection().     } }
true;public,final;0;10;/**  * Determine whether there are currently thread-bound credentials,  * using them if available, falling back to the statically specified  * username and password (i.e. values of the bean properties) else.  * @see #doCreateQueueConnection  */ ;/**  * Determine whether there are currently thread-bound credentials,  * using them if available, falling back to the statically specified  * username and password (i.e. values of the bean properties) else.  * @see #doCreateQueueConnection  */ @Override public final QueueConnection createQueueConnection() throws JMSException {     JmsUserCredentials threadCredentials = this.threadBoundCredentials.get().     if (threadCredentials != null) {         return doCreateQueueConnection(threadCredentials.username, threadCredentials.password).     } else {         return doCreateQueueConnection(this.username, this.password).     } }
true;public;2;4;/**  * Delegate the call straight to the target QueueConnectionFactory.  */ ;/**  * Delegate the call straight to the target QueueConnectionFactory.  */ @Override public QueueConnection createQueueConnection(String username, String password) throws JMSException {     return doCreateQueueConnection(username, password). }
true;protected;2;15;/**  * This implementation delegates to the {@code createQueueConnection(username, password)}  * method of the target QueueConnectionFactory, passing in the specified user credentials.  * If the specified username is empty, it will simply delegate to the standard  * {@code createQueueConnection()} method of the target ConnectionFactory.  * @param username the username to use  * @param password the password to use  * @return the Connection  * @see javax.jms.QueueConnectionFactory#createQueueConnection(String, String)  * @see javax.jms.QueueConnectionFactory#createQueueConnection()  */ ;/**  * This implementation delegates to the {@code createQueueConnection(username, password)}  * method of the target QueueConnectionFactory, passing in the specified user credentials.  * If the specified username is empty, it will simply delegate to the standard  * {@code createQueueConnection()} method of the target ConnectionFactory.  * @param username the username to use  * @param password the password to use  * @return the Connection  * @see javax.jms.QueueConnectionFactory#createQueueConnection(String, String)  * @see javax.jms.QueueConnectionFactory#createQueueConnection()  */ protected QueueConnection doCreateQueueConnection(@Nullable String username, @Nullable String password) throws JMSException {     ConnectionFactory target = obtainTargetConnectionFactory().     if (!(target instanceof QueueConnectionFactory)) {         throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a QueueConnectionFactory").     }     QueueConnectionFactory queueFactory = (QueueConnectionFactory) target.     if (StringUtils.hasLength(username)) {         return queueFactory.createQueueConnection(username, password).     } else {         return queueFactory.createQueueConnection().     } }
true;public,final;0;10;/**  * Determine whether there are currently thread-bound credentials,  * using them if available, falling back to the statically specified  * username and password (i.e. values of the bean properties) else.  * @see #doCreateTopicConnection  */ ;/**  * Determine whether there are currently thread-bound credentials,  * using them if available, falling back to the statically specified  * username and password (i.e. values of the bean properties) else.  * @see #doCreateTopicConnection  */ @Override public final TopicConnection createTopicConnection() throws JMSException {     JmsUserCredentials threadCredentials = this.threadBoundCredentials.get().     if (threadCredentials != null) {         return doCreateTopicConnection(threadCredentials.username, threadCredentials.password).     } else {         return doCreateTopicConnection(this.username, this.password).     } }
true;public;2;4;/**  * Delegate the call straight to the target TopicConnectionFactory.  */ ;/**  * Delegate the call straight to the target TopicConnectionFactory.  */ @Override public TopicConnection createTopicConnection(String username, String password) throws JMSException {     return doCreateTopicConnection(username, password). }
true;protected;2;15;/**  * This implementation delegates to the {@code createTopicConnection(username, password)}  * method of the target TopicConnectionFactory, passing in the specified user credentials.  * If the specified username is empty, it will simply delegate to the standard  * {@code createTopicConnection()} method of the target ConnectionFactory.  * @param username the username to use  * @param password the password to use  * @return the Connection  * @see javax.jms.TopicConnectionFactory#createTopicConnection(String, String)  * @see javax.jms.TopicConnectionFactory#createTopicConnection()  */ ;/**  * This implementation delegates to the {@code createTopicConnection(username, password)}  * method of the target TopicConnectionFactory, passing in the specified user credentials.  * If the specified username is empty, it will simply delegate to the standard  * {@code createTopicConnection()} method of the target ConnectionFactory.  * @param username the username to use  * @param password the password to use  * @return the Connection  * @see javax.jms.TopicConnectionFactory#createTopicConnection(String, String)  * @see javax.jms.TopicConnectionFactory#createTopicConnection()  */ protected TopicConnection doCreateTopicConnection(@Nullable String username, @Nullable String password) throws JMSException {     ConnectionFactory target = obtainTargetConnectionFactory().     if (!(target instanceof TopicConnectionFactory)) {         throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a TopicConnectionFactory").     }     TopicConnectionFactory queueFactory = (TopicConnectionFactory) target.     if (StringUtils.hasLength(username)) {         return queueFactory.createTopicConnection(username, password).     } else {         return queueFactory.createTopicConnection().     } }
false;public;0;4;;@Override public JMSContext createContext() {     return obtainTargetConnectionFactory().createContext(). }
false;public;2;4;;@Override public JMSContext createContext(String userName, String password) {     return obtainTargetConnectionFactory().createContext(userName, password). }
false;public;3;4;;@Override public JMSContext createContext(String userName, String password, int sessionMode) {     return obtainTargetConnectionFactory().createContext(userName, password, sessionMode). }
false;public;1;4;;@Override public JMSContext createContext(int sessionMode) {     return obtainTargetConnectionFactory().createContext(sessionMode). }
false;private;0;4;;private ConnectionFactory obtainTargetConnectionFactory() {     Assert.state(this.targetConnectionFactory != null, "'targetConnectionFactory' is required").     return this.targetConnectionFactory. }
false;public;0;4;;@Override public String toString() {     return "JmsUserCredentials[username='" + this.username + "',password='" + this.password + "']". }
