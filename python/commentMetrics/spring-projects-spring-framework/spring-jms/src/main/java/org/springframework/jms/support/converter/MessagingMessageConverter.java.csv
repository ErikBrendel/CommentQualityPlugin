commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the {@link MessageConverter} to use to convert the payload.  */ ;/**  * Set the {@link MessageConverter} to use to convert the payload.  */ public void setPayloadConverter(MessageConverter payloadConverter) {     this.payloadConverter = payloadConverter. }
true;public;1;3;/**  * Set the {@link JmsHeaderMapper} to use to map JMS headers to and from  * standard message headers.  */ ;/**  * Set the {@link JmsHeaderMapper} to use to map JMS headers to and from  * standard message headers.  */ public void setHeaderMapper(JmsHeaderMapper headerMapper) {     this.headerMapper = headerMapper. }
false;public;0;5;;@Override public void afterPropertiesSet() {     Assert.notNull(this.payloadConverter, "Property 'payloadConverter' is required").     Assert.notNull(this.headerMapper, "Property 'headerMapper' is required"). }
false;public;2;13;;@Override public javax.jms.Message toMessage(Object object, Session session) throws JMSException, MessageConversionException {     if (!(object instanceof Message)) {         throw new IllegalArgumentException("Could not convert [" + object + "] - only [" + Message.class.getName() + "] is handled by this converter").     }     Message<?> input = (Message<?>) object.     MessageHeaders headers = input.getHeaders().     Object conversionHint = headers.get(AbstractMessagingTemplate.CONVERSION_HINT_HEADER).     javax.jms.Message reply = createMessageForPayload(input.getPayload(), session, conversionHint).     this.headerMapper.fromHeaders(headers, reply).     return reply. }
false;public;1;10;;@SuppressWarnings("unchecked") @Override public Object fromMessage(javax.jms.Message message) throws JMSException, MessageConversionException {     Map<String, Object> mappedHeaders = extractHeaders(message).     Object convertedObject = extractPayload(message).     MessageBuilder<Object> builder = (convertedObject instanceof org.springframework.messaging.Message ? MessageBuilder.fromMessage((org.springframework.messaging.Message<Object>) convertedObject) : MessageBuilder.withPayload(convertedObject)).     return builder.copyHeadersIfAbsent(mappedHeaders).build(). }
true;protected;1;3;/**  * Extract the payload of the specified {@link javax.jms.Message}.  */ ;/**  * Extract the payload of the specified {@link javax.jms.Message}.  */ protected Object extractPayload(javax.jms.Message message) throws JMSException {     return this.payloadConverter.fromMessage(message). }
true;protected;3;5;/**  * Create a JMS message for the specified payload and conversionHint.  * The conversion hint is an extra object passed to the {@link MessageConverter},  * e.g. the associated {@code MethodParameter} (may be {@code null}}.  * @since 4.3  * @see MessageConverter#toMessage(Object, Session)  */ ;/**  * Create a JMS message for the specified payload and conversionHint.  * The conversion hint is an extra object passed to the {@link MessageConverter},  * e.g. the associated {@code MethodParameter} (may be {@code null}}.  * @since 4.3  * @see MessageConverter#toMessage(Object, Session)  */ protected javax.jms.Message createMessageForPayload(Object payload, Session session, @Nullable Object conversionHint) throws JMSException {     return this.payloadConverter.toMessage(payload, session). }
false;protected,final;1;3;;protected final MessageHeaders extractHeaders(javax.jms.Message message) {     return this.headerMapper.toHeaders(message). }
