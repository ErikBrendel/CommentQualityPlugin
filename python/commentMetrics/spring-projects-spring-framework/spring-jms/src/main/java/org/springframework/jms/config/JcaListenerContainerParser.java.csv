commented;modifiers;parameterAmount;loc;comment;code
false;protected;5;12;;@Override protected RootBeanDefinition createContainerFactory(String factoryId, Element containerEle, ParserContext parserContext, PropertyValues commonContainerProperties, PropertyValues specificContainerProperties) {     RootBeanDefinition factoryDef = new RootBeanDefinition().     factoryDef.setBeanClassName("org.springframework.jms.config.DefaultJcaListenerContainerFactory").     factoryDef.getPropertyValues().addPropertyValues(commonContainerProperties).     factoryDef.getPropertyValues().addPropertyValues(specificContainerProperties).     return factoryDef. }
false;protected;5;19;;@Override protected RootBeanDefinition createContainer(Element containerEle, Element listenerEle, ParserContext parserContext, PropertyValues commonContainerProperties, PropertyValues specificContainerProperties) {     RootBeanDefinition containerDef = new RootBeanDefinition().     containerDef.setSource(parserContext.extractSource(containerEle)).     containerDef.setBeanClassName("org.springframework.jms.listener.endpoint.JmsMessageEndpointManager").     containerDef.getPropertyValues().addPropertyValues(specificContainerProperties).     RootBeanDefinition configDef = new RootBeanDefinition().     configDef.setSource(parserContext.extractSource(containerEle)).     configDef.setBeanClassName("org.springframework.jms.listener.endpoint.JmsActivationSpecConfig").     configDef.getPropertyValues().addPropertyValues(commonContainerProperties).     parseListenerConfiguration(listenerEle, parserContext, configDef.getPropertyValues()).     containerDef.getPropertyValues().add("activationSpecConfig", configDef).     return containerDef. }
false;protected;2;21;;@Override protected MutablePropertyValues parseCommonContainerProperties(Element containerEle, ParserContext parserContext) {     MutablePropertyValues properties = super.parseCommonContainerProperties(containerEle, parserContext).     Integer acknowledgeMode = parseAcknowledgeMode(containerEle, parserContext).     if (acknowledgeMode != null) {         properties.add("acknowledgeMode", acknowledgeMode).     }     String concurrency = containerEle.getAttribute(CONCURRENCY_ATTRIBUTE).     if (StringUtils.hasText(concurrency)) {         properties.add("concurrency", concurrency).     }     String prefetch = containerEle.getAttribute(PREFETCH_ATTRIBUTE).     if (StringUtils.hasText(prefetch)) {         properties.add("prefetchSize", Integer.valueOf(prefetch)).     }     return properties. }
false;protected;2;41;;@Override protected MutablePropertyValues parseSpecificContainerProperties(Element containerEle, ParserContext parserContext) {     MutablePropertyValues properties = new MutablePropertyValues().     if (containerEle.hasAttribute(RESOURCE_ADAPTER_ATTRIBUTE)) {         String resourceAdapterBeanName = containerEle.getAttribute(RESOURCE_ADAPTER_ATTRIBUTE).         if (!StringUtils.hasText(resourceAdapterBeanName)) {             parserContext.getReaderContext().error("Listener container 'resource-adapter' attribute contains empty value.", containerEle).         } else {             properties.add("resourceAdapter", new RuntimeBeanReference(resourceAdapterBeanName)).         }     }     String activationSpecFactoryBeanName = containerEle.getAttribute(ACTIVATION_SPEC_FACTORY_ATTRIBUTE).     String destinationResolverBeanName = containerEle.getAttribute(DESTINATION_RESOLVER_ATTRIBUTE).     if (StringUtils.hasText(activationSpecFactoryBeanName)) {         if (StringUtils.hasText(destinationResolverBeanName)) {             parserContext.getReaderContext().error("Specify either 'activation-spec-factory' or " + "'destination-resolver', not both. If you define a dedicated JmsActivationSpecFactory bean, " + "specify the custom DestinationResolver there (if possible).", containerEle).         }         properties.add("activationSpecFactory", new RuntimeBeanReference(activationSpecFactoryBeanName)).     }     if (StringUtils.hasText(destinationResolverBeanName)) {         properties.add("destinationResolver", new RuntimeBeanReference(destinationResolverBeanName)).     }     String transactionManagerBeanName = containerEle.getAttribute(TRANSACTION_MANAGER_ATTRIBUTE).     if (StringUtils.hasText(transactionManagerBeanName)) {         properties.add("transactionManager", new RuntimeBeanReference(transactionManagerBeanName)).     }     String phase = containerEle.getAttribute(PHASE_ATTRIBUTE).     if (StringUtils.hasText(phase)) {         properties.add("phase", phase).     }     return properties. }
