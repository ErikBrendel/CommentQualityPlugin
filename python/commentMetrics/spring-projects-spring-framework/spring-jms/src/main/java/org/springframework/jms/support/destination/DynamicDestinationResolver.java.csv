commented;modifiers;parameterAmount;loc;comment;code
true;public;3;13;/**  * Resolve the specified destination name as a dynamic destination.  * @param session the current JMS Session  * @param destinationName the name of the destination  * @param pubSubDomain {@code true} if the domain is pub-sub, {@code false} if P2P  * @return the JMS destination (either a topic or a queue)  * @throws javax.jms.JMSException if resolution failed  * @see #resolveTopic(javax.jms.Session, String)  * @see #resolveQueue(javax.jms.Session, String)  */ ;/**  * Resolve the specified destination name as a dynamic destination.  * @param session the current JMS Session  * @param destinationName the name of the destination  * @param pubSubDomain {@code true} if the domain is pub-sub, {@code false} if P2P  * @return the JMS destination (either a topic or a queue)  * @throws javax.jms.JMSException if resolution failed  * @see #resolveTopic(javax.jms.Session, String)  * @see #resolveQueue(javax.jms.Session, String)  */ @Override public Destination resolveDestinationName(@Nullable Session session, String destinationName, boolean pubSubDomain) throws JMSException {     Assert.notNull(session, "Session must not be null").     Assert.notNull(destinationName, "Destination name must not be null").     if (pubSubDomain) {         return resolveTopic(session, destinationName).     } else {         return resolveQueue(session, destinationName).     } }
true;protected;2;3;/**  * Resolve the given destination name to a {@link Topic}.  * @param session the current JMS Session  * @param topicName the name of the desired {@link Topic}  * @return the JMS {@link Topic}  * @throws javax.jms.JMSException if resolution failed  * @see Session#createTopic(String)  */ ;/**  * Resolve the given destination name to a {@link Topic}.  * @param session the current JMS Session  * @param topicName the name of the desired {@link Topic}  * @return the JMS {@link Topic}  * @throws javax.jms.JMSException if resolution failed  * @see Session#createTopic(String)  */ protected Topic resolveTopic(Session session, String topicName) throws JMSException {     return session.createTopic(topicName). }
true;protected;2;3;/**  * Resolve the given destination name to a {@link Queue}.  * @param session the current JMS Session  * @param queueName the name of the desired {@link Queue}  * @return the JMS {@link Queue}  * @throws javax.jms.JMSException if resolution failed  * @see Session#createQueue(String)  */ ;/**  * Resolve the given destination name to a {@link Queue}.  * @param session the current JMS Session  * @param queueName the name of the desired {@link Queue}  * @return the JMS {@link Queue}  * @throws javax.jms.JMSException if resolution failed  * @see Session#createQueue(String)  */ protected Queue resolveQueue(Session session, String queueName) throws JMSException {     return session.createQueue(queueName). }
