commented;modifiers;parameterAmount;loc;comment;code
true;public;1;8;/**  * Set the ConnectionFactory to use for the underlying {@link JmsTemplate}.  * @since 4.1.2  */ ;/**  * Set the ConnectionFactory to use for the underlying {@link JmsTemplate}.  * @since 4.1.2  */ public void setConnectionFactory(ConnectionFactory connectionFactory) {     if (this.jmsTemplate != null) {         this.jmsTemplate.setConnectionFactory(connectionFactory).     } else {         this.jmsTemplate = new JmsTemplate(connectionFactory).     } }
true;public;0;4;/**  * Return the ConnectionFactory that the underlying {@link JmsTemplate} uses.  * @since 4.1.2  */ ;/**  * Return the ConnectionFactory that the underlying {@link JmsTemplate} uses.  * @since 4.1.2  */ @Nullable public ConnectionFactory getConnectionFactory() {     return (this.jmsTemplate != null ? this.jmsTemplate.getConnectionFactory() : null). }
true;public;1;3;/**  * Set the {@link JmsTemplate} to use.  */ ;/**  * Set the {@link JmsTemplate} to use.  */ public void setJmsTemplate(@Nullable JmsTemplate jmsTemplate) {     this.jmsTemplate = jmsTemplate. }
true;public;0;4;/**  * Return the configured {@link JmsTemplate}.  */ ;/**  * Return the configured {@link JmsTemplate}.  */ @Nullable public JmsTemplate getJmsTemplate() {     return this.jmsTemplate. }
true;public;1;5;/**  * Set the {@link MessageConverter} to use to convert a {@link Message} from  * the messaging to and from a {@link javax.jms.Message}. By default, a  * {@link MessagingMessageConverter} is defined using a {@link SimpleMessageConverter}  * to convert the payload of the message.  * <p>Consider configuring a {@link MessagingMessageConverter} with a different  * {@link MessagingMessageConverter#setPayloadConverter(MessageConverter) payload converter}  * for more advanced scenarios.  * @see org.springframework.jms.support.converter.MessagingMessageConverter  */ ;/**  * Set the {@link MessageConverter} to use to convert a {@link Message} from  * the messaging to and from a {@link javax.jms.Message}. By default, a  * {@link MessagingMessageConverter} is defined using a {@link SimpleMessageConverter}  * to convert the payload of the message.  * <p>Consider configuring a {@link MessagingMessageConverter} with a different  * {@link MessagingMessageConverter#setPayloadConverter(MessageConverter) payload converter}  * for more advanced scenarios.  * @see org.springframework.jms.support.converter.MessagingMessageConverter  */ public void setJmsMessageConverter(MessageConverter jmsMessageConverter) {     Assert.notNull(jmsMessageConverter, "MessageConverter must not be null").     this.jmsMessageConverter = jmsMessageConverter.     this.converterSet = true. }
true;public;0;3;/**  * Return the {@link MessageConverter} to use to convert a {@link Message}  * from the messaging to and from a {@link javax.jms.Message}.  */ ;/**  * Return the {@link MessageConverter} to use to convert a {@link Message}  * from the messaging to and from a {@link javax.jms.Message}.  */ public MessageConverter getJmsMessageConverter() {     return this.jmsMessageConverter. }
true;public;1;3;/**  * Configure the default destination name to use in send methods that don't have  * a destination argument. If a default destination is not configured, send methods  * without a destination argument will raise an exception if invoked.  * @see #setDefaultDestination(Object)  */ ;/**  * Configure the default destination name to use in send methods that don't have  * a destination argument. If a default destination is not configured, send methods  * without a destination argument will raise an exception if invoked.  * @see #setDefaultDestination(Object)  */ public void setDefaultDestinationName(@Nullable String defaultDestinationName) {     this.defaultDestinationName = defaultDestinationName. }
true;public;0;4;/**  * Return the configured default destination name.  */ ;/**  * Return the configured default destination name.  */ @Nullable public String getDefaultDestinationName() {     return this.defaultDestinationName. }
false;public;0;8;;@Override public void afterPropertiesSet() {     Assert.notNull(this.jmsTemplate, "Property 'connectionFactory' or 'jmsTemplate' is required").     if (!this.converterSet && this.jmsTemplate.getMessageConverter() != null) {         ((MessagingMessageConverter) this.jmsMessageConverter).setPayloadConverter(this.jmsTemplate.getMessageConverter()).     } }
false;private;0;4;;private JmsTemplate obtainJmsTemplate() {     Assert.state(this.jmsTemplate != null, "No JmsTemplate set").     return this.jmsTemplate. }
false;public;1;10;;@Override public void send(Message<?> message) {     Destination defaultDestination = getDefaultDestination().     if (defaultDestination != null) {         send(defaultDestination, message).     } else {         send(getRequiredDefaultDestinationName(), message).     } }
false;public;1;4;;@Override public void convertAndSend(Object payload) throws MessagingException {     convertAndSend(payload, null). }
false;public;2;10;;@Override public void convertAndSend(Object payload, @Nullable MessagePostProcessor postProcessor) throws MessagingException {     Destination defaultDestination = getDefaultDestination().     if (defaultDestination != null) {         convertAndSend(defaultDestination, payload, postProcessor).     } else {         convertAndSend(getRequiredDefaultDestinationName(), payload, postProcessor).     } }
false;public;2;4;;@Override public void send(String destinationName, Message<?> message) throws MessagingException {     doSend(destinationName, message). }
false;public;2;4;;@Override public void convertAndSend(String destinationName, Object payload) throws MessagingException {     convertAndSend(destinationName, payload, (Map<String, Object>) null). }
false;public;3;6;;@Override public void convertAndSend(String destinationName, Object payload, @Nullable Map<String, Object> headers) throws MessagingException {     convertAndSend(destinationName, payload, headers, null). }
false;public;3;6;;@Override public void convertAndSend(String destinationName, Object payload, @Nullable MessagePostProcessor postProcessor) throws MessagingException {     convertAndSend(destinationName, payload, null, postProcessor). }
false;public;4;7;;@Override public void convertAndSend(String destinationName, Object payload, @Nullable Map<String, Object> headers, @Nullable MessagePostProcessor postProcessor) throws MessagingException {     Message<?> message = doConvert(payload, headers, postProcessor).     send(destinationName, message). }
false;public;0;11;;@Override @Nullable public Message<?> receive() {     Destination defaultDestination = getDefaultDestination().     if (defaultDestination != null) {         return receive(defaultDestination).     } else {         return receive(getRequiredDefaultDestinationName()).     } }
false;public;1;11;;@Override @Nullable public <T> T receiveAndConvert(Class<T> targetClass) {     Destination defaultDestination = getDefaultDestination().     if (defaultDestination != null) {         return receiveAndConvert(defaultDestination, targetClass).     } else {         return receiveAndConvert(getRequiredDefaultDestinationName(), targetClass).     } }
false;public;1;5;;@Override @Nullable public Message<?> receive(String destinationName) throws MessagingException {     return doReceive(destinationName). }
false;public;2;11;;@Override @Nullable public <T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException {     Message<?> message = doReceive(destinationName).     if (message != null) {         return doConvert(message, targetClass).     } else {         return null.     } }
false;public;1;11;;@Override @Nullable public Message<?> sendAndReceive(Message<?> requestMessage) {     Destination defaultDestination = getDefaultDestination().     if (defaultDestination != null) {         return sendAndReceive(defaultDestination, requestMessage).     } else {         return sendAndReceive(getRequiredDefaultDestinationName(), requestMessage).     } }
false;public;2;5;;@Override @Nullable public Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException {     return doSendAndReceive(destinationName, requestMessage). }
false;public;3;7;;@Override @Nullable public <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException {     return convertSendAndReceive(destinationName, request, null, targetClass). }
false;public;2;5;;@Override @Nullable public <T> T convertSendAndReceive(Object request, Class<T> targetClass) {     return convertSendAndReceive(request, targetClass, null). }
false;public;4;7;;@Override @Nullable public <T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass) throws MessagingException {     return convertSendAndReceive(destinationName, request, headers, targetClass, null). }
false;public;3;11;;@Override @Nullable public <T> T convertSendAndReceive(Object request, Class<T> targetClass, @Nullable MessagePostProcessor postProcessor) {     Destination defaultDestination = getDefaultDestination().     if (defaultDestination != null) {         return convertSendAndReceive(defaultDestination, request, targetClass, postProcessor).     } else {         return convertSendAndReceive(getRequiredDefaultDestinationName(), request, targetClass, postProcessor).     } }
false;public;4;7;;@Override @Nullable public <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass, @Nullable MessagePostProcessor requestPostProcessor) throws MessagingException {     return convertSendAndReceive(destinationName, request, null, targetClass, requestPostProcessor). }
false;public;5;10;;@SuppressWarnings("unchecked") @Override @Nullable public <T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass, @Nullable MessagePostProcessor postProcessor) {     Message<?> requestMessage = doConvert(request, headers, postProcessor).     Message<?> replyMessage = sendAndReceive(destinationName, requestMessage).     return (replyMessage != null ? (T) getMessageConverter().fromMessage(replyMessage, targetClass) : null). }
false;protected;2;9;;@Override protected void doSend(Destination destination, Message<?> message) {     try {         obtainJmsTemplate().send(destination, createMessageCreator(message)).     } catch (JmsException ex) {         throw convertJmsException(ex).     } }
false;protected;2;8;;protected void doSend(String destinationName, Message<?> message) {     try {         obtainJmsTemplate().send(destinationName, createMessageCreator(message)).     } catch (JmsException ex) {         throw convertJmsException(ex).     } }
false;protected;1;11;;@Override @Nullable protected Message<?> doReceive(Destination destination) {     try {         javax.jms.Message jmsMessage = obtainJmsTemplate().receive(destination).         return convertJmsMessage(jmsMessage).     } catch (JmsException ex) {         throw convertJmsException(ex).     } }
false;protected;1;10;;@Nullable protected Message<?> doReceive(String destinationName) {     try {         javax.jms.Message jmsMessage = obtainJmsTemplate().receive(destinationName).         return convertJmsMessage(jmsMessage).     } catch (JmsException ex) {         throw convertJmsException(ex).     } }
false;protected;2;12;;@Override @Nullable protected Message<?> doSendAndReceive(Destination destination, Message<?> requestMessage) {     try {         javax.jms.Message jmsMessage = obtainJmsTemplate().sendAndReceive(destination, createMessageCreator(requestMessage)).         return convertJmsMessage(jmsMessage).     } catch (JmsException ex) {         throw convertJmsException(ex).     } }
false;protected;2;11;;@Nullable protected Message<?> doSendAndReceive(String destinationName, Message<?> requestMessage) {     try {         javax.jms.Message jmsMessage = obtainJmsTemplate().sendAndReceive(destinationName, createMessageCreator(requestMessage)).         return convertJmsMessage(jmsMessage).     } catch (JmsException ex) {         throw convertJmsException(ex).     } }
false;private;1;3;;private MessagingMessageCreator createMessageCreator(Message<?> message) {     return new MessagingMessageCreator(message, getJmsMessageConverter()). }
false;protected;0;8;;protected String getRequiredDefaultDestinationName() {     String name = getDefaultDestinationName().     if (name == null) {         throw new IllegalStateException("No 'defaultDestination' or 'defaultDestinationName' specified. " + "Check configuration of JmsMessagingTemplate.").     }     return name. }
false;protected;1;12;;@Nullable protected Message<?> convertJmsMessage(@Nullable javax.jms.Message message) {     if (message == null) {         return null.     }     try {         return (Message<?>) getJmsMessageConverter().fromMessage(message).     } catch (Exception ex) {         throw new MessageConversionException("Could not convert '" + message + "'", ex).     } }
false;protected;1;11;;protected MessagingException convertJmsException(JmsException ex) {     if (ex instanceof org.springframework.jms.support.destination.DestinationResolutionException || ex instanceof InvalidDestinationException) {         return new DestinationResolutionException(ex.getMessage(), ex).     }     if (ex instanceof org.springframework.jms.support.converter.MessageConversionException) {         return new MessageConversionException(ex.getMessage(), ex).     }     // Fallback     return new MessagingException(ex.getMessage(), ex). }
false;public;1;9;;@Override public javax.jms.Message createMessage(Session session) throws JMSException {     try {         return this.messageConverter.toMessage(this.message, session).     } catch (Exception ex) {         throw new MessageConversionException("Could not convert '" + this.message + "'", ex).     } }
