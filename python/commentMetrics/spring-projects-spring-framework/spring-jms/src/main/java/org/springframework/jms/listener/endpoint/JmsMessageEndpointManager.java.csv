commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the JMS MessageListener for this endpoint.  * <p>This is a shortcut for configuring a dedicated JmsMessageEndpointFactory.  * @see JmsMessageEndpointFactory#setMessageListener  */ ;/**  * Set the JMS MessageListener for this endpoint.  * <p>This is a shortcut for configuring a dedicated JmsMessageEndpointFactory.  * @see JmsMessageEndpointFactory#setMessageListener  */ public void setMessageListener(MessageListener messageListener) {     this.endpointFactory.setMessageListener(messageListener).     this.messageListenerSet = true. }
true;public;0;3;/**  * Return the JMS MessageListener for this endpoint.  */ ;/**  * Return the JMS MessageListener for this endpoint.  */ public MessageListener getMessageListener() {     return this.endpointFactory.getMessageListener(). }
true;public;1;3;/**  * Set the XA transaction manager to use for wrapping endpoint  * invocations, enlisting the endpoint resource in each such transaction.  * <p>The passed-in object may be a transaction manager which implements  * Spring's {@link org.springframework.transaction.jta.TransactionFactory}  * interface, or a plain {@link javax.transaction.TransactionManager}.  * <p>If no transaction manager is specified, the endpoint invocation  * will simply not be wrapped in an XA transaction. Consult your  * resource provider's ActivationSpec documentation for the local  * transaction options of your particular provider.  * <p>This is a shortcut for configuring a dedicated JmsMessageEndpointFactory.  * @see JmsMessageEndpointFactory#setTransactionManager  */ ;/**  * Set the XA transaction manager to use for wrapping endpoint  * invocations, enlisting the endpoint resource in each such transaction.  * <p>The passed-in object may be a transaction manager which implements  * Spring's {@link org.springframework.transaction.jta.TransactionFactory}  * interface, or a plain {@link javax.transaction.TransactionManager}.  * <p>If no transaction manager is specified, the endpoint invocation  * will simply not be wrapped in an XA transaction. Consult your  * resource provider's ActivationSpec documentation for the local  * transaction options of your particular provider.  * <p>This is a shortcut for configuring a dedicated JmsMessageEndpointFactory.  * @see JmsMessageEndpointFactory#setTransactionManager  */ public void setTransactionManager(Object transactionManager) {     this.endpointFactory.setTransactionManager(transactionManager). }
true;public;1;4;/**  * Set the factory for concrete JCA 1.5 ActivationSpec objects,  * creating JCA ActivationSpecs based on  * {@link #setActivationSpecConfig JmsActivationSpecConfig} objects.  * <p>This factory is dependent on the concrete JMS provider, e.g. on ActiveMQ.  * The default implementation simply guesses the ActivationSpec class name  * from the provider's class name (e.g. "ActiveMQResourceAdapter" ->  * "ActiveMQActivationSpec" in the same package), and populates the  * ActivationSpec properties as suggested by the JCA 1.5 specification  * (plus a couple of autodetected vendor-specific properties).  * @see DefaultJmsActivationSpecFactory  */ ;/**  * Set the factory for concrete JCA 1.5 ActivationSpec objects,  * creating JCA ActivationSpecs based on  * {@link #setActivationSpecConfig JmsActivationSpecConfig} objects.  * <p>This factory is dependent on the concrete JMS provider, e.g. on ActiveMQ.  * The default implementation simply guesses the ActivationSpec class name  * from the provider's class name (e.g. "ActiveMQResourceAdapter" ->  * "ActiveMQActivationSpec" in the same package), and populates the  * ActivationSpec properties as suggested by the JCA 1.5 specification  * (plus a couple of autodetected vendor-specific properties).  * @see DefaultJmsActivationSpecFactory  */ public void setActivationSpecFactory(@Nullable JmsActivationSpecFactory activationSpecFactory) {     this.activationSpecFactory = (activationSpecFactory != null ? activationSpecFactory : new DefaultJmsActivationSpecFactory()). }
true;public;1;5;/**  * Set the DestinationResolver to use for resolving destination names  * into the JCA 1.5 ActivationSpec "destination" property.  * <p>If not specified, destination names will simply be passed in as Strings.  * If specified, destination names will be resolved into Destination objects first.  * <p>Note that a DestinationResolver is usually specified on the JmsActivationSpecFactory  * (see {@link StandardJmsActivationSpecFactory#setDestinationResolver}). This is simply  * a shortcut for parameterizing the default JmsActivationSpecFactory. it will replace  * any custom JmsActivationSpecFactory that might have been set before.  * @see StandardJmsActivationSpecFactory#setDestinationResolver  */ ;/**  * Set the DestinationResolver to use for resolving destination names  * into the JCA 1.5 ActivationSpec "destination" property.  * <p>If not specified, destination names will simply be passed in as Strings.  * If specified, destination names will be resolved into Destination objects first.  * <p>Note that a DestinationResolver is usually specified on the JmsActivationSpecFactory  * (see {@link StandardJmsActivationSpecFactory#setDestinationResolver}). This is simply  * a shortcut for parameterizing the default JmsActivationSpecFactory. it will replace  * any custom JmsActivationSpecFactory that might have been set before.  * @see StandardJmsActivationSpecFactory#setDestinationResolver  */ public void setDestinationResolver(DestinationResolver destinationResolver) {     DefaultJmsActivationSpecFactory factory = new DefaultJmsActivationSpecFactory().     factory.setDestinationResolver(destinationResolver).     this.activationSpecFactory = factory. }
true;public;1;3;/**  * Specify the {@link JmsActivationSpecConfig} object that this endpoint manager  * should use for activating its listener.  * <p>This config object will be turned into a concrete JCA 1.5 ActivationSpec  * object through a {@link #setActivationSpecFactory JmsActivationSpecFactory}.  */ ;/**  * Specify the {@link JmsActivationSpecConfig} object that this endpoint manager  * should use for activating its listener.  * <p>This config object will be turned into a concrete JCA 1.5 ActivationSpec  * object through a {@link #setActivationSpecFactory JmsActivationSpecFactory}.  */ public void setActivationSpecConfig(@Nullable JmsActivationSpecConfig activationSpecConfig) {     this.activationSpecConfig = activationSpecConfig. }
true;public;0;4;/**  * Return the {@link JmsActivationSpecConfig} object that this endpoint manager  * should use for activating its listener. Return {@code null} if none is set.  */ ;/**  * Return the {@link JmsActivationSpecConfig} object that this endpoint manager  * should use for activating its listener. Return {@code null} if none is set.  */ @Nullable public JmsActivationSpecConfig getActivationSpecConfig() {     return this.activationSpecConfig. }
true;public;1;4;/**  * Set the name of this message endpoint. Populated with the bean name  * automatically when defined within Spring's bean factory.  */ ;/**  * Set the name of this message endpoint. Populated with the bean name  * automatically when defined within Spring's bean factory.  */ @Override public void setBeanName(String beanName) {     this.endpointFactory.setBeanName(beanName). }
false;public;0;15;;@Override public void afterPropertiesSet() throws ResourceException {     if (getResourceAdapter() == null) {         throw new IllegalArgumentException("Property 'resourceAdapter' is required").     }     if (this.messageListenerSet) {         setMessageEndpointFactory(this.endpointFactory).     }     if (this.activationSpecConfig != null) {         setActivationSpec(this.activationSpecFactory.createActivationSpec(getResourceAdapter(), this.activationSpecConfig)).     }     super.afterPropertiesSet(). }
false;public;1;11;;@Override public void setupMessageListener(Object messageListener) {     if (messageListener instanceof MessageListener) {         setMessageListener((MessageListener) messageListener).     } else {         throw new IllegalArgumentException("Unsupported message listener '" + messageListener.getClass().getName() + "': only '" + MessageListener.class.getName() + "' type is supported").     } }
false;public;0;9;;@Override @Nullable public MessageConverter getMessageConverter() {     JmsActivationSpecConfig config = getActivationSpecConfig().     if (config != null) {         return config.getMessageConverter().     }     return null. }
false;public;0;8;;@Override @Nullable public DestinationResolver getDestinationResolver() {     if (this.activationSpecFactory instanceof StandardJmsActivationSpecFactory) {         return ((StandardJmsActivationSpecFactory) this.activationSpecFactory).getDestinationResolver().     }     return null. }
false;public;0;8;;@Override public boolean isPubSubDomain() {     JmsActivationSpecConfig config = getActivationSpecConfig().     if (config != null) {         return config.isPubSubDomain().     }     throw new IllegalStateException("Could not determine pubSubDomain - no activation spec config is set"). }
false;public;0;8;;@Override public boolean isReplyPubSubDomain() {     JmsActivationSpecConfig config = getActivationSpecConfig().     if (config != null) {         return config.isReplyPubSubDomain().     }     throw new IllegalStateException("Could not determine reply pubSubDomain - no activation spec config is set"). }
false;public;0;9;;@Override @Nullable public QosSettings getReplyQosSettings() {     JmsActivationSpecConfig config = getActivationSpecConfig().     if (config != null) {         return config.getReplyQosSettings().     }     throw new IllegalStateException("Could not determine reply qosSettings - no activation spec config is set"). }
